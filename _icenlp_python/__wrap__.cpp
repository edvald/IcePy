#include <jni.h>
#include "JCCEnv.h"
#include "is/iclt/icenlp/core/lemmald/SuccessCounter.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace is {
    namespace iclt {
        namespace icenlp {
            namespace core {
                namespace lemmald {

                    ::java::lang::Class *SuccessCounter::class$ = NULL;
                    jmethodID *SuccessCounter::mids$ = NULL;

                    jclass SuccessCounter::initializeClass()
                    {
                        if (!class$)
                        {

                            jclass cls = (jclass) env->findClass("is/iclt/icenlp/core/lemmald/SuccessCounter");

                            mids$ = new jmethodID[max_mid];
                            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                            mids$[mid_getCorrect_54c6a179] = env->getMethodID(cls, "getCorrect", "()I");
                            mids$[mid_getTotal_54c6a179] = env->getMethodID(cls, "getTotal", "()I");
                            mids$[mid_getWrong_54c6a179] = env->getMethodID(cls, "getWrong", "()I");
                            mids$[mid_increment_bb0c767f] = env->getMethodID(cls, "increment", "(Z)V");
                            mids$[mid_incrementCorrect_54c6a166] = env->getMethodID(cls, "incrementCorrect", "()V");
                            mids$[mid_incrementWrong_54c6a166] = env->getMethodID(cls, "incrementWrong", "()V");

                            class$ = (::java::lang::Class *) new JObject(cls);
                        }
                        return (jclass) class$->this$;
                    }

                    SuccessCounter::SuccessCounter() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

                    jint SuccessCounter::getCorrect() const
                    {
                        return env->callIntMethod(this$, mids$[mid_getCorrect_54c6a179]);
                    }

                    jint SuccessCounter::getTotal() const
                    {
                        return env->callIntMethod(this$, mids$[mid_getTotal_54c6a179]);
                    }

                    jint SuccessCounter::getWrong() const
                    {
                        return env->callIntMethod(this$, mids$[mid_getWrong_54c6a179]);
                    }

                    void SuccessCounter::increment(jboolean a0) const
                    {
                        env->callVoidMethod(this$, mids$[mid_increment_bb0c767f], a0);
                    }

                    void SuccessCounter::incrementCorrect() const
                    {
                        env->callVoidMethod(this$, mids$[mid_incrementCorrect_54c6a166]);
                    }

                    void SuccessCounter::incrementWrong() const
                    {
                        env->callVoidMethod(this$, mids$[mid_incrementWrong_54c6a166]);
                    }
                }
            }
        }
    }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace is {
    namespace iclt {
        namespace icenlp {
            namespace core {
                namespace lemmald {
                    static PyObject *t_SuccessCounter_cast_(PyTypeObject *type, PyObject *arg);
                    static PyObject *t_SuccessCounter_instance_(PyTypeObject *type, PyObject *arg);
                    static int t_SuccessCounter_init_(t_SuccessCounter *self, PyObject *args, PyObject *kwds);
                    static PyObject *t_SuccessCounter_getCorrect(t_SuccessCounter *self);
                    static PyObject *t_SuccessCounter_getTotal(t_SuccessCounter *self);
                    static PyObject *t_SuccessCounter_getWrong(t_SuccessCounter *self);
                    static PyObject *t_SuccessCounter_increment(t_SuccessCounter *self, PyObject *arg);
                    static PyObject *t_SuccessCounter_incrementCorrect(t_SuccessCounter *self);
                    static PyObject *t_SuccessCounter_incrementWrong(t_SuccessCounter *self);
                    static PyObject *t_SuccessCounter_get__correct(t_SuccessCounter *self, void *data);
                    static PyObject *t_SuccessCounter_get__total(t_SuccessCounter *self, void *data);
                    static PyObject *t_SuccessCounter_get__wrong(t_SuccessCounter *self, void *data);
                    static PyGetSetDef t_SuccessCounter__fields_[] = {
                        DECLARE_GET_FIELD(t_SuccessCounter, correct),
                        DECLARE_GET_FIELD(t_SuccessCounter, total),
                        DECLARE_GET_FIELD(t_SuccessCounter, wrong),
                        { NULL, NULL, NULL, NULL, NULL }
                    };

                    static PyMethodDef t_SuccessCounter__methods_[] = {
                        DECLARE_METHOD(t_SuccessCounter, cast_, METH_O | METH_CLASS),
                        DECLARE_METHOD(t_SuccessCounter, instance_, METH_O | METH_CLASS),
                        DECLARE_METHOD(t_SuccessCounter, getCorrect, METH_NOARGS),
                        DECLARE_METHOD(t_SuccessCounter, getTotal, METH_NOARGS),
                        DECLARE_METHOD(t_SuccessCounter, getWrong, METH_NOARGS),
                        DECLARE_METHOD(t_SuccessCounter, increment, METH_O),
                        DECLARE_METHOD(t_SuccessCounter, incrementCorrect, METH_NOARGS),
                        DECLARE_METHOD(t_SuccessCounter, incrementWrong, METH_NOARGS),
                        { NULL, NULL, 0, NULL }
                    };

                    DECLARE_TYPE(SuccessCounter, t_SuccessCounter, ::java::lang::Object, SuccessCounter, t_SuccessCounter_init_, 0, 0, t_SuccessCounter__fields_, 0, 0);

                    void t_SuccessCounter::install(PyObject *module)
                    {
                        installType(&PY_TYPE(SuccessCounter), module, "SuccessCounter", 0);
                    }

                    void t_SuccessCounter::initialize(PyObject *module)
                    {
                        PyDict_SetItemString(PY_TYPE(SuccessCounter).tp_dict, "class_", make_descriptor(SuccessCounter::initializeClass, 1));
                        PyDict_SetItemString(PY_TYPE(SuccessCounter).tp_dict, "wrapfn_", make_descriptor(t_SuccessCounter::wrap_jobject));
                        PyDict_SetItemString(PY_TYPE(SuccessCounter).tp_dict, "boxfn_", make_descriptor(boxObject));
                    }

                    static PyObject *t_SuccessCounter_cast_(PyTypeObject *type, PyObject *arg)
                    {
                        if (!(arg = castCheck(arg, SuccessCounter::initializeClass, 1)))
                            return NULL;
                        return t_SuccessCounter::wrap_Object(SuccessCounter(((t_SuccessCounter *) arg)->object.this$));
                    }
                    static PyObject *t_SuccessCounter_instance_(PyTypeObject *type, PyObject *arg)
                    {
                        if (!castCheck(arg, SuccessCounter::initializeClass, 0))
                            Py_RETURN_FALSE;
                        Py_RETURN_TRUE;
                    }

                    static int t_SuccessCounter_init_(t_SuccessCounter *self, PyObject *args, PyObject *kwds)
                    {
                        SuccessCounter object((jobject) NULL);

                        INT_CALL(object = SuccessCounter());
                        self->object = object;

                        return 0;
                    }

                    static PyObject *t_SuccessCounter_getCorrect(t_SuccessCounter *self)
                    {
                        jint result;
                        OBJ_CALL(result = self->object.getCorrect());
                        return PyInt_FromLong((long) result);
                    }

                    static PyObject *t_SuccessCounter_getTotal(t_SuccessCounter *self)
                    {
                        jint result;
                        OBJ_CALL(result = self->object.getTotal());
                        return PyInt_FromLong((long) result);
                    }

                    static PyObject *t_SuccessCounter_getWrong(t_SuccessCounter *self)
                    {
                        jint result;
                        OBJ_CALL(result = self->object.getWrong());
                        return PyInt_FromLong((long) result);
                    }

                    static PyObject *t_SuccessCounter_increment(t_SuccessCounter *self, PyObject *arg)
                    {
                        jboolean a0;

                        if (!parseArg(arg, "Z", &a0))
                        {
                            OBJ_CALL(self->object.increment(a0));
                            Py_RETURN_NONE;
                        }

                        PyErr_SetArgsError((PyObject *) self, "increment", arg);
                        return NULL;
                    }

                    static PyObject *t_SuccessCounter_incrementCorrect(t_SuccessCounter *self)
                    {
                        OBJ_CALL(self->object.incrementCorrect());
                        Py_RETURN_NONE;
                    }

                    static PyObject *t_SuccessCounter_incrementWrong(t_SuccessCounter *self)
                    {
                        OBJ_CALL(self->object.incrementWrong());
                        Py_RETURN_NONE;
                    }

                    static PyObject *t_SuccessCounter_get__correct(t_SuccessCounter *self, void *data)
                    {
                        jint value;
                        OBJ_CALL(value = self->object.getCorrect());
                        return PyInt_FromLong((long) value);
                    }

                    static PyObject *t_SuccessCounter_get__total(t_SuccessCounter *self, void *data)
                    {
                        jint value;
                        OBJ_CALL(value = self->object.getTotal());
                        return PyInt_FromLong((long) value);
                    }

                    static PyObject *t_SuccessCounter_get__wrong(t_SuccessCounter *self, void *data)
                    {
                        jint value;
                        OBJ_CALL(value = self->object.getWrong());
                        return PyInt_FromLong((long) value);
                    }
                }
            }
        }
    }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/util/Dictionary.h"
#include "java/util/Enumeration.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace java {
    namespace util {

        ::java::lang::Class *Dictionary::class$ = NULL;
        jmethodID *Dictionary::mids$ = NULL;

        jclass Dictionary::initializeClass()
        {
            if (!class$)
            {

                jclass cls = (jclass) env->findClass("java/util/Dictionary");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                mids$[mid_elements_39f88070] = env->getMethodID(cls, "elements", "()Ljava/util/Enumeration;");
                mids$[mid_get_a932a95f] = env->getMethodID(cls, "get", "(Ljava/lang/Object;)Ljava/lang/Object;");
                mids$[mid_isEmpty_54c6a16a] = env->getMethodID(cls, "isEmpty", "()Z");
                mids$[mid_keys_39f88070] = env->getMethodID(cls, "keys", "()Ljava/util/Enumeration;");
                mids$[mid_put_537d5bdf] = env->getMethodID(cls, "put", "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;");
                mids$[mid_remove_a932a95f] = env->getMethodID(cls, "remove", "(Ljava/lang/Object;)Ljava/lang/Object;");
                mids$[mid_size_54c6a179] = env->getMethodID(cls, "size", "()I");

                class$ = (::java::lang::Class *) new JObject(cls);
            }
            return (jclass) class$->this$;
        }

        Dictionary::Dictionary() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        ::java::util::Enumeration Dictionary::elements() const
        {
            return ::java::util::Enumeration(env->callObjectMethod(this$, mids$[mid_elements_39f88070]));
        }

        ::java::lang::Object Dictionary::get(const ::java::lang::Object & a0) const
        {
            return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_get_a932a95f], a0.this$));
        }

        jboolean Dictionary::isEmpty() const
        {
            return env->callBooleanMethod(this$, mids$[mid_isEmpty_54c6a16a]);
        }

        ::java::util::Enumeration Dictionary::keys() const
        {
            return ::java::util::Enumeration(env->callObjectMethod(this$, mids$[mid_keys_39f88070]));
        }

        ::java::lang::Object Dictionary::put(const ::java::lang::Object & a0, const ::java::lang::Object & a1) const
        {
            return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_put_537d5bdf], a0.this$, a1.this$));
        }

        ::java::lang::Object Dictionary::remove(const ::java::lang::Object & a0) const
        {
            return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_remove_a932a95f], a0.this$));
        }

        jint Dictionary::size() const
        {
            return env->callIntMethod(this$, mids$[mid_size_54c6a179]);
        }
    }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
    namespace util {
        static PyObject *t_Dictionary_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Dictionary_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Dictionary_of_(t_Dictionary *self, PyObject *args);
        static int t_Dictionary_init_(t_Dictionary *self, PyObject *args, PyObject *kwds);
        static PyObject *t_Dictionary_elements(t_Dictionary *self);
        static PyObject *t_Dictionary_get(t_Dictionary *self, PyObject *arg);
        static PyObject *t_Dictionary_isEmpty(t_Dictionary *self);
        static PyObject *t_Dictionary_keys(t_Dictionary *self);
        static PyObject *t_Dictionary_put(t_Dictionary *self, PyObject *args);
        static PyObject *t_Dictionary_remove(t_Dictionary *self, PyObject *arg);
        static PyObject *t_Dictionary_size(t_Dictionary *self);
        static PyObject *t_Dictionary_get__empty(t_Dictionary *self, void *data);
        static PyObject *t_Dictionary_get__parameters_(t_Dictionary *self, void *data);
        static PyGetSetDef t_Dictionary__fields_[] = {
            DECLARE_GET_FIELD(t_Dictionary, empty),
            DECLARE_GET_FIELD(t_Dictionary, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_Dictionary__methods_[] = {
            DECLARE_METHOD(t_Dictionary, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Dictionary, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Dictionary, of_, METH_VARARGS),
            DECLARE_METHOD(t_Dictionary, elements, METH_NOARGS),
            DECLARE_METHOD(t_Dictionary, get, METH_O),
            DECLARE_METHOD(t_Dictionary, isEmpty, METH_NOARGS),
            DECLARE_METHOD(t_Dictionary, keys, METH_NOARGS),
            DECLARE_METHOD(t_Dictionary, put, METH_VARARGS),
            DECLARE_METHOD(t_Dictionary, remove, METH_O),
            DECLARE_METHOD(t_Dictionary, size, METH_NOARGS),
            { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(Dictionary, t_Dictionary, ::java::lang::Object, Dictionary, t_Dictionary_init_, 0, 0, t_Dictionary__fields_, 0, 0);
        PyObject *t_Dictionary::wrap_Object(const Dictionary& object, PyTypeObject *K, PyTypeObject *V)
        {
            PyObject *obj = t_Dictionary::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
                t_Dictionary *self = (t_Dictionary *) obj;
                self->parameters[0] = K;
                self->parameters[1] = V;
            }
            return obj;
        }

        PyObject *t_Dictionary::wrap_jobject(const jobject& object, PyTypeObject *K, PyTypeObject *V)
        {
            PyObject *obj = t_Dictionary::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
                t_Dictionary *self = (t_Dictionary *) obj;
                self->parameters[0] = K;
                self->parameters[1] = V;
            }
            return obj;
        }

        void t_Dictionary::install(PyObject *module)
        {
            installType(&PY_TYPE(Dictionary), module, "Dictionary", 0);
        }

        void t_Dictionary::initialize(PyObject *module)
        {
            PyDict_SetItemString(PY_TYPE(Dictionary).tp_dict, "class_", make_descriptor(Dictionary::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Dictionary).tp_dict, "wrapfn_", make_descriptor(t_Dictionary::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Dictionary).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_Dictionary_cast_(PyTypeObject *type, PyObject *arg)
        {
            if (!(arg = castCheck(arg, Dictionary::initializeClass, 1)))
                return NULL;
            return t_Dictionary::wrap_Object(Dictionary(((t_Dictionary *) arg)->object.this$));
        }
        static PyObject *t_Dictionary_instance_(PyTypeObject *type, PyObject *arg)
        {
            if (!castCheck(arg, Dictionary::initializeClass, 0))
                Py_RETURN_FALSE;
            Py_RETURN_TRUE;
        }

        static PyObject *t_Dictionary_of_(t_Dictionary *self, PyObject *args)
        {
            if (!parseArg(args, "T", 2, &(self->parameters)))
                Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static int t_Dictionary_init_(t_Dictionary *self, PyObject *args, PyObject *kwds)
        {
            Dictionary object((jobject) NULL);

            INT_CALL(object = Dictionary());
            self->object = object;

            return 0;
        }

        static PyObject *t_Dictionary_elements(t_Dictionary *self)
        {
            ::java::util::Enumeration result((jobject) NULL);
            OBJ_CALL(result = self->object.elements());
            return ::java::util::t_Enumeration::wrap_Object(result, self->parameters[1]);
        }

        static PyObject *t_Dictionary_get(t_Dictionary *self, PyObject *arg)
        {
            ::java::lang::Object a0((jobject) NULL);
            ::java::lang::Object result((jobject) NULL);

            if (!parseArg(arg, "o", &a0))
            {
                OBJ_CALL(result = self->object.get(a0));
                return self->parameters[1] != NULL ? wrapType(self->parameters[1], result.this$) : ::java::lang::t_Object::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "get", arg);
            return NULL;
        }

        static PyObject *t_Dictionary_isEmpty(t_Dictionary *self)
        {
            jboolean result;
            OBJ_CALL(result = self->object.isEmpty());
            Py_RETURN_BOOL(result);
        }

        static PyObject *t_Dictionary_keys(t_Dictionary *self)
        {
            ::java::util::Enumeration result((jobject) NULL);
            OBJ_CALL(result = self->object.keys());
            return ::java::util::t_Enumeration::wrap_Object(result, self->parameters[0]);
        }

        static PyObject *t_Dictionary_put(t_Dictionary *self, PyObject *args)
        {
            ::java::lang::Object a0((jobject) NULL);
            ::java::lang::Object a1((jobject) NULL);
            ::java::lang::Object result((jobject) NULL);

            if (!parseArgs(args, "OO", self->parameters[0], self->parameters[1], &a0, &a1))
            {
                OBJ_CALL(result = self->object.put(a0, a1));
                return self->parameters[1] != NULL ? wrapType(self->parameters[1], result.this$) : ::java::lang::t_Object::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "put", args);
            return NULL;
        }

        static PyObject *t_Dictionary_remove(t_Dictionary *self, PyObject *arg)
        {
            ::java::lang::Object a0((jobject) NULL);
            ::java::lang::Object result((jobject) NULL);

            if (!parseArg(arg, "o", &a0))
            {
                OBJ_CALL(result = self->object.remove(a0));
                return self->parameters[1] != NULL ? wrapType(self->parameters[1], result.this$) : ::java::lang::t_Object::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "remove", arg);
            return NULL;
        }

        static PyObject *t_Dictionary_size(t_Dictionary *self)
        {
            jint result;
            OBJ_CALL(result = self->object.size());
            return PyInt_FromLong((long) result);
        }
        static PyObject *t_Dictionary_get__parameters_(t_Dictionary *self, void *data)
        {
            return typeParameters(self->parameters, sizeof(self->parameters));
        }

        static PyObject *t_Dictionary_get__empty(t_Dictionary *self, void *data)
        {
            jboolean value;
            OBJ_CALL(value = self->object.isEmpty());
            Py_RETURN_BOOL(value);
        }
    }
}
#include <jni.h>
#include "JCCEnv.h"
#include "is/iclt/icenlp/core/tritagger/TriTaggerResources.h"
#include "java/lang/Class.h"
#include "java/io/InputStream.h"
#include "JArray.h"

namespace is {
    namespace iclt {
        namespace icenlp {
            namespace core {
                namespace tritagger {

                    ::java::lang::Class *TriTaggerResources::class$ = NULL;
                    jmethodID *TriTaggerResources::mids$ = NULL;
                    jfieldID *TriTaggerResources::fids$ = NULL;

                    jclass TriTaggerResources::initializeClass()
                    {
                        if (!class$)
                        {

                            jclass cls = (jclass) env->findClass("is/iclt/icenlp/core/tritagger/TriTaggerResources");

                            mids$ = new jmethodID[max_mid];
                            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");

                            fids$ = new jfieldID[max_fid];
                            fids$[fid_isFrequency] = env->getFieldID(cls, "isFrequency", "Ljava/io/InputStream;");
                            fids$[fid_isLambda] = env->getFieldID(cls, "isLambda", "Ljava/io/InputStream;");
                            fids$[fid_isNgrams] = env->getFieldID(cls, "isNgrams", "Ljava/io/InputStream;");

                            class$ = (::java::lang::Class *) new JObject(cls);
                        }
                        return (jclass) class$->this$;
                    }

                    TriTaggerResources::TriTaggerResources() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

                    ::java::io::InputStream TriTaggerResources::_get_isFrequency() const
                    {
                        return ::java::io::InputStream(env->getObjectField(this$, fids$[fid_isFrequency]));
                    }

                    void TriTaggerResources::_set_isFrequency(const ::java::io::InputStream & a0) const
                    {
                        env->setObjectField(this$, fids$[fid_isFrequency], a0.this$);
                    }

                    ::java::io::InputStream TriTaggerResources::_get_isLambda() const
                    {
                        return ::java::io::InputStream(env->getObjectField(this$, fids$[fid_isLambda]));
                    }

                    void TriTaggerResources::_set_isLambda(const ::java::io::InputStream & a0) const
                    {
                        env->setObjectField(this$, fids$[fid_isLambda], a0.this$);
                    }

                    ::java::io::InputStream TriTaggerResources::_get_isNgrams() const
                    {
                        return ::java::io::InputStream(env->getObjectField(this$, fids$[fid_isNgrams]));
                    }

                    void TriTaggerResources::_set_isNgrams(const ::java::io::InputStream & a0) const
                    {
                        env->setObjectField(this$, fids$[fid_isNgrams], a0.this$);
                    }
                }
            }
        }
    }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace is {
    namespace iclt {
        namespace icenlp {
            namespace core {
                namespace tritagger {
                    static PyObject *t_TriTaggerResources_cast_(PyTypeObject *type, PyObject *arg);
                    static PyObject *t_TriTaggerResources_instance_(PyTypeObject *type, PyObject *arg);
                    static int t_TriTaggerResources_init_(t_TriTaggerResources *self, PyObject *args, PyObject *kwds);
                    static PyObject *t_TriTaggerResources_get__isFrequency(t_TriTaggerResources *self, void *data);
                    static int t_TriTaggerResources_set__isFrequency(t_TriTaggerResources *self, PyObject *arg, void *data);
                    static PyObject *t_TriTaggerResources_get__isLambda(t_TriTaggerResources *self, void *data);
                    static int t_TriTaggerResources_set__isLambda(t_TriTaggerResources *self, PyObject *arg, void *data);
                    static PyObject *t_TriTaggerResources_get__isNgrams(t_TriTaggerResources *self, void *data);
                    static int t_TriTaggerResources_set__isNgrams(t_TriTaggerResources *self, PyObject *arg, void *data);

                    static PyGetSetDef t_TriTaggerResources__fields_[] = {
                        DECLARE_GETSET_FIELD(t_TriTaggerResources, isFrequency),
                        DECLARE_GETSET_FIELD(t_TriTaggerResources, isLambda),
                        DECLARE_GETSET_FIELD(t_TriTaggerResources, isNgrams),
                        { NULL, NULL, NULL, NULL, NULL }
                    };

                    static PyMethodDef t_TriTaggerResources__methods_[] = {
                        DECLARE_METHOD(t_TriTaggerResources, cast_, METH_O | METH_CLASS),
                        DECLARE_METHOD(t_TriTaggerResources, instance_, METH_O | METH_CLASS),
                        { NULL, NULL, 0, NULL }
                    };

                    DECLARE_TYPE(TriTaggerResources, t_TriTaggerResources, ::java::lang::Object, TriTaggerResources, t_TriTaggerResources_init_, 0, 0, t_TriTaggerResources__fields_, 0, 0);

                    void t_TriTaggerResources::install(PyObject *module)
                    {
                        installType(&PY_TYPE(TriTaggerResources), module, "TriTaggerResources", 0);
                    }

                    void t_TriTaggerResources::initialize(PyObject *module)
                    {
                        PyDict_SetItemString(PY_TYPE(TriTaggerResources).tp_dict, "class_", make_descriptor(TriTaggerResources::initializeClass, 1));
                        PyDict_SetItemString(PY_TYPE(TriTaggerResources).tp_dict, "wrapfn_", make_descriptor(t_TriTaggerResources::wrap_jobject));
                        PyDict_SetItemString(PY_TYPE(TriTaggerResources).tp_dict, "boxfn_", make_descriptor(boxObject));
                    }

                    static PyObject *t_TriTaggerResources_cast_(PyTypeObject *type, PyObject *arg)
                    {
                        if (!(arg = castCheck(arg, TriTaggerResources::initializeClass, 1)))
                            return NULL;
                        return t_TriTaggerResources::wrap_Object(TriTaggerResources(((t_TriTaggerResources *) arg)->object.this$));
                    }
                    static PyObject *t_TriTaggerResources_instance_(PyTypeObject *type, PyObject *arg)
                    {
                        if (!castCheck(arg, TriTaggerResources::initializeClass, 0))
                            Py_RETURN_FALSE;
                        Py_RETURN_TRUE;
                    }

                    static int t_TriTaggerResources_init_(t_TriTaggerResources *self, PyObject *args, PyObject *kwds)
                    {
                        TriTaggerResources object((jobject) NULL);

                        INT_CALL(object = TriTaggerResources());
                        self->object = object;

                        return 0;
                    }

                    static PyObject *t_TriTaggerResources_get__isFrequency(t_TriTaggerResources *self, void *data)
                    {
                        ::java::io::InputStream value((jobject) NULL);
                        OBJ_CALL(value = self->object._get_isFrequency());
                        return ::java::io::t_InputStream::wrap_Object(value);
                    }
                    static int t_TriTaggerResources_set__isFrequency(t_TriTaggerResources *self, PyObject *arg, void *data)
                    {
                        ::java::io::InputStream value((jobject) NULL);
                        if (!parseArg(arg, "k", ::java::io::InputStream::initializeClass, &value))
                        {
                            INT_CALL(self->object._set_isFrequency(value));
                            return 0;
                        }
                        PyErr_SetArgsError((PyObject *) self, "isFrequency", arg);
                        return -1;
                    }

                    static PyObject *t_TriTaggerResources_get__isLambda(t_TriTaggerResources *self, void *data)
                    {
                        ::java::io::InputStream value((jobject) NULL);
                        OBJ_CALL(value = self->object._get_isLambda());
                        return ::java::io::t_InputStream::wrap_Object(value);
                    }
                    static int t_TriTaggerResources_set__isLambda(t_TriTaggerResources *self, PyObject *arg, void *data)
                    {
                        ::java::io::InputStream value((jobject) NULL);
                        if (!parseArg(arg, "k", ::java::io::InputStream::initializeClass, &value))
                        {
                            INT_CALL(self->object._set_isLambda(value));
                            return 0;
                        }
                        PyErr_SetArgsError((PyObject *) self, "isLambda", arg);
                        return -1;
                    }

                    static PyObject *t_TriTaggerResources_get__isNgrams(t_TriTaggerResources *self, void *data)
                    {
                        ::java::io::InputStream value((jobject) NULL);
                        OBJ_CALL(value = self->object._get_isNgrams());
                        return ::java::io::t_InputStream::wrap_Object(value);
                    }
                    static int t_TriTaggerResources_set__isNgrams(t_TriTaggerResources *self, PyObject *arg, void *data)
                    {
                        ::java::io::InputStream value((jobject) NULL);
                        if (!parseArg(arg, "k", ::java::io::InputStream::initializeClass, &value))
                        {
                            INT_CALL(self->object._set_isNgrams(value));
                            return 0;
                        }
                        PyErr_SetArgsError((PyObject *) self, "isNgrams", arg);
                        return -1;
                    }
                }
            }
        }
    }
}
#include <jni.h>
#include "JCCEnv.h"
#include "is/iclt/icenlp/core/icemorphy/MorphoRules.h"
#include "is/iclt/icenlp/core/icemorphy/MorphoRuleVerbFinite.h"
#include "java/util/ArrayList.h"
#include "is/iclt/icenlp/core/icemorphy/MorphoRuleVerb.h"
#include "is/iclt/icenlp/core/icemorphy/MorphoRuleNounAdjective.h"
#include "java/lang/Class.h"
#include "is/iclt/icenlp/core/icemorphy/MorphoRuleVerbPastParticiple.h"
#include "JArray.h"

namespace is {
    namespace iclt {
        namespace icenlp {
            namespace core {
                namespace icemorphy {

                    ::java::lang::Class *MorphoRules::class$ = NULL;
                    jmethodID *MorphoRules::mids$ = NULL;
                    jfieldID *MorphoRules::fids$ = NULL;

                    jclass MorphoRules::initializeClass()
                    {
                        if (!class$)
                        {

                            jclass cls = (jclass) env->findClass("is/iclt/icenlp/core/icemorphy/MorphoRules");

                            mids$ = new jmethodID[max_mid];
                            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                            mids$[mid_createNounAdjectivePluralRules_54c6a166] = env->getMethodID(cls, "createNounAdjectivePluralRules", "()V");
                            mids$[mid_createNounAdjectiveSingularRules_54c6a166] = env->getMethodID(cls, "createNounAdjectiveSingularRules", "()V");
                            mids$[mid_createNounArticleRules_54c6a166] = env->getMethodID(cls, "createNounArticleRules", "()V");
                            mids$[mid_createVerbFiniteRules_54c6a166] = env->getMethodID(cls, "createVerbFiniteRules", "()V");
                            mids$[mid_createVerbPastParticipleRules_54c6a166] = env->getMethodID(cls, "createVerbPastParticipleRules", "()V");
                            mids$[mid_createVerbRules_54c6a166] = env->getMethodID(cls, "createVerbRules", "()V");

                            fids$ = new jfieldID[max_fid];
                            fids$[fid_listNounAdjectivePlural] = env->getFieldID(cls, "listNounAdjectivePlural", "Ljava/util/ArrayList;");
                            fids$[fid_listNounAdjectiveSingular] = env->getFieldID(cls, "listNounAdjectiveSingular", "Ljava/util/ArrayList;");
                            fids$[fid_listNounArticle] = env->getFieldID(cls, "listNounArticle", "Ljava/util/ArrayList;");
                            fids$[fid_listVerb] = env->getFieldID(cls, "listVerb", "Ljava/util/ArrayList;");
                            fids$[fid_listVerbFinite] = env->getFieldID(cls, "listVerbFinite", "Ljava/util/ArrayList;");
                            fids$[fid_listVerbPastParticiple] = env->getFieldID(cls, "listVerbPastParticiple", "Ljava/util/ArrayList;");

                            class$ = (::java::lang::Class *) new JObject(cls);
                        }
                        return (jclass) class$->this$;
                    }

                    MorphoRules::MorphoRules() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

                    void MorphoRules::createNounAdjectivePluralRules() const
                    {
                        env->callVoidMethod(this$, mids$[mid_createNounAdjectivePluralRules_54c6a166]);
                    }

                    void MorphoRules::createNounAdjectiveSingularRules() const
                    {
                        env->callVoidMethod(this$, mids$[mid_createNounAdjectiveSingularRules_54c6a166]);
                    }

                    void MorphoRules::createNounArticleRules() const
                    {
                        env->callVoidMethod(this$, mids$[mid_createNounArticleRules_54c6a166]);
                    }

                    void MorphoRules::createVerbFiniteRules() const
                    {
                        env->callVoidMethod(this$, mids$[mid_createVerbFiniteRules_54c6a166]);
                    }

                    void MorphoRules::createVerbPastParticipleRules() const
                    {
                        env->callVoidMethod(this$, mids$[mid_createVerbPastParticipleRules_54c6a166]);
                    }

                    void MorphoRules::createVerbRules() const
                    {
                        env->callVoidMethod(this$, mids$[mid_createVerbRules_54c6a166]);
                    }

                    ::java::util::ArrayList MorphoRules::_get_listNounAdjectivePlural() const
                    {
                        return ::java::util::ArrayList(env->getObjectField(this$, fids$[fid_listNounAdjectivePlural]));
                    }

                    void MorphoRules::_set_listNounAdjectivePlural(const ::java::util::ArrayList & a0) const
                    {
                        env->setObjectField(this$, fids$[fid_listNounAdjectivePlural], a0.this$);
                    }

                    ::java::util::ArrayList MorphoRules::_get_listNounAdjectiveSingular() const
                    {
                        return ::java::util::ArrayList(env->getObjectField(this$, fids$[fid_listNounAdjectiveSingular]));
                    }

                    void MorphoRules::_set_listNounAdjectiveSingular(const ::java::util::ArrayList & a0) const
                    {
                        env->setObjectField(this$, fids$[fid_listNounAdjectiveSingular], a0.this$);
                    }

                    ::java::util::ArrayList MorphoRules::_get_listNounArticle() const
                    {
                        return ::java::util::ArrayList(env->getObjectField(this$, fids$[fid_listNounArticle]));
                    }

                    void MorphoRules::_set_listNounArticle(const ::java::util::ArrayList & a0) const
                    {
                        env->setObjectField(this$, fids$[fid_listNounArticle], a0.this$);
                    }

                    ::java::util::ArrayList MorphoRules::_get_listVerb() const
                    {
                        return ::java::util::ArrayList(env->getObjectField(this$, fids$[fid_listVerb]));
                    }

                    void MorphoRules::_set_listVerb(const ::java::util::ArrayList & a0) const
                    {
                        env->setObjectField(this$, fids$[fid_listVerb], a0.this$);
                    }

                    ::java::util::ArrayList MorphoRules::_get_listVerbFinite() const
                    {
                        return ::java::util::ArrayList(env->getObjectField(this$, fids$[fid_listVerbFinite]));
                    }

                    void MorphoRules::_set_listVerbFinite(const ::java::util::ArrayList & a0) const
                    {
                        env->setObjectField(this$, fids$[fid_listVerbFinite], a0.this$);
                    }

                    ::java::util::ArrayList MorphoRules::_get_listVerbPastParticiple() const
                    {
                        return ::java::util::ArrayList(env->getObjectField(this$, fids$[fid_listVerbPastParticiple]));
                    }

                    void MorphoRules::_set_listVerbPastParticiple(const ::java::util::ArrayList & a0) const
                    {
                        env->setObjectField(this$, fids$[fid_listVerbPastParticiple], a0.this$);
                    }
                }
            }
        }
    }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace is {
    namespace iclt {
        namespace icenlp {
            namespace core {
                namespace icemorphy {
                    static PyObject *t_MorphoRules_cast_(PyTypeObject *type, PyObject *arg);
                    static PyObject *t_MorphoRules_instance_(PyTypeObject *type, PyObject *arg);
                    static int t_MorphoRules_init_(t_MorphoRules *self, PyObject *args, PyObject *kwds);
                    static PyObject *t_MorphoRules_createNounAdjectivePluralRules(t_MorphoRules *self);
                    static PyObject *t_MorphoRules_createNounAdjectiveSingularRules(t_MorphoRules *self);
                    static PyObject *t_MorphoRules_createNounArticleRules(t_MorphoRules *self);
                    static PyObject *t_MorphoRules_createVerbFiniteRules(t_MorphoRules *self);
                    static PyObject *t_MorphoRules_createVerbPastParticipleRules(t_MorphoRules *self);
                    static PyObject *t_MorphoRules_createVerbRules(t_MorphoRules *self);
                    static PyObject *t_MorphoRules_get__listNounAdjectivePlural(t_MorphoRules *self, void *data);
                    static int t_MorphoRules_set__listNounAdjectivePlural(t_MorphoRules *self, PyObject *arg, void *data);
                    static PyObject *t_MorphoRules_get__listNounAdjectiveSingular(t_MorphoRules *self, void *data);
                    static int t_MorphoRules_set__listNounAdjectiveSingular(t_MorphoRules *self, PyObject *arg, void *data);
                    static PyObject *t_MorphoRules_get__listNounArticle(t_MorphoRules *self, void *data);
                    static int t_MorphoRules_set__listNounArticle(t_MorphoRules *self, PyObject *arg, void *data);
                    static PyObject *t_MorphoRules_get__listVerb(t_MorphoRules *self, void *data);
                    static int t_MorphoRules_set__listVerb(t_MorphoRules *self, PyObject *arg, void *data);
                    static PyObject *t_MorphoRules_get__listVerbFinite(t_MorphoRules *self, void *data);
                    static int t_MorphoRules_set__listVerbFinite(t_MorphoRules *self, PyObject *arg, void *data);
                    static PyObject *t_MorphoRules_get__listVerbPastParticiple(t_MorphoRules *self, void *data);
                    static int t_MorphoRules_set__listVerbPastParticiple(t_MorphoRules *self, PyObject *arg, void *data);

                    static PyGetSetDef t_MorphoRules__fields_[] = {
                        DECLARE_GETSET_FIELD(t_MorphoRules, listNounAdjectivePlural),
                        DECLARE_GETSET_FIELD(t_MorphoRules, listNounAdjectiveSingular),
                        DECLARE_GETSET_FIELD(t_MorphoRules, listNounArticle),
                        DECLARE_GETSET_FIELD(t_MorphoRules, listVerb),
                        DECLARE_GETSET_FIELD(t_MorphoRules, listVerbFinite),
                        DECLARE_GETSET_FIELD(t_MorphoRules, listVerbPastParticiple),
                        { NULL, NULL, NULL, NULL, NULL }
                    };

                    static PyMethodDef t_MorphoRules__methods_[] = {
                        DECLARE_METHOD(t_MorphoRules, cast_, METH_O | METH_CLASS),
                        DECLARE_METHOD(t_MorphoRules, instance_, METH_O | METH_CLASS),
                        DECLARE_METHOD(t_MorphoRules, createNounAdjectivePluralRules, METH_NOARGS),
                        DECLARE_METHOD(t_MorphoRules, createNounAdjectiveSingularRules, METH_NOARGS),
                        DECLARE_METHOD(t_MorphoRules, createNounArticleRules, METH_NOARGS),
                        DECLARE_METHOD(t_MorphoRules, createVerbFiniteRules, METH_NOARGS),
                        DECLARE_METHOD(t_MorphoRules, createVerbPastParticipleRules, METH_NOARGS),
                        DECLARE_METHOD(t_MorphoRules, createVerbRules, METH_NOARGS),
                        { NULL, NULL, 0, NULL }
                    };

                    DECLARE_TYPE(MorphoRules, t_MorphoRules, ::java::lang::Object, MorphoRules, t_MorphoRules_init_, 0, 0, t_MorphoRules__fields_, 0, 0);

                    void t_MorphoRules::install(PyObject *module)
                    {
                        installType(&PY_TYPE(MorphoRules), module, "MorphoRules", 0);
                    }

                    void t_MorphoRules::initialize(PyObject *module)
                    {
                        PyDict_SetItemString(PY_TYPE(MorphoRules).tp_dict, "class_", make_descriptor(MorphoRules::initializeClass, 1));
                        PyDict_SetItemString(PY_TYPE(MorphoRules).tp_dict, "wrapfn_", make_descriptor(t_MorphoRules::wrap_jobject));
                        PyDict_SetItemString(PY_TYPE(MorphoRules).tp_dict, "boxfn_", make_descriptor(boxObject));
                    }

                    static PyObject *t_MorphoRules_cast_(PyTypeObject *type, PyObject *arg)
                    {
                        if (!(arg = castCheck(arg, MorphoRules::initializeClass, 1)))
                            return NULL;
                        return t_MorphoRules::wrap_Object(MorphoRules(((t_MorphoRules *) arg)->object.this$));
                    }
                    static PyObject *t_MorphoRules_instance_(PyTypeObject *type, PyObject *arg)
                    {
                        if (!castCheck(arg, MorphoRules::initializeClass, 0))
                            Py_RETURN_FALSE;
                        Py_RETURN_TRUE;
                    }

                    static int t_MorphoRules_init_(t_MorphoRules *self, PyObject *args, PyObject *kwds)
                    {
                        MorphoRules object((jobject) NULL);

                        INT_CALL(object = MorphoRules());
                        self->object = object;

                        return 0;
                    }

                    static PyObject *t_MorphoRules_createNounAdjectivePluralRules(t_MorphoRules *self)
                    {
                        OBJ_CALL(self->object.createNounAdjectivePluralRules());
                        Py_RETURN_NONE;
                    }

                    static PyObject *t_MorphoRules_createNounAdjectiveSingularRules(t_MorphoRules *self)
                    {
                        OBJ_CALL(self->object.createNounAdjectiveSingularRules());
                        Py_RETURN_NONE;
                    }

                    static PyObject *t_MorphoRules_createNounArticleRules(t_MorphoRules *self)
                    {
                        OBJ_CALL(self->object.createNounArticleRules());
                        Py_RETURN_NONE;
                    }

                    static PyObject *t_MorphoRules_createVerbFiniteRules(t_MorphoRules *self)
                    {
                        OBJ_CALL(self->object.createVerbFiniteRules());
                        Py_RETURN_NONE;
                    }

                    static PyObject *t_MorphoRules_createVerbPastParticipleRules(t_MorphoRules *self)
                    {
                        OBJ_CALL(self->object.createVerbPastParticipleRules());
                        Py_RETURN_NONE;
                    }

                    static PyObject *t_MorphoRules_createVerbRules(t_MorphoRules *self)
                    {
                        OBJ_CALL(self->object.createVerbRules());
                        Py_RETURN_NONE;
                    }

                    static PyObject *t_MorphoRules_get__listNounAdjectivePlural(t_MorphoRules *self, void *data)
                    {
                        ::java::util::ArrayList value((jobject) NULL);
                        OBJ_CALL(value = self->object._get_listNounAdjectivePlural());
                        return ::java::util::t_ArrayList::wrap_Object(value);
                    }
                    static int t_MorphoRules_set__listNounAdjectivePlural(t_MorphoRules *self, PyObject *arg, void *data)
                    {
                        ::java::util::ArrayList value((jobject) NULL);
                        if (!parseArg(arg, "k", ::java::util::ArrayList::initializeClass, &value))
                        {
                            INT_CALL(self->object._set_listNounAdjectivePlural(value));
                            return 0;
                        }
                        PyErr_SetArgsError((PyObject *) self, "listNounAdjectivePlural", arg);
                        return -1;
                    }

                    static PyObject *t_MorphoRules_get__listNounAdjectiveSingular(t_MorphoRules *self, void *data)
                    {
                        ::java::util::ArrayList value((jobject) NULL);
                        OBJ_CALL(value = self->object._get_listNounAdjectiveSingular());
                        return ::java::util::t_ArrayList::wrap_Object(value);
                    }
                    static int t_MorphoRules_set__listNounAdjectiveSingular(t_MorphoRules *self, PyObject *arg, void *data)
                    {
                        ::java::util::ArrayList value((jobject) NULL);
                        if (!parseArg(arg, "k", ::java::util::ArrayList::initializeClass, &value))
                        {
                            INT_CALL(self->object._set_listNounAdjectiveSingular(value));
                            return 0;
                        }
                        PyErr_SetArgsError((PyObject *) self, "listNounAdjectiveSingular", arg);
                        return -1;
                    }

                    static PyObject *t_MorphoRules_get__listNounArticle(t_MorphoRules *self, void *data)
                    {
                        ::java::util::ArrayList value((jobject) NULL);
                        OBJ_CALL(value = self->object._get_listNounArticle());
                        return ::java::util::t_ArrayList::wrap_Object(value);
                    }
                    static int t_MorphoRules_set__listNounArticle(t_MorphoRules *self, PyObject *arg, void *data)
                    {
                        ::java::util::ArrayList value((jobject) NULL);
                        if (!parseArg(arg, "k", ::java::util::ArrayList::initializeClass, &value))
                        {
                            INT_CALL(self->object._set_listNounArticle(value));
                            return 0;
                        }
                        PyErr_SetArgsError((PyObject *) self, "listNounArticle", arg);
                        return -1;
                    }

                    static PyObject *t_MorphoRules_get__listVerb(t_MorphoRules *self, void *data)
                    {
                        ::java::util::ArrayList value((jobject) NULL);
                        OBJ_CALL(value = self->object._get_listVerb());
                        return ::java::util::t_ArrayList::wrap_Object(value);
                    }
                    static int t_MorphoRules_set__listVerb(t_MorphoRules *self, PyObject *arg, void *data)
                    {
                        ::java::util::ArrayList value((jobject) NULL);
                        if (!parseArg(arg, "k", ::java::util::ArrayList::initializeClass, &value))
                        {
                            INT_CALL(self->object._set_listVerb(value));
                            return 0;
                        }
                        PyErr_SetArgsError((PyObject *) self, "listVerb", arg);
                        return -1;
                    }

                    static PyObject *t_MorphoRules_get__listVerbFinite(t_MorphoRules *self, void *data)
                    {
                        ::java::util::ArrayList value((jobject) NULL);
                        OBJ_CALL(value = self->object._get_listVerbFinite());
                        return ::java::util::t_ArrayList::wrap_Object(value);
                    }
                    static int t_MorphoRules_set__listVerbFinite(t_MorphoRules *self, PyObject *arg, void *data)
                    {
                        ::java::util::ArrayList value((jobject) NULL);
                        if (!parseArg(arg, "k", ::java::util::ArrayList::initializeClass, &value))
                        {
                            INT_CALL(self->object._set_listVerbFinite(value));
                            return 0;
                        }
                        PyErr_SetArgsError((PyObject *) self, "listVerbFinite", arg);
                        return -1;
                    }

                    static PyObject *t_MorphoRules_get__listVerbPastParticiple(t_MorphoRules *self, void *data)
                    {
                        ::java::util::ArrayList value((jobject) NULL);
                        OBJ_CALL(value = self->object._get_listVerbPastParticiple());
                        return ::java::util::t_ArrayList::wrap_Object(value);
                    }
                    static int t_MorphoRules_set__listVerbPastParticiple(t_MorphoRules *self, PyObject *arg, void *data)
                    {
                        ::java::util::ArrayList value((jobject) NULL);
                        if (!parseArg(arg, "k", ::java::util::ArrayList::initializeClass, &value))
                        {
                            INT_CALL(self->object._set_listVerbPastParticiple(value));
                            return 0;
                        }
                        PyErr_SetArgsError((PyObject *) self, "listVerbPastParticiple", arg);
                        return -1;
                    }
                }
            }
        }
    }
}
#include <jni.h>
#include "JCCEnv.h"
#include "is/iclt/icenlp/core/tritagger/Ngrams.h"
#include "java/io/IOException.h"
#include "java/lang/NullPointerException.h"
#include "java/lang/Class.h"
#include "java/io/InputStream.h"
#include "java/lang/String.h"
#include "java/util/Vector.h"
#include "JArray.h"

namespace is {
    namespace iclt {
        namespace icenlp {
            namespace core {
                namespace tritagger {

                    ::java::lang::Class *Ngrams::class$ = NULL;
                    jmethodID *Ngrams::mids$ = NULL;
                    ::java::lang::String *Ngrams::boundaryTag = NULL;

                    jclass Ngrams::initializeClass()
                    {
                        if (!class$)
                        {

                            jclass cls = (jclass) env->findClass("is/iclt/icenlp/core/tritagger/Ngrams");

                            mids$ = new jmethodID[max_mid];
                            mids$[mid_init$_4a264742] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Ljava/lang/String;)V");
                            mids$[mid_init$_adde7c2e] = env->getMethodID(cls, "<init>", "(Ljava/io/InputStream;Ljava/io/InputStream;)V");
                            mids$[mid_contextualProbSmoothing_4a264750] = env->getMethodID(cls, "contextualProbSmoothing", "(Ljava/lang/String;Ljava/lang/String;)D");
                            mids$[mid_contextualProbSmoothing_9c119576] = env->getMethodID(cls, "contextualProbSmoothing", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)D");
                            mids$[mid_corpusSize_54c6a179] = env->getMethodID(cls, "corpusSize", "()I");
                            mids$[mid_getEntropy_54c6a174] = env->getMethodID(cls, "getEntropy", "()D");
                            mids$[mid_getFrequency_5fdc3f57] = env->getMethodID(cls, "getFrequency", "(Ljava/lang/String;)I");
                            mids$[mid_getFrequency_4a26475d] = env->getMethodID(cls, "getFrequency", "(Ljava/lang/String;Ljava/lang/String;)I");
                            mids$[mid_getFrequency_9c11957b] = env->getMethodID(cls, "getFrequency", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)I");
                            mids$[mid_getMostFrequentTag_14c7b5c5] = env->getMethodID(cls, "getMostFrequentTag", "()Ljava/lang/String;");
                            mids$[mid_getNumBigrams_54c6a179] = env->getMethodID(cls, "getNumBigrams", "()I");
                            mids$[mid_getNumTags_54c6a179] = env->getMethodID(cls, "getNumTags", "()I");
                            mids$[mid_getNumTrigrams_54c6a179] = env->getMethodID(cls, "getNumTrigrams", "()I");
                            mids$[mid_getNumUnigrams_54c6a179] = env->getMethodID(cls, "getNumUnigrams", "()I");
                            mids$[mid_getTags_38f24ddb] = env->getMethodID(cls, "getTags", "()Ljava/util/Vector;");
                            mids$[mid_getTheta_54c6a174] = env->getMethodID(cls, "getTheta", "()D");
                            mids$[mid_getUnigramProb_5fdc3f5a] = env->getMethodID(cls, "getUnigramProb", "(Ljava/lang/String;)D");

                            class$ = (::java::lang::Class *) new JObject(cls);
                            cls = (jclass) class$->this$;

                            boundaryTag = new ::java::lang::String(env->getStaticObjectField(cls, "boundaryTag", "Ljava/lang/String;"));
                        }
                        return (jclass) class$->this$;
                    }

                    Ngrams::Ngrams(const ::java::lang::String & a0, const ::java::lang::String & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_4a264742, a0.this$, a1.this$)) {}

                    Ngrams::Ngrams(const ::java::io::InputStream & a0, const ::java::io::InputStream & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_adde7c2e, a0.this$, a1.this$)) {}

                    jdouble Ngrams::contextualProbSmoothing(const ::java::lang::String & a0, const ::java::lang::String & a1) const
                    {
                        return env->callDoubleMethod(this$, mids$[mid_contextualProbSmoothing_4a264750], a0.this$, a1.this$);
                    }

                    jdouble Ngrams::contextualProbSmoothing(const ::java::lang::String & a0, const ::java::lang::String & a1, const ::java::lang::String & a2) const
                    {
                        return env->callDoubleMethod(this$, mids$[mid_contextualProbSmoothing_9c119576], a0.this$, a1.this$, a2.this$);
                    }

                    jint Ngrams::corpusSize() const
                    {
                        return env->callIntMethod(this$, mids$[mid_corpusSize_54c6a179]);
                    }

                    jdouble Ngrams::getEntropy() const
                    {
                        return env->callDoubleMethod(this$, mids$[mid_getEntropy_54c6a174]);
                    }

                    jint Ngrams::getFrequency(const ::java::lang::String & a0) const
                    {
                        return env->callIntMethod(this$, mids$[mid_getFrequency_5fdc3f57], a0.this$);
                    }

                    jint Ngrams::getFrequency(const ::java::lang::String & a0, const ::java::lang::String & a1) const
                    {
                        return env->callIntMethod(this$, mids$[mid_getFrequency_4a26475d], a0.this$, a1.this$);
                    }

                    jint Ngrams::getFrequency(const ::java::lang::String & a0, const ::java::lang::String & a1, const ::java::lang::String & a2) const
                    {
                        return env->callIntMethod(this$, mids$[mid_getFrequency_9c11957b], a0.this$, a1.this$, a2.this$);
                    }

                    ::java::lang::String Ngrams::getMostFrequentTag() const
                    {
                        return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getMostFrequentTag_14c7b5c5]));
                    }

                    jint Ngrams::getNumBigrams() const
                    {
                        return env->callIntMethod(this$, mids$[mid_getNumBigrams_54c6a179]);
                    }

                    jint Ngrams::getNumTags() const
                    {
                        return env->callIntMethod(this$, mids$[mid_getNumTags_54c6a179]);
                    }

                    jint Ngrams::getNumTrigrams() const
                    {
                        return env->callIntMethod(this$, mids$[mid_getNumTrigrams_54c6a179]);
                    }

                    jint Ngrams::getNumUnigrams() const
                    {
                        return env->callIntMethod(this$, mids$[mid_getNumUnigrams_54c6a179]);
                    }

                    ::java::util::Vector Ngrams::getTags() const
                    {
                        return ::java::util::Vector(env->callObjectMethod(this$, mids$[mid_getTags_38f24ddb]));
                    }

                    jdouble Ngrams::getTheta() const
                    {
                        return env->callDoubleMethod(this$, mids$[mid_getTheta_54c6a174]);
                    }

                    jdouble Ngrams::getUnigramProb(const ::java::lang::String & a0) const
                    {
                        return env->callDoubleMethod(this$, mids$[mid_getUnigramProb_5fdc3f5a], a0.this$);
                    }
                }
            }
        }
    }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace is {
    namespace iclt {
        namespace icenlp {
            namespace core {
                namespace tritagger {
                    static PyObject *t_Ngrams_cast_(PyTypeObject *type, PyObject *arg);
                    static PyObject *t_Ngrams_instance_(PyTypeObject *type, PyObject *arg);
                    static int t_Ngrams_init_(t_Ngrams *self, PyObject *args, PyObject *kwds);
                    static PyObject *t_Ngrams_contextualProbSmoothing(t_Ngrams *self, PyObject *args);
                    static PyObject *t_Ngrams_corpusSize(t_Ngrams *self);
                    static PyObject *t_Ngrams_getEntropy(t_Ngrams *self);
                    static PyObject *t_Ngrams_getFrequency(t_Ngrams *self, PyObject *args);
                    static PyObject *t_Ngrams_getMostFrequentTag(t_Ngrams *self);
                    static PyObject *t_Ngrams_getNumBigrams(t_Ngrams *self);
                    static PyObject *t_Ngrams_getNumTags(t_Ngrams *self);
                    static PyObject *t_Ngrams_getNumTrigrams(t_Ngrams *self);
                    static PyObject *t_Ngrams_getNumUnigrams(t_Ngrams *self);
                    static PyObject *t_Ngrams_getTags(t_Ngrams *self);
                    static PyObject *t_Ngrams_getTheta(t_Ngrams *self);
                    static PyObject *t_Ngrams_getUnigramProb(t_Ngrams *self, PyObject *arg);
                    static PyObject *t_Ngrams_get__entropy(t_Ngrams *self, void *data);
                    static PyObject *t_Ngrams_get__mostFrequentTag(t_Ngrams *self, void *data);
                    static PyObject *t_Ngrams_get__numBigrams(t_Ngrams *self, void *data);
                    static PyObject *t_Ngrams_get__numTags(t_Ngrams *self, void *data);
                    static PyObject *t_Ngrams_get__numTrigrams(t_Ngrams *self, void *data);
                    static PyObject *t_Ngrams_get__numUnigrams(t_Ngrams *self, void *data);
                    static PyObject *t_Ngrams_get__tags(t_Ngrams *self, void *data);
                    static PyObject *t_Ngrams_get__theta(t_Ngrams *self, void *data);
                    static PyGetSetDef t_Ngrams__fields_[] = {
                        DECLARE_GET_FIELD(t_Ngrams, entropy),
                        DECLARE_GET_FIELD(t_Ngrams, mostFrequentTag),
                        DECLARE_GET_FIELD(t_Ngrams, numBigrams),
                        DECLARE_GET_FIELD(t_Ngrams, numTags),
                        DECLARE_GET_FIELD(t_Ngrams, numTrigrams),
                        DECLARE_GET_FIELD(t_Ngrams, numUnigrams),
                        DECLARE_GET_FIELD(t_Ngrams, tags),
                        DECLARE_GET_FIELD(t_Ngrams, theta),
                        { NULL, NULL, NULL, NULL, NULL }
                    };

                    static PyMethodDef t_Ngrams__methods_[] = {
                        DECLARE_METHOD(t_Ngrams, cast_, METH_O | METH_CLASS),
                        DECLARE_METHOD(t_Ngrams, instance_, METH_O | METH_CLASS),
                        DECLARE_METHOD(t_Ngrams, contextualProbSmoothing, METH_VARARGS),
                        DECLARE_METHOD(t_Ngrams, corpusSize, METH_NOARGS),
                        DECLARE_METHOD(t_Ngrams, getEntropy, METH_NOARGS),
                        DECLARE_METHOD(t_Ngrams, getFrequency, METH_VARARGS),
                        DECLARE_METHOD(t_Ngrams, getMostFrequentTag, METH_NOARGS),
                        DECLARE_METHOD(t_Ngrams, getNumBigrams, METH_NOARGS),
                        DECLARE_METHOD(t_Ngrams, getNumTags, METH_NOARGS),
                        DECLARE_METHOD(t_Ngrams, getNumTrigrams, METH_NOARGS),
                        DECLARE_METHOD(t_Ngrams, getNumUnigrams, METH_NOARGS),
                        DECLARE_METHOD(t_Ngrams, getTags, METH_NOARGS),
                        DECLARE_METHOD(t_Ngrams, getTheta, METH_NOARGS),
                        DECLARE_METHOD(t_Ngrams, getUnigramProb, METH_O),
                        { NULL, NULL, 0, NULL }
                    };

                    DECLARE_TYPE(Ngrams, t_Ngrams, ::java::lang::Object, Ngrams, t_Ngrams_init_, 0, 0, t_Ngrams__fields_, 0, 0);

                    void t_Ngrams::install(PyObject *module)
                    {
                        installType(&PY_TYPE(Ngrams), module, "Ngrams", 0);
                    }

                    void t_Ngrams::initialize(PyObject *module)
                    {
                        PyDict_SetItemString(PY_TYPE(Ngrams).tp_dict, "class_", make_descriptor(Ngrams::initializeClass, 1));
                        PyDict_SetItemString(PY_TYPE(Ngrams).tp_dict, "wrapfn_", make_descriptor(t_Ngrams::wrap_jobject));
                        PyDict_SetItemString(PY_TYPE(Ngrams).tp_dict, "boxfn_", make_descriptor(boxObject));
                        Ngrams::initializeClass();
                        PyDict_SetItemString(PY_TYPE(Ngrams).tp_dict, "boundaryTag", make_descriptor(j2p(*Ngrams::boundaryTag)));
                    }

                    static PyObject *t_Ngrams_cast_(PyTypeObject *type, PyObject *arg)
                    {
                        if (!(arg = castCheck(arg, Ngrams::initializeClass, 1)))
                            return NULL;
                        return t_Ngrams::wrap_Object(Ngrams(((t_Ngrams *) arg)->object.this$));
                    }
                    static PyObject *t_Ngrams_instance_(PyTypeObject *type, PyObject *arg)
                    {
                        if (!castCheck(arg, Ngrams::initializeClass, 0))
                            Py_RETURN_FALSE;
                        Py_RETURN_TRUE;
                    }

                    static int t_Ngrams_init_(t_Ngrams *self, PyObject *args, PyObject *kwds)
                    {
                        switch (PyTuple_GET_SIZE(args)) {
                          case 2:
                            {
                                ::java::lang::String a0((jobject) NULL);
                                ::java::lang::String a1((jobject) NULL);
                                Ngrams object((jobject) NULL);

                                if (!parseArgs(args, "ss", &a0, &a1))
                                {
                                    INT_CALL(object = Ngrams(a0, a1));
                                    self->object = object;
                                    break;
                                }
                            }
                            {
                                ::java::io::InputStream a0((jobject) NULL);
                                ::java::io::InputStream a1((jobject) NULL);
                                Ngrams object((jobject) NULL);

                                if (!parseArgs(args, "kk", ::java::io::InputStream::initializeClass, ::java::io::InputStream::initializeClass, &a0, &a1))
                                {
                                    INT_CALL(object = Ngrams(a0, a1));
                                    self->object = object;
                                    break;
                                }
                            }
                          default:
                            PyErr_SetArgsError((PyObject *) self, "__init__", args);
                            return -1;
                        }

                        return 0;
                    }

                    static PyObject *t_Ngrams_contextualProbSmoothing(t_Ngrams *self, PyObject *args)
                    {
                        switch (PyTuple_GET_SIZE(args)) {
                          case 2:
                            {
                                ::java::lang::String a0((jobject) NULL);
                                ::java::lang::String a1((jobject) NULL);
                                jdouble result;

                                if (!parseArgs(args, "ss", &a0, &a1))
                                {
                                    OBJ_CALL(result = self->object.contextualProbSmoothing(a0, a1));
                                    return PyFloat_FromDouble((double) result);
                                }
                            }
                            break;
                          case 3:
                            {
                                ::java::lang::String a0((jobject) NULL);
                                ::java::lang::String a1((jobject) NULL);
                                ::java::lang::String a2((jobject) NULL);
                                jdouble result;

                                if (!parseArgs(args, "sss", &a0, &a1, &a2))
                                {
                                    OBJ_CALL(result = self->object.contextualProbSmoothing(a0, a1, a2));
                                    return PyFloat_FromDouble((double) result);
                                }
                            }
                        }

                        PyErr_SetArgsError((PyObject *) self, "contextualProbSmoothing", args);
                        return NULL;
                    }

                    static PyObject *t_Ngrams_corpusSize(t_Ngrams *self)
                    {
                        jint result;
                        OBJ_CALL(result = self->object.corpusSize());
                        return PyInt_FromLong((long) result);
                    }

                    static PyObject *t_Ngrams_getEntropy(t_Ngrams *self)
                    {
                        jdouble result;
                        OBJ_CALL(result = self->object.getEntropy());
                        return PyFloat_FromDouble((double) result);
                    }

                    static PyObject *t_Ngrams_getFrequency(t_Ngrams *self, PyObject *args)
                    {
                        switch (PyTuple_GET_SIZE(args)) {
                          case 1:
                            {
                                ::java::lang::String a0((jobject) NULL);
                                jint result;

                                if (!parseArgs(args, "s", &a0))
                                {
                                    OBJ_CALL(result = self->object.getFrequency(a0));
                                    return PyInt_FromLong((long) result);
                                }
                            }
                            break;
                          case 2:
                            {
                                ::java::lang::String a0((jobject) NULL);
                                ::java::lang::String a1((jobject) NULL);
                                jint result;

                                if (!parseArgs(args, "ss", &a0, &a1))
                                {
                                    OBJ_CALL(result = self->object.getFrequency(a0, a1));
                                    return PyInt_FromLong((long) result);
                                }
                            }
                            break;
                          case 3:
                            {
                                ::java::lang::String a0((jobject) NULL);
                                ::java::lang::String a1((jobject) NULL);
                                ::java::lang::String a2((jobject) NULL);
                                jint result;

                                if (!parseArgs(args, "sss", &a0, &a1, &a2))
                                {
                                    OBJ_CALL(result = self->object.getFrequency(a0, a1, a2));
                                    return PyInt_FromLong((long) result);
                                }
                            }
                        }

                        PyErr_SetArgsError((PyObject *) self, "getFrequency", args);
                        return NULL;
                    }

                    static PyObject *t_Ngrams_getMostFrequentTag(t_Ngrams *self)
                    {
                        ::java::lang::String result((jobject) NULL);
                        OBJ_CALL(result = self->object.getMostFrequentTag());
                        return j2p(result);
                    }

                    static PyObject *t_Ngrams_getNumBigrams(t_Ngrams *self)
                    {
                        jint result;
                        OBJ_CALL(result = self->object.getNumBigrams());
                        return PyInt_FromLong((long) result);
                    }

                    static PyObject *t_Ngrams_getNumTags(t_Ngrams *self)
                    {
                        jint result;
                        OBJ_CALL(result = self->object.getNumTags());
                        return PyInt_FromLong((long) result);
                    }

                    static PyObject *t_Ngrams_getNumTrigrams(t_Ngrams *self)
                    {
                        jint result;
                        OBJ_CALL(result = self->object.getNumTrigrams());
                        return PyInt_FromLong((long) result);
                    }

                    static PyObject *t_Ngrams_getNumUnigrams(t_Ngrams *self)
                    {
                        jint result;
                        OBJ_CALL(result = self->object.getNumUnigrams());
                        return PyInt_FromLong((long) result);
                    }

                    static PyObject *t_Ngrams_getTags(t_Ngrams *self)
                    {
                        ::java::util::Vector result((jobject) NULL);
                        OBJ_CALL(result = self->object.getTags());
                        return ::java::util::t_Vector::wrap_Object(result);
                    }

                    static PyObject *t_Ngrams_getTheta(t_Ngrams *self)
                    {
                        jdouble result;
                        OBJ_CALL(result = self->object.getTheta());
                        return PyFloat_FromDouble((double) result);
                    }

                    static PyObject *t_Ngrams_getUnigramProb(t_Ngrams *self, PyObject *arg)
                    {
                        ::java::lang::String a0((jobject) NULL);
                        jdouble result;

                        if (!parseArg(arg, "s", &a0))
                        {
                            OBJ_CALL(result = self->object.getUnigramProb(a0));
                            return PyFloat_FromDouble((double) result);
                        }

                        PyErr_SetArgsError((PyObject *) self, "getUnigramProb", arg);
                        return NULL;
                    }

                    static PyObject *t_Ngrams_get__entropy(t_Ngrams *self, void *data)
                    {
                        jdouble value;
                        OBJ_CALL(value = self->object.getEntropy());
                        return PyFloat_FromDouble((double) value);
                    }

                    static PyObject *t_Ngrams_get__mostFrequentTag(t_Ngrams *self, void *data)
                    {
                        ::java::lang::String value((jobject) NULL);
                        OBJ_CALL(value = self->object.getMostFrequentTag());
                        return j2p(value);
                    }

                    static PyObject *t_Ngrams_get__numBigrams(t_Ngrams *self, void *data)
                    {
                        jint value;
                        OBJ_CALL(value = self->object.getNumBigrams());
                        return PyInt_FromLong((long) value);
                    }

                    static PyObject *t_Ngrams_get__numTags(t_Ngrams *self, void *data)
                    {
                        jint value;
                        OBJ_CALL(value = self->object.getNumTags());
                        return PyInt_FromLong((long) value);
                    }

                    static PyObject *t_Ngrams_get__numTrigrams(t_Ngrams *self, void *data)
                    {
                        jint value;
                        OBJ_CALL(value = self->object.getNumTrigrams());
                        return PyInt_FromLong((long) value);
                    }

                    static PyObject *t_Ngrams_get__numUnigrams(t_Ngrams *self, void *data)
                    {
                        jint value;
                        OBJ_CALL(value = self->object.getNumUnigrams());
                        return PyInt_FromLong((long) value);
                    }

                    static PyObject *t_Ngrams_get__tags(t_Ngrams *self, void *data)
                    {
                        ::java::util::Vector value((jobject) NULL);
                        OBJ_CALL(value = self->object.getTags());
                        return ::java::util::t_Vector::wrap_Object(value);
                    }

                    static PyObject *t_Ngrams_get__theta(t_Ngrams *self, void *data)
                    {
                        jdouble value;
                        OBJ_CALL(value = self->object.getTheta());
                        return PyFloat_FromDouble((double) value);
                    }
                }
            }
        }
    }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/lang/Short.h"
#include "java/lang/Comparable.h"
#include "java/lang/NumberFormatException.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "java/lang/Object.h"
#include "JArray.h"

namespace java {
    namespace lang {

        ::java::lang::Class *Short::class$ = NULL;
        jmethodID *Short::mids$ = NULL;
        jshort Short::MAX_VALUE = (jshort) 0;
        jshort Short::MIN_VALUE = (jshort) 0;
        jint Short::SIZE = (jint) 0;
        ::java::lang::Class *Short::TYPE = NULL;

        jclass Short::initializeClass()
        {
            if (!class$)
            {

                jclass cls = (jclass) env->findClass("java/lang/Short");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_3bc40c6a] = env->getMethodID(cls, "<init>", "(S)V");
                mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
                mids$[mid_byteValue_54c6a172] = env->getMethodID(cls, "byteValue", "()B");
                mids$[mid_compareTo_290588f1] = env->getMethodID(cls, "compareTo", "(Ljava/lang/Object;)I");
                mids$[mid_compareTo_6b8573d1] = env->getMethodID(cls, "compareTo", "(Ljava/lang/Short;)I");
                mids$[mid_decode_88c4db41] = env->getStaticMethodID(cls, "decode", "(Ljava/lang/String;)Ljava/lang/Short;");
                mids$[mid_doubleValue_54c6a174] = env->getMethodID(cls, "doubleValue", "()D");
                mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
                mids$[mid_floatValue_54c6a176] = env->getMethodID(cls, "floatValue", "()F");
                mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
                mids$[mid_intValue_54c6a179] = env->getMethodID(cls, "intValue", "()I");
                mids$[mid_longValue_54c6a17a] = env->getMethodID(cls, "longValue", "()J");
                mids$[mid_parseShort_5fdc3f4d] = env->getStaticMethodID(cls, "parseShort", "(Ljava/lang/String;)S");
                mids$[mid_parseShort_6e53ccc3] = env->getStaticMethodID(cls, "parseShort", "(Ljava/lang/String;I)S");
                mids$[mid_reverseBytes_3bc40c6f] = env->getStaticMethodID(cls, "reverseBytes", "(S)S");
                mids$[mid_shortValue_54c6a163] = env->getMethodID(cls, "shortValue", "()S");
                mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
                mids$[mid_toString_9c2e4c45] = env->getStaticMethodID(cls, "toString", "(S)Ljava/lang/String;");
                mids$[mid_valueOf_5d563b1b] = env->getStaticMethodID(cls, "valueOf", "(S)Ljava/lang/Short;");
                mids$[mid_valueOf_88c4db41] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;)Ljava/lang/Short;");
                mids$[mid_valueOf_0f6bcb23] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;I)Ljava/lang/Short;");

                class$ = (::java::lang::Class *) new JObject(cls);
                cls = (jclass) class$->this$;

                MAX_VALUE = env->getStaticShortField(cls, "MAX_VALUE");
                MIN_VALUE = env->getStaticShortField(cls, "MIN_VALUE");
                SIZE = env->getStaticIntField(cls, "SIZE");
                TYPE = new ::java::lang::Class(env->getStaticObjectField(cls, "TYPE", "Ljava/lang/Class;"));
            }
            return (jclass) class$->this$;
        }

        Short::Short(jshort a0) : ::java::lang::Number(env->newObject(initializeClass, &mids$, mid_init$_3bc40c6a, a0)) {}

        Short::Short(const ::java::lang::String & a0) : ::java::lang::Number(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}

        jbyte Short::byteValue() const
        {
            return env->callByteMethod(this$, mids$[mid_byteValue_54c6a172]);
        }

        jint Short::compareTo(const ::java::lang::Object & a0) const
        {
            return env->callIntMethod(this$, mids$[mid_compareTo_290588f1], a0.this$);
        }

        jint Short::compareTo(const Short & a0) const
        {
            return env->callIntMethod(this$, mids$[mid_compareTo_6b8573d1], a0.this$);
        }

        Short Short::decode(const ::java::lang::String & a0)
        {
            jclass cls = initializeClass();
            return Short(env->callStaticObjectMethod(cls, mids$[mid_decode_88c4db41], a0.this$));
        }

        jdouble Short::doubleValue() const
        {
            return env->callDoubleMethod(this$, mids$[mid_doubleValue_54c6a174]);
        }

        jboolean Short::equals(const ::java::lang::Object & a0) const
        {
            return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        jfloat Short::floatValue() const
        {
            return env->callFloatMethod(this$, mids$[mid_floatValue_54c6a176]);
        }

        jint Short::hashCode() const
        {
            return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        jint Short::intValue() const
        {
            return env->callIntMethod(this$, mids$[mid_intValue_54c6a179]);
        }

        jlong Short::longValue() const
        {
            return env->callLongMethod(this$, mids$[mid_longValue_54c6a17a]);
        }

        jshort Short::parseShort(const ::java::lang::String & a0)
        {
            jclass cls = initializeClass();
            return env->callStaticShortMethod(cls, mids$[mid_parseShort_5fdc3f4d], a0.this$);
        }

        jshort Short::parseShort(const ::java::lang::String & a0, jint a1)
        {
            jclass cls = initializeClass();
            return env->callStaticShortMethod(cls, mids$[mid_parseShort_6e53ccc3], a0.this$, a1);
        }

        jshort Short::reverseBytes(jshort a0)
        {
            jclass cls = initializeClass();
            return env->callStaticShortMethod(cls, mids$[mid_reverseBytes_3bc40c6f], a0);
        }

        jshort Short::shortValue() const
        {
            return env->callShortMethod(this$, mids$[mid_shortValue_54c6a163]);
        }

        ::java::lang::String Short::toString() const
        {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }

        ::java::lang::String Short::toString(jshort a0)
        {
            jclass cls = initializeClass();
            return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_toString_9c2e4c45], a0));
        }

        Short Short::valueOf(jshort a0)
        {
            jclass cls = initializeClass();
            return Short(env->callStaticObjectMethod(cls, mids$[mid_valueOf_5d563b1b], a0));
        }

        Short Short::valueOf(const ::java::lang::String & a0)
        {
            jclass cls = initializeClass();
            return Short(env->callStaticObjectMethod(cls, mids$[mid_valueOf_88c4db41], a0.this$));
        }

        Short Short::valueOf(const ::java::lang::String & a0, jint a1)
        {
            jclass cls = initializeClass();
            return Short(env->callStaticObjectMethod(cls, mids$[mid_valueOf_0f6bcb23], a0.this$, a1));
        }
    }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
    namespace lang {
        static PyObject *t_Short_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Short_instance_(PyTypeObject *type, PyObject *arg);
        static int t_Short_init_(t_Short *self, PyObject *args, PyObject *kwds);
        static PyObject *t_Short_byteValue(t_Short *self, PyObject *args);
        static PyObject *t_Short_compareTo(t_Short *self, PyObject *args);
        static PyObject *t_Short_decode(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Short_doubleValue(t_Short *self, PyObject *args);
        static PyObject *t_Short_equals(t_Short *self, PyObject *args);
        static PyObject *t_Short_floatValue(t_Short *self, PyObject *args);
        static PyObject *t_Short_hashCode(t_Short *self, PyObject *args);
        static PyObject *t_Short_intValue(t_Short *self, PyObject *args);
        static PyObject *t_Short_longValue(t_Short *self, PyObject *args);
        static PyObject *t_Short_parseShort(PyTypeObject *type, PyObject *args);
        static PyObject *t_Short_reverseBytes(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Short_shortValue(t_Short *self, PyObject *args);
        static PyObject *t_Short_toString(t_Short *self, PyObject *args);
        static PyObject *t_Short_toString_(PyTypeObject *type, PyObject *args);
        static PyObject *t_Short_valueOf(PyTypeObject *type, PyObject *args);

        static PyMethodDef t_Short__methods_[] = {
            DECLARE_METHOD(t_Short, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Short, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Short, byteValue, METH_VARARGS),
            DECLARE_METHOD(t_Short, compareTo, METH_VARARGS),
            DECLARE_METHOD(t_Short, decode, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Short, doubleValue, METH_VARARGS),
            DECLARE_METHOD(t_Short, equals, METH_VARARGS),
            DECLARE_METHOD(t_Short, floatValue, METH_VARARGS),
            DECLARE_METHOD(t_Short, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_Short, intValue, METH_VARARGS),
            DECLARE_METHOD(t_Short, longValue, METH_VARARGS),
            DECLARE_METHOD(t_Short, parseShort, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_Short, reverseBytes, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Short, shortValue, METH_VARARGS),
            DECLARE_METHOD(t_Short, toString, METH_VARARGS),
            DECLARE_METHOD(t_Short, toString_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Short, valueOf, METH_VARARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(Short, t_Short, ::java::lang::Number, Short, t_Short_init_, 0, 0, 0, 0, 0);

        void t_Short::install(PyObject *module)
        {
            installType(&PY_TYPE(Short), module, "Short", 0);
        }

        void t_Short::initialize(PyObject *module)
        {
            PyDict_SetItemString(PY_TYPE(Short).tp_dict, "class_", make_descriptor(Short::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Short).tp_dict, "wrapfn_", make_descriptor(unboxShort));
            PyDict_SetItemString(PY_TYPE(Short).tp_dict, "boxfn_", make_descriptor(boxShort));
            Short::initializeClass();
            PyDict_SetItemString(PY_TYPE(Short).tp_dict, "MAX_VALUE", make_descriptor(Short::MAX_VALUE));
            PyDict_SetItemString(PY_TYPE(Short).tp_dict, "MIN_VALUE", make_descriptor(Short::MIN_VALUE));
            PyDict_SetItemString(PY_TYPE(Short).tp_dict, "SIZE", make_descriptor(Short::SIZE));
            PyDict_SetItemString(PY_TYPE(Short).tp_dict, "TYPE", make_descriptor(::java::lang::t_Class::wrap_Object(*Short::TYPE)));
        }

        static PyObject *t_Short_cast_(PyTypeObject *type, PyObject *arg)
        {
            if (!(arg = castCheck(arg, Short::initializeClass, 1)))
                return NULL;
            return t_Short::wrap_Object(Short(((t_Short *) arg)->object.this$));
        }
        static PyObject *t_Short_instance_(PyTypeObject *type, PyObject *arg)
        {
            if (!castCheck(arg, Short::initializeClass, 0))
                Py_RETURN_FALSE;
            Py_RETURN_TRUE;
        }

        static int t_Short_init_(t_Short *self, PyObject *args, PyObject *kwds)
        {
            switch (PyTuple_GET_SIZE(args)) {
              case 1:
                {
                    jshort a0;
                    Short object((jobject) NULL);

                    if (!parseArgs(args, "S", &a0))
                    {
                        INT_CALL(object = Short(a0));
                        self->object = object;
                        break;
                    }
                }
                {
                    ::java::lang::String a0((jobject) NULL);
                    Short object((jobject) NULL);

                    if (!parseArgs(args, "s", &a0))
                    {
                        INT_CALL(object = Short(a0));
                        self->object = object;
                        break;
                    }
                }
              default:
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
            }

            return 0;
        }

        static PyObject *t_Short_byteValue(t_Short *self, PyObject *args)
        {
            jbyte result;

            if (!parseArgs(args, ""))
            {
                OBJ_CALL(result = self->object.byteValue());
                return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(Short), (PyObject *) self, "byteValue", args, 2);
        }

        static PyObject *t_Short_compareTo(t_Short *self, PyObject *args)
        {
            switch (PyTuple_GET_SIZE(args)) {
              case 1:
                {
                    ::java::lang::Object a0((jobject) NULL);
                    jint result;

                    if (!parseArgs(args, "o", &a0))
                    {
                        OBJ_CALL(result = self->object.compareTo(a0));
                        return PyInt_FromLong((long) result);
                    }
                }
                {
                    Short a0((jobject) NULL);
                    jint result;

                    if (!parseArgs(args, "O", &::java::lang::PY_TYPE(Short), &a0))
                    {
                        OBJ_CALL(result = self->object.compareTo(a0));
                        return PyInt_FromLong((long) result);
                    }
                }
            }

            PyErr_SetArgsError((PyObject *) self, "compareTo", args);
            return NULL;
        }

        static PyObject *t_Short_decode(PyTypeObject *type, PyObject *arg)
        {
            ::java::lang::String a0((jobject) NULL);
            Short result((jobject) NULL);

            if (!parseArg(arg, "s", &a0))
            {
                OBJ_CALL(result = ::java::lang::Short::decode(a0));
                return t_Short::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "decode", arg);
            return NULL;
        }

        static PyObject *t_Short_doubleValue(t_Short *self, PyObject *args)
        {
            jdouble result;

            if (!parseArgs(args, ""))
            {
                OBJ_CALL(result = self->object.doubleValue());
                return PyFloat_FromDouble((double) result);
            }

            return callSuper(&PY_TYPE(Short), (PyObject *) self, "doubleValue", args, 2);
        }

        static PyObject *t_Short_equals(t_Short *self, PyObject *args)
        {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
                OBJ_CALL(result = self->object.equals(a0));
                Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(Short), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_Short_floatValue(t_Short *self, PyObject *args)
        {
            jfloat result;

            if (!parseArgs(args, ""))
            {
                OBJ_CALL(result = self->object.floatValue());
                return PyFloat_FromDouble((double) result);
            }

            return callSuper(&PY_TYPE(Short), (PyObject *) self, "floatValue", args, 2);
        }

        static PyObject *t_Short_hashCode(t_Short *self, PyObject *args)
        {
            jint result;

            if (!parseArgs(args, ""))
            {
                OBJ_CALL(result = self->object.hashCode());
                return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(Short), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_Short_intValue(t_Short *self, PyObject *args)
        {
            jint result;

            if (!parseArgs(args, ""))
            {
                OBJ_CALL(result = self->object.intValue());
                return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(Short), (PyObject *) self, "intValue", args, 2);
        }

        static PyObject *t_Short_longValue(t_Short *self, PyObject *args)
        {
            jlong result;

            if (!parseArgs(args, ""))
            {
                OBJ_CALL(result = self->object.longValue());
                return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            return callSuper(&PY_TYPE(Short), (PyObject *) self, "longValue", args, 2);
        }

        static PyObject *t_Short_parseShort(PyTypeObject *type, PyObject *args)
        {
            switch (PyTuple_GET_SIZE(args)) {
              case 1:
                {
                    ::java::lang::String a0((jobject) NULL);
                    jshort result;

                    if (!parseArgs(args, "s", &a0))
                    {
                        OBJ_CALL(result = ::java::lang::Short::parseShort(a0));
                        return PyInt_FromLong((long) result);
                    }
                }
                break;
              case 2:
                {
                    ::java::lang::String a0((jobject) NULL);
                    jint a1;
                    jshort result;

                    if (!parseArgs(args, "sI", &a0, &a1))
                    {
                        OBJ_CALL(result = ::java::lang::Short::parseShort(a0, a1));
                        return PyInt_FromLong((long) result);
                    }
                }
            }

            PyErr_SetArgsError(type, "parseShort", args);
            return NULL;
        }

        static PyObject *t_Short_reverseBytes(PyTypeObject *type, PyObject *arg)
        {
            jshort a0;
            jshort result;

            if (!parseArg(arg, "S", &a0))
            {
                OBJ_CALL(result = ::java::lang::Short::reverseBytes(a0));
                return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError(type, "reverseBytes", arg);
            return NULL;
        }

        static PyObject *t_Short_shortValue(t_Short *self, PyObject *args)
        {
            jshort result;

            if (!parseArgs(args, ""))
            {
                OBJ_CALL(result = self->object.shortValue());
                return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(Short), (PyObject *) self, "shortValue", args, 2);
        }

        static PyObject *t_Short_toString(t_Short *self, PyObject *args)
        {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
                OBJ_CALL(result = self->object.toString());
                return j2p(result);
            }

            return callSuper(&PY_TYPE(Short), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_Short_toString_(PyTypeObject *type, PyObject *args)
        {
            jshort a0;
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, "S", &a0))
            {
                OBJ_CALL(result = ::java::lang::Short::toString(a0));
                return j2p(result);
            }

            PyErr_SetArgsError(type, "toString_", args);
            return NULL;
        }

        static PyObject *t_Short_valueOf(PyTypeObject *type, PyObject *args)
        {
            switch (PyTuple_GET_SIZE(args)) {
              case 1:
                {
                    jshort a0;
                    Short result((jobject) NULL);

                    if (!parseArgs(args, "S", &a0))
                    {
                        OBJ_CALL(result = ::java::lang::Short::valueOf(a0));
                        return t_Short::wrap_Object(result);
                    }
                }
                {
                    ::java::lang::String a0((jobject) NULL);
                    Short result((jobject) NULL);

                    if (!parseArgs(args, "s", &a0))
                    {
                        OBJ_CALL(result = ::java::lang::Short::valueOf(a0));
                        return t_Short::wrap_Object(result);
                    }
                }
                break;
              case 2:
                {
                    ::java::lang::String a0((jobject) NULL);
                    jint a1;
                    Short result((jobject) NULL);

                    if (!parseArgs(args, "sI", &a0, &a1))
                    {
                        OBJ_CALL(result = ::java::lang::Short::valueOf(a0, a1));
                        return t_Short::wrap_Object(result);
                    }
                }
            }

            PyErr_SetArgsError(type, "valueOf", args);
            return NULL;
        }
    }
}
#include <jni.h>
#include "JCCEnv.h"
#include "is/iclt/icenlp/core/tokenizer/IceTokenTags$Match.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace is {
    namespace iclt {
        namespace icenlp {
            namespace core {
                namespace tokenizer {

                    ::java::lang::Class *IceTokenTags$Match::class$ = NULL;
                    jmethodID *IceTokenTags$Match::mids$ = NULL;
                    IceTokenTags$Match *IceTokenTags$Match::aCase = NULL;
                    IceTokenTags$Match *IceTokenTags$Match::gender = NULL;
                    IceTokenTags$Match *IceTokenTags$Match::genderNumberCase = NULL;
                    IceTokenTags$Match *IceTokenTags$Match::number = NULL;
                    IceTokenTags$Match *IceTokenTags$Match::numberCase = NULL;
                    IceTokenTags$Match *IceTokenTags$Match::personGenderNumber = NULL;

                    jclass IceTokenTags$Match::initializeClass()
                    {
                        if (!class$)
                        {

                            jclass cls = (jclass) env->findClass("is/iclt/icenlp/core/tokenizer/IceTokenTags$Match");

                            mids$ = new jmethodID[max_mid];
                            mids$[mid_valueOf_d10e5240] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;)Lis/iclt/icenlp/core/tokenizer/IceTokenTags$Match;");
                            mids$[mid_values_398b45be] = env->getStaticMethodID(cls, "values", "()[Lis/iclt/icenlp/core/tokenizer/IceTokenTags$Match;");

                            class$ = (::java::lang::Class *) new JObject(cls);
                            cls = (jclass) class$->this$;

                            aCase = new IceTokenTags$Match(env->getStaticObjectField(cls, "aCase", "Lis/iclt/icenlp/core/tokenizer/IceTokenTags$Match;"));
                            gender = new IceTokenTags$Match(env->getStaticObjectField(cls, "gender", "Lis/iclt/icenlp/core/tokenizer/IceTokenTags$Match;"));
                            genderNumberCase = new IceTokenTags$Match(env->getStaticObjectField(cls, "genderNumberCase", "Lis/iclt/icenlp/core/tokenizer/IceTokenTags$Match;"));
                            number = new IceTokenTags$Match(env->getStaticObjectField(cls, "number", "Lis/iclt/icenlp/core/tokenizer/IceTokenTags$Match;"));
                            numberCase = new IceTokenTags$Match(env->getStaticObjectField(cls, "numberCase", "Lis/iclt/icenlp/core/tokenizer/IceTokenTags$Match;"));
                            personGenderNumber = new IceTokenTags$Match(env->getStaticObjectField(cls, "personGenderNumber", "Lis/iclt/icenlp/core/tokenizer/IceTokenTags$Match;"));
                        }
                        return (jclass) class$->this$;
                    }

                    IceTokenTags$Match IceTokenTags$Match::valueOf(const ::java::lang::String & a0)
                    {
                        jclass cls = initializeClass();
                        return IceTokenTags$Match(env->callStaticObjectMethod(cls, mids$[mid_valueOf_d10e5240], a0.this$));
                    }

                    JArray< IceTokenTags$Match > IceTokenTags$Match::values()
                    {
                        jclass cls = initializeClass();
                        return JArray< IceTokenTags$Match >(env->callStaticObjectMethod(cls, mids$[mid_values_398b45be]));
                    }
                }
            }
        }
    }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace is {
    namespace iclt {
        namespace icenlp {
            namespace core {
                namespace tokenizer {
                    static PyObject *t_IceTokenTags$Match_cast_(PyTypeObject *type, PyObject *arg);
                    static PyObject *t_IceTokenTags$Match_instance_(PyTypeObject *type, PyObject *arg);
                    static PyObject *t_IceTokenTags$Match_valueOf(PyTypeObject *type, PyObject *args);
                    static PyObject *t_IceTokenTags$Match_values(PyTypeObject *type);

                    static PyMethodDef t_IceTokenTags$Match__methods_[] = {
                        DECLARE_METHOD(t_IceTokenTags$Match, cast_, METH_O | METH_CLASS),
                        DECLARE_METHOD(t_IceTokenTags$Match, instance_, METH_O | METH_CLASS),
                        DECLARE_METHOD(t_IceTokenTags$Match, valueOf, METH_VARARGS | METH_CLASS),
                        DECLARE_METHOD(t_IceTokenTags$Match, values, METH_NOARGS | METH_CLASS),
                        { NULL, NULL, 0, NULL }
                    };

                    DECLARE_TYPE(IceTokenTags$Match, t_IceTokenTags$Match, ::java::lang::Enum, IceTokenTags$Match, abstract_init, 0, 0, 0, 0, 0);

                    void t_IceTokenTags$Match::install(PyObject *module)
                    {
                        installType(&PY_TYPE(IceTokenTags$Match), module, "IceTokenTags$Match", 0);
                    }

                    void t_IceTokenTags$Match::initialize(PyObject *module)
                    {
                        PyDict_SetItemString(PY_TYPE(IceTokenTags$Match).tp_dict, "class_", make_descriptor(IceTokenTags$Match::initializeClass, 1));
                        PyDict_SetItemString(PY_TYPE(IceTokenTags$Match).tp_dict, "wrapfn_", make_descriptor(t_IceTokenTags$Match::wrap_jobject));
                        PyDict_SetItemString(PY_TYPE(IceTokenTags$Match).tp_dict, "boxfn_", make_descriptor(boxObject));
                        IceTokenTags$Match::initializeClass();
                        PyDict_SetItemString(PY_TYPE(IceTokenTags$Match).tp_dict, "aCase", make_descriptor(t_IceTokenTags$Match::wrap_Object(*IceTokenTags$Match::aCase)));
                        PyDict_SetItemString(PY_TYPE(IceTokenTags$Match).tp_dict, "gender", make_descriptor(t_IceTokenTags$Match::wrap_Object(*IceTokenTags$Match::gender)));
                        PyDict_SetItemString(PY_TYPE(IceTokenTags$Match).tp_dict, "genderNumberCase", make_descriptor(t_IceTokenTags$Match::wrap_Object(*IceTokenTags$Match::genderNumberCase)));
                        PyDict_SetItemString(PY_TYPE(IceTokenTags$Match).tp_dict, "number", make_descriptor(t_IceTokenTags$Match::wrap_Object(*IceTokenTags$Match::number)));
                        PyDict_SetItemString(PY_TYPE(IceTokenTags$Match).tp_dict, "numberCase", make_descriptor(t_IceTokenTags$Match::wrap_Object(*IceTokenTags$Match::numberCase)));
                        PyDict_SetItemString(PY_TYPE(IceTokenTags$Match).tp_dict, "personGenderNumber", make_descriptor(t_IceTokenTags$Match::wrap_Object(*IceTokenTags$Match::personGenderNumber)));
                    }

                    static PyObject *t_IceTokenTags$Match_cast_(PyTypeObject *type, PyObject *arg)
                    {
                        if (!(arg = castCheck(arg, IceTokenTags$Match::initializeClass, 1)))
                            return NULL;
                        return t_IceTokenTags$Match::wrap_Object(IceTokenTags$Match(((t_IceTokenTags$Match *) arg)->object.this$));
                    }
                    static PyObject *t_IceTokenTags$Match_instance_(PyTypeObject *type, PyObject *arg)
                    {
                        if (!castCheck(arg, IceTokenTags$Match::initializeClass, 0))
                            Py_RETURN_FALSE;
                        Py_RETURN_TRUE;
                    }

                    static PyObject *t_IceTokenTags$Match_valueOf(PyTypeObject *type, PyObject *args)
                    {
                        ::java::lang::String a0((jobject) NULL);
                        IceTokenTags$Match result((jobject) NULL);

                        if (!parseArgs(args, "s", &a0))
                        {
                            OBJ_CALL(result = ::is::iclt::icenlp::core::tokenizer::IceTokenTags$Match::valueOf(a0));
                            return t_IceTokenTags$Match::wrap_Object(result);
                        }

                        return callSuper(type, "valueOf", args, 2);
                    }

                    static PyObject *t_IceTokenTags$Match_values(PyTypeObject *type)
                    {
                        JArray< IceTokenTags$Match > result((jobject) NULL);
                        OBJ_CALL(result = ::is::iclt::icenlp::core::tokenizer::IceTokenTags$Match::values());
                        return JArray<jobject>(result.this$).wrap(t_IceTokenTags$Match::wrap_jobject);
                    }
                }
            }
        }
    }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/lang/Boolean.h"
#include "java/lang/Comparable.h"
#include "java/io/Serializable.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace java {
    namespace lang {

        ::java::lang::Class *Boolean::class$ = NULL;
        jmethodID *Boolean::mids$ = NULL;
        Boolean *Boolean::FALSE = NULL;
        Boolean *Boolean::TRUE = NULL;
        ::java::lang::Class *Boolean::TYPE = NULL;

        jclass Boolean::initializeClass()
        {
            if (!class$)
            {

                jclass cls = (jclass) env->findClass("java/lang/Boolean");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_bb0c767f] = env->getMethodID(cls, "<init>", "(Z)V");
                mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
                mids$[mid_booleanValue_54c6a16a] = env->getMethodID(cls, "booleanValue", "()Z");
                mids$[mid_compareTo_d07f0c91] = env->getMethodID(cls, "compareTo", "(Ljava/lang/Boolean;)I");
                mids$[mid_compareTo_290588f1] = env->getMethodID(cls, "compareTo", "(Ljava/lang/Object;)I");
                mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
                mids$[mid_getBoolean_5fdc3f44] = env->getStaticMethodID(cls, "getBoolean", "(Ljava/lang/String;)Z");
                mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
                mids$[mid_parseBoolean_5fdc3f44] = env->getStaticMethodID(cls, "parseBoolean", "(Ljava/lang/String;)Z");
                mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
                mids$[mid_toString_445a175e] = env->getStaticMethodID(cls, "toString", "(Z)Ljava/lang/String;");
                mids$[mid_valueOf_a98d5bba] = env->getStaticMethodID(cls, "valueOf", "(Z)Ljava/lang/Boolean;");
                mids$[mid_valueOf_9d4a8ff9] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;)Ljava/lang/Boolean;");

                class$ = (::java::lang::Class *) new JObject(cls);
                cls = (jclass) class$->this$;

                FALSE = new Boolean(env->getStaticObjectField(cls, "FALSE", "Ljava/lang/Boolean;"));
                TRUE = new Boolean(env->getStaticObjectField(cls, "TRUE", "Ljava/lang/Boolean;"));
                TYPE = new ::java::lang::Class(env->getStaticObjectField(cls, "TYPE", "Ljava/lang/Class;"));
            }
            return (jclass) class$->this$;
        }

        Boolean::Boolean(jboolean a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_bb0c767f, a0)) {}

        Boolean::Boolean(const ::java::lang::String & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}

        jboolean Boolean::booleanValue() const
        {
            return env->callBooleanMethod(this$, mids$[mid_booleanValue_54c6a16a]);
        }

        jint Boolean::compareTo(const Boolean & a0) const
        {
            return env->callIntMethod(this$, mids$[mid_compareTo_d07f0c91], a0.this$);
        }

        jint Boolean::compareTo(const ::java::lang::Object & a0) const
        {
            return env->callIntMethod(this$, mids$[mid_compareTo_290588f1], a0.this$);
        }

        jboolean Boolean::equals(const ::java::lang::Object & a0) const
        {
            return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        jboolean Boolean::getBoolean(const ::java::lang::String & a0)
        {
            jclass cls = initializeClass();
            return env->callStaticBooleanMethod(cls, mids$[mid_getBoolean_5fdc3f44], a0.this$);
        }

        jint Boolean::hashCode() const
        {
            return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        jboolean Boolean::parseBoolean(const ::java::lang::String & a0)
        {
            jclass cls = initializeClass();
            return env->callStaticBooleanMethod(cls, mids$[mid_parseBoolean_5fdc3f44], a0.this$);
        }

        ::java::lang::String Boolean::toString() const
        {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }

        ::java::lang::String Boolean::toString(jboolean a0)
        {
            jclass cls = initializeClass();
            return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_toString_445a175e], a0));
        }

        Boolean Boolean::valueOf(jboolean a0)
        {
            jclass cls = initializeClass();
            return Boolean(env->callStaticObjectMethod(cls, mids$[mid_valueOf_a98d5bba], a0));
        }

        Boolean Boolean::valueOf(const ::java::lang::String & a0)
        {
            jclass cls = initializeClass();
            return Boolean(env->callStaticObjectMethod(cls, mids$[mid_valueOf_9d4a8ff9], a0.this$));
        }
    }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
    namespace lang {
        static PyObject *t_Boolean_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Boolean_instance_(PyTypeObject *type, PyObject *arg);
        static int t_Boolean_init_(t_Boolean *self, PyObject *args, PyObject *kwds);
        static PyObject *t_Boolean_booleanValue(t_Boolean *self);
        static PyObject *t_Boolean_compareTo(t_Boolean *self, PyObject *args);
        static PyObject *t_Boolean_equals(t_Boolean *self, PyObject *args);
        static PyObject *t_Boolean_getBoolean(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Boolean_hashCode(t_Boolean *self, PyObject *args);
        static PyObject *t_Boolean_parseBoolean(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Boolean_toString(t_Boolean *self, PyObject *args);
        static PyObject *t_Boolean_toString_(PyTypeObject *type, PyObject *args);
        static PyObject *t_Boolean_valueOf(PyTypeObject *type, PyObject *args);

        static PyMethodDef t_Boolean__methods_[] = {
            DECLARE_METHOD(t_Boolean, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Boolean, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Boolean, booleanValue, METH_NOARGS),
            DECLARE_METHOD(t_Boolean, compareTo, METH_VARARGS),
            DECLARE_METHOD(t_Boolean, equals, METH_VARARGS),
            DECLARE_METHOD(t_Boolean, getBoolean, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Boolean, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_Boolean, parseBoolean, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Boolean, toString, METH_VARARGS),
            DECLARE_METHOD(t_Boolean, toString_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Boolean, valueOf, METH_VARARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(Boolean, t_Boolean, ::java::lang::Object, Boolean, t_Boolean_init_, 0, 0, 0, 0, 0);

        void t_Boolean::install(PyObject *module)
        {
            installType(&PY_TYPE(Boolean), module, "Boolean", 0);
        }

        void t_Boolean::initialize(PyObject *module)
        {
            PyDict_SetItemString(PY_TYPE(Boolean).tp_dict, "class_", make_descriptor(Boolean::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Boolean).tp_dict, "wrapfn_", make_descriptor(unboxBoolean));
            PyDict_SetItemString(PY_TYPE(Boolean).tp_dict, "boxfn_", make_descriptor(boxBoolean));
            Boolean::initializeClass();
            PyDict_SetItemString(PY_TYPE(Boolean).tp_dict, "FALSE", make_descriptor(t_Boolean::wrap_Object(*Boolean::FALSE)));
            PyDict_SetItemString(PY_TYPE(Boolean).tp_dict, "TRUE", make_descriptor(t_Boolean::wrap_Object(*Boolean::TRUE)));
            PyDict_SetItemString(PY_TYPE(Boolean).tp_dict, "TYPE", make_descriptor(::java::lang::t_Class::wrap_Object(*Boolean::TYPE)));
        }

        static PyObject *t_Boolean_cast_(PyTypeObject *type, PyObject *arg)
        {
            if (!(arg = castCheck(arg, Boolean::initializeClass, 1)))
                return NULL;
            return t_Boolean::wrap_Object(Boolean(((t_Boolean *) arg)->object.this$));
        }
        static PyObject *t_Boolean_instance_(PyTypeObject *type, PyObject *arg)
        {
            if (!castCheck(arg, Boolean::initializeClass, 0))
                Py_RETURN_FALSE;
            Py_RETURN_TRUE;
        }

        static int t_Boolean_init_(t_Boolean *self, PyObject *args, PyObject *kwds)
        {
            switch (PyTuple_GET_SIZE(args)) {
              case 1:
                {
                    jboolean a0;
                    Boolean object((jobject) NULL);

                    if (!parseArgs(args, "Z", &a0))
                    {
                        INT_CALL(object = Boolean(a0));
                        self->object = object;
                        break;
                    }
                }
                {
                    ::java::lang::String a0((jobject) NULL);
                    Boolean object((jobject) NULL);

                    if (!parseArgs(args, "s", &a0))
                    {
                        INT_CALL(object = Boolean(a0));
                        self->object = object;
                        break;
                    }
                }
              default:
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
            }

            return 0;
        }

        static PyObject *t_Boolean_booleanValue(t_Boolean *self)
        {
            jboolean result;
            OBJ_CALL(result = self->object.booleanValue());
            Py_RETURN_BOOL(result);
        }

        static PyObject *t_Boolean_compareTo(t_Boolean *self, PyObject *args)
        {
            switch (PyTuple_GET_SIZE(args)) {
              case 1:
                {
                    Boolean a0((jobject) NULL);
                    jint result;

                    if (!parseArgs(args, "O", &::java::lang::PY_TYPE(Boolean), &a0))
                    {
                        OBJ_CALL(result = self->object.compareTo(a0));
                        return PyInt_FromLong((long) result);
                    }
                }
                {
                    ::java::lang::Object a0((jobject) NULL);
                    jint result;

                    if (!parseArgs(args, "o", &a0))
                    {
                        OBJ_CALL(result = self->object.compareTo(a0));
                        return PyInt_FromLong((long) result);
                    }
                }
            }

            PyErr_SetArgsError((PyObject *) self, "compareTo", args);
            return NULL;
        }

        static PyObject *t_Boolean_equals(t_Boolean *self, PyObject *args)
        {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
                OBJ_CALL(result = self->object.equals(a0));
                Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(Boolean), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_Boolean_getBoolean(PyTypeObject *type, PyObject *arg)
        {
            ::java::lang::String a0((jobject) NULL);
            jboolean result;

            if (!parseArg(arg, "s", &a0))
            {
                OBJ_CALL(result = ::java::lang::Boolean::getBoolean(a0));
                Py_RETURN_BOOL(result);
            }

            PyErr_SetArgsError(type, "getBoolean", arg);
            return NULL;
        }

        static PyObject *t_Boolean_hashCode(t_Boolean *self, PyObject *args)
        {
            jint result;

            if (!parseArgs(args, ""))
            {
                OBJ_CALL(result = self->object.hashCode());
                return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(Boolean), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_Boolean_parseBoolean(PyTypeObject *type, PyObject *arg)
        {
            ::java::lang::String a0((jobject) NULL);
            jboolean result;

            if (!parseArg(arg, "s", &a0))
            {
                OBJ_CALL(result = ::java::lang::Boolean::parseBoolean(a0));
                Py_RETURN_BOOL(result);
            }

            PyErr_SetArgsError(type, "parseBoolean", arg);
            return NULL;
        }

        static PyObject *t_Boolean_toString(t_Boolean *self, PyObject *args)
        {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
                OBJ_CALL(result = self->object.toString());
                return j2p(result);
            }

            return callSuper(&PY_TYPE(Boolean), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_Boolean_toString_(PyTypeObject *type, PyObject *args)
        {
            jboolean a0;
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, "Z", &a0))
            {
                OBJ_CALL(result = ::java::lang::Boolean::toString(a0));
                return j2p(result);
            }

            PyErr_SetArgsError(type, "toString_", args);
            return NULL;
        }

        static PyObject *t_Boolean_valueOf(PyTypeObject *type, PyObject *args)
        {
            switch (PyTuple_GET_SIZE(args)) {
              case 1:
                {
                    jboolean a0;
                    Boolean result((jobject) NULL);

                    if (!parseArgs(args, "Z", &a0))
                    {
                        OBJ_CALL(result = ::java::lang::Boolean::valueOf(a0));
                        return t_Boolean::wrap_Object(result);
                    }
                }
                {
                    ::java::lang::String a0((jobject) NULL);
                    Boolean result((jobject) NULL);

                    if (!parseArgs(args, "s", &a0))
                    {
                        OBJ_CALL(result = ::java::lang::Boolean::valueOf(a0));
                        return t_Boolean::wrap_Object(result);
                    }
                }
            }

            PyErr_SetArgsError(type, "valueOf", args);
            return NULL;
        }
    }
}
#include <jni.h>
#include "JCCEnv.h"
#include "is/iclt/icenlp/core/tokenizer/TokenTags.h"
#include "java/util/ArrayList.h"
#include "is/iclt/icenlp/core/tokenizer/Token$TokenCode.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "is/iclt/icenlp/core/utils/Tag.h"
#include "JArray.h"

namespace is {
    namespace iclt {
        namespace icenlp {
            namespace core {
                namespace tokenizer {

                    ::java::lang::Class *TokenTags::class$ = NULL;
                    jmethodID *TokenTags::mids$ = NULL;

                    jclass TokenTags::initializeClass()
                    {
                        if (!class$)
                        {

                            jclass cls = (jclass) env->findClass("is/iclt/icenlp/core/tokenizer/TokenTags");

                            mids$ = new jmethodID[max_mid];
                            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                            mids$[mid_init$_7f9b69a7] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lis/iclt/icenlp/core/tokenizer/Token$TokenCode;)V");
                            mids$[mid_addAllTags_5fdc3f48] = env->getMethodID(cls, "addAllTags", "(Ljava/lang/String;)V");
                            mids$[mid_addAllTagsFront_5fdc3f48] = env->getMethodID(cls, "addAllTagsFront", "(Ljava/lang/String;)V");
                            mids$[mid_addAllTagsReverse_5fdc3f48] = env->getMethodID(cls, "addAllTagsReverse", "(Ljava/lang/String;)V");
                            mids$[mid_addAllTagsWithSeparator_4a264742] = env->getMethodID(cls, "addAllTagsWithSeparator", "(Ljava/lang/String;Ljava/lang/String;)V");
                            mids$[mid_addTag_5fdc3f48] = env->getMethodID(cls, "addTag", "(Ljava/lang/String;)V");
                            mids$[mid_addTag_7c5bc380] = env->getMethodID(cls, "addTag", "(Lis/iclt/icenlp/core/utils/Tag;)V");
                            mids$[mid_addTagFront_5fdc3f48] = env->getMethodID(cls, "addTagFront", "(Ljava/lang/String;)V");
                            mids$[mid_allTagStrings_14c7b5c5] = env->getMethodID(cls, "allTagStrings", "()Ljava/lang/String;");
                            mids$[mid_allTagStringsWithSeparator_97a5258f] = env->getMethodID(cls, "allTagStringsWithSeparator", "(Ljava/lang/String;)Ljava/lang/String;");
                            mids$[mid_clearTags_54c6a166] = env->getMethodID(cls, "clearTags", "()V");
                            mids$[mid_getCardinalKey_14c7b5c5] = env->getMethodID(cls, "getCardinalKey", "()Ljava/lang/String;");
                            mids$[mid_getFirstTag_fdc96bad] = env->getMethodID(cls, "getFirstTag", "()Lis/iclt/icenlp/core/utils/Tag;");
                            mids$[mid_getFirstTagStr_14c7b5c5] = env->getMethodID(cls, "getFirstTagStr", "()Ljava/lang/String;");
                            mids$[mid_getLastTag_fdc96bad] = env->getMethodID(cls, "getLastTag", "()Lis/iclt/icenlp/core/utils/Tag;");
                            mids$[mid_getLastTagStr_14c7b5c5] = env->getMethodID(cls, "getLastTagStr", "()Ljava/lang/String;");
                            mids$[mid_getProbSuffix_54c6a174] = env->getMethodID(cls, "getProbSuffix", "()D");
                            mids$[mid_getSuffixLength_54c6a179] = env->getMethodID(cls, "getSuffixLength", "()I");
                            mids$[mid_getTags_21eb51b0] = env->getMethodID(cls, "getTags", "()Ljava/util/ArrayList;");
                            mids$[mid_isCardinal_54c6a16a] = env->getMethodID(cls, "isCardinal", "()Z");
                            mids$[mid_isMorpho_54c6a16a] = env->getMethodID(cls, "isMorpho", "()Z");
                            mids$[mid_isUnknown_54c6a16a] = env->getMethodID(cls, "isUnknown", "()Z");
                            mids$[mid_noTags_54c6a16a] = env->getMethodID(cls, "noTags", "()Z");
                            mids$[mid_numTags_54c6a179] = env->getMethodID(cls, "numTags", "()I");
                            mids$[mid_removeAllBut_5fdc3f48] = env->getMethodID(cls, "removeAllBut", "(Ljava/lang/String;)V");
                            mids$[mid_removeAllButFirstTag_54c6a166] = env->getMethodID(cls, "removeAllButFirstTag", "()V");
                            mids$[mid_removeInvalidTags_54c6a166] = env->getMethodID(cls, "removeInvalidTags", "()V");
                            mids$[mid_setAllTags_5fdc3f48] = env->getMethodID(cls, "setAllTags", "(Ljava/lang/String;)V");
                            mids$[mid_setAllTags_b3f662f9] = env->getMethodID(cls, "setAllTags", "(Ljava/util/ArrayList;)V");
                            mids$[mid_setCardinalKey_5fdc3f48] = env->getMethodID(cls, "setCardinalKey", "(Ljava/lang/String;)V");
                            mids$[mid_setMorpho_bb0c767f] = env->getMethodID(cls, "setMorpho", "(Z)V");
                            mids$[mid_setProbSuffix_5d1c7645] = env->getMethodID(cls, "setProbSuffix", "(D)V");
                            mids$[mid_setSuffixLength_39c7bd3c] = env->getMethodID(cls, "setSuffixLength", "(I)V");
                            mids$[mid_setTag_7c5bc380] = env->getMethodID(cls, "setTag", "(Lis/iclt/icenlp/core/utils/Tag;)V");
                            mids$[mid_setTag_5fdc3f48] = env->getMethodID(cls, "setTag", "(Ljava/lang/String;)V");
                            mids$[mid_setUnknown_bb0c767f] = env->getMethodID(cls, "setUnknown", "(Z)V");
                            mids$[mid_tagExists_5fdc3f44] = env->getMethodID(cls, "tagExists", "(Ljava/lang/String;)Z");
                            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
                            mids$[mid_splitTags_1f6a174f] = env->getMethodID(cls, "splitTags", "(Ljava/lang/String;)[Ljava/lang/String;");
                            mids$[mid_splitTagsWithSeparator_6aa2a869] = env->getMethodID(cls, "splitTagsWithSeparator", "(Ljava/lang/String;Ljava/lang/String;)[Ljava/lang/String;");

                            class$ = (::java::lang::Class *) new JObject(cls);
                        }
                        return (jclass) class$->this$;
                    }

                    TokenTags::TokenTags() : ::is::iclt::icenlp::core::tokenizer::Token(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

                    TokenTags::TokenTags(const ::java::lang::String & a0, const ::is::iclt::icenlp::core::tokenizer::Token$TokenCode & a1) : ::is::iclt::icenlp::core::tokenizer::Token(env->newObject(initializeClass, &mids$, mid_init$_7f9b69a7, a0.this$, a1.this$)) {}

                    void TokenTags::addAllTags(const ::java::lang::String & a0) const
                    {
                        env->callVoidMethod(this$, mids$[mid_addAllTags_5fdc3f48], a0.this$);
                    }

                    void TokenTags::addAllTagsFront(const ::java::lang::String & a0) const
                    {
                        env->callVoidMethod(this$, mids$[mid_addAllTagsFront_5fdc3f48], a0.this$);
                    }

                    void TokenTags::addAllTagsReverse(const ::java::lang::String & a0) const
                    {
                        env->callVoidMethod(this$, mids$[mid_addAllTagsReverse_5fdc3f48], a0.this$);
                    }

                    void TokenTags::addAllTagsWithSeparator(const ::java::lang::String & a0, const ::java::lang::String & a1) const
                    {
                        env->callVoidMethod(this$, mids$[mid_addAllTagsWithSeparator_4a264742], a0.this$, a1.this$);
                    }

                    void TokenTags::addTag(const ::java::lang::String & a0) const
                    {
                        env->callVoidMethod(this$, mids$[mid_addTag_5fdc3f48], a0.this$);
                    }

                    void TokenTags::addTag(const ::is::iclt::icenlp::core::utils::Tag & a0) const
                    {
                        env->callVoidMethod(this$, mids$[mid_addTag_7c5bc380], a0.this$);
                    }

                    void TokenTags::addTagFront(const ::java::lang::String & a0) const
                    {
                        env->callVoidMethod(this$, mids$[mid_addTagFront_5fdc3f48], a0.this$);
                    }

                    ::java::lang::String TokenTags::allTagStrings() const
                    {
                        return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_allTagStrings_14c7b5c5]));
                    }

                    ::java::lang::String TokenTags::allTagStringsWithSeparator(const ::java::lang::String & a0) const
                    {
                        return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_allTagStringsWithSeparator_97a5258f], a0.this$));
                    }

                    void TokenTags::clearTags() const
                    {
                        env->callVoidMethod(this$, mids$[mid_clearTags_54c6a166]);
                    }

                    ::java::lang::String TokenTags::getCardinalKey() const
                    {
                        return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getCardinalKey_14c7b5c5]));
                    }

                    ::is::iclt::icenlp::core::utils::Tag TokenTags::getFirstTag() const
                    {
                        return ::is::iclt::icenlp::core::utils::Tag(env->callObjectMethod(this$, mids$[mid_getFirstTag_fdc96bad]));
                    }

                    ::java::lang::String TokenTags::getFirstTagStr() const
                    {
                        return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getFirstTagStr_14c7b5c5]));
                    }

                    ::is::iclt::icenlp::core::utils::Tag TokenTags::getLastTag() const
                    {
                        return ::is::iclt::icenlp::core::utils::Tag(env->callObjectMethod(this$, mids$[mid_getLastTag_fdc96bad]));
                    }

                    ::java::lang::String TokenTags::getLastTagStr() const
                    {
                        return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getLastTagStr_14c7b5c5]));
                    }

                    jdouble TokenTags::getProbSuffix() const
                    {
                        return env->callDoubleMethod(this$, mids$[mid_getProbSuffix_54c6a174]);
                    }

                    jint TokenTags::getSuffixLength() const
                    {
                        return env->callIntMethod(this$, mids$[mid_getSuffixLength_54c6a179]);
                    }

                    ::java::util::ArrayList TokenTags::getTags() const
                    {
                        return ::java::util::ArrayList(env->callObjectMethod(this$, mids$[mid_getTags_21eb51b0]));
                    }

                    jboolean TokenTags::isCardinal() const
                    {
                        return env->callBooleanMethod(this$, mids$[mid_isCardinal_54c6a16a]);
                    }

                    jboolean TokenTags::isMorpho() const
                    {
                        return env->callBooleanMethod(this$, mids$[mid_isMorpho_54c6a16a]);
                    }

                    jboolean TokenTags::isUnknown() const
                    {
                        return env->callBooleanMethod(this$, mids$[mid_isUnknown_54c6a16a]);
                    }

                    jboolean TokenTags::noTags() const
                    {
                        return env->callBooleanMethod(this$, mids$[mid_noTags_54c6a16a]);
                    }

                    jint TokenTags::numTags() const
                    {
                        return env->callIntMethod(this$, mids$[mid_numTags_54c6a179]);
                    }

                    void TokenTags::removeAllBut(const ::java::lang::String & a0) const
                    {
                        env->callVoidMethod(this$, mids$[mid_removeAllBut_5fdc3f48], a0.this$);
                    }

                    void TokenTags::removeAllButFirstTag() const
                    {
                        env->callVoidMethod(this$, mids$[mid_removeAllButFirstTag_54c6a166]);
                    }

                    void TokenTags::removeInvalidTags() const
                    {
                        env->callVoidMethod(this$, mids$[mid_removeInvalidTags_54c6a166]);
                    }

                    void TokenTags::setAllTags(const ::java::lang::String & a0) const
                    {
                        env->callVoidMethod(this$, mids$[mid_setAllTags_5fdc3f48], a0.this$);
                    }

                    void TokenTags::setAllTags(const ::java::util::ArrayList & a0) const
                    {
                        env->callVoidMethod(this$, mids$[mid_setAllTags_b3f662f9], a0.this$);
                    }

                    void TokenTags::setCardinalKey(const ::java::lang::String & a0) const
                    {
                        env->callVoidMethod(this$, mids$[mid_setCardinalKey_5fdc3f48], a0.this$);
                    }

                    void TokenTags::setMorpho(jboolean a0) const
                    {
                        env->callVoidMethod(this$, mids$[mid_setMorpho_bb0c767f], a0);
                    }

                    void TokenTags::setProbSuffix(jdouble a0) const
                    {
                        env->callVoidMethod(this$, mids$[mid_setProbSuffix_5d1c7645], a0);
                    }

                    void TokenTags::setSuffixLength(jint a0) const
                    {
                        env->callVoidMethod(this$, mids$[mid_setSuffixLength_39c7bd3c], a0);
                    }

                    void TokenTags::setTag(const ::is::iclt::icenlp::core::utils::Tag & a0) const
                    {
                        env->callVoidMethod(this$, mids$[mid_setTag_7c5bc380], a0.this$);
                    }

                    void TokenTags::setTag(const ::java::lang::String & a0) const
                    {
                        env->callVoidMethod(this$, mids$[mid_setTag_5fdc3f48], a0.this$);
                    }

                    void TokenTags::setUnknown(jboolean a0) const
                    {
                        env->callVoidMethod(this$, mids$[mid_setUnknown_bb0c767f], a0);
                    }

                    jboolean TokenTags::tagExists(const ::java::lang::String & a0) const
                    {
                        return env->callBooleanMethod(this$, mids$[mid_tagExists_5fdc3f44], a0.this$);
                    }

                    ::java::lang::String TokenTags::toString() const
                    {
                        return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
                    }
                }
            }
        }
    }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace is {
    namespace iclt {
        namespace icenlp {
            namespace core {
                namespace tokenizer {
                    static PyObject *t_TokenTags_cast_(PyTypeObject *type, PyObject *arg);
                    static PyObject *t_TokenTags_instance_(PyTypeObject *type, PyObject *arg);
                    static int t_TokenTags_init_(t_TokenTags *self, PyObject *args, PyObject *kwds);
                    static PyObject *t_TokenTags_addAllTags(t_TokenTags *self, PyObject *arg);
                    static PyObject *t_TokenTags_addAllTagsFront(t_TokenTags *self, PyObject *arg);
                    static PyObject *t_TokenTags_addAllTagsReverse(t_TokenTags *self, PyObject *arg);
                    static PyObject *t_TokenTags_addAllTagsWithSeparator(t_TokenTags *self, PyObject *args);
                    static PyObject *t_TokenTags_addTag(t_TokenTags *self, PyObject *args);
                    static PyObject *t_TokenTags_addTagFront(t_TokenTags *self, PyObject *arg);
                    static PyObject *t_TokenTags_allTagStrings(t_TokenTags *self);
                    static PyObject *t_TokenTags_allTagStringsWithSeparator(t_TokenTags *self, PyObject *arg);
                    static PyObject *t_TokenTags_clearTags(t_TokenTags *self);
                    static PyObject *t_TokenTags_getCardinalKey(t_TokenTags *self);
                    static PyObject *t_TokenTags_getFirstTag(t_TokenTags *self);
                    static PyObject *t_TokenTags_getFirstTagStr(t_TokenTags *self);
                    static PyObject *t_TokenTags_getLastTag(t_TokenTags *self);
                    static PyObject *t_TokenTags_getLastTagStr(t_TokenTags *self);
                    static PyObject *t_TokenTags_getProbSuffix(t_TokenTags *self);
                    static PyObject *t_TokenTags_getSuffixLength(t_TokenTags *self);
                    static PyObject *t_TokenTags_getTags(t_TokenTags *self);
                    static PyObject *t_TokenTags_isCardinal(t_TokenTags *self);
                    static PyObject *t_TokenTags_isMorpho(t_TokenTags *self);
                    static PyObject *t_TokenTags_isUnknown(t_TokenTags *self, PyObject *args);
                    static PyObject *t_TokenTags_noTags(t_TokenTags *self);
                    static PyObject *t_TokenTags_numTags(t_TokenTags *self);
                    static PyObject *t_TokenTags_removeAllBut(t_TokenTags *self, PyObject *arg);
                    static PyObject *t_TokenTags_removeAllButFirstTag(t_TokenTags *self);
                    static PyObject *t_TokenTags_removeInvalidTags(t_TokenTags *self);
                    static PyObject *t_TokenTags_setAllTags(t_TokenTags *self, PyObject *args);
                    static PyObject *t_TokenTags_setCardinalKey(t_TokenTags *self, PyObject *arg);
                    static PyObject *t_TokenTags_setMorpho(t_TokenTags *self, PyObject *arg);
                    static PyObject *t_TokenTags_setProbSuffix(t_TokenTags *self, PyObject *arg);
                    static PyObject *t_TokenTags_setSuffixLength(t_TokenTags *self, PyObject *arg);
                    static PyObject *t_TokenTags_setTag(t_TokenTags *self, PyObject *args);
                    static PyObject *t_TokenTags_setUnknown(t_TokenTags *self, PyObject *arg);
                    static PyObject *t_TokenTags_tagExists(t_TokenTags *self, PyObject *arg);
                    static PyObject *t_TokenTags_toString(t_TokenTags *self, PyObject *args);
                    static int t_TokenTags_set__allTags(t_TokenTags *self, PyObject *arg, void *data);
                    static PyObject *t_TokenTags_get__cardinal(t_TokenTags *self, void *data);
                    static PyObject *t_TokenTags_get__cardinalKey(t_TokenTags *self, void *data);
                    static int t_TokenTags_set__cardinalKey(t_TokenTags *self, PyObject *arg, void *data);
                    static PyObject *t_TokenTags_get__firstTag(t_TokenTags *self, void *data);
                    static PyObject *t_TokenTags_get__firstTagStr(t_TokenTags *self, void *data);
                    static PyObject *t_TokenTags_get__lastTag(t_TokenTags *self, void *data);
                    static PyObject *t_TokenTags_get__lastTagStr(t_TokenTags *self, void *data);
                    static PyObject *t_TokenTags_get__morpho(t_TokenTags *self, void *data);
                    static int t_TokenTags_set__morpho(t_TokenTags *self, PyObject *arg, void *data);
                    static PyObject *t_TokenTags_get__probSuffix(t_TokenTags *self, void *data);
                    static int t_TokenTags_set__probSuffix(t_TokenTags *self, PyObject *arg, void *data);
                    static PyObject *t_TokenTags_get__suffixLength(t_TokenTags *self, void *data);
                    static int t_TokenTags_set__suffixLength(t_TokenTags *self, PyObject *arg, void *data);
                    static int t_TokenTags_set__tag(t_TokenTags *self, PyObject *arg, void *data);
                    static PyObject *t_TokenTags_get__tags(t_TokenTags *self, void *data);
                    static PyObject *t_TokenTags_get__unknown(t_TokenTags *self, void *data);
                    static int t_TokenTags_set__unknown(t_TokenTags *self, PyObject *arg, void *data);
                    static PyGetSetDef t_TokenTags__fields_[] = {
                        DECLARE_SET_FIELD(t_TokenTags, allTags),
                        DECLARE_GET_FIELD(t_TokenTags, cardinal),
                        DECLARE_GETSET_FIELD(t_TokenTags, cardinalKey),
                        DECLARE_GET_FIELD(t_TokenTags, firstTag),
                        DECLARE_GET_FIELD(t_TokenTags, firstTagStr),
                        DECLARE_GET_FIELD(t_TokenTags, lastTag),
                        DECLARE_GET_FIELD(t_TokenTags, lastTagStr),
                        DECLARE_GETSET_FIELD(t_TokenTags, morpho),
                        DECLARE_GETSET_FIELD(t_TokenTags, probSuffix),
                        DECLARE_GETSET_FIELD(t_TokenTags, suffixLength),
                        DECLARE_SET_FIELD(t_TokenTags, tag),
                        DECLARE_GET_FIELD(t_TokenTags, tags),
                        DECLARE_GETSET_FIELD(t_TokenTags, unknown),
                        { NULL, NULL, NULL, NULL, NULL }
                    };

                    static PyMethodDef t_TokenTags__methods_[] = {
                        DECLARE_METHOD(t_TokenTags, cast_, METH_O | METH_CLASS),
                        DECLARE_METHOD(t_TokenTags, instance_, METH_O | METH_CLASS),
                        DECLARE_METHOD(t_TokenTags, addAllTags, METH_O),
                        DECLARE_METHOD(t_TokenTags, addAllTagsFront, METH_O),
                        DECLARE_METHOD(t_TokenTags, addAllTagsReverse, METH_O),
                        DECLARE_METHOD(t_TokenTags, addAllTagsWithSeparator, METH_VARARGS),
                        DECLARE_METHOD(t_TokenTags, addTag, METH_VARARGS),
                        DECLARE_METHOD(t_TokenTags, addTagFront, METH_O),
                        DECLARE_METHOD(t_TokenTags, allTagStrings, METH_NOARGS),
                        DECLARE_METHOD(t_TokenTags, allTagStringsWithSeparator, METH_O),
                        DECLARE_METHOD(t_TokenTags, clearTags, METH_NOARGS),
                        DECLARE_METHOD(t_TokenTags, getCardinalKey, METH_NOARGS),
                        DECLARE_METHOD(t_TokenTags, getFirstTag, METH_NOARGS),
                        DECLARE_METHOD(t_TokenTags, getFirstTagStr, METH_NOARGS),
                        DECLARE_METHOD(t_TokenTags, getLastTag, METH_NOARGS),
                        DECLARE_METHOD(t_TokenTags, getLastTagStr, METH_NOARGS),
                        DECLARE_METHOD(t_TokenTags, getProbSuffix, METH_NOARGS),
                        DECLARE_METHOD(t_TokenTags, getSuffixLength, METH_NOARGS),
                        DECLARE_METHOD(t_TokenTags, getTags, METH_NOARGS),
                        DECLARE_METHOD(t_TokenTags, isCardinal, METH_NOARGS),
                        DECLARE_METHOD(t_TokenTags, isMorpho, METH_NOARGS),
                        DECLARE_METHOD(t_TokenTags, isUnknown, METH_VARARGS),
                        DECLARE_METHOD(t_TokenTags, noTags, METH_NOARGS),
                        DECLARE_METHOD(t_TokenTags, numTags, METH_NOARGS),
                        DECLARE_METHOD(t_TokenTags, removeAllBut, METH_O),
                        DECLARE_METHOD(t_TokenTags, removeAllButFirstTag, METH_NOARGS),
                        DECLARE_METHOD(t_TokenTags, removeInvalidTags, METH_NOARGS),
                        DECLARE_METHOD(t_TokenTags, setAllTags, METH_VARARGS),
                        DECLARE_METHOD(t_TokenTags, setCardinalKey, METH_O),
                        DECLARE_METHOD(t_TokenTags, setMorpho, METH_O),
                        DECLARE_METHOD(t_TokenTags, setProbSuffix, METH_O),
                        DECLARE_METHOD(t_TokenTags, setSuffixLength, METH_O),
                        DECLARE_METHOD(t_TokenTags, setTag, METH_VARARGS),
                        DECLARE_METHOD(t_TokenTags, setUnknown, METH_O),
                        DECLARE_METHOD(t_TokenTags, tagExists, METH_O),
                        DECLARE_METHOD(t_TokenTags, toString, METH_VARARGS),
                        { NULL, NULL, 0, NULL }
                    };

                    DECLARE_TYPE(TokenTags, t_TokenTags, ::is::iclt::icenlp::core::tokenizer::Token, TokenTags, t_TokenTags_init_, 0, 0, t_TokenTags__fields_, 0, 0);

                    void t_TokenTags::install(PyObject *module)
                    {
                        installType(&PY_TYPE(TokenTags), module, "TokenTags", 0);
                    }

                    void t_TokenTags::initialize(PyObject *module)
                    {
                        PyDict_SetItemString(PY_TYPE(TokenTags).tp_dict, "class_", make_descriptor(TokenTags::initializeClass, 1));
                        PyDict_SetItemString(PY_TYPE(TokenTags).tp_dict, "wrapfn_", make_descriptor(t_TokenTags::wrap_jobject));
                        PyDict_SetItemString(PY_TYPE(TokenTags).tp_dict, "boxfn_", make_descriptor(boxObject));
                    }

                    static PyObject *t_TokenTags_cast_(PyTypeObject *type, PyObject *arg)
                    {
                        if (!(arg = castCheck(arg, TokenTags::initializeClass, 1)))
                            return NULL;
                        return t_TokenTags::wrap_Object(TokenTags(((t_TokenTags *) arg)->object.this$));
                    }
                    static PyObject *t_TokenTags_instance_(PyTypeObject *type, PyObject *arg)
                    {
                        if (!castCheck(arg, TokenTags::initializeClass, 0))
                            Py_RETURN_FALSE;
                        Py_RETURN_TRUE;
                    }

                    static int t_TokenTags_init_(t_TokenTags *self, PyObject *args, PyObject *kwds)
                    {
                        switch (PyTuple_GET_SIZE(args)) {
                          case 0:
                            {
                                TokenTags object((jobject) NULL);

                                INT_CALL(object = TokenTags());
                                self->object = object;
                                break;
                            }
                            goto err;
                          case 2:
                            {
                                ::java::lang::String a0((jobject) NULL);
                                ::is::iclt::icenlp::core::tokenizer::Token$TokenCode a1((jobject) NULL);
                                TokenTags object((jobject) NULL);

                                if (!parseArgs(args, "sk", ::is::iclt::icenlp::core::tokenizer::Token$TokenCode::initializeClass, &a0, &a1))
                                {
                                    INT_CALL(object = TokenTags(a0, a1));
                                    self->object = object;
                                    break;
                                }
                            }
                          default:
                          err:
                            PyErr_SetArgsError((PyObject *) self, "__init__", args);
                            return -1;
                        }

                        return 0;
                    }

                    static PyObject *t_TokenTags_addAllTags(t_TokenTags *self, PyObject *arg)
                    {
                        ::java::lang::String a0((jobject) NULL);

                        if (!parseArg(arg, "s", &a0))
                        {
                            OBJ_CALL(self->object.addAllTags(a0));
                            Py_RETURN_NONE;
                        }

                        PyErr_SetArgsError((PyObject *) self, "addAllTags", arg);
                        return NULL;
                    }

                    static PyObject *t_TokenTags_addAllTagsFront(t_TokenTags *self, PyObject *arg)
                    {
                        ::java::lang::String a0((jobject) NULL);

                        if (!parseArg(arg, "s", &a0))
                        {
                            OBJ_CALL(self->object.addAllTagsFront(a0));
                            Py_RETURN_NONE;
                        }

                        PyErr_SetArgsError((PyObject *) self, "addAllTagsFront", arg);
                        return NULL;
                    }

                    static PyObject *t_TokenTags_addAllTagsReverse(t_TokenTags *self, PyObject *arg)
                    {
                        ::java::lang::String a0((jobject) NULL);

                        if (!parseArg(arg, "s", &a0))
                        {
                            OBJ_CALL(self->object.addAllTagsReverse(a0));
                            Py_RETURN_NONE;
                        }

                        PyErr_SetArgsError((PyObject *) self, "addAllTagsReverse", arg);
                        return NULL;
                    }

                    static PyObject *t_TokenTags_addAllTagsWithSeparator(t_TokenTags *self, PyObject *args)
                    {
                        ::java::lang::String a0((jobject) NULL);
                        ::java::lang::String a1((jobject) NULL);

                        if (!parseArgs(args, "ss", &a0, &a1))
                        {
                            OBJ_CALL(self->object.addAllTagsWithSeparator(a0, a1));
                            Py_RETURN_NONE;
                        }

                        PyErr_SetArgsError((PyObject *) self, "addAllTagsWithSeparator", args);
                        return NULL;
                    }

                    static PyObject *t_TokenTags_addTag(t_TokenTags *self, PyObject *args)
                    {
                        switch (PyTuple_GET_SIZE(args)) {
                          case 1:
                            {
                                ::java::lang::String a0((jobject) NULL);

                                if (!parseArgs(args, "s", &a0))
                                {
                                    OBJ_CALL(self->object.addTag(a0));
                                    Py_RETURN_NONE;
                                }
                            }
                            {
                                ::is::iclt::icenlp::core::utils::Tag a0((jobject) NULL);

                                if (!parseArgs(args, "k", ::is::iclt::icenlp::core::utils::Tag::initializeClass, &a0))
                                {
                                    OBJ_CALL(self->object.addTag(a0));
                                    Py_RETURN_NONE;
                                }
                            }
                        }

                        PyErr_SetArgsError((PyObject *) self, "addTag", args);
                        return NULL;
                    }

                    static PyObject *t_TokenTags_addTagFront(t_TokenTags *self, PyObject *arg)
                    {
                        ::java::lang::String a0((jobject) NULL);

                        if (!parseArg(arg, "s", &a0))
                        {
                            OBJ_CALL(self->object.addTagFront(a0));
                            Py_RETURN_NONE;
                        }

                        PyErr_SetArgsError((PyObject *) self, "addTagFront", arg);
                        return NULL;
                    }

                    static PyObject *t_TokenTags_allTagStrings(t_TokenTags *self)
                    {
                        ::java::lang::String result((jobject) NULL);
                        OBJ_CALL(result = self->object.allTagStrings());
                        return j2p(result);
                    }

                    static PyObject *t_TokenTags_allTagStringsWithSeparator(t_TokenTags *self, PyObject *arg)
                    {
                        ::java::lang::String a0((jobject) NULL);
                        ::java::lang::String result((jobject) NULL);

                        if (!parseArg(arg, "s", &a0))
                        {
                            OBJ_CALL(result = self->object.allTagStringsWithSeparator(a0));
                            return j2p(result);
                        }

                        PyErr_SetArgsError((PyObject *) self, "allTagStringsWithSeparator", arg);
                        return NULL;
                    }

                    static PyObject *t_TokenTags_clearTags(t_TokenTags *self)
                    {
                        OBJ_CALL(self->object.clearTags());
                        Py_RETURN_NONE;
                    }

                    static PyObject *t_TokenTags_getCardinalKey(t_TokenTags *self)
                    {
                        ::java::lang::String result((jobject) NULL);
                        OBJ_CALL(result = self->object.getCardinalKey());
                        return j2p(result);
                    }

                    static PyObject *t_TokenTags_getFirstTag(t_TokenTags *self)
                    {
                        ::is::iclt::icenlp::core::utils::Tag result((jobject) NULL);
                        OBJ_CALL(result = self->object.getFirstTag());
                        return ::is::iclt::icenlp::core::utils::t_Tag::wrap_Object(result);
                    }

                    static PyObject *t_TokenTags_getFirstTagStr(t_TokenTags *self)
                    {
                        ::java::lang::String result((jobject) NULL);
                        OBJ_CALL(result = self->object.getFirstTagStr());
                        return j2p(result);
                    }

                    static PyObject *t_TokenTags_getLastTag(t_TokenTags *self)
                    {
                        ::is::iclt::icenlp::core::utils::Tag result((jobject) NULL);
                        OBJ_CALL(result = self->object.getLastTag());
                        return ::is::iclt::icenlp::core::utils::t_Tag::wrap_Object(result);
                    }

                    static PyObject *t_TokenTags_getLastTagStr(t_TokenTags *self)
                    {
                        ::java::lang::String result((jobject) NULL);
                        OBJ_CALL(result = self->object.getLastTagStr());
                        return j2p(result);
                    }

                    static PyObject *t_TokenTags_getProbSuffix(t_TokenTags *self)
                    {
                        jdouble result;
                        OBJ_CALL(result = self->object.getProbSuffix());
                        return PyFloat_FromDouble((double) result);
                    }

                    static PyObject *t_TokenTags_getSuffixLength(t_TokenTags *self)
                    {
                        jint result;
                        OBJ_CALL(result = self->object.getSuffixLength());
                        return PyInt_FromLong((long) result);
                    }

                    static PyObject *t_TokenTags_getTags(t_TokenTags *self)
                    {
                        ::java::util::ArrayList result((jobject) NULL);
                        OBJ_CALL(result = self->object.getTags());
                        return ::java::util::t_ArrayList::wrap_Object(result);
                    }

                    static PyObject *t_TokenTags_isCardinal(t_TokenTags *self)
                    {
                        jboolean result;
                        OBJ_CALL(result = self->object.isCardinal());
                        Py_RETURN_BOOL(result);
                    }

                    static PyObject *t_TokenTags_isMorpho(t_TokenTags *self)
                    {
                        jboolean result;
                        OBJ_CALL(result = self->object.isMorpho());
                        Py_RETURN_BOOL(result);
                    }

                    static PyObject *t_TokenTags_isUnknown(t_TokenTags *self, PyObject *args)
                    {
                        jboolean result;

                        if (!parseArgs(args, ""))
                        {
                            OBJ_CALL(result = self->object.isUnknown());
                            Py_RETURN_BOOL(result);
                        }

                        return callSuper(&PY_TYPE(TokenTags), (PyObject *) self, "isUnknown", args, 2);
                    }

                    static PyObject *t_TokenTags_noTags(t_TokenTags *self)
                    {
                        jboolean result;
                        OBJ_CALL(result = self->object.noTags());
                        Py_RETURN_BOOL(result);
                    }

                    static PyObject *t_TokenTags_numTags(t_TokenTags *self)
                    {
                        jint result;
                        OBJ_CALL(result = self->object.numTags());
                        return PyInt_FromLong((long) result);
                    }

                    static PyObject *t_TokenTags_removeAllBut(t_TokenTags *self, PyObject *arg)
                    {
                        ::java::lang::String a0((jobject) NULL);

                        if (!parseArg(arg, "s", &a0))
                        {
                            OBJ_CALL(self->object.removeAllBut(a0));
                            Py_RETURN_NONE;
                        }

                        PyErr_SetArgsError((PyObject *) self, "removeAllBut", arg);
                        return NULL;
                    }

                    static PyObject *t_TokenTags_removeAllButFirstTag(t_TokenTags *self)
                    {
                        OBJ_CALL(self->object.removeAllButFirstTag());
                        Py_RETURN_NONE;
                    }

                    static PyObject *t_TokenTags_removeInvalidTags(t_TokenTags *self)
                    {
                        OBJ_CALL(self->object.removeInvalidTags());
                        Py_RETURN_NONE;
                    }

                    static PyObject *t_TokenTags_setAllTags(t_TokenTags *self, PyObject *args)
                    {
                        switch (PyTuple_GET_SIZE(args)) {
                          case 1:
                            {
                                ::java::lang::String a0((jobject) NULL);

                                if (!parseArgs(args, "s", &a0))
                                {
                                    OBJ_CALL(self->object.setAllTags(a0));
                                    Py_RETURN_NONE;
                                }
                            }
                            {
                                ::java::util::ArrayList a0((jobject) NULL);
                                PyTypeObject **p0;

                                if (!parseArgs(args, "K", ::java::util::ArrayList::initializeClass, &a0, &p0, ::java::util::t_ArrayList::parameters_))
                                {
                                    OBJ_CALL(self->object.setAllTags(a0));
                                    Py_RETURN_NONE;
                                }
                            }
                        }

                        PyErr_SetArgsError((PyObject *) self, "setAllTags", args);
                        return NULL;
                    }

                    static PyObject *t_TokenTags_setCardinalKey(t_TokenTags *self, PyObject *arg)
                    {
                        ::java::lang::String a0((jobject) NULL);

                        if (!parseArg(arg, "s", &a0))
                        {
                            OBJ_CALL(self->object.setCardinalKey(a0));
                            Py_RETURN_NONE;
                        }

                        PyErr_SetArgsError((PyObject *) self, "setCardinalKey", arg);
                        return NULL;
                    }

                    static PyObject *t_TokenTags_setMorpho(t_TokenTags *self, PyObject *arg)
                    {
                        jboolean a0;

                        if (!parseArg(arg, "Z", &a0))
                        {
                            OBJ_CALL(self->object.setMorpho(a0));
                            Py_RETURN_NONE;
                        }

                        PyErr_SetArgsError((PyObject *) self, "setMorpho", arg);
                        return NULL;
                    }

                    static PyObject *t_TokenTags_setProbSuffix(t_TokenTags *self, PyObject *arg)
                    {
                        jdouble a0;

                        if (!parseArg(arg, "D", &a0))
                        {
                            OBJ_CALL(self->object.setProbSuffix(a0));
                            Py_RETURN_NONE;
                        }

                        PyErr_SetArgsError((PyObject *) self, "setProbSuffix", arg);
                        return NULL;
                    }

                    static PyObject *t_TokenTags_setSuffixLength(t_TokenTags *self, PyObject *arg)
                    {
                        jint a0;

                        if (!parseArg(arg, "I", &a0))
                        {
                            OBJ_CALL(self->object.setSuffixLength(a0));
                            Py_RETURN_NONE;
                        }

                        PyErr_SetArgsError((PyObject *) self, "setSuffixLength", arg);
                        return NULL;
                    }

                    static PyObject *t_TokenTags_setTag(t_TokenTags *self, PyObject *args)
                    {
                        switch (PyTuple_GET_SIZE(args)) {
                          case 1:
                            {
                                ::is::iclt::icenlp::core::utils::Tag a0((jobject) NULL);

                                if (!parseArgs(args, "k", ::is::iclt::icenlp::core::utils::Tag::initializeClass, &a0))
                                {
                                    OBJ_CALL(self->object.setTag(a0));
                                    Py_RETURN_NONE;
                                }
                            }
                            {
                                ::java::lang::String a0((jobject) NULL);

                                if (!parseArgs(args, "s", &a0))
                                {
                                    OBJ_CALL(self->object.setTag(a0));
                                    Py_RETURN_NONE;
                                }
                            }
                        }

                        PyErr_SetArgsError((PyObject *) self, "setTag", args);
                        return NULL;
                    }

                    static PyObject *t_TokenTags_setUnknown(t_TokenTags *self, PyObject *arg)
                    {
                        jboolean a0;

                        if (!parseArg(arg, "Z", &a0))
                        {
                            OBJ_CALL(self->object.setUnknown(a0));
                            Py_RETURN_NONE;
                        }

                        PyErr_SetArgsError((PyObject *) self, "setUnknown", arg);
                        return NULL;
                    }

                    static PyObject *t_TokenTags_tagExists(t_TokenTags *self, PyObject *arg)
                    {
                        ::java::lang::String a0((jobject) NULL);
                        jboolean result;

                        if (!parseArg(arg, "s", &a0))
                        {
                            OBJ_CALL(result = self->object.tagExists(a0));
                            Py_RETURN_BOOL(result);
                        }

                        PyErr_SetArgsError((PyObject *) self, "tagExists", arg);
                        return NULL;
                    }

                    static PyObject *t_TokenTags_toString(t_TokenTags *self, PyObject *args)
                    {
                        ::java::lang::String result((jobject) NULL);

                        if (!parseArgs(args, ""))
                        {
                            OBJ_CALL(result = self->object.toString());
                            return j2p(result);
                        }

                        return callSuper(&PY_TYPE(TokenTags), (PyObject *) self, "toString", args, 2);
                    }

                    static int t_TokenTags_set__allTags(t_TokenTags *self, PyObject *arg, void *data)
                    {
                        {
                            ::java::lang::String value((jobject) NULL);
                            if (!parseArg(arg, "s", &value))
                            {
                                INT_CALL(self->object.setAllTags(value));
                                return 0;
                            }
                        }
                        {
                            ::java::util::ArrayList value((jobject) NULL);
                            if (!parseArg(arg, "k", ::java::util::ArrayList::initializeClass, &value))
                            {
                                INT_CALL(self->object.setAllTags(value));
                                return 0;
                            }
                        }
                        PyErr_SetArgsError((PyObject *) self, "allTags", arg);
                        return -1;
                    }

                    static PyObject *t_TokenTags_get__cardinal(t_TokenTags *self, void *data)
                    {
                        jboolean value;
                        OBJ_CALL(value = self->object.isCardinal());
                        Py_RETURN_BOOL(value);
                    }

                    static PyObject *t_TokenTags_get__cardinalKey(t_TokenTags *self, void *data)
                    {
                        ::java::lang::String value((jobject) NULL);
                        OBJ_CALL(value = self->object.getCardinalKey());
                        return j2p(value);
                    }
                    static int t_TokenTags_set__cardinalKey(t_TokenTags *self, PyObject *arg, void *data)
                    {
                        {
                            ::java::lang::String value((jobject) NULL);
                            if (!parseArg(arg, "s", &value))
                            {
                                INT_CALL(self->object.setCardinalKey(value));
                                return 0;
                            }
                        }
                        PyErr_SetArgsError((PyObject *) self, "cardinalKey", arg);
                        return -1;
                    }

                    static PyObject *t_TokenTags_get__firstTag(t_TokenTags *self, void *data)
                    {
                        ::is::iclt::icenlp::core::utils::Tag value((jobject) NULL);
                        OBJ_CALL(value = self->object.getFirstTag());
                        return ::is::iclt::icenlp::core::utils::t_Tag::wrap_Object(value);
                    }

                    static PyObject *t_TokenTags_get__firstTagStr(t_TokenTags *self, void *data)
                    {
                        ::java::lang::String value((jobject) NULL);
                        OBJ_CALL(value = self->object.getFirstTagStr());
                        return j2p(value);
                    }

                    static PyObject *t_TokenTags_get__lastTag(t_TokenTags *self, void *data)
                    {
                        ::is::iclt::icenlp::core::utils::Tag value((jobject) NULL);
                        OBJ_CALL(value = self->object.getLastTag());
                        return ::is::iclt::icenlp::core::utils::t_Tag::wrap_Object(value);
                    }

                    static PyObject *t_TokenTags_get__lastTagStr(t_TokenTags *self, void *data)
                    {
                        ::java::lang::String value((jobject) NULL);
                        OBJ_CALL(value = self->object.getLastTagStr());
                        return j2p(value);
                    }

                    static PyObject *t_TokenTags_get__morpho(t_TokenTags *self, void *data)
                    {
                        jboolean value;
                        OBJ_CALL(value = self->object.isMorpho());
                        Py_RETURN_BOOL(value);
                    }
                    static int t_TokenTags_set__morpho(t_TokenTags *self, PyObject *arg, void *data)
                    {
                        {
                            jboolean value;
                            if (!parseArg(arg, "Z", &value))
                            {
                                INT_CALL(self->object.setMorpho(value));
                                return 0;
                            }
                        }
                        PyErr_SetArgsError((PyObject *) self, "morpho", arg);
                        return -1;
                    }

                    static PyObject *t_TokenTags_get__probSuffix(t_TokenTags *self, void *data)
                    {
                        jdouble value;
                        OBJ_CALL(value = self->object.getProbSuffix());
                        return PyFloat_FromDouble((double) value);
                    }
                    static int t_TokenTags_set__probSuffix(t_TokenTags *self, PyObject *arg, void *data)
                    {
                        {
                            jdouble value;
                            if (!parseArg(arg, "D", &value))
                            {
                                INT_CALL(self->object.setProbSuffix(value));
                                return 0;
                            }
                        }
                        PyErr_SetArgsError((PyObject *) self, "probSuffix", arg);
                        return -1;
                    }

                    static PyObject *t_TokenTags_get__suffixLength(t_TokenTags *self, void *data)
                    {
                        jint value;
                        OBJ_CALL(value = self->object.getSuffixLength());
                        return PyInt_FromLong((long) value);
                    }
                    static int t_TokenTags_set__suffixLength(t_TokenTags *self, PyObject *arg, void *data)
                    {
                        {
                            jint value;
                            if (!parseArg(arg, "I", &value))
                            {
                                INT_CALL(self->object.setSuffixLength(value));
                                return 0;
                            }
                        }
                        PyErr_SetArgsError((PyObject *) self, "suffixLength", arg);
                        return -1;
                    }

                    static int t_TokenTags_set__tag(t_TokenTags *self, PyObject *arg, void *data)
                    {
                        {
                            ::is::iclt::icenlp::core::utils::Tag value((jobject) NULL);
                            if (!parseArg(arg, "k", ::is::iclt::icenlp::core::utils::Tag::initializeClass, &value))
                            {
                                INT_CALL(self->object.setTag(value));
                                return 0;
                            }
                        }
                        {
                            ::java::lang::String value((jobject) NULL);
                            if (!parseArg(arg, "s", &value))
                            {
                                INT_CALL(self->object.setTag(value));
                                return 0;
                            }
                        }
                        PyErr_SetArgsError((PyObject *) self, "tag", arg);
                        return -1;
                    }

                    static PyObject *t_TokenTags_get__tags(t_TokenTags *self, void *data)
                    {
                        ::java::util::ArrayList value((jobject) NULL);
                        OBJ_CALL(value = self->object.getTags());
                        return ::java::util::t_ArrayList::wrap_Object(value);
                    }

                    static PyObject *t_TokenTags_get__unknown(t_TokenTags *self, void *data)
                    {
                        jboolean value;
                        OBJ_CALL(value = self->object.isUnknown());
                        Py_RETURN_BOOL(value);
                    }
                    static int t_TokenTags_set__unknown(t_TokenTags *self, PyObject *arg, void *data)
                    {
                        {
                            jboolean value;
                            if (!parseArg(arg, "Z", &value))
                            {
                                INT_CALL(self->object.setUnknown(value));
                                return 0;
                            }
                        }
                        PyErr_SetArgsError((PyObject *) self, "unknown", arg);
                        return -1;
                    }
                }
            }
        }
    }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/lang/Integer.h"
#include "java/lang/Comparable.h"
#include "java/lang/NumberFormatException.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "java/lang/Object.h"
#include "JArray.h"

namespace java {
    namespace lang {

        ::java::lang::Class *Integer::class$ = NULL;
        jmethodID *Integer::mids$ = NULL;
        jint Integer::MAX_VALUE = (jint) 0;
        jint Integer::MIN_VALUE = (jint) 0;
        jint Integer::SIZE = (jint) 0;
        ::java::lang::Class *Integer::TYPE = NULL;

        jclass Integer::initializeClass()
        {
            if (!class$)
            {

                jclass cls = (jclass) env->findClass("java/lang/Integer");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_39c7bd3c] = env->getMethodID(cls, "<init>", "(I)V");
                mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
                mids$[mid_bitCount_39c7bd23] = env->getStaticMethodID(cls, "bitCount", "(I)I");
                mids$[mid_byteValue_54c6a172] = env->getMethodID(cls, "byteValue", "()B");
                mids$[mid_compareTo_290588f1] = env->getMethodID(cls, "compareTo", "(Ljava/lang/Object;)I");
                mids$[mid_compareTo_af7b73bb] = env->getMethodID(cls, "compareTo", "(Ljava/lang/Integer;)I");
                mids$[mid_decode_da36ea2b] = env->getStaticMethodID(cls, "decode", "(Ljava/lang/String;)Ljava/lang/Integer;");
                mids$[mid_doubleValue_54c6a174] = env->getMethodID(cls, "doubleValue", "()D");
                mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
                mids$[mid_floatValue_54c6a176] = env->getMethodID(cls, "floatValue", "()F");
                mids$[mid_getInteger_da36ea2b] = env->getStaticMethodID(cls, "getInteger", "(Ljava/lang/String;)Ljava/lang/Integer;");
                mids$[mid_getInteger_fe9eddb1] = env->getStaticMethodID(cls, "getInteger", "(Ljava/lang/String;Ljava/lang/Integer;)Ljava/lang/Integer;");
                mids$[mid_getInteger_39b2b79d] = env->getStaticMethodID(cls, "getInteger", "(Ljava/lang/String;I)Ljava/lang/Integer;");
                mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
                mids$[mid_highestOneBit_39c7bd23] = env->getStaticMethodID(cls, "highestOneBit", "(I)I");
                mids$[mid_intValue_54c6a179] = env->getMethodID(cls, "intValue", "()I");
                mids$[mid_longValue_54c6a17a] = env->getMethodID(cls, "longValue", "()J");
                mids$[mid_lowestOneBit_39c7bd23] = env->getStaticMethodID(cls, "lowestOneBit", "(I)I");
                mids$[mid_numberOfLeadingZeros_39c7bd23] = env->getStaticMethodID(cls, "numberOfLeadingZeros", "(I)I");
                mids$[mid_numberOfTrailingZeros_39c7bd23] = env->getStaticMethodID(cls, "numberOfTrailingZeros", "(I)I");
                mids$[mid_parseInt_5fdc3f57] = env->getStaticMethodID(cls, "parseInt", "(Ljava/lang/String;)I");
                mids$[mid_parseInt_6e53ccd9] = env->getStaticMethodID(cls, "parseInt", "(Ljava/lang/String;I)I");
                mids$[mid_reverse_39c7bd23] = env->getStaticMethodID(cls, "reverse", "(I)I");
                mids$[mid_reverseBytes_39c7bd23] = env->getStaticMethodID(cls, "reverseBytes", "(I)I");
                mids$[mid_rotateLeft_d8d154b9] = env->getStaticMethodID(cls, "rotateLeft", "(II)I");
                mids$[mid_rotateRight_d8d154b9] = env->getStaticMethodID(cls, "rotateRight", "(II)I");
                mids$[mid_shortValue_54c6a163] = env->getMethodID(cls, "shortValue", "()S");
                mids$[mid_signum_39c7bd23] = env->getStaticMethodID(cls, "signum", "(I)I");
                mids$[mid_toBinaryString_141401b3] = env->getStaticMethodID(cls, "toBinaryString", "(I)Ljava/lang/String;");
                mids$[mid_toHexString_141401b3] = env->getStaticMethodID(cls, "toHexString", "(I)Ljava/lang/String;");
                mids$[mid_toOctalString_141401b3] = env->getStaticMethodID(cls, "toOctalString", "(I)Ljava/lang/String;");
                mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
                mids$[mid_toString_141401b3] = env->getStaticMethodID(cls, "toString", "(I)Ljava/lang/String;");
                mids$[mid_toString_f9118fe5] = env->getStaticMethodID(cls, "toString", "(II)Ljava/lang/String;");
                mids$[mid_valueOf_7266dabb] = env->getStaticMethodID(cls, "valueOf", "(I)Ljava/lang/Integer;");
                mids$[mid_valueOf_da36ea2b] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;)Ljava/lang/Integer;");
                mids$[mid_valueOf_39b2b79d] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;I)Ljava/lang/Integer;");

                class$ = (::java::lang::Class *) new JObject(cls);
                cls = (jclass) class$->this$;

                MAX_VALUE = env->getStaticIntField(cls, "MAX_VALUE");
                MIN_VALUE = env->getStaticIntField(cls, "MIN_VALUE");
                SIZE = env->getStaticIntField(cls, "SIZE");
                TYPE = new ::java::lang::Class(env->getStaticObjectField(cls, "TYPE", "Ljava/lang/Class;"));
            }
            return (jclass) class$->this$;
        }

        Integer::Integer(jint a0) : ::java::lang::Number(env->newObject(initializeClass, &mids$, mid_init$_39c7bd3c, a0)) {}

        Integer::Integer(const ::java::lang::String & a0) : ::java::lang::Number(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}

        jint Integer::bitCount(jint a0)
        {
            jclass cls = initializeClass();
            return env->callStaticIntMethod(cls, mids$[mid_bitCount_39c7bd23], a0);
        }

        jbyte Integer::byteValue() const
        {
            return env->callByteMethod(this$, mids$[mid_byteValue_54c6a172]);
        }

        jint Integer::compareTo(const ::java::lang::Object & a0) const
        {
            return env->callIntMethod(this$, mids$[mid_compareTo_290588f1], a0.this$);
        }

        jint Integer::compareTo(const Integer & a0) const
        {
            return env->callIntMethod(this$, mids$[mid_compareTo_af7b73bb], a0.this$);
        }

        Integer Integer::decode(const ::java::lang::String & a0)
        {
            jclass cls = initializeClass();
            return Integer(env->callStaticObjectMethod(cls, mids$[mid_decode_da36ea2b], a0.this$));
        }

        jdouble Integer::doubleValue() const
        {
            return env->callDoubleMethod(this$, mids$[mid_doubleValue_54c6a174]);
        }

        jboolean Integer::equals(const ::java::lang::Object & a0) const
        {
            return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        jfloat Integer::floatValue() const
        {
            return env->callFloatMethod(this$, mids$[mid_floatValue_54c6a176]);
        }

        Integer Integer::getInteger(const ::java::lang::String & a0)
        {
            jclass cls = initializeClass();
            return Integer(env->callStaticObjectMethod(cls, mids$[mid_getInteger_da36ea2b], a0.this$));
        }

        Integer Integer::getInteger(const ::java::lang::String & a0, const Integer & a1)
        {
            jclass cls = initializeClass();
            return Integer(env->callStaticObjectMethod(cls, mids$[mid_getInteger_fe9eddb1], a0.this$, a1.this$));
        }

        Integer Integer::getInteger(const ::java::lang::String & a0, jint a1)
        {
            jclass cls = initializeClass();
            return Integer(env->callStaticObjectMethod(cls, mids$[mid_getInteger_39b2b79d], a0.this$, a1));
        }

        jint Integer::hashCode() const
        {
            return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        jint Integer::highestOneBit(jint a0)
        {
            jclass cls = initializeClass();
            return env->callStaticIntMethod(cls, mids$[mid_highestOneBit_39c7bd23], a0);
        }

        jint Integer::intValue() const
        {
            return env->callIntMethod(this$, mids$[mid_intValue_54c6a179]);
        }

        jlong Integer::longValue() const
        {
            return env->callLongMethod(this$, mids$[mid_longValue_54c6a17a]);
        }

        jint Integer::lowestOneBit(jint a0)
        {
            jclass cls = initializeClass();
            return env->callStaticIntMethod(cls, mids$[mid_lowestOneBit_39c7bd23], a0);
        }

        jint Integer::numberOfLeadingZeros(jint a0)
        {
            jclass cls = initializeClass();
            return env->callStaticIntMethod(cls, mids$[mid_numberOfLeadingZeros_39c7bd23], a0);
        }

        jint Integer::numberOfTrailingZeros(jint a0)
        {
            jclass cls = initializeClass();
            return env->callStaticIntMethod(cls, mids$[mid_numberOfTrailingZeros_39c7bd23], a0);
        }

        jint Integer::parseInt(const ::java::lang::String & a0)
        {
            jclass cls = initializeClass();
            return env->callStaticIntMethod(cls, mids$[mid_parseInt_5fdc3f57], a0.this$);
        }

        jint Integer::parseInt(const ::java::lang::String & a0, jint a1)
        {
            jclass cls = initializeClass();
            return env->callStaticIntMethod(cls, mids$[mid_parseInt_6e53ccd9], a0.this$, a1);
        }

        jint Integer::reverse(jint a0)
        {
            jclass cls = initializeClass();
            return env->callStaticIntMethod(cls, mids$[mid_reverse_39c7bd23], a0);
        }

        jint Integer::reverseBytes(jint a0)
        {
            jclass cls = initializeClass();
            return env->callStaticIntMethod(cls, mids$[mid_reverseBytes_39c7bd23], a0);
        }

        jint Integer::rotateLeft(jint a0, jint a1)
        {
            jclass cls = initializeClass();
            return env->callStaticIntMethod(cls, mids$[mid_rotateLeft_d8d154b9], a0, a1);
        }

        jint Integer::rotateRight(jint a0, jint a1)
        {
            jclass cls = initializeClass();
            return env->callStaticIntMethod(cls, mids$[mid_rotateRight_d8d154b9], a0, a1);
        }

        jshort Integer::shortValue() const
        {
            return env->callShortMethod(this$, mids$[mid_shortValue_54c6a163]);
        }

        jint Integer::signum(jint a0)
        {
            jclass cls = initializeClass();
            return env->callStaticIntMethod(cls, mids$[mid_signum_39c7bd23], a0);
        }

        ::java::lang::String Integer::toBinaryString(jint a0)
        {
            jclass cls = initializeClass();
            return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_toBinaryString_141401b3], a0));
        }

        ::java::lang::String Integer::toHexString(jint a0)
        {
            jclass cls = initializeClass();
            return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_toHexString_141401b3], a0));
        }

        ::java::lang::String Integer::toOctalString(jint a0)
        {
            jclass cls = initializeClass();
            return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_toOctalString_141401b3], a0));
        }

        ::java::lang::String Integer::toString() const
        {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }

        ::java::lang::String Integer::toString(jint a0)
        {
            jclass cls = initializeClass();
            return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_toString_141401b3], a0));
        }

        ::java::lang::String Integer::toString(jint a0, jint a1)
        {
            jclass cls = initializeClass();
            return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_toString_f9118fe5], a0, a1));
        }

        Integer Integer::valueOf(jint a0)
        {
            jclass cls = initializeClass();
            return Integer(env->callStaticObjectMethod(cls, mids$[mid_valueOf_7266dabb], a0));
        }

        Integer Integer::valueOf(const ::java::lang::String & a0)
        {
            jclass cls = initializeClass();
            return Integer(env->callStaticObjectMethod(cls, mids$[mid_valueOf_da36ea2b], a0.this$));
        }

        Integer Integer::valueOf(const ::java::lang::String & a0, jint a1)
        {
            jclass cls = initializeClass();
            return Integer(env->callStaticObjectMethod(cls, mids$[mid_valueOf_39b2b79d], a0.this$, a1));
        }
    }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
    namespace lang {
        static PyObject *t_Integer_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Integer_instance_(PyTypeObject *type, PyObject *arg);
        static int t_Integer_init_(t_Integer *self, PyObject *args, PyObject *kwds);
        static PyObject *t_Integer_bitCount(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Integer_byteValue(t_Integer *self, PyObject *args);
        static PyObject *t_Integer_compareTo(t_Integer *self, PyObject *args);
        static PyObject *t_Integer_decode(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Integer_doubleValue(t_Integer *self, PyObject *args);
        static PyObject *t_Integer_equals(t_Integer *self, PyObject *args);
        static PyObject *t_Integer_floatValue(t_Integer *self, PyObject *args);
        static PyObject *t_Integer_getInteger(PyTypeObject *type, PyObject *args);
        static PyObject *t_Integer_hashCode(t_Integer *self, PyObject *args);
        static PyObject *t_Integer_highestOneBit(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Integer_intValue(t_Integer *self, PyObject *args);
        static PyObject *t_Integer_longValue(t_Integer *self, PyObject *args);
        static PyObject *t_Integer_lowestOneBit(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Integer_numberOfLeadingZeros(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Integer_numberOfTrailingZeros(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Integer_parseInt(PyTypeObject *type, PyObject *args);
        static PyObject *t_Integer_reverse(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Integer_reverseBytes(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Integer_rotateLeft(PyTypeObject *type, PyObject *args);
        static PyObject *t_Integer_rotateRight(PyTypeObject *type, PyObject *args);
        static PyObject *t_Integer_shortValue(t_Integer *self, PyObject *args);
        static PyObject *t_Integer_signum(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Integer_toBinaryString(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Integer_toHexString(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Integer_toOctalString(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Integer_toString(t_Integer *self, PyObject *args);
        static PyObject *t_Integer_toString_(PyTypeObject *type, PyObject *args);
        static PyObject *t_Integer_valueOf(PyTypeObject *type, PyObject *args);

        static PyMethodDef t_Integer__methods_[] = {
            DECLARE_METHOD(t_Integer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Integer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Integer, bitCount, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Integer, byteValue, METH_VARARGS),
            DECLARE_METHOD(t_Integer, compareTo, METH_VARARGS),
            DECLARE_METHOD(t_Integer, decode, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Integer, doubleValue, METH_VARARGS),
            DECLARE_METHOD(t_Integer, equals, METH_VARARGS),
            DECLARE_METHOD(t_Integer, floatValue, METH_VARARGS),
            DECLARE_METHOD(t_Integer, getInteger, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_Integer, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_Integer, highestOneBit, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Integer, intValue, METH_VARARGS),
            DECLARE_METHOD(t_Integer, longValue, METH_VARARGS),
            DECLARE_METHOD(t_Integer, lowestOneBit, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Integer, numberOfLeadingZeros, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Integer, numberOfTrailingZeros, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Integer, parseInt, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_Integer, reverse, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Integer, reverseBytes, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Integer, rotateLeft, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_Integer, rotateRight, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_Integer, shortValue, METH_VARARGS),
            DECLARE_METHOD(t_Integer, signum, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Integer, toBinaryString, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Integer, toHexString, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Integer, toOctalString, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Integer, toString, METH_VARARGS),
            DECLARE_METHOD(t_Integer, toString_, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_Integer, valueOf, METH_VARARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(Integer, t_Integer, ::java::lang::Number, Integer, t_Integer_init_, 0, 0, 0, 0, 0);

        void t_Integer::install(PyObject *module)
        {
            installType(&PY_TYPE(Integer), module, "Integer", 0);
        }

        void t_Integer::initialize(PyObject *module)
        {
            PyDict_SetItemString(PY_TYPE(Integer).tp_dict, "class_", make_descriptor(Integer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Integer).tp_dict, "wrapfn_", make_descriptor(unboxInteger));
            PyDict_SetItemString(PY_TYPE(Integer).tp_dict, "boxfn_", make_descriptor(boxInteger));
            Integer::initializeClass();
            PyDict_SetItemString(PY_TYPE(Integer).tp_dict, "MAX_VALUE", make_descriptor(Integer::MAX_VALUE));
            PyDict_SetItemString(PY_TYPE(Integer).tp_dict, "MIN_VALUE", make_descriptor(Integer::MIN_VALUE));
            PyDict_SetItemString(PY_TYPE(Integer).tp_dict, "SIZE", make_descriptor(Integer::SIZE));
            PyDict_SetItemString(PY_TYPE(Integer).tp_dict, "TYPE", make_descriptor(::java::lang::t_Class::wrap_Object(*Integer::TYPE)));
        }

        static PyObject *t_Integer_cast_(PyTypeObject *type, PyObject *arg)
        {
            if (!(arg = castCheck(arg, Integer::initializeClass, 1)))
                return NULL;
            return t_Integer::wrap_Object(Integer(((t_Integer *) arg)->object.this$));
        }
        static PyObject *t_Integer_instance_(PyTypeObject *type, PyObject *arg)
        {
            if (!castCheck(arg, Integer::initializeClass, 0))
                Py_RETURN_FALSE;
            Py_RETURN_TRUE;
        }

        static int t_Integer_init_(t_Integer *self, PyObject *args, PyObject *kwds)
        {
            switch (PyTuple_GET_SIZE(args)) {
              case 1:
                {
                    jint a0;
                    Integer object((jobject) NULL);

                    if (!parseArgs(args, "I", &a0))
                    {
                        INT_CALL(object = Integer(a0));
                        self->object = object;
                        break;
                    }
                }
                {
                    ::java::lang::String a0((jobject) NULL);
                    Integer object((jobject) NULL);

                    if (!parseArgs(args, "s", &a0))
                    {
                        INT_CALL(object = Integer(a0));
                        self->object = object;
                        break;
                    }
                }
              default:
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
            }

            return 0;
        }

        static PyObject *t_Integer_bitCount(PyTypeObject *type, PyObject *arg)
        {
            jint a0;
            jint result;

            if (!parseArg(arg, "I", &a0))
            {
                OBJ_CALL(result = ::java::lang::Integer::bitCount(a0));
                return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError(type, "bitCount", arg);
            return NULL;
        }

        static PyObject *t_Integer_byteValue(t_Integer *self, PyObject *args)
        {
            jbyte result;

            if (!parseArgs(args, ""))
            {
                OBJ_CALL(result = self->object.byteValue());
                return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(Integer), (PyObject *) self, "byteValue", args, 2);
        }

        static PyObject *t_Integer_compareTo(t_Integer *self, PyObject *args)
        {
            switch (PyTuple_GET_SIZE(args)) {
              case 1:
                {
                    ::java::lang::Object a0((jobject) NULL);
                    jint result;

                    if (!parseArgs(args, "o", &a0))
                    {
                        OBJ_CALL(result = self->object.compareTo(a0));
                        return PyInt_FromLong((long) result);
                    }
                }
                {
                    Integer a0((jobject) NULL);
                    jint result;

                    if (!parseArgs(args, "O", &::java::lang::PY_TYPE(Integer), &a0))
                    {
                        OBJ_CALL(result = self->object.compareTo(a0));
                        return PyInt_FromLong((long) result);
                    }
                }
            }

            PyErr_SetArgsError((PyObject *) self, "compareTo", args);
            return NULL;
        }

        static PyObject *t_Integer_decode(PyTypeObject *type, PyObject *arg)
        {
            ::java::lang::String a0((jobject) NULL);
            Integer result((jobject) NULL);

            if (!parseArg(arg, "s", &a0))
            {
                OBJ_CALL(result = ::java::lang::Integer::decode(a0));
                return t_Integer::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "decode", arg);
            return NULL;
        }

        static PyObject *t_Integer_doubleValue(t_Integer *self, PyObject *args)
        {
            jdouble result;

            if (!parseArgs(args, ""))
            {
                OBJ_CALL(result = self->object.doubleValue());
                return PyFloat_FromDouble((double) result);
            }

            return callSuper(&PY_TYPE(Integer), (PyObject *) self, "doubleValue", args, 2);
        }

        static PyObject *t_Integer_equals(t_Integer *self, PyObject *args)
        {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
                OBJ_CALL(result = self->object.equals(a0));
                Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(Integer), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_Integer_floatValue(t_Integer *self, PyObject *args)
        {
            jfloat result;

            if (!parseArgs(args, ""))
            {
                OBJ_CALL(result = self->object.floatValue());
                return PyFloat_FromDouble((double) result);
            }

            return callSuper(&PY_TYPE(Integer), (PyObject *) self, "floatValue", args, 2);
        }

        static PyObject *t_Integer_getInteger(PyTypeObject *type, PyObject *args)
        {
            switch (PyTuple_GET_SIZE(args)) {
              case 1:
                {
                    ::java::lang::String a0((jobject) NULL);
                    Integer result((jobject) NULL);

                    if (!parseArgs(args, "s", &a0))
                    {
                        OBJ_CALL(result = ::java::lang::Integer::getInteger(a0));
                        return t_Integer::wrap_Object(result);
                    }
                }
                break;
              case 2:
                {
                    ::java::lang::String a0((jobject) NULL);
                    Integer a1((jobject) NULL);
                    Integer result((jobject) NULL);

                    if (!parseArgs(args, "sO", &::java::lang::PY_TYPE(Integer), &a0, &a1))
                    {
                        OBJ_CALL(result = ::java::lang::Integer::getInteger(a0, a1));
                        return t_Integer::wrap_Object(result);
                    }
                }
                {
                    ::java::lang::String a0((jobject) NULL);
                    jint a1;
                    Integer result((jobject) NULL);

                    if (!parseArgs(args, "sI", &a0, &a1))
                    {
                        OBJ_CALL(result = ::java::lang::Integer::getInteger(a0, a1));
                        return t_Integer::wrap_Object(result);
                    }
                }
            }

            PyErr_SetArgsError(type, "getInteger", args);
            return NULL;
        }

        static PyObject *t_Integer_hashCode(t_Integer *self, PyObject *args)
        {
            jint result;

            if (!parseArgs(args, ""))
            {
                OBJ_CALL(result = self->object.hashCode());
                return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(Integer), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_Integer_highestOneBit(PyTypeObject *type, PyObject *arg)
        {
            jint a0;
            jint result;

            if (!parseArg(arg, "I", &a0))
            {
                OBJ_CALL(result = ::java::lang::Integer::highestOneBit(a0));
                return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError(type, "highestOneBit", arg);
            return NULL;
        }

        static PyObject *t_Integer_intValue(t_Integer *self, PyObject *args)
        {
            jint result;

            if (!parseArgs(args, ""))
            {
                OBJ_CALL(result = self->object.intValue());
                return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(Integer), (PyObject *) self, "intValue", args, 2);
        }

        static PyObject *t_Integer_longValue(t_Integer *self, PyObject *args)
        {
            jlong result;

            if (!parseArgs(args, ""))
            {
                OBJ_CALL(result = self->object.longValue());
                return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            return callSuper(&PY_TYPE(Integer), (PyObject *) self, "longValue", args, 2);
        }

        static PyObject *t_Integer_lowestOneBit(PyTypeObject *type, PyObject *arg)
        {
            jint a0;
            jint result;

            if (!parseArg(arg, "I", &a0))
            {
                OBJ_CALL(result = ::java::lang::Integer::lowestOneBit(a0));
                return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError(type, "lowestOneBit", arg);
            return NULL;
        }

        static PyObject *t_Integer_numberOfLeadingZeros(PyTypeObject *type, PyObject *arg)
        {
            jint a0;
            jint result;

            if (!parseArg(arg, "I", &a0))
            {
                OBJ_CALL(result = ::java::lang::Integer::numberOfLeadingZeros(a0));
                return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError(type, "numberOfLeadingZeros", arg);
            return NULL;
        }

        static PyObject *t_Integer_numberOfTrailingZeros(PyTypeObject *type, PyObject *arg)
        {
            jint a0;
            jint result;

            if (!parseArg(arg, "I", &a0))
            {
                OBJ_CALL(result = ::java::lang::Integer::numberOfTrailingZeros(a0));
                return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError(type, "numberOfTrailingZeros", arg);
            return NULL;
        }

        static PyObject *t_Integer_parseInt(PyTypeObject *type, PyObject *args)
        {
            switch (PyTuple_GET_SIZE(args)) {
              case 1:
                {
                    ::java::lang::String a0((jobject) NULL);
                    jint result;

                    if (!parseArgs(args, "s", &a0))
                    {
                        OBJ_CALL(result = ::java::lang::Integer::parseInt(a0));
                        return PyInt_FromLong((long) result);
                    }
                }
                break;
              case 2:
                {
                    ::java::lang::String a0((jobject) NULL);
                    jint a1;
                    jint result;

                    if (!parseArgs(args, "sI", &a0, &a1))
                    {
                        OBJ_CALL(result = ::java::lang::Integer::parseInt(a0, a1));
                        return PyInt_FromLong((long) result);
                    }
                }
            }

            PyErr_SetArgsError(type, "parseInt", args);
            return NULL;
        }

        static PyObject *t_Integer_reverse(PyTypeObject *type, PyObject *arg)
        {
            jint a0;
            jint result;

            if (!parseArg(arg, "I", &a0))
            {
                OBJ_CALL(result = ::java::lang::Integer::reverse(a0));
                return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError(type, "reverse", arg);
            return NULL;
        }

        static PyObject *t_Integer_reverseBytes(PyTypeObject *type, PyObject *arg)
        {
            jint a0;
            jint result;

            if (!parseArg(arg, "I", &a0))
            {
                OBJ_CALL(result = ::java::lang::Integer::reverseBytes(a0));
                return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError(type, "reverseBytes", arg);
            return NULL;
        }

        static PyObject *t_Integer_rotateLeft(PyTypeObject *type, PyObject *args)
        {
            jint a0;
            jint a1;
            jint result;

            if (!parseArgs(args, "II", &a0, &a1))
            {
                OBJ_CALL(result = ::java::lang::Integer::rotateLeft(a0, a1));
                return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError(type, "rotateLeft", args);
            return NULL;
        }

        static PyObject *t_Integer_rotateRight(PyTypeObject *type, PyObject *args)
        {
            jint a0;
            jint a1;
            jint result;

            if (!parseArgs(args, "II", &a0, &a1))
            {
                OBJ_CALL(result = ::java::lang::Integer::rotateRight(a0, a1));
                return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError(type, "rotateRight", args);
            return NULL;
        }

        static PyObject *t_Integer_shortValue(t_Integer *self, PyObject *args)
        {
            jshort result;

            if (!parseArgs(args, ""))
            {
                OBJ_CALL(result = self->object.shortValue());
                return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(Integer), (PyObject *) self, "shortValue", args, 2);
        }

        static PyObject *t_Integer_signum(PyTypeObject *type, PyObject *arg)
        {
            jint a0;
            jint result;

            if (!parseArg(arg, "I", &a0))
            {
                OBJ_CALL(result = ::java::lang::Integer::signum(a0));
                return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError(type, "signum", arg);
            return NULL;
        }

        static PyObject *t_Integer_toBinaryString(PyTypeObject *type, PyObject *arg)
        {
            jint a0;
            ::java::lang::String result((jobject) NULL);

            if (!parseArg(arg, "I", &a0))
            {
                OBJ_CALL(result = ::java::lang::Integer::toBinaryString(a0));
                return j2p(result);
            }

            PyErr_SetArgsError(type, "toBinaryString", arg);
            return NULL;
        }

        static PyObject *t_Integer_toHexString(PyTypeObject *type, PyObject *arg)
        {
            jint a0;
            ::java::lang::String result((jobject) NULL);

            if (!parseArg(arg, "I", &a0))
            {
                OBJ_CALL(result = ::java::lang::Integer::toHexString(a0));
                return j2p(result);
            }

            PyErr_SetArgsError(type, "toHexString", arg);
            return NULL;
        }

        static PyObject *t_Integer_toOctalString(PyTypeObject *type, PyObject *arg)
        {
            jint a0;
            ::java::lang::String result((jobject) NULL);

            if (!parseArg(arg, "I", &a0))
            {
                OBJ_CALL(result = ::java::lang::Integer::toOctalString(a0));
                return j2p(result);
            }

            PyErr_SetArgsError(type, "toOctalString", arg);
            return NULL;
        }

        static PyObject *t_Integer_toString(t_Integer *self, PyObject *args)
        {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
                OBJ_CALL(result = self->object.toString());
                return j2p(result);
            }

            return callSuper(&PY_TYPE(Integer), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_Integer_toString_(PyTypeObject *type, PyObject *args)
        {
            switch (PyTuple_GET_SIZE(args)) {
              case 1:
                {
                    jint a0;
                    ::java::lang::String result((jobject) NULL);

                    if (!parseArgs(args, "I", &a0))
                    {
                        OBJ_CALL(result = ::java::lang::Integer::toString(a0));
                        return j2p(result);
                    }
                }
                break;
              case 2:
                {
                    jint a0;
                    jint a1;
                    ::java::lang::String result((jobject) NULL);

                    if (!parseArgs(args, "II", &a0, &a1))
                    {
                        OBJ_CALL(result = ::java::lang::Integer::toString(a0, a1));
                        return j2p(result);
                    }
                }
            }

            PyErr_SetArgsError(type, "toString_", args);
            return NULL;
        }

        static PyObject *t_Integer_valueOf(PyTypeObject *type, PyObject *args)
        {
            switch (PyTuple_GET_SIZE(args)) {
              case 1:
                {
                    jint a0;
                    Integer result((jobject) NULL);

                    if (!parseArgs(args, "I", &a0))
                    {
                        OBJ_CALL(result = ::java::lang::Integer::valueOf(a0));
                        return t_Integer::wrap_Object(result);
                    }
                }
                {
                    ::java::lang::String a0((jobject) NULL);
                    Integer result((jobject) NULL);

                    if (!parseArgs(args, "s", &a0))
                    {
                        OBJ_CALL(result = ::java::lang::Integer::valueOf(a0));
                        return t_Integer::wrap_Object(result);
                    }
                }
                break;
              case 2:
                {
                    ::java::lang::String a0((jobject) NULL);
                    jint a1;
                    Integer result((jobject) NULL);

                    if (!parseArgs(args, "sI", &a0, &a1))
                    {
                        OBJ_CALL(result = ::java::lang::Integer::valueOf(a0, a1));
                        return t_Integer::wrap_Object(result);
                    }
                }
            }

            PyErr_SetArgsError(type, "valueOf", args);
            return NULL;
        }
    }
}
#include <jni.h>
#include "JCCEnv.h"
#include "is/iclt/icenlp/core/utils/IceTag.h"
#include "java/util/ArrayList.h"
#include "is/iclt/icenlp/core/utils/IceTag$WordClass.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace is {
    namespace iclt {
        namespace icenlp {
            namespace core {
                namespace utils {

                    ::java::lang::Class *IceTag::class$ = NULL;
                    jmethodID *IceTag::mids$ = NULL;
                    jchar IceTag::cAbbreviation = (jchar) 0;
                    jchar IceTag::cAccusative = (jchar) 0;
                    jchar IceTag::cActive = (jchar) 0;
                    jchar IceTag::cAdverb = (jchar) 0;
                    jchar IceTag::cArticle = (jchar) 0;
                    jchar IceTag::cArticlePreceding = (jchar) 0;
                    jchar IceTag::cComparative = (jchar) 0;
                    jchar IceTag::cConjunction = (jchar) 0;
                    jchar IceTag::cConjunctionRel = (jchar) 0;
                    jchar IceTag::cDative = (jchar) 0;
                    jchar IceTag::cDemPronoun = (jchar) 0;
                    jchar IceTag::cExclamation = (jchar) 0;
                    jchar IceTag::cFeminine = (jchar) 0;
                    jchar IceTag::cFirstPerson = (jchar) 0;
                    jchar IceTag::cGenderUnspec = (jchar) 0;
                    jchar IceTag::cGenitive = (jchar) 0;
                    jchar IceTag::cImperative = (jchar) 0;
                    jchar IceTag::cIndeclineable = (jchar) 0;
                    jchar IceTag::cIndefPronoun = (jchar) 0;
                    jchar IceTag::cIndicative = (jchar) 0;
                    jchar IceTag::cInfinitive = (jchar) 0;
                    jchar IceTag::cInterPronoun = (jchar) 0;
                    jchar IceTag::cMasculine = (jchar) 0;
                    jchar IceTag::cMiddle = (jchar) 0;
                    jchar IceTag::cNeuter = (jchar) 0;
                    jchar IceTag::cNoDeclension = (jchar) 0;
                    jchar IceTag::cNoMatch = (jchar) 0;
                    jchar IceTag::cNominative = (jchar) 0;
                    jchar IceTag::cNumberUnspec = (jchar) 0;
                    jchar IceTag::cOtherName = (jchar) 0;
                    jchar IceTag::cPast = (jchar) 0;
                    jchar IceTag::cPastParticiple = (jchar) 0;
                    jchar IceTag::cPersPronoun = (jchar) 0;
                    jchar IceTag::cPersonName = (jchar) 0;
                    jchar IceTag::cPlaceName = (jchar) 0;
                    jchar IceTag::cPlural = (jchar) 0;
                    jchar IceTag::cPositive = (jchar) 0;
                    jchar IceTag::cPossPronoun = (jchar) 0;
                    jchar IceTag::cPresParticiple = (jchar) 0;
                    jchar IceTag::cPresent = (jchar) 0;
                    jchar IceTag::cReflPronoun = (jchar) 0;
                    jchar IceTag::cRelPronoun = (jchar) 0;
                    jchar IceTag::cSecondPerson = (jchar) 0;
                    jchar IceTag::cSingular = (jchar) 0;
                    jchar IceTag::cStrong = (jchar) 0;
                    jchar IceTag::cSubjunctive = (jchar) 0;
                    jchar IceTag::cSuperlative = (jchar) 0;
                    jchar IceTag::cSupine = (jchar) 0;
                    jchar IceTag::cThirdPerson = (jchar) 0;
                    jchar IceTag::cUndef = (jchar) 0;
                    jchar IceTag::cWeak = (jchar) 0;
                    jchar IceTag::cWildCard = (jchar) 0;
                    ::java::lang::String *IceTag::tagAdj = NULL;
                    ::java::lang::String *IceTag::tagAdjectiveComparative = NULL;
                    ::java::lang::String *IceTag::tagAdjectiveFeminineSingularStrongNominative = NULL;
                    ::java::lang::String *IceTag::tagAdjectiveNeuterPluralStrongAccusative = NULL;
                    ::java::lang::String *IceTag::tagAdjectiveNeuterPluralStrongNominative = NULL;
                    ::java::lang::String *IceTag::tagAdjectivesIndeclineable = NULL;
                    ::java::lang::String *IceTag::tagAdjectivesPlural = NULL;
                    ::java::lang::String *IceTag::tagAdjectivesSingular = NULL;
                    ::java::lang::String *IceTag::tagAdverb = NULL;
                    ::java::lang::String *IceTag::tagCardinalsPlural = NULL;
                    ::java::lang::String *IceTag::tagCardinalsSingular = NULL;
                    ::java::lang::String *IceTag::tagForeign = NULL;
                    ::java::lang::String *IceTag::tagMostFrequentNoun = NULL;
                    ::java::lang::String *IceTag::tagMostFrequentProperNoun = NULL;
                    ::java::lang::String *IceTag::tagNoun = NULL;
                    ::java::lang::String *IceTag::tagNounFeminineFirstThree = NULL;
                    ::java::lang::String *IceTag::tagNounMasculinePluralNominative = NULL;
                    ::java::lang::String *IceTag::tagNounMasculinePluralNominativeArticle = NULL;
                    ::java::lang::String *IceTag::tagNounMasculineWeak = NULL;
                    ::java::lang::String *IceTag::tagNounNeuter = NULL;
                    ::java::lang::String *IceTag::tagNounNeuterPlural = NULL;
                    ::java::lang::String *IceTag::tagNounNeuterPluralArticle = NULL;
                    ::java::lang::String *IceTag::tagNounNeuterSingular = NULL;
                    ::java::lang::String *IceTag::tagNounNeuterSingularArticle = NULL;
                    ::java::lang::String *IceTag::tagOrdinal = NULL;
                    ::java::lang::String *IceTag::tagOrdinal2 = NULL;
                    ::java::lang::String *IceTag::tagPercentage = NULL;
                    ::java::lang::String *IceTag::tagProperNoun = NULL;
                    ::java::lang::String *IceTag::tagProperNounOther = NULL;
                    ::java::lang::String *IceTag::tagProperNounPlace = NULL;
                    ::java::lang::String *IceTag::tagVerb = NULL;
                    ::java::lang::String *IceTag::tagVerbFirstSingular = NULL;
                    ::java::lang::String *IceTag::tagVerbFirstSingularPast = NULL;
                    ::java::lang::String *IceTag::tagVerbFirstSingularSubjunctive = NULL;
                    ::java::lang::String *IceTag::tagVerbImperative = NULL;
                    ::java::lang::String *IceTag::tagVerbInfActive = NULL;
                    ::java::lang::String *IceTag::tagVerbInfMiddle = NULL;
                    ::java::lang::String *IceTag::tagVerbMiddle = NULL;
                    ::java::lang::String *IceTag::tagVerbPastPart = NULL;
                    ::java::lang::String *IceTag::tagVerbPresentPart = NULL;
                    ::java::lang::String *IceTag::tagVerbSecondSingular = NULL;
                    ::java::lang::String *IceTag::tagVerbSubjunctive = NULL;
                    ::java::lang::String *IceTag::tagVerbSupine = NULL;
                    ::java::lang::String *IceTag::tagVerbSupineMiddle = NULL;
                    ::java::lang::String *IceTag::tagVerbThirdPlural = NULL;
                    ::java::lang::String *IceTag::tagVerbThirdPluralMiddle = NULL;
                    ::java::lang::String *IceTag::tagVerbThirdPluralSubjunctive = NULL;
                    ::java::lang::String *IceTag::tagVerbThirdSingular = NULL;
                    ::java::lang::String *IceTag::tagVerbThirdSingularPast = NULL;
                    ::java::lang::String *IceTag::tagVerbThirdSingularSubjunctive = NULL;

                    jclass IceTag::initializeClass()
                    {
                        if (!class$)
                        {

                            jclass cls = (jclass) env->findClass("is/iclt/icenlp/core/utils/IceTag");

                            mids$ = new jmethodID[max_mid];
                            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                            mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
                            mids$[mid_addArticle_54c6a166] = env->getMethodID(cls, "addArticle", "()V");
                            mids$[mid_annotation_445a175e] = env->getMethodID(cls, "annotation", "(Z)Ljava/lang/String;");
                            mids$[mid_caseMatch_9c6a1362] = env->getMethodID(cls, "caseMatch", "(Lis/iclt/icenlp/core/utils/IceTag;)Z");
                            mids$[mid_caseMatch_b3f662f5] = env->getMethodID(cls, "caseMatch", "(Ljava/util/ArrayList;)Z");
                            mids$[mid_genderNumberCaseMatch_9c6a1362] = env->getMethodID(cls, "genderNumberCaseMatch", "(Lis/iclt/icenlp/core/utils/IceTag;)Z");
                            mids$[mid_genderNumberCaseMatch_b3f662f5] = env->getMethodID(cls, "genderNumberCaseMatch", "(Ljava/util/ArrayList;)Z");
                            mids$[mid_getCaseLetter_54c6a173] = env->getMethodID(cls, "getCaseLetter", "()C");
                            mids$[mid_getDeclension_54c6a173] = env->getMethodID(cls, "getDeclension", "()C");
                            mids$[mid_getNumberLetter_54c6a173] = env->getMethodID(cls, "getNumberLetter", "()C");
                            mids$[mid_getPersonGenderLetter_54c6a173] = env->getMethodID(cls, "getPersonGenderLetter", "()C");
                            mids$[mid_getProperNounType_54c6a173] = env->getMethodID(cls, "getProperNounType", "()C");
                            mids$[mid_getWordClass_14c7b5c5] = env->getMethodID(cls, "getWordClass", "()Ljava/lang/String;");
                            mids$[mid_getWordClassCode_230f6e5d] = env->getMethodID(cls, "getWordClassCode", "()Lis/iclt/icenlp/core/utils/IceTag$WordClass;");
                            mids$[mid_hasArticle_54c6a16a] = env->getMethodID(cls, "hasArticle", "()Z");
                            mids$[mid_hasGender_54c6a16a] = env->getMethodID(cls, "hasGender", "()Z");
                            mids$[mid_isAdjective_54c6a16a] = env->getMethodID(cls, "isAdjective", "()Z");
                            mids$[mid_isAdjectiveComparative_54c6a16a] = env->getMethodID(cls, "isAdjectiveComparative", "()Z");
                            mids$[mid_isAdjectiveIndeclineable_54c6a16a] = env->getMethodID(cls, "isAdjectiveIndeclineable", "()Z");
                            mids$[mid_isAdjectivePositive_54c6a16a] = env->getMethodID(cls, "isAdjectivePositive", "()Z");
                            mids$[mid_isAdjectiveStrong_54c6a16a] = env->getMethodID(cls, "isAdjectiveStrong", "()Z");
                            mids$[mid_isAdjectiveSuper_54c6a16a] = env->getMethodID(cls, "isAdjectiveSuper", "()Z");
                            mids$[mid_isAdjectiveWeak_54c6a16a] = env->getMethodID(cls, "isAdjectiveWeak", "()Z");
                            mids$[mid_isAdverb_54c6a16a] = env->getMethodID(cls, "isAdverb", "()Z");
                            mids$[mid_isAdverbComparative_54c6a16a] = env->getMethodID(cls, "isAdverbComparative", "()Z");
                            mids$[mid_isAdverbSuper_54c6a16a] = env->getMethodID(cls, "isAdverbSuper", "()Z");
                            mids$[mid_isArticle_54c6a16a] = env->getMethodID(cls, "isArticle", "()Z");
                            mids$[mid_isCase_87fd5456] = env->getMethodID(cls, "isCase", "(C)Z");
                            mids$[mid_isConjunction_54c6a16a] = env->getMethodID(cls, "isConjunction", "()Z");
                            mids$[mid_isDeclension_87fd5456] = env->getMethodID(cls, "isDeclension", "(C)Z");
                            mids$[mid_isDemonstrativePronoun_54c6a16a] = env->getMethodID(cls, "isDemonstrativePronoun", "()Z");
                            mids$[mid_isExclamation_54c6a16a] = env->getMethodID(cls, "isExclamation", "()Z");
                            mids$[mid_isForeign_54c6a16a] = env->getMethodID(cls, "isForeign", "()Z");
                            mids$[mid_isGender_87fd5456] = env->getMethodID(cls, "isGender", "(C)Z");
                            mids$[mid_isIndefinitePronoun_54c6a16a] = env->getMethodID(cls, "isIndefinitePronoun", "()Z");
                            mids$[mid_isInfinitive_54c6a16a] = env->getMethodID(cls, "isInfinitive", "()Z");
                            mids$[mid_isInterrogativePronoun_54c6a16a] = env->getMethodID(cls, "isInterrogativePronoun", "()Z");
                            mids$[mid_isNominal_54c6a16a] = env->getMethodID(cls, "isNominal", "()Z");
                            mids$[mid_isNoun_54c6a16a] = env->getMethodID(cls, "isNoun", "()Z");
                            mids$[mid_isNumber_87fd5456] = env->getMethodID(cls, "isNumber", "(C)Z");
                            mids$[mid_isNumeral_54c6a16a] = env->getMethodID(cls, "isNumeral", "()Z");
                            mids$[mid_isNumeralNominal_54c6a16a] = env->getMethodID(cls, "isNumeralNominal", "()Z");
                            mids$[mid_isNumeralOrdinal_54c6a16a] = env->getMethodID(cls, "isNumeralOrdinal", "()Z");
                            mids$[mid_isPersonalPronoun_54c6a16a] = env->getMethodID(cls, "isPersonalPronoun", "()Z");
                            mids$[mid_isPossessivePronoun_54c6a16a] = env->getMethodID(cls, "isPossessivePronoun", "()Z");
                            mids$[mid_isPreposition_54c6a16a] = env->getMethodID(cls, "isPreposition", "()Z");
                            mids$[mid_isPronoun_54c6a16a] = env->getMethodID(cls, "isPronoun", "()Z");
                            mids$[mid_isProperNoun_54c6a16a] = env->getMethodID(cls, "isProperNoun", "()Z");
                            mids$[mid_isProperNounType_87fd5456] = env->getMethodID(cls, "isProperNounType", "(C)Z");
                            mids$[mid_isReflexivePronoun_54c6a16a] = env->getMethodID(cls, "isReflexivePronoun", "()Z");
                            mids$[mid_isRelativeConjunction_54c6a16a] = env->getMethodID(cls, "isRelativeConjunction", "()Z");
                            mids$[mid_isRelativePronoun_54c6a16a] = env->getMethodID(cls, "isRelativePronoun", "()Z");
                            mids$[mid_isVerb_54c6a16a] = env->getMethodID(cls, "isVerb", "()Z");
                            mids$[mid_isVerbActiveForm_54c6a16a] = env->getMethodID(cls, "isVerbActiveForm", "()Z");
                            mids$[mid_isVerbAny_54c6a16a] = env->getMethodID(cls, "isVerbAny", "()Z");
                            mids$[mid_isVerbAuxiliary_54c6a16a] = env->getMethodID(cls, "isVerbAuxiliary", "()Z");
                            mids$[mid_isVerbBe_54c6a16a] = env->getMethodID(cls, "isVerbBe", "()Z");
                            mids$[mid_isVerbCaseMarking_54c6a16a] = env->getMethodID(cls, "isVerbCaseMarking", "()Z");
                            mids$[mid_isVerbImperative_54c6a16a] = env->getMethodID(cls, "isVerbImperative", "()Z");
                            mids$[mid_isVerbIndicativeForm_54c6a16a] = env->getMethodID(cls, "isVerbIndicativeForm", "()Z");
                            mids$[mid_isVerbInfinitive_54c6a16a] = env->getMethodID(cls, "isVerbInfinitive", "()Z");
                            mids$[mid_isVerbMarking_54c6a16a] = env->getMethodID(cls, "isVerbMarking", "()Z");
                            mids$[mid_isVerbMiddleForm_54c6a16a] = env->getMethodID(cls, "isVerbMiddleForm", "()Z");
                            mids$[mid_isVerbPastParticiple_54c6a16a] = env->getMethodID(cls, "isVerbPastParticiple", "()Z");
                            mids$[mid_isVerbPresentPart_54c6a16a] = env->getMethodID(cls, "isVerbPresentPart", "()Z");
                            mids$[mid_isVerbSpecialAuxiliary_54c6a16a] = env->getMethodID(cls, "isVerbSpecialAuxiliary", "()Z");
                            mids$[mid_isVerbSpecialInf_54c6a16a] = env->getMethodID(cls, "isVerbSpecialInf", "()Z");
                            mids$[mid_isVerbSubjunctiveForm_54c6a16a] = env->getMethodID(cls, "isVerbSubjunctiveForm", "()Z");
                            mids$[mid_isVerbSupine_54c6a16a] = env->getMethodID(cls, "isVerbSupine", "()Z");
                            mids$[mid_isWordClass_0dc1bb34] = env->getMethodID(cls, "isWordClass", "(Lis/iclt/icenlp/core/utils/IceTag$WordClass;)Z");
                            mids$[mid_numberCaseMatch_b3f662f5] = env->getMethodID(cls, "numberCaseMatch", "(Ljava/util/ArrayList;)Z");
                            mids$[mid_numberCaseMatch_9c6a1362] = env->getMethodID(cls, "numberCaseMatch", "(Lis/iclt/icenlp/core/utils/IceTag;)Z");
                            mids$[mid_numberMatch_9c6a1362] = env->getMethodID(cls, "numberMatch", "(Lis/iclt/icenlp/core/utils/IceTag;)Z");
                            mids$[mid_numberMatch_b3f662f5] = env->getMethodID(cls, "numberMatch", "(Ljava/util/ArrayList;)Z");
                            mids$[mid_personGenderMatch_b3f662f5] = env->getMethodID(cls, "personGenderMatch", "(Ljava/util/ArrayList;)Z");
                            mids$[mid_personGenderMatch_9c6a1362] = env->getMethodID(cls, "personGenderMatch", "(Lis/iclt/icenlp/core/utils/IceTag;)Z");
                            mids$[mid_personGenderNumberMatch_b3f662f5] = env->getMethodID(cls, "personGenderNumberMatch", "(Ljava/util/ArrayList;)Z");
                            mids$[mid_personGenderNumberMatch_9c6a1362] = env->getMethodID(cls, "personGenderNumberMatch", "(Lis/iclt/icenlp/core/utils/IceTag;)Z");
                            mids$[mid_removeArticle_54c6a166] = env->getMethodID(cls, "removeArticle", "()V");
                            mids$[mid_setCase_87fd545a] = env->getMethodID(cls, "setCase", "(C)V");
                            mids$[mid_setDeclension_87fd545a] = env->getMethodID(cls, "setDeclension", "(C)V");
                            mids$[mid_setDegree_87fd545a] = env->getMethodID(cls, "setDegree", "(C)V");
                            mids$[mid_setGenderNumberCase_094d1f92] = env->getMethodID(cls, "setGenderNumberCase", "(CCC)V");
                            mids$[mid_setNumber_87fd545a] = env->getMethodID(cls, "setNumber", "(C)V");
                            mids$[mid_setPersonGender_87fd545a] = env->getMethodID(cls, "setPersonGender", "(C)V");
                            mids$[mid_setPersonName_54c6a166] = env->getMethodID(cls, "setPersonName", "()V");
                            mids$[mid_setProperNameType_87fd545a] = env->getMethodID(cls, "setProperNameType", "(C)V");
                            mids$[mid_setTense_87fd545a] = env->getMethodID(cls, "setTense", "(C)V");
                            mids$[mid_setVoice_87fd545a] = env->getMethodID(cls, "setVoice", "(C)V");
                            mids$[mid_interpretTag_54c6a166] = env->getMethodID(cls, "interpretTag", "()V");

                            class$ = (::java::lang::Class *) new JObject(cls);
                            cls = (jclass) class$->this$;

                            cAbbreviation = env->getStaticCharField(cls, "cAbbreviation");
                            cAccusative = env->getStaticCharField(cls, "cAccusative");
                            cActive = env->getStaticCharField(cls, "cActive");
                            cAdverb = env->getStaticCharField(cls, "cAdverb");
                            cArticle = env->getStaticCharField(cls, "cArticle");
                            cArticlePreceding = env->getStaticCharField(cls, "cArticlePreceding");
                            cComparative = env->getStaticCharField(cls, "cComparative");
                            cConjunction = env->getStaticCharField(cls, "cConjunction");
                            cConjunctionRel = env->getStaticCharField(cls, "cConjunctionRel");
                            cDative = env->getStaticCharField(cls, "cDative");
                            cDemPronoun = env->getStaticCharField(cls, "cDemPronoun");
                            cExclamation = env->getStaticCharField(cls, "cExclamation");
                            cFeminine = env->getStaticCharField(cls, "cFeminine");
                            cFirstPerson = env->getStaticCharField(cls, "cFirstPerson");
                            cGenderUnspec = env->getStaticCharField(cls, "cGenderUnspec");
                            cGenitive = env->getStaticCharField(cls, "cGenitive");
                            cImperative = env->getStaticCharField(cls, "cImperative");
                            cIndeclineable = env->getStaticCharField(cls, "cIndeclineable");
                            cIndefPronoun = env->getStaticCharField(cls, "cIndefPronoun");
                            cIndicative = env->getStaticCharField(cls, "cIndicative");
                            cInfinitive = env->getStaticCharField(cls, "cInfinitive");
                            cInterPronoun = env->getStaticCharField(cls, "cInterPronoun");
                            cMasculine = env->getStaticCharField(cls, "cMasculine");
                            cMiddle = env->getStaticCharField(cls, "cMiddle");
                            cNeuter = env->getStaticCharField(cls, "cNeuter");
                            cNoDeclension = env->getStaticCharField(cls, "cNoDeclension");
                            cNoMatch = env->getStaticCharField(cls, "cNoMatch");
                            cNominative = env->getStaticCharField(cls, "cNominative");
                            cNumberUnspec = env->getStaticCharField(cls, "cNumberUnspec");
                            cOtherName = env->getStaticCharField(cls, "cOtherName");
                            cPast = env->getStaticCharField(cls, "cPast");
                            cPastParticiple = env->getStaticCharField(cls, "cPastParticiple");
                            cPersPronoun = env->getStaticCharField(cls, "cPersPronoun");
                            cPersonName = env->getStaticCharField(cls, "cPersonName");
                            cPlaceName = env->getStaticCharField(cls, "cPlaceName");
                            cPlural = env->getStaticCharField(cls, "cPlural");
                            cPositive = env->getStaticCharField(cls, "cPositive");
                            cPossPronoun = env->getStaticCharField(cls, "cPossPronoun");
                            cPresParticiple = env->getStaticCharField(cls, "cPresParticiple");
                            cPresent = env->getStaticCharField(cls, "cPresent");
                            cReflPronoun = env->getStaticCharField(cls, "cReflPronoun");
                            cRelPronoun = env->getStaticCharField(cls, "cRelPronoun");
                            cSecondPerson = env->getStaticCharField(cls, "cSecondPerson");
                            cSingular = env->getStaticCharField(cls, "cSingular");
                            cStrong = env->getStaticCharField(cls, "cStrong");
                            cSubjunctive = env->getStaticCharField(cls, "cSubjunctive");
                            cSuperlative = env->getStaticCharField(cls, "cSuperlative");
                            cSupine = env->getStaticCharField(cls, "cSupine");
                            cThirdPerson = env->getStaticCharField(cls, "cThirdPerson");
                            cUndef = env->getStaticCharField(cls, "cUndef");
                            cWeak = env->getStaticCharField(cls, "cWeak");
                            cWildCard = env->getStaticCharField(cls, "cWildCard");
                            tagAdj = new ::java::lang::String(env->getStaticObjectField(cls, "tagAdj", "Ljava/lang/String;"));
                            tagAdjectiveComparative = new ::java::lang::String(env->getStaticObjectField(cls, "tagAdjectiveComparative", "Ljava/lang/String;"));
                            tagAdjectiveFeminineSingularStrongNominative = new ::java::lang::String(env->getStaticObjectField(cls, "tagAdjectiveFeminineSingularStrongNominative", "Ljava/lang/String;"));
                            tagAdjectiveNeuterPluralStrongAccusative = new ::java::lang::String(env->getStaticObjectField(cls, "tagAdjectiveNeuterPluralStrongAccusative", "Ljava/lang/String;"));
                            tagAdjectiveNeuterPluralStrongNominative = new ::java::lang::String(env->getStaticObjectField(cls, "tagAdjectiveNeuterPluralStrongNominative", "Ljava/lang/String;"));
                            tagAdjectivesIndeclineable = new ::java::lang::String(env->getStaticObjectField(cls, "tagAdjectivesIndeclineable", "Ljava/lang/String;"));
                            tagAdjectivesPlural = new ::java::lang::String(env->getStaticObjectField(cls, "tagAdjectivesPlural", "Ljava/lang/String;"));
                            tagAdjectivesSingular = new ::java::lang::String(env->getStaticObjectField(cls, "tagAdjectivesSingular", "Ljava/lang/String;"));
                            tagAdverb = new ::java::lang::String(env->getStaticObjectField(cls, "tagAdverb", "Ljava/lang/String;"));
                            tagCardinalsPlural = new ::java::lang::String(env->getStaticObjectField(cls, "tagCardinalsPlural", "Ljava/lang/String;"));
                            tagCardinalsSingular = new ::java::lang::String(env->getStaticObjectField(cls, "tagCardinalsSingular", "Ljava/lang/String;"));
                            tagForeign = new ::java::lang::String(env->getStaticObjectField(cls, "tagForeign", "Ljava/lang/String;"));
                            tagMostFrequentNoun = new ::java::lang::String(env->getStaticObjectField(cls, "tagMostFrequentNoun", "Ljava/lang/String;"));
                            tagMostFrequentProperNoun = new ::java::lang::String(env->getStaticObjectField(cls, "tagMostFrequentProperNoun", "Ljava/lang/String;"));
                            tagNoun = new ::java::lang::String(env->getStaticObjectField(cls, "tagNoun", "Ljava/lang/String;"));
                            tagNounFeminineFirstThree = new ::java::lang::String(env->getStaticObjectField(cls, "tagNounFeminineFirstThree", "Ljava/lang/String;"));
                            tagNounMasculinePluralNominative = new ::java::lang::String(env->getStaticObjectField(cls, "tagNounMasculinePluralNominative", "Ljava/lang/String;"));
                            tagNounMasculinePluralNominativeArticle = new ::java::lang::String(env->getStaticObjectField(cls, "tagNounMasculinePluralNominativeArticle", "Ljava/lang/String;"));
                            tagNounMasculineWeak = new ::java::lang::String(env->getStaticObjectField(cls, "tagNounMasculineWeak", "Ljava/lang/String;"));
                            tagNounNeuter = new ::java::lang::String(env->getStaticObjectField(cls, "tagNounNeuter", "Ljava/lang/String;"));
                            tagNounNeuterPlural = new ::java::lang::String(env->getStaticObjectField(cls, "tagNounNeuterPlural", "Ljava/lang/String;"));
                            tagNounNeuterPluralArticle = new ::java::lang::String(env->getStaticObjectField(cls, "tagNounNeuterPluralArticle", "Ljava/lang/String;"));
                            tagNounNeuterSingular = new ::java::lang::String(env->getStaticObjectField(cls, "tagNounNeuterSingular", "Ljava/lang/String;"));
                            tagNounNeuterSingularArticle = new ::java::lang::String(env->getStaticObjectField(cls, "tagNounNeuterSingularArticle", "Ljava/lang/String;"));
                            tagOrdinal = new ::java::lang::String(env->getStaticObjectField(cls, "tagOrdinal", "Ljava/lang/String;"));
                            tagOrdinal2 = new ::java::lang::String(env->getStaticObjectField(cls, "tagOrdinal2", "Ljava/lang/String;"));
                            tagPercentage = new ::java::lang::String(env->getStaticObjectField(cls, "tagPercentage", "Ljava/lang/String;"));
                            tagProperNoun = new ::java::lang::String(env->getStaticObjectField(cls, "tagProperNoun", "Ljava/lang/String;"));
                            tagProperNounOther = new ::java::lang::String(env->getStaticObjectField(cls, "tagProperNounOther", "Ljava/lang/String;"));
                            tagProperNounPlace = new ::java::lang::String(env->getStaticObjectField(cls, "tagProperNounPlace", "Ljava/lang/String;"));
                            tagVerb = new ::java::lang::String(env->getStaticObjectField(cls, "tagVerb", "Ljava/lang/String;"));
                            tagVerbFirstSingular = new ::java::lang::String(env->getStaticObjectField(cls, "tagVerbFirstSingular", "Ljava/lang/String;"));
                            tagVerbFirstSingularPast = new ::java::lang::String(env->getStaticObjectField(cls, "tagVerbFirstSingularPast", "Ljava/lang/String;"));
                            tagVerbFirstSingularSubjunctive = new ::java::lang::String(env->getStaticObjectField(cls, "tagVerbFirstSingularSubjunctive", "Ljava/lang/String;"));
                            tagVerbImperative = new ::java::lang::String(env->getStaticObjectField(cls, "tagVerbImperative", "Ljava/lang/String;"));
                            tagVerbInfActive = new ::java::lang::String(env->getStaticObjectField(cls, "tagVerbInfActive", "Ljava/lang/String;"));
                            tagVerbInfMiddle = new ::java::lang::String(env->getStaticObjectField(cls, "tagVerbInfMiddle", "Ljava/lang/String;"));
                            tagVerbMiddle = new ::java::lang::String(env->getStaticObjectField(cls, "tagVerbMiddle", "Ljava/lang/String;"));
                            tagVerbPastPart = new ::java::lang::String(env->getStaticObjectField(cls, "tagVerbPastPart", "Ljava/lang/String;"));
                            tagVerbPresentPart = new ::java::lang::String(env->getStaticObjectField(cls, "tagVerbPresentPart", "Ljava/lang/String;"));
                            tagVerbSecondSingular = new ::java::lang::String(env->getStaticObjectField(cls, "tagVerbSecondSingular", "Ljava/lang/String;"));
                            tagVerbSubjunctive = new ::java::lang::String(env->getStaticObjectField(cls, "tagVerbSubjunctive", "Ljava/lang/String;"));
                            tagVerbSupine = new ::java::lang::String(env->getStaticObjectField(cls, "tagVerbSupine", "Ljava/lang/String;"));
                            tagVerbSupineMiddle = new ::java::lang::String(env->getStaticObjectField(cls, "tagVerbSupineMiddle", "Ljava/lang/String;"));
                            tagVerbThirdPlural = new ::java::lang::String(env->getStaticObjectField(cls, "tagVerbThirdPlural", "Ljava/lang/String;"));
                            tagVerbThirdPluralMiddle = new ::java::lang::String(env->getStaticObjectField(cls, "tagVerbThirdPluralMiddle", "Ljava/lang/String;"));
                            tagVerbThirdPluralSubjunctive = new ::java::lang::String(env->getStaticObjectField(cls, "tagVerbThirdPluralSubjunctive", "Ljava/lang/String;"));
                            tagVerbThirdSingular = new ::java::lang::String(env->getStaticObjectField(cls, "tagVerbThirdSingular", "Ljava/lang/String;"));
                            tagVerbThirdSingularPast = new ::java::lang::String(env->getStaticObjectField(cls, "tagVerbThirdSingularPast", "Ljava/lang/String;"));
                            tagVerbThirdSingularSubjunctive = new ::java::lang::String(env->getStaticObjectField(cls, "tagVerbThirdSingularSubjunctive", "Ljava/lang/String;"));
                        }
                        return (jclass) class$->this$;
                    }

                    IceTag::IceTag() : ::is::iclt::icenlp::core::utils::Tag(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

                    IceTag::IceTag(const ::java::lang::String & a0) : ::is::iclt::icenlp::core::utils::Tag(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}

                    void IceTag::addArticle() const
                    {
                        env->callVoidMethod(this$, mids$[mid_addArticle_54c6a166]);
                    }

                    ::java::lang::String IceTag::annotation(jboolean a0) const
                    {
                        return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_annotation_445a175e], a0));
                    }

                    jboolean IceTag::caseMatch(const IceTag & a0) const
                    {
                        return env->callBooleanMethod(this$, mids$[mid_caseMatch_9c6a1362], a0.this$);
                    }

                    jboolean IceTag::caseMatch(const ::java::util::ArrayList & a0) const
                    {
                        return env->callBooleanMethod(this$, mids$[mid_caseMatch_b3f662f5], a0.this$);
                    }

                    jboolean IceTag::genderNumberCaseMatch(const IceTag & a0) const
                    {
                        return env->callBooleanMethod(this$, mids$[mid_genderNumberCaseMatch_9c6a1362], a0.this$);
                    }

                    jboolean IceTag::genderNumberCaseMatch(const ::java::util::ArrayList & a0) const
                    {
                        return env->callBooleanMethod(this$, mids$[mid_genderNumberCaseMatch_b3f662f5], a0.this$);
                    }

                    jchar IceTag::getCaseLetter() const
                    {
                        return env->callCharMethod(this$, mids$[mid_getCaseLetter_54c6a173]);
                    }

                    jchar IceTag::getDeclension() const
                    {
                        return env->callCharMethod(this$, mids$[mid_getDeclension_54c6a173]);
                    }

                    jchar IceTag::getNumberLetter() const
                    {
                        return env->callCharMethod(this$, mids$[mid_getNumberLetter_54c6a173]);
                    }

                    jchar IceTag::getPersonGenderLetter() const
                    {
                        return env->callCharMethod(this$, mids$[mid_getPersonGenderLetter_54c6a173]);
                    }

                    jchar IceTag::getProperNounType() const
                    {
                        return env->callCharMethod(this$, mids$[mid_getProperNounType_54c6a173]);
                    }

                    ::java::lang::String IceTag::getWordClass() const
                    {
                        return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getWordClass_14c7b5c5]));
                    }

                    ::is::iclt::icenlp::core::utils::IceTag$WordClass IceTag::getWordClassCode() const
                    {
                        return ::is::iclt::icenlp::core::utils::IceTag$WordClass(env->callObjectMethod(this$, mids$[mid_getWordClassCode_230f6e5d]));
                    }

                    jboolean IceTag::hasArticle() const
                    {
                        return env->callBooleanMethod(this$, mids$[mid_hasArticle_54c6a16a]);
                    }

                    jboolean IceTag::hasGender() const
                    {
                        return env->callBooleanMethod(this$, mids$[mid_hasGender_54c6a16a]);
                    }

                    jboolean IceTag::isAdjective() const
                    {
                        return env->callBooleanMethod(this$, mids$[mid_isAdjective_54c6a16a]);
                    }

                    jboolean IceTag::isAdjectiveComparative() const
                    {
                        return env->callBooleanMethod(this$, mids$[mid_isAdjectiveComparative_54c6a16a]);
                    }

                    jboolean IceTag::isAdjectiveIndeclineable() const
                    {
                        return env->callBooleanMethod(this$, mids$[mid_isAdjectiveIndeclineable_54c6a16a]);
                    }

                    jboolean IceTag::isAdjectivePositive() const
                    {
                        return env->callBooleanMethod(this$, mids$[mid_isAdjectivePositive_54c6a16a]);
                    }

                    jboolean IceTag::isAdjectiveStrong() const
                    {
                        return env->callBooleanMethod(this$, mids$[mid_isAdjectiveStrong_54c6a16a]);
                    }

                    jboolean IceTag::isAdjectiveSuper() const
                    {
                        return env->callBooleanMethod(this$, mids$[mid_isAdjectiveSuper_54c6a16a]);
                    }

                    jboolean IceTag::isAdjectiveWeak() const
                    {
                        return env->callBooleanMethod(this$, mids$[mid_isAdjectiveWeak_54c6a16a]);
                    }

                    jboolean IceTag::isAdverb() const
                    {
                        return env->callBooleanMethod(this$, mids$[mid_isAdverb_54c6a16a]);
                    }

                    jboolean IceTag::isAdverbComparative() const
                    {
                        return env->callBooleanMethod(this$, mids$[mid_isAdverbComparative_54c6a16a]);
                    }

                    jboolean IceTag::isAdverbSuper() const
                    {
                        return env->callBooleanMethod(this$, mids$[mid_isAdverbSuper_54c6a16a]);
                    }

                    jboolean IceTag::isArticle() const
                    {
                        return env->callBooleanMethod(this$, mids$[mid_isArticle_54c6a16a]);
                    }

                    jboolean IceTag::isCase(jchar a0) const
                    {
                        return env->callBooleanMethod(this$, mids$[mid_isCase_87fd5456], a0);
                    }

                    jboolean IceTag::isConjunction() const
                    {
                        return env->callBooleanMethod(this$, mids$[mid_isConjunction_54c6a16a]);
                    }

                    jboolean IceTag::isDeclension(jchar a0) const
                    {
                        return env->callBooleanMethod(this$, mids$[mid_isDeclension_87fd5456], a0);
                    }

                    jboolean IceTag::isDemonstrativePronoun() const
                    {
                        return env->callBooleanMethod(this$, mids$[mid_isDemonstrativePronoun_54c6a16a]);
                    }

                    jboolean IceTag::isExclamation() const
                    {
                        return env->callBooleanMethod(this$, mids$[mid_isExclamation_54c6a16a]);
                    }

                    jboolean IceTag::isForeign() const
                    {
                        return env->callBooleanMethod(this$, mids$[mid_isForeign_54c6a16a]);
                    }

                    jboolean IceTag::isGender(jchar a0) const
                    {
                        return env->callBooleanMethod(this$, mids$[mid_isGender_87fd5456], a0);
                    }

                    jboolean IceTag::isIndefinitePronoun() const
                    {
                        return env->callBooleanMethod(this$, mids$[mid_isIndefinitePronoun_54c6a16a]);
                    }

                    jboolean IceTag::isInfinitive() const
                    {
                        return env->callBooleanMethod(this$, mids$[mid_isInfinitive_54c6a16a]);
                    }

                    jboolean IceTag::isInterrogativePronoun() const
                    {
                        return env->callBooleanMethod(this$, mids$[mid_isInterrogativePronoun_54c6a16a]);
                    }

                    jboolean IceTag::isNominal() const
                    {
                        return env->callBooleanMethod(this$, mids$[mid_isNominal_54c6a16a]);
                    }

                    jboolean IceTag::isNoun() const
                    {
                        return env->callBooleanMethod(this$, mids$[mid_isNoun_54c6a16a]);
                    }

                    jboolean IceTag::isNumber(jchar a0) const
                    {
                        return env->callBooleanMethod(this$, mids$[mid_isNumber_87fd5456], a0);
                    }

                    jboolean IceTag::isNumeral() const
                    {
                        return env->callBooleanMethod(this$, mids$[mid_isNumeral_54c6a16a]);
                    }

                    jboolean IceTag::isNumeralNominal() const
                    {
                        return env->callBooleanMethod(this$, mids$[mid_isNumeralNominal_54c6a16a]);
                    }

                    jboolean IceTag::isNumeralOrdinal() const
                    {
                        return env->callBooleanMethod(this$, mids$[mid_isNumeralOrdinal_54c6a16a]);
                    }

                    jboolean IceTag::isPersonalPronoun() const
                    {
                        return env->callBooleanMethod(this$, mids$[mid_isPersonalPronoun_54c6a16a]);
                    }

                    jboolean IceTag::isPossessivePronoun() const
                    {
                        return env->callBooleanMethod(this$, mids$[mid_isPossessivePronoun_54c6a16a]);
                    }

                    jboolean IceTag::isPreposition() const
                    {
                        return env->callBooleanMethod(this$, mids$[mid_isPreposition_54c6a16a]);
                    }

                    jboolean IceTag::isPronoun() const
                    {
                        return env->callBooleanMethod(this$, mids$[mid_isPronoun_54c6a16a]);
                    }

                    jboolean IceTag::isProperNoun() const
                    {
                        return env->callBooleanMethod(this$, mids$[mid_isProperNoun_54c6a16a]);
                    }

                    jboolean IceTag::isProperNounType(jchar a0) const
                    {
                        return env->callBooleanMethod(this$, mids$[mid_isProperNounType_87fd5456], a0);
                    }

                    jboolean IceTag::isReflexivePronoun() const
                    {
                        return env->callBooleanMethod(this$, mids$[mid_isReflexivePronoun_54c6a16a]);
                    }

                    jboolean IceTag::isRelativeConjunction() const
                    {
                        return env->callBooleanMethod(this$, mids$[mid_isRelativeConjunction_54c6a16a]);
                    }

                    jboolean IceTag::isRelativePronoun() const
                    {
                        return env->callBooleanMethod(this$, mids$[mid_isRelativePronoun_54c6a16a]);
                    }

                    jboolean IceTag::isVerb() const
                    {
                        return env->callBooleanMethod(this$, mids$[mid_isVerb_54c6a16a]);
                    }

                    jboolean IceTag::isVerbActiveForm() const
                    {
                        return env->callBooleanMethod(this$, mids$[mid_isVerbActiveForm_54c6a16a]);
                    }

                    jboolean IceTag::isVerbAny() const
                    {
                        return env->callBooleanMethod(this$, mids$[mid_isVerbAny_54c6a16a]);
                    }

                    jboolean IceTag::isVerbAuxiliary() const
                    {
                        return env->callBooleanMethod(this$, mids$[mid_isVerbAuxiliary_54c6a16a]);
                    }

                    jboolean IceTag::isVerbBe() const
                    {
                        return env->callBooleanMethod(this$, mids$[mid_isVerbBe_54c6a16a]);
                    }

                    jboolean IceTag::isVerbCaseMarking() const
                    {
                        return env->callBooleanMethod(this$, mids$[mid_isVerbCaseMarking_54c6a16a]);
                    }

                    jboolean IceTag::isVerbImperative() const
                    {
                        return env->callBooleanMethod(this$, mids$[mid_isVerbImperative_54c6a16a]);
                    }

                    jboolean IceTag::isVerbIndicativeForm() const
                    {
                        return env->callBooleanMethod(this$, mids$[mid_isVerbIndicativeForm_54c6a16a]);
                    }

                    jboolean IceTag::isVerbInfinitive() const
                    {
                        return env->callBooleanMethod(this$, mids$[mid_isVerbInfinitive_54c6a16a]);
                    }

                    jboolean IceTag::isVerbMarking() const
                    {
                        return env->callBooleanMethod(this$, mids$[mid_isVerbMarking_54c6a16a]);
                    }

                    jboolean IceTag::isVerbMiddleForm() const
                    {
                        return env->callBooleanMethod(this$, mids$[mid_isVerbMiddleForm_54c6a16a]);
                    }

                    jboolean IceTag::isVerbPastParticiple() const
                    {
                        return env->callBooleanMethod(this$, mids$[mid_isVerbPastParticiple_54c6a16a]);
                    }

                    jboolean IceTag::isVerbPresentPart() const
                    {
                        return env->callBooleanMethod(this$, mids$[mid_isVerbPresentPart_54c6a16a]);
                    }

                    jboolean IceTag::isVerbSpecialAuxiliary() const
                    {
                        return env->callBooleanMethod(this$, mids$[mid_isVerbSpecialAuxiliary_54c6a16a]);
                    }

                    jboolean IceTag::isVerbSpecialInf() const
                    {
                        return env->callBooleanMethod(this$, mids$[mid_isVerbSpecialInf_54c6a16a]);
                    }

                    jboolean IceTag::isVerbSubjunctiveForm() const
                    {
                        return env->callBooleanMethod(this$, mids$[mid_isVerbSubjunctiveForm_54c6a16a]);
                    }

                    jboolean IceTag::isVerbSupine() const
                    {
                        return env->callBooleanMethod(this$, mids$[mid_isVerbSupine_54c6a16a]);
                    }

                    jboolean IceTag::isWordClass(const ::is::iclt::icenlp::core::utils::IceTag$WordClass & a0) const
                    {
                        return env->callBooleanMethod(this$, mids$[mid_isWordClass_0dc1bb34], a0.this$);
                    }

                    jboolean IceTag::numberCaseMatch(const ::java::util::ArrayList & a0) const
                    {
                        return env->callBooleanMethod(this$, mids$[mid_numberCaseMatch_b3f662f5], a0.this$);
                    }

                    jboolean IceTag::numberCaseMatch(const IceTag & a0) const
                    {
                        return env->callBooleanMethod(this$, mids$[mid_numberCaseMatch_9c6a1362], a0.this$);
                    }

                    jboolean IceTag::numberMatch(const IceTag & a0) const
                    {
                        return env->callBooleanMethod(this$, mids$[mid_numberMatch_9c6a1362], a0.this$);
                    }

                    jboolean IceTag::numberMatch(const ::java::util::ArrayList & a0) const
                    {
                        return env->callBooleanMethod(this$, mids$[mid_numberMatch_b3f662f5], a0.this$);
                    }

                    jboolean IceTag::personGenderMatch(const ::java::util::ArrayList & a0) const
                    {
                        return env->callBooleanMethod(this$, mids$[mid_personGenderMatch_b3f662f5], a0.this$);
                    }

                    jboolean IceTag::personGenderMatch(const IceTag & a0) const
                    {
                        return env->callBooleanMethod(this$, mids$[mid_personGenderMatch_9c6a1362], a0.this$);
                    }

                    jboolean IceTag::personGenderNumberMatch(const ::java::util::ArrayList & a0) const
                    {
                        return env->callBooleanMethod(this$, mids$[mid_personGenderNumberMatch_b3f662f5], a0.this$);
                    }

                    jboolean IceTag::personGenderNumberMatch(const IceTag & a0) const
                    {
                        return env->callBooleanMethod(this$, mids$[mid_personGenderNumberMatch_9c6a1362], a0.this$);
                    }

                    void IceTag::removeArticle() const
                    {
                        env->callVoidMethod(this$, mids$[mid_removeArticle_54c6a166]);
                    }

                    void IceTag::setCase(jchar a0) const
                    {
                        env->callVoidMethod(this$, mids$[mid_setCase_87fd545a], a0);
                    }

                    void IceTag::setDeclension(jchar a0) const
                    {
                        env->callVoidMethod(this$, mids$[mid_setDeclension_87fd545a], a0);
                    }

                    void IceTag::setDegree(jchar a0) const
                    {
                        env->callVoidMethod(this$, mids$[mid_setDegree_87fd545a], a0);
                    }

                    void IceTag::setGenderNumberCase(jchar a0, jchar a1, jchar a2) const
                    {
                        env->callVoidMethod(this$, mids$[mid_setGenderNumberCase_094d1f92], a0, a1, a2);
                    }

                    void IceTag::setNumber(jchar a0) const
                    {
                        env->callVoidMethod(this$, mids$[mid_setNumber_87fd545a], a0);
                    }

                    void IceTag::setPersonGender(jchar a0) const
                    {
                        env->callVoidMethod(this$, mids$[mid_setPersonGender_87fd545a], a0);
                    }

                    void IceTag::setPersonName() const
                    {
                        env->callVoidMethod(this$, mids$[mid_setPersonName_54c6a166]);
                    }

                    void IceTag::setProperNameType(jchar a0) const
                    {
                        env->callVoidMethod(this$, mids$[mid_setProperNameType_87fd545a], a0);
                    }

                    void IceTag::setTense(jchar a0) const
                    {
                        env->callVoidMethod(this$, mids$[mid_setTense_87fd545a], a0);
                    }

                    void IceTag::setVoice(jchar a0) const
                    {
                        env->callVoidMethod(this$, mids$[mid_setVoice_87fd545a], a0);
                    }
                }
            }
        }
    }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace is {
    namespace iclt {
        namespace icenlp {
            namespace core {
                namespace utils {
                    static PyObject *t_IceTag_cast_(PyTypeObject *type, PyObject *arg);
                    static PyObject *t_IceTag_instance_(PyTypeObject *type, PyObject *arg);
                    static int t_IceTag_init_(t_IceTag *self, PyObject *args, PyObject *kwds);
                    static PyObject *t_IceTag_addArticle(t_IceTag *self);
                    static PyObject *t_IceTag_annotation(t_IceTag *self, PyObject *arg);
                    static PyObject *t_IceTag_caseMatch(t_IceTag *self, PyObject *args);
                    static PyObject *t_IceTag_genderNumberCaseMatch(t_IceTag *self, PyObject *args);
                    static PyObject *t_IceTag_getCaseLetter(t_IceTag *self);
                    static PyObject *t_IceTag_getDeclension(t_IceTag *self);
                    static PyObject *t_IceTag_getNumberLetter(t_IceTag *self);
                    static PyObject *t_IceTag_getPersonGenderLetter(t_IceTag *self);
                    static PyObject *t_IceTag_getProperNounType(t_IceTag *self);
                    static PyObject *t_IceTag_getWordClass(t_IceTag *self);
                    static PyObject *t_IceTag_getWordClassCode(t_IceTag *self);
                    static PyObject *t_IceTag_hasArticle(t_IceTag *self);
                    static PyObject *t_IceTag_hasGender(t_IceTag *self);
                    static PyObject *t_IceTag_isAdjective(t_IceTag *self);
                    static PyObject *t_IceTag_isAdjectiveComparative(t_IceTag *self);
                    static PyObject *t_IceTag_isAdjectiveIndeclineable(t_IceTag *self);
                    static PyObject *t_IceTag_isAdjectivePositive(t_IceTag *self);
                    static PyObject *t_IceTag_isAdjectiveStrong(t_IceTag *self);
                    static PyObject *t_IceTag_isAdjectiveSuper(t_IceTag *self);
                    static PyObject *t_IceTag_isAdjectiveWeak(t_IceTag *self);
                    static PyObject *t_IceTag_isAdverb(t_IceTag *self);
                    static PyObject *t_IceTag_isAdverbComparative(t_IceTag *self);
                    static PyObject *t_IceTag_isAdverbSuper(t_IceTag *self);
                    static PyObject *t_IceTag_isArticle(t_IceTag *self);
                    static PyObject *t_IceTag_isCase(t_IceTag *self, PyObject *arg);
                    static PyObject *t_IceTag_isConjunction(t_IceTag *self);
                    static PyObject *t_IceTag_isDeclension(t_IceTag *self, PyObject *arg);
                    static PyObject *t_IceTag_isDemonstrativePronoun(t_IceTag *self);
                    static PyObject *t_IceTag_isExclamation(t_IceTag *self);
                    static PyObject *t_IceTag_isForeign(t_IceTag *self);
                    static PyObject *t_IceTag_isGender(t_IceTag *self, PyObject *arg);
                    static PyObject *t_IceTag_isIndefinitePronoun(t_IceTag *self);
                    static PyObject *t_IceTag_isInfinitive(t_IceTag *self);
                    static PyObject *t_IceTag_isInterrogativePronoun(t_IceTag *self);
                    static PyObject *t_IceTag_isNominal(t_IceTag *self);
                    static PyObject *t_IceTag_isNoun(t_IceTag *self);
                    static PyObject *t_IceTag_isNumber(t_IceTag *self, PyObject *arg);
                    static PyObject *t_IceTag_isNumeral(t_IceTag *self);
                    static PyObject *t_IceTag_isNumeralNominal(t_IceTag *self);
                    static PyObject *t_IceTag_isNumeralOrdinal(t_IceTag *self);
                    static PyObject *t_IceTag_isPersonalPronoun(t_IceTag *self);
                    static PyObject *t_IceTag_isPossessivePronoun(t_IceTag *self);
                    static PyObject *t_IceTag_isPreposition(t_IceTag *self);
                    static PyObject *t_IceTag_isPronoun(t_IceTag *self);
                    static PyObject *t_IceTag_isProperNoun(t_IceTag *self);
                    static PyObject *t_IceTag_isProperNounType(t_IceTag *self, PyObject *arg);
                    static PyObject *t_IceTag_isReflexivePronoun(t_IceTag *self);
                    static PyObject *t_IceTag_isRelativeConjunction(t_IceTag *self);
                    static PyObject *t_IceTag_isRelativePronoun(t_IceTag *self);
                    static PyObject *t_IceTag_isVerb(t_IceTag *self);
                    static PyObject *t_IceTag_isVerbActiveForm(t_IceTag *self);
                    static PyObject *t_IceTag_isVerbAny(t_IceTag *self);
                    static PyObject *t_IceTag_isVerbAuxiliary(t_IceTag *self);
                    static PyObject *t_IceTag_isVerbBe(t_IceTag *self);
                    static PyObject *t_IceTag_isVerbCaseMarking(t_IceTag *self);
                    static PyObject *t_IceTag_isVerbImperative(t_IceTag *self);
                    static PyObject *t_IceTag_isVerbIndicativeForm(t_IceTag *self);
                    static PyObject *t_IceTag_isVerbInfinitive(t_IceTag *self);
                    static PyObject *t_IceTag_isVerbMarking(t_IceTag *self);
                    static PyObject *t_IceTag_isVerbMiddleForm(t_IceTag *self);
                    static PyObject *t_IceTag_isVerbPastParticiple(t_IceTag *self);
                    static PyObject *t_IceTag_isVerbPresentPart(t_IceTag *self);
                    static PyObject *t_IceTag_isVerbSpecialAuxiliary(t_IceTag *self);
                    static PyObject *t_IceTag_isVerbSpecialInf(t_IceTag *self);
                    static PyObject *t_IceTag_isVerbSubjunctiveForm(t_IceTag *self);
                    static PyObject *t_IceTag_isVerbSupine(t_IceTag *self);
                    static PyObject *t_IceTag_isWordClass(t_IceTag *self, PyObject *arg);
                    static PyObject *t_IceTag_numberCaseMatch(t_IceTag *self, PyObject *args);
                    static PyObject *t_IceTag_numberMatch(t_IceTag *self, PyObject *args);
                    static PyObject *t_IceTag_personGenderMatch(t_IceTag *self, PyObject *args);
                    static PyObject *t_IceTag_personGenderNumberMatch(t_IceTag *self, PyObject *args);
                    static PyObject *t_IceTag_removeArticle(t_IceTag *self);
                    static PyObject *t_IceTag_setCase(t_IceTag *self, PyObject *arg);
                    static PyObject *t_IceTag_setDeclension(t_IceTag *self, PyObject *arg);
                    static PyObject *t_IceTag_setDegree(t_IceTag *self, PyObject *arg);
                    static PyObject *t_IceTag_setGenderNumberCase(t_IceTag *self, PyObject *args);
                    static PyObject *t_IceTag_setNumber(t_IceTag *self, PyObject *arg);
                    static PyObject *t_IceTag_setPersonGender(t_IceTag *self, PyObject *arg);
                    static PyObject *t_IceTag_setPersonName(t_IceTag *self);
                    static PyObject *t_IceTag_setProperNameType(t_IceTag *self, PyObject *arg);
                    static PyObject *t_IceTag_setTense(t_IceTag *self, PyObject *arg);
                    static PyObject *t_IceTag_setVoice(t_IceTag *self, PyObject *arg);
                    static PyObject *t_IceTag_get__adjective(t_IceTag *self, void *data);
                    static PyObject *t_IceTag_get__adjectiveComparative(t_IceTag *self, void *data);
                    static PyObject *t_IceTag_get__adjectiveIndeclineable(t_IceTag *self, void *data);
                    static PyObject *t_IceTag_get__adjectivePositive(t_IceTag *self, void *data);
                    static PyObject *t_IceTag_get__adjectiveStrong(t_IceTag *self, void *data);
                    static PyObject *t_IceTag_get__adjectiveSuper(t_IceTag *self, void *data);
                    static PyObject *t_IceTag_get__adjectiveWeak(t_IceTag *self, void *data);
                    static PyObject *t_IceTag_get__adverb(t_IceTag *self, void *data);
                    static PyObject *t_IceTag_get__adverbComparative(t_IceTag *self, void *data);
                    static PyObject *t_IceTag_get__adverbSuper(t_IceTag *self, void *data);
                    static PyObject *t_IceTag_get__article(t_IceTag *self, void *data);
                    static int t_IceTag_set__case(t_IceTag *self, PyObject *arg, void *data);
                    static PyObject *t_IceTag_get__caseLetter(t_IceTag *self, void *data);
                    static PyObject *t_IceTag_get__conjunction(t_IceTag *self, void *data);
                    static PyObject *t_IceTag_get__declension(t_IceTag *self, void *data);
                    static int t_IceTag_set__declension(t_IceTag *self, PyObject *arg, void *data);
                    static int t_IceTag_set__degree(t_IceTag *self, PyObject *arg, void *data);
                    static PyObject *t_IceTag_get__demonstrativePronoun(t_IceTag *self, void *data);
                    static PyObject *t_IceTag_get__exclamation(t_IceTag *self, void *data);
                    static PyObject *t_IceTag_get__foreign(t_IceTag *self, void *data);
                    static PyObject *t_IceTag_get__indefinitePronoun(t_IceTag *self, void *data);
                    static PyObject *t_IceTag_get__infinitive(t_IceTag *self, void *data);
                    static PyObject *t_IceTag_get__interrogativePronoun(t_IceTag *self, void *data);
                    static PyObject *t_IceTag_get__nominal(t_IceTag *self, void *data);
                    static PyObject *t_IceTag_get__noun(t_IceTag *self, void *data);
                    static int t_IceTag_set__number(t_IceTag *self, PyObject *arg, void *data);
                    static PyObject *t_IceTag_get__numberLetter(t_IceTag *self, void *data);
                    static PyObject *t_IceTag_get__numeral(t_IceTag *self, void *data);
                    static PyObject *t_IceTag_get__numeralNominal(t_IceTag *self, void *data);
                    static PyObject *t_IceTag_get__numeralOrdinal(t_IceTag *self, void *data);
                    static int t_IceTag_set__personGender(t_IceTag *self, PyObject *arg, void *data);
                    static PyObject *t_IceTag_get__personGenderLetter(t_IceTag *self, void *data);
                    static PyObject *t_IceTag_get__personalPronoun(t_IceTag *self, void *data);
                    static PyObject *t_IceTag_get__possessivePronoun(t_IceTag *self, void *data);
                    static PyObject *t_IceTag_get__preposition(t_IceTag *self, void *data);
                    static PyObject *t_IceTag_get__pronoun(t_IceTag *self, void *data);
                    static int t_IceTag_set__properNameType(t_IceTag *self, PyObject *arg, void *data);
                    static PyObject *t_IceTag_get__properNoun(t_IceTag *self, void *data);
                    static PyObject *t_IceTag_get__properNounType(t_IceTag *self, void *data);
                    static PyObject *t_IceTag_get__reflexivePronoun(t_IceTag *self, void *data);
                    static PyObject *t_IceTag_get__relativeConjunction(t_IceTag *self, void *data);
                    static PyObject *t_IceTag_get__relativePronoun(t_IceTag *self, void *data);
                    static int t_IceTag_set__tense(t_IceTag *self, PyObject *arg, void *data);
                    static PyObject *t_IceTag_get__verb(t_IceTag *self, void *data);
                    static PyObject *t_IceTag_get__verbActiveForm(t_IceTag *self, void *data);
                    static PyObject *t_IceTag_get__verbAny(t_IceTag *self, void *data);
                    static PyObject *t_IceTag_get__verbAuxiliary(t_IceTag *self, void *data);
                    static PyObject *t_IceTag_get__verbBe(t_IceTag *self, void *data);
                    static PyObject *t_IceTag_get__verbCaseMarking(t_IceTag *self, void *data);
                    static PyObject *t_IceTag_get__verbImperative(t_IceTag *self, void *data);
                    static PyObject *t_IceTag_get__verbIndicativeForm(t_IceTag *self, void *data);
                    static PyObject *t_IceTag_get__verbInfinitive(t_IceTag *self, void *data);
                    static PyObject *t_IceTag_get__verbMarking(t_IceTag *self, void *data);
                    static PyObject *t_IceTag_get__verbMiddleForm(t_IceTag *self, void *data);
                    static PyObject *t_IceTag_get__verbPastParticiple(t_IceTag *self, void *data);
                    static PyObject *t_IceTag_get__verbPresentPart(t_IceTag *self, void *data);
                    static PyObject *t_IceTag_get__verbSpecialAuxiliary(t_IceTag *self, void *data);
                    static PyObject *t_IceTag_get__verbSpecialInf(t_IceTag *self, void *data);
                    static PyObject *t_IceTag_get__verbSubjunctiveForm(t_IceTag *self, void *data);
                    static PyObject *t_IceTag_get__verbSupine(t_IceTag *self, void *data);
                    static int t_IceTag_set__voice(t_IceTag *self, PyObject *arg, void *data);
                    static PyObject *t_IceTag_get__wordClass(t_IceTag *self, void *data);
                    static PyObject *t_IceTag_get__wordClassCode(t_IceTag *self, void *data);
                    static PyGetSetDef t_IceTag__fields_[] = {
                        DECLARE_GET_FIELD(t_IceTag, adjective),
                        DECLARE_GET_FIELD(t_IceTag, adjectiveComparative),
                        DECLARE_GET_FIELD(t_IceTag, adjectiveIndeclineable),
                        DECLARE_GET_FIELD(t_IceTag, adjectivePositive),
                        DECLARE_GET_FIELD(t_IceTag, adjectiveStrong),
                        DECLARE_GET_FIELD(t_IceTag, adjectiveSuper),
                        DECLARE_GET_FIELD(t_IceTag, adjectiveWeak),
                        DECLARE_GET_FIELD(t_IceTag, adverb),
                        DECLARE_GET_FIELD(t_IceTag, adverbComparative),
                        DECLARE_GET_FIELD(t_IceTag, adverbSuper),
                        DECLARE_GET_FIELD(t_IceTag, article),
                        DECLARE_SET_FIELD(t_IceTag, case),
                        DECLARE_GET_FIELD(t_IceTag, caseLetter),
                        DECLARE_GET_FIELD(t_IceTag, conjunction),
                        DECLARE_GETSET_FIELD(t_IceTag, declension),
                        DECLARE_SET_FIELD(t_IceTag, degree),
                        DECLARE_GET_FIELD(t_IceTag, demonstrativePronoun),
                        DECLARE_GET_FIELD(t_IceTag, exclamation),
                        DECLARE_GET_FIELD(t_IceTag, foreign),
                        DECLARE_GET_FIELD(t_IceTag, indefinitePronoun),
                        DECLARE_GET_FIELD(t_IceTag, infinitive),
                        DECLARE_GET_FIELD(t_IceTag, interrogativePronoun),
                        DECLARE_GET_FIELD(t_IceTag, nominal),
                        DECLARE_GET_FIELD(t_IceTag, noun),
                        DECLARE_SET_FIELD(t_IceTag, number),
                        DECLARE_GET_FIELD(t_IceTag, numberLetter),
                        DECLARE_GET_FIELD(t_IceTag, numeral),
                        DECLARE_GET_FIELD(t_IceTag, numeralNominal),
                        DECLARE_GET_FIELD(t_IceTag, numeralOrdinal),
                        DECLARE_SET_FIELD(t_IceTag, personGender),
                        DECLARE_GET_FIELD(t_IceTag, personGenderLetter),
                        DECLARE_GET_FIELD(t_IceTag, personalPronoun),
                        DECLARE_GET_FIELD(t_IceTag, possessivePronoun),
                        DECLARE_GET_FIELD(t_IceTag, preposition),
                        DECLARE_GET_FIELD(t_IceTag, pronoun),
                        DECLARE_SET_FIELD(t_IceTag, properNameType),
                        DECLARE_GET_FIELD(t_IceTag, properNoun),
                        DECLARE_GET_FIELD(t_IceTag, properNounType),
                        DECLARE_GET_FIELD(t_IceTag, reflexivePronoun),
                        DECLARE_GET_FIELD(t_IceTag, relativeConjunction),
                        DECLARE_GET_FIELD(t_IceTag, relativePronoun),
                        DECLARE_SET_FIELD(t_IceTag, tense),
                        DECLARE_GET_FIELD(t_IceTag, verb),
                        DECLARE_GET_FIELD(t_IceTag, verbActiveForm),
                        DECLARE_GET_FIELD(t_IceTag, verbAny),
                        DECLARE_GET_FIELD(t_IceTag, verbAuxiliary),
                        DECLARE_GET_FIELD(t_IceTag, verbBe),
                        DECLARE_GET_FIELD(t_IceTag, verbCaseMarking),
                        DECLARE_GET_FIELD(t_IceTag, verbImperative),
                        DECLARE_GET_FIELD(t_IceTag, verbIndicativeForm),
                        DECLARE_GET_FIELD(t_IceTag, verbInfinitive),
                        DECLARE_GET_FIELD(t_IceTag, verbMarking),
                        DECLARE_GET_FIELD(t_IceTag, verbMiddleForm),
                        DECLARE_GET_FIELD(t_IceTag, verbPastParticiple),
                        DECLARE_GET_FIELD(t_IceTag, verbPresentPart),
                        DECLARE_GET_FIELD(t_IceTag, verbSpecialAuxiliary),
                        DECLARE_GET_FIELD(t_IceTag, verbSpecialInf),
                        DECLARE_GET_FIELD(t_IceTag, verbSubjunctiveForm),
                        DECLARE_GET_FIELD(t_IceTag, verbSupine),
                        DECLARE_SET_FIELD(t_IceTag, voice),
                        DECLARE_GET_FIELD(t_IceTag, wordClass),
                        DECLARE_GET_FIELD(t_IceTag, wordClassCode),
                        { NULL, NULL, NULL, NULL, NULL }
                    };

                    static PyMethodDef t_IceTag__methods_[] = {
                        DECLARE_METHOD(t_IceTag, cast_, METH_O | METH_CLASS),
                        DECLARE_METHOD(t_IceTag, instance_, METH_O | METH_CLASS),
                        DECLARE_METHOD(t_IceTag, addArticle, METH_NOARGS),
                        DECLARE_METHOD(t_IceTag, annotation, METH_O),
                        DECLARE_METHOD(t_IceTag, caseMatch, METH_VARARGS),
                        DECLARE_METHOD(t_IceTag, genderNumberCaseMatch, METH_VARARGS),
                        DECLARE_METHOD(t_IceTag, getCaseLetter, METH_NOARGS),
                        DECLARE_METHOD(t_IceTag, getDeclension, METH_NOARGS),
                        DECLARE_METHOD(t_IceTag, getNumberLetter, METH_NOARGS),
                        DECLARE_METHOD(t_IceTag, getPersonGenderLetter, METH_NOARGS),
                        DECLARE_METHOD(t_IceTag, getProperNounType, METH_NOARGS),
                        DECLARE_METHOD(t_IceTag, getWordClass, METH_NOARGS),
                        DECLARE_METHOD(t_IceTag, getWordClassCode, METH_NOARGS),
                        DECLARE_METHOD(t_IceTag, hasArticle, METH_NOARGS),
                        DECLARE_METHOD(t_IceTag, hasGender, METH_NOARGS),
                        DECLARE_METHOD(t_IceTag, isAdjective, METH_NOARGS),
                        DECLARE_METHOD(t_IceTag, isAdjectiveComparative, METH_NOARGS),
                        DECLARE_METHOD(t_IceTag, isAdjectiveIndeclineable, METH_NOARGS),
                        DECLARE_METHOD(t_IceTag, isAdjectivePositive, METH_NOARGS),
                        DECLARE_METHOD(t_IceTag, isAdjectiveStrong, METH_NOARGS),
                        DECLARE_METHOD(t_IceTag, isAdjectiveSuper, METH_NOARGS),
                        DECLARE_METHOD(t_IceTag, isAdjectiveWeak, METH_NOARGS),
                        DECLARE_METHOD(t_IceTag, isAdverb, METH_NOARGS),
                        DECLARE_METHOD(t_IceTag, isAdverbComparative, METH_NOARGS),
                        DECLARE_METHOD(t_IceTag, isAdverbSuper, METH_NOARGS),
                        DECLARE_METHOD(t_IceTag, isArticle, METH_NOARGS),
                        DECLARE_METHOD(t_IceTag, isCase, METH_O),
                        DECLARE_METHOD(t_IceTag, isConjunction, METH_NOARGS),
                        DECLARE_METHOD(t_IceTag, isDeclension, METH_O),
                        DECLARE_METHOD(t_IceTag, isDemonstrativePronoun, METH_NOARGS),
                        DECLARE_METHOD(t_IceTag, isExclamation, METH_NOARGS),
                        DECLARE_METHOD(t_IceTag, isForeign, METH_NOARGS),
                        DECLARE_METHOD(t_IceTag, isGender, METH_O),
                        DECLARE_METHOD(t_IceTag, isIndefinitePronoun, METH_NOARGS),
                        DECLARE_METHOD(t_IceTag, isInfinitive, METH_NOARGS),
                        DECLARE_METHOD(t_IceTag, isInterrogativePronoun, METH_NOARGS),
                        DECLARE_METHOD(t_IceTag, isNominal, METH_NOARGS),
                        DECLARE_METHOD(t_IceTag, isNoun, METH_NOARGS),
                        DECLARE_METHOD(t_IceTag, isNumber, METH_O),
                        DECLARE_METHOD(t_IceTag, isNumeral, METH_NOARGS),
                        DECLARE_METHOD(t_IceTag, isNumeralNominal, METH_NOARGS),
                        DECLARE_METHOD(t_IceTag, isNumeralOrdinal, METH_NOARGS),
                        DECLARE_METHOD(t_IceTag, isPersonalPronoun, METH_NOARGS),
                        DECLARE_METHOD(t_IceTag, isPossessivePronoun, METH_NOARGS),
                        DECLARE_METHOD(t_IceTag, isPreposition, METH_NOARGS),
                        DECLARE_METHOD(t_IceTag, isPronoun, METH_NOARGS),
                        DECLARE_METHOD(t_IceTag, isProperNoun, METH_NOARGS),
                        DECLARE_METHOD(t_IceTag, isProperNounType, METH_O),
                        DECLARE_METHOD(t_IceTag, isReflexivePronoun, METH_NOARGS),
                        DECLARE_METHOD(t_IceTag, isRelativeConjunction, METH_NOARGS),
                        DECLARE_METHOD(t_IceTag, isRelativePronoun, METH_NOARGS),
                        DECLARE_METHOD(t_IceTag, isVerb, METH_NOARGS),
                        DECLARE_METHOD(t_IceTag, isVerbActiveForm, METH_NOARGS),
                        DECLARE_METHOD(t_IceTag, isVerbAny, METH_NOARGS),
                        DECLARE_METHOD(t_IceTag, isVerbAuxiliary, METH_NOARGS),
                        DECLARE_METHOD(t_IceTag, isVerbBe, METH_NOARGS),
                        DECLARE_METHOD(t_IceTag, isVerbCaseMarking, METH_NOARGS),
                        DECLARE_METHOD(t_IceTag, isVerbImperative, METH_NOARGS),
                        DECLARE_METHOD(t_IceTag, isVerbIndicativeForm, METH_NOARGS),
                        DECLARE_METHOD(t_IceTag, isVerbInfinitive, METH_NOARGS),
                        DECLARE_METHOD(t_IceTag, isVerbMarking, METH_NOARGS),
                        DECLARE_METHOD(t_IceTag, isVerbMiddleForm, METH_NOARGS),
                        DECLARE_METHOD(t_IceTag, isVerbPastParticiple, METH_NOARGS),
                        DECLARE_METHOD(t_IceTag, isVerbPresentPart, METH_NOARGS),
                        DECLARE_METHOD(t_IceTag, isVerbSpecialAuxiliary, METH_NOARGS),
                        DECLARE_METHOD(t_IceTag, isVerbSpecialInf, METH_NOARGS),
                        DECLARE_METHOD(t_IceTag, isVerbSubjunctiveForm, METH_NOARGS),
                        DECLARE_METHOD(t_IceTag, isVerbSupine, METH_NOARGS),
                        DECLARE_METHOD(t_IceTag, isWordClass, METH_O),
                        DECLARE_METHOD(t_IceTag, numberCaseMatch, METH_VARARGS),
                        DECLARE_METHOD(t_IceTag, numberMatch, METH_VARARGS),
                        DECLARE_METHOD(t_IceTag, personGenderMatch, METH_VARARGS),
                        DECLARE_METHOD(t_IceTag, personGenderNumberMatch, METH_VARARGS),
                        DECLARE_METHOD(t_IceTag, removeArticle, METH_NOARGS),
                        DECLARE_METHOD(t_IceTag, setCase, METH_O),
                        DECLARE_METHOD(t_IceTag, setDeclension, METH_O),
                        DECLARE_METHOD(t_IceTag, setDegree, METH_O),
                        DECLARE_METHOD(t_IceTag, setGenderNumberCase, METH_VARARGS),
                        DECLARE_METHOD(t_IceTag, setNumber, METH_O),
                        DECLARE_METHOD(t_IceTag, setPersonGender, METH_O),
                        DECLARE_METHOD(t_IceTag, setPersonName, METH_NOARGS),
                        DECLARE_METHOD(t_IceTag, setProperNameType, METH_O),
                        DECLARE_METHOD(t_IceTag, setTense, METH_O),
                        DECLARE_METHOD(t_IceTag, setVoice, METH_O),
                        { NULL, NULL, 0, NULL }
                    };

                    DECLARE_TYPE(IceTag, t_IceTag, ::is::iclt::icenlp::core::utils::Tag, IceTag, t_IceTag_init_, 0, 0, t_IceTag__fields_, 0, 0);

                    void t_IceTag::install(PyObject *module)
                    {
                        installType(&PY_TYPE(IceTag), module, "IceTag", 0);
                        PyDict_SetItemString(PY_TYPE(IceTag).tp_dict, "WordClass", make_descriptor(&PY_TYPE(IceTag$WordClass)));
                    }

                    void t_IceTag::initialize(PyObject *module)
                    {
                        PyDict_SetItemString(PY_TYPE(IceTag).tp_dict, "class_", make_descriptor(IceTag::initializeClass, 1));
                        PyDict_SetItemString(PY_TYPE(IceTag).tp_dict, "wrapfn_", make_descriptor(t_IceTag::wrap_jobject));
                        PyDict_SetItemString(PY_TYPE(IceTag).tp_dict, "boxfn_", make_descriptor(boxObject));
                        IceTag::initializeClass();
                        PyDict_SetItemString(PY_TYPE(IceTag).tp_dict, "cAbbreviation", make_descriptor(IceTag::cAbbreviation));
                        PyDict_SetItemString(PY_TYPE(IceTag).tp_dict, "cAccusative", make_descriptor(IceTag::cAccusative));
                        PyDict_SetItemString(PY_TYPE(IceTag).tp_dict, "cActive", make_descriptor(IceTag::cActive));
                        PyDict_SetItemString(PY_TYPE(IceTag).tp_dict, "cAdverb", make_descriptor(IceTag::cAdverb));
                        PyDict_SetItemString(PY_TYPE(IceTag).tp_dict, "cArticle", make_descriptor(IceTag::cArticle));
                        PyDict_SetItemString(PY_TYPE(IceTag).tp_dict, "cArticlePreceding", make_descriptor(IceTag::cArticlePreceding));
                        PyDict_SetItemString(PY_TYPE(IceTag).tp_dict, "cComparative", make_descriptor(IceTag::cComparative));
                        PyDict_SetItemString(PY_TYPE(IceTag).tp_dict, "cConjunction", make_descriptor(IceTag::cConjunction));
                        PyDict_SetItemString(PY_TYPE(IceTag).tp_dict, "cConjunctionRel", make_descriptor(IceTag::cConjunctionRel));
                        PyDict_SetItemString(PY_TYPE(IceTag).tp_dict, "cDative", make_descriptor(IceTag::cDative));
                        PyDict_SetItemString(PY_TYPE(IceTag).tp_dict, "cDemPronoun", make_descriptor(IceTag::cDemPronoun));
                        PyDict_SetItemString(PY_TYPE(IceTag).tp_dict, "cExclamation", make_descriptor(IceTag::cExclamation));
                        PyDict_SetItemString(PY_TYPE(IceTag).tp_dict, "cFeminine", make_descriptor(IceTag::cFeminine));
                        PyDict_SetItemString(PY_TYPE(IceTag).tp_dict, "cFirstPerson", make_descriptor(IceTag::cFirstPerson));
                        PyDict_SetItemString(PY_TYPE(IceTag).tp_dict, "cGenderUnspec", make_descriptor(IceTag::cGenderUnspec));
                        PyDict_SetItemString(PY_TYPE(IceTag).tp_dict, "cGenitive", make_descriptor(IceTag::cGenitive));
                        PyDict_SetItemString(PY_TYPE(IceTag).tp_dict, "cImperative", make_descriptor(IceTag::cImperative));
                        PyDict_SetItemString(PY_TYPE(IceTag).tp_dict, "cIndeclineable", make_descriptor(IceTag::cIndeclineable));
                        PyDict_SetItemString(PY_TYPE(IceTag).tp_dict, "cIndefPronoun", make_descriptor(IceTag::cIndefPronoun));
                        PyDict_SetItemString(PY_TYPE(IceTag).tp_dict, "cIndicative", make_descriptor(IceTag::cIndicative));
                        PyDict_SetItemString(PY_TYPE(IceTag).tp_dict, "cInfinitive", make_descriptor(IceTag::cInfinitive));
                        PyDict_SetItemString(PY_TYPE(IceTag).tp_dict, "cInterPronoun", make_descriptor(IceTag::cInterPronoun));
                        PyDict_SetItemString(PY_TYPE(IceTag).tp_dict, "cMasculine", make_descriptor(IceTag::cMasculine));
                        PyDict_SetItemString(PY_TYPE(IceTag).tp_dict, "cMiddle", make_descriptor(IceTag::cMiddle));
                        PyDict_SetItemString(PY_TYPE(IceTag).tp_dict, "cNeuter", make_descriptor(IceTag::cNeuter));
                        PyDict_SetItemString(PY_TYPE(IceTag).tp_dict, "cNoDeclension", make_descriptor(IceTag::cNoDeclension));
                        PyDict_SetItemString(PY_TYPE(IceTag).tp_dict, "cNoMatch", make_descriptor(IceTag::cNoMatch));
                        PyDict_SetItemString(PY_TYPE(IceTag).tp_dict, "cNominative", make_descriptor(IceTag::cNominative));
                        PyDict_SetItemString(PY_TYPE(IceTag).tp_dict, "cNumberUnspec", make_descriptor(IceTag::cNumberUnspec));
                        PyDict_SetItemString(PY_TYPE(IceTag).tp_dict, "cOtherName", make_descriptor(IceTag::cOtherName));
                        PyDict_SetItemString(PY_TYPE(IceTag).tp_dict, "cPast", make_descriptor(IceTag::cPast));
                        PyDict_SetItemString(PY_TYPE(IceTag).tp_dict, "cPastParticiple", make_descriptor(IceTag::cPastParticiple));
                        PyDict_SetItemString(PY_TYPE(IceTag).tp_dict, "cPersPronoun", make_descriptor(IceTag::cPersPronoun));
                        PyDict_SetItemString(PY_TYPE(IceTag).tp_dict, "cPersonName", make_descriptor(IceTag::cPersonName));
                        PyDict_SetItemString(PY_TYPE(IceTag).tp_dict, "cPlaceName", make_descriptor(IceTag::cPlaceName));
                        PyDict_SetItemString(PY_TYPE(IceTag).tp_dict, "cPlural", make_descriptor(IceTag::cPlural));
                        PyDict_SetItemString(PY_TYPE(IceTag).tp_dict, "cPositive", make_descriptor(IceTag::cPositive));
                        PyDict_SetItemString(PY_TYPE(IceTag).tp_dict, "cPossPronoun", make_descriptor(IceTag::cPossPronoun));
                        PyDict_SetItemString(PY_TYPE(IceTag).tp_dict, "cPresParticiple", make_descriptor(IceTag::cPresParticiple));
                        PyDict_SetItemString(PY_TYPE(IceTag).tp_dict, "cPresent", make_descriptor(IceTag::cPresent));
                        PyDict_SetItemString(PY_TYPE(IceTag).tp_dict, "cReflPronoun", make_descriptor(IceTag::cReflPronoun));
                        PyDict_SetItemString(PY_TYPE(IceTag).tp_dict, "cRelPronoun", make_descriptor(IceTag::cRelPronoun));
                        PyDict_SetItemString(PY_TYPE(IceTag).tp_dict, "cSecondPerson", make_descriptor(IceTag::cSecondPerson));
                        PyDict_SetItemString(PY_TYPE(IceTag).tp_dict, "cSingular", make_descriptor(IceTag::cSingular));
                        PyDict_SetItemString(PY_TYPE(IceTag).tp_dict, "cStrong", make_descriptor(IceTag::cStrong));
                        PyDict_SetItemString(PY_TYPE(IceTag).tp_dict, "cSubjunctive", make_descriptor(IceTag::cSubjunctive));
                        PyDict_SetItemString(PY_TYPE(IceTag).tp_dict, "cSuperlative", make_descriptor(IceTag::cSuperlative));
                        PyDict_SetItemString(PY_TYPE(IceTag).tp_dict, "cSupine", make_descriptor(IceTag::cSupine));
                        PyDict_SetItemString(PY_TYPE(IceTag).tp_dict, "cThirdPerson", make_descriptor(IceTag::cThirdPerson));
                        PyDict_SetItemString(PY_TYPE(IceTag).tp_dict, "cUndef", make_descriptor(IceTag::cUndef));
                        PyDict_SetItemString(PY_TYPE(IceTag).tp_dict, "cWeak", make_descriptor(IceTag::cWeak));
                        PyDict_SetItemString(PY_TYPE(IceTag).tp_dict, "cWildCard", make_descriptor(IceTag::cWildCard));
                        PyDict_SetItemString(PY_TYPE(IceTag).tp_dict, "tagAdj", make_descriptor(j2p(*IceTag::tagAdj)));
                        PyDict_SetItemString(PY_TYPE(IceTag).tp_dict, "tagAdjectiveComparative", make_descriptor(j2p(*IceTag::tagAdjectiveComparative)));
                        PyDict_SetItemString(PY_TYPE(IceTag).tp_dict, "tagAdjectiveFeminineSingularStrongNominative", make_descriptor(j2p(*IceTag::tagAdjectiveFeminineSingularStrongNominative)));
                        PyDict_SetItemString(PY_TYPE(IceTag).tp_dict, "tagAdjectiveNeuterPluralStrongAccusative", make_descriptor(j2p(*IceTag::tagAdjectiveNeuterPluralStrongAccusative)));
                        PyDict_SetItemString(PY_TYPE(IceTag).tp_dict, "tagAdjectiveNeuterPluralStrongNominative", make_descriptor(j2p(*IceTag::tagAdjectiveNeuterPluralStrongNominative)));
                        PyDict_SetItemString(PY_TYPE(IceTag).tp_dict, "tagAdjectivesIndeclineable", make_descriptor(j2p(*IceTag::tagAdjectivesIndeclineable)));
                        PyDict_SetItemString(PY_TYPE(IceTag).tp_dict, "tagAdjectivesPlural", make_descriptor(j2p(*IceTag::tagAdjectivesPlural)));
                        PyDict_SetItemString(PY_TYPE(IceTag).tp_dict, "tagAdjectivesSingular", make_descriptor(j2p(*IceTag::tagAdjectivesSingular)));
                        PyDict_SetItemString(PY_TYPE(IceTag).tp_dict, "tagAdverb", make_descriptor(j2p(*IceTag::tagAdverb)));
                        PyDict_SetItemString(PY_TYPE(IceTag).tp_dict, "tagCardinalsPlural", make_descriptor(j2p(*IceTag::tagCardinalsPlural)));
                        PyDict_SetItemString(PY_TYPE(IceTag).tp_dict, "tagCardinalsSingular", make_descriptor(j2p(*IceTag::tagCardinalsSingular)));
                        PyDict_SetItemString(PY_TYPE(IceTag).tp_dict, "tagForeign", make_descriptor(j2p(*IceTag::tagForeign)));
                        PyDict_SetItemString(PY_TYPE(IceTag).tp_dict, "tagMostFrequentNoun", make_descriptor(j2p(*IceTag::tagMostFrequentNoun)));
                        PyDict_SetItemString(PY_TYPE(IceTag).tp_dict, "tagMostFrequentProperNoun", make_descriptor(j2p(*IceTag::tagMostFrequentProperNoun)));
                        PyDict_SetItemString(PY_TYPE(IceTag).tp_dict, "tagNoun", make_descriptor(j2p(*IceTag::tagNoun)));
                        PyDict_SetItemString(PY_TYPE(IceTag).tp_dict, "tagNounFeminineFirstThree", make_descriptor(j2p(*IceTag::tagNounFeminineFirstThree)));
                        PyDict_SetItemString(PY_TYPE(IceTag).tp_dict, "tagNounMasculinePluralNominative", make_descriptor(j2p(*IceTag::tagNounMasculinePluralNominative)));
                        PyDict_SetItemString(PY_TYPE(IceTag).tp_dict, "tagNounMasculinePluralNominativeArticle", make_descriptor(j2p(*IceTag::tagNounMasculinePluralNominativeArticle)));
                        PyDict_SetItemString(PY_TYPE(IceTag).tp_dict, "tagNounMasculineWeak", make_descriptor(j2p(*IceTag::tagNounMasculineWeak)));
                        PyDict_SetItemString(PY_TYPE(IceTag).tp_dict, "tagNounNeuter", make_descriptor(j2p(*IceTag::tagNounNeuter)));
                        PyDict_SetItemString(PY_TYPE(IceTag).tp_dict, "tagNounNeuterPlural", make_descriptor(j2p(*IceTag::tagNounNeuterPlural)));
                        PyDict_SetItemString(PY_TYPE(IceTag).tp_dict, "tagNounNeuterPluralArticle", make_descriptor(j2p(*IceTag::tagNounNeuterPluralArticle)));
                        PyDict_SetItemString(PY_TYPE(IceTag).tp_dict, "tagNounNeuterSingular", make_descriptor(j2p(*IceTag::tagNounNeuterSingular)));
                        PyDict_SetItemString(PY_TYPE(IceTag).tp_dict, "tagNounNeuterSingularArticle", make_descriptor(j2p(*IceTag::tagNounNeuterSingularArticle)));
                        PyDict_SetItemString(PY_TYPE(IceTag).tp_dict, "tagOrdinal", make_descriptor(j2p(*IceTag::tagOrdinal)));
                        PyDict_SetItemString(PY_TYPE(IceTag).tp_dict, "tagOrdinal2", make_descriptor(j2p(*IceTag::tagOrdinal2)));
                        PyDict_SetItemString(PY_TYPE(IceTag).tp_dict, "tagPercentage", make_descriptor(j2p(*IceTag::tagPercentage)));
                        PyDict_SetItemString(PY_TYPE(IceTag).tp_dict, "tagProperNoun", make_descriptor(j2p(*IceTag::tagProperNoun)));
                        PyDict_SetItemString(PY_TYPE(IceTag).tp_dict, "tagProperNounOther", make_descriptor(j2p(*IceTag::tagProperNounOther)));
                        PyDict_SetItemString(PY_TYPE(IceTag).tp_dict, "tagProperNounPlace", make_descriptor(j2p(*IceTag::tagProperNounPlace)));
                        PyDict_SetItemString(PY_TYPE(IceTag).tp_dict, "tagVerb", make_descriptor(j2p(*IceTag::tagVerb)));
                        PyDict_SetItemString(PY_TYPE(IceTag).tp_dict, "tagVerbFirstSingular", make_descriptor(j2p(*IceTag::tagVerbFirstSingular)));
                        PyDict_SetItemString(PY_TYPE(IceTag).tp_dict, "tagVerbFirstSingularPast", make_descriptor(j2p(*IceTag::tagVerbFirstSingularPast)));
                        PyDict_SetItemString(PY_TYPE(IceTag).tp_dict, "tagVerbFirstSingularSubjunctive", make_descriptor(j2p(*IceTag::tagVerbFirstSingularSubjunctive)));
                        PyDict_SetItemString(PY_TYPE(IceTag).tp_dict, "tagVerbImperative", make_descriptor(j2p(*IceTag::tagVerbImperative)));
                        PyDict_SetItemString(PY_TYPE(IceTag).tp_dict, "tagVerbInfActive", make_descriptor(j2p(*IceTag::tagVerbInfActive)));
                        PyDict_SetItemString(PY_TYPE(IceTag).tp_dict, "tagVerbInfMiddle", make_descriptor(j2p(*IceTag::tagVerbInfMiddle)));
                        PyDict_SetItemString(PY_TYPE(IceTag).tp_dict, "tagVerbMiddle", make_descriptor(j2p(*IceTag::tagVerbMiddle)));
                        PyDict_SetItemString(PY_TYPE(IceTag).tp_dict, "tagVerbPastPart", make_descriptor(j2p(*IceTag::tagVerbPastPart)));
                        PyDict_SetItemString(PY_TYPE(IceTag).tp_dict, "tagVerbPresentPart", make_descriptor(j2p(*IceTag::tagVerbPresentPart)));
                        PyDict_SetItemString(PY_TYPE(IceTag).tp_dict, "tagVerbSecondSingular", make_descriptor(j2p(*IceTag::tagVerbSecondSingular)));
                        PyDict_SetItemString(PY_TYPE(IceTag).tp_dict, "tagVerbSubjunctive", make_descriptor(j2p(*IceTag::tagVerbSubjunctive)));
                        PyDict_SetItemString(PY_TYPE(IceTag).tp_dict, "tagVerbSupine", make_descriptor(j2p(*IceTag::tagVerbSupine)));
                        PyDict_SetItemString(PY_TYPE(IceTag).tp_dict, "tagVerbSupineMiddle", make_descriptor(j2p(*IceTag::tagVerbSupineMiddle)));
                        PyDict_SetItemString(PY_TYPE(IceTag).tp_dict, "tagVerbThirdPlural", make_descriptor(j2p(*IceTag::tagVerbThirdPlural)));
                        PyDict_SetItemString(PY_TYPE(IceTag).tp_dict, "tagVerbThirdPluralMiddle", make_descriptor(j2p(*IceTag::tagVerbThirdPluralMiddle)));
                        PyDict_SetItemString(PY_TYPE(IceTag).tp_dict, "tagVerbThirdPluralSubjunctive", make_descriptor(j2p(*IceTag::tagVerbThirdPluralSubjunctive)));
                        PyDict_SetItemString(PY_TYPE(IceTag).tp_dict, "tagVerbThirdSingular", make_descriptor(j2p(*IceTag::tagVerbThirdSingular)));
                        PyDict_SetItemString(PY_TYPE(IceTag).tp_dict, "tagVerbThirdSingularPast", make_descriptor(j2p(*IceTag::tagVerbThirdSingularPast)));
                        PyDict_SetItemString(PY_TYPE(IceTag).tp_dict, "tagVerbThirdSingularSubjunctive", make_descriptor(j2p(*IceTag::tagVerbThirdSingularSubjunctive)));
                    }

                    static PyObject *t_IceTag_cast_(PyTypeObject *type, PyObject *arg)
                    {
                        if (!(arg = castCheck(arg, IceTag::initializeClass, 1)))
                            return NULL;
                        return t_IceTag::wrap_Object(IceTag(((t_IceTag *) arg)->object.this$));
                    }
                    static PyObject *t_IceTag_instance_(PyTypeObject *type, PyObject *arg)
                    {
                        if (!castCheck(arg, IceTag::initializeClass, 0))
                            Py_RETURN_FALSE;
                        Py_RETURN_TRUE;
                    }

                    static int t_IceTag_init_(t_IceTag *self, PyObject *args, PyObject *kwds)
                    {
                        switch (PyTuple_GET_SIZE(args)) {
                          case 0:
                            {
                                IceTag object((jobject) NULL);

                                INT_CALL(object = IceTag());
                                self->object = object;
                                break;
                            }
                            goto err;
                          case 1:
                            {
                                ::java::lang::String a0((jobject) NULL);
                                IceTag object((jobject) NULL);

                                if (!parseArgs(args, "s", &a0))
                                {
                                    INT_CALL(object = IceTag(a0));
                                    self->object = object;
                                    break;
                                }
                            }
                          default:
                          err:
                            PyErr_SetArgsError((PyObject *) self, "__init__", args);
                            return -1;
                        }

                        return 0;
                    }

                    static PyObject *t_IceTag_addArticle(t_IceTag *self)
                    {
                        OBJ_CALL(self->object.addArticle());
                        Py_RETURN_NONE;
                    }

                    static PyObject *t_IceTag_annotation(t_IceTag *self, PyObject *arg)
                    {
                        jboolean a0;
                        ::java::lang::String result((jobject) NULL);

                        if (!parseArg(arg, "Z", &a0))
                        {
                            OBJ_CALL(result = self->object.annotation(a0));
                            return j2p(result);
                        }

                        PyErr_SetArgsError((PyObject *) self, "annotation", arg);
                        return NULL;
                    }

                    static PyObject *t_IceTag_caseMatch(t_IceTag *self, PyObject *args)
                    {
                        switch (PyTuple_GET_SIZE(args)) {
                          case 1:
                            {
                                IceTag a0((jobject) NULL);
                                jboolean result;

                                if (!parseArgs(args, "k", IceTag::initializeClass, &a0))
                                {
                                    OBJ_CALL(result = self->object.caseMatch(a0));
                                    Py_RETURN_BOOL(result);
                                }
                            }
                            {
                                ::java::util::ArrayList a0((jobject) NULL);
                                PyTypeObject **p0;
                                jboolean result;

                                if (!parseArgs(args, "K", ::java::util::ArrayList::initializeClass, &a0, &p0, ::java::util::t_ArrayList::parameters_))
                                {
                                    OBJ_CALL(result = self->object.caseMatch(a0));
                                    Py_RETURN_BOOL(result);
                                }
                            }
                        }

                        PyErr_SetArgsError((PyObject *) self, "caseMatch", args);
                        return NULL;
                    }

                    static PyObject *t_IceTag_genderNumberCaseMatch(t_IceTag *self, PyObject *args)
                    {
                        switch (PyTuple_GET_SIZE(args)) {
                          case 1:
                            {
                                IceTag a0((jobject) NULL);
                                jboolean result;

                                if (!parseArgs(args, "k", IceTag::initializeClass, &a0))
                                {
                                    OBJ_CALL(result = self->object.genderNumberCaseMatch(a0));
                                    Py_RETURN_BOOL(result);
                                }
                            }
                            {
                                ::java::util::ArrayList a0((jobject) NULL);
                                PyTypeObject **p0;
                                jboolean result;

                                if (!parseArgs(args, "K", ::java::util::ArrayList::initializeClass, &a0, &p0, ::java::util::t_ArrayList::parameters_))
                                {
                                    OBJ_CALL(result = self->object.genderNumberCaseMatch(a0));
                                    Py_RETURN_BOOL(result);
                                }
                            }
                        }

                        PyErr_SetArgsError((PyObject *) self, "genderNumberCaseMatch", args);
                        return NULL;
                    }

                    static PyObject *t_IceTag_getCaseLetter(t_IceTag *self)
                    {
                        jchar result;
                        OBJ_CALL(result = self->object.getCaseLetter());
                        return PyUnicode_FromUnicode((Py_UNICODE *) &result, 1);
                    }

                    static PyObject *t_IceTag_getDeclension(t_IceTag *self)
                    {
                        jchar result;
                        OBJ_CALL(result = self->object.getDeclension());
                        return PyUnicode_FromUnicode((Py_UNICODE *) &result, 1);
                    }

                    static PyObject *t_IceTag_getNumberLetter(t_IceTag *self)
                    {
                        jchar result;
                        OBJ_CALL(result = self->object.getNumberLetter());
                        return PyUnicode_FromUnicode((Py_UNICODE *) &result, 1);
                    }

                    static PyObject *t_IceTag_getPersonGenderLetter(t_IceTag *self)
                    {
                        jchar result;
                        OBJ_CALL(result = self->object.getPersonGenderLetter());
                        return PyUnicode_FromUnicode((Py_UNICODE *) &result, 1);
                    }

                    static PyObject *t_IceTag_getProperNounType(t_IceTag *self)
                    {
                        jchar result;
                        OBJ_CALL(result = self->object.getProperNounType());
                        return PyUnicode_FromUnicode((Py_UNICODE *) &result, 1);
                    }

                    static PyObject *t_IceTag_getWordClass(t_IceTag *self)
                    {
                        ::java::lang::String result((jobject) NULL);
                        OBJ_CALL(result = self->object.getWordClass());
                        return j2p(result);
                    }

                    static PyObject *t_IceTag_getWordClassCode(t_IceTag *self)
                    {
                        ::is::iclt::icenlp::core::utils::IceTag$WordClass result((jobject) NULL);
                        OBJ_CALL(result = self->object.getWordClassCode());
                        return ::is::iclt::icenlp::core::utils::t_IceTag$WordClass::wrap_Object(result);
                    }

                    static PyObject *t_IceTag_hasArticle(t_IceTag *self)
                    {
                        jboolean result;
                        OBJ_CALL(result = self->object.hasArticle());
                        Py_RETURN_BOOL(result);
                    }

                    static PyObject *t_IceTag_hasGender(t_IceTag *self)
                    {
                        jboolean result;
                        OBJ_CALL(result = self->object.hasGender());
                        Py_RETURN_BOOL(result);
                    }

                    static PyObject *t_IceTag_isAdjective(t_IceTag *self)
                    {
                        jboolean result;
                        OBJ_CALL(result = self->object.isAdjective());
                        Py_RETURN_BOOL(result);
                    }

                    static PyObject *t_IceTag_isAdjectiveComparative(t_IceTag *self)
                    {
                        jboolean result;
                        OBJ_CALL(result = self->object.isAdjectiveComparative());
                        Py_RETURN_BOOL(result);
                    }

                    static PyObject *t_IceTag_isAdjectiveIndeclineable(t_IceTag *self)
                    {
                        jboolean result;
                        OBJ_CALL(result = self->object.isAdjectiveIndeclineable());
                        Py_RETURN_BOOL(result);
                    }

                    static PyObject *t_IceTag_isAdjectivePositive(t_IceTag *self)
                    {
                        jboolean result;
                        OBJ_CALL(result = self->object.isAdjectivePositive());
                        Py_RETURN_BOOL(result);
                    }

                    static PyObject *t_IceTag_isAdjectiveStrong(t_IceTag *self)
                    {
                        jboolean result;
                        OBJ_CALL(result = self->object.isAdjectiveStrong());
                        Py_RETURN_BOOL(result);
                    }

                    static PyObject *t_IceTag_isAdjectiveSuper(t_IceTag *self)
                    {
                        jboolean result;
                        OBJ_CALL(result = self->object.isAdjectiveSuper());
                        Py_RETURN_BOOL(result);
                    }

                    static PyObject *t_IceTag_isAdjectiveWeak(t_IceTag *self)
                    {
                        jboolean result;
                        OBJ_CALL(result = self->object.isAdjectiveWeak());
                        Py_RETURN_BOOL(result);
                    }

                    static PyObject *t_IceTag_isAdverb(t_IceTag *self)
                    {
                        jboolean result;
                        OBJ_CALL(result = self->object.isAdverb());
                        Py_RETURN_BOOL(result);
                    }

                    static PyObject *t_IceTag_isAdverbComparative(t_IceTag *self)
                    {
                        jboolean result;
                        OBJ_CALL(result = self->object.isAdverbComparative());
                        Py_RETURN_BOOL(result);
                    }

                    static PyObject *t_IceTag_isAdverbSuper(t_IceTag *self)
                    {
                        jboolean result;
                        OBJ_CALL(result = self->object.isAdverbSuper());
                        Py_RETURN_BOOL(result);
                    }

                    static PyObject *t_IceTag_isArticle(t_IceTag *self)
                    {
                        jboolean result;
                        OBJ_CALL(result = self->object.isArticle());
                        Py_RETURN_BOOL(result);
                    }

                    static PyObject *t_IceTag_isCase(t_IceTag *self, PyObject *arg)
                    {
                        jchar a0;
                        jboolean result;

                        if (!parseArg(arg, "C", &a0))
                        {
                            OBJ_CALL(result = self->object.isCase(a0));
                            Py_RETURN_BOOL(result);
                        }

                        PyErr_SetArgsError((PyObject *) self, "isCase", arg);
                        return NULL;
                    }

                    static PyObject *t_IceTag_isConjunction(t_IceTag *self)
                    {
                        jboolean result;
                        OBJ_CALL(result = self->object.isConjunction());
                        Py_RETURN_BOOL(result);
                    }

                    static PyObject *t_IceTag_isDeclension(t_IceTag *self, PyObject *arg)
                    {
                        jchar a0;
                        jboolean result;

                        if (!parseArg(arg, "C", &a0))
                        {
                            OBJ_CALL(result = self->object.isDeclension(a0));
                            Py_RETURN_BOOL(result);
                        }

                        PyErr_SetArgsError((PyObject *) self, "isDeclension", arg);
                        return NULL;
                    }

                    static PyObject *t_IceTag_isDemonstrativePronoun(t_IceTag *self)
                    {
                        jboolean result;
                        OBJ_CALL(result = self->object.isDemonstrativePronoun());
                        Py_RETURN_BOOL(result);
                    }

                    static PyObject *t_IceTag_isExclamation(t_IceTag *self)
                    {
                        jboolean result;
                        OBJ_CALL(result = self->object.isExclamation());
                        Py_RETURN_BOOL(result);
                    }

                    static PyObject *t_IceTag_isForeign(t_IceTag *self)
                    {
                        jboolean result;
                        OBJ_CALL(result = self->object.isForeign());
                        Py_RETURN_BOOL(result);
                    }

                    static PyObject *t_IceTag_isGender(t_IceTag *self, PyObject *arg)
                    {
                        jchar a0;
                        jboolean result;

                        if (!parseArg(arg, "C", &a0))
                        {
                            OBJ_CALL(result = self->object.isGender(a0));
                            Py_RETURN_BOOL(result);
                        }

                        PyErr_SetArgsError((PyObject *) self, "isGender", arg);
                        return NULL;
                    }

                    static PyObject *t_IceTag_isIndefinitePronoun(t_IceTag *self)
                    {
                        jboolean result;
                        OBJ_CALL(result = self->object.isIndefinitePronoun());
                        Py_RETURN_BOOL(result);
                    }

                    static PyObject *t_IceTag_isInfinitive(t_IceTag *self)
                    {
                        jboolean result;
                        OBJ_CALL(result = self->object.isInfinitive());
                        Py_RETURN_BOOL(result);
                    }

                    static PyObject *t_IceTag_isInterrogativePronoun(t_IceTag *self)
                    {
                        jboolean result;
                        OBJ_CALL(result = self->object.isInterrogativePronoun());
                        Py_RETURN_BOOL(result);
                    }

                    static PyObject *t_IceTag_isNominal(t_IceTag *self)
                    {
                        jboolean result;
                        OBJ_CALL(result = self->object.isNominal());
                        Py_RETURN_BOOL(result);
                    }

                    static PyObject *t_IceTag_isNoun(t_IceTag *self)
                    {
                        jboolean result;
                        OBJ_CALL(result = self->object.isNoun());
                        Py_RETURN_BOOL(result);
                    }

                    static PyObject *t_IceTag_isNumber(t_IceTag *self, PyObject *arg)
                    {
                        jchar a0;
                        jboolean result;

                        if (!parseArg(arg, "C", &a0))
                        {
                            OBJ_CALL(result = self->object.isNumber(a0));
                            Py_RETURN_BOOL(result);
                        }

                        PyErr_SetArgsError((PyObject *) self, "isNumber", arg);
                        return NULL;
                    }

                    static PyObject *t_IceTag_isNumeral(t_IceTag *self)
                    {
                        jboolean result;
                        OBJ_CALL(result = self->object.isNumeral());
                        Py_RETURN_BOOL(result);
                    }

                    static PyObject *t_IceTag_isNumeralNominal(t_IceTag *self)
                    {
                        jboolean result;
                        OBJ_CALL(result = self->object.isNumeralNominal());
                        Py_RETURN_BOOL(result);
                    }

                    static PyObject *t_IceTag_isNumeralOrdinal(t_IceTag *self)
                    {
                        jboolean result;
                        OBJ_CALL(result = self->object.isNumeralOrdinal());
                        Py_RETURN_BOOL(result);
                    }

                    static PyObject *t_IceTag_isPersonalPronoun(t_IceTag *self)
                    {
                        jboolean result;
                        OBJ_CALL(result = self->object.isPersonalPronoun());
                        Py_RETURN_BOOL(result);
                    }

                    static PyObject *t_IceTag_isPossessivePronoun(t_IceTag *self)
                    {
                        jboolean result;
                        OBJ_CALL(result = self->object.isPossessivePronoun());
                        Py_RETURN_BOOL(result);
                    }

                    static PyObject *t_IceTag_isPreposition(t_IceTag *self)
                    {
                        jboolean result;
                        OBJ_CALL(result = self->object.isPreposition());
                        Py_RETURN_BOOL(result);
                    }

                    static PyObject *t_IceTag_isPronoun(t_IceTag *self)
                    {
                        jboolean result;
                        OBJ_CALL(result = self->object.isPronoun());
                        Py_RETURN_BOOL(result);
                    }

                    static PyObject *t_IceTag_isProperNoun(t_IceTag *self)
                    {
                        jboolean result;
                        OBJ_CALL(result = self->object.isProperNoun());
                        Py_RETURN_BOOL(result);
                    }

                    static PyObject *t_IceTag_isProperNounType(t_IceTag *self, PyObject *arg)
                    {
                        jchar a0;
                        jboolean result;

                        if (!parseArg(arg, "C", &a0))
                        {
                            OBJ_CALL(result = self->object.isProperNounType(a0));
                            Py_RETURN_BOOL(result);
                        }

                        PyErr_SetArgsError((PyObject *) self, "isProperNounType", arg);
                        return NULL;
                    }

                    static PyObject *t_IceTag_isReflexivePronoun(t_IceTag *self)
                    {
                        jboolean result;
                        OBJ_CALL(result = self->object.isReflexivePronoun());
                        Py_RETURN_BOOL(result);
                    }

                    static PyObject *t_IceTag_isRelativeConjunction(t_IceTag *self)
                    {
                        jboolean result;
                        OBJ_CALL(result = self->object.isRelativeConjunction());
                        Py_RETURN_BOOL(result);
                    }

                    static PyObject *t_IceTag_isRelativePronoun(t_IceTag *self)
                    {
                        jboolean result;
                        OBJ_CALL(result = self->object.isRelativePronoun());
                        Py_RETURN_BOOL(result);
                    }

                    static PyObject *t_IceTag_isVerb(t_IceTag *self)
                    {
                        jboolean result;
                        OBJ_CALL(result = self->object.isVerb());
                        Py_RETURN_BOOL(result);
                    }

                    static PyObject *t_IceTag_isVerbActiveForm(t_IceTag *self)
                    {
                        jboolean result;
                        OBJ_CALL(result = self->object.isVerbActiveForm());
                        Py_RETURN_BOOL(result);
                    }

                    static PyObject *t_IceTag_isVerbAny(t_IceTag *self)
                    {
                        jboolean result;
                        OBJ_CALL(result = self->object.isVerbAny());
                        Py_RETURN_BOOL(result);
                    }

                    static PyObject *t_IceTag_isVerbAuxiliary(t_IceTag *self)
                    {
                        jboolean result;
                        OBJ_CALL(result = self->object.isVerbAuxiliary());
                        Py_RETURN_BOOL(result);
                    }

                    static PyObject *t_IceTag_isVerbBe(t_IceTag *self)
                    {
                        jboolean result;
                        OBJ_CALL(result = self->object.isVerbBe());
                        Py_RETURN_BOOL(result);
                    }

                    static PyObject *t_IceTag_isVerbCaseMarking(t_IceTag *self)
                    {
                        jboolean result;
                        OBJ_CALL(result = self->object.isVerbCaseMarking());
                        Py_RETURN_BOOL(result);
                    }

                    static PyObject *t_IceTag_isVerbImperative(t_IceTag *self)
                    {
                        jboolean result;
                        OBJ_CALL(result = self->object.isVerbImperative());
                        Py_RETURN_BOOL(result);
                    }

                    static PyObject *t_IceTag_isVerbIndicativeForm(t_IceTag *self)
                    {
                        jboolean result;
                        OBJ_CALL(result = self->object.isVerbIndicativeForm());
                        Py_RETURN_BOOL(result);
                    }

                    static PyObject *t_IceTag_isVerbInfinitive(t_IceTag *self)
                    {
                        jboolean result;
                        OBJ_CALL(result = self->object.isVerbInfinitive());
                        Py_RETURN_BOOL(result);
                    }

                    static PyObject *t_IceTag_isVerbMarking(t_IceTag *self)
                    {
                        jboolean result;
                        OBJ_CALL(result = self->object.isVerbMarking());
                        Py_RETURN_BOOL(result);
                    }

                    static PyObject *t_IceTag_isVerbMiddleForm(t_IceTag *self)
                    {
                        jboolean result;
                        OBJ_CALL(result = self->object.isVerbMiddleForm());
                        Py_RETURN_BOOL(result);
                    }

                    static PyObject *t_IceTag_isVerbPastParticiple(t_IceTag *self)
                    {
                        jboolean result;
                        OBJ_CALL(result = self->object.isVerbPastParticiple());
                        Py_RETURN_BOOL(result);
                    }

                    static PyObject *t_IceTag_isVerbPresentPart(t_IceTag *self)
                    {
                        jboolean result;
                        OBJ_CALL(result = self->object.isVerbPresentPart());
                        Py_RETURN_BOOL(result);
                    }

                    static PyObject *t_IceTag_isVerbSpecialAuxiliary(t_IceTag *self)
                    {
                        jboolean result;
                        OBJ_CALL(result = self->object.isVerbSpecialAuxiliary());
                        Py_RETURN_BOOL(result);
                    }

                    static PyObject *t_IceTag_isVerbSpecialInf(t_IceTag *self)
                    {
                        jboolean result;
                        OBJ_CALL(result = self->object.isVerbSpecialInf());
                        Py_RETURN_BOOL(result);
                    }

                    static PyObject *t_IceTag_isVerbSubjunctiveForm(t_IceTag *self)
                    {
                        jboolean result;
                        OBJ_CALL(result = self->object.isVerbSubjunctiveForm());
                        Py_RETURN_BOOL(result);
                    }

                    static PyObject *t_IceTag_isVerbSupine(t_IceTag *self)
                    {
                        jboolean result;
                        OBJ_CALL(result = self->object.isVerbSupine());
                        Py_RETURN_BOOL(result);
                    }

                    static PyObject *t_IceTag_isWordClass(t_IceTag *self, PyObject *arg)
                    {
                        ::is::iclt::icenlp::core::utils::IceTag$WordClass a0((jobject) NULL);
                        jboolean result;

                        if (!parseArg(arg, "k", ::is::iclt::icenlp::core::utils::IceTag$WordClass::initializeClass, &a0))
                        {
                            OBJ_CALL(result = self->object.isWordClass(a0));
                            Py_RETURN_BOOL(result);
                        }

                        PyErr_SetArgsError((PyObject *) self, "isWordClass", arg);
                        return NULL;
                    }

                    static PyObject *t_IceTag_numberCaseMatch(t_IceTag *self, PyObject *args)
                    {
                        switch (PyTuple_GET_SIZE(args)) {
                          case 1:
                            {
                                ::java::util::ArrayList a0((jobject) NULL);
                                PyTypeObject **p0;
                                jboolean result;

                                if (!parseArgs(args, "K", ::java::util::ArrayList::initializeClass, &a0, &p0, ::java::util::t_ArrayList::parameters_))
                                {
                                    OBJ_CALL(result = self->object.numberCaseMatch(a0));
                                    Py_RETURN_BOOL(result);
                                }
                            }
                            {
                                IceTag a0((jobject) NULL);
                                jboolean result;

                                if (!parseArgs(args, "k", IceTag::initializeClass, &a0))
                                {
                                    OBJ_CALL(result = self->object.numberCaseMatch(a0));
                                    Py_RETURN_BOOL(result);
                                }
                            }
                        }

                        PyErr_SetArgsError((PyObject *) self, "numberCaseMatch", args);
                        return NULL;
                    }

                    static PyObject *t_IceTag_numberMatch(t_IceTag *self, PyObject *args)
                    {
                        switch (PyTuple_GET_SIZE(args)) {
                          case 1:
                            {
                                IceTag a0((jobject) NULL);
                                jboolean result;

                                if (!parseArgs(args, "k", IceTag::initializeClass, &a0))
                                {
                                    OBJ_CALL(result = self->object.numberMatch(a0));
                                    Py_RETURN_BOOL(result);
                                }
                            }
                            {
                                ::java::util::ArrayList a0((jobject) NULL);
                                PyTypeObject **p0;
                                jboolean result;

                                if (!parseArgs(args, "K", ::java::util::ArrayList::initializeClass, &a0, &p0, ::java::util::t_ArrayList::parameters_))
                                {
                                    OBJ_CALL(result = self->object.numberMatch(a0));
                                    Py_RETURN_BOOL(result);
                                }
                            }
                        }

                        PyErr_SetArgsError((PyObject *) self, "numberMatch", args);
                        return NULL;
                    }

                    static PyObject *t_IceTag_personGenderMatch(t_IceTag *self, PyObject *args)
                    {
                        switch (PyTuple_GET_SIZE(args)) {
                          case 1:
                            {
                                ::java::util::ArrayList a0((jobject) NULL);
                                PyTypeObject **p0;
                                jboolean result;

                                if (!parseArgs(args, "K", ::java::util::ArrayList::initializeClass, &a0, &p0, ::java::util::t_ArrayList::parameters_))
                                {
                                    OBJ_CALL(result = self->object.personGenderMatch(a0));
                                    Py_RETURN_BOOL(result);
                                }
                            }
                            {
                                IceTag a0((jobject) NULL);
                                jboolean result;

                                if (!parseArgs(args, "k", IceTag::initializeClass, &a0))
                                {
                                    OBJ_CALL(result = self->object.personGenderMatch(a0));
                                    Py_RETURN_BOOL(result);
                                }
                            }
                        }

                        PyErr_SetArgsError((PyObject *) self, "personGenderMatch", args);
                        return NULL;
                    }

                    static PyObject *t_IceTag_personGenderNumberMatch(t_IceTag *self, PyObject *args)
                    {
                        switch (PyTuple_GET_SIZE(args)) {
                          case 1:
                            {
                                ::java::util::ArrayList a0((jobject) NULL);
                                PyTypeObject **p0;
                                jboolean result;

                                if (!parseArgs(args, "K", ::java::util::ArrayList::initializeClass, &a0, &p0, ::java::util::t_ArrayList::parameters_))
                                {
                                    OBJ_CALL(result = self->object.personGenderNumberMatch(a0));
                                    Py_RETURN_BOOL(result);
                                }
                            }
                            {
                                IceTag a0((jobject) NULL);
                                jboolean result;

                                if (!parseArgs(args, "k", IceTag::initializeClass, &a0))
                                {
                                    OBJ_CALL(result = self->object.personGenderNumberMatch(a0));
                                    Py_RETURN_BOOL(result);
                                }
                            }
                        }

                        PyErr_SetArgsError((PyObject *) self, "personGenderNumberMatch", args);
                        return NULL;
                    }

                    static PyObject *t_IceTag_removeArticle(t_IceTag *self)
                    {
                        OBJ_CALL(self->object.removeArticle());
                        Py_RETURN_NONE;
                    }

                    static PyObject *t_IceTag_setCase(t_IceTag *self, PyObject *arg)
                    {
                        jchar a0;

                        if (!parseArg(arg, "C", &a0))
                        {
                            OBJ_CALL(self->object.setCase(a0));
                            Py_RETURN_NONE;
                        }

                        PyErr_SetArgsError((PyObject *) self, "setCase", arg);
                        return NULL;
                    }

                    static PyObject *t_IceTag_setDeclension(t_IceTag *self, PyObject *arg)
                    {
                        jchar a0;

                        if (!parseArg(arg, "C", &a0))
                        {
                            OBJ_CALL(self->object.setDeclension(a0));
                            Py_RETURN_NONE;
                        }

                        PyErr_SetArgsError((PyObject *) self, "setDeclension", arg);
                        return NULL;
                    }

                    static PyObject *t_IceTag_setDegree(t_IceTag *self, PyObject *arg)
                    {
                        jchar a0;

                        if (!parseArg(arg, "C", &a0))
                        {
                            OBJ_CALL(self->object.setDegree(a0));
                            Py_RETURN_NONE;
                        }

                        PyErr_SetArgsError((PyObject *) self, "setDegree", arg);
                        return NULL;
                    }

                    static PyObject *t_IceTag_setGenderNumberCase(t_IceTag *self, PyObject *args)
                    {
                        jchar a0;
                        jchar a1;
                        jchar a2;

                        if (!parseArgs(args, "CCC", &a0, &a1, &a2))
                        {
                            OBJ_CALL(self->object.setGenderNumberCase(a0, a1, a2));
                            Py_RETURN_NONE;
                        }

                        PyErr_SetArgsError((PyObject *) self, "setGenderNumberCase", args);
                        return NULL;
                    }

                    static PyObject *t_IceTag_setNumber(t_IceTag *self, PyObject *arg)
                    {
                        jchar a0;

                        if (!parseArg(arg, "C", &a0))
                        {
                            OBJ_CALL(self->object.setNumber(a0));
                            Py_RETURN_NONE;
                        }

                        PyErr_SetArgsError((PyObject *) self, "setNumber", arg);
                        return NULL;
                    }

                    static PyObject *t_IceTag_setPersonGender(t_IceTag *self, PyObject *arg)
                    {
                        jchar a0;

                        if (!parseArg(arg, "C", &a0))
                        {
                            OBJ_CALL(self->object.setPersonGender(a0));
                            Py_RETURN_NONE;
                        }

                        PyErr_SetArgsError((PyObject *) self, "setPersonGender", arg);
                        return NULL;
                    }

                    static PyObject *t_IceTag_setPersonName(t_IceTag *self)
                    {
                        OBJ_CALL(self->object.setPersonName());
                        Py_RETURN_NONE;
                    }

                    static PyObject *t_IceTag_setProperNameType(t_IceTag *self, PyObject *arg)
                    {
                        jchar a0;

                        if (!parseArg(arg, "C", &a0))
                        {
                            OBJ_CALL(self->object.setProperNameType(a0));
                            Py_RETURN_NONE;
                        }

                        PyErr_SetArgsError((PyObject *) self, "setProperNameType", arg);
                        return NULL;
                    }

                    static PyObject *t_IceTag_setTense(t_IceTag *self, PyObject *arg)
                    {
                        jchar a0;

                        if (!parseArg(arg, "C", &a0))
                        {
                            OBJ_CALL(self->object.setTense(a0));
                            Py_RETURN_NONE;
                        }

                        PyErr_SetArgsError((PyObject *) self, "setTense", arg);
                        return NULL;
                    }

                    static PyObject *t_IceTag_setVoice(t_IceTag *self, PyObject *arg)
                    {
                        jchar a0;

                        if (!parseArg(arg, "C", &a0))
                        {
                            OBJ_CALL(self->object.setVoice(a0));
                            Py_RETURN_NONE;
                        }

                        PyErr_SetArgsError((PyObject *) self, "setVoice", arg);
                        return NULL;
                    }

                    static PyObject *t_IceTag_get__adjective(t_IceTag *self, void *data)
                    {
                        jboolean value;
                        OBJ_CALL(value = self->object.isAdjective());
                        Py_RETURN_BOOL(value);
                    }

                    static PyObject *t_IceTag_get__adjectiveComparative(t_IceTag *self, void *data)
                    {
                        jboolean value;
                        OBJ_CALL(value = self->object.isAdjectiveComparative());
                        Py_RETURN_BOOL(value);
                    }

                    static PyObject *t_IceTag_get__adjectiveIndeclineable(t_IceTag *self, void *data)
                    {
                        jboolean value;
                        OBJ_CALL(value = self->object.isAdjectiveIndeclineable());
                        Py_RETURN_BOOL(value);
                    }

                    static PyObject *t_IceTag_get__adjectivePositive(t_IceTag *self, void *data)
                    {
                        jboolean value;
                        OBJ_CALL(value = self->object.isAdjectivePositive());
                        Py_RETURN_BOOL(value);
                    }

                    static PyObject *t_IceTag_get__adjectiveStrong(t_IceTag *self, void *data)
                    {
                        jboolean value;
                        OBJ_CALL(value = self->object.isAdjectiveStrong());
                        Py_RETURN_BOOL(value);
                    }

                    static PyObject *t_IceTag_get__adjectiveSuper(t_IceTag *self, void *data)
                    {
                        jboolean value;
                        OBJ_CALL(value = self->object.isAdjectiveSuper());
                        Py_RETURN_BOOL(value);
                    }

                    static PyObject *t_IceTag_get__adjectiveWeak(t_IceTag *self, void *data)
                    {
                        jboolean value;
                        OBJ_CALL(value = self->object.isAdjectiveWeak());
                        Py_RETURN_BOOL(value);
                    }

                    static PyObject *t_IceTag_get__adverb(t_IceTag *self, void *data)
                    {
                        jboolean value;
                        OBJ_CALL(value = self->object.isAdverb());
                        Py_RETURN_BOOL(value);
                    }

                    static PyObject *t_IceTag_get__adverbComparative(t_IceTag *self, void *data)
                    {
                        jboolean value;
                        OBJ_CALL(value = self->object.isAdverbComparative());
                        Py_RETURN_BOOL(value);
                    }

                    static PyObject *t_IceTag_get__adverbSuper(t_IceTag *self, void *data)
                    {
                        jboolean value;
                        OBJ_CALL(value = self->object.isAdverbSuper());
                        Py_RETURN_BOOL(value);
                    }

                    static PyObject *t_IceTag_get__article(t_IceTag *self, void *data)
                    {
                        jboolean value;
                        OBJ_CALL(value = self->object.isArticle());
                        Py_RETURN_BOOL(value);
                    }

                    static int t_IceTag_set__case(t_IceTag *self, PyObject *arg, void *data)
                    {
                        {
                            jchar value;
                            if (!parseArg(arg, "C", &value))
                            {
                                INT_CALL(self->object.setCase(value));
                                return 0;
                            }
                        }
                        PyErr_SetArgsError((PyObject *) self, "case", arg);
                        return -1;
                    }

                    static PyObject *t_IceTag_get__caseLetter(t_IceTag *self, void *data)
                    {
                        jchar value;
                        OBJ_CALL(value = self->object.getCaseLetter());
                        return PyUnicode_FromUnicode((Py_UNICODE *) &value, 1);
                    }

                    static PyObject *t_IceTag_get__conjunction(t_IceTag *self, void *data)
                    {
                        jboolean value;
                        OBJ_CALL(value = self->object.isConjunction());
                        Py_RETURN_BOOL(value);
                    }

                    static PyObject *t_IceTag_get__declension(t_IceTag *self, void *data)
                    {
                        jchar value;
                        OBJ_CALL(value = self->object.getDeclension());
                        return PyUnicode_FromUnicode((Py_UNICODE *) &value, 1);
                    }
                    static int t_IceTag_set__declension(t_IceTag *self, PyObject *arg, void *data)
                    {
                        {
                            jchar value;
                            if (!parseArg(arg, "C", &value))
                            {
                                INT_CALL(self->object.setDeclension(value));
                                return 0;
                            }
                        }
                        PyErr_SetArgsError((PyObject *) self, "declension", arg);
                        return -1;
                    }

                    static int t_IceTag_set__degree(t_IceTag *self, PyObject *arg, void *data)
                    {
                        {
                            jchar value;
                            if (!parseArg(arg, "C", &value))
                            {
                                INT_CALL(self->object.setDegree(value));
                                return 0;
                            }
                        }
                        PyErr_SetArgsError((PyObject *) self, "degree", arg);
                        return -1;
                    }

                    static PyObject *t_IceTag_get__demonstrativePronoun(t_IceTag *self, void *data)
                    {
                        jboolean value;
                        OBJ_CALL(value = self->object.isDemonstrativePronoun());
                        Py_RETURN_BOOL(value);
                    }

                    static PyObject *t_IceTag_get__exclamation(t_IceTag *self, void *data)
                    {
                        jboolean value;
                        OBJ_CALL(value = self->object.isExclamation());
                        Py_RETURN_BOOL(value);
                    }

                    static PyObject *t_IceTag_get__foreign(t_IceTag *self, void *data)
                    {
                        jboolean value;
                        OBJ_CALL(value = self->object.isForeign());
                        Py_RETURN_BOOL(value);
                    }

                    static PyObject *t_IceTag_get__indefinitePronoun(t_IceTag *self, void *data)
                    {
                        jboolean value;
                        OBJ_CALL(value = self->object.isIndefinitePronoun());
                        Py_RETURN_BOOL(value);
                    }

                    static PyObject *t_IceTag_get__infinitive(t_IceTag *self, void *data)
                    {
                        jboolean value;
                        OBJ_CALL(value = self->object.isInfinitive());
                        Py_RETURN_BOOL(value);
                    }

                    static PyObject *t_IceTag_get__interrogativePronoun(t_IceTag *self, void *data)
                    {
                        jboolean value;
                        OBJ_CALL(value = self->object.isInterrogativePronoun());
                        Py_RETURN_BOOL(value);
                    }

                    static PyObject *t_IceTag_get__nominal(t_IceTag *self, void *data)
                    {
                        jboolean value;
                        OBJ_CALL(value = self->object.isNominal());
                        Py_RETURN_BOOL(value);
                    }

                    static PyObject *t_IceTag_get__noun(t_IceTag *self, void *data)
                    {
                        jboolean value;
                        OBJ_CALL(value = self->object.isNoun());
                        Py_RETURN_BOOL(value);
                    }

                    static int t_IceTag_set__number(t_IceTag *self, PyObject *arg, void *data)
                    {
                        {
                            jchar value;
                            if (!parseArg(arg, "C", &value))
                            {
                                INT_CALL(self->object.setNumber(value));
                                return 0;
                            }
                        }
                        PyErr_SetArgsError((PyObject *) self, "number", arg);
                        return -1;
                    }

                    static PyObject *t_IceTag_get__numberLetter(t_IceTag *self, void *data)
                    {
                        jchar value;
                        OBJ_CALL(value = self->object.getNumberLetter());
                        return PyUnicode_FromUnicode((Py_UNICODE *) &value, 1);
                    }

                    static PyObject *t_IceTag_get__numeral(t_IceTag *self, void *data)
                    {
                        jboolean value;
                        OBJ_CALL(value = self->object.isNumeral());
                        Py_RETURN_BOOL(value);
                    }

                    static PyObject *t_IceTag_get__numeralNominal(t_IceTag *self, void *data)
                    {
                        jboolean value;
                        OBJ_CALL(value = self->object.isNumeralNominal());
                        Py_RETURN_BOOL(value);
                    }

                    static PyObject *t_IceTag_get__numeralOrdinal(t_IceTag *self, void *data)
                    {
                        jboolean value;
                        OBJ_CALL(value = self->object.isNumeralOrdinal());
                        Py_RETURN_BOOL(value);
                    }

                    static int t_IceTag_set__personGender(t_IceTag *self, PyObject *arg, void *data)
                    {
                        {
                            jchar value;
                            if (!parseArg(arg, "C", &value))
                            {
                                INT_CALL(self->object.setPersonGender(value));
                                return 0;
                            }
                        }
                        PyErr_SetArgsError((PyObject *) self, "personGender", arg);
                        return -1;
                    }

                    static PyObject *t_IceTag_get__personGenderLetter(t_IceTag *self, void *data)
                    {
                        jchar value;
                        OBJ_CALL(value = self->object.getPersonGenderLetter());
                        return PyUnicode_FromUnicode((Py_UNICODE *) &value, 1);
                    }

                    static PyObject *t_IceTag_get__personalPronoun(t_IceTag *self, void *data)
                    {
                        jboolean value;
                        OBJ_CALL(value = self->object.isPersonalPronoun());
                        Py_RETURN_BOOL(value);
                    }

                    static PyObject *t_IceTag_get__possessivePronoun(t_IceTag *self, void *data)
                    {
                        jboolean value;
                        OBJ_CALL(value = self->object.isPossessivePronoun());
                        Py_RETURN_BOOL(value);
                    }

                    static PyObject *t_IceTag_get__preposition(t_IceTag *self, void *data)
                    {
                        jboolean value;
                        OBJ_CALL(value = self->object.isPreposition());
                        Py_RETURN_BOOL(value);
                    }

                    static PyObject *t_IceTag_get__pronoun(t_IceTag *self, void *data)
                    {
                        jboolean value;
                        OBJ_CALL(value = self->object.isPronoun());
                        Py_RETURN_BOOL(value);
                    }

                    static int t_IceTag_set__properNameType(t_IceTag *self, PyObject *arg, void *data)
                    {
                        {
                            jchar value;
                            if (!parseArg(arg, "C", &value))
                            {
                                INT_CALL(self->object.setProperNameType(value));
                                return 0;
                            }
                        }
                        PyErr_SetArgsError((PyObject *) self, "properNameType", arg);
                        return -1;
                    }

                    static PyObject *t_IceTag_get__properNoun(t_IceTag *self, void *data)
                    {
                        jboolean value;
                        OBJ_CALL(value = self->object.isProperNoun());
                        Py_RETURN_BOOL(value);
                    }

                    static PyObject *t_IceTag_get__properNounType(t_IceTag *self, void *data)
                    {
                        jchar value;
                        OBJ_CALL(value = self->object.getProperNounType());
                        return PyUnicode_FromUnicode((Py_UNICODE *) &value, 1);
                    }

                    static PyObject *t_IceTag_get__reflexivePronoun(t_IceTag *self, void *data)
                    {
                        jboolean value;
                        OBJ_CALL(value = self->object.isReflexivePronoun());
                        Py_RETURN_BOOL(value);
                    }

                    static PyObject *t_IceTag_get__relativeConjunction(t_IceTag *self, void *data)
                    {
                        jboolean value;
                        OBJ_CALL(value = self->object.isRelativeConjunction());
                        Py_RETURN_BOOL(value);
                    }

                    static PyObject *t_IceTag_get__relativePronoun(t_IceTag *self, void *data)
                    {
                        jboolean value;
                        OBJ_CALL(value = self->object.isRelativePronoun());
                        Py_RETURN_BOOL(value);
                    }

                    static int t_IceTag_set__tense(t_IceTag *self, PyObject *arg, void *data)
                    {
                        {
                            jchar value;
                            if (!parseArg(arg, "C", &value))
                            {
                                INT_CALL(self->object.setTense(value));
                                return 0;
                            }
                        }
                        PyErr_SetArgsError((PyObject *) self, "tense", arg);
                        return -1;
                    }

                    static PyObject *t_IceTag_get__verb(t_IceTag *self, void *data)
                    {
                        jboolean value;
                        OBJ_CALL(value = self->object.isVerb());
                        Py_RETURN_BOOL(value);
                    }

                    static PyObject *t_IceTag_get__verbActiveForm(t_IceTag *self, void *data)
                    {
                        jboolean value;
                        OBJ_CALL(value = self->object.isVerbActiveForm());
                        Py_RETURN_BOOL(value);
                    }

                    static PyObject *t_IceTag_get__verbAny(t_IceTag *self, void *data)
                    {
                        jboolean value;
                        OBJ_CALL(value = self->object.isVerbAny());
                        Py_RETURN_BOOL(value);
                    }

                    static PyObject *t_IceTag_get__verbAuxiliary(t_IceTag *self, void *data)
                    {
                        jboolean value;
                        OBJ_CALL(value = self->object.isVerbAuxiliary());
                        Py_RETURN_BOOL(value);
                    }

                    static PyObject *t_IceTag_get__verbBe(t_IceTag *self, void *data)
                    {
                        jboolean value;
                        OBJ_CALL(value = self->object.isVerbBe());
                        Py_RETURN_BOOL(value);
                    }

                    static PyObject *t_IceTag_get__verbCaseMarking(t_IceTag *self, void *data)
                    {
                        jboolean value;
                        OBJ_CALL(value = self->object.isVerbCaseMarking());
                        Py_RETURN_BOOL(value);
                    }

                    static PyObject *t_IceTag_get__verbImperative(t_IceTag *self, void *data)
                    {
                        jboolean value;
                        OBJ_CALL(value = self->object.isVerbImperative());
                        Py_RETURN_BOOL(value);
                    }

                    static PyObject *t_IceTag_get__verbIndicativeForm(t_IceTag *self, void *data)
                    {
                        jboolean value;
                        OBJ_CALL(value = self->object.isVerbIndicativeForm());
                        Py_RETURN_BOOL(value);
                    }

                    static PyObject *t_IceTag_get__verbInfinitive(t_IceTag *self, void *data)
                    {
                        jboolean value;
                        OBJ_CALL(value = self->object.isVerbInfinitive());
                        Py_RETURN_BOOL(value);
                    }

                    static PyObject *t_IceTag_get__verbMarking(t_IceTag *self, void *data)
                    {
                        jboolean value;
                        OBJ_CALL(value = self->object.isVerbMarking());
                        Py_RETURN_BOOL(value);
                    }

                    static PyObject *t_IceTag_get__verbMiddleForm(t_IceTag *self, void *data)
                    {
                        jboolean value;
                        OBJ_CALL(value = self->object.isVerbMiddleForm());
                        Py_RETURN_BOOL(value);
                    }

                    static PyObject *t_IceTag_get__verbPastParticiple(t_IceTag *self, void *data)
                    {
                        jboolean value;
                        OBJ_CALL(value = self->object.isVerbPastParticiple());
                        Py_RETURN_BOOL(value);
                    }

                    static PyObject *t_IceTag_get__verbPresentPart(t_IceTag *self, void *data)
                    {
                        jboolean value;
                        OBJ_CALL(value = self->object.isVerbPresentPart());
                        Py_RETURN_BOOL(value);
                    }

                    static PyObject *t_IceTag_get__verbSpecialAuxiliary(t_IceTag *self, void *data)
                    {
                        jboolean value;
                        OBJ_CALL(value = self->object.isVerbSpecialAuxiliary());
                        Py_RETURN_BOOL(value);
                    }

                    static PyObject *t_IceTag_get__verbSpecialInf(t_IceTag *self, void *data)
                    {
                        jboolean value;
                        OBJ_CALL(value = self->object.isVerbSpecialInf());
                        Py_RETURN_BOOL(value);
                    }

                    static PyObject *t_IceTag_get__verbSubjunctiveForm(t_IceTag *self, void *data)
                    {
                        jboolean value;
                        OBJ_CALL(value = self->object.isVerbSubjunctiveForm());
                        Py_RETURN_BOOL(value);
                    }

                    static PyObject *t_IceTag_get__verbSupine(t_IceTag *self, void *data)
                    {
                        jboolean value;
                        OBJ_CALL(value = self->object.isVerbSupine());
                        Py_RETURN_BOOL(value);
                    }

                    static int t_IceTag_set__voice(t_IceTag *self, PyObject *arg, void *data)
                    {
                        {
                            jchar value;
                            if (!parseArg(arg, "C", &value))
                            {
                                INT_CALL(self->object.setVoice(value));
                                return 0;
                            }
                        }
                        PyErr_SetArgsError((PyObject *) self, "voice", arg);
                        return -1;
                    }

                    static PyObject *t_IceTag_get__wordClass(t_IceTag *self, void *data)
                    {
                        ::java::lang::String value((jobject) NULL);
                        OBJ_CALL(value = self->object.getWordClass());
                        return j2p(value);
                    }

                    static PyObject *t_IceTag_get__wordClassCode(t_IceTag *self, void *data)
                    {
                        ::is::iclt::icenlp::core::utils::IceTag$WordClass value((jobject) NULL);
                        OBJ_CALL(value = self->object.getWordClassCode());
                        return ::is::iclt::icenlp::core::utils::t_IceTag$WordClass::wrap_Object(value);
                    }
                }
            }
        }
    }
}
#include <jni.h>
#include "JCCEnv.h"
#include "is/iclt/icenlp/core/iceparser/Phrase_MWEP2.h"
#include "java/io/IOException.h"
#include "java/io/Reader.h"
#include "java/io/Writer.h"
#include "java/lang/Class.h"
#include "java/io/InputStream.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace is {
    namespace iclt {
        namespace icenlp {
            namespace core {
                namespace iceparser {

                    ::java::lang::Class *Phrase_MWEP2::class$ = NULL;
                    jmethodID *Phrase_MWEP2::mids$ = NULL;
                    jint Phrase_MWEP2::YYEOF = (jint) 0;
                    jint Phrase_MWEP2::YYINITIAL = (jint) 0;

                    jclass Phrase_MWEP2::initializeClass()
                    {
                        if (!class$)
                        {

                            jclass cls = (jclass) env->findClass("is/iclt/icenlp/core/iceparser/Phrase_MWEP2");

                            mids$ = new jmethodID[max_mid];
                            mids$[mid_init$_cf2e3c10] = env->getMethodID(cls, "<init>", "(Ljava/io/Reader;)V");
                            mids$[mid_init$_be2e4f90] = env->getMethodID(cls, "<init>", "(Ljava/io/InputStream;)V");
                            mids$[mid_main_4dd4540c] = env->getStaticMethodID(cls, "main", "([Ljava/lang/String;)V");
                            mids$[mid_parse_5bcd5850] = env->getMethodID(cls, "parse", "(Ljava/io/Writer;)V");
                            mids$[mid_yybegin_39c7bd3c] = env->getMethodID(cls, "yybegin", "(I)V");
                            mids$[mid_yycharat_39c7bd29] = env->getMethodID(cls, "yycharat", "(I)C");
                            mids$[mid_yyclose_54c6a166] = env->getMethodID(cls, "yyclose", "()V");
                            mids$[mid_yylength_54c6a179] = env->getMethodID(cls, "yylength", "()I");
                            mids$[mid_yylex_54c6a179] = env->getMethodID(cls, "yylex", "()I");
                            mids$[mid_yypushback_39c7bd3c] = env->getMethodID(cls, "yypushback", "(I)V");
                            mids$[mid_yyreset_cf2e3c10] = env->getMethodID(cls, "yyreset", "(Ljava/io/Reader;)V");
                            mids$[mid_yystate_54c6a179] = env->getMethodID(cls, "yystate", "()I");
                            mids$[mid_yytext_14c7b5c5] = env->getMethodID(cls, "yytext", "()Ljava/lang/String;");

                            class$ = (::java::lang::Class *) new JObject(cls);
                            cls = (jclass) class$->this$;

                            YYEOF = env->getStaticIntField(cls, "YYEOF");
                            YYINITIAL = env->getStaticIntField(cls, "YYINITIAL");
                        }
                        return (jclass) class$->this$;
                    }

                    Phrase_MWEP2::Phrase_MWEP2(const ::java::io::Reader & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_cf2e3c10, a0.this$)) {}

                    Phrase_MWEP2::Phrase_MWEP2(const ::java::io::InputStream & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_be2e4f90, a0.this$)) {}

                    void Phrase_MWEP2::main(const JArray< ::java::lang::String > & a0)
                    {
                        jclass cls = initializeClass();
                        env->callStaticVoidMethod(cls, mids$[mid_main_4dd4540c], a0.this$);
                    }

                    void Phrase_MWEP2::parse(const ::java::io::Writer & a0) const
                    {
                        env->callVoidMethod(this$, mids$[mid_parse_5bcd5850], a0.this$);
                    }

                    void Phrase_MWEP2::yybegin(jint a0) const
                    {
                        env->callVoidMethod(this$, mids$[mid_yybegin_39c7bd3c], a0);
                    }

                    jchar Phrase_MWEP2::yycharat(jint a0) const
                    {
                        return env->callCharMethod(this$, mids$[mid_yycharat_39c7bd29], a0);
                    }

                    void Phrase_MWEP2::yyclose() const
                    {
                        env->callVoidMethod(this$, mids$[mid_yyclose_54c6a166]);
                    }

                    jint Phrase_MWEP2::yylength() const
                    {
                        return env->callIntMethod(this$, mids$[mid_yylength_54c6a179]);
                    }

                    jint Phrase_MWEP2::yylex() const
                    {
                        return env->callIntMethod(this$, mids$[mid_yylex_54c6a179]);
                    }

                    void Phrase_MWEP2::yypushback(jint a0) const
                    {
                        env->callVoidMethod(this$, mids$[mid_yypushback_39c7bd3c], a0);
                    }

                    void Phrase_MWEP2::yyreset(const ::java::io::Reader & a0) const
                    {
                        env->callVoidMethod(this$, mids$[mid_yyreset_cf2e3c10], a0.this$);
                    }

                    jint Phrase_MWEP2::yystate() const
                    {
                        return env->callIntMethod(this$, mids$[mid_yystate_54c6a179]);
                    }

                    ::java::lang::String Phrase_MWEP2::yytext() const
                    {
                        return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_yytext_14c7b5c5]));
                    }
                }
            }
        }
    }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace is {
    namespace iclt {
        namespace icenlp {
            namespace core {
                namespace iceparser {
                    static PyObject *t_Phrase_MWEP2_cast_(PyTypeObject *type, PyObject *arg);
                    static PyObject *t_Phrase_MWEP2_instance_(PyTypeObject *type, PyObject *arg);
                    static int t_Phrase_MWEP2_init_(t_Phrase_MWEP2 *self, PyObject *args, PyObject *kwds);
                    static PyObject *t_Phrase_MWEP2_main(PyTypeObject *type, PyObject *arg);
                    static PyObject *t_Phrase_MWEP2_parse(t_Phrase_MWEP2 *self, PyObject *arg);
                    static PyObject *t_Phrase_MWEP2_yybegin(t_Phrase_MWEP2 *self, PyObject *arg);
                    static PyObject *t_Phrase_MWEP2_yycharat(t_Phrase_MWEP2 *self, PyObject *arg);
                    static PyObject *t_Phrase_MWEP2_yyclose(t_Phrase_MWEP2 *self);
                    static PyObject *t_Phrase_MWEP2_yylength(t_Phrase_MWEP2 *self);
                    static PyObject *t_Phrase_MWEP2_yylex(t_Phrase_MWEP2 *self);
                    static PyObject *t_Phrase_MWEP2_yypushback(t_Phrase_MWEP2 *self, PyObject *arg);
                    static PyObject *t_Phrase_MWEP2_yyreset(t_Phrase_MWEP2 *self, PyObject *arg);
                    static PyObject *t_Phrase_MWEP2_yystate(t_Phrase_MWEP2 *self);
                    static PyObject *t_Phrase_MWEP2_yytext(t_Phrase_MWEP2 *self);

                    static PyMethodDef t_Phrase_MWEP2__methods_[] = {
                        DECLARE_METHOD(t_Phrase_MWEP2, cast_, METH_O | METH_CLASS),
                        DECLARE_METHOD(t_Phrase_MWEP2, instance_, METH_O | METH_CLASS),
                        DECLARE_METHOD(t_Phrase_MWEP2, main, METH_O | METH_CLASS),
                        DECLARE_METHOD(t_Phrase_MWEP2, parse, METH_O),
                        DECLARE_METHOD(t_Phrase_MWEP2, yybegin, METH_O),
                        DECLARE_METHOD(t_Phrase_MWEP2, yycharat, METH_O),
                        DECLARE_METHOD(t_Phrase_MWEP2, yyclose, METH_NOARGS),
                        DECLARE_METHOD(t_Phrase_MWEP2, yylength, METH_NOARGS),
                        DECLARE_METHOD(t_Phrase_MWEP2, yylex, METH_NOARGS),
                        DECLARE_METHOD(t_Phrase_MWEP2, yypushback, METH_O),
                        DECLARE_METHOD(t_Phrase_MWEP2, yyreset, METH_O),
                        DECLARE_METHOD(t_Phrase_MWEP2, yystate, METH_NOARGS),
                        DECLARE_METHOD(t_Phrase_MWEP2, yytext, METH_NOARGS),
                        { NULL, NULL, 0, NULL }
                    };

                    DECLARE_TYPE(Phrase_MWEP2, t_Phrase_MWEP2, ::java::lang::Object, Phrase_MWEP2, t_Phrase_MWEP2_init_, 0, 0, 0, 0, 0);

                    void t_Phrase_MWEP2::install(PyObject *module)
                    {
                        installType(&PY_TYPE(Phrase_MWEP2), module, "Phrase_MWEP2", 0);
                    }

                    void t_Phrase_MWEP2::initialize(PyObject *module)
                    {
                        PyDict_SetItemString(PY_TYPE(Phrase_MWEP2).tp_dict, "class_", make_descriptor(Phrase_MWEP2::initializeClass, 1));
                        PyDict_SetItemString(PY_TYPE(Phrase_MWEP2).tp_dict, "wrapfn_", make_descriptor(t_Phrase_MWEP2::wrap_jobject));
                        PyDict_SetItemString(PY_TYPE(Phrase_MWEP2).tp_dict, "boxfn_", make_descriptor(boxObject));
                        Phrase_MWEP2::initializeClass();
                        PyDict_SetItemString(PY_TYPE(Phrase_MWEP2).tp_dict, "YYEOF", make_descriptor(Phrase_MWEP2::YYEOF));
                        PyDict_SetItemString(PY_TYPE(Phrase_MWEP2).tp_dict, "YYINITIAL", make_descriptor(Phrase_MWEP2::YYINITIAL));
                    }

                    static PyObject *t_Phrase_MWEP2_cast_(PyTypeObject *type, PyObject *arg)
                    {
                        if (!(arg = castCheck(arg, Phrase_MWEP2::initializeClass, 1)))
                            return NULL;
                        return t_Phrase_MWEP2::wrap_Object(Phrase_MWEP2(((t_Phrase_MWEP2 *) arg)->object.this$));
                    }
                    static PyObject *t_Phrase_MWEP2_instance_(PyTypeObject *type, PyObject *arg)
                    {
                        if (!castCheck(arg, Phrase_MWEP2::initializeClass, 0))
                            Py_RETURN_FALSE;
                        Py_RETURN_TRUE;
                    }

                    static int t_Phrase_MWEP2_init_(t_Phrase_MWEP2 *self, PyObject *args, PyObject *kwds)
                    {
                        switch (PyTuple_GET_SIZE(args)) {
                          case 1:
                            {
                                ::java::io::Reader a0((jobject) NULL);
                                Phrase_MWEP2 object((jobject) NULL);

                                if (!parseArgs(args, "k", ::java::io::Reader::initializeClass, &a0))
                                {
                                    INT_CALL(object = Phrase_MWEP2(a0));
                                    self->object = object;
                                    break;
                                }
                            }
                            {
                                ::java::io::InputStream a0((jobject) NULL);
                                Phrase_MWEP2 object((jobject) NULL);

                                if (!parseArgs(args, "k", ::java::io::InputStream::initializeClass, &a0))
                                {
                                    INT_CALL(object = Phrase_MWEP2(a0));
                                    self->object = object;
                                    break;
                                }
                            }
                          default:
                            PyErr_SetArgsError((PyObject *) self, "__init__", args);
                            return -1;
                        }

                        return 0;
                    }

                    static PyObject *t_Phrase_MWEP2_main(PyTypeObject *type, PyObject *arg)
                    {
                        JArray< ::java::lang::String > a0((jobject) NULL);

                        if (!parseArg(arg, "[s", &a0))
                        {
                            OBJ_CALL(::is::iclt::icenlp::core::iceparser::Phrase_MWEP2::main(a0));
                            Py_RETURN_NONE;
                        }

                        PyErr_SetArgsError(type, "main", arg);
                        return NULL;
                    }

                    static PyObject *t_Phrase_MWEP2_parse(t_Phrase_MWEP2 *self, PyObject *arg)
                    {
                        ::java::io::Writer a0((jobject) NULL);

                        if (!parseArg(arg, "k", ::java::io::Writer::initializeClass, &a0))
                        {
                            OBJ_CALL(self->object.parse(a0));
                            Py_RETURN_NONE;
                        }

                        PyErr_SetArgsError((PyObject *) self, "parse", arg);
                        return NULL;
                    }

                    static PyObject *t_Phrase_MWEP2_yybegin(t_Phrase_MWEP2 *self, PyObject *arg)
                    {
                        jint a0;

                        if (!parseArg(arg, "I", &a0))
                        {
                            OBJ_CALL(self->object.yybegin(a0));
                            Py_RETURN_NONE;
                        }

                        PyErr_SetArgsError((PyObject *) self, "yybegin", arg);
                        return NULL;
                    }

                    static PyObject *t_Phrase_MWEP2_yycharat(t_Phrase_MWEP2 *self, PyObject *arg)
                    {
                        jint a0;
                        jchar result;

                        if (!parseArg(arg, "I", &a0))
                        {
                            OBJ_CALL(result = self->object.yycharat(a0));
                            return PyUnicode_FromUnicode((Py_UNICODE *) &result, 1);
                        }

                        PyErr_SetArgsError((PyObject *) self, "yycharat", arg);
                        return NULL;
                    }

                    static PyObject *t_Phrase_MWEP2_yyclose(t_Phrase_MWEP2 *self)
                    {
                        OBJ_CALL(self->object.yyclose());
                        Py_RETURN_NONE;
                    }

                    static PyObject *t_Phrase_MWEP2_yylength(t_Phrase_MWEP2 *self)
                    {
                        jint result;
                        OBJ_CALL(result = self->object.yylength());
                        return PyInt_FromLong((long) result);
                    }

                    static PyObject *t_Phrase_MWEP2_yylex(t_Phrase_MWEP2 *self)
                    {
                        jint result;
                        OBJ_CALL(result = self->object.yylex());
                        return PyInt_FromLong((long) result);
                    }

                    static PyObject *t_Phrase_MWEP2_yypushback(t_Phrase_MWEP2 *self, PyObject *arg)
                    {
                        jint a0;

                        if (!parseArg(arg, "I", &a0))
                        {
                            OBJ_CALL(self->object.yypushback(a0));
                            Py_RETURN_NONE;
                        }

                        PyErr_SetArgsError((PyObject *) self, "yypushback", arg);
                        return NULL;
                    }

                    static PyObject *t_Phrase_MWEP2_yyreset(t_Phrase_MWEP2 *self, PyObject *arg)
                    {
                        ::java::io::Reader a0((jobject) NULL);

                        if (!parseArg(arg, "k", ::java::io::Reader::initializeClass, &a0))
                        {
                            OBJ_CALL(self->object.yyreset(a0));
                            Py_RETURN_NONE;
                        }

                        PyErr_SetArgsError((PyObject *) self, "yyreset", arg);
                        return NULL;
                    }

                    static PyObject *t_Phrase_MWEP2_yystate(t_Phrase_MWEP2 *self)
                    {
                        jint result;
                        OBJ_CALL(result = self->object.yystate());
                        return PyInt_FromLong((long) result);
                    }

                    static PyObject *t_Phrase_MWEP2_yytext(t_Phrase_MWEP2 *self)
                    {
                        ::java::lang::String result((jobject) NULL);
                        OBJ_CALL(result = self->object.yytext());
                        return j2p(result);
                    }
                }
            }
        }
    }
}
#include <jni.h>
#include "JCCEnv.h"
#include "is/iclt/icenlp/core/lemmald/LemmaldUtils.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace is {
    namespace iclt {
        namespace icenlp {
            namespace core {
                namespace lemmald {

                    ::java::lang::Class *LemmaldUtils::class$ = NULL;
                    jmethodID *LemmaldUtils::mids$ = NULL;

                    jclass LemmaldUtils::initializeClass()
                    {
                        if (!class$)
                        {

                            jclass cls = (jclass) env->findClass("is/iclt/icenlp/core/lemmald/LemmaldUtils");

                            mids$ = new jmethodID[max_mid];
                            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                            mids$[mid_applyMapping_aacea7e9] = env->getStaticMethodID(cls, "applyMapping", "(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;");
                            mids$[mid_applyMapping_af6d27e3] = env->getStaticMethodID(cls, "applyMapping", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;");
                            mids$[mid_createBestMapping_aacea7e9] = env->getStaticMethodID(cls, "createBestMapping", "(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;");
                            mids$[mid_firstVowel_5fdc3f57] = env->getStaticMethodID(cls, "firstVowel", "(Ljava/lang/String;)I");
                            mids$[mid_getWordClass_97a5258f] = env->getStaticMethodID(cls, "getWordClass", "(Ljava/lang/String;)Ljava/lang/String;");
                            mids$[mid_isPunctuation_5fdc3f44] = env->getStaticMethodID(cls, "isPunctuation", "(Ljava/lang/String;)Z");
                            mids$[mid_isVowel_87fd5456] = env->getStaticMethodID(cls, "isVowel", "(C)Z");
                            mids$[mid_isWordClass_5fdc3f44] = env->getStaticMethodID(cls, "isWordClass", "(Ljava/lang/String;)Z");
                            mids$[mid_lastVowel_5fdc3f57] = env->getStaticMethodID(cls, "lastVowel", "(Ljava/lang/String;)I");
                            mids$[mid_print_5fdc3f48] = env->getStaticMethodID(cls, "print", "(Ljava/lang/String;)V");

                            class$ = (::java::lang::Class *) new JObject(cls);
                        }
                        return (jclass) class$->this$;
                    }

                    LemmaldUtils::LemmaldUtils() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

                    ::java::lang::String LemmaldUtils::applyMapping(const ::java::lang::String & a0, const ::java::lang::String & a1)
                    {
                        jclass cls = initializeClass();
                        return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_applyMapping_aacea7e9], a0.this$, a1.this$));
                    }

                    ::java::lang::String LemmaldUtils::applyMapping(const ::java::lang::String & a0, const ::java::lang::String & a1, const ::java::lang::String & a2)
                    {
                        jclass cls = initializeClass();
                        return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_applyMapping_af6d27e3], a0.this$, a1.this$, a2.this$));
                    }

                    ::java::lang::String LemmaldUtils::createBestMapping(const ::java::lang::String & a0, const ::java::lang::String & a1)
                    {
                        jclass cls = initializeClass();
                        return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_createBestMapping_aacea7e9], a0.this$, a1.this$));
                    }

                    jint LemmaldUtils::firstVowel(const ::java::lang::String & a0)
                    {
                        jclass cls = initializeClass();
                        return env->callStaticIntMethod(cls, mids$[mid_firstVowel_5fdc3f57], a0.this$);
                    }

                    ::java::lang::String LemmaldUtils::getWordClass(const ::java::lang::String & a0)
                    {
                        jclass cls = initializeClass();
                        return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_getWordClass_97a5258f], a0.this$));
                    }

                    jboolean LemmaldUtils::isPunctuation(const ::java::lang::String & a0)
                    {
                        jclass cls = initializeClass();
                        return env->callStaticBooleanMethod(cls, mids$[mid_isPunctuation_5fdc3f44], a0.this$);
                    }

                    jboolean LemmaldUtils::isVowel(jchar a0)
                    {
                        jclass cls = initializeClass();
                        return env->callStaticBooleanMethod(cls, mids$[mid_isVowel_87fd5456], a0);
                    }

                    jboolean LemmaldUtils::isWordClass(const ::java::lang::String & a0)
                    {
                        jclass cls = initializeClass();
                        return env->callStaticBooleanMethod(cls, mids$[mid_isWordClass_5fdc3f44], a0.this$);
                    }

                    jint LemmaldUtils::lastVowel(const ::java::lang::String & a0)
                    {
                        jclass cls = initializeClass();
                        return env->callStaticIntMethod(cls, mids$[mid_lastVowel_5fdc3f57], a0.this$);
                    }

                    void LemmaldUtils::print(const ::java::lang::String & a0)
                    {
                        jclass cls = initializeClass();
                        env->callStaticVoidMethod(cls, mids$[mid_print_5fdc3f48], a0.this$);
                    }
                }
            }
        }
    }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace is {
    namespace iclt {
        namespace icenlp {
            namespace core {
                namespace lemmald {
                    static PyObject *t_LemmaldUtils_cast_(PyTypeObject *type, PyObject *arg);
                    static PyObject *t_LemmaldUtils_instance_(PyTypeObject *type, PyObject *arg);
                    static int t_LemmaldUtils_init_(t_LemmaldUtils *self, PyObject *args, PyObject *kwds);
                    static PyObject *t_LemmaldUtils_applyMapping(PyTypeObject *type, PyObject *args);
                    static PyObject *t_LemmaldUtils_createBestMapping(PyTypeObject *type, PyObject *args);
                    static PyObject *t_LemmaldUtils_firstVowel(PyTypeObject *type, PyObject *arg);
                    static PyObject *t_LemmaldUtils_getWordClass(PyTypeObject *type, PyObject *arg);
                    static PyObject *t_LemmaldUtils_isPunctuation(PyTypeObject *type, PyObject *arg);
                    static PyObject *t_LemmaldUtils_isVowel(PyTypeObject *type, PyObject *arg);
                    static PyObject *t_LemmaldUtils_isWordClass(PyTypeObject *type, PyObject *arg);
                    static PyObject *t_LemmaldUtils_lastVowel(PyTypeObject *type, PyObject *arg);
                    static PyObject *t_LemmaldUtils_print(PyTypeObject *type, PyObject *arg);

                    static PyMethodDef t_LemmaldUtils__methods_[] = {
                        DECLARE_METHOD(t_LemmaldUtils, cast_, METH_O | METH_CLASS),
                        DECLARE_METHOD(t_LemmaldUtils, instance_, METH_O | METH_CLASS),
                        DECLARE_METHOD(t_LemmaldUtils, applyMapping, METH_VARARGS | METH_CLASS),
                        DECLARE_METHOD(t_LemmaldUtils, createBestMapping, METH_VARARGS | METH_CLASS),
                        DECLARE_METHOD(t_LemmaldUtils, firstVowel, METH_O | METH_CLASS),
                        DECLARE_METHOD(t_LemmaldUtils, getWordClass, METH_O | METH_CLASS),
                        DECLARE_METHOD(t_LemmaldUtils, isPunctuation, METH_O | METH_CLASS),
                        DECLARE_METHOD(t_LemmaldUtils, isVowel, METH_O | METH_CLASS),
                        DECLARE_METHOD(t_LemmaldUtils, isWordClass, METH_O | METH_CLASS),
                        DECLARE_METHOD(t_LemmaldUtils, lastVowel, METH_O | METH_CLASS),
                        DECLARE_METHOD(t_LemmaldUtils, print, METH_O | METH_CLASS),
                        { NULL, NULL, 0, NULL }
                    };

                    DECLARE_TYPE(LemmaldUtils, t_LemmaldUtils, ::java::lang::Object, LemmaldUtils, t_LemmaldUtils_init_, 0, 0, 0, 0, 0);

                    void t_LemmaldUtils::install(PyObject *module)
                    {
                        installType(&PY_TYPE(LemmaldUtils), module, "LemmaldUtils", 0);
                    }

                    void t_LemmaldUtils::initialize(PyObject *module)
                    {
                        PyDict_SetItemString(PY_TYPE(LemmaldUtils).tp_dict, "class_", make_descriptor(LemmaldUtils::initializeClass, 1));
                        PyDict_SetItemString(PY_TYPE(LemmaldUtils).tp_dict, "wrapfn_", make_descriptor(t_LemmaldUtils::wrap_jobject));
                        PyDict_SetItemString(PY_TYPE(LemmaldUtils).tp_dict, "boxfn_", make_descriptor(boxObject));
                    }

                    static PyObject *t_LemmaldUtils_cast_(PyTypeObject *type, PyObject *arg)
                    {
                        if (!(arg = castCheck(arg, LemmaldUtils::initializeClass, 1)))
                            return NULL;
                        return t_LemmaldUtils::wrap_Object(LemmaldUtils(((t_LemmaldUtils *) arg)->object.this$));
                    }
                    static PyObject *t_LemmaldUtils_instance_(PyTypeObject *type, PyObject *arg)
                    {
                        if (!castCheck(arg, LemmaldUtils::initializeClass, 0))
                            Py_RETURN_FALSE;
                        Py_RETURN_TRUE;
                    }

                    static int t_LemmaldUtils_init_(t_LemmaldUtils *self, PyObject *args, PyObject *kwds)
                    {
                        LemmaldUtils object((jobject) NULL);

                        INT_CALL(object = LemmaldUtils());
                        self->object = object;

                        return 0;
                    }

                    static PyObject *t_LemmaldUtils_applyMapping(PyTypeObject *type, PyObject *args)
                    {
                        switch (PyTuple_GET_SIZE(args)) {
                          case 2:
                            {
                                ::java::lang::String a0((jobject) NULL);
                                ::java::lang::String a1((jobject) NULL);
                                ::java::lang::String result((jobject) NULL);

                                if (!parseArgs(args, "ss", &a0, &a1))
                                {
                                    OBJ_CALL(result = ::is::iclt::icenlp::core::lemmald::LemmaldUtils::applyMapping(a0, a1));
                                    return j2p(result);
                                }
                            }
                            break;
                          case 3:
                            {
                                ::java::lang::String a0((jobject) NULL);
                                ::java::lang::String a1((jobject) NULL);
                                ::java::lang::String a2((jobject) NULL);
                                ::java::lang::String result((jobject) NULL);

                                if (!parseArgs(args, "sss", &a0, &a1, &a2))
                                {
                                    OBJ_CALL(result = ::is::iclt::icenlp::core::lemmald::LemmaldUtils::applyMapping(a0, a1, a2));
                                    return j2p(result);
                                }
                            }
                        }

                        PyErr_SetArgsError(type, "applyMapping", args);
                        return NULL;
                    }

                    static PyObject *t_LemmaldUtils_createBestMapping(PyTypeObject *type, PyObject *args)
                    {
                        ::java::lang::String a0((jobject) NULL);
                        ::java::lang::String a1((jobject) NULL);
                        ::java::lang::String result((jobject) NULL);

                        if (!parseArgs(args, "ss", &a0, &a1))
                        {
                            OBJ_CALL(result = ::is::iclt::icenlp::core::lemmald::LemmaldUtils::createBestMapping(a0, a1));
                            return j2p(result);
                        }

                        PyErr_SetArgsError(type, "createBestMapping", args);
                        return NULL;
                    }

                    static PyObject *t_LemmaldUtils_firstVowel(PyTypeObject *type, PyObject *arg)
                    {
                        ::java::lang::String a0((jobject) NULL);
                        jint result;

                        if (!parseArg(arg, "s", &a0))
                        {
                            OBJ_CALL(result = ::is::iclt::icenlp::core::lemmald::LemmaldUtils::firstVowel(a0));
                            return PyInt_FromLong((long) result);
                        }

                        PyErr_SetArgsError(type, "firstVowel", arg);
                        return NULL;
                    }

                    static PyObject *t_LemmaldUtils_getWordClass(PyTypeObject *type, PyObject *arg)
                    {
                        ::java::lang::String a0((jobject) NULL);
                        ::java::lang::String result((jobject) NULL);

                        if (!parseArg(arg, "s", &a0))
                        {
                            OBJ_CALL(result = ::is::iclt::icenlp::core::lemmald::LemmaldUtils::getWordClass(a0));
                            return j2p(result);
                        }

                        PyErr_SetArgsError(type, "getWordClass", arg);
                        return NULL;
                    }

                    static PyObject *t_LemmaldUtils_isPunctuation(PyTypeObject *type, PyObject *arg)
                    {
                        ::java::lang::String a0((jobject) NULL);
                        jboolean result;

                        if (!parseArg(arg, "s", &a0))
                        {
                            OBJ_CALL(result = ::is::iclt::icenlp::core::lemmald::LemmaldUtils::isPunctuation(a0));
                            Py_RETURN_BOOL(result);
                        }

                        PyErr_SetArgsError(type, "isPunctuation", arg);
                        return NULL;
                    }

                    static PyObject *t_LemmaldUtils_isVowel(PyTypeObject *type, PyObject *arg)
                    {
                        jchar a0;
                        jboolean result;

                        if (!parseArg(arg, "C", &a0))
                        {
                            OBJ_CALL(result = ::is::iclt::icenlp::core::lemmald::LemmaldUtils::isVowel(a0));
                            Py_RETURN_BOOL(result);
                        }

                        PyErr_SetArgsError(type, "isVowel", arg);
                        return NULL;
                    }

                    static PyObject *t_LemmaldUtils_isWordClass(PyTypeObject *type, PyObject *arg)
                    {
                        ::java::lang::String a0((jobject) NULL);
                        jboolean result;

                        if (!parseArg(arg, "s", &a0))
                        {
                            OBJ_CALL(result = ::is::iclt::icenlp::core::lemmald::LemmaldUtils::isWordClass(a0));
                            Py_RETURN_BOOL(result);
                        }

                        PyErr_SetArgsError(type, "isWordClass", arg);
                        return NULL;
                    }

                    static PyObject *t_LemmaldUtils_lastVowel(PyTypeObject *type, PyObject *arg)
                    {
                        ::java::lang::String a0((jobject) NULL);
                        jint result;

                        if (!parseArg(arg, "s", &a0))
                        {
                            OBJ_CALL(result = ::is::iclt::icenlp::core::lemmald::LemmaldUtils::lastVowel(a0));
                            return PyInt_FromLong((long) result);
                        }

                        PyErr_SetArgsError(type, "lastVowel", arg);
                        return NULL;
                    }

                    static PyObject *t_LemmaldUtils_print(PyTypeObject *type, PyObject *arg)
                    {
                        ::java::lang::String a0((jobject) NULL);

                        if (!parseArg(arg, "s", &a0))
                        {
                            OBJ_CALL(::is::iclt::icenlp::core::lemmald::LemmaldUtils::print(a0));
                            Py_RETURN_NONE;
                        }

                        PyErr_SetArgsError(type, "print", arg);
                        return NULL;
                    }
                }
            }
        }
    }
}
#include <jni.h>
#include "JCCEnv.h"
#include "is/iclt/icenlp/core/tokenizer/Sentences.h"
#include "is/iclt/icenlp/core/tokenizer/Sentence.h"
#include "java/util/ArrayList.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace is {
    namespace iclt {
        namespace icenlp {
            namespace core {
                namespace tokenizer {

                    ::java::lang::Class *Sentences::class$ = NULL;
                    jmethodID *Sentences::mids$ = NULL;

                    jclass Sentences::initializeClass()
                    {
                        if (!class$)
                        {

                            jclass cls = (jclass) env->findClass("is/iclt/icenlp/core/tokenizer/Sentences");

                            mids$ = new jmethodID[max_mid];
                            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                            mids$[mid_add_8c932910] = env->getMethodID(cls, "add", "(Lis/iclt/icenlp/core/tokenizer/Sentence;)V");
                            mids$[mid_getSentences_21eb51b0] = env->getMethodID(cls, "getSentences", "()Ljava/util/ArrayList;");
                            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
                            mids$[mid_toStringNewline_445a175e] = env->getMethodID(cls, "toStringNewline", "(Z)Ljava/lang/String;");

                            class$ = (::java::lang::Class *) new JObject(cls);
                        }
                        return (jclass) class$->this$;
                    }

                    Sentences::Sentences() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

                    void Sentences::add(const ::is::iclt::icenlp::core::tokenizer::Sentence & a0) const
                    {
                        env->callVoidMethod(this$, mids$[mid_add_8c932910], a0.this$);
                    }

                    ::java::util::ArrayList Sentences::getSentences() const
                    {
                        return ::java::util::ArrayList(env->callObjectMethod(this$, mids$[mid_getSentences_21eb51b0]));
                    }

                    ::java::lang::String Sentences::toString() const
                    {
                        return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
                    }

                    ::java::lang::String Sentences::toStringNewline(jboolean a0) const
                    {
                        return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toStringNewline_445a175e], a0));
                    }
                }
            }
        }
    }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace is {
    namespace iclt {
        namespace icenlp {
            namespace core {
                namespace tokenizer {
                    static PyObject *t_Sentences_cast_(PyTypeObject *type, PyObject *arg);
                    static PyObject *t_Sentences_instance_(PyTypeObject *type, PyObject *arg);
                    static int t_Sentences_init_(t_Sentences *self, PyObject *args, PyObject *kwds);
                    static PyObject *t_Sentences_add(t_Sentences *self, PyObject *arg);
                    static PyObject *t_Sentences_getSentences(t_Sentences *self);
                    static PyObject *t_Sentences_toString(t_Sentences *self, PyObject *args);
                    static PyObject *t_Sentences_toStringNewline(t_Sentences *self, PyObject *arg);
                    static PyObject *t_Sentences_get__sentences(t_Sentences *self, void *data);
                    static PyGetSetDef t_Sentences__fields_[] = {
                        DECLARE_GET_FIELD(t_Sentences, sentences),
                        { NULL, NULL, NULL, NULL, NULL }
                    };

                    static PyMethodDef t_Sentences__methods_[] = {
                        DECLARE_METHOD(t_Sentences, cast_, METH_O | METH_CLASS),
                        DECLARE_METHOD(t_Sentences, instance_, METH_O | METH_CLASS),
                        DECLARE_METHOD(t_Sentences, add, METH_O),
                        DECLARE_METHOD(t_Sentences, getSentences, METH_NOARGS),
                        DECLARE_METHOD(t_Sentences, toString, METH_VARARGS),
                        DECLARE_METHOD(t_Sentences, toStringNewline, METH_O),
                        { NULL, NULL, 0, NULL }
                    };

                    DECLARE_TYPE(Sentences, t_Sentences, ::java::lang::Object, Sentences, t_Sentences_init_, 0, 0, t_Sentences__fields_, 0, 0);

                    void t_Sentences::install(PyObject *module)
                    {
                        installType(&PY_TYPE(Sentences), module, "Sentences", 0);
                    }

                    void t_Sentences::initialize(PyObject *module)
                    {
                        PyDict_SetItemString(PY_TYPE(Sentences).tp_dict, "class_", make_descriptor(Sentences::initializeClass, 1));
                        PyDict_SetItemString(PY_TYPE(Sentences).tp_dict, "wrapfn_", make_descriptor(t_Sentences::wrap_jobject));
                        PyDict_SetItemString(PY_TYPE(Sentences).tp_dict, "boxfn_", make_descriptor(boxObject));
                    }

                    static PyObject *t_Sentences_cast_(PyTypeObject *type, PyObject *arg)
                    {
                        if (!(arg = castCheck(arg, Sentences::initializeClass, 1)))
                            return NULL;
                        return t_Sentences::wrap_Object(Sentences(((t_Sentences *) arg)->object.this$));
                    }
                    static PyObject *t_Sentences_instance_(PyTypeObject *type, PyObject *arg)
                    {
                        if (!castCheck(arg, Sentences::initializeClass, 0))
                            Py_RETURN_FALSE;
                        Py_RETURN_TRUE;
                    }

                    static int t_Sentences_init_(t_Sentences *self, PyObject *args, PyObject *kwds)
                    {
                        Sentences object((jobject) NULL);

                        INT_CALL(object = Sentences());
                        self->object = object;

                        return 0;
                    }

                    static PyObject *t_Sentences_add(t_Sentences *self, PyObject *arg)
                    {
                        ::is::iclt::icenlp::core::tokenizer::Sentence a0((jobject) NULL);

                        if (!parseArg(arg, "k", ::is::iclt::icenlp::core::tokenizer::Sentence::initializeClass, &a0))
                        {
                            OBJ_CALL(self->object.add(a0));
                            Py_RETURN_NONE;
                        }

                        PyErr_SetArgsError((PyObject *) self, "add", arg);
                        return NULL;
                    }

                    static PyObject *t_Sentences_getSentences(t_Sentences *self)
                    {
                        ::java::util::ArrayList result((jobject) NULL);
                        OBJ_CALL(result = self->object.getSentences());
                        return ::java::util::t_ArrayList::wrap_Object(result, &::is::iclt::icenlp::core::tokenizer::PY_TYPE(Sentence));
                    }

                    static PyObject *t_Sentences_toString(t_Sentences *self, PyObject *args)
                    {
                        ::java::lang::String result((jobject) NULL);

                        if (!parseArgs(args, ""))
                        {
                            OBJ_CALL(result = self->object.toString());
                            return j2p(result);
                        }

                        return callSuper(&PY_TYPE(Sentences), (PyObject *) self, "toString", args, 2);
                    }

                    static PyObject *t_Sentences_toStringNewline(t_Sentences *self, PyObject *arg)
                    {
                        jboolean a0;
                        ::java::lang::String result((jobject) NULL);

                        if (!parseArg(arg, "Z", &a0))
                        {
                            OBJ_CALL(result = self->object.toStringNewline(a0));
                            return j2p(result);
                        }

                        PyErr_SetArgsError((PyObject *) self, "toStringNewline", arg);
                        return NULL;
                    }

                    static PyObject *t_Sentences_get__sentences(t_Sentences *self, void *data)
                    {
                        ::java::util::ArrayList value((jobject) NULL);
                        OBJ_CALL(value = self->object.getSentences());
                        return ::java::util::t_ArrayList::wrap_Object(value);
                    }
                }
            }
        }
    }
}
#include <jni.h>
#include "JCCEnv.h"
#include "is/iclt/icenlp/core/iceparser/Phrase_MWE.h"
#include "java/io/IOException.h"
#include "java/io/Reader.h"
#include "java/io/Writer.h"
#include "java/lang/Class.h"
#include "java/io/InputStream.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace is {
    namespace iclt {
        namespace icenlp {
            namespace core {
                namespace iceparser {

                    ::java::lang::Class *Phrase_MWE::class$ = NULL;
                    jmethodID *Phrase_MWE::mids$ = NULL;
                    jint Phrase_MWE::YYEOF = (jint) 0;
                    jint Phrase_MWE::YYINITIAL = (jint) 0;

                    jclass Phrase_MWE::initializeClass()
                    {
                        if (!class$)
                        {

                            jclass cls = (jclass) env->findClass("is/iclt/icenlp/core/iceparser/Phrase_MWE");

                            mids$ = new jmethodID[max_mid];
                            mids$[mid_init$_cf2e3c10] = env->getMethodID(cls, "<init>", "(Ljava/io/Reader;)V");
                            mids$[mid_init$_be2e4f90] = env->getMethodID(cls, "<init>", "(Ljava/io/InputStream;)V");
                            mids$[mid_main_4dd4540c] = env->getStaticMethodID(cls, "main", "([Ljava/lang/String;)V");
                            mids$[mid_parse_5bcd5850] = env->getMethodID(cls, "parse", "(Ljava/io/Writer;)V");
                            mids$[mid_yybegin_39c7bd3c] = env->getMethodID(cls, "yybegin", "(I)V");
                            mids$[mid_yycharat_39c7bd29] = env->getMethodID(cls, "yycharat", "(I)C");
                            mids$[mid_yyclose_54c6a166] = env->getMethodID(cls, "yyclose", "()V");
                            mids$[mid_yylength_54c6a179] = env->getMethodID(cls, "yylength", "()I");
                            mids$[mid_yylex_54c6a179] = env->getMethodID(cls, "yylex", "()I");
                            mids$[mid_yypushback_39c7bd3c] = env->getMethodID(cls, "yypushback", "(I)V");
                            mids$[mid_yyreset_cf2e3c10] = env->getMethodID(cls, "yyreset", "(Ljava/io/Reader;)V");
                            mids$[mid_yystate_54c6a179] = env->getMethodID(cls, "yystate", "()I");
                            mids$[mid_yytext_14c7b5c5] = env->getMethodID(cls, "yytext", "()Ljava/lang/String;");

                            class$ = (::java::lang::Class *) new JObject(cls);
                            cls = (jclass) class$->this$;

                            YYEOF = env->getStaticIntField(cls, "YYEOF");
                            YYINITIAL = env->getStaticIntField(cls, "YYINITIAL");
                        }
                        return (jclass) class$->this$;
                    }

                    Phrase_MWE::Phrase_MWE(const ::java::io::Reader & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_cf2e3c10, a0.this$)) {}

                    Phrase_MWE::Phrase_MWE(const ::java::io::InputStream & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_be2e4f90, a0.this$)) {}

                    void Phrase_MWE::main(const JArray< ::java::lang::String > & a0)
                    {
                        jclass cls = initializeClass();
                        env->callStaticVoidMethod(cls, mids$[mid_main_4dd4540c], a0.this$);
                    }

                    void Phrase_MWE::parse(const ::java::io::Writer & a0) const
                    {
                        env->callVoidMethod(this$, mids$[mid_parse_5bcd5850], a0.this$);
                    }

                    void Phrase_MWE::yybegin(jint a0) const
                    {
                        env->callVoidMethod(this$, mids$[mid_yybegin_39c7bd3c], a0);
                    }

                    jchar Phrase_MWE::yycharat(jint a0) const
                    {
                        return env->callCharMethod(this$, mids$[mid_yycharat_39c7bd29], a0);
                    }

                    void Phrase_MWE::yyclose() const
                    {
                        env->callVoidMethod(this$, mids$[mid_yyclose_54c6a166]);
                    }

                    jint Phrase_MWE::yylength() const
                    {
                        return env->callIntMethod(this$, mids$[mid_yylength_54c6a179]);
                    }

                    jint Phrase_MWE::yylex() const
                    {
                        return env->callIntMethod(this$, mids$[mid_yylex_54c6a179]);
                    }

                    void Phrase_MWE::yypushback(jint a0) const
                    {
                        env->callVoidMethod(this$, mids$[mid_yypushback_39c7bd3c], a0);
                    }

                    void Phrase_MWE::yyreset(const ::java::io::Reader & a0) const
                    {
                        env->callVoidMethod(this$, mids$[mid_yyreset_cf2e3c10], a0.this$);
                    }

                    jint Phrase_MWE::yystate() const
                    {
                        return env->callIntMethod(this$, mids$[mid_yystate_54c6a179]);
                    }

                    ::java::lang::String Phrase_MWE::yytext() const
                    {
                        return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_yytext_14c7b5c5]));
                    }
                }
            }
        }
    }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace is {
    namespace iclt {
        namespace icenlp {
            namespace core {
                namespace iceparser {
                    static PyObject *t_Phrase_MWE_cast_(PyTypeObject *type, PyObject *arg);
                    static PyObject *t_Phrase_MWE_instance_(PyTypeObject *type, PyObject *arg);
                    static int t_Phrase_MWE_init_(t_Phrase_MWE *self, PyObject *args, PyObject *kwds);
                    static PyObject *t_Phrase_MWE_main(PyTypeObject *type, PyObject *arg);
                    static PyObject *t_Phrase_MWE_parse(t_Phrase_MWE *self, PyObject *arg);
                    static PyObject *t_Phrase_MWE_yybegin(t_Phrase_MWE *self, PyObject *arg);
                    static PyObject *t_Phrase_MWE_yycharat(t_Phrase_MWE *self, PyObject *arg);
                    static PyObject *t_Phrase_MWE_yyclose(t_Phrase_MWE *self);
                    static PyObject *t_Phrase_MWE_yylength(t_Phrase_MWE *self);
                    static PyObject *t_Phrase_MWE_yylex(t_Phrase_MWE *self);
                    static PyObject *t_Phrase_MWE_yypushback(t_Phrase_MWE *self, PyObject *arg);
                    static PyObject *t_Phrase_MWE_yyreset(t_Phrase_MWE *self, PyObject *arg);
                    static PyObject *t_Phrase_MWE_yystate(t_Phrase_MWE *self);
                    static PyObject *t_Phrase_MWE_yytext(t_Phrase_MWE *self);

                    static PyMethodDef t_Phrase_MWE__methods_[] = {
                        DECLARE_METHOD(t_Phrase_MWE, cast_, METH_O | METH_CLASS),
                        DECLARE_METHOD(t_Phrase_MWE, instance_, METH_O | METH_CLASS),
                        DECLARE_METHOD(t_Phrase_MWE, main, METH_O | METH_CLASS),
                        DECLARE_METHOD(t_Phrase_MWE, parse, METH_O),
                        DECLARE_METHOD(t_Phrase_MWE, yybegin, METH_O),
                        DECLARE_METHOD(t_Phrase_MWE, yycharat, METH_O),
                        DECLARE_METHOD(t_Phrase_MWE, yyclose, METH_NOARGS),
                        DECLARE_METHOD(t_Phrase_MWE, yylength, METH_NOARGS),
                        DECLARE_METHOD(t_Phrase_MWE, yylex, METH_NOARGS),
                        DECLARE_METHOD(t_Phrase_MWE, yypushback, METH_O),
                        DECLARE_METHOD(t_Phrase_MWE, yyreset, METH_O),
                        DECLARE_METHOD(t_Phrase_MWE, yystate, METH_NOARGS),
                        DECLARE_METHOD(t_Phrase_MWE, yytext, METH_NOARGS),
                        { NULL, NULL, 0, NULL }
                    };

                    DECLARE_TYPE(Phrase_MWE, t_Phrase_MWE, ::java::lang::Object, Phrase_MWE, t_Phrase_MWE_init_, 0, 0, 0, 0, 0);

                    void t_Phrase_MWE::install(PyObject *module)
                    {
                        installType(&PY_TYPE(Phrase_MWE), module, "Phrase_MWE", 0);
                    }

                    void t_Phrase_MWE::initialize(PyObject *module)
                    {
                        PyDict_SetItemString(PY_TYPE(Phrase_MWE).tp_dict, "class_", make_descriptor(Phrase_MWE::initializeClass, 1));
                        PyDict_SetItemString(PY_TYPE(Phrase_MWE).tp_dict, "wrapfn_", make_descriptor(t_Phrase_MWE::wrap_jobject));
                        PyDict_SetItemString(PY_TYPE(Phrase_MWE).tp_dict, "boxfn_", make_descriptor(boxObject));
                        Phrase_MWE::initializeClass();
                        PyDict_SetItemString(PY_TYPE(Phrase_MWE).tp_dict, "YYEOF", make_descriptor(Phrase_MWE::YYEOF));
                        PyDict_SetItemString(PY_TYPE(Phrase_MWE).tp_dict, "YYINITIAL", make_descriptor(Phrase_MWE::YYINITIAL));
                    }

                    static PyObject *t_Phrase_MWE_cast_(PyTypeObject *type, PyObject *arg)
                    {
                        if (!(arg = castCheck(arg, Phrase_MWE::initializeClass, 1)))
                            return NULL;
                        return t_Phrase_MWE::wrap_Object(Phrase_MWE(((t_Phrase_MWE *) arg)->object.this$));
                    }
                    static PyObject *t_Phrase_MWE_instance_(PyTypeObject *type, PyObject *arg)
                    {
                        if (!castCheck(arg, Phrase_MWE::initializeClass, 0))
                            Py_RETURN_FALSE;
                        Py_RETURN_TRUE;
                    }

                    static int t_Phrase_MWE_init_(t_Phrase_MWE *self, PyObject *args, PyObject *kwds)
                    {
                        switch (PyTuple_GET_SIZE(args)) {
                          case 1:
                            {
                                ::java::io::Reader a0((jobject) NULL);
                                Phrase_MWE object((jobject) NULL);

                                if (!parseArgs(args, "k", ::java::io::Reader::initializeClass, &a0))
                                {
                                    INT_CALL(object = Phrase_MWE(a0));
                                    self->object = object;
                                    break;
                                }
                            }
                            {
                                ::java::io::InputStream a0((jobject) NULL);
                                Phrase_MWE object((jobject) NULL);

                                if (!parseArgs(args, "k", ::java::io::InputStream::initializeClass, &a0))
                                {
                                    INT_CALL(object = Phrase_MWE(a0));
                                    self->object = object;
                                    break;
                                }
                            }
                          default:
                            PyErr_SetArgsError((PyObject *) self, "__init__", args);
                            return -1;
                        }

                        return 0;
                    }

                    static PyObject *t_Phrase_MWE_main(PyTypeObject *type, PyObject *arg)
                    {
                        JArray< ::java::lang::String > a0((jobject) NULL);

                        if (!parseArg(arg, "[s", &a0))
                        {
                            OBJ_CALL(::is::iclt::icenlp::core::iceparser::Phrase_MWE::main(a0));
                            Py_RETURN_NONE;
                        }

                        PyErr_SetArgsError(type, "main", arg);
                        return NULL;
                    }

                    static PyObject *t_Phrase_MWE_parse(t_Phrase_MWE *self, PyObject *arg)
                    {
                        ::java::io::Writer a0((jobject) NULL);

                        if (!parseArg(arg, "k", ::java::io::Writer::initializeClass, &a0))
                        {
                            OBJ_CALL(self->object.parse(a0));
                            Py_RETURN_NONE;
                        }

                        PyErr_SetArgsError((PyObject *) self, "parse", arg);
                        return NULL;
                    }

                    static PyObject *t_Phrase_MWE_yybegin(t_Phrase_MWE *self, PyObject *arg)
                    {
                        jint a0;

                        if (!parseArg(arg, "I", &a0))
                        {
                            OBJ_CALL(self->object.yybegin(a0));
                            Py_RETURN_NONE;
                        }

                        PyErr_SetArgsError((PyObject *) self, "yybegin", arg);
                        return NULL;
                    }

                    static PyObject *t_Phrase_MWE_yycharat(t_Phrase_MWE *self, PyObject *arg)
                    {
                        jint a0;
                        jchar result;

                        if (!parseArg(arg, "I", &a0))
                        {
                            OBJ_CALL(result = self->object.yycharat(a0));
                            return PyUnicode_FromUnicode((Py_UNICODE *) &result, 1);
                        }

                        PyErr_SetArgsError((PyObject *) self, "yycharat", arg);
                        return NULL;
                    }

                    static PyObject *t_Phrase_MWE_yyclose(t_Phrase_MWE *self)
                    {
                        OBJ_CALL(self->object.yyclose());
                        Py_RETURN_NONE;
                    }

                    static PyObject *t_Phrase_MWE_yylength(t_Phrase_MWE *self)
                    {
                        jint result;
                        OBJ_CALL(result = self->object.yylength());
                        return PyInt_FromLong((long) result);
                    }

                    static PyObject *t_Phrase_MWE_yylex(t_Phrase_MWE *self)
                    {
                        jint result;
                        OBJ_CALL(result = self->object.yylex());
                        return PyInt_FromLong((long) result);
                    }

                    static PyObject *t_Phrase_MWE_yypushback(t_Phrase_MWE *self, PyObject *arg)
                    {
                        jint a0;

                        if (!parseArg(arg, "I", &a0))
                        {
                            OBJ_CALL(self->object.yypushback(a0));
                            Py_RETURN_NONE;
                        }

                        PyErr_SetArgsError((PyObject *) self, "yypushback", arg);
                        return NULL;
                    }

                    static PyObject *t_Phrase_MWE_yyreset(t_Phrase_MWE *self, PyObject *arg)
                    {
                        ::java::io::Reader a0((jobject) NULL);

                        if (!parseArg(arg, "k", ::java::io::Reader::initializeClass, &a0))
                        {
                            OBJ_CALL(self->object.yyreset(a0));
                            Py_RETURN_NONE;
                        }

                        PyErr_SetArgsError((PyObject *) self, "yyreset", arg);
                        return NULL;
                    }

                    static PyObject *t_Phrase_MWE_yystate(t_Phrase_MWE *self)
                    {
                        jint result;
                        OBJ_CALL(result = self->object.yystate());
                        return PyInt_FromLong((long) result);
                    }

                    static PyObject *t_Phrase_MWE_yytext(t_Phrase_MWE *self)
                    {
                        ::java::lang::String result((jobject) NULL);
                        OBJ_CALL(result = self->object.yytext());
                        return j2p(result);
                    }
                }
            }
        }
    }
}
#include <jni.h>
#include "JCCEnv.h"
#include "is/iclt/icenlp/facade/IceMorphyFacade.h"
#include "java/io/IOException.h"
#include "is/iclt/icenlp/core/utils/Lexicon.h"
#include "is/iclt/icenlp/core/tokenizer/Sentences.h"
#include "java/lang/Class.h"
#include "is/iclt/icenlp/core/icemorphy/IceMorphyLexicons.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace is {
    namespace iclt {
        namespace icenlp {
            namespace facade {

                ::java::lang::Class *IceMorphyFacade::class$ = NULL;
                jmethodID *IceMorphyFacade::mids$ = NULL;

                jclass IceMorphyFacade::initializeClass()
                {
                    if (!class$)
                    {

                        jclass cls = (jclass) env->findClass("is/iclt/icenlp/facade/IceMorphyFacade");

                        mids$ = new jmethodID[max_mid];
                        mids$[mid_init$_dc42a542] = env->getMethodID(cls, "<init>", "(Lis/iclt/icenlp/core/icemorphy/IceMorphyLexicons;Lis/iclt/icenlp/core/utils/Lexicon;I)V");
                        mids$[mid_analyze_6359824b] = env->getMethodID(cls, "analyze", "(Ljava/lang/String;)Lis/iclt/icenlp/core/tokenizer/Sentences;");

                        class$ = (::java::lang::Class *) new JObject(cls);
                    }
                    return (jclass) class$->this$;
                }

                IceMorphyFacade::IceMorphyFacade(const ::is::iclt::icenlp::core::icemorphy::IceMorphyLexicons & a0, const ::is::iclt::icenlp::core::utils::Lexicon & a1, jint a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_dc42a542, a0.this$, a1.this$, a2)) {}

                ::is::iclt::icenlp::core::tokenizer::Sentences IceMorphyFacade::analyze(const ::java::lang::String & a0) const
                {
                    return ::is::iclt::icenlp::core::tokenizer::Sentences(env->callObjectMethod(this$, mids$[mid_analyze_6359824b], a0.this$));
                }
            }
        }
    }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace is {
    namespace iclt {
        namespace icenlp {
            namespace facade {
                static PyObject *t_IceMorphyFacade_cast_(PyTypeObject *type, PyObject *arg);
                static PyObject *t_IceMorphyFacade_instance_(PyTypeObject *type, PyObject *arg);
                static int t_IceMorphyFacade_init_(t_IceMorphyFacade *self, PyObject *args, PyObject *kwds);
                static PyObject *t_IceMorphyFacade_analyze(t_IceMorphyFacade *self, PyObject *arg);

                static PyMethodDef t_IceMorphyFacade__methods_[] = {
                    DECLARE_METHOD(t_IceMorphyFacade, cast_, METH_O | METH_CLASS),
                    DECLARE_METHOD(t_IceMorphyFacade, instance_, METH_O | METH_CLASS),
                    DECLARE_METHOD(t_IceMorphyFacade, analyze, METH_O),
                    { NULL, NULL, 0, NULL }
                };

                DECLARE_TYPE(IceMorphyFacade, t_IceMorphyFacade, ::java::lang::Object, IceMorphyFacade, t_IceMorphyFacade_init_, 0, 0, 0, 0, 0);

                void t_IceMorphyFacade::install(PyObject *module)
                {
                    installType(&PY_TYPE(IceMorphyFacade), module, "IceMorphyFacade", 0);
                }

                void t_IceMorphyFacade::initialize(PyObject *module)
                {
                    PyDict_SetItemString(PY_TYPE(IceMorphyFacade).tp_dict, "class_", make_descriptor(IceMorphyFacade::initializeClass, 1));
                    PyDict_SetItemString(PY_TYPE(IceMorphyFacade).tp_dict, "wrapfn_", make_descriptor(t_IceMorphyFacade::wrap_jobject));
                    PyDict_SetItemString(PY_TYPE(IceMorphyFacade).tp_dict, "boxfn_", make_descriptor(boxObject));
                }

                static PyObject *t_IceMorphyFacade_cast_(PyTypeObject *type, PyObject *arg)
                {
                    if (!(arg = castCheck(arg, IceMorphyFacade::initializeClass, 1)))
                        return NULL;
                    return t_IceMorphyFacade::wrap_Object(IceMorphyFacade(((t_IceMorphyFacade *) arg)->object.this$));
                }
                static PyObject *t_IceMorphyFacade_instance_(PyTypeObject *type, PyObject *arg)
                {
                    if (!castCheck(arg, IceMorphyFacade::initializeClass, 0))
                        Py_RETURN_FALSE;
                    Py_RETURN_TRUE;
                }

                static int t_IceMorphyFacade_init_(t_IceMorphyFacade *self, PyObject *args, PyObject *kwds)
                {
                    ::is::iclt::icenlp::core::icemorphy::IceMorphyLexicons a0((jobject) NULL);
                    ::is::iclt::icenlp::core::utils::Lexicon a1((jobject) NULL);
                    jint a2;
                    IceMorphyFacade object((jobject) NULL);

                    if (!parseArgs(args, "kkI", ::is::iclt::icenlp::core::icemorphy::IceMorphyLexicons::initializeClass, ::is::iclt::icenlp::core::utils::Lexicon::initializeClass, &a0, &a1, &a2))
                    {
                        INT_CALL(object = IceMorphyFacade(a0, a1, a2));
                        self->object = object;
                    }
                    else
                    {
                        PyErr_SetArgsError((PyObject *) self, "__init__", args);
                        return -1;
                    }

                    return 0;
                }

                static PyObject *t_IceMorphyFacade_analyze(t_IceMorphyFacade *self, PyObject *arg)
                {
                    ::java::lang::String a0((jobject) NULL);
                    ::is::iclt::icenlp::core::tokenizer::Sentences result((jobject) NULL);

                    if (!parseArg(arg, "s", &a0))
                    {
                        OBJ_CALL(result = self->object.analyze(a0));
                        return ::is::iclt::icenlp::core::tokenizer::t_Sentences::wrap_Object(result);
                    }

                    PyErr_SetArgsError((PyObject *) self, "analyze", arg);
                    return NULL;
                }
            }
        }
    }
}
#include <jni.h>
#include "JCCEnv.h"
#include "is/iclt/icenlp/core/tritagger/TriTaggerLexicons.h"
#include "java/io/IOException.h"
#include "is/iclt/icenlp/core/tritagger/TriTaggerResources.h"
#include "java/lang/Class.h"
#include "java/io/InputStream.h"
#include "is/iclt/icenlp/core/tritagger/FreqLexicon.h"
#include "is/iclt/icenlp/core/tritagger/Ngrams.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace is {
    namespace iclt {
        namespace icenlp {
            namespace core {
                namespace tritagger {

                    ::java::lang::Class *TriTaggerLexicons::class$ = NULL;
                    jmethodID *TriTaggerLexicons::mids$ = NULL;
                    jfieldID *TriTaggerLexicons::fids$ = NULL;
                    ::java::lang::String *TriTaggerLexicons::lambdaEnding = NULL;
                    ::java::lang::String *TriTaggerLexicons::lexEnding = NULL;
                    ::java::lang::String *TriTaggerLexicons::modelName = NULL;
                    ::java::lang::String *TriTaggerLexicons::modelPath = NULL;
                    ::java::lang::String *TriTaggerLexicons::ngramsEnding = NULL;

                    jclass TriTaggerLexicons::initializeClass()
                    {
                        if (!class$)
                        {

                            jclass cls = (jclass) env->findClass("is/iclt/icenlp/core/tritagger/TriTaggerLexicons");

                            mids$ = new jmethodID[max_mid];
                            mids$[mid_init$_f3691645] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Z)V");
                            mids$[mid_init$_1aa7b2ce] = env->getMethodID(cls, "<init>", "(Lis/iclt/icenlp/core/tritagger/TriTaggerResources;Z)V");
                            mids$[mid_init$_2555570e] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;ZZ)V");
                            mids$[mid_init$_efbd1c95] = env->getMethodID(cls, "<init>", "(Ljava/io/InputStream;Ljava/io/InputStream;Ljava/io/InputStream;Z)V");

                            fids$ = new jfieldID[max_fid];
                            fids$[fid_freqLexicon] = env->getFieldID(cls, "freqLexicon", "Lis/iclt/icenlp/core/tritagger/FreqLexicon;");
                            fids$[fid_ngrams] = env->getFieldID(cls, "ngrams", "Lis/iclt/icenlp/core/tritagger/Ngrams;");

                            class$ = (::java::lang::Class *) new JObject(cls);
                            cls = (jclass) class$->this$;

                            lambdaEnding = new ::java::lang::String(env->getStaticObjectField(cls, "lambdaEnding", "Ljava/lang/String;"));
                            lexEnding = new ::java::lang::String(env->getStaticObjectField(cls, "lexEnding", "Ljava/lang/String;"));
                            modelName = new ::java::lang::String(env->getStaticObjectField(cls, "modelName", "Ljava/lang/String;"));
                            modelPath = new ::java::lang::String(env->getStaticObjectField(cls, "modelPath", "Ljava/lang/String;"));
                            ngramsEnding = new ::java::lang::String(env->getStaticObjectField(cls, "ngramsEnding", "Ljava/lang/String;"));
                        }
                        return (jclass) class$->this$;
                    }

                    TriTaggerLexicons::TriTaggerLexicons(const ::java::lang::String & a0, jboolean a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f3691645, a0.this$, a1)) {}

                    TriTaggerLexicons::TriTaggerLexicons(const ::is::iclt::icenlp::core::tritagger::TriTaggerResources & a0, jboolean a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_1aa7b2ce, a0.this$, a1)) {}

                    TriTaggerLexicons::TriTaggerLexicons(const ::java::lang::String & a0, jboolean a1, jboolean a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_2555570e, a0.this$, a1, a2)) {}

                    TriTaggerLexicons::TriTaggerLexicons(const ::java::io::InputStream & a0, const ::java::io::InputStream & a1, const ::java::io::InputStream & a2, jboolean a3) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_efbd1c95, a0.this$, a1.this$, a2.this$, a3)) {}

                    ::is::iclt::icenlp::core::tritagger::FreqLexicon TriTaggerLexicons::_get_freqLexicon() const
                    {
                        return ::is::iclt::icenlp::core::tritagger::FreqLexicon(env->getObjectField(this$, fids$[fid_freqLexicon]));
                    }

                    void TriTaggerLexicons::_set_freqLexicon(const ::is::iclt::icenlp::core::tritagger::FreqLexicon & a0) const
                    {
                        env->setObjectField(this$, fids$[fid_freqLexicon], a0.this$);
                    }

                    ::is::iclt::icenlp::core::tritagger::Ngrams TriTaggerLexicons::_get_ngrams() const
                    {
                        return ::is::iclt::icenlp::core::tritagger::Ngrams(env->getObjectField(this$, fids$[fid_ngrams]));
                    }

                    void TriTaggerLexicons::_set_ngrams(const ::is::iclt::icenlp::core::tritagger::Ngrams & a0) const
                    {
                        env->setObjectField(this$, fids$[fid_ngrams], a0.this$);
                    }
                }
            }
        }
    }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace is {
    namespace iclt {
        namespace icenlp {
            namespace core {
                namespace tritagger {
                    static PyObject *t_TriTaggerLexicons_cast_(PyTypeObject *type, PyObject *arg);
                    static PyObject *t_TriTaggerLexicons_instance_(PyTypeObject *type, PyObject *arg);
                    static int t_TriTaggerLexicons_init_(t_TriTaggerLexicons *self, PyObject *args, PyObject *kwds);
                    static PyObject *t_TriTaggerLexicons_get__freqLexicon(t_TriTaggerLexicons *self, void *data);
                    static int t_TriTaggerLexicons_set__freqLexicon(t_TriTaggerLexicons *self, PyObject *arg, void *data);
                    static PyObject *t_TriTaggerLexicons_get__ngrams(t_TriTaggerLexicons *self, void *data);
                    static int t_TriTaggerLexicons_set__ngrams(t_TriTaggerLexicons *self, PyObject *arg, void *data);

                    static PyGetSetDef t_TriTaggerLexicons__fields_[] = {
                        DECLARE_GETSET_FIELD(t_TriTaggerLexicons, freqLexicon),
                        DECLARE_GETSET_FIELD(t_TriTaggerLexicons, ngrams),
                        { NULL, NULL, NULL, NULL, NULL }
                    };

                    static PyMethodDef t_TriTaggerLexicons__methods_[] = {
                        DECLARE_METHOD(t_TriTaggerLexicons, cast_, METH_O | METH_CLASS),
                        DECLARE_METHOD(t_TriTaggerLexicons, instance_, METH_O | METH_CLASS),
                        { NULL, NULL, 0, NULL }
                    };

                    DECLARE_TYPE(TriTaggerLexicons, t_TriTaggerLexicons, ::java::lang::Object, TriTaggerLexicons, t_TriTaggerLexicons_init_, 0, 0, t_TriTaggerLexicons__fields_, 0, 0);

                    void t_TriTaggerLexicons::install(PyObject *module)
                    {
                        installType(&PY_TYPE(TriTaggerLexicons), module, "TriTaggerLexicons", 0);
                    }

                    void t_TriTaggerLexicons::initialize(PyObject *module)
                    {
                        PyDict_SetItemString(PY_TYPE(TriTaggerLexicons).tp_dict, "class_", make_descriptor(TriTaggerLexicons::initializeClass, 1));
                        PyDict_SetItemString(PY_TYPE(TriTaggerLexicons).tp_dict, "wrapfn_", make_descriptor(t_TriTaggerLexicons::wrap_jobject));
                        PyDict_SetItemString(PY_TYPE(TriTaggerLexicons).tp_dict, "boxfn_", make_descriptor(boxObject));
                        TriTaggerLexicons::initializeClass();
                        PyDict_SetItemString(PY_TYPE(TriTaggerLexicons).tp_dict, "lambdaEnding", make_descriptor(j2p(*TriTaggerLexicons::lambdaEnding)));
                        PyDict_SetItemString(PY_TYPE(TriTaggerLexicons).tp_dict, "lexEnding", make_descriptor(j2p(*TriTaggerLexicons::lexEnding)));
                        PyDict_SetItemString(PY_TYPE(TriTaggerLexicons).tp_dict, "modelName", make_descriptor(j2p(*TriTaggerLexicons::modelName)));
                        PyDict_SetItemString(PY_TYPE(TriTaggerLexicons).tp_dict, "modelPath", make_descriptor(j2p(*TriTaggerLexicons::modelPath)));
                        PyDict_SetItemString(PY_TYPE(TriTaggerLexicons).tp_dict, "ngramsEnding", make_descriptor(j2p(*TriTaggerLexicons::ngramsEnding)));
                    }

                    static PyObject *t_TriTaggerLexicons_cast_(PyTypeObject *type, PyObject *arg)
                    {
                        if (!(arg = castCheck(arg, TriTaggerLexicons::initializeClass, 1)))
                            return NULL;
                        return t_TriTaggerLexicons::wrap_Object(TriTaggerLexicons(((t_TriTaggerLexicons *) arg)->object.this$));
                    }
                    static PyObject *t_TriTaggerLexicons_instance_(PyTypeObject *type, PyObject *arg)
                    {
                        if (!castCheck(arg, TriTaggerLexicons::initializeClass, 0))
                            Py_RETURN_FALSE;
                        Py_RETURN_TRUE;
                    }

                    static int t_TriTaggerLexicons_init_(t_TriTaggerLexicons *self, PyObject *args, PyObject *kwds)
                    {
                        switch (PyTuple_GET_SIZE(args)) {
                          case 2:
                            {
                                ::java::lang::String a0((jobject) NULL);
                                jboolean a1;
                                TriTaggerLexicons object((jobject) NULL);

                                if (!parseArgs(args, "sZ", &a0, &a1))
                                {
                                    INT_CALL(object = TriTaggerLexicons(a0, a1));
                                    self->object = object;
                                    break;
                                }
                            }
                            {
                                ::is::iclt::icenlp::core::tritagger::TriTaggerResources a0((jobject) NULL);
                                jboolean a1;
                                TriTaggerLexicons object((jobject) NULL);

                                if (!parseArgs(args, "kZ", ::is::iclt::icenlp::core::tritagger::TriTaggerResources::initializeClass, &a0, &a1))
                                {
                                    INT_CALL(object = TriTaggerLexicons(a0, a1));
                                    self->object = object;
                                    break;
                                }
                            }
                            goto err;
                          case 3:
                            {
                                ::java::lang::String a0((jobject) NULL);
                                jboolean a1;
                                jboolean a2;
                                TriTaggerLexicons object((jobject) NULL);

                                if (!parseArgs(args, "sZZ", &a0, &a1, &a2))
                                {
                                    INT_CALL(object = TriTaggerLexicons(a0, a1, a2));
                                    self->object = object;
                                    break;
                                }
                            }
                            goto err;
                          case 4:
                            {
                                ::java::io::InputStream a0((jobject) NULL);
                                ::java::io::InputStream a1((jobject) NULL);
                                ::java::io::InputStream a2((jobject) NULL);
                                jboolean a3;
                                TriTaggerLexicons object((jobject) NULL);

                                if (!parseArgs(args, "kkkZ", ::java::io::InputStream::initializeClass, ::java::io::InputStream::initializeClass, ::java::io::InputStream::initializeClass, &a0, &a1, &a2, &a3))
                                {
                                    INT_CALL(object = TriTaggerLexicons(a0, a1, a2, a3));
                                    self->object = object;
                                    break;
                                }
                            }
                          default:
                          err:
                            PyErr_SetArgsError((PyObject *) self, "__init__", args);
                            return -1;
                        }

                        return 0;
                    }

                    static PyObject *t_TriTaggerLexicons_get__freqLexicon(t_TriTaggerLexicons *self, void *data)
                    {
                        ::is::iclt::icenlp::core::tritagger::FreqLexicon value((jobject) NULL);
                        OBJ_CALL(value = self->object._get_freqLexicon());
                        return ::is::iclt::icenlp::core::tritagger::t_FreqLexicon::wrap_Object(value);
                    }
                    static int t_TriTaggerLexicons_set__freqLexicon(t_TriTaggerLexicons *self, PyObject *arg, void *data)
                    {
                        ::is::iclt::icenlp::core::tritagger::FreqLexicon value((jobject) NULL);
                        if (!parseArg(arg, "k", ::is::iclt::icenlp::core::tritagger::FreqLexicon::initializeClass, &value))
                        {
                            INT_CALL(self->object._set_freqLexicon(value));
                            return 0;
                        }
                        PyErr_SetArgsError((PyObject *) self, "freqLexicon", arg);
                        return -1;
                    }

                    static PyObject *t_TriTaggerLexicons_get__ngrams(t_TriTaggerLexicons *self, void *data)
                    {
                        ::is::iclt::icenlp::core::tritagger::Ngrams value((jobject) NULL);
                        OBJ_CALL(value = self->object._get_ngrams());
                        return ::is::iclt::icenlp::core::tritagger::t_Ngrams::wrap_Object(value);
                    }
                    static int t_TriTaggerLexicons_set__ngrams(t_TriTaggerLexicons *self, PyObject *arg, void *data)
                    {
                        ::is::iclt::icenlp::core::tritagger::Ngrams value((jobject) NULL);
                        if (!parseArg(arg, "k", ::is::iclt::icenlp::core::tritagger::Ngrams::initializeClass, &value))
                        {
                            INT_CALL(self->object._set_ngrams(value));
                            return 0;
                        }
                        PyErr_SetArgsError((PyObject *) self, "ngrams", arg);
                        return -1;
                    }
                }
            }
        }
    }
}
#include <jni.h>
#include "JCCEnv.h"
#include "is/iclt/icenlp/core/iceparser/Phrase_APs.h"
#include "java/io/IOException.h"
#include "java/io/Reader.h"
#include "java/io/Writer.h"
#include "java/lang/Class.h"
#include "java/io/InputStream.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace is {
    namespace iclt {
        namespace icenlp {
            namespace core {
                namespace iceparser {

                    ::java::lang::Class *Phrase_APs::class$ = NULL;
                    jmethodID *Phrase_APs::mids$ = NULL;
                    jint Phrase_APs::YYEOF = (jint) 0;
                    jint Phrase_APs::YYINITIAL = (jint) 0;

                    jclass Phrase_APs::initializeClass()
                    {
                        if (!class$)
                        {

                            jclass cls = (jclass) env->findClass("is/iclt/icenlp/core/iceparser/Phrase_APs");

                            mids$ = new jmethodID[max_mid];
                            mids$[mid_init$_cf2e3c10] = env->getMethodID(cls, "<init>", "(Ljava/io/Reader;)V");
                            mids$[mid_init$_be2e4f90] = env->getMethodID(cls, "<init>", "(Ljava/io/InputStream;)V");
                            mids$[mid_main_4dd4540c] = env->getStaticMethodID(cls, "main", "([Ljava/lang/String;)V");
                            mids$[mid_parse_5bcd5850] = env->getMethodID(cls, "parse", "(Ljava/io/Writer;)V");
                            mids$[mid_yybegin_39c7bd3c] = env->getMethodID(cls, "yybegin", "(I)V");
                            mids$[mid_yycharat_39c7bd29] = env->getMethodID(cls, "yycharat", "(I)C");
                            mids$[mid_yyclose_54c6a166] = env->getMethodID(cls, "yyclose", "()V");
                            mids$[mid_yylength_54c6a179] = env->getMethodID(cls, "yylength", "()I");
                            mids$[mid_yylex_54c6a179] = env->getMethodID(cls, "yylex", "()I");
                            mids$[mid_yypushback_39c7bd3c] = env->getMethodID(cls, "yypushback", "(I)V");
                            mids$[mid_yyreset_cf2e3c10] = env->getMethodID(cls, "yyreset", "(Ljava/io/Reader;)V");
                            mids$[mid_yystate_54c6a179] = env->getMethodID(cls, "yystate", "()I");
                            mids$[mid_yytext_14c7b5c5] = env->getMethodID(cls, "yytext", "()Ljava/lang/String;");

                            class$ = (::java::lang::Class *) new JObject(cls);
                            cls = (jclass) class$->this$;

                            YYEOF = env->getStaticIntField(cls, "YYEOF");
                            YYINITIAL = env->getStaticIntField(cls, "YYINITIAL");
                        }
                        return (jclass) class$->this$;
                    }

                    Phrase_APs::Phrase_APs(const ::java::io::Reader & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_cf2e3c10, a0.this$)) {}

                    Phrase_APs::Phrase_APs(const ::java::io::InputStream & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_be2e4f90, a0.this$)) {}

                    void Phrase_APs::main(const JArray< ::java::lang::String > & a0)
                    {
                        jclass cls = initializeClass();
                        env->callStaticVoidMethod(cls, mids$[mid_main_4dd4540c], a0.this$);
                    }

                    void Phrase_APs::parse(const ::java::io::Writer & a0) const
                    {
                        env->callVoidMethod(this$, mids$[mid_parse_5bcd5850], a0.this$);
                    }

                    void Phrase_APs::yybegin(jint a0) const
                    {
                        env->callVoidMethod(this$, mids$[mid_yybegin_39c7bd3c], a0);
                    }

                    jchar Phrase_APs::yycharat(jint a0) const
                    {
                        return env->callCharMethod(this$, mids$[mid_yycharat_39c7bd29], a0);
                    }

                    void Phrase_APs::yyclose() const
                    {
                        env->callVoidMethod(this$, mids$[mid_yyclose_54c6a166]);
                    }

                    jint Phrase_APs::yylength() const
                    {
                        return env->callIntMethod(this$, mids$[mid_yylength_54c6a179]);
                    }

                    jint Phrase_APs::yylex() const
                    {
                        return env->callIntMethod(this$, mids$[mid_yylex_54c6a179]);
                    }

                    void Phrase_APs::yypushback(jint a0) const
                    {
                        env->callVoidMethod(this$, mids$[mid_yypushback_39c7bd3c], a0);
                    }

                    void Phrase_APs::yyreset(const ::java::io::Reader & a0) const
                    {
                        env->callVoidMethod(this$, mids$[mid_yyreset_cf2e3c10], a0.this$);
                    }

                    jint Phrase_APs::yystate() const
                    {
                        return env->callIntMethod(this$, mids$[mid_yystate_54c6a179]);
                    }

                    ::java::lang::String Phrase_APs::yytext() const
                    {
                        return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_yytext_14c7b5c5]));
                    }
                }
            }
        }
    }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace is {
    namespace iclt {
        namespace icenlp {
            namespace core {
                namespace iceparser {
                    static PyObject *t_Phrase_APs_cast_(PyTypeObject *type, PyObject *arg);
                    static PyObject *t_Phrase_APs_instance_(PyTypeObject *type, PyObject *arg);
                    static int t_Phrase_APs_init_(t_Phrase_APs *self, PyObject *args, PyObject *kwds);
                    static PyObject *t_Phrase_APs_main(PyTypeObject *type, PyObject *arg);
                    static PyObject *t_Phrase_APs_parse(t_Phrase_APs *self, PyObject *arg);
                    static PyObject *t_Phrase_APs_yybegin(t_Phrase_APs *self, PyObject *arg);
                    static PyObject *t_Phrase_APs_yycharat(t_Phrase_APs *self, PyObject *arg);
                    static PyObject *t_Phrase_APs_yyclose(t_Phrase_APs *self);
                    static PyObject *t_Phrase_APs_yylength(t_Phrase_APs *self);
                    static PyObject *t_Phrase_APs_yylex(t_Phrase_APs *self);
                    static PyObject *t_Phrase_APs_yypushback(t_Phrase_APs *self, PyObject *arg);
                    static PyObject *t_Phrase_APs_yyreset(t_Phrase_APs *self, PyObject *arg);
                    static PyObject *t_Phrase_APs_yystate(t_Phrase_APs *self);
                    static PyObject *t_Phrase_APs_yytext(t_Phrase_APs *self);

                    static PyMethodDef t_Phrase_APs__methods_[] = {
                        DECLARE_METHOD(t_Phrase_APs, cast_, METH_O | METH_CLASS),
                        DECLARE_METHOD(t_Phrase_APs, instance_, METH_O | METH_CLASS),
                        DECLARE_METHOD(t_Phrase_APs, main, METH_O | METH_CLASS),
                        DECLARE_METHOD(t_Phrase_APs, parse, METH_O),
                        DECLARE_METHOD(t_Phrase_APs, yybegin, METH_O),
                        DECLARE_METHOD(t_Phrase_APs, yycharat, METH_O),
                        DECLARE_METHOD(t_Phrase_APs, yyclose, METH_NOARGS),
                        DECLARE_METHOD(t_Phrase_APs, yylength, METH_NOARGS),
                        DECLARE_METHOD(t_Phrase_APs, yylex, METH_NOARGS),
                        DECLARE_METHOD(t_Phrase_APs, yypushback, METH_O),
                        DECLARE_METHOD(t_Phrase_APs, yyreset, METH_O),
                        DECLARE_METHOD(t_Phrase_APs, yystate, METH_NOARGS),
                        DECLARE_METHOD(t_Phrase_APs, yytext, METH_NOARGS),
                        { NULL, NULL, 0, NULL }
                    };

                    DECLARE_TYPE(Phrase_APs, t_Phrase_APs, ::java::lang::Object, Phrase_APs, t_Phrase_APs_init_, 0, 0, 0, 0, 0);

                    void t_Phrase_APs::install(PyObject *module)
                    {
                        installType(&PY_TYPE(Phrase_APs), module, "Phrase_APs", 0);
                    }

                    void t_Phrase_APs::initialize(PyObject *module)
                    {
                        PyDict_SetItemString(PY_TYPE(Phrase_APs).tp_dict, "class_", make_descriptor(Phrase_APs::initializeClass, 1));
                        PyDict_SetItemString(PY_TYPE(Phrase_APs).tp_dict, "wrapfn_", make_descriptor(t_Phrase_APs::wrap_jobject));
                        PyDict_SetItemString(PY_TYPE(Phrase_APs).tp_dict, "boxfn_", make_descriptor(boxObject));
                        Phrase_APs::initializeClass();
                        PyDict_SetItemString(PY_TYPE(Phrase_APs).tp_dict, "YYEOF", make_descriptor(Phrase_APs::YYEOF));
                        PyDict_SetItemString(PY_TYPE(Phrase_APs).tp_dict, "YYINITIAL", make_descriptor(Phrase_APs::YYINITIAL));
                    }

                    static PyObject *t_Phrase_APs_cast_(PyTypeObject *type, PyObject *arg)
                    {
                        if (!(arg = castCheck(arg, Phrase_APs::initializeClass, 1)))
                            return NULL;
                        return t_Phrase_APs::wrap_Object(Phrase_APs(((t_Phrase_APs *) arg)->object.this$));
                    }
                    static PyObject *t_Phrase_APs_instance_(PyTypeObject *type, PyObject *arg)
                    {
                        if (!castCheck(arg, Phrase_APs::initializeClass, 0))
                            Py_RETURN_FALSE;
                        Py_RETURN_TRUE;
                    }

                    static int t_Phrase_APs_init_(t_Phrase_APs *self, PyObject *args, PyObject *kwds)
                    {
                        switch (PyTuple_GET_SIZE(args)) {
                          case 1:
                            {
                                ::java::io::Reader a0((jobject) NULL);
                                Phrase_APs object((jobject) NULL);

                                if (!parseArgs(args, "k", ::java::io::Reader::initializeClass, &a0))
                                {
                                    INT_CALL(object = Phrase_APs(a0));
                                    self->object = object;
                                    break;
                                }
                            }
                            {
                                ::java::io::InputStream a0((jobject) NULL);
                                Phrase_APs object((jobject) NULL);

                                if (!parseArgs(args, "k", ::java::io::InputStream::initializeClass, &a0))
                                {
                                    INT_CALL(object = Phrase_APs(a0));
                                    self->object = object;
                                    break;
                                }
                            }
                          default:
                            PyErr_SetArgsError((PyObject *) self, "__init__", args);
                            return -1;
                        }

                        return 0;
                    }

                    static PyObject *t_Phrase_APs_main(PyTypeObject *type, PyObject *arg)
                    {
                        JArray< ::java::lang::String > a0((jobject) NULL);

                        if (!parseArg(arg, "[s", &a0))
                        {
                            OBJ_CALL(::is::iclt::icenlp::core::iceparser::Phrase_APs::main(a0));
                            Py_RETURN_NONE;
                        }

                        PyErr_SetArgsError(type, "main", arg);
                        return NULL;
                    }

                    static PyObject *t_Phrase_APs_parse(t_Phrase_APs *self, PyObject *arg)
                    {
                        ::java::io::Writer a0((jobject) NULL);

                        if (!parseArg(arg, "k", ::java::io::Writer::initializeClass, &a0))
                        {
                            OBJ_CALL(self->object.parse(a0));
                            Py_RETURN_NONE;
                        }

                        PyErr_SetArgsError((PyObject *) self, "parse", arg);
                        return NULL;
                    }

                    static PyObject *t_Phrase_APs_yybegin(t_Phrase_APs *self, PyObject *arg)
                    {
                        jint a0;

                        if (!parseArg(arg, "I", &a0))
                        {
                            OBJ_CALL(self->object.yybegin(a0));
                            Py_RETURN_NONE;
                        }

                        PyErr_SetArgsError((PyObject *) self, "yybegin", arg);
                        return NULL;
                    }

                    static PyObject *t_Phrase_APs_yycharat(t_Phrase_APs *self, PyObject *arg)
                    {
                        jint a0;
                        jchar result;

                        if (!parseArg(arg, "I", &a0))
                        {
                            OBJ_CALL(result = self->object.yycharat(a0));
                            return PyUnicode_FromUnicode((Py_UNICODE *) &result, 1);
                        }

                        PyErr_SetArgsError((PyObject *) self, "yycharat", arg);
                        return NULL;
                    }

                    static PyObject *t_Phrase_APs_yyclose(t_Phrase_APs *self)
                    {
                        OBJ_CALL(self->object.yyclose());
                        Py_RETURN_NONE;
                    }

                    static PyObject *t_Phrase_APs_yylength(t_Phrase_APs *self)
                    {
                        jint result;
                        OBJ_CALL(result = self->object.yylength());
                        return PyInt_FromLong((long) result);
                    }

                    static PyObject *t_Phrase_APs_yylex(t_Phrase_APs *self)
                    {
                        jint result;
                        OBJ_CALL(result = self->object.yylex());
                        return PyInt_FromLong((long) result);
                    }

                    static PyObject *t_Phrase_APs_yypushback(t_Phrase_APs *self, PyObject *arg)
                    {
                        jint a0;

                        if (!parseArg(arg, "I", &a0))
                        {
                            OBJ_CALL(self->object.yypushback(a0));
                            Py_RETURN_NONE;
                        }

                        PyErr_SetArgsError((PyObject *) self, "yypushback", arg);
                        return NULL;
                    }

                    static PyObject *t_Phrase_APs_yyreset(t_Phrase_APs *self, PyObject *arg)
                    {
                        ::java::io::Reader a0((jobject) NULL);

                        if (!parseArg(arg, "k", ::java::io::Reader::initializeClass, &a0))
                        {
                            OBJ_CALL(self->object.yyreset(a0));
                            Py_RETURN_NONE;
                        }

                        PyErr_SetArgsError((PyObject *) self, "yyreset", arg);
                        return NULL;
                    }

                    static PyObject *t_Phrase_APs_yystate(t_Phrase_APs *self)
                    {
                        jint result;
                        OBJ_CALL(result = self->object.yystate());
                        return PyInt_FromLong((long) result);
                    }

                    static PyObject *t_Phrase_APs_yytext(t_Phrase_APs *self)
                    {
                        ::java::lang::String result((jobject) NULL);
                        OBJ_CALL(result = self->object.yytext());
                        return j2p(result);
                    }
                }
            }
        }
    }
}
#include <jni.h>
#include "JCCEnv.h"
#include "is/iclt/icenlp/core/tokenizer/IceTokenTags.h"
#include "is/iclt/icenlp/core/tokenizer/IceTokenTags$SVOMark.h"
#include "is/iclt/icenlp/core/utils/IceTag$WordClass.h"
#include "java/lang/Class.h"
#include "is/iclt/icenlp/core/tokenizer/IceTokenTags$Condition.h"
#include "is/iclt/icenlp/core/tokenizer/IceTokenTags$UnknownType.h"
#include "is/iclt/icenlp/core/tokenizer/Token$TokenCode.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace is {
    namespace iclt {
        namespace icenlp {
            namespace core {
                namespace tokenizer {

                    ::java::lang::Class *IceTokenTags::class$ = NULL;
                    jmethodID *IceTokenTags::mids$ = NULL;

                    jclass IceTokenTags::initializeClass()
                    {
                        if (!class$)
                        {

                            jclass cls = (jclass) env->findClass("is/iclt/icenlp/core/tokenizer/IceTokenTags");

                            mids$ = new jmethodID[max_mid];
                            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                            mids$[mid_init$_7f9b69a7] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lis/iclt/icenlp/core/tokenizer/Token$TokenCode;)V");
                            mids$[mid_addArticle_54c6a166] = env->getMethodID(cls, "addArticle", "()V");
                            mids$[mid_addInfinitiveVerbForm_54c6a166] = env->getMethodID(cls, "addInfinitiveVerbForm", "()V");
                            mids$[mid_addTag_5fdc3f48] = env->getMethodID(cls, "addTag", "(Ljava/lang/String;)V");
                            mids$[mid_addTagFront_5fdc3f48] = env->getMethodID(cls, "addTagFront", "(Ljava/lang/String;)V");
                            mids$[mid_allWordClasses_14c7b5c5] = env->getMethodID(cls, "allWordClasses", "()Ljava/lang/String;");
                            mids$[mid_caseMatch_9ee1b518] = env->getMethodID(cls, "caseMatch", "(Lis/iclt/icenlp/core/tokenizer/IceTokenTags;)Z");
                            mids$[mid_cleanTags_54c6a166] = env->getMethodID(cls, "cleanTags", "()V");
                            mids$[mid_genderMatch_9ee1b518] = env->getMethodID(cls, "genderMatch", "(Lis/iclt/icenlp/core/tokenizer/IceTokenTags;)Z");
                            mids$[mid_genderNumberCaseMatch_9ee1b518] = env->getMethodID(cls, "genderNumberCaseMatch", "(Lis/iclt/icenlp/core/tokenizer/IceTokenTags;)Z");
                            mids$[mid_getFirstWordClass_14c7b5c5] = env->getMethodID(cls, "getFirstWordClass", "()Ljava/lang/String;");
                            mids$[mid_getSVOMark_130ccb3e] = env->getMethodID(cls, "getSVOMark", "()Lis/iclt/icenlp/core/tokenizer/IceTokenTags$SVOMark;");
                            mids$[mid_getSVOMarkString_14c7b5c5] = env->getMethodID(cls, "getSVOMarkString", "()Ljava/lang/String;");
                            mids$[mid_hasArticle_54c6a16a] = env->getMethodID(cls, "hasArticle", "()Z");
                            mids$[mid_hasGender_54c6a16a] = env->getMethodID(cls, "hasGender", "()Z");
                            mids$[mid_isAdjective_54c6a16a] = env->getMethodID(cls, "isAdjective", "()Z");
                            mids$[mid_isAdjectiveComparative_54c6a16a] = env->getMethodID(cls, "isAdjectiveComparative", "()Z");
                            mids$[mid_isAdjectiveIndeclineable_54c6a16a] = env->getMethodID(cls, "isAdjectiveIndeclineable", "()Z");
                            mids$[mid_isAdjectivePositive_54c6a16a] = env->getMethodID(cls, "isAdjectivePositive", "()Z");
                            mids$[mid_isAdjectiveStrong_54c6a16a] = env->getMethodID(cls, "isAdjectiveStrong", "()Z");
                            mids$[mid_isAdjectiveSuper_54c6a16a] = env->getMethodID(cls, "isAdjectiveSuper", "()Z");
                            mids$[mid_isAdjectiveWeak_54c6a16a] = env->getMethodID(cls, "isAdjectiveWeak", "()Z");
                            mids$[mid_isAdverb_54c6a16a] = env->getMethodID(cls, "isAdverb", "()Z");
                            mids$[mid_isAdverbComparative_54c6a16a] = env->getMethodID(cls, "isAdverbComparative", "()Z");
                            mids$[mid_isAdverbSuper_54c6a16a] = env->getMethodID(cls, "isAdverbSuper", "()Z");
                            mids$[mid_isArticle_54c6a16a] = env->getMethodID(cls, "isArticle", "()Z");
                            mids$[mid_isCase_87fd5456] = env->getMethodID(cls, "isCase", "(C)Z");
                            mids$[mid_isCompound_54c6a16a] = env->getMethodID(cls, "isCompound", "()Z");
                            mids$[mid_isCondition_db04de5b] = env->getMethodID(cls, "isCondition", "(Lis/iclt/icenlp/core/tokenizer/IceTokenTags$Condition;)Z");
                            mids$[mid_isConjunction_54c6a16a] = env->getMethodID(cls, "isConjunction", "()Z");
                            mids$[mid_isDeclension_87fd5456] = env->getMethodID(cls, "isDeclension", "(C)Z");
                            mids$[mid_isDemonstrativePronoun_54c6a16a] = env->getMethodID(cls, "isDemonstrativePronoun", "()Z");
                            mids$[mid_isExclamation_54c6a16a] = env->getMethodID(cls, "isExclamation", "()Z");
                            mids$[mid_isGenderPerson_87fd5456] = env->getMethodID(cls, "isGenderPerson", "(C)Z");
                            mids$[mid_isIndefinitePronoun_54c6a16a] = env->getMethodID(cls, "isIndefinitePronoun", "()Z");
                            mids$[mid_isInfinitive_54c6a16a] = env->getMethodID(cls, "isInfinitive", "()Z");
                            mids$[mid_isInterrogativePronoun_54c6a16a] = env->getMethodID(cls, "isInterrogativePronoun", "()Z");
                            mids$[mid_isNominal_54c6a16a] = env->getMethodID(cls, "isNominal", "()Z");
                            mids$[mid_isNoun_54c6a16a] = env->getMethodID(cls, "isNoun", "()Z");
                            mids$[mid_isNumber_87fd5456] = env->getMethodID(cls, "isNumber", "(C)Z");
                            mids$[mid_isNumeral_54c6a16a] = env->getMethodID(cls, "isNumeral", "()Z");
                            mids$[mid_isNumeralOrdinal_54c6a16a] = env->getMethodID(cls, "isNumeralOrdinal", "()Z");
                            mids$[mid_isOnlyAdjectiveSuper_54c6a16a] = env->getMethodID(cls, "isOnlyAdjectiveSuper", "()Z");
                            mids$[mid_isOnlyAdverbSuper_54c6a16a] = env->getMethodID(cls, "isOnlyAdverbSuper", "()Z");
                            mids$[mid_isOnlyCase_87fd5456] = env->getMethodID(cls, "isOnlyCase", "(C)Z");
                            mids$[mid_isOnlyGender_87fd5456] = env->getMethodID(cls, "isOnlyGender", "(C)Z");
                            mids$[mid_isOnlyNumber_87fd5456] = env->getMethodID(cls, "isOnlyNumber", "(C)Z");
                            mids$[mid_isOnlyOneGender_54c6a16a] = env->getMethodID(cls, "isOnlyOneGender", "()Z");
                            mids$[mid_isOnlyOneGenderNumber_54c6a16a] = env->getMethodID(cls, "isOnlyOneGenderNumber", "()Z");
                            mids$[mid_isOnlyVerbAny_54c6a16a] = env->getMethodID(cls, "isOnlyVerbAny", "()Z");
                            mids$[mid_isOnlyWordClass_0dc1bb34] = env->getMethodID(cls, "isOnlyWordClass", "(Lis/iclt/icenlp/core/utils/IceTag$WordClass;)Z");
                            mids$[mid_isOtherThanWordClass_0dc1bb34] = env->getMethodID(cls, "isOtherThanWordClass", "(Lis/iclt/icenlp/core/utils/IceTag$WordClass;)Z");
                            mids$[mid_isPersonalPronoun_54c6a16a] = env->getMethodID(cls, "isPersonalPronoun", "()Z");
                            mids$[mid_isPossessivePronoun_54c6a16a] = env->getMethodID(cls, "isPossessivePronoun", "()Z");
                            mids$[mid_isPreposition_54c6a16a] = env->getMethodID(cls, "isPreposition", "()Z");
                            mids$[mid_isPronoun_54c6a16a] = env->getMethodID(cls, "isPronoun", "()Z");
                            mids$[mid_isProperNoun_54c6a16a] = env->getMethodID(cls, "isProperNoun", "()Z");
                            mids$[mid_isReflexivePronoun_54c6a16a] = env->getMethodID(cls, "isReflexivePronoun", "()Z");
                            mids$[mid_isRelativeConjunction_54c6a16a] = env->getMethodID(cls, "isRelativeConjunction", "()Z");
                            mids$[mid_isRelativePronoun_54c6a16a] = env->getMethodID(cls, "isRelativePronoun", "()Z");
                            mids$[mid_isSVOMainSubject_54c6a16a] = env->getMethodID(cls, "isSVOMainSubject", "()Z");
                            mids$[mid_isSVOMainVerb_54c6a16a] = env->getMethodID(cls, "isSVOMainVerb", "()Z");
                            mids$[mid_isSVONone_54c6a16a] = env->getMethodID(cls, "isSVONone", "()Z");
                            mids$[mid_isSVOObject_54c6a16a] = env->getMethodID(cls, "isSVOObject", "()Z");
                            mids$[mid_isSVOPrepPhrase_54c6a16a] = env->getMethodID(cls, "isSVOPrepPhrase", "()Z");
                            mids$[mid_isSVOSubject_54c6a16a] = env->getMethodID(cls, "isSVOSubject", "()Z");
                            mids$[mid_isSVOVerb_54c6a16a] = env->getMethodID(cls, "isSVOVerb", "()Z");
                            mids$[mid_isUnknownEnding_54c6a16a] = env->getMethodID(cls, "isUnknownEnding", "()Z");
                            mids$[mid_isUnknownGuessed_54c6a16a] = env->getMethodID(cls, "isUnknownGuessed", "()Z");
                            mids$[mid_isUnknownMorpho_54c6a16a] = env->getMethodID(cls, "isUnknownMorpho", "()Z");
                            mids$[mid_isUnknownNone_54c6a16a] = env->getMethodID(cls, "isUnknownNone", "()Z");
                            mids$[mid_isUnknownProperNoun_54c6a16a] = env->getMethodID(cls, "isUnknownProperNoun", "()Z");
                            mids$[mid_isVerb_54c6a16a] = env->getMethodID(cls, "isVerb", "()Z");
                            mids$[mid_isVerbActive_54c6a16a] = env->getMethodID(cls, "isVerbActive", "()Z");
                            mids$[mid_isVerbAny_54c6a16a] = env->getMethodID(cls, "isVerbAny", "()Z");
                            mids$[mid_isVerbAuxiliary_54c6a16a] = env->getMethodID(cls, "isVerbAuxiliary", "()Z");
                            mids$[mid_isVerbBe_54c6a16a] = env->getMethodID(cls, "isVerbBe", "()Z");
                            mids$[mid_isVerbCaseMarking_54c6a16a] = env->getMethodID(cls, "isVerbCaseMarking", "()Z");
                            mids$[mid_isVerbImperative_54c6a16a] = env->getMethodID(cls, "isVerbImperative", "()Z");
                            mids$[mid_isVerbIndicative_54c6a16a] = env->getMethodID(cls, "isVerbIndicative", "()Z");
                            mids$[mid_isVerbInf_54c6a16a] = env->getMethodID(cls, "isVerbInf", "()Z");
                            mids$[mid_isVerbInfinitive_54c6a16a] = env->getMethodID(cls, "isVerbInfinitive", "()Z");
                            mids$[mid_isVerbMiddleForm_54c6a16a] = env->getMethodID(cls, "isVerbMiddleForm", "()Z");
                            mids$[mid_isVerbPastPart_54c6a16a] = env->getMethodID(cls, "isVerbPastPart", "()Z");
                            mids$[mid_isVerbPresentPart_54c6a16a] = env->getMethodID(cls, "isVerbPresentPart", "()Z");
                            mids$[mid_isVerbSpecialAuxiliary_54c6a16a] = env->getMethodID(cls, "isVerbSpecialAuxiliary", "()Z");
                            mids$[mid_isVerbSpecialInf_54c6a16a] = env->getMethodID(cls, "isVerbSpecialInf", "()Z");
                            mids$[mid_isVerbSubjunctive_54c6a16a] = env->getMethodID(cls, "isVerbSubjunctive", "()Z");
                            mids$[mid_isVerbSupine_54c6a16a] = env->getMethodID(cls, "isVerbSupine", "()Z");
                            mids$[mid_isWordClass_0dc1bb34] = env->getMethodID(cls, "isWordClass", "(Lis/iclt/icenlp/core/utils/IceTag$WordClass;)Z");
                            mids$[mid_makeCopy_265fd945] = env->getMethodID(cls, "makeCopy", "()Lis/iclt/icenlp/core/tokenizer/IceTokenTags;");
                            mids$[mid_numCases_54c6a179] = env->getMethodID(cls, "numCases", "()I");
                            mids$[mid_numGenders_54c6a179] = env->getMethodID(cls, "numGenders", "()I");
                            mids$[mid_numNominals_54c6a179] = env->getMethodID(cls, "numNominals", "()I");
                            mids$[mid_numberCaseMatch_9ee1b518] = env->getMethodID(cls, "numberCaseMatch", "(Lis/iclt/icenlp/core/tokenizer/IceTokenTags;)Z");
                            mids$[mid_numberMatch_9ee1b518] = env->getMethodID(cls, "numberMatch", "(Lis/iclt/icenlp/core/tokenizer/IceTokenTags;)Z");
                            mids$[mid_personNumberMatch_9ee1b518] = env->getMethodID(cls, "personNumberMatch", "(Lis/iclt/icenlp/core/tokenizer/IceTokenTags;)Z");
                            mids$[mid_removeAllBut_0dc1bb38] = env->getMethodID(cls, "removeAllBut", "(Lis/iclt/icenlp/core/utils/IceTag$WordClass;)V");
                            mids$[mid_removeAllButCase_87fd545a] = env->getMethodID(cls, "removeAllButCase", "(C)V");
                            mids$[mid_removeAllButGender_64a6756b] = env->getMethodID(cls, "removeAllButGender", "(CZ)V");
                            mids$[mid_removeAllButNounAdj_54c6a166] = env->getMethodID(cls, "removeAllButNounAdj", "()V");
                            mids$[mid_removeAllButNumber_87fd545a] = env->getMethodID(cls, "removeAllButNumber", "(C)V");
                            mids$[mid_removeAllButProperNounType_87fd545a] = env->getMethodID(cls, "removeAllButProperNounType", "(C)V");
                            mids$[mid_removeAllButVerbs_bb0c767f] = env->getMethodID(cls, "removeAllButVerbs", "(Z)V");
                            mids$[mid_removeArticle_54c6a166] = env->getMethodID(cls, "removeArticle", "()V");
                            mids$[mid_removeCase_64a6756b] = env->getMethodID(cls, "removeCase", "(CZ)V");
                            mids$[mid_removeGender_64a6756b] = env->getMethodID(cls, "removeGender", "(CZ)V");
                            mids$[mid_removeNumber_64a6756b] = env->getMethodID(cls, "removeNumber", "(CZ)V");
                            mids$[mid_removeOnCondition_f94153a7] = env->getMethodID(cls, "removeOnCondition", "(Lis/iclt/icenlp/core/tokenizer/IceTokenTags$Condition;Lis/iclt/icenlp/core/utils/IceTag$WordClass;C)V");
                            mids$[mid_removePronouns_54c6a166] = env->getMethodID(cls, "removePronouns", "()V");
                            mids$[mid_removeProperNounType_87fd545a] = env->getMethodID(cls, "removeProperNounType", "(C)V");
                            mids$[mid_removeVerbForm_db04de57] = env->getMethodID(cls, "removeVerbForm", "(Lis/iclt/icenlp/core/tokenizer/IceTokenTags$Condition;)V");
                            mids$[mid_removeVerbs_54c6a166] = env->getMethodID(cls, "removeVerbs", "()V");
                            mids$[mid_removeWordClass_0dc1bb38] = env->getMethodID(cls, "removeWordClass", "(Lis/iclt/icenlp/core/utils/IceTag$WordClass;)V");
                            mids$[mid_setCase_87fd545a] = env->getMethodID(cls, "setCase", "(C)V");
                            mids$[mid_setCompound_bb0c767f] = env->getMethodID(cls, "setCompound", "(Z)V");
                            mids$[mid_setDeclension_87fd545a] = env->getMethodID(cls, "setDeclension", "(C)V");
                            mids$[mid_setDegree_87fd545a] = env->getMethodID(cls, "setDegree", "(C)V");
                            mids$[mid_setGender_87fd545a] = env->getMethodID(cls, "setGender", "(C)V");
                            mids$[mid_setPlural_54c6a166] = env->getMethodID(cls, "setPlural", "()V");
                            mids$[mid_setProperNameType_87fd545a] = env->getMethodID(cls, "setProperNameType", "(C)V");
                            mids$[mid_setSVOMark_7452ef2b] = env->getMethodID(cls, "setSVOMark", "(Lis/iclt/icenlp/core/tokenizer/IceTokenTags$SVOMark;)V");
                            mids$[mid_setUnknownType_ebf9e07a] = env->getMethodID(cls, "setUnknownType", "(Lis/iclt/icenlp/core/tokenizer/IceTokenTags$UnknownType;)V");
                            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
                            mids$[mid_toStringSpecial_14c7b5c5] = env->getMethodID(cls, "toStringSpecial", "()Ljava/lang/String;");

                            class$ = (::java::lang::Class *) new JObject(cls);
                        }
                        return (jclass) class$->this$;
                    }

                    IceTokenTags::IceTokenTags() : ::is::iclt::icenlp::core::tokenizer::TokenTags(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

                    IceTokenTags::IceTokenTags(const ::java::lang::String & a0, const ::is::iclt::icenlp::core::tokenizer::Token$TokenCode & a1) : ::is::iclt::icenlp::core::tokenizer::TokenTags(env->newObject(initializeClass, &mids$, mid_init$_7f9b69a7, a0.this$, a1.this$)) {}

                    void IceTokenTags::addArticle() const
                    {
                        env->callVoidMethod(this$, mids$[mid_addArticle_54c6a166]);
                    }

                    void IceTokenTags::addInfinitiveVerbForm() const
                    {
                        env->callVoidMethod(this$, mids$[mid_addInfinitiveVerbForm_54c6a166]);
                    }

                    void IceTokenTags::addTag(const ::java::lang::String & a0) const
                    {
                        env->callVoidMethod(this$, mids$[mid_addTag_5fdc3f48], a0.this$);
                    }

                    void IceTokenTags::addTagFront(const ::java::lang::String & a0) const
                    {
                        env->callVoidMethod(this$, mids$[mid_addTagFront_5fdc3f48], a0.this$);
                    }

                    ::java::lang::String IceTokenTags::allWordClasses() const
                    {
                        return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_allWordClasses_14c7b5c5]));
                    }

                    jboolean IceTokenTags::caseMatch(const IceTokenTags & a0) const
                    {
                        return env->callBooleanMethod(this$, mids$[mid_caseMatch_9ee1b518], a0.this$);
                    }

                    void IceTokenTags::cleanTags() const
                    {
                        env->callVoidMethod(this$, mids$[mid_cleanTags_54c6a166]);
                    }

                    jboolean IceTokenTags::genderMatch(const IceTokenTags & a0) const
                    {
                        return env->callBooleanMethod(this$, mids$[mid_genderMatch_9ee1b518], a0.this$);
                    }

                    jboolean IceTokenTags::genderNumberCaseMatch(const IceTokenTags & a0) const
                    {
                        return env->callBooleanMethod(this$, mids$[mid_genderNumberCaseMatch_9ee1b518], a0.this$);
                    }

                    ::java::lang::String IceTokenTags::getFirstWordClass() const
                    {
                        return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getFirstWordClass_14c7b5c5]));
                    }

                    ::is::iclt::icenlp::core::tokenizer::IceTokenTags$SVOMark IceTokenTags::getSVOMark() const
                    {
                        return ::is::iclt::icenlp::core::tokenizer::IceTokenTags$SVOMark(env->callObjectMethod(this$, mids$[mid_getSVOMark_130ccb3e]));
                    }

                    ::java::lang::String IceTokenTags::getSVOMarkString() const
                    {
                        return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getSVOMarkString_14c7b5c5]));
                    }

                    jboolean IceTokenTags::hasArticle() const
                    {
                        return env->callBooleanMethod(this$, mids$[mid_hasArticle_54c6a16a]);
                    }

                    jboolean IceTokenTags::hasGender() const
                    {
                        return env->callBooleanMethod(this$, mids$[mid_hasGender_54c6a16a]);
                    }

                    jboolean IceTokenTags::isAdjective() const
                    {
                        return env->callBooleanMethod(this$, mids$[mid_isAdjective_54c6a16a]);
                    }

                    jboolean IceTokenTags::isAdjectiveComparative() const
                    {
                        return env->callBooleanMethod(this$, mids$[mid_isAdjectiveComparative_54c6a16a]);
                    }

                    jboolean IceTokenTags::isAdjectiveIndeclineable() const
                    {
                        return env->callBooleanMethod(this$, mids$[mid_isAdjectiveIndeclineable_54c6a16a]);
                    }

                    jboolean IceTokenTags::isAdjectivePositive() const
                    {
                        return env->callBooleanMethod(this$, mids$[mid_isAdjectivePositive_54c6a16a]);
                    }

                    jboolean IceTokenTags::isAdjectiveStrong() const
                    {
                        return env->callBooleanMethod(this$, mids$[mid_isAdjectiveStrong_54c6a16a]);
                    }

                    jboolean IceTokenTags::isAdjectiveSuper() const
                    {
                        return env->callBooleanMethod(this$, mids$[mid_isAdjectiveSuper_54c6a16a]);
                    }

                    jboolean IceTokenTags::isAdjectiveWeak() const
                    {
                        return env->callBooleanMethod(this$, mids$[mid_isAdjectiveWeak_54c6a16a]);
                    }

                    jboolean IceTokenTags::isAdverb() const
                    {
                        return env->callBooleanMethod(this$, mids$[mid_isAdverb_54c6a16a]);
                    }

                    jboolean IceTokenTags::isAdverbComparative() const
                    {
                        return env->callBooleanMethod(this$, mids$[mid_isAdverbComparative_54c6a16a]);
                    }

                    jboolean IceTokenTags::isAdverbSuper() const
                    {
                        return env->callBooleanMethod(this$, mids$[mid_isAdverbSuper_54c6a16a]);
                    }

                    jboolean IceTokenTags::isArticle() const
                    {
                        return env->callBooleanMethod(this$, mids$[mid_isArticle_54c6a16a]);
                    }

                    jboolean IceTokenTags::isCase(jchar a0) const
                    {
                        return env->callBooleanMethod(this$, mids$[mid_isCase_87fd5456], a0);
                    }

                    jboolean IceTokenTags::isCompound() const
                    {
                        return env->callBooleanMethod(this$, mids$[mid_isCompound_54c6a16a]);
                    }

                    jboolean IceTokenTags::isCondition(const ::is::iclt::icenlp::core::tokenizer::IceTokenTags$Condition & a0) const
                    {
                        return env->callBooleanMethod(this$, mids$[mid_isCondition_db04de5b], a0.this$);
                    }

                    jboolean IceTokenTags::isConjunction() const
                    {
                        return env->callBooleanMethod(this$, mids$[mid_isConjunction_54c6a16a]);
                    }

                    jboolean IceTokenTags::isDeclension(jchar a0) const
                    {
                        return env->callBooleanMethod(this$, mids$[mid_isDeclension_87fd5456], a0);
                    }

                    jboolean IceTokenTags::isDemonstrativePronoun() const
                    {
                        return env->callBooleanMethod(this$, mids$[mid_isDemonstrativePronoun_54c6a16a]);
                    }

                    jboolean IceTokenTags::isExclamation() const
                    {
                        return env->callBooleanMethod(this$, mids$[mid_isExclamation_54c6a16a]);
                    }

                    jboolean IceTokenTags::isGenderPerson(jchar a0) const
                    {
                        return env->callBooleanMethod(this$, mids$[mid_isGenderPerson_87fd5456], a0);
                    }

                    jboolean IceTokenTags::isIndefinitePronoun() const
                    {
                        return env->callBooleanMethod(this$, mids$[mid_isIndefinitePronoun_54c6a16a]);
                    }

                    jboolean IceTokenTags::isInfinitive() const
                    {
                        return env->callBooleanMethod(this$, mids$[mid_isInfinitive_54c6a16a]);
                    }

                    jboolean IceTokenTags::isInterrogativePronoun() const
                    {
                        return env->callBooleanMethod(this$, mids$[mid_isInterrogativePronoun_54c6a16a]);
                    }

                    jboolean IceTokenTags::isNominal() const
                    {
                        return env->callBooleanMethod(this$, mids$[mid_isNominal_54c6a16a]);
                    }

                    jboolean IceTokenTags::isNoun() const
                    {
                        return env->callBooleanMethod(this$, mids$[mid_isNoun_54c6a16a]);
                    }

                    jboolean IceTokenTags::isNumber(jchar a0) const
                    {
                        return env->callBooleanMethod(this$, mids$[mid_isNumber_87fd5456], a0);
                    }

                    jboolean IceTokenTags::isNumeral() const
                    {
                        return env->callBooleanMethod(this$, mids$[mid_isNumeral_54c6a16a]);
                    }

                    jboolean IceTokenTags::isNumeralOrdinal() const
                    {
                        return env->callBooleanMethod(this$, mids$[mid_isNumeralOrdinal_54c6a16a]);
                    }

                    jboolean IceTokenTags::isOnlyAdjectiveSuper() const
                    {
                        return env->callBooleanMethod(this$, mids$[mid_isOnlyAdjectiveSuper_54c6a16a]);
                    }

                    jboolean IceTokenTags::isOnlyAdverbSuper() const
                    {
                        return env->callBooleanMethod(this$, mids$[mid_isOnlyAdverbSuper_54c6a16a]);
                    }

                    jboolean IceTokenTags::isOnlyCase(jchar a0) const
                    {
                        return env->callBooleanMethod(this$, mids$[mid_isOnlyCase_87fd5456], a0);
                    }

                    jboolean IceTokenTags::isOnlyGender(jchar a0) const
                    {
                        return env->callBooleanMethod(this$, mids$[mid_isOnlyGender_87fd5456], a0);
                    }

                    jboolean IceTokenTags::isOnlyNumber(jchar a0) const
                    {
                        return env->callBooleanMethod(this$, mids$[mid_isOnlyNumber_87fd5456], a0);
                    }

                    jboolean IceTokenTags::isOnlyOneGender() const
                    {
                        return env->callBooleanMethod(this$, mids$[mid_isOnlyOneGender_54c6a16a]);
                    }

                    jboolean IceTokenTags::isOnlyOneGenderNumber() const
                    {
                        return env->callBooleanMethod(this$, mids$[mid_isOnlyOneGenderNumber_54c6a16a]);
                    }

                    jboolean IceTokenTags::isOnlyVerbAny() const
                    {
                        return env->callBooleanMethod(this$, mids$[mid_isOnlyVerbAny_54c6a16a]);
                    }

                    jboolean IceTokenTags::isOnlyWordClass(const ::is::iclt::icenlp::core::utils::IceTag$WordClass & a0) const
                    {
                        return env->callBooleanMethod(this$, mids$[mid_isOnlyWordClass_0dc1bb34], a0.this$);
                    }

                    jboolean IceTokenTags::isOtherThanWordClass(const ::is::iclt::icenlp::core::utils::IceTag$WordClass & a0) const
                    {
                        return env->callBooleanMethod(this$, mids$[mid_isOtherThanWordClass_0dc1bb34], a0.this$);
                    }

                    jboolean IceTokenTags::isPersonalPronoun() const
                    {
                        return env->callBooleanMethod(this$, mids$[mid_isPersonalPronoun_54c6a16a]);
                    }

                    jboolean IceTokenTags::isPossessivePronoun() const
                    {
                        return env->callBooleanMethod(this$, mids$[mid_isPossessivePronoun_54c6a16a]);
                    }

                    jboolean IceTokenTags::isPreposition() const
                    {
                        return env->callBooleanMethod(this$, mids$[mid_isPreposition_54c6a16a]);
                    }

                    jboolean IceTokenTags::isPronoun() const
                    {
                        return env->callBooleanMethod(this$, mids$[mid_isPronoun_54c6a16a]);
                    }

                    jboolean IceTokenTags::isProperNoun() const
                    {
                        return env->callBooleanMethod(this$, mids$[mid_isProperNoun_54c6a16a]);
                    }

                    jboolean IceTokenTags::isReflexivePronoun() const
                    {
                        return env->callBooleanMethod(this$, mids$[mid_isReflexivePronoun_54c6a16a]);
                    }

                    jboolean IceTokenTags::isRelativeConjunction() const
                    {
                        return env->callBooleanMethod(this$, mids$[mid_isRelativeConjunction_54c6a16a]);
                    }

                    jboolean IceTokenTags::isRelativePronoun() const
                    {
                        return env->callBooleanMethod(this$, mids$[mid_isRelativePronoun_54c6a16a]);
                    }

                    jboolean IceTokenTags::isSVOMainSubject() const
                    {
                        return env->callBooleanMethod(this$, mids$[mid_isSVOMainSubject_54c6a16a]);
                    }

                    jboolean IceTokenTags::isSVOMainVerb() const
                    {
                        return env->callBooleanMethod(this$, mids$[mid_isSVOMainVerb_54c6a16a]);
                    }

                    jboolean IceTokenTags::isSVONone() const
                    {
                        return env->callBooleanMethod(this$, mids$[mid_isSVONone_54c6a16a]);
                    }

                    jboolean IceTokenTags::isSVOObject() const
                    {
                        return env->callBooleanMethod(this$, mids$[mid_isSVOObject_54c6a16a]);
                    }

                    jboolean IceTokenTags::isSVOPrepPhrase() const
                    {
                        return env->callBooleanMethod(this$, mids$[mid_isSVOPrepPhrase_54c6a16a]);
                    }

                    jboolean IceTokenTags::isSVOSubject() const
                    {
                        return env->callBooleanMethod(this$, mids$[mid_isSVOSubject_54c6a16a]);
                    }

                    jboolean IceTokenTags::isSVOVerb() const
                    {
                        return env->callBooleanMethod(this$, mids$[mid_isSVOVerb_54c6a16a]);
                    }

                    jboolean IceTokenTags::isUnknownEnding() const
                    {
                        return env->callBooleanMethod(this$, mids$[mid_isUnknownEnding_54c6a16a]);
                    }

                    jboolean IceTokenTags::isUnknownGuessed() const
                    {
                        return env->callBooleanMethod(this$, mids$[mid_isUnknownGuessed_54c6a16a]);
                    }

                    jboolean IceTokenTags::isUnknownMorpho() const
                    {
                        return env->callBooleanMethod(this$, mids$[mid_isUnknownMorpho_54c6a16a]);
                    }

                    jboolean IceTokenTags::isUnknownNone() const
                    {
                        return env->callBooleanMethod(this$, mids$[mid_isUnknownNone_54c6a16a]);
                    }

                    jboolean IceTokenTags::isUnknownProperNoun() const
                    {
                        return env->callBooleanMethod(this$, mids$[mid_isUnknownProperNoun_54c6a16a]);
                    }

                    jboolean IceTokenTags::isVerb() const
                    {
                        return env->callBooleanMethod(this$, mids$[mid_isVerb_54c6a16a]);
                    }

                    jboolean IceTokenTags::isVerbActive() const
                    {
                        return env->callBooleanMethod(this$, mids$[mid_isVerbActive_54c6a16a]);
                    }

                    jboolean IceTokenTags::isVerbAny() const
                    {
                        return env->callBooleanMethod(this$, mids$[mid_isVerbAny_54c6a16a]);
                    }

                    jboolean IceTokenTags::isVerbAuxiliary() const
                    {
                        return env->callBooleanMethod(this$, mids$[mid_isVerbAuxiliary_54c6a16a]);
                    }

                    jboolean IceTokenTags::isVerbBe() const
                    {
                        return env->callBooleanMethod(this$, mids$[mid_isVerbBe_54c6a16a]);
                    }

                    jboolean IceTokenTags::isVerbCaseMarking() const
                    {
                        return env->callBooleanMethod(this$, mids$[mid_isVerbCaseMarking_54c6a16a]);
                    }

                    jboolean IceTokenTags::isVerbImperative() const
                    {
                        return env->callBooleanMethod(this$, mids$[mid_isVerbImperative_54c6a16a]);
                    }

                    jboolean IceTokenTags::isVerbIndicative() const
                    {
                        return env->callBooleanMethod(this$, mids$[mid_isVerbIndicative_54c6a16a]);
                    }

                    jboolean IceTokenTags::isVerbInf() const
                    {
                        return env->callBooleanMethod(this$, mids$[mid_isVerbInf_54c6a16a]);
                    }

                    jboolean IceTokenTags::isVerbInfinitive() const
                    {
                        return env->callBooleanMethod(this$, mids$[mid_isVerbInfinitive_54c6a16a]);
                    }

                    jboolean IceTokenTags::isVerbMiddleForm() const
                    {
                        return env->callBooleanMethod(this$, mids$[mid_isVerbMiddleForm_54c6a16a]);
                    }

                    jboolean IceTokenTags::isVerbPastPart() const
                    {
                        return env->callBooleanMethod(this$, mids$[mid_isVerbPastPart_54c6a16a]);
                    }

                    jboolean IceTokenTags::isVerbPresentPart() const
                    {
                        return env->callBooleanMethod(this$, mids$[mid_isVerbPresentPart_54c6a16a]);
                    }

                    jboolean IceTokenTags::isVerbSpecialAuxiliary() const
                    {
                        return env->callBooleanMethod(this$, mids$[mid_isVerbSpecialAuxiliary_54c6a16a]);
                    }

                    jboolean IceTokenTags::isVerbSpecialInf() const
                    {
                        return env->callBooleanMethod(this$, mids$[mid_isVerbSpecialInf_54c6a16a]);
                    }

                    jboolean IceTokenTags::isVerbSubjunctive() const
                    {
                        return env->callBooleanMethod(this$, mids$[mid_isVerbSubjunctive_54c6a16a]);
                    }

                    jboolean IceTokenTags::isVerbSupine() const
                    {
                        return env->callBooleanMethod(this$, mids$[mid_isVerbSupine_54c6a16a]);
                    }

                    jboolean IceTokenTags::isWordClass(const ::is::iclt::icenlp::core::utils::IceTag$WordClass & a0) const
                    {
                        return env->callBooleanMethod(this$, mids$[mid_isWordClass_0dc1bb34], a0.this$);
                    }

                    IceTokenTags IceTokenTags::makeCopy() const
                    {
                        return IceTokenTags(env->callObjectMethod(this$, mids$[mid_makeCopy_265fd945]));
                    }

                    jint IceTokenTags::numCases() const
                    {
                        return env->callIntMethod(this$, mids$[mid_numCases_54c6a179]);
                    }

                    jint IceTokenTags::numGenders() const
                    {
                        return env->callIntMethod(this$, mids$[mid_numGenders_54c6a179]);
                    }

                    jint IceTokenTags::numNominals() const
                    {
                        return env->callIntMethod(this$, mids$[mid_numNominals_54c6a179]);
                    }

                    jboolean IceTokenTags::numberCaseMatch(const IceTokenTags & a0) const
                    {
                        return env->callBooleanMethod(this$, mids$[mid_numberCaseMatch_9ee1b518], a0.this$);
                    }

                    jboolean IceTokenTags::numberMatch(const IceTokenTags & a0) const
                    {
                        return env->callBooleanMethod(this$, mids$[mid_numberMatch_9ee1b518], a0.this$);
                    }

                    jboolean IceTokenTags::personNumberMatch(const IceTokenTags & a0) const
                    {
                        return env->callBooleanMethod(this$, mids$[mid_personNumberMatch_9ee1b518], a0.this$);
                    }

                    void IceTokenTags::removeAllBut(const ::is::iclt::icenlp::core::utils::IceTag$WordClass & a0) const
                    {
                        env->callVoidMethod(this$, mids$[mid_removeAllBut_0dc1bb38], a0.this$);
                    }

                    void IceTokenTags::removeAllButCase(jchar a0) const
                    {
                        env->callVoidMethod(this$, mids$[mid_removeAllButCase_87fd545a], a0);
                    }

                    void IceTokenTags::removeAllButGender(jchar a0, jboolean a1) const
                    {
                        env->callVoidMethod(this$, mids$[mid_removeAllButGender_64a6756b], a0, a1);
                    }

                    void IceTokenTags::removeAllButNounAdj() const
                    {
                        env->callVoidMethod(this$, mids$[mid_removeAllButNounAdj_54c6a166]);
                    }

                    void IceTokenTags::removeAllButNumber(jchar a0) const
                    {
                        env->callVoidMethod(this$, mids$[mid_removeAllButNumber_87fd545a], a0);
                    }

                    void IceTokenTags::removeAllButProperNounType(jchar a0) const
                    {
                        env->callVoidMethod(this$, mids$[mid_removeAllButProperNounType_87fd545a], a0);
                    }

                    void IceTokenTags::removeAllButVerbs(jboolean a0) const
                    {
                        env->callVoidMethod(this$, mids$[mid_removeAllButVerbs_bb0c767f], a0);
                    }

                    void IceTokenTags::removeArticle() const
                    {
                        env->callVoidMethod(this$, mids$[mid_removeArticle_54c6a166]);
                    }

                    void IceTokenTags::removeCase(jchar a0, jboolean a1) const
                    {
                        env->callVoidMethod(this$, mids$[mid_removeCase_64a6756b], a0, a1);
                    }

                    void IceTokenTags::removeGender(jchar a0, jboolean a1) const
                    {
                        env->callVoidMethod(this$, mids$[mid_removeGender_64a6756b], a0, a1);
                    }

                    void IceTokenTags::removeNumber(jchar a0, jboolean a1) const
                    {
                        env->callVoidMethod(this$, mids$[mid_removeNumber_64a6756b], a0, a1);
                    }

                    void IceTokenTags::removeOnCondition(const ::is::iclt::icenlp::core::tokenizer::IceTokenTags$Condition & a0, const ::is::iclt::icenlp::core::utils::IceTag$WordClass & a1, jchar a2) const
                    {
                        env->callVoidMethod(this$, mids$[mid_removeOnCondition_f94153a7], a0.this$, a1.this$, a2);
                    }

                    void IceTokenTags::removePronouns() const
                    {
                        env->callVoidMethod(this$, mids$[mid_removePronouns_54c6a166]);
                    }

                    void IceTokenTags::removeProperNounType(jchar a0) const
                    {
                        env->callVoidMethod(this$, mids$[mid_removeProperNounType_87fd545a], a0);
                    }

                    void IceTokenTags::removeVerbForm(const ::is::iclt::icenlp::core::tokenizer::IceTokenTags$Condition & a0) const
                    {
                        env->callVoidMethod(this$, mids$[mid_removeVerbForm_db04de57], a0.this$);
                    }

                    void IceTokenTags::removeVerbs() const
                    {
                        env->callVoidMethod(this$, mids$[mid_removeVerbs_54c6a166]);
                    }

                    void IceTokenTags::removeWordClass(const ::is::iclt::icenlp::core::utils::IceTag$WordClass & a0) const
                    {
                        env->callVoidMethod(this$, mids$[mid_removeWordClass_0dc1bb38], a0.this$);
                    }

                    void IceTokenTags::setCase(jchar a0) const
                    {
                        env->callVoidMethod(this$, mids$[mid_setCase_87fd545a], a0);
                    }

                    void IceTokenTags::setCompound(jboolean a0) const
                    {
                        env->callVoidMethod(this$, mids$[mid_setCompound_bb0c767f], a0);
                    }

                    void IceTokenTags::setDeclension(jchar a0) const
                    {
                        env->callVoidMethod(this$, mids$[mid_setDeclension_87fd545a], a0);
                    }

                    void IceTokenTags::setDegree(jchar a0) const
                    {
                        env->callVoidMethod(this$, mids$[mid_setDegree_87fd545a], a0);
                    }

                    void IceTokenTags::setGender(jchar a0) const
                    {
                        env->callVoidMethod(this$, mids$[mid_setGender_87fd545a], a0);
                    }

                    void IceTokenTags::setPlural() const
                    {
                        env->callVoidMethod(this$, mids$[mid_setPlural_54c6a166]);
                    }

                    void IceTokenTags::setProperNameType(jchar a0) const
                    {
                        env->callVoidMethod(this$, mids$[mid_setProperNameType_87fd545a], a0);
                    }

                    void IceTokenTags::setSVOMark(const ::is::iclt::icenlp::core::tokenizer::IceTokenTags$SVOMark & a0) const
                    {
                        env->callVoidMethod(this$, mids$[mid_setSVOMark_7452ef2b], a0.this$);
                    }

                    void IceTokenTags::setUnknownType(const ::is::iclt::icenlp::core::tokenizer::IceTokenTags$UnknownType & a0) const
                    {
                        env->callVoidMethod(this$, mids$[mid_setUnknownType_ebf9e07a], a0.this$);
                    }

                    ::java::lang::String IceTokenTags::toString() const
                    {
                        return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
                    }

                    ::java::lang::String IceTokenTags::toStringSpecial() const
                    {
                        return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toStringSpecial_14c7b5c5]));
                    }
                }
            }
        }
    }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "is/iclt/icenlp/core/tokenizer/IceTokenTags$Match.h"

namespace is {
    namespace iclt {
        namespace icenlp {
            namespace core {
                namespace tokenizer {
                    static PyObject *t_IceTokenTags_cast_(PyTypeObject *type, PyObject *arg);
                    static PyObject *t_IceTokenTags_instance_(PyTypeObject *type, PyObject *arg);
                    static int t_IceTokenTags_init_(t_IceTokenTags *self, PyObject *args, PyObject *kwds);
                    static PyObject *t_IceTokenTags_addArticle(t_IceTokenTags *self);
                    static PyObject *t_IceTokenTags_addInfinitiveVerbForm(t_IceTokenTags *self);
                    static PyObject *t_IceTokenTags_addTag(t_IceTokenTags *self, PyObject *args);
                    static PyObject *t_IceTokenTags_addTagFront(t_IceTokenTags *self, PyObject *args);
                    static PyObject *t_IceTokenTags_allWordClasses(t_IceTokenTags *self);
                    static PyObject *t_IceTokenTags_caseMatch(t_IceTokenTags *self, PyObject *arg);
                    static PyObject *t_IceTokenTags_cleanTags(t_IceTokenTags *self);
                    static PyObject *t_IceTokenTags_genderMatch(t_IceTokenTags *self, PyObject *arg);
                    static PyObject *t_IceTokenTags_genderNumberCaseMatch(t_IceTokenTags *self, PyObject *arg);
                    static PyObject *t_IceTokenTags_getFirstWordClass(t_IceTokenTags *self);
                    static PyObject *t_IceTokenTags_getSVOMark(t_IceTokenTags *self);
                    static PyObject *t_IceTokenTags_getSVOMarkString(t_IceTokenTags *self);
                    static PyObject *t_IceTokenTags_hasArticle(t_IceTokenTags *self);
                    static PyObject *t_IceTokenTags_hasGender(t_IceTokenTags *self);
                    static PyObject *t_IceTokenTags_isAdjective(t_IceTokenTags *self);
                    static PyObject *t_IceTokenTags_isAdjectiveComparative(t_IceTokenTags *self);
                    static PyObject *t_IceTokenTags_isAdjectiveIndeclineable(t_IceTokenTags *self);
                    static PyObject *t_IceTokenTags_isAdjectivePositive(t_IceTokenTags *self);
                    static PyObject *t_IceTokenTags_isAdjectiveStrong(t_IceTokenTags *self);
                    static PyObject *t_IceTokenTags_isAdjectiveSuper(t_IceTokenTags *self);
                    static PyObject *t_IceTokenTags_isAdjectiveWeak(t_IceTokenTags *self);
                    static PyObject *t_IceTokenTags_isAdverb(t_IceTokenTags *self);
                    static PyObject *t_IceTokenTags_isAdverbComparative(t_IceTokenTags *self);
                    static PyObject *t_IceTokenTags_isAdverbSuper(t_IceTokenTags *self);
                    static PyObject *t_IceTokenTags_isArticle(t_IceTokenTags *self);
                    static PyObject *t_IceTokenTags_isCase(t_IceTokenTags *self, PyObject *arg);
                    static PyObject *t_IceTokenTags_isCompound(t_IceTokenTags *self);
                    static PyObject *t_IceTokenTags_isCondition(t_IceTokenTags *self, PyObject *arg);
                    static PyObject *t_IceTokenTags_isConjunction(t_IceTokenTags *self);
                    static PyObject *t_IceTokenTags_isDeclension(t_IceTokenTags *self, PyObject *arg);
                    static PyObject *t_IceTokenTags_isDemonstrativePronoun(t_IceTokenTags *self);
                    static PyObject *t_IceTokenTags_isExclamation(t_IceTokenTags *self);
                    static PyObject *t_IceTokenTags_isGenderPerson(t_IceTokenTags *self, PyObject *arg);
                    static PyObject *t_IceTokenTags_isIndefinitePronoun(t_IceTokenTags *self);
                    static PyObject *t_IceTokenTags_isInfinitive(t_IceTokenTags *self);
                    static PyObject *t_IceTokenTags_isInterrogativePronoun(t_IceTokenTags *self);
                    static PyObject *t_IceTokenTags_isNominal(t_IceTokenTags *self);
                    static PyObject *t_IceTokenTags_isNoun(t_IceTokenTags *self);
                    static PyObject *t_IceTokenTags_isNumber(t_IceTokenTags *self, PyObject *arg);
                    static PyObject *t_IceTokenTags_isNumeral(t_IceTokenTags *self);
                    static PyObject *t_IceTokenTags_isNumeralOrdinal(t_IceTokenTags *self);
                    static PyObject *t_IceTokenTags_isOnlyAdjectiveSuper(t_IceTokenTags *self);
                    static PyObject *t_IceTokenTags_isOnlyAdverbSuper(t_IceTokenTags *self);
                    static PyObject *t_IceTokenTags_isOnlyCase(t_IceTokenTags *self, PyObject *arg);
                    static PyObject *t_IceTokenTags_isOnlyGender(t_IceTokenTags *self, PyObject *arg);
                    static PyObject *t_IceTokenTags_isOnlyNumber(t_IceTokenTags *self, PyObject *arg);
                    static PyObject *t_IceTokenTags_isOnlyOneGender(t_IceTokenTags *self);
                    static PyObject *t_IceTokenTags_isOnlyOneGenderNumber(t_IceTokenTags *self);
                    static PyObject *t_IceTokenTags_isOnlyVerbAny(t_IceTokenTags *self);
                    static PyObject *t_IceTokenTags_isOnlyWordClass(t_IceTokenTags *self, PyObject *arg);
                    static PyObject *t_IceTokenTags_isOtherThanWordClass(t_IceTokenTags *self, PyObject *arg);
                    static PyObject *t_IceTokenTags_isPersonalPronoun(t_IceTokenTags *self);
                    static PyObject *t_IceTokenTags_isPossessivePronoun(t_IceTokenTags *self);
                    static PyObject *t_IceTokenTags_isPreposition(t_IceTokenTags *self);
                    static PyObject *t_IceTokenTags_isPronoun(t_IceTokenTags *self);
                    static PyObject *t_IceTokenTags_isProperNoun(t_IceTokenTags *self);
                    static PyObject *t_IceTokenTags_isReflexivePronoun(t_IceTokenTags *self);
                    static PyObject *t_IceTokenTags_isRelativeConjunction(t_IceTokenTags *self);
                    static PyObject *t_IceTokenTags_isRelativePronoun(t_IceTokenTags *self);
                    static PyObject *t_IceTokenTags_isSVOMainSubject(t_IceTokenTags *self);
                    static PyObject *t_IceTokenTags_isSVOMainVerb(t_IceTokenTags *self);
                    static PyObject *t_IceTokenTags_isSVONone(t_IceTokenTags *self);
                    static PyObject *t_IceTokenTags_isSVOObject(t_IceTokenTags *self);
                    static PyObject *t_IceTokenTags_isSVOPrepPhrase(t_IceTokenTags *self);
                    static PyObject *t_IceTokenTags_isSVOSubject(t_IceTokenTags *self);
                    static PyObject *t_IceTokenTags_isSVOVerb(t_IceTokenTags *self);
                    static PyObject *t_IceTokenTags_isUnknownEnding(t_IceTokenTags *self);
                    static PyObject *t_IceTokenTags_isUnknownGuessed(t_IceTokenTags *self);
                    static PyObject *t_IceTokenTags_isUnknownMorpho(t_IceTokenTags *self);
                    static PyObject *t_IceTokenTags_isUnknownNone(t_IceTokenTags *self);
                    static PyObject *t_IceTokenTags_isUnknownProperNoun(t_IceTokenTags *self);
                    static PyObject *t_IceTokenTags_isVerb(t_IceTokenTags *self);
                    static PyObject *t_IceTokenTags_isVerbActive(t_IceTokenTags *self);
                    static PyObject *t_IceTokenTags_isVerbAny(t_IceTokenTags *self);
                    static PyObject *t_IceTokenTags_isVerbAuxiliary(t_IceTokenTags *self);
                    static PyObject *t_IceTokenTags_isVerbBe(t_IceTokenTags *self);
                    static PyObject *t_IceTokenTags_isVerbCaseMarking(t_IceTokenTags *self);
                    static PyObject *t_IceTokenTags_isVerbImperative(t_IceTokenTags *self);
                    static PyObject *t_IceTokenTags_isVerbIndicative(t_IceTokenTags *self);
                    static PyObject *t_IceTokenTags_isVerbInf(t_IceTokenTags *self);
                    static PyObject *t_IceTokenTags_isVerbInfinitive(t_IceTokenTags *self);
                    static PyObject *t_IceTokenTags_isVerbMiddleForm(t_IceTokenTags *self);
                    static PyObject *t_IceTokenTags_isVerbPastPart(t_IceTokenTags *self);
                    static PyObject *t_IceTokenTags_isVerbPresentPart(t_IceTokenTags *self);
                    static PyObject *t_IceTokenTags_isVerbSpecialAuxiliary(t_IceTokenTags *self);
                    static PyObject *t_IceTokenTags_isVerbSpecialInf(t_IceTokenTags *self);
                    static PyObject *t_IceTokenTags_isVerbSubjunctive(t_IceTokenTags *self);
                    static PyObject *t_IceTokenTags_isVerbSupine(t_IceTokenTags *self);
                    static PyObject *t_IceTokenTags_isWordClass(t_IceTokenTags *self, PyObject *arg);
                    static PyObject *t_IceTokenTags_makeCopy(t_IceTokenTags *self);
                    static PyObject *t_IceTokenTags_numCases(t_IceTokenTags *self);
                    static PyObject *t_IceTokenTags_numGenders(t_IceTokenTags *self);
                    static PyObject *t_IceTokenTags_numNominals(t_IceTokenTags *self);
                    static PyObject *t_IceTokenTags_numberCaseMatch(t_IceTokenTags *self, PyObject *arg);
                    static PyObject *t_IceTokenTags_numberMatch(t_IceTokenTags *self, PyObject *arg);
                    static PyObject *t_IceTokenTags_personNumberMatch(t_IceTokenTags *self, PyObject *arg);
                    static PyObject *t_IceTokenTags_removeAllBut(t_IceTokenTags *self, PyObject *args);
                    static PyObject *t_IceTokenTags_removeAllButCase(t_IceTokenTags *self, PyObject *arg);
                    static PyObject *t_IceTokenTags_removeAllButGender(t_IceTokenTags *self, PyObject *args);
                    static PyObject *t_IceTokenTags_removeAllButNounAdj(t_IceTokenTags *self);
                    static PyObject *t_IceTokenTags_removeAllButNumber(t_IceTokenTags *self, PyObject *arg);
                    static PyObject *t_IceTokenTags_removeAllButProperNounType(t_IceTokenTags *self, PyObject *arg);
                    static PyObject *t_IceTokenTags_removeAllButVerbs(t_IceTokenTags *self, PyObject *arg);
                    static PyObject *t_IceTokenTags_removeArticle(t_IceTokenTags *self);
                    static PyObject *t_IceTokenTags_removeCase(t_IceTokenTags *self, PyObject *args);
                    static PyObject *t_IceTokenTags_removeGender(t_IceTokenTags *self, PyObject *args);
                    static PyObject *t_IceTokenTags_removeNumber(t_IceTokenTags *self, PyObject *args);
                    static PyObject *t_IceTokenTags_removeOnCondition(t_IceTokenTags *self, PyObject *args);
                    static PyObject *t_IceTokenTags_removePronouns(t_IceTokenTags *self);
                    static PyObject *t_IceTokenTags_removeProperNounType(t_IceTokenTags *self, PyObject *arg);
                    static PyObject *t_IceTokenTags_removeVerbForm(t_IceTokenTags *self, PyObject *arg);
                    static PyObject *t_IceTokenTags_removeVerbs(t_IceTokenTags *self);
                    static PyObject *t_IceTokenTags_removeWordClass(t_IceTokenTags *self, PyObject *arg);
                    static PyObject *t_IceTokenTags_setCase(t_IceTokenTags *self, PyObject *arg);
                    static PyObject *t_IceTokenTags_setCompound(t_IceTokenTags *self, PyObject *arg);
                    static PyObject *t_IceTokenTags_setDeclension(t_IceTokenTags *self, PyObject *arg);
                    static PyObject *t_IceTokenTags_setDegree(t_IceTokenTags *self, PyObject *arg);
                    static PyObject *t_IceTokenTags_setGender(t_IceTokenTags *self, PyObject *arg);
                    static PyObject *t_IceTokenTags_setPlural(t_IceTokenTags *self);
                    static PyObject *t_IceTokenTags_setProperNameType(t_IceTokenTags *self, PyObject *arg);
                    static PyObject *t_IceTokenTags_setSVOMark(t_IceTokenTags *self, PyObject *arg);
                    static PyObject *t_IceTokenTags_setUnknownType(t_IceTokenTags *self, PyObject *arg);
                    static PyObject *t_IceTokenTags_toString(t_IceTokenTags *self, PyObject *args);
                    static PyObject *t_IceTokenTags_toStringSpecial(t_IceTokenTags *self);
                    static PyObject *t_IceTokenTags_get__adjective(t_IceTokenTags *self, void *data);
                    static PyObject *t_IceTokenTags_get__adjectiveComparative(t_IceTokenTags *self, void *data);
                    static PyObject *t_IceTokenTags_get__adjectiveIndeclineable(t_IceTokenTags *self, void *data);
                    static PyObject *t_IceTokenTags_get__adjectivePositive(t_IceTokenTags *self, void *data);
                    static PyObject *t_IceTokenTags_get__adjectiveStrong(t_IceTokenTags *self, void *data);
                    static PyObject *t_IceTokenTags_get__adjectiveSuper(t_IceTokenTags *self, void *data);
                    static PyObject *t_IceTokenTags_get__adjectiveWeak(t_IceTokenTags *self, void *data);
                    static PyObject *t_IceTokenTags_get__adverb(t_IceTokenTags *self, void *data);
                    static PyObject *t_IceTokenTags_get__adverbComparative(t_IceTokenTags *self, void *data);
                    static PyObject *t_IceTokenTags_get__adverbSuper(t_IceTokenTags *self, void *data);
                    static PyObject *t_IceTokenTags_get__article(t_IceTokenTags *self, void *data);
                    static int t_IceTokenTags_set__case(t_IceTokenTags *self, PyObject *arg, void *data);
                    static PyObject *t_IceTokenTags_get__compound(t_IceTokenTags *self, void *data);
                    static int t_IceTokenTags_set__compound(t_IceTokenTags *self, PyObject *arg, void *data);
                    static PyObject *t_IceTokenTags_get__conjunction(t_IceTokenTags *self, void *data);
                    static int t_IceTokenTags_set__declension(t_IceTokenTags *self, PyObject *arg, void *data);
                    static int t_IceTokenTags_set__degree(t_IceTokenTags *self, PyObject *arg, void *data);
                    static PyObject *t_IceTokenTags_get__demonstrativePronoun(t_IceTokenTags *self, void *data);
                    static PyObject *t_IceTokenTags_get__exclamation(t_IceTokenTags *self, void *data);
                    static PyObject *t_IceTokenTags_get__firstWordClass(t_IceTokenTags *self, void *data);
                    static int t_IceTokenTags_set__gender(t_IceTokenTags *self, PyObject *arg, void *data);
                    static PyObject *t_IceTokenTags_get__indefinitePronoun(t_IceTokenTags *self, void *data);
                    static PyObject *t_IceTokenTags_get__infinitive(t_IceTokenTags *self, void *data);
                    static PyObject *t_IceTokenTags_get__interrogativePronoun(t_IceTokenTags *self, void *data);
                    static PyObject *t_IceTokenTags_get__nominal(t_IceTokenTags *self, void *data);
                    static PyObject *t_IceTokenTags_get__noun(t_IceTokenTags *self, void *data);
                    static PyObject *t_IceTokenTags_get__numeral(t_IceTokenTags *self, void *data);
                    static PyObject *t_IceTokenTags_get__numeralOrdinal(t_IceTokenTags *self, void *data);
                    static PyObject *t_IceTokenTags_get__onlyAdjectiveSuper(t_IceTokenTags *self, void *data);
                    static PyObject *t_IceTokenTags_get__onlyAdverbSuper(t_IceTokenTags *self, void *data);
                    static PyObject *t_IceTokenTags_get__onlyOneGender(t_IceTokenTags *self, void *data);
                    static PyObject *t_IceTokenTags_get__onlyOneGenderNumber(t_IceTokenTags *self, void *data);
                    static PyObject *t_IceTokenTags_get__onlyVerbAny(t_IceTokenTags *self, void *data);
                    static PyObject *t_IceTokenTags_get__personalPronoun(t_IceTokenTags *self, void *data);
                    static PyObject *t_IceTokenTags_get__possessivePronoun(t_IceTokenTags *self, void *data);
                    static PyObject *t_IceTokenTags_get__preposition(t_IceTokenTags *self, void *data);
                    static PyObject *t_IceTokenTags_get__pronoun(t_IceTokenTags *self, void *data);
                    static int t_IceTokenTags_set__properNameType(t_IceTokenTags *self, PyObject *arg, void *data);
                    static PyObject *t_IceTokenTags_get__properNoun(t_IceTokenTags *self, void *data);
                    static PyObject *t_IceTokenTags_get__reflexivePronoun(t_IceTokenTags *self, void *data);
                    static PyObject *t_IceTokenTags_get__relativeConjunction(t_IceTokenTags *self, void *data);
                    static PyObject *t_IceTokenTags_get__relativePronoun(t_IceTokenTags *self, void *data);
                    static PyObject *t_IceTokenTags_get__sVOMainSubject(t_IceTokenTags *self, void *data);
                    static PyObject *t_IceTokenTags_get__sVOMainVerb(t_IceTokenTags *self, void *data);
                    static PyObject *t_IceTokenTags_get__sVOMark(t_IceTokenTags *self, void *data);
                    static int t_IceTokenTags_set__sVOMark(t_IceTokenTags *self, PyObject *arg, void *data);
                    static PyObject *t_IceTokenTags_get__sVOMarkString(t_IceTokenTags *self, void *data);
                    static PyObject *t_IceTokenTags_get__sVONone(t_IceTokenTags *self, void *data);
                    static PyObject *t_IceTokenTags_get__sVOObject(t_IceTokenTags *self, void *data);
                    static PyObject *t_IceTokenTags_get__sVOPrepPhrase(t_IceTokenTags *self, void *data);
                    static PyObject *t_IceTokenTags_get__sVOSubject(t_IceTokenTags *self, void *data);
                    static PyObject *t_IceTokenTags_get__sVOVerb(t_IceTokenTags *self, void *data);
                    static PyObject *t_IceTokenTags_get__unknownEnding(t_IceTokenTags *self, void *data);
                    static PyObject *t_IceTokenTags_get__unknownGuessed(t_IceTokenTags *self, void *data);
                    static PyObject *t_IceTokenTags_get__unknownMorpho(t_IceTokenTags *self, void *data);
                    static PyObject *t_IceTokenTags_get__unknownNone(t_IceTokenTags *self, void *data);
                    static PyObject *t_IceTokenTags_get__unknownProperNoun(t_IceTokenTags *self, void *data);
                    static int t_IceTokenTags_set__unknownType(t_IceTokenTags *self, PyObject *arg, void *data);
                    static PyObject *t_IceTokenTags_get__verb(t_IceTokenTags *self, void *data);
                    static PyObject *t_IceTokenTags_get__verbActive(t_IceTokenTags *self, void *data);
                    static PyObject *t_IceTokenTags_get__verbAny(t_IceTokenTags *self, void *data);
                    static PyObject *t_IceTokenTags_get__verbAuxiliary(t_IceTokenTags *self, void *data);
                    static PyObject *t_IceTokenTags_get__verbBe(t_IceTokenTags *self, void *data);
                    static PyObject *t_IceTokenTags_get__verbCaseMarking(t_IceTokenTags *self, void *data);
                    static PyObject *t_IceTokenTags_get__verbImperative(t_IceTokenTags *self, void *data);
                    static PyObject *t_IceTokenTags_get__verbIndicative(t_IceTokenTags *self, void *data);
                    static PyObject *t_IceTokenTags_get__verbInf(t_IceTokenTags *self, void *data);
                    static PyObject *t_IceTokenTags_get__verbInfinitive(t_IceTokenTags *self, void *data);
                    static PyObject *t_IceTokenTags_get__verbMiddleForm(t_IceTokenTags *self, void *data);
                    static PyObject *t_IceTokenTags_get__verbPastPart(t_IceTokenTags *self, void *data);
                    static PyObject *t_IceTokenTags_get__verbPresentPart(t_IceTokenTags *self, void *data);
                    static PyObject *t_IceTokenTags_get__verbSpecialAuxiliary(t_IceTokenTags *self, void *data);
                    static PyObject *t_IceTokenTags_get__verbSpecialInf(t_IceTokenTags *self, void *data);
                    static PyObject *t_IceTokenTags_get__verbSubjunctive(t_IceTokenTags *self, void *data);
                    static PyObject *t_IceTokenTags_get__verbSupine(t_IceTokenTags *self, void *data);
                    static PyGetSetDef t_IceTokenTags__fields_[] = {
                        DECLARE_GET_FIELD(t_IceTokenTags, adjective),
                        DECLARE_GET_FIELD(t_IceTokenTags, adjectiveComparative),
                        DECLARE_GET_FIELD(t_IceTokenTags, adjectiveIndeclineable),
                        DECLARE_GET_FIELD(t_IceTokenTags, adjectivePositive),
                        DECLARE_GET_FIELD(t_IceTokenTags, adjectiveStrong),
                        DECLARE_GET_FIELD(t_IceTokenTags, adjectiveSuper),
                        DECLARE_GET_FIELD(t_IceTokenTags, adjectiveWeak),
                        DECLARE_GET_FIELD(t_IceTokenTags, adverb),
                        DECLARE_GET_FIELD(t_IceTokenTags, adverbComparative),
                        DECLARE_GET_FIELD(t_IceTokenTags, adverbSuper),
                        DECLARE_GET_FIELD(t_IceTokenTags, article),
                        DECLARE_SET_FIELD(t_IceTokenTags, case),
                        DECLARE_GETSET_FIELD(t_IceTokenTags, compound),
                        DECLARE_GET_FIELD(t_IceTokenTags, conjunction),
                        DECLARE_SET_FIELD(t_IceTokenTags, declension),
                        DECLARE_SET_FIELD(t_IceTokenTags, degree),
                        DECLARE_GET_FIELD(t_IceTokenTags, demonstrativePronoun),
                        DECLARE_GET_FIELD(t_IceTokenTags, exclamation),
                        DECLARE_GET_FIELD(t_IceTokenTags, firstWordClass),
                        DECLARE_SET_FIELD(t_IceTokenTags, gender),
                        DECLARE_GET_FIELD(t_IceTokenTags, indefinitePronoun),
                        DECLARE_GET_FIELD(t_IceTokenTags, infinitive),
                        DECLARE_GET_FIELD(t_IceTokenTags, interrogativePronoun),
                        DECLARE_GET_FIELD(t_IceTokenTags, nominal),
                        DECLARE_GET_FIELD(t_IceTokenTags, noun),
                        DECLARE_GET_FIELD(t_IceTokenTags, numeral),
                        DECLARE_GET_FIELD(t_IceTokenTags, numeralOrdinal),
                        DECLARE_GET_FIELD(t_IceTokenTags, onlyAdjectiveSuper),
                        DECLARE_GET_FIELD(t_IceTokenTags, onlyAdverbSuper),
                        DECLARE_GET_FIELD(t_IceTokenTags, onlyOneGender),
                        DECLARE_GET_FIELD(t_IceTokenTags, onlyOneGenderNumber),
                        DECLARE_GET_FIELD(t_IceTokenTags, onlyVerbAny),
                        DECLARE_GET_FIELD(t_IceTokenTags, personalPronoun),
                        DECLARE_GET_FIELD(t_IceTokenTags, possessivePronoun),
                        DECLARE_GET_FIELD(t_IceTokenTags, preposition),
                        DECLARE_GET_FIELD(t_IceTokenTags, pronoun),
                        DECLARE_SET_FIELD(t_IceTokenTags, properNameType),
                        DECLARE_GET_FIELD(t_IceTokenTags, properNoun),
                        DECLARE_GET_FIELD(t_IceTokenTags, reflexivePronoun),
                        DECLARE_GET_FIELD(t_IceTokenTags, relativeConjunction),
                        DECLARE_GET_FIELD(t_IceTokenTags, relativePronoun),
                        DECLARE_GET_FIELD(t_IceTokenTags, sVOMainSubject),
                        DECLARE_GET_FIELD(t_IceTokenTags, sVOMainVerb),
                        DECLARE_GETSET_FIELD(t_IceTokenTags, sVOMark),
                        DECLARE_GET_FIELD(t_IceTokenTags, sVOMarkString),
                        DECLARE_GET_FIELD(t_IceTokenTags, sVONone),
                        DECLARE_GET_FIELD(t_IceTokenTags, sVOObject),
                        DECLARE_GET_FIELD(t_IceTokenTags, sVOPrepPhrase),
                        DECLARE_GET_FIELD(t_IceTokenTags, sVOSubject),
                        DECLARE_GET_FIELD(t_IceTokenTags, sVOVerb),
                        DECLARE_GET_FIELD(t_IceTokenTags, unknownEnding),
                        DECLARE_GET_FIELD(t_IceTokenTags, unknownGuessed),
                        DECLARE_GET_FIELD(t_IceTokenTags, unknownMorpho),
                        DECLARE_GET_FIELD(t_IceTokenTags, unknownNone),
                        DECLARE_GET_FIELD(t_IceTokenTags, unknownProperNoun),
                        DECLARE_SET_FIELD(t_IceTokenTags, unknownType),
                        DECLARE_GET_FIELD(t_IceTokenTags, verb),
                        DECLARE_GET_FIELD(t_IceTokenTags, verbActive),
                        DECLARE_GET_FIELD(t_IceTokenTags, verbAny),
                        DECLARE_GET_FIELD(t_IceTokenTags, verbAuxiliary),
                        DECLARE_GET_FIELD(t_IceTokenTags, verbBe),
                        DECLARE_GET_FIELD(t_IceTokenTags, verbCaseMarking),
                        DECLARE_GET_FIELD(t_IceTokenTags, verbImperative),
                        DECLARE_GET_FIELD(t_IceTokenTags, verbIndicative),
                        DECLARE_GET_FIELD(t_IceTokenTags, verbInf),
                        DECLARE_GET_FIELD(t_IceTokenTags, verbInfinitive),
                        DECLARE_GET_FIELD(t_IceTokenTags, verbMiddleForm),
                        DECLARE_GET_FIELD(t_IceTokenTags, verbPastPart),
                        DECLARE_GET_FIELD(t_IceTokenTags, verbPresentPart),
                        DECLARE_GET_FIELD(t_IceTokenTags, verbSpecialAuxiliary),
                        DECLARE_GET_FIELD(t_IceTokenTags, verbSpecialInf),
                        DECLARE_GET_FIELD(t_IceTokenTags, verbSubjunctive),
                        DECLARE_GET_FIELD(t_IceTokenTags, verbSupine),
                        { NULL, NULL, NULL, NULL, NULL }
                    };

                    static PyMethodDef t_IceTokenTags__methods_[] = {
                        DECLARE_METHOD(t_IceTokenTags, cast_, METH_O | METH_CLASS),
                        DECLARE_METHOD(t_IceTokenTags, instance_, METH_O | METH_CLASS),
                        DECLARE_METHOD(t_IceTokenTags, addArticle, METH_NOARGS),
                        DECLARE_METHOD(t_IceTokenTags, addInfinitiveVerbForm, METH_NOARGS),
                        DECLARE_METHOD(t_IceTokenTags, addTag, METH_VARARGS),
                        DECLARE_METHOD(t_IceTokenTags, addTagFront, METH_VARARGS),
                        DECLARE_METHOD(t_IceTokenTags, allWordClasses, METH_NOARGS),
                        DECLARE_METHOD(t_IceTokenTags, caseMatch, METH_O),
                        DECLARE_METHOD(t_IceTokenTags, cleanTags, METH_NOARGS),
                        DECLARE_METHOD(t_IceTokenTags, genderMatch, METH_O),
                        DECLARE_METHOD(t_IceTokenTags, genderNumberCaseMatch, METH_O),
                        DECLARE_METHOD(t_IceTokenTags, getFirstWordClass, METH_NOARGS),
                        DECLARE_METHOD(t_IceTokenTags, getSVOMark, METH_NOARGS),
                        DECLARE_METHOD(t_IceTokenTags, getSVOMarkString, METH_NOARGS),
                        DECLARE_METHOD(t_IceTokenTags, hasArticle, METH_NOARGS),
                        DECLARE_METHOD(t_IceTokenTags, hasGender, METH_NOARGS),
                        DECLARE_METHOD(t_IceTokenTags, isAdjective, METH_NOARGS),
                        DECLARE_METHOD(t_IceTokenTags, isAdjectiveComparative, METH_NOARGS),
                        DECLARE_METHOD(t_IceTokenTags, isAdjectiveIndeclineable, METH_NOARGS),
                        DECLARE_METHOD(t_IceTokenTags, isAdjectivePositive, METH_NOARGS),
                        DECLARE_METHOD(t_IceTokenTags, isAdjectiveStrong, METH_NOARGS),
                        DECLARE_METHOD(t_IceTokenTags, isAdjectiveSuper, METH_NOARGS),
                        DECLARE_METHOD(t_IceTokenTags, isAdjectiveWeak, METH_NOARGS),
                        DECLARE_METHOD(t_IceTokenTags, isAdverb, METH_NOARGS),
                        DECLARE_METHOD(t_IceTokenTags, isAdverbComparative, METH_NOARGS),
                        DECLARE_METHOD(t_IceTokenTags, isAdverbSuper, METH_NOARGS),
                        DECLARE_METHOD(t_IceTokenTags, isArticle, METH_NOARGS),
                        DECLARE_METHOD(t_IceTokenTags, isCase, METH_O),
                        DECLARE_METHOD(t_IceTokenTags, isCompound, METH_NOARGS),
                        DECLARE_METHOD(t_IceTokenTags, isCondition, METH_O),
                        DECLARE_METHOD(t_IceTokenTags, isConjunction, METH_NOARGS),
                        DECLARE_METHOD(t_IceTokenTags, isDeclension, METH_O),
                        DECLARE_METHOD(t_IceTokenTags, isDemonstrativePronoun, METH_NOARGS),
                        DECLARE_METHOD(t_IceTokenTags, isExclamation, METH_NOARGS),
                        DECLARE_METHOD(t_IceTokenTags, isGenderPerson, METH_O),
                        DECLARE_METHOD(t_IceTokenTags, isIndefinitePronoun, METH_NOARGS),
                        DECLARE_METHOD(t_IceTokenTags, isInfinitive, METH_NOARGS),
                        DECLARE_METHOD(t_IceTokenTags, isInterrogativePronoun, METH_NOARGS),
                        DECLARE_METHOD(t_IceTokenTags, isNominal, METH_NOARGS),
                        DECLARE_METHOD(t_IceTokenTags, isNoun, METH_NOARGS),
                        DECLARE_METHOD(t_IceTokenTags, isNumber, METH_O),
                        DECLARE_METHOD(t_IceTokenTags, isNumeral, METH_NOARGS),
                        DECLARE_METHOD(t_IceTokenTags, isNumeralOrdinal, METH_NOARGS),
                        DECLARE_METHOD(t_IceTokenTags, isOnlyAdjectiveSuper, METH_NOARGS),
                        DECLARE_METHOD(t_IceTokenTags, isOnlyAdverbSuper, METH_NOARGS),
                        DECLARE_METHOD(t_IceTokenTags, isOnlyCase, METH_O),
                        DECLARE_METHOD(t_IceTokenTags, isOnlyGender, METH_O),
                        DECLARE_METHOD(t_IceTokenTags, isOnlyNumber, METH_O),
                        DECLARE_METHOD(t_IceTokenTags, isOnlyOneGender, METH_NOARGS),
                        DECLARE_METHOD(t_IceTokenTags, isOnlyOneGenderNumber, METH_NOARGS),
                        DECLARE_METHOD(t_IceTokenTags, isOnlyVerbAny, METH_NOARGS),
                        DECLARE_METHOD(t_IceTokenTags, isOnlyWordClass, METH_O),
                        DECLARE_METHOD(t_IceTokenTags, isOtherThanWordClass, METH_O),
                        DECLARE_METHOD(t_IceTokenTags, isPersonalPronoun, METH_NOARGS),
                        DECLARE_METHOD(t_IceTokenTags, isPossessivePronoun, METH_NOARGS),
                        DECLARE_METHOD(t_IceTokenTags, isPreposition, METH_NOARGS),
                        DECLARE_METHOD(t_IceTokenTags, isPronoun, METH_NOARGS),
                        DECLARE_METHOD(t_IceTokenTags, isProperNoun, METH_NOARGS),
                        DECLARE_METHOD(t_IceTokenTags, isReflexivePronoun, METH_NOARGS),
                        DECLARE_METHOD(t_IceTokenTags, isRelativeConjunction, METH_NOARGS),
                        DECLARE_METHOD(t_IceTokenTags, isRelativePronoun, METH_NOARGS),
                        DECLARE_METHOD(t_IceTokenTags, isSVOMainSubject, METH_NOARGS),
                        DECLARE_METHOD(t_IceTokenTags, isSVOMainVerb, METH_NOARGS),
                        DECLARE_METHOD(t_IceTokenTags, isSVONone, METH_NOARGS),
                        DECLARE_METHOD(t_IceTokenTags, isSVOObject, METH_NOARGS),
                        DECLARE_METHOD(t_IceTokenTags, isSVOPrepPhrase, METH_NOARGS),
                        DECLARE_METHOD(t_IceTokenTags, isSVOSubject, METH_NOARGS),
                        DECLARE_METHOD(t_IceTokenTags, isSVOVerb, METH_NOARGS),
                        DECLARE_METHOD(t_IceTokenTags, isUnknownEnding, METH_NOARGS),
                        DECLARE_METHOD(t_IceTokenTags, isUnknownGuessed, METH_NOARGS),
                        DECLARE_METHOD(t_IceTokenTags, isUnknownMorpho, METH_NOARGS),
                        DECLARE_METHOD(t_IceTokenTags, isUnknownNone, METH_NOARGS),
                        DECLARE_METHOD(t_IceTokenTags, isUnknownProperNoun, METH_NOARGS),
                        DECLARE_METHOD(t_IceTokenTags, isVerb, METH_NOARGS),
                        DECLARE_METHOD(t_IceTokenTags, isVerbActive, METH_NOARGS),
                        DECLARE_METHOD(t_IceTokenTags, isVerbAny, METH_NOARGS),
                        DECLARE_METHOD(t_IceTokenTags, isVerbAuxiliary, METH_NOARGS),
                        DECLARE_METHOD(t_IceTokenTags, isVerbBe, METH_NOARGS),
                        DECLARE_METHOD(t_IceTokenTags, isVerbCaseMarking, METH_NOARGS),
                        DECLARE_METHOD(t_IceTokenTags, isVerbImperative, METH_NOARGS),
                        DECLARE_METHOD(t_IceTokenTags, isVerbIndicative, METH_NOARGS),
                        DECLARE_METHOD(t_IceTokenTags, isVerbInf, METH_NOARGS),
                        DECLARE_METHOD(t_IceTokenTags, isVerbInfinitive, METH_NOARGS),
                        DECLARE_METHOD(t_IceTokenTags, isVerbMiddleForm, METH_NOARGS),
                        DECLARE_METHOD(t_IceTokenTags, isVerbPastPart, METH_NOARGS),
                        DECLARE_METHOD(t_IceTokenTags, isVerbPresentPart, METH_NOARGS),
                        DECLARE_METHOD(t_IceTokenTags, isVerbSpecialAuxiliary, METH_NOARGS),
                        DECLARE_METHOD(t_IceTokenTags, isVerbSpecialInf, METH_NOARGS),
                        DECLARE_METHOD(t_IceTokenTags, isVerbSubjunctive, METH_NOARGS),
                        DECLARE_METHOD(t_IceTokenTags, isVerbSupine, METH_NOARGS),
                        DECLARE_METHOD(t_IceTokenTags, isWordClass, METH_O),
                        DECLARE_METHOD(t_IceTokenTags, makeCopy, METH_NOARGS),
                        DECLARE_METHOD(t_IceTokenTags, numCases, METH_NOARGS),
                        DECLARE_METHOD(t_IceTokenTags, numGenders, METH_NOARGS),
                        DECLARE_METHOD(t_IceTokenTags, numNominals, METH_NOARGS),
                        DECLARE_METHOD(t_IceTokenTags, numberCaseMatch, METH_O),
                        DECLARE_METHOD(t_IceTokenTags, numberMatch, METH_O),
                        DECLARE_METHOD(t_IceTokenTags, personNumberMatch, METH_O),
                        DECLARE_METHOD(t_IceTokenTags, removeAllBut, METH_VARARGS),
                        DECLARE_METHOD(t_IceTokenTags, removeAllButCase, METH_O),
                        DECLARE_METHOD(t_IceTokenTags, removeAllButGender, METH_VARARGS),
                        DECLARE_METHOD(t_IceTokenTags, removeAllButNounAdj, METH_NOARGS),
                        DECLARE_METHOD(t_IceTokenTags, removeAllButNumber, METH_O),
                        DECLARE_METHOD(t_IceTokenTags, removeAllButProperNounType, METH_O),
                        DECLARE_METHOD(t_IceTokenTags, removeAllButVerbs, METH_O),
                        DECLARE_METHOD(t_IceTokenTags, removeArticle, METH_NOARGS),
                        DECLARE_METHOD(t_IceTokenTags, removeCase, METH_VARARGS),
                        DECLARE_METHOD(t_IceTokenTags, removeGender, METH_VARARGS),
                        DECLARE_METHOD(t_IceTokenTags, removeNumber, METH_VARARGS),
                        DECLARE_METHOD(t_IceTokenTags, removeOnCondition, METH_VARARGS),
                        DECLARE_METHOD(t_IceTokenTags, removePronouns, METH_NOARGS),
                        DECLARE_METHOD(t_IceTokenTags, removeProperNounType, METH_O),
                        DECLARE_METHOD(t_IceTokenTags, removeVerbForm, METH_O),
                        DECLARE_METHOD(t_IceTokenTags, removeVerbs, METH_NOARGS),
                        DECLARE_METHOD(t_IceTokenTags, removeWordClass, METH_O),
                        DECLARE_METHOD(t_IceTokenTags, setCase, METH_O),
                        DECLARE_METHOD(t_IceTokenTags, setCompound, METH_O),
                        DECLARE_METHOD(t_IceTokenTags, setDeclension, METH_O),
                        DECLARE_METHOD(t_IceTokenTags, setDegree, METH_O),
                        DECLARE_METHOD(t_IceTokenTags, setGender, METH_O),
                        DECLARE_METHOD(t_IceTokenTags, setPlural, METH_NOARGS),
                        DECLARE_METHOD(t_IceTokenTags, setProperNameType, METH_O),
                        DECLARE_METHOD(t_IceTokenTags, setSVOMark, METH_O),
                        DECLARE_METHOD(t_IceTokenTags, setUnknownType, METH_O),
                        DECLARE_METHOD(t_IceTokenTags, toString, METH_VARARGS),
                        DECLARE_METHOD(t_IceTokenTags, toStringSpecial, METH_NOARGS),
                        { NULL, NULL, 0, NULL }
                    };

                    DECLARE_TYPE(IceTokenTags, t_IceTokenTags, ::is::iclt::icenlp::core::tokenizer::TokenTags, IceTokenTags, t_IceTokenTags_init_, 0, 0, t_IceTokenTags__fields_, 0, 0);

                    void t_IceTokenTags::install(PyObject *module)
                    {
                        installType(&PY_TYPE(IceTokenTags), module, "IceTokenTags", 0);
                        PyDict_SetItemString(PY_TYPE(IceTokenTags).tp_dict, "Condition", make_descriptor(&PY_TYPE(IceTokenTags$Condition)));
                        PyDict_SetItemString(PY_TYPE(IceTokenTags).tp_dict, "Match", make_descriptor(&PY_TYPE(IceTokenTags$Match)));
                        PyDict_SetItemString(PY_TYPE(IceTokenTags).tp_dict, "SVOMark", make_descriptor(&PY_TYPE(IceTokenTags$SVOMark)));
                        PyDict_SetItemString(PY_TYPE(IceTokenTags).tp_dict, "UnknownType", make_descriptor(&PY_TYPE(IceTokenTags$UnknownType)));
                    }

                    void t_IceTokenTags::initialize(PyObject *module)
                    {
                        PyDict_SetItemString(PY_TYPE(IceTokenTags).tp_dict, "class_", make_descriptor(IceTokenTags::initializeClass, 1));
                        PyDict_SetItemString(PY_TYPE(IceTokenTags).tp_dict, "wrapfn_", make_descriptor(t_IceTokenTags::wrap_jobject));
                        PyDict_SetItemString(PY_TYPE(IceTokenTags).tp_dict, "boxfn_", make_descriptor(boxObject));
                    }

                    static PyObject *t_IceTokenTags_cast_(PyTypeObject *type, PyObject *arg)
                    {
                        if (!(arg = castCheck(arg, IceTokenTags::initializeClass, 1)))
                            return NULL;
                        return t_IceTokenTags::wrap_Object(IceTokenTags(((t_IceTokenTags *) arg)->object.this$));
                    }
                    static PyObject *t_IceTokenTags_instance_(PyTypeObject *type, PyObject *arg)
                    {
                        if (!castCheck(arg, IceTokenTags::initializeClass, 0))
                            Py_RETURN_FALSE;
                        Py_RETURN_TRUE;
                    }

                    static int t_IceTokenTags_init_(t_IceTokenTags *self, PyObject *args, PyObject *kwds)
                    {
                        switch (PyTuple_GET_SIZE(args)) {
                          case 0:
                            {
                                IceTokenTags object((jobject) NULL);

                                INT_CALL(object = IceTokenTags());
                                self->object = object;
                                break;
                            }
                            goto err;
                          case 2:
                            {
                                ::java::lang::String a0((jobject) NULL);
                                ::is::iclt::icenlp::core::tokenizer::Token$TokenCode a1((jobject) NULL);
                                IceTokenTags object((jobject) NULL);

                                if (!parseArgs(args, "sk", ::is::iclt::icenlp::core::tokenizer::Token$TokenCode::initializeClass, &a0, &a1))
                                {
                                    INT_CALL(object = IceTokenTags(a0, a1));
                                    self->object = object;
                                    break;
                                }
                            }
                          default:
                          err:
                            PyErr_SetArgsError((PyObject *) self, "__init__", args);
                            return -1;
                        }

                        return 0;
                    }

                    static PyObject *t_IceTokenTags_addArticle(t_IceTokenTags *self)
                    {
                        OBJ_CALL(self->object.addArticle());
                        Py_RETURN_NONE;
                    }

                    static PyObject *t_IceTokenTags_addInfinitiveVerbForm(t_IceTokenTags *self)
                    {
                        OBJ_CALL(self->object.addInfinitiveVerbForm());
                        Py_RETURN_NONE;
                    }

                    static PyObject *t_IceTokenTags_addTag(t_IceTokenTags *self, PyObject *args)
                    {
                        ::java::lang::String a0((jobject) NULL);

                        if (!parseArgs(args, "s", &a0))
                        {
                            OBJ_CALL(self->object.addTag(a0));
                            Py_RETURN_NONE;
                        }

                        return callSuper(&PY_TYPE(IceTokenTags), (PyObject *) self, "addTag", args, 2);
                    }

                    static PyObject *t_IceTokenTags_addTagFront(t_IceTokenTags *self, PyObject *args)
                    {
                        ::java::lang::String a0((jobject) NULL);

                        if (!parseArgs(args, "s", &a0))
                        {
                            OBJ_CALL(self->object.addTagFront(a0));
                            Py_RETURN_NONE;
                        }

                        return callSuper(&PY_TYPE(IceTokenTags), (PyObject *) self, "addTagFront", args, 2);
                    }

                    static PyObject *t_IceTokenTags_allWordClasses(t_IceTokenTags *self)
                    {
                        ::java::lang::String result((jobject) NULL);
                        OBJ_CALL(result = self->object.allWordClasses());
                        return j2p(result);
                    }

                    static PyObject *t_IceTokenTags_caseMatch(t_IceTokenTags *self, PyObject *arg)
                    {
                        IceTokenTags a0((jobject) NULL);
                        jboolean result;

                        if (!parseArg(arg, "k", IceTokenTags::initializeClass, &a0))
                        {
                            OBJ_CALL(result = self->object.caseMatch(a0));
                            Py_RETURN_BOOL(result);
                        }

                        PyErr_SetArgsError((PyObject *) self, "caseMatch", arg);
                        return NULL;
                    }

                    static PyObject *t_IceTokenTags_cleanTags(t_IceTokenTags *self)
                    {
                        OBJ_CALL(self->object.cleanTags());
                        Py_RETURN_NONE;
                    }

                    static PyObject *t_IceTokenTags_genderMatch(t_IceTokenTags *self, PyObject *arg)
                    {
                        IceTokenTags a0((jobject) NULL);
                        jboolean result;

                        if (!parseArg(arg, "k", IceTokenTags::initializeClass, &a0))
                        {
                            OBJ_CALL(result = self->object.genderMatch(a0));
                            Py_RETURN_BOOL(result);
                        }

                        PyErr_SetArgsError((PyObject *) self, "genderMatch", arg);
                        return NULL;
                    }

                    static PyObject *t_IceTokenTags_genderNumberCaseMatch(t_IceTokenTags *self, PyObject *arg)
                    {
                        IceTokenTags a0((jobject) NULL);
                        jboolean result;

                        if (!parseArg(arg, "k", IceTokenTags::initializeClass, &a0))
                        {
                            OBJ_CALL(result = self->object.genderNumberCaseMatch(a0));
                            Py_RETURN_BOOL(result);
                        }

                        PyErr_SetArgsError((PyObject *) self, "genderNumberCaseMatch", arg);
                        return NULL;
                    }

                    static PyObject *t_IceTokenTags_getFirstWordClass(t_IceTokenTags *self)
                    {
                        ::java::lang::String result((jobject) NULL);
                        OBJ_CALL(result = self->object.getFirstWordClass());
                        return j2p(result);
                    }

                    static PyObject *t_IceTokenTags_getSVOMark(t_IceTokenTags *self)
                    {
                        ::is::iclt::icenlp::core::tokenizer::IceTokenTags$SVOMark result((jobject) NULL);
                        OBJ_CALL(result = self->object.getSVOMark());
                        return ::is::iclt::icenlp::core::tokenizer::t_IceTokenTags$SVOMark::wrap_Object(result);
                    }

                    static PyObject *t_IceTokenTags_getSVOMarkString(t_IceTokenTags *self)
                    {
                        ::java::lang::String result((jobject) NULL);
                        OBJ_CALL(result = self->object.getSVOMarkString());
                        return j2p(result);
                    }

                    static PyObject *t_IceTokenTags_hasArticle(t_IceTokenTags *self)
                    {
                        jboolean result;
                        OBJ_CALL(result = self->object.hasArticle());
                        Py_RETURN_BOOL(result);
                    }

                    static PyObject *t_IceTokenTags_hasGender(t_IceTokenTags *self)
                    {
                        jboolean result;
                        OBJ_CALL(result = self->object.hasGender());
                        Py_RETURN_BOOL(result);
                    }

                    static PyObject *t_IceTokenTags_isAdjective(t_IceTokenTags *self)
                    {
                        jboolean result;
                        OBJ_CALL(result = self->object.isAdjective());
                        Py_RETURN_BOOL(result);
                    }

                    static PyObject *t_IceTokenTags_isAdjectiveComparative(t_IceTokenTags *self)
                    {
                        jboolean result;
                        OBJ_CALL(result = self->object.isAdjectiveComparative());
                        Py_RETURN_BOOL(result);
                    }

                    static PyObject *t_IceTokenTags_isAdjectiveIndeclineable(t_IceTokenTags *self)
                    {
                        jboolean result;
                        OBJ_CALL(result = self->object.isAdjectiveIndeclineable());
                        Py_RETURN_BOOL(result);
                    }

                    static PyObject *t_IceTokenTags_isAdjectivePositive(t_IceTokenTags *self)
                    {
                        jboolean result;
                        OBJ_CALL(result = self->object.isAdjectivePositive());
                        Py_RETURN_BOOL(result);
                    }

                    static PyObject *t_IceTokenTags_isAdjectiveStrong(t_IceTokenTags *self)
                    {
                        jboolean result;
                        OBJ_CALL(result = self->object.isAdjectiveStrong());
                        Py_RETURN_BOOL(result);
                    }

                    static PyObject *t_IceTokenTags_isAdjectiveSuper(t_IceTokenTags *self)
                    {
                        jboolean result;
                        OBJ_CALL(result = self->object.isAdjectiveSuper());
                        Py_RETURN_BOOL(result);
                    }

                    static PyObject *t_IceTokenTags_isAdjectiveWeak(t_IceTokenTags *self)
                    {
                        jboolean result;
                        OBJ_CALL(result = self->object.isAdjectiveWeak());
                        Py_RETURN_BOOL(result);
                    }

                    static PyObject *t_IceTokenTags_isAdverb(t_IceTokenTags *self)
                    {
                        jboolean result;
                        OBJ_CALL(result = self->object.isAdverb());
                        Py_RETURN_BOOL(result);
                    }

                    static PyObject *t_IceTokenTags_isAdverbComparative(t_IceTokenTags *self)
                    {
                        jboolean result;
                        OBJ_CALL(result = self->object.isAdverbComparative());
                        Py_RETURN_BOOL(result);
                    }

                    static PyObject *t_IceTokenTags_isAdverbSuper(t_IceTokenTags *self)
                    {
                        jboolean result;
                        OBJ_CALL(result = self->object.isAdverbSuper());
                        Py_RETURN_BOOL(result);
                    }

                    static PyObject *t_IceTokenTags_isArticle(t_IceTokenTags *self)
                    {
                        jboolean result;
                        OBJ_CALL(result = self->object.isArticle());
                        Py_RETURN_BOOL(result);
                    }

                    static PyObject *t_IceTokenTags_isCase(t_IceTokenTags *self, PyObject *arg)
                    {
                        jchar a0;
                        jboolean result;

                        if (!parseArg(arg, "C", &a0))
                        {
                            OBJ_CALL(result = self->object.isCase(a0));
                            Py_RETURN_BOOL(result);
                        }

                        PyErr_SetArgsError((PyObject *) self, "isCase", arg);
                        return NULL;
                    }

                    static PyObject *t_IceTokenTags_isCompound(t_IceTokenTags *self)
                    {
                        jboolean result;
                        OBJ_CALL(result = self->object.isCompound());
                        Py_RETURN_BOOL(result);
                    }

                    static PyObject *t_IceTokenTags_isCondition(t_IceTokenTags *self, PyObject *arg)
                    {
                        ::is::iclt::icenlp::core::tokenizer::IceTokenTags$Condition a0((jobject) NULL);
                        jboolean result;

                        if (!parseArg(arg, "k", ::is::iclt::icenlp::core::tokenizer::IceTokenTags$Condition::initializeClass, &a0))
                        {
                            OBJ_CALL(result = self->object.isCondition(a0));
                            Py_RETURN_BOOL(result);
                        }

                        PyErr_SetArgsError((PyObject *) self, "isCondition", arg);
                        return NULL;
                    }

                    static PyObject *t_IceTokenTags_isConjunction(t_IceTokenTags *self)
                    {
                        jboolean result;
                        OBJ_CALL(result = self->object.isConjunction());
                        Py_RETURN_BOOL(result);
                    }

                    static PyObject *t_IceTokenTags_isDeclension(t_IceTokenTags *self, PyObject *arg)
                    {
                        jchar a0;
                        jboolean result;

                        if (!parseArg(arg, "C", &a0))
                        {
                            OBJ_CALL(result = self->object.isDeclension(a0));
                            Py_RETURN_BOOL(result);
                        }

                        PyErr_SetArgsError((PyObject *) self, "isDeclension", arg);
                        return NULL;
                    }

                    static PyObject *t_IceTokenTags_isDemonstrativePronoun(t_IceTokenTags *self)
                    {
                        jboolean result;
                        OBJ_CALL(result = self->object.isDemonstrativePronoun());
                        Py_RETURN_BOOL(result);
                    }

                    static PyObject *t_IceTokenTags_isExclamation(t_IceTokenTags *self)
                    {
                        jboolean result;
                        OBJ_CALL(result = self->object.isExclamation());
                        Py_RETURN_BOOL(result);
                    }

                    static PyObject *t_IceTokenTags_isGenderPerson(t_IceTokenTags *self, PyObject *arg)
                    {
                        jchar a0;
                        jboolean result;

                        if (!parseArg(arg, "C", &a0))
                        {
                            OBJ_CALL(result = self->object.isGenderPerson(a0));
                            Py_RETURN_BOOL(result);
                        }

                        PyErr_SetArgsError((PyObject *) self, "isGenderPerson", arg);
                        return NULL;
                    }

                    static PyObject *t_IceTokenTags_isIndefinitePronoun(t_IceTokenTags *self)
                    {
                        jboolean result;
                        OBJ_CALL(result = self->object.isIndefinitePronoun());
                        Py_RETURN_BOOL(result);
                    }

                    static PyObject *t_IceTokenTags_isInfinitive(t_IceTokenTags *self)
                    {
                        jboolean result;
                        OBJ_CALL(result = self->object.isInfinitive());
                        Py_RETURN_BOOL(result);
                    }

                    static PyObject *t_IceTokenTags_isInterrogativePronoun(t_IceTokenTags *self)
                    {
                        jboolean result;
                        OBJ_CALL(result = self->object.isInterrogativePronoun());
                        Py_RETURN_BOOL(result);
                    }

                    static PyObject *t_IceTokenTags_isNominal(t_IceTokenTags *self)
                    {
                        jboolean result;
                        OBJ_CALL(result = self->object.isNominal());
                        Py_RETURN_BOOL(result);
                    }

                    static PyObject *t_IceTokenTags_isNoun(t_IceTokenTags *self)
                    {
                        jboolean result;
                        OBJ_CALL(result = self->object.isNoun());
                        Py_RETURN_BOOL(result);
                    }

                    static PyObject *t_IceTokenTags_isNumber(t_IceTokenTags *self, PyObject *arg)
                    {
                        jchar a0;
                        jboolean result;

                        if (!parseArg(arg, "C", &a0))
                        {
                            OBJ_CALL(result = self->object.isNumber(a0));
                            Py_RETURN_BOOL(result);
                        }

                        PyErr_SetArgsError((PyObject *) self, "isNumber", arg);
                        return NULL;
                    }

                    static PyObject *t_IceTokenTags_isNumeral(t_IceTokenTags *self)
                    {
                        jboolean result;
                        OBJ_CALL(result = self->object.isNumeral());
                        Py_RETURN_BOOL(result);
                    }

                    static PyObject *t_IceTokenTags_isNumeralOrdinal(t_IceTokenTags *self)
                    {
                        jboolean result;
                        OBJ_CALL(result = self->object.isNumeralOrdinal());
                        Py_RETURN_BOOL(result);
                    }

                    static PyObject *t_IceTokenTags_isOnlyAdjectiveSuper(t_IceTokenTags *self)
                    {
                        jboolean result;
                        OBJ_CALL(result = self->object.isOnlyAdjectiveSuper());
                        Py_RETURN_BOOL(result);
                    }

                    static PyObject *t_IceTokenTags_isOnlyAdverbSuper(t_IceTokenTags *self)
                    {
                        jboolean result;
                        OBJ_CALL(result = self->object.isOnlyAdverbSuper());
                        Py_RETURN_BOOL(result);
                    }

                    static PyObject *t_IceTokenTags_isOnlyCase(t_IceTokenTags *self, PyObject *arg)
                    {
                        jchar a0;
                        jboolean result;

                        if (!parseArg(arg, "C", &a0))
                        {
                            OBJ_CALL(result = self->object.isOnlyCase(a0));
                            Py_RETURN_BOOL(result);
                        }

                        PyErr_SetArgsError((PyObject *) self, "isOnlyCase", arg);
                        return NULL;
                    }

                    static PyObject *t_IceTokenTags_isOnlyGender(t_IceTokenTags *self, PyObject *arg)
                    {
                        jchar a0;
                        jboolean result;

                        if (!parseArg(arg, "C", &a0))
                        {
                            OBJ_CALL(result = self->object.isOnlyGender(a0));
                            Py_RETURN_BOOL(result);
                        }

                        PyErr_SetArgsError((PyObject *) self, "isOnlyGender", arg);
                        return NULL;
                    }

                    static PyObject *t_IceTokenTags_isOnlyNumber(t_IceTokenTags *self, PyObject *arg)
                    {
                        jchar a0;
                        jboolean result;

                        if (!parseArg(arg, "C", &a0))
                        {
                            OBJ_CALL(result = self->object.isOnlyNumber(a0));
                            Py_RETURN_BOOL(result);
                        }

                        PyErr_SetArgsError((PyObject *) self, "isOnlyNumber", arg);
                        return NULL;
                    }

                    static PyObject *t_IceTokenTags_isOnlyOneGender(t_IceTokenTags *self)
                    {
                        jboolean result;
                        OBJ_CALL(result = self->object.isOnlyOneGender());
                        Py_RETURN_BOOL(result);
                    }

                    static PyObject *t_IceTokenTags_isOnlyOneGenderNumber(t_IceTokenTags *self)
                    {
                        jboolean result;
                        OBJ_CALL(result = self->object.isOnlyOneGenderNumber());
                        Py_RETURN_BOOL(result);
                    }

                    static PyObject *t_IceTokenTags_isOnlyVerbAny(t_IceTokenTags *self)
                    {
                        jboolean result;
                        OBJ_CALL(result = self->object.isOnlyVerbAny());
                        Py_RETURN_BOOL(result);
                    }

                    static PyObject *t_IceTokenTags_isOnlyWordClass(t_IceTokenTags *self, PyObject *arg)
                    {
                        ::is::iclt::icenlp::core::utils::IceTag$WordClass a0((jobject) NULL);
                        jboolean result;

                        if (!parseArg(arg, "k", ::is::iclt::icenlp::core::utils::IceTag$WordClass::initializeClass, &a0))
                        {
                            OBJ_CALL(result = self->object.isOnlyWordClass(a0));
                            Py_RETURN_BOOL(result);
                        }

                        PyErr_SetArgsError((PyObject *) self, "isOnlyWordClass", arg);
                        return NULL;
                    }

                    static PyObject *t_IceTokenTags_isOtherThanWordClass(t_IceTokenTags *self, PyObject *arg)
                    {
                        ::is::iclt::icenlp::core::utils::IceTag$WordClass a0((jobject) NULL);
                        jboolean result;

                        if (!parseArg(arg, "k", ::is::iclt::icenlp::core::utils::IceTag$WordClass::initializeClass, &a0))
                        {
                            OBJ_CALL(result = self->object.isOtherThanWordClass(a0));
                            Py_RETURN_BOOL(result);
                        }

                        PyErr_SetArgsError((PyObject *) self, "isOtherThanWordClass", arg);
                        return NULL;
                    }

                    static PyObject *t_IceTokenTags_isPersonalPronoun(t_IceTokenTags *self)
                    {
                        jboolean result;
                        OBJ_CALL(result = self->object.isPersonalPronoun());
                        Py_RETURN_BOOL(result);
                    }

                    static PyObject *t_IceTokenTags_isPossessivePronoun(t_IceTokenTags *self)
                    {
                        jboolean result;
                        OBJ_CALL(result = self->object.isPossessivePronoun());
                        Py_RETURN_BOOL(result);
                    }

                    static PyObject *t_IceTokenTags_isPreposition(t_IceTokenTags *self)
                    {
                        jboolean result;
                        OBJ_CALL(result = self->object.isPreposition());
                        Py_RETURN_BOOL(result);
                    }

                    static PyObject *t_IceTokenTags_isPronoun(t_IceTokenTags *self)
                    {
                        jboolean result;
                        OBJ_CALL(result = self->object.isPronoun());
                        Py_RETURN_BOOL(result);
                    }

                    static PyObject *t_IceTokenTags_isProperNoun(t_IceTokenTags *self)
                    {
                        jboolean result;
                        OBJ_CALL(result = self->object.isProperNoun());
                        Py_RETURN_BOOL(result);
                    }

                    static PyObject *t_IceTokenTags_isReflexivePronoun(t_IceTokenTags *self)
                    {
                        jboolean result;
                        OBJ_CALL(result = self->object.isReflexivePronoun());
                        Py_RETURN_BOOL(result);
                    }

                    static PyObject *t_IceTokenTags_isRelativeConjunction(t_IceTokenTags *self)
                    {
                        jboolean result;
                        OBJ_CALL(result = self->object.isRelativeConjunction());
                        Py_RETURN_BOOL(result);
                    }

                    static PyObject *t_IceTokenTags_isRelativePronoun(t_IceTokenTags *self)
                    {
                        jboolean result;
                        OBJ_CALL(result = self->object.isRelativePronoun());
                        Py_RETURN_BOOL(result);
                    }

                    static PyObject *t_IceTokenTags_isSVOMainSubject(t_IceTokenTags *self)
                    {
                        jboolean result;
                        OBJ_CALL(result = self->object.isSVOMainSubject());
                        Py_RETURN_BOOL(result);
                    }

                    static PyObject *t_IceTokenTags_isSVOMainVerb(t_IceTokenTags *self)
                    {
                        jboolean result;
                        OBJ_CALL(result = self->object.isSVOMainVerb());
                        Py_RETURN_BOOL(result);
                    }

                    static PyObject *t_IceTokenTags_isSVONone(t_IceTokenTags *self)
                    {
                        jboolean result;
                        OBJ_CALL(result = self->object.isSVONone());
                        Py_RETURN_BOOL(result);
                    }

                    static PyObject *t_IceTokenTags_isSVOObject(t_IceTokenTags *self)
                    {
                        jboolean result;
                        OBJ_CALL(result = self->object.isSVOObject());
                        Py_RETURN_BOOL(result);
                    }

                    static PyObject *t_IceTokenTags_isSVOPrepPhrase(t_IceTokenTags *self)
                    {
                        jboolean result;
                        OBJ_CALL(result = self->object.isSVOPrepPhrase());
                        Py_RETURN_BOOL(result);
                    }

                    static PyObject *t_IceTokenTags_isSVOSubject(t_IceTokenTags *self)
                    {
                        jboolean result;
                        OBJ_CALL(result = self->object.isSVOSubject());
                        Py_RETURN_BOOL(result);
                    }

                    static PyObject *t_IceTokenTags_isSVOVerb(t_IceTokenTags *self)
                    {
                        jboolean result;
                        OBJ_CALL(result = self->object.isSVOVerb());
                        Py_RETURN_BOOL(result);
                    }

                    static PyObject *t_IceTokenTags_isUnknownEnding(t_IceTokenTags *self)
                    {
                        jboolean result;
                        OBJ_CALL(result = self->object.isUnknownEnding());
                        Py_RETURN_BOOL(result);
                    }

                    static PyObject *t_IceTokenTags_isUnknownGuessed(t_IceTokenTags *self)
                    {
                        jboolean result;
                        OBJ_CALL(result = self->object.isUnknownGuessed());
                        Py_RETURN_BOOL(result);
                    }

                    static PyObject *t_IceTokenTags_isUnknownMorpho(t_IceTokenTags *self)
                    {
                        jboolean result;
                        OBJ_CALL(result = self->object.isUnknownMorpho());
                        Py_RETURN_BOOL(result);
                    }

                    static PyObject *t_IceTokenTags_isUnknownNone(t_IceTokenTags *self)
                    {
                        jboolean result;
                        OBJ_CALL(result = self->object.isUnknownNone());
                        Py_RETURN_BOOL(result);
                    }

                    static PyObject *t_IceTokenTags_isUnknownProperNoun(t_IceTokenTags *self)
                    {
                        jboolean result;
                        OBJ_CALL(result = self->object.isUnknownProperNoun());
                        Py_RETURN_BOOL(result);
                    }

                    static PyObject *t_IceTokenTags_isVerb(t_IceTokenTags *self)
                    {
                        jboolean result;
                        OBJ_CALL(result = self->object.isVerb());
                        Py_RETURN_BOOL(result);
                    }

                    static PyObject *t_IceTokenTags_isVerbActive(t_IceTokenTags *self)
                    {
                        jboolean result;
                        OBJ_CALL(result = self->object.isVerbActive());
                        Py_RETURN_BOOL(result);
                    }

                    static PyObject *t_IceTokenTags_isVerbAny(t_IceTokenTags *self)
                    {
                        jboolean result;
                        OBJ_CALL(result = self->object.isVerbAny());
                        Py_RETURN_BOOL(result);
                    }

                    static PyObject *t_IceTokenTags_isVerbAuxiliary(t_IceTokenTags *self)
                    {
                        jboolean result;
                        OBJ_CALL(result = self->object.isVerbAuxiliary());
                        Py_RETURN_BOOL(result);
                    }

                    static PyObject *t_IceTokenTags_isVerbBe(t_IceTokenTags *self)
                    {
                        jboolean result;
                        OBJ_CALL(result = self->object.isVerbBe());
                        Py_RETURN_BOOL(result);
                    }

                    static PyObject *t_IceTokenTags_isVerbCaseMarking(t_IceTokenTags *self)
                    {
                        jboolean result;
                        OBJ_CALL(result = self->object.isVerbCaseMarking());
                        Py_RETURN_BOOL(result);
                    }

                    static PyObject *t_IceTokenTags_isVerbImperative(t_IceTokenTags *self)
                    {
                        jboolean result;
                        OBJ_CALL(result = self->object.isVerbImperative());
                        Py_RETURN_BOOL(result);
                    }

                    static PyObject *t_IceTokenTags_isVerbIndicative(t_IceTokenTags *self)
                    {
                        jboolean result;
                        OBJ_CALL(result = self->object.isVerbIndicative());
                        Py_RETURN_BOOL(result);
                    }

                    static PyObject *t_IceTokenTags_isVerbInf(t_IceTokenTags *self)
                    {
                        jboolean result;
                        OBJ_CALL(result = self->object.isVerbInf());
                        Py_RETURN_BOOL(result);
                    }

                    static PyObject *t_IceTokenTags_isVerbInfinitive(t_IceTokenTags *self)
                    {
                        jboolean result;
                        OBJ_CALL(result = self->object.isVerbInfinitive());
                        Py_RETURN_BOOL(result);
                    }

                    static PyObject *t_IceTokenTags_isVerbMiddleForm(t_IceTokenTags *self)
                    {
                        jboolean result;
                        OBJ_CALL(result = self->object.isVerbMiddleForm());
                        Py_RETURN_BOOL(result);
                    }

                    static PyObject *t_IceTokenTags_isVerbPastPart(t_IceTokenTags *self)
                    {
                        jboolean result;
                        OBJ_CALL(result = self->object.isVerbPastPart());
                        Py_RETURN_BOOL(result);
                    }

                    static PyObject *t_IceTokenTags_isVerbPresentPart(t_IceTokenTags *self)
                    {
                        jboolean result;
                        OBJ_CALL(result = self->object.isVerbPresentPart());
                        Py_RETURN_BOOL(result);
                    }

                    static PyObject *t_IceTokenTags_isVerbSpecialAuxiliary(t_IceTokenTags *self)
                    {
                        jboolean result;
                        OBJ_CALL(result = self->object.isVerbSpecialAuxiliary());
                        Py_RETURN_BOOL(result);
                    }

                    static PyObject *t_IceTokenTags_isVerbSpecialInf(t_IceTokenTags *self)
                    {
                        jboolean result;
                        OBJ_CALL(result = self->object.isVerbSpecialInf());
                        Py_RETURN_BOOL(result);
                    }

                    static PyObject *t_IceTokenTags_isVerbSubjunctive(t_IceTokenTags *self)
                    {
                        jboolean result;
                        OBJ_CALL(result = self->object.isVerbSubjunctive());
                        Py_RETURN_BOOL(result);
                    }

                    static PyObject *t_IceTokenTags_isVerbSupine(t_IceTokenTags *self)
                    {
                        jboolean result;
                        OBJ_CALL(result = self->object.isVerbSupine());
                        Py_RETURN_BOOL(result);
                    }

                    static PyObject *t_IceTokenTags_isWordClass(t_IceTokenTags *self, PyObject *arg)
                    {
                        ::is::iclt::icenlp::core::utils::IceTag$WordClass a0((jobject) NULL);
                        jboolean result;

                        if (!parseArg(arg, "k", ::is::iclt::icenlp::core::utils::IceTag$WordClass::initializeClass, &a0))
                        {
                            OBJ_CALL(result = self->object.isWordClass(a0));
                            Py_RETURN_BOOL(result);
                        }

                        PyErr_SetArgsError((PyObject *) self, "isWordClass", arg);
                        return NULL;
                    }

                    static PyObject *t_IceTokenTags_makeCopy(t_IceTokenTags *self)
                    {
                        IceTokenTags result((jobject) NULL);
                        OBJ_CALL(result = self->object.makeCopy());
                        return t_IceTokenTags::wrap_Object(result);
                    }

                    static PyObject *t_IceTokenTags_numCases(t_IceTokenTags *self)
                    {
                        jint result;
                        OBJ_CALL(result = self->object.numCases());
                        return PyInt_FromLong((long) result);
                    }

                    static PyObject *t_IceTokenTags_numGenders(t_IceTokenTags *self)
                    {
                        jint result;
                        OBJ_CALL(result = self->object.numGenders());
                        return PyInt_FromLong((long) result);
                    }

                    static PyObject *t_IceTokenTags_numNominals(t_IceTokenTags *self)
                    {
                        jint result;
                        OBJ_CALL(result = self->object.numNominals());
                        return PyInt_FromLong((long) result);
                    }

                    static PyObject *t_IceTokenTags_numberCaseMatch(t_IceTokenTags *self, PyObject *arg)
                    {
                        IceTokenTags a0((jobject) NULL);
                        jboolean result;

                        if (!parseArg(arg, "k", IceTokenTags::initializeClass, &a0))
                        {
                            OBJ_CALL(result = self->object.numberCaseMatch(a0));
                            Py_RETURN_BOOL(result);
                        }

                        PyErr_SetArgsError((PyObject *) self, "numberCaseMatch", arg);
                        return NULL;
                    }

                    static PyObject *t_IceTokenTags_numberMatch(t_IceTokenTags *self, PyObject *arg)
                    {
                        IceTokenTags a0((jobject) NULL);
                        jboolean result;

                        if (!parseArg(arg, "k", IceTokenTags::initializeClass, &a0))
                        {
                            OBJ_CALL(result = self->object.numberMatch(a0));
                            Py_RETURN_BOOL(result);
                        }

                        PyErr_SetArgsError((PyObject *) self, "numberMatch", arg);
                        return NULL;
                    }

                    static PyObject *t_IceTokenTags_personNumberMatch(t_IceTokenTags *self, PyObject *arg)
                    {
                        IceTokenTags a0((jobject) NULL);
                        jboolean result;

                        if (!parseArg(arg, "k", IceTokenTags::initializeClass, &a0))
                        {
                            OBJ_CALL(result = self->object.personNumberMatch(a0));
                            Py_RETURN_BOOL(result);
                        }

                        PyErr_SetArgsError((PyObject *) self, "personNumberMatch", arg);
                        return NULL;
                    }

                    static PyObject *t_IceTokenTags_removeAllBut(t_IceTokenTags *self, PyObject *args)
                    {
                        ::is::iclt::icenlp::core::utils::IceTag$WordClass a0((jobject) NULL);

                        if (!parseArgs(args, "k", ::is::iclt::icenlp::core::utils::IceTag$WordClass::initializeClass, &a0))
                        {
                            OBJ_CALL(self->object.removeAllBut(a0));
                            Py_RETURN_NONE;
                        }

                        return callSuper(&PY_TYPE(IceTokenTags), (PyObject *) self, "removeAllBut", args, 2);
                    }

                    static PyObject *t_IceTokenTags_removeAllButCase(t_IceTokenTags *self, PyObject *arg)
                    {
                        jchar a0;

                        if (!parseArg(arg, "C", &a0))
                        {
                            OBJ_CALL(self->object.removeAllButCase(a0));
                            Py_RETURN_NONE;
                        }

                        PyErr_SetArgsError((PyObject *) self, "removeAllButCase", arg);
                        return NULL;
                    }

                    static PyObject *t_IceTokenTags_removeAllButGender(t_IceTokenTags *self, PyObject *args)
                    {
                        jchar a0;
                        jboolean a1;

                        if (!parseArgs(args, "CZ", &a0, &a1))
                        {
                            OBJ_CALL(self->object.removeAllButGender(a0, a1));
                            Py_RETURN_NONE;
                        }

                        PyErr_SetArgsError((PyObject *) self, "removeAllButGender", args);
                        return NULL;
                    }

                    static PyObject *t_IceTokenTags_removeAllButNounAdj(t_IceTokenTags *self)
                    {
                        OBJ_CALL(self->object.removeAllButNounAdj());
                        Py_RETURN_NONE;
                    }

                    static PyObject *t_IceTokenTags_removeAllButNumber(t_IceTokenTags *self, PyObject *arg)
                    {
                        jchar a0;

                        if (!parseArg(arg, "C", &a0))
                        {
                            OBJ_CALL(self->object.removeAllButNumber(a0));
                            Py_RETURN_NONE;
                        }

                        PyErr_SetArgsError((PyObject *) self, "removeAllButNumber", arg);
                        return NULL;
                    }

                    static PyObject *t_IceTokenTags_removeAllButProperNounType(t_IceTokenTags *self, PyObject *arg)
                    {
                        jchar a0;

                        if (!parseArg(arg, "C", &a0))
                        {
                            OBJ_CALL(self->object.removeAllButProperNounType(a0));
                            Py_RETURN_NONE;
                        }

                        PyErr_SetArgsError((PyObject *) self, "removeAllButProperNounType", arg);
                        return NULL;
                    }

                    static PyObject *t_IceTokenTags_removeAllButVerbs(t_IceTokenTags *self, PyObject *arg)
                    {
                        jboolean a0;

                        if (!parseArg(arg, "Z", &a0))
                        {
                            OBJ_CALL(self->object.removeAllButVerbs(a0));
                            Py_RETURN_NONE;
                        }

                        PyErr_SetArgsError((PyObject *) self, "removeAllButVerbs", arg);
                        return NULL;
                    }

                    static PyObject *t_IceTokenTags_removeArticle(t_IceTokenTags *self)
                    {
                        OBJ_CALL(self->object.removeArticle());
                        Py_RETURN_NONE;
                    }

                    static PyObject *t_IceTokenTags_removeCase(t_IceTokenTags *self, PyObject *args)
                    {
                        jchar a0;
                        jboolean a1;

                        if (!parseArgs(args, "CZ", &a0, &a1))
                        {
                            OBJ_CALL(self->object.removeCase(a0, a1));
                            Py_RETURN_NONE;
                        }

                        PyErr_SetArgsError((PyObject *) self, "removeCase", args);
                        return NULL;
                    }

                    static PyObject *t_IceTokenTags_removeGender(t_IceTokenTags *self, PyObject *args)
                    {
                        jchar a0;
                        jboolean a1;

                        if (!parseArgs(args, "CZ", &a0, &a1))
                        {
                            OBJ_CALL(self->object.removeGender(a0, a1));
                            Py_RETURN_NONE;
                        }

                        PyErr_SetArgsError((PyObject *) self, "removeGender", args);
                        return NULL;
                    }

                    static PyObject *t_IceTokenTags_removeNumber(t_IceTokenTags *self, PyObject *args)
                    {
                        jchar a0;
                        jboolean a1;

                        if (!parseArgs(args, "CZ", &a0, &a1))
                        {
                            OBJ_CALL(self->object.removeNumber(a0, a1));
                            Py_RETURN_NONE;
                        }

                        PyErr_SetArgsError((PyObject *) self, "removeNumber", args);
                        return NULL;
                    }

                    static PyObject *t_IceTokenTags_removeOnCondition(t_IceTokenTags *self, PyObject *args)
                    {
                        ::is::iclt::icenlp::core::tokenizer::IceTokenTags$Condition a0((jobject) NULL);
                        ::is::iclt::icenlp::core::utils::IceTag$WordClass a1((jobject) NULL);
                        jchar a2;

                        if (!parseArgs(args, "kkC", ::is::iclt::icenlp::core::tokenizer::IceTokenTags$Condition::initializeClass, ::is::iclt::icenlp::core::utils::IceTag$WordClass::initializeClass, &a0, &a1, &a2))
                        {
                            OBJ_CALL(self->object.removeOnCondition(a0, a1, a2));
                            Py_RETURN_NONE;
                        }

                        PyErr_SetArgsError((PyObject *) self, "removeOnCondition", args);
                        return NULL;
                    }

                    static PyObject *t_IceTokenTags_removePronouns(t_IceTokenTags *self)
                    {
                        OBJ_CALL(self->object.removePronouns());
                        Py_RETURN_NONE;
                    }

                    static PyObject *t_IceTokenTags_removeProperNounType(t_IceTokenTags *self, PyObject *arg)
                    {
                        jchar a0;

                        if (!parseArg(arg, "C", &a0))
                        {
                            OBJ_CALL(self->object.removeProperNounType(a0));
                            Py_RETURN_NONE;
                        }

                        PyErr_SetArgsError((PyObject *) self, "removeProperNounType", arg);
                        return NULL;
                    }

                    static PyObject *t_IceTokenTags_removeVerbForm(t_IceTokenTags *self, PyObject *arg)
                    {
                        ::is::iclt::icenlp::core::tokenizer::IceTokenTags$Condition a0((jobject) NULL);

                        if (!parseArg(arg, "k", ::is::iclt::icenlp::core::tokenizer::IceTokenTags$Condition::initializeClass, &a0))
                        {
                            OBJ_CALL(self->object.removeVerbForm(a0));
                            Py_RETURN_NONE;
                        }

                        PyErr_SetArgsError((PyObject *) self, "removeVerbForm", arg);
                        return NULL;
                    }

                    static PyObject *t_IceTokenTags_removeVerbs(t_IceTokenTags *self)
                    {
                        OBJ_CALL(self->object.removeVerbs());
                        Py_RETURN_NONE;
                    }

                    static PyObject *t_IceTokenTags_removeWordClass(t_IceTokenTags *self, PyObject *arg)
                    {
                        ::is::iclt::icenlp::core::utils::IceTag$WordClass a0((jobject) NULL);

                        if (!parseArg(arg, "k", ::is::iclt::icenlp::core::utils::IceTag$WordClass::initializeClass, &a0))
                        {
                            OBJ_CALL(self->object.removeWordClass(a0));
                            Py_RETURN_NONE;
                        }

                        PyErr_SetArgsError((PyObject *) self, "removeWordClass", arg);
                        return NULL;
                    }

                    static PyObject *t_IceTokenTags_setCase(t_IceTokenTags *self, PyObject *arg)
                    {
                        jchar a0;

                        if (!parseArg(arg, "C", &a0))
                        {
                            OBJ_CALL(self->object.setCase(a0));
                            Py_RETURN_NONE;
                        }

                        PyErr_SetArgsError((PyObject *) self, "setCase", arg);
                        return NULL;
                    }

                    static PyObject *t_IceTokenTags_setCompound(t_IceTokenTags *self, PyObject *arg)
                    {
                        jboolean a0;

                        if (!parseArg(arg, "Z", &a0))
                        {
                            OBJ_CALL(self->object.setCompound(a0));
                            Py_RETURN_NONE;
                        }

                        PyErr_SetArgsError((PyObject *) self, "setCompound", arg);
                        return NULL;
                    }

                    static PyObject *t_IceTokenTags_setDeclension(t_IceTokenTags *self, PyObject *arg)
                    {
                        jchar a0;

                        if (!parseArg(arg, "C", &a0))
                        {
                            OBJ_CALL(self->object.setDeclension(a0));
                            Py_RETURN_NONE;
                        }

                        PyErr_SetArgsError((PyObject *) self, "setDeclension", arg);
                        return NULL;
                    }

                    static PyObject *t_IceTokenTags_setDegree(t_IceTokenTags *self, PyObject *arg)
                    {
                        jchar a0;

                        if (!parseArg(arg, "C", &a0))
                        {
                            OBJ_CALL(self->object.setDegree(a0));
                            Py_RETURN_NONE;
                        }

                        PyErr_SetArgsError((PyObject *) self, "setDegree", arg);
                        return NULL;
                    }

                    static PyObject *t_IceTokenTags_setGender(t_IceTokenTags *self, PyObject *arg)
                    {
                        jchar a0;

                        if (!parseArg(arg, "C", &a0))
                        {
                            OBJ_CALL(self->object.setGender(a0));
                            Py_RETURN_NONE;
                        }

                        PyErr_SetArgsError((PyObject *) self, "setGender", arg);
                        return NULL;
                    }

                    static PyObject *t_IceTokenTags_setPlural(t_IceTokenTags *self)
                    {
                        OBJ_CALL(self->object.setPlural());
                        Py_RETURN_NONE;
                    }

                    static PyObject *t_IceTokenTags_setProperNameType(t_IceTokenTags *self, PyObject *arg)
                    {
                        jchar a0;

                        if (!parseArg(arg, "C", &a0))
                        {
                            OBJ_CALL(self->object.setProperNameType(a0));
                            Py_RETURN_NONE;
                        }

                        PyErr_SetArgsError((PyObject *) self, "setProperNameType", arg);
                        return NULL;
                    }

                    static PyObject *t_IceTokenTags_setSVOMark(t_IceTokenTags *self, PyObject *arg)
                    {
                        ::is::iclt::icenlp::core::tokenizer::IceTokenTags$SVOMark a0((jobject) NULL);

                        if (!parseArg(arg, "k", ::is::iclt::icenlp::core::tokenizer::IceTokenTags$SVOMark::initializeClass, &a0))
                        {
                            OBJ_CALL(self->object.setSVOMark(a0));
                            Py_RETURN_NONE;
                        }

                        PyErr_SetArgsError((PyObject *) self, "setSVOMark", arg);
                        return NULL;
                    }

                    static PyObject *t_IceTokenTags_setUnknownType(t_IceTokenTags *self, PyObject *arg)
                    {
                        ::is::iclt::icenlp::core::tokenizer::IceTokenTags$UnknownType a0((jobject) NULL);

                        if (!parseArg(arg, "k", ::is::iclt::icenlp::core::tokenizer::IceTokenTags$UnknownType::initializeClass, &a0))
                        {
                            OBJ_CALL(self->object.setUnknownType(a0));
                            Py_RETURN_NONE;
                        }

                        PyErr_SetArgsError((PyObject *) self, "setUnknownType", arg);
                        return NULL;
                    }

                    static PyObject *t_IceTokenTags_toString(t_IceTokenTags *self, PyObject *args)
                    {
                        ::java::lang::String result((jobject) NULL);

                        if (!parseArgs(args, ""))
                        {
                            OBJ_CALL(result = self->object.toString());
                            return j2p(result);
                        }

                        return callSuper(&PY_TYPE(IceTokenTags), (PyObject *) self, "toString", args, 2);
                    }

                    static PyObject *t_IceTokenTags_toStringSpecial(t_IceTokenTags *self)
                    {
                        ::java::lang::String result((jobject) NULL);
                        OBJ_CALL(result = self->object.toStringSpecial());
                        return j2p(result);
                    }

                    static PyObject *t_IceTokenTags_get__adjective(t_IceTokenTags *self, void *data)
                    {
                        jboolean value;
                        OBJ_CALL(value = self->object.isAdjective());
                        Py_RETURN_BOOL(value);
                    }

                    static PyObject *t_IceTokenTags_get__adjectiveComparative(t_IceTokenTags *self, void *data)
                    {
                        jboolean value;
                        OBJ_CALL(value = self->object.isAdjectiveComparative());
                        Py_RETURN_BOOL(value);
                    }

                    static PyObject *t_IceTokenTags_get__adjectiveIndeclineable(t_IceTokenTags *self, void *data)
                    {
                        jboolean value;
                        OBJ_CALL(value = self->object.isAdjectiveIndeclineable());
                        Py_RETURN_BOOL(value);
                    }

                    static PyObject *t_IceTokenTags_get__adjectivePositive(t_IceTokenTags *self, void *data)
                    {
                        jboolean value;
                        OBJ_CALL(value = self->object.isAdjectivePositive());
                        Py_RETURN_BOOL(value);
                    }

                    static PyObject *t_IceTokenTags_get__adjectiveStrong(t_IceTokenTags *self, void *data)
                    {
                        jboolean value;
                        OBJ_CALL(value = self->object.isAdjectiveStrong());
                        Py_RETURN_BOOL(value);
                    }

                    static PyObject *t_IceTokenTags_get__adjectiveSuper(t_IceTokenTags *self, void *data)
                    {
                        jboolean value;
                        OBJ_CALL(value = self->object.isAdjectiveSuper());
                        Py_RETURN_BOOL(value);
                    }

                    static PyObject *t_IceTokenTags_get__adjectiveWeak(t_IceTokenTags *self, void *data)
                    {
                        jboolean value;
                        OBJ_CALL(value = self->object.isAdjectiveWeak());
                        Py_RETURN_BOOL(value);
                    }

                    static PyObject *t_IceTokenTags_get__adverb(t_IceTokenTags *self, void *data)
                    {
                        jboolean value;
                        OBJ_CALL(value = self->object.isAdverb());
                        Py_RETURN_BOOL(value);
                    }

                    static PyObject *t_IceTokenTags_get__adverbComparative(t_IceTokenTags *self, void *data)
                    {
                        jboolean value;
                        OBJ_CALL(value = self->object.isAdverbComparative());
                        Py_RETURN_BOOL(value);
                    }

                    static PyObject *t_IceTokenTags_get__adverbSuper(t_IceTokenTags *self, void *data)
                    {
                        jboolean value;
                        OBJ_CALL(value = self->object.isAdverbSuper());
                        Py_RETURN_BOOL(value);
                    }

                    static PyObject *t_IceTokenTags_get__article(t_IceTokenTags *self, void *data)
                    {
                        jboolean value;
                        OBJ_CALL(value = self->object.isArticle());
                        Py_RETURN_BOOL(value);
                    }

                    static int t_IceTokenTags_set__case(t_IceTokenTags *self, PyObject *arg, void *data)
                    {
                        {
                            jchar value;
                            if (!parseArg(arg, "C", &value))
                            {
                                INT_CALL(self->object.setCase(value));
                                return 0;
                            }
                        }
                        PyErr_SetArgsError((PyObject *) self, "case", arg);
                        return -1;
                    }

                    static PyObject *t_IceTokenTags_get__compound(t_IceTokenTags *self, void *data)
                    {
                        jboolean value;
                        OBJ_CALL(value = self->object.isCompound());
                        Py_RETURN_BOOL(value);
                    }
                    static int t_IceTokenTags_set__compound(t_IceTokenTags *self, PyObject *arg, void *data)
                    {
                        {
                            jboolean value;
                            if (!parseArg(arg, "Z", &value))
                            {
                                INT_CALL(self->object.setCompound(value));
                                return 0;
                            }
                        }
                        PyErr_SetArgsError((PyObject *) self, "compound", arg);
                        return -1;
                    }

                    static PyObject *t_IceTokenTags_get__conjunction(t_IceTokenTags *self, void *data)
                    {
                        jboolean value;
                        OBJ_CALL(value = self->object.isConjunction());
                        Py_RETURN_BOOL(value);
                    }

                    static int t_IceTokenTags_set__declension(t_IceTokenTags *self, PyObject *arg, void *data)
                    {
                        {
                            jchar value;
                            if (!parseArg(arg, "C", &value))
                            {
                                INT_CALL(self->object.setDeclension(value));
                                return 0;
                            }
                        }
                        PyErr_SetArgsError((PyObject *) self, "declension", arg);
                        return -1;
                    }

                    static int t_IceTokenTags_set__degree(t_IceTokenTags *self, PyObject *arg, void *data)
                    {
                        {
                            jchar value;
                            if (!parseArg(arg, "C", &value))
                            {
                                INT_CALL(self->object.setDegree(value));
                                return 0;
                            }
                        }
                        PyErr_SetArgsError((PyObject *) self, "degree", arg);
                        return -1;
                    }

                    static PyObject *t_IceTokenTags_get__demonstrativePronoun(t_IceTokenTags *self, void *data)
                    {
                        jboolean value;
                        OBJ_CALL(value = self->object.isDemonstrativePronoun());
                        Py_RETURN_BOOL(value);
                    }

                    static PyObject *t_IceTokenTags_get__exclamation(t_IceTokenTags *self, void *data)
                    {
                        jboolean value;
                        OBJ_CALL(value = self->object.isExclamation());
                        Py_RETURN_BOOL(value);
                    }

                    static PyObject *t_IceTokenTags_get__firstWordClass(t_IceTokenTags *self, void *data)
                    {
                        ::java::lang::String value((jobject) NULL);
                        OBJ_CALL(value = self->object.getFirstWordClass());
                        return j2p(value);
                    }

                    static int t_IceTokenTags_set__gender(t_IceTokenTags *self, PyObject *arg, void *data)
                    {
                        {
                            jchar value;
                            if (!parseArg(arg, "C", &value))
                            {
                                INT_CALL(self->object.setGender(value));
                                return 0;
                            }
                        }
                        PyErr_SetArgsError((PyObject *) self, "gender", arg);
                        return -1;
                    }

                    static PyObject *t_IceTokenTags_get__indefinitePronoun(t_IceTokenTags *self, void *data)
                    {
                        jboolean value;
                        OBJ_CALL(value = self->object.isIndefinitePronoun());
                        Py_RETURN_BOOL(value);
                    }

                    static PyObject *t_IceTokenTags_get__infinitive(t_IceTokenTags *self, void *data)
                    {
                        jboolean value;
                        OBJ_CALL(value = self->object.isInfinitive());
                        Py_RETURN_BOOL(value);
                    }

                    static PyObject *t_IceTokenTags_get__interrogativePronoun(t_IceTokenTags *self, void *data)
                    {
                        jboolean value;
                        OBJ_CALL(value = self->object.isInterrogativePronoun());
                        Py_RETURN_BOOL(value);
                    }

                    static PyObject *t_IceTokenTags_get__nominal(t_IceTokenTags *self, void *data)
                    {
                        jboolean value;
                        OBJ_CALL(value = self->object.isNominal());
                        Py_RETURN_BOOL(value);
                    }

                    static PyObject *t_IceTokenTags_get__noun(t_IceTokenTags *self, void *data)
                    {
                        jboolean value;
                        OBJ_CALL(value = self->object.isNoun());
                        Py_RETURN_BOOL(value);
                    }

                    static PyObject *t_IceTokenTags_get__numeral(t_IceTokenTags *self, void *data)
                    {
                        jboolean value;
                        OBJ_CALL(value = self->object.isNumeral());
                        Py_RETURN_BOOL(value);
                    }

                    static PyObject *t_IceTokenTags_get__numeralOrdinal(t_IceTokenTags *self, void *data)
                    {
                        jboolean value;
                        OBJ_CALL(value = self->object.isNumeralOrdinal());
                        Py_RETURN_BOOL(value);
                    }

                    static PyObject *t_IceTokenTags_get__onlyAdjectiveSuper(t_IceTokenTags *self, void *data)
                    {
                        jboolean value;
                        OBJ_CALL(value = self->object.isOnlyAdjectiveSuper());
                        Py_RETURN_BOOL(value);
                    }

                    static PyObject *t_IceTokenTags_get__onlyAdverbSuper(t_IceTokenTags *self, void *data)
                    {
                        jboolean value;
                        OBJ_CALL(value = self->object.isOnlyAdverbSuper());
                        Py_RETURN_BOOL(value);
                    }

                    static PyObject *t_IceTokenTags_get__onlyOneGender(t_IceTokenTags *self, void *data)
                    {
                        jboolean value;
                        OBJ_CALL(value = self->object.isOnlyOneGender());
                        Py_RETURN_BOOL(value);
                    }

                    static PyObject *t_IceTokenTags_get__onlyOneGenderNumber(t_IceTokenTags *self, void *data)
                    {
                        jboolean value;
                        OBJ_CALL(value = self->object.isOnlyOneGenderNumber());
                        Py_RETURN_BOOL(value);
                    }

                    static PyObject *t_IceTokenTags_get__onlyVerbAny(t_IceTokenTags *self, void *data)
                    {
                        jboolean value;
                        OBJ_CALL(value = self->object.isOnlyVerbAny());
                        Py_RETURN_BOOL(value);
                    }

                    static PyObject *t_IceTokenTags_get__personalPronoun(t_IceTokenTags *self, void *data)
                    {
                        jboolean value;
                        OBJ_CALL(value = self->object.isPersonalPronoun());
                        Py_RETURN_BOOL(value);
                    }

                    static PyObject *t_IceTokenTags_get__possessivePronoun(t_IceTokenTags *self, void *data)
                    {
                        jboolean value;
                        OBJ_CALL(value = self->object.isPossessivePronoun());
                        Py_RETURN_BOOL(value);
                    }

                    static PyObject *t_IceTokenTags_get__preposition(t_IceTokenTags *self, void *data)
                    {
                        jboolean value;
                        OBJ_CALL(value = self->object.isPreposition());
                        Py_RETURN_BOOL(value);
                    }

                    static PyObject *t_IceTokenTags_get__pronoun(t_IceTokenTags *self, void *data)
                    {
                        jboolean value;
                        OBJ_CALL(value = self->object.isPronoun());
                        Py_RETURN_BOOL(value);
                    }

                    static int t_IceTokenTags_set__properNameType(t_IceTokenTags *self, PyObject *arg, void *data)
                    {
                        {
                            jchar value;
                            if (!parseArg(arg, "C", &value))
                            {
                                INT_CALL(self->object.setProperNameType(value));
                                return 0;
                            }
                        }
                        PyErr_SetArgsError((PyObject *) self, "properNameType", arg);
                        return -1;
                    }

                    static PyObject *t_IceTokenTags_get__properNoun(t_IceTokenTags *self, void *data)
                    {
                        jboolean value;
                        OBJ_CALL(value = self->object.isProperNoun());
                        Py_RETURN_BOOL(value);
                    }

                    static PyObject *t_IceTokenTags_get__reflexivePronoun(t_IceTokenTags *self, void *data)
                    {
                        jboolean value;
                        OBJ_CALL(value = self->object.isReflexivePronoun());
                        Py_RETURN_BOOL(value);
                    }

                    static PyObject *t_IceTokenTags_get__relativeConjunction(t_IceTokenTags *self, void *data)
                    {
                        jboolean value;
                        OBJ_CALL(value = self->object.isRelativeConjunction());
                        Py_RETURN_BOOL(value);
                    }

                    static PyObject *t_IceTokenTags_get__relativePronoun(t_IceTokenTags *self, void *data)
                    {
                        jboolean value;
                        OBJ_CALL(value = self->object.isRelativePronoun());
                        Py_RETURN_BOOL(value);
                    }

                    static PyObject *t_IceTokenTags_get__sVOMainSubject(t_IceTokenTags *self, void *data)
                    {
                        jboolean value;
                        OBJ_CALL(value = self->object.isSVOMainSubject());
                        Py_RETURN_BOOL(value);
                    }

                    static PyObject *t_IceTokenTags_get__sVOMainVerb(t_IceTokenTags *self, void *data)
                    {
                        jboolean value;
                        OBJ_CALL(value = self->object.isSVOMainVerb());
                        Py_RETURN_BOOL(value);
                    }

                    static PyObject *t_IceTokenTags_get__sVOMark(t_IceTokenTags *self, void *data)
                    {
                        ::is::iclt::icenlp::core::tokenizer::IceTokenTags$SVOMark value((jobject) NULL);
                        OBJ_CALL(value = self->object.getSVOMark());
                        return ::is::iclt::icenlp::core::tokenizer::t_IceTokenTags$SVOMark::wrap_Object(value);
                    }
                    static int t_IceTokenTags_set__sVOMark(t_IceTokenTags *self, PyObject *arg, void *data)
                    {
                        {
                            ::is::iclt::icenlp::core::tokenizer::IceTokenTags$SVOMark value((jobject) NULL);
                            if (!parseArg(arg, "k", ::is::iclt::icenlp::core::tokenizer::IceTokenTags$SVOMark::initializeClass, &value))
                            {
                                INT_CALL(self->object.setSVOMark(value));
                                return 0;
                            }
                        }
                        PyErr_SetArgsError((PyObject *) self, "sVOMark", arg);
                        return -1;
                    }

                    static PyObject *t_IceTokenTags_get__sVOMarkString(t_IceTokenTags *self, void *data)
                    {
                        ::java::lang::String value((jobject) NULL);
                        OBJ_CALL(value = self->object.getSVOMarkString());
                        return j2p(value);
                    }

                    static PyObject *t_IceTokenTags_get__sVONone(t_IceTokenTags *self, void *data)
                    {
                        jboolean value;
                        OBJ_CALL(value = self->object.isSVONone());
                        Py_RETURN_BOOL(value);
                    }

                    static PyObject *t_IceTokenTags_get__sVOObject(t_IceTokenTags *self, void *data)
                    {
                        jboolean value;
                        OBJ_CALL(value = self->object.isSVOObject());
                        Py_RETURN_BOOL(value);
                    }

                    static PyObject *t_IceTokenTags_get__sVOPrepPhrase(t_IceTokenTags *self, void *data)
                    {
                        jboolean value;
                        OBJ_CALL(value = self->object.isSVOPrepPhrase());
                        Py_RETURN_BOOL(value);
                    }

                    static PyObject *t_IceTokenTags_get__sVOSubject(t_IceTokenTags *self, void *data)
                    {
                        jboolean value;
                        OBJ_CALL(value = self->object.isSVOSubject());
                        Py_RETURN_BOOL(value);
                    }

                    static PyObject *t_IceTokenTags_get__sVOVerb(t_IceTokenTags *self, void *data)
                    {
                        jboolean value;
                        OBJ_CALL(value = self->object.isSVOVerb());
                        Py_RETURN_BOOL(value);
                    }

                    static PyObject *t_IceTokenTags_get__unknownEnding(t_IceTokenTags *self, void *data)
                    {
                        jboolean value;
                        OBJ_CALL(value = self->object.isUnknownEnding());
                        Py_RETURN_BOOL(value);
                    }

                    static PyObject *t_IceTokenTags_get__unknownGuessed(t_IceTokenTags *self, void *data)
                    {
                        jboolean value;
                        OBJ_CALL(value = self->object.isUnknownGuessed());
                        Py_RETURN_BOOL(value);
                    }

                    static PyObject *t_IceTokenTags_get__unknownMorpho(t_IceTokenTags *self, void *data)
                    {
                        jboolean value;
                        OBJ_CALL(value = self->object.isUnknownMorpho());
                        Py_RETURN_BOOL(value);
                    }

                    static PyObject *t_IceTokenTags_get__unknownNone(t_IceTokenTags *self, void *data)
                    {
                        jboolean value;
                        OBJ_CALL(value = self->object.isUnknownNone());
                        Py_RETURN_BOOL(value);
                    }

                    static PyObject *t_IceTokenTags_get__unknownProperNoun(t_IceTokenTags *self, void *data)
                    {
                        jboolean value;
                        OBJ_CALL(value = self->object.isUnknownProperNoun());
                        Py_RETURN_BOOL(value);
                    }

                    static int t_IceTokenTags_set__unknownType(t_IceTokenTags *self, PyObject *arg, void *data)
                    {
                        {
                            ::is::iclt::icenlp::core::tokenizer::IceTokenTags$UnknownType value((jobject) NULL);
                            if (!parseArg(arg, "k", ::is::iclt::icenlp::core::tokenizer::IceTokenTags$UnknownType::initializeClass, &value))
                            {
                                INT_CALL(self->object.setUnknownType(value));
                                return 0;
                            }
                        }
                        PyErr_SetArgsError((PyObject *) self, "unknownType", arg);
                        return -1;
                    }

                    static PyObject *t_IceTokenTags_get__verb(t_IceTokenTags *self, void *data)
                    {
                        jboolean value;
                        OBJ_CALL(value = self->object.isVerb());
                        Py_RETURN_BOOL(value);
                    }

                    static PyObject *t_IceTokenTags_get__verbActive(t_IceTokenTags *self, void *data)
                    {
                        jboolean value;
                        OBJ_CALL(value = self->object.isVerbActive());
                        Py_RETURN_BOOL(value);
                    }

                    static PyObject *t_IceTokenTags_get__verbAny(t_IceTokenTags *self, void *data)
                    {
                        jboolean value;
                        OBJ_CALL(value = self->object.isVerbAny());
                        Py_RETURN_BOOL(value);
                    }

                    static PyObject *t_IceTokenTags_get__verbAuxiliary(t_IceTokenTags *self, void *data)
                    {
                        jboolean value;
                        OBJ_CALL(value = self->object.isVerbAuxiliary());
                        Py_RETURN_BOOL(value);
                    }

                    static PyObject *t_IceTokenTags_get__verbBe(t_IceTokenTags *self, void *data)
                    {
                        jboolean value;
                        OBJ_CALL(value = self->object.isVerbBe());
                        Py_RETURN_BOOL(value);
                    }

                    static PyObject *t_IceTokenTags_get__verbCaseMarking(t_IceTokenTags *self, void *data)
                    {
                        jboolean value;
                        OBJ_CALL(value = self->object.isVerbCaseMarking());
                        Py_RETURN_BOOL(value);
                    }

                    static PyObject *t_IceTokenTags_get__verbImperative(t_IceTokenTags *self, void *data)
                    {
                        jboolean value;
                        OBJ_CALL(value = self->object.isVerbImperative());
                        Py_RETURN_BOOL(value);
                    }

                    static PyObject *t_IceTokenTags_get__verbIndicative(t_IceTokenTags *self, void *data)
                    {
                        jboolean value;
                        OBJ_CALL(value = self->object.isVerbIndicative());
                        Py_RETURN_BOOL(value);
                    }

                    static PyObject *t_IceTokenTags_get__verbInf(t_IceTokenTags *self, void *data)
                    {
                        jboolean value;
                        OBJ_CALL(value = self->object.isVerbInf());
                        Py_RETURN_BOOL(value);
                    }

                    static PyObject *t_IceTokenTags_get__verbInfinitive(t_IceTokenTags *self, void *data)
                    {
                        jboolean value;
                        OBJ_CALL(value = self->object.isVerbInfinitive());
                        Py_RETURN_BOOL(value);
                    }

                    static PyObject *t_IceTokenTags_get__verbMiddleForm(t_IceTokenTags *self, void *data)
                    {
                        jboolean value;
                        OBJ_CALL(value = self->object.isVerbMiddleForm());
                        Py_RETURN_BOOL(value);
                    }

                    static PyObject *t_IceTokenTags_get__verbPastPart(t_IceTokenTags *self, void *data)
                    {
                        jboolean value;
                        OBJ_CALL(value = self->object.isVerbPastPart());
                        Py_RETURN_BOOL(value);
                    }

                    static PyObject *t_IceTokenTags_get__verbPresentPart(t_IceTokenTags *self, void *data)
                    {
                        jboolean value;
                        OBJ_CALL(value = self->object.isVerbPresentPart());
                        Py_RETURN_BOOL(value);
                    }

                    static PyObject *t_IceTokenTags_get__verbSpecialAuxiliary(t_IceTokenTags *self, void *data)
                    {
                        jboolean value;
                        OBJ_CALL(value = self->object.isVerbSpecialAuxiliary());
                        Py_RETURN_BOOL(value);
                    }

                    static PyObject *t_IceTokenTags_get__verbSpecialInf(t_IceTokenTags *self, void *data)
                    {
                        jboolean value;
                        OBJ_CALL(value = self->object.isVerbSpecialInf());
                        Py_RETURN_BOOL(value);
                    }

                    static PyObject *t_IceTokenTags_get__verbSubjunctive(t_IceTokenTags *self, void *data)
                    {
                        jboolean value;
                        OBJ_CALL(value = self->object.isVerbSubjunctive());
                        Py_RETURN_BOOL(value);
                    }

                    static PyObject *t_IceTokenTags_get__verbSupine(t_IceTokenTags *self, void *data)
                    {
                        jboolean value;
                        OBJ_CALL(value = self->object.isVerbSupine());
                        Py_RETURN_BOOL(value);
                    }
                }
            }
        }
    }
}
#include <jni.h>
#include "JCCEnv.h"
#include "is/iclt/icenlp/core/iceparser/Clean1.h"
#include "java/io/IOException.h"
#include "java/io/Reader.h"
#include "java/io/Writer.h"
#include "java/lang/Class.h"
#include "java/io/InputStream.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace is {
    namespace iclt {
        namespace icenlp {
            namespace core {
                namespace iceparser {

                    ::java::lang::Class *Clean1::class$ = NULL;
                    jmethodID *Clean1::mids$ = NULL;
                    jint Clean1::YYEOF = (jint) 0;
                    jint Clean1::YYINITIAL = (jint) 0;

                    jclass Clean1::initializeClass()
                    {
                        if (!class$)
                        {

                            jclass cls = (jclass) env->findClass("is/iclt/icenlp/core/iceparser/Clean1");

                            mids$ = new jmethodID[max_mid];
                            mids$[mid_init$_cf2e3c10] = env->getMethodID(cls, "<init>", "(Ljava/io/Reader;)V");
                            mids$[mid_init$_be2e4f90] = env->getMethodID(cls, "<init>", "(Ljava/io/InputStream;)V");
                            mids$[mid_main_4dd4540c] = env->getStaticMethodID(cls, "main", "([Ljava/lang/String;)V");
                            mids$[mid_parse_5bcd5850] = env->getMethodID(cls, "parse", "(Ljava/io/Writer;)V");
                            mids$[mid_yybegin_39c7bd3c] = env->getMethodID(cls, "yybegin", "(I)V");
                            mids$[mid_yycharat_39c7bd29] = env->getMethodID(cls, "yycharat", "(I)C");
                            mids$[mid_yyclose_54c6a166] = env->getMethodID(cls, "yyclose", "()V");
                            mids$[mid_yylength_54c6a179] = env->getMethodID(cls, "yylength", "()I");
                            mids$[mid_yylex_54c6a179] = env->getMethodID(cls, "yylex", "()I");
                            mids$[mid_yypushback_39c7bd3c] = env->getMethodID(cls, "yypushback", "(I)V");
                            mids$[mid_yyreset_cf2e3c10] = env->getMethodID(cls, "yyreset", "(Ljava/io/Reader;)V");
                            mids$[mid_yystate_54c6a179] = env->getMethodID(cls, "yystate", "()I");
                            mids$[mid_yytext_14c7b5c5] = env->getMethodID(cls, "yytext", "()Ljava/lang/String;");

                            class$ = (::java::lang::Class *) new JObject(cls);
                            cls = (jclass) class$->this$;

                            YYEOF = env->getStaticIntField(cls, "YYEOF");
                            YYINITIAL = env->getStaticIntField(cls, "YYINITIAL");
                        }
                        return (jclass) class$->this$;
                    }

                    Clean1::Clean1(const ::java::io::Reader & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_cf2e3c10, a0.this$)) {}

                    Clean1::Clean1(const ::java::io::InputStream & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_be2e4f90, a0.this$)) {}

                    void Clean1::main(const JArray< ::java::lang::String > & a0)
                    {
                        jclass cls = initializeClass();
                        env->callStaticVoidMethod(cls, mids$[mid_main_4dd4540c], a0.this$);
                    }

                    void Clean1::parse(const ::java::io::Writer & a0) const
                    {
                        env->callVoidMethod(this$, mids$[mid_parse_5bcd5850], a0.this$);
                    }

                    void Clean1::yybegin(jint a0) const
                    {
                        env->callVoidMethod(this$, mids$[mid_yybegin_39c7bd3c], a0);
                    }

                    jchar Clean1::yycharat(jint a0) const
                    {
                        return env->callCharMethod(this$, mids$[mid_yycharat_39c7bd29], a0);
                    }

                    void Clean1::yyclose() const
                    {
                        env->callVoidMethod(this$, mids$[mid_yyclose_54c6a166]);
                    }

                    jint Clean1::yylength() const
                    {
                        return env->callIntMethod(this$, mids$[mid_yylength_54c6a179]);
                    }

                    jint Clean1::yylex() const
                    {
                        return env->callIntMethod(this$, mids$[mid_yylex_54c6a179]);
                    }

                    void Clean1::yypushback(jint a0) const
                    {
                        env->callVoidMethod(this$, mids$[mid_yypushback_39c7bd3c], a0);
                    }

                    void Clean1::yyreset(const ::java::io::Reader & a0) const
                    {
                        env->callVoidMethod(this$, mids$[mid_yyreset_cf2e3c10], a0.this$);
                    }

                    jint Clean1::yystate() const
                    {
                        return env->callIntMethod(this$, mids$[mid_yystate_54c6a179]);
                    }

                    ::java::lang::String Clean1::yytext() const
                    {
                        return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_yytext_14c7b5c5]));
                    }
                }
            }
        }
    }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace is {
    namespace iclt {
        namespace icenlp {
            namespace core {
                namespace iceparser {
                    static PyObject *t_Clean1_cast_(PyTypeObject *type, PyObject *arg);
                    static PyObject *t_Clean1_instance_(PyTypeObject *type, PyObject *arg);
                    static int t_Clean1_init_(t_Clean1 *self, PyObject *args, PyObject *kwds);
                    static PyObject *t_Clean1_main(PyTypeObject *type, PyObject *arg);
                    static PyObject *t_Clean1_parse(t_Clean1 *self, PyObject *arg);
                    static PyObject *t_Clean1_yybegin(t_Clean1 *self, PyObject *arg);
                    static PyObject *t_Clean1_yycharat(t_Clean1 *self, PyObject *arg);
                    static PyObject *t_Clean1_yyclose(t_Clean1 *self);
                    static PyObject *t_Clean1_yylength(t_Clean1 *self);
                    static PyObject *t_Clean1_yylex(t_Clean1 *self);
                    static PyObject *t_Clean1_yypushback(t_Clean1 *self, PyObject *arg);
                    static PyObject *t_Clean1_yyreset(t_Clean1 *self, PyObject *arg);
                    static PyObject *t_Clean1_yystate(t_Clean1 *self);
                    static PyObject *t_Clean1_yytext(t_Clean1 *self);

                    static PyMethodDef t_Clean1__methods_[] = {
                        DECLARE_METHOD(t_Clean1, cast_, METH_O | METH_CLASS),
                        DECLARE_METHOD(t_Clean1, instance_, METH_O | METH_CLASS),
                        DECLARE_METHOD(t_Clean1, main, METH_O | METH_CLASS),
                        DECLARE_METHOD(t_Clean1, parse, METH_O),
                        DECLARE_METHOD(t_Clean1, yybegin, METH_O),
                        DECLARE_METHOD(t_Clean1, yycharat, METH_O),
                        DECLARE_METHOD(t_Clean1, yyclose, METH_NOARGS),
                        DECLARE_METHOD(t_Clean1, yylength, METH_NOARGS),
                        DECLARE_METHOD(t_Clean1, yylex, METH_NOARGS),
                        DECLARE_METHOD(t_Clean1, yypushback, METH_O),
                        DECLARE_METHOD(t_Clean1, yyreset, METH_O),
                        DECLARE_METHOD(t_Clean1, yystate, METH_NOARGS),
                        DECLARE_METHOD(t_Clean1, yytext, METH_NOARGS),
                        { NULL, NULL, 0, NULL }
                    };

                    DECLARE_TYPE(Clean1, t_Clean1, ::java::lang::Object, Clean1, t_Clean1_init_, 0, 0, 0, 0, 0);

                    void t_Clean1::install(PyObject *module)
                    {
                        installType(&PY_TYPE(Clean1), module, "Clean1", 0);
                    }

                    void t_Clean1::initialize(PyObject *module)
                    {
                        PyDict_SetItemString(PY_TYPE(Clean1).tp_dict, "class_", make_descriptor(Clean1::initializeClass, 1));
                        PyDict_SetItemString(PY_TYPE(Clean1).tp_dict, "wrapfn_", make_descriptor(t_Clean1::wrap_jobject));
                        PyDict_SetItemString(PY_TYPE(Clean1).tp_dict, "boxfn_", make_descriptor(boxObject));
                        Clean1::initializeClass();
                        PyDict_SetItemString(PY_TYPE(Clean1).tp_dict, "YYEOF", make_descriptor(Clean1::YYEOF));
                        PyDict_SetItemString(PY_TYPE(Clean1).tp_dict, "YYINITIAL", make_descriptor(Clean1::YYINITIAL));
                    }

                    static PyObject *t_Clean1_cast_(PyTypeObject *type, PyObject *arg)
                    {
                        if (!(arg = castCheck(arg, Clean1::initializeClass, 1)))
                            return NULL;
                        return t_Clean1::wrap_Object(Clean1(((t_Clean1 *) arg)->object.this$));
                    }
                    static PyObject *t_Clean1_instance_(PyTypeObject *type, PyObject *arg)
                    {
                        if (!castCheck(arg, Clean1::initializeClass, 0))
                            Py_RETURN_FALSE;
                        Py_RETURN_TRUE;
                    }

                    static int t_Clean1_init_(t_Clean1 *self, PyObject *args, PyObject *kwds)
                    {
                        switch (PyTuple_GET_SIZE(args)) {
                          case 1:
                            {
                                ::java::io::Reader a0((jobject) NULL);
                                Clean1 object((jobject) NULL);

                                if (!parseArgs(args, "k", ::java::io::Reader::initializeClass, &a0))
                                {
                                    INT_CALL(object = Clean1(a0));
                                    self->object = object;
                                    break;
                                }
                            }
                            {
                                ::java::io::InputStream a0((jobject) NULL);
                                Clean1 object((jobject) NULL);

                                if (!parseArgs(args, "k", ::java::io::InputStream::initializeClass, &a0))
                                {
                                    INT_CALL(object = Clean1(a0));
                                    self->object = object;
                                    break;
                                }
                            }
                          default:
                            PyErr_SetArgsError((PyObject *) self, "__init__", args);
                            return -1;
                        }

                        return 0;
                    }

                    static PyObject *t_Clean1_main(PyTypeObject *type, PyObject *arg)
                    {
                        JArray< ::java::lang::String > a0((jobject) NULL);

                        if (!parseArg(arg, "[s", &a0))
                        {
                            OBJ_CALL(::is::iclt::icenlp::core::iceparser::Clean1::main(a0));
                            Py_RETURN_NONE;
                        }

                        PyErr_SetArgsError(type, "main", arg);
                        return NULL;
                    }

                    static PyObject *t_Clean1_parse(t_Clean1 *self, PyObject *arg)
                    {
                        ::java::io::Writer a0((jobject) NULL);

                        if (!parseArg(arg, "k", ::java::io::Writer::initializeClass, &a0))
                        {
                            OBJ_CALL(self->object.parse(a0));
                            Py_RETURN_NONE;
                        }

                        PyErr_SetArgsError((PyObject *) self, "parse", arg);
                        return NULL;
                    }

                    static PyObject *t_Clean1_yybegin(t_Clean1 *self, PyObject *arg)
                    {
                        jint a0;

                        if (!parseArg(arg, "I", &a0))
                        {
                            OBJ_CALL(self->object.yybegin(a0));
                            Py_RETURN_NONE;
                        }

                        PyErr_SetArgsError((PyObject *) self, "yybegin", arg);
                        return NULL;
                    }

                    static PyObject *t_Clean1_yycharat(t_Clean1 *self, PyObject *arg)
                    {
                        jint a0;
                        jchar result;

                        if (!parseArg(arg, "I", &a0))
                        {
                            OBJ_CALL(result = self->object.yycharat(a0));
                            return PyUnicode_FromUnicode((Py_UNICODE *) &result, 1);
                        }

                        PyErr_SetArgsError((PyObject *) self, "yycharat", arg);
                        return NULL;
                    }

                    static PyObject *t_Clean1_yyclose(t_Clean1 *self)
                    {
                        OBJ_CALL(self->object.yyclose());
                        Py_RETURN_NONE;
                    }

                    static PyObject *t_Clean1_yylength(t_Clean1 *self)
                    {
                        jint result;
                        OBJ_CALL(result = self->object.yylength());
                        return PyInt_FromLong((long) result);
                    }

                    static PyObject *t_Clean1_yylex(t_Clean1 *self)
                    {
                        jint result;
                        OBJ_CALL(result = self->object.yylex());
                        return PyInt_FromLong((long) result);
                    }

                    static PyObject *t_Clean1_yypushback(t_Clean1 *self, PyObject *arg)
                    {
                        jint a0;

                        if (!parseArg(arg, "I", &a0))
                        {
                            OBJ_CALL(self->object.yypushback(a0));
                            Py_RETURN_NONE;
                        }

                        PyErr_SetArgsError((PyObject *) self, "yypushback", arg);
                        return NULL;
                    }

                    static PyObject *t_Clean1_yyreset(t_Clean1 *self, PyObject *arg)
                    {
                        ::java::io::Reader a0((jobject) NULL);

                        if (!parseArg(arg, "k", ::java::io::Reader::initializeClass, &a0))
                        {
                            OBJ_CALL(self->object.yyreset(a0));
                            Py_RETURN_NONE;
                        }

                        PyErr_SetArgsError((PyObject *) self, "yyreset", arg);
                        return NULL;
                    }

                    static PyObject *t_Clean1_yystate(t_Clean1 *self)
                    {
                        jint result;
                        OBJ_CALL(result = self->object.yystate());
                        return PyInt_FromLong((long) result);
                    }

                    static PyObject *t_Clean1_yytext(t_Clean1 *self)
                    {
                        ::java::lang::String result((jobject) NULL);
                        OBJ_CALL(result = self->object.yytext());
                        return j2p(result);
                    }
                }
            }
        }
    }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/util/Enumeration.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace java {
    namespace util {

        ::java::lang::Class *Enumeration::class$ = NULL;
        jmethodID *Enumeration::mids$ = NULL;

        jclass Enumeration::initializeClass()
        {
            if (!class$)
            {

                jclass cls = (jclass) env->findClass("java/util/Enumeration");

                mids$ = new jmethodID[max_mid];
                mids$[mid_hasMoreElements_54c6a16a] = env->getMethodID(cls, "hasMoreElements", "()Z");
                mids$[mid_nextElement_846352c3] = env->getMethodID(cls, "nextElement", "()Ljava/lang/Object;");

                class$ = (::java::lang::Class *) new JObject(cls);
            }
            return (jclass) class$->this$;
        }

        jboolean Enumeration::hasMoreElements() const
        {
            return env->callBooleanMethod(this$, mids$[mid_hasMoreElements_54c6a16a]);
        }

        ::java::lang::Object Enumeration::nextElement() const
        {
            return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_nextElement_846352c3]));
        }
    }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
    namespace util {
        static PyObject *t_Enumeration_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Enumeration_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Enumeration_of_(t_Enumeration *self, PyObject *args);
        static PyObject *t_Enumeration_hasMoreElements(t_Enumeration *self);
        static PyObject *t_Enumeration_nextElement(t_Enumeration *self);
        static PyObject *t_Enumeration_get__parameters_(t_Enumeration *self, void *data);
        static PyGetSetDef t_Enumeration__fields_[] = {
            DECLARE_GET_FIELD(t_Enumeration, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_Enumeration__methods_[] = {
            DECLARE_METHOD(t_Enumeration, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Enumeration, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Enumeration, of_, METH_VARARGS),
            DECLARE_METHOD(t_Enumeration, hasMoreElements, METH_NOARGS),
            DECLARE_METHOD(t_Enumeration, nextElement, METH_NOARGS),
            { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(Enumeration, t_Enumeration, ::java::lang::Object, Enumeration, abstract_init, PyObject_SelfIter, ((PyObject *(*)(::java::util::t_Enumeration *)) get_generic_enumeration_next< ::java::util::t_Enumeration,::java::lang::t_Object >), t_Enumeration__fields_, 0, 0);
        PyObject *t_Enumeration::wrap_Object(const Enumeration& object, PyTypeObject *E)
        {
            PyObject *obj = t_Enumeration::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
                t_Enumeration *self = (t_Enumeration *) obj;
                self->parameters[0] = E;
            }
            return obj;
        }

        PyObject *t_Enumeration::wrap_jobject(const jobject& object, PyTypeObject *E)
        {
            PyObject *obj = t_Enumeration::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
                t_Enumeration *self = (t_Enumeration *) obj;
                self->parameters[0] = E;
            }
            return obj;
        }

        void t_Enumeration::install(PyObject *module)
        {
            installType(&PY_TYPE(Enumeration), module, "Enumeration", 0);
        }

        void t_Enumeration::initialize(PyObject *module)
        {
            PyDict_SetItemString(PY_TYPE(Enumeration).tp_dict, "class_", make_descriptor(Enumeration::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Enumeration).tp_dict, "wrapfn_", make_descriptor(t_Enumeration::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Enumeration).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_Enumeration_cast_(PyTypeObject *type, PyObject *arg)
        {
            if (!(arg = castCheck(arg, Enumeration::initializeClass, 1)))
                return NULL;
            return t_Enumeration::wrap_Object(Enumeration(((t_Enumeration *) arg)->object.this$));
        }
        static PyObject *t_Enumeration_instance_(PyTypeObject *type, PyObject *arg)
        {
            if (!castCheck(arg, Enumeration::initializeClass, 0))
                Py_RETURN_FALSE;
            Py_RETURN_TRUE;
        }

        static PyObject *t_Enumeration_of_(t_Enumeration *self, PyObject *args)
        {
            if (!parseArg(args, "T", 1, &(self->parameters)))
                Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static PyObject *t_Enumeration_hasMoreElements(t_Enumeration *self)
        {
            jboolean result;
            OBJ_CALL(result = self->object.hasMoreElements());
            Py_RETURN_BOOL(result);
        }

        static PyObject *t_Enumeration_nextElement(t_Enumeration *self)
        {
            ::java::lang::Object result((jobject) NULL);
            OBJ_CALL(result = self->object.nextElement());
            return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
        }
        static PyObject *t_Enumeration_get__parameters_(t_Enumeration *self, void *data)
        {
            return typeParameters(self->parameters, sizeof(self->parameters));
        }
    }
}
#include <jni.h>
#include "JCCEnv.h"
#include "is/iclt/icenlp/core/utils/Lexicon.h"
#include "java/io/IOException.h"
#include "java/util/Set.h"
#include "java/util/Enumeration.h"
#include "java/lang/NullPointerException.h"
#include "java/lang/Class.h"
#include "java/io/InputStream.h"
#include "java/lang/String.h"
#include "is/iclt/icenlp/core/utils/PropertiesEncoding.h"
#include "JArray.h"

namespace is {
    namespace iclt {
        namespace icenlp {
            namespace core {
                namespace utils {

                    ::java::lang::Class *Lexicon::class$ = NULL;
                    jmethodID *Lexicon::mids$ = NULL;

                    jclass Lexicon::initializeClass()
                    {
                        if (!class$)
                        {

                            jclass cls = (jclass) env->findClass("is/iclt/icenlp/core/utils/Lexicon");

                            mids$ = new jmethodID[max_mid];
                            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                            mids$[mid_init$_be2e4f90] = env->getMethodID(cls, "<init>", "(Ljava/io/InputStream;)V");
                            mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
                            mids$[mid_containsKey_5fdc3f44] = env->getMethodID(cls, "containsKey", "(Ljava/lang/String;)Z");
                            mids$[mid_getEntrySet_03e99967] = env->getMethodID(cls, "getEntrySet", "()Ljava/util/Set;");
                            mids$[mid_getProperties_d345f89e] = env->getMethodID(cls, "getProperties", "()Lis/iclt/icenlp/core/utils/PropertiesEncoding;");
                            mids$[mid_getSize_54c6a179] = env->getMethodID(cls, "getSize", "()I");
                            mids$[mid_keys_39f88070] = env->getMethodID(cls, "keys", "()Ljava/util/Enumeration;");
                            mids$[mid_load_5fdc3f48] = env->getMethodID(cls, "load", "(Ljava/lang/String;)V");
                            mids$[mid_load_be2e4f90] = env->getMethodID(cls, "load", "(Ljava/io/InputStream;)V");
                            mids$[mid_lookup_edaaade4] = env->getMethodID(cls, "lookup", "(Ljava/lang/String;Z)Ljava/lang/String;");
                            mids$[mid_put_4a264742] = env->getMethodID(cls, "put", "(Ljava/lang/String;Ljava/lang/String;)V");

                            class$ = (::java::lang::Class *) new JObject(cls);
                        }
                        return (jclass) class$->this$;
                    }

                    Lexicon::Lexicon() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

                    Lexicon::Lexicon(const ::java::io::InputStream & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_be2e4f90, a0.this$)) {}

                    Lexicon::Lexicon(const ::java::lang::String & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}

                    jboolean Lexicon::containsKey(const ::java::lang::String & a0) const
                    {
                        return env->callBooleanMethod(this$, mids$[mid_containsKey_5fdc3f44], a0.this$);
                    }

                    ::java::util::Set Lexicon::getEntrySet() const
                    {
                        return ::java::util::Set(env->callObjectMethod(this$, mids$[mid_getEntrySet_03e99967]));
                    }

                    ::is::iclt::icenlp::core::utils::PropertiesEncoding Lexicon::getProperties() const
                    {
                        return ::is::iclt::icenlp::core::utils::PropertiesEncoding(env->callObjectMethod(this$, mids$[mid_getProperties_d345f89e]));
                    }

                    jint Lexicon::getSize() const
                    {
                        return env->callIntMethod(this$, mids$[mid_getSize_54c6a179]);
                    }

                    ::java::util::Enumeration Lexicon::keys() const
                    {
                        return ::java::util::Enumeration(env->callObjectMethod(this$, mids$[mid_keys_39f88070]));
                    }

                    void Lexicon::load(const ::java::lang::String & a0) const
                    {
                        env->callVoidMethod(this$, mids$[mid_load_5fdc3f48], a0.this$);
                    }

                    void Lexicon::load(const ::java::io::InputStream & a0) const
                    {
                        env->callVoidMethod(this$, mids$[mid_load_be2e4f90], a0.this$);
                    }

                    ::java::lang::String Lexicon::lookup(const ::java::lang::String & a0, jboolean a1) const
                    {
                        return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_lookup_edaaade4], a0.this$, a1));
                    }

                    void Lexicon::put(const ::java::lang::String & a0, const ::java::lang::String & a1) const
                    {
                        env->callVoidMethod(this$, mids$[mid_put_4a264742], a0.this$, a1.this$);
                    }
                }
            }
        }
    }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace is {
    namespace iclt {
        namespace icenlp {
            namespace core {
                namespace utils {
                    static PyObject *t_Lexicon_cast_(PyTypeObject *type, PyObject *arg);
                    static PyObject *t_Lexicon_instance_(PyTypeObject *type, PyObject *arg);
                    static int t_Lexicon_init_(t_Lexicon *self, PyObject *args, PyObject *kwds);
                    static PyObject *t_Lexicon_containsKey(t_Lexicon *self, PyObject *arg);
                    static PyObject *t_Lexicon_getEntrySet(t_Lexicon *self);
                    static PyObject *t_Lexicon_getProperties(t_Lexicon *self);
                    static PyObject *t_Lexicon_getSize(t_Lexicon *self);
                    static PyObject *t_Lexicon_keys(t_Lexicon *self);
                    static PyObject *t_Lexicon_load(t_Lexicon *self, PyObject *args);
                    static PyObject *t_Lexicon_lookup(t_Lexicon *self, PyObject *args);
                    static PyObject *t_Lexicon_put(t_Lexicon *self, PyObject *args);
                    static PyObject *t_Lexicon_get__entrySet(t_Lexicon *self, void *data);
                    static PyObject *t_Lexicon_get__properties(t_Lexicon *self, void *data);
                    static PyObject *t_Lexicon_get__size(t_Lexicon *self, void *data);
                    static PyGetSetDef t_Lexicon__fields_[] = {
                        DECLARE_GET_FIELD(t_Lexicon, entrySet),
                        DECLARE_GET_FIELD(t_Lexicon, properties),
                        DECLARE_GET_FIELD(t_Lexicon, size),
                        { NULL, NULL, NULL, NULL, NULL }
                    };

                    static PyMethodDef t_Lexicon__methods_[] = {
                        DECLARE_METHOD(t_Lexicon, cast_, METH_O | METH_CLASS),
                        DECLARE_METHOD(t_Lexicon, instance_, METH_O | METH_CLASS),
                        DECLARE_METHOD(t_Lexicon, containsKey, METH_O),
                        DECLARE_METHOD(t_Lexicon, getEntrySet, METH_NOARGS),
                        DECLARE_METHOD(t_Lexicon, getProperties, METH_NOARGS),
                        DECLARE_METHOD(t_Lexicon, getSize, METH_NOARGS),
                        DECLARE_METHOD(t_Lexicon, keys, METH_NOARGS),
                        DECLARE_METHOD(t_Lexicon, load, METH_VARARGS),
                        DECLARE_METHOD(t_Lexicon, lookup, METH_VARARGS),
                        DECLARE_METHOD(t_Lexicon, put, METH_VARARGS),
                        { NULL, NULL, 0, NULL }
                    };

                    DECLARE_TYPE(Lexicon, t_Lexicon, ::java::lang::Object, Lexicon, t_Lexicon_init_, 0, 0, t_Lexicon__fields_, 0, 0);

                    void t_Lexicon::install(PyObject *module)
                    {
                        installType(&PY_TYPE(Lexicon), module, "Lexicon", 0);
                    }

                    void t_Lexicon::initialize(PyObject *module)
                    {
                        PyDict_SetItemString(PY_TYPE(Lexicon).tp_dict, "class_", make_descriptor(Lexicon::initializeClass, 1));
                        PyDict_SetItemString(PY_TYPE(Lexicon).tp_dict, "wrapfn_", make_descriptor(t_Lexicon::wrap_jobject));
                        PyDict_SetItemString(PY_TYPE(Lexicon).tp_dict, "boxfn_", make_descriptor(boxObject));
                    }

                    static PyObject *t_Lexicon_cast_(PyTypeObject *type, PyObject *arg)
                    {
                        if (!(arg = castCheck(arg, Lexicon::initializeClass, 1)))
                            return NULL;
                        return t_Lexicon::wrap_Object(Lexicon(((t_Lexicon *) arg)->object.this$));
                    }
                    static PyObject *t_Lexicon_instance_(PyTypeObject *type, PyObject *arg)
                    {
                        if (!castCheck(arg, Lexicon::initializeClass, 0))
                            Py_RETURN_FALSE;
                        Py_RETURN_TRUE;
                    }

                    static int t_Lexicon_init_(t_Lexicon *self, PyObject *args, PyObject *kwds)
                    {
                        switch (PyTuple_GET_SIZE(args)) {
                          case 0:
                            {
                                Lexicon object((jobject) NULL);

                                INT_CALL(object = Lexicon());
                                self->object = object;
                                break;
                            }
                            goto err;
                          case 1:
                            {
                                ::java::io::InputStream a0((jobject) NULL);
                                Lexicon object((jobject) NULL);

                                if (!parseArgs(args, "k", ::java::io::InputStream::initializeClass, &a0))
                                {
                                    INT_CALL(object = Lexicon(a0));
                                    self->object = object;
                                    break;
                                }
                            }
                            {
                                ::java::lang::String a0((jobject) NULL);
                                Lexicon object((jobject) NULL);

                                if (!parseArgs(args, "s", &a0))
                                {
                                    INT_CALL(object = Lexicon(a0));
                                    self->object = object;
                                    break;
                                }
                            }
                          default:
                          err:
                            PyErr_SetArgsError((PyObject *) self, "__init__", args);
                            return -1;
                        }

                        return 0;
                    }

                    static PyObject *t_Lexicon_containsKey(t_Lexicon *self, PyObject *arg)
                    {
                        ::java::lang::String a0((jobject) NULL);
                        jboolean result;

                        if (!parseArg(arg, "s", &a0))
                        {
                            OBJ_CALL(result = self->object.containsKey(a0));
                            Py_RETURN_BOOL(result);
                        }

                        PyErr_SetArgsError((PyObject *) self, "containsKey", arg);
                        return NULL;
                    }

                    static PyObject *t_Lexicon_getEntrySet(t_Lexicon *self)
                    {
                        ::java::util::Set result((jobject) NULL);
                        OBJ_CALL(result = self->object.getEntrySet());
                        return ::java::util::t_Set::wrap_Object(result);
                    }

                    static PyObject *t_Lexicon_getProperties(t_Lexicon *self)
                    {
                        ::is::iclt::icenlp::core::utils::PropertiesEncoding result((jobject) NULL);
                        OBJ_CALL(result = self->object.getProperties());
                        return ::is::iclt::icenlp::core::utils::t_PropertiesEncoding::wrap_Object(result);
                    }

                    static PyObject *t_Lexicon_getSize(t_Lexicon *self)
                    {
                        jint result;
                        OBJ_CALL(result = self->object.getSize());
                        return PyInt_FromLong((long) result);
                    }

                    static PyObject *t_Lexicon_keys(t_Lexicon *self)
                    {
                        ::java::util::Enumeration result((jobject) NULL);
                        OBJ_CALL(result = self->object.keys());
                        return ::java::util::t_Enumeration::wrap_Object(result);
                    }

                    static PyObject *t_Lexicon_load(t_Lexicon *self, PyObject *args)
                    {
                        switch (PyTuple_GET_SIZE(args)) {
                          case 1:
                            {
                                ::java::lang::String a0((jobject) NULL);

                                if (!parseArgs(args, "s", &a0))
                                {
                                    OBJ_CALL(self->object.load(a0));
                                    Py_RETURN_NONE;
                                }
                            }
                            {
                                ::java::io::InputStream a0((jobject) NULL);

                                if (!parseArgs(args, "k", ::java::io::InputStream::initializeClass, &a0))
                                {
                                    OBJ_CALL(self->object.load(a0));
                                    Py_RETURN_NONE;
                                }
                            }
                        }

                        PyErr_SetArgsError((PyObject *) self, "load", args);
                        return NULL;
                    }

                    static PyObject *t_Lexicon_lookup(t_Lexicon *self, PyObject *args)
                    {
                        ::java::lang::String a0((jobject) NULL);
                        jboolean a1;
                        ::java::lang::String result((jobject) NULL);

                        if (!parseArgs(args, "sZ", &a0, &a1))
                        {
                            OBJ_CALL(result = self->object.lookup(a0, a1));
                            return j2p(result);
                        }

                        PyErr_SetArgsError((PyObject *) self, "lookup", args);
                        return NULL;
                    }

                    static PyObject *t_Lexicon_put(t_Lexicon *self, PyObject *args)
                    {
                        ::java::lang::String a0((jobject) NULL);
                        ::java::lang::String a1((jobject) NULL);

                        if (!parseArgs(args, "ss", &a0, &a1))
                        {
                            OBJ_CALL(self->object.put(a0, a1));
                            Py_RETURN_NONE;
                        }

                        PyErr_SetArgsError((PyObject *) self, "put", args);
                        return NULL;
                    }

                    static PyObject *t_Lexicon_get__entrySet(t_Lexicon *self, void *data)
                    {
                        ::java::util::Set value((jobject) NULL);
                        OBJ_CALL(value = self->object.getEntrySet());
                        return ::java::util::t_Set::wrap_Object(value);
                    }

                    static PyObject *t_Lexicon_get__properties(t_Lexicon *self, void *data)
                    {
                        ::is::iclt::icenlp::core::utils::PropertiesEncoding value((jobject) NULL);
                        OBJ_CALL(value = self->object.getProperties());
                        return ::is::iclt::icenlp::core::utils::t_PropertiesEncoding::wrap_Object(value);
                    }

                    static PyObject *t_Lexicon_get__size(t_Lexicon *self, void *data)
                    {
                        jint value;
                        OBJ_CALL(value = self->object.getSize());
                        return PyInt_FromLong((long) value);
                    }
                }
            }
        }
    }
}
#include <jni.h>
#include "JCCEnv.h"
#include "is/iclt/icenlp/core/iceparser/Func_TIMEX.h"
#include "java/io/IOException.h"
#include "java/io/Reader.h"
#include "java/io/Writer.h"
#include "java/lang/Class.h"
#include "java/io/InputStream.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace is {
    namespace iclt {
        namespace icenlp {
            namespace core {
                namespace iceparser {

                    ::java::lang::Class *Func_TIMEX::class$ = NULL;
                    jmethodID *Func_TIMEX::mids$ = NULL;
                    jint Func_TIMEX::YYEOF = (jint) 0;
                    jint Func_TIMEX::YYINITIAL = (jint) 0;

                    jclass Func_TIMEX::initializeClass()
                    {
                        if (!class$)
                        {

                            jclass cls = (jclass) env->findClass("is/iclt/icenlp/core/iceparser/Func_TIMEX");

                            mids$ = new jmethodID[max_mid];
                            mids$[mid_init$_cf2e3c10] = env->getMethodID(cls, "<init>", "(Ljava/io/Reader;)V");
                            mids$[mid_init$_be2e4f90] = env->getMethodID(cls, "<init>", "(Ljava/io/InputStream;)V");
                            mids$[mid_main_4dd4540c] = env->getStaticMethodID(cls, "main", "([Ljava/lang/String;)V");
                            mids$[mid_parse_5bcd5850] = env->getMethodID(cls, "parse", "(Ljava/io/Writer;)V");
                            mids$[mid_yybegin_39c7bd3c] = env->getMethodID(cls, "yybegin", "(I)V");
                            mids$[mid_yycharat_39c7bd29] = env->getMethodID(cls, "yycharat", "(I)C");
                            mids$[mid_yyclose_54c6a166] = env->getMethodID(cls, "yyclose", "()V");
                            mids$[mid_yylength_54c6a179] = env->getMethodID(cls, "yylength", "()I");
                            mids$[mid_yylex_54c6a179] = env->getMethodID(cls, "yylex", "()I");
                            mids$[mid_yypushback_39c7bd3c] = env->getMethodID(cls, "yypushback", "(I)V");
                            mids$[mid_yyreset_cf2e3c10] = env->getMethodID(cls, "yyreset", "(Ljava/io/Reader;)V");
                            mids$[mid_yystate_54c6a179] = env->getMethodID(cls, "yystate", "()I");
                            mids$[mid_yytext_14c7b5c5] = env->getMethodID(cls, "yytext", "()Ljava/lang/String;");

                            class$ = (::java::lang::Class *) new JObject(cls);
                            cls = (jclass) class$->this$;

                            YYEOF = env->getStaticIntField(cls, "YYEOF");
                            YYINITIAL = env->getStaticIntField(cls, "YYINITIAL");
                        }
                        return (jclass) class$->this$;
                    }

                    Func_TIMEX::Func_TIMEX(const ::java::io::Reader & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_cf2e3c10, a0.this$)) {}

                    Func_TIMEX::Func_TIMEX(const ::java::io::InputStream & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_be2e4f90, a0.this$)) {}

                    void Func_TIMEX::main(const JArray< ::java::lang::String > & a0)
                    {
                        jclass cls = initializeClass();
                        env->callStaticVoidMethod(cls, mids$[mid_main_4dd4540c], a0.this$);
                    }

                    void Func_TIMEX::parse(const ::java::io::Writer & a0) const
                    {
                        env->callVoidMethod(this$, mids$[mid_parse_5bcd5850], a0.this$);
                    }

                    void Func_TIMEX::yybegin(jint a0) const
                    {
                        env->callVoidMethod(this$, mids$[mid_yybegin_39c7bd3c], a0);
                    }

                    jchar Func_TIMEX::yycharat(jint a0) const
                    {
                        return env->callCharMethod(this$, mids$[mid_yycharat_39c7bd29], a0);
                    }

                    void Func_TIMEX::yyclose() const
                    {
                        env->callVoidMethod(this$, mids$[mid_yyclose_54c6a166]);
                    }

                    jint Func_TIMEX::yylength() const
                    {
                        return env->callIntMethod(this$, mids$[mid_yylength_54c6a179]);
                    }

                    jint Func_TIMEX::yylex() const
                    {
                        return env->callIntMethod(this$, mids$[mid_yylex_54c6a179]);
                    }

                    void Func_TIMEX::yypushback(jint a0) const
                    {
                        env->callVoidMethod(this$, mids$[mid_yypushback_39c7bd3c], a0);
                    }

                    void Func_TIMEX::yyreset(const ::java::io::Reader & a0) const
                    {
                        env->callVoidMethod(this$, mids$[mid_yyreset_cf2e3c10], a0.this$);
                    }

                    jint Func_TIMEX::yystate() const
                    {
                        return env->callIntMethod(this$, mids$[mid_yystate_54c6a179]);
                    }

                    ::java::lang::String Func_TIMEX::yytext() const
                    {
                        return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_yytext_14c7b5c5]));
                    }
                }
            }
        }
    }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace is {
    namespace iclt {
        namespace icenlp {
            namespace core {
                namespace iceparser {
                    static PyObject *t_Func_TIMEX_cast_(PyTypeObject *type, PyObject *arg);
                    static PyObject *t_Func_TIMEX_instance_(PyTypeObject *type, PyObject *arg);
                    static int t_Func_TIMEX_init_(t_Func_TIMEX *self, PyObject *args, PyObject *kwds);
                    static PyObject *t_Func_TIMEX_main(PyTypeObject *type, PyObject *arg);
                    static PyObject *t_Func_TIMEX_parse(t_Func_TIMEX *self, PyObject *arg);
                    static PyObject *t_Func_TIMEX_yybegin(t_Func_TIMEX *self, PyObject *arg);
                    static PyObject *t_Func_TIMEX_yycharat(t_Func_TIMEX *self, PyObject *arg);
                    static PyObject *t_Func_TIMEX_yyclose(t_Func_TIMEX *self);
                    static PyObject *t_Func_TIMEX_yylength(t_Func_TIMEX *self);
                    static PyObject *t_Func_TIMEX_yylex(t_Func_TIMEX *self);
                    static PyObject *t_Func_TIMEX_yypushback(t_Func_TIMEX *self, PyObject *arg);
                    static PyObject *t_Func_TIMEX_yyreset(t_Func_TIMEX *self, PyObject *arg);
                    static PyObject *t_Func_TIMEX_yystate(t_Func_TIMEX *self);
                    static PyObject *t_Func_TIMEX_yytext(t_Func_TIMEX *self);

                    static PyMethodDef t_Func_TIMEX__methods_[] = {
                        DECLARE_METHOD(t_Func_TIMEX, cast_, METH_O | METH_CLASS),
                        DECLARE_METHOD(t_Func_TIMEX, instance_, METH_O | METH_CLASS),
                        DECLARE_METHOD(t_Func_TIMEX, main, METH_O | METH_CLASS),
                        DECLARE_METHOD(t_Func_TIMEX, parse, METH_O),
                        DECLARE_METHOD(t_Func_TIMEX, yybegin, METH_O),
                        DECLARE_METHOD(t_Func_TIMEX, yycharat, METH_O),
                        DECLARE_METHOD(t_Func_TIMEX, yyclose, METH_NOARGS),
                        DECLARE_METHOD(t_Func_TIMEX, yylength, METH_NOARGS),
                        DECLARE_METHOD(t_Func_TIMEX, yylex, METH_NOARGS),
                        DECLARE_METHOD(t_Func_TIMEX, yypushback, METH_O),
                        DECLARE_METHOD(t_Func_TIMEX, yyreset, METH_O),
                        DECLARE_METHOD(t_Func_TIMEX, yystate, METH_NOARGS),
                        DECLARE_METHOD(t_Func_TIMEX, yytext, METH_NOARGS),
                        { NULL, NULL, 0, NULL }
                    };

                    DECLARE_TYPE(Func_TIMEX, t_Func_TIMEX, ::java::lang::Object, Func_TIMEX, t_Func_TIMEX_init_, 0, 0, 0, 0, 0);

                    void t_Func_TIMEX::install(PyObject *module)
                    {
                        installType(&PY_TYPE(Func_TIMEX), module, "Func_TIMEX", 0);
                    }

                    void t_Func_TIMEX::initialize(PyObject *module)
                    {
                        PyDict_SetItemString(PY_TYPE(Func_TIMEX).tp_dict, "class_", make_descriptor(Func_TIMEX::initializeClass, 1));
                        PyDict_SetItemString(PY_TYPE(Func_TIMEX).tp_dict, "wrapfn_", make_descriptor(t_Func_TIMEX::wrap_jobject));
                        PyDict_SetItemString(PY_TYPE(Func_TIMEX).tp_dict, "boxfn_", make_descriptor(boxObject));
                        Func_TIMEX::initializeClass();
                        PyDict_SetItemString(PY_TYPE(Func_TIMEX).tp_dict, "YYEOF", make_descriptor(Func_TIMEX::YYEOF));
                        PyDict_SetItemString(PY_TYPE(Func_TIMEX).tp_dict, "YYINITIAL", make_descriptor(Func_TIMEX::YYINITIAL));
                    }

                    static PyObject *t_Func_TIMEX_cast_(PyTypeObject *type, PyObject *arg)
                    {
                        if (!(arg = castCheck(arg, Func_TIMEX::initializeClass, 1)))
                            return NULL;
                        return t_Func_TIMEX::wrap_Object(Func_TIMEX(((t_Func_TIMEX *) arg)->object.this$));
                    }
                    static PyObject *t_Func_TIMEX_instance_(PyTypeObject *type, PyObject *arg)
                    {
                        if (!castCheck(arg, Func_TIMEX::initializeClass, 0))
                            Py_RETURN_FALSE;
                        Py_RETURN_TRUE;
                    }

                    static int t_Func_TIMEX_init_(t_Func_TIMEX *self, PyObject *args, PyObject *kwds)
                    {
                        switch (PyTuple_GET_SIZE(args)) {
                          case 1:
                            {
                                ::java::io::Reader a0((jobject) NULL);
                                Func_TIMEX object((jobject) NULL);

                                if (!parseArgs(args, "k", ::java::io::Reader::initializeClass, &a0))
                                {
                                    INT_CALL(object = Func_TIMEX(a0));
                                    self->object = object;
                                    break;
                                }
                            }
                            {
                                ::java::io::InputStream a0((jobject) NULL);
                                Func_TIMEX object((jobject) NULL);

                                if (!parseArgs(args, "k", ::java::io::InputStream::initializeClass, &a0))
                                {
                                    INT_CALL(object = Func_TIMEX(a0));
                                    self->object = object;
                                    break;
                                }
                            }
                          default:
                            PyErr_SetArgsError((PyObject *) self, "__init__", args);
                            return -1;
                        }

                        return 0;
                    }

                    static PyObject *t_Func_TIMEX_main(PyTypeObject *type, PyObject *arg)
                    {
                        JArray< ::java::lang::String > a0((jobject) NULL);

                        if (!parseArg(arg, "[s", &a0))
                        {
                            OBJ_CALL(::is::iclt::icenlp::core::iceparser::Func_TIMEX::main(a0));
                            Py_RETURN_NONE;
                        }

                        PyErr_SetArgsError(type, "main", arg);
                        return NULL;
                    }

                    static PyObject *t_Func_TIMEX_parse(t_Func_TIMEX *self, PyObject *arg)
                    {
                        ::java::io::Writer a0((jobject) NULL);

                        if (!parseArg(arg, "k", ::java::io::Writer::initializeClass, &a0))
                        {
                            OBJ_CALL(self->object.parse(a0));
                            Py_RETURN_NONE;
                        }

                        PyErr_SetArgsError((PyObject *) self, "parse", arg);
                        return NULL;
                    }

                    static PyObject *t_Func_TIMEX_yybegin(t_Func_TIMEX *self, PyObject *arg)
                    {
                        jint a0;

                        if (!parseArg(arg, "I", &a0))
                        {
                            OBJ_CALL(self->object.yybegin(a0));
                            Py_RETURN_NONE;
                        }

                        PyErr_SetArgsError((PyObject *) self, "yybegin", arg);
                        return NULL;
                    }

                    static PyObject *t_Func_TIMEX_yycharat(t_Func_TIMEX *self, PyObject *arg)
                    {
                        jint a0;
                        jchar result;

                        if (!parseArg(arg, "I", &a0))
                        {
                            OBJ_CALL(result = self->object.yycharat(a0));
                            return PyUnicode_FromUnicode((Py_UNICODE *) &result, 1);
                        }

                        PyErr_SetArgsError((PyObject *) self, "yycharat", arg);
                        return NULL;
                    }

                    static PyObject *t_Func_TIMEX_yyclose(t_Func_TIMEX *self)
                    {
                        OBJ_CALL(self->object.yyclose());
                        Py_RETURN_NONE;
                    }

                    static PyObject *t_Func_TIMEX_yylength(t_Func_TIMEX *self)
                    {
                        jint result;
                        OBJ_CALL(result = self->object.yylength());
                        return PyInt_FromLong((long) result);
                    }

                    static PyObject *t_Func_TIMEX_yylex(t_Func_TIMEX *self)
                    {
                        jint result;
                        OBJ_CALL(result = self->object.yylex());
                        return PyInt_FromLong((long) result);
                    }

                    static PyObject *t_Func_TIMEX_yypushback(t_Func_TIMEX *self, PyObject *arg)
                    {
                        jint a0;

                        if (!parseArg(arg, "I", &a0))
                        {
                            OBJ_CALL(self->object.yypushback(a0));
                            Py_RETURN_NONE;
                        }

                        PyErr_SetArgsError((PyObject *) self, "yypushback", arg);
                        return NULL;
                    }

                    static PyObject *t_Func_TIMEX_yyreset(t_Func_TIMEX *self, PyObject *arg)
                    {
                        ::java::io::Reader a0((jobject) NULL);

                        if (!parseArg(arg, "k", ::java::io::Reader::initializeClass, &a0))
                        {
                            OBJ_CALL(self->object.yyreset(a0));
                            Py_RETURN_NONE;
                        }

                        PyErr_SetArgsError((PyObject *) self, "yyreset", arg);
                        return NULL;
                    }

                    static PyObject *t_Func_TIMEX_yystate(t_Func_TIMEX *self)
                    {
                        jint result;
                        OBJ_CALL(result = self->object.yystate());
                        return PyInt_FromLong((long) result);
                    }

                    static PyObject *t_Func_TIMEX_yytext(t_Func_TIMEX *self)
                    {
                        ::java::lang::String result((jobject) NULL);
                        OBJ_CALL(result = self->object.yytext());
                        return j2p(result);
                    }
                }
            }
        }
    }
}
#include <jni.h>
#include "JCCEnv.h"
#include "is/iclt/icenlp/core/utils/ZipGzipper.h"
#include "java/io/File.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "java/io/InputStream.h"
#include "JArray.h"

namespace is {
    namespace iclt {
        namespace icenlp {
            namespace core {
                namespace utils {

                    ::java::lang::Class *ZipGzipper::class$ = NULL;
                    jmethodID *ZipGzipper::mids$ = NULL;
                    jint ZipGzipper::BUF_SIZE = (jint) 0;
                    jint ZipGzipper::STATUS_GUNZIP_FAIL = (jint) 0;
                    jint ZipGzipper::STATUS_GZIP_FAIL = (jint) 0;
                    jint ZipGzipper::STATUS_IN_FAIL = (jint) 0;
                    jint ZipGzipper::STATUS_OK = (jint) 0;
                    jint ZipGzipper::STATUS_OUT_FAIL = (jint) 0;
                    jint ZipGzipper::STATUS_UNZIP_FAIL = (jint) 0;
                    jint ZipGzipper::STATUS_ZIP_FAIL = (jint) 0;

                    jclass ZipGzipper::initializeClass()
                    {
                        if (!class$)
                        {

                            jclass cls = (jclass) env->findClass("is/iclt/icenlp/core/utils/ZipGzipper");

                            mids$ = new jmethodID[max_mid];
                            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                            mids$[mid_getStatusMessage_141401b3] = env->getStaticMethodID(cls, "getStatusMessage", "(I)Ljava/lang/String;");
                            mids$[mid_gunzipFile_ffd62139] = env->getStaticMethodID(cls, "gunzipFile", "(Ljava/io/File;Ljava/io/File;)I");
                            mids$[mid_gz2String_97a5258f] = env->getStaticMethodID(cls, "gz2String", "(Ljava/lang/String;)Ljava/lang/String;");
                            mids$[mid_gz2String_7b17797f] = env->getStaticMethodID(cls, "gz2String", "(Ljava/io/InputStream;)Ljava/lang/String;");
                            mids$[mid_gzipFile_b8789396] = env->getStaticMethodID(cls, "gzipFile", "(Ljava/io/File;Ljava/lang/String;)I");
                            mids$[mid_unzipFile_ffd62139] = env->getStaticMethodID(cls, "unzipFile", "(Ljava/io/File;Ljava/io/File;)I");
                            mids$[mid_zipFile_ffd62139] = env->getStaticMethodID(cls, "zipFile", "(Ljava/io/File;Ljava/io/File;)I");

                            class$ = (::java::lang::Class *) new JObject(cls);
                            cls = (jclass) class$->this$;

                            BUF_SIZE = env->getStaticIntField(cls, "BUF_SIZE");
                            STATUS_GUNZIP_FAIL = env->getStaticIntField(cls, "STATUS_GUNZIP_FAIL");
                            STATUS_GZIP_FAIL = env->getStaticIntField(cls, "STATUS_GZIP_FAIL");
                            STATUS_IN_FAIL = env->getStaticIntField(cls, "STATUS_IN_FAIL");
                            STATUS_OK = env->getStaticIntField(cls, "STATUS_OK");
                            STATUS_OUT_FAIL = env->getStaticIntField(cls, "STATUS_OUT_FAIL");
                            STATUS_UNZIP_FAIL = env->getStaticIntField(cls, "STATUS_UNZIP_FAIL");
                            STATUS_ZIP_FAIL = env->getStaticIntField(cls, "STATUS_ZIP_FAIL");
                        }
                        return (jclass) class$->this$;
                    }

                    ZipGzipper::ZipGzipper() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

                    ::java::lang::String ZipGzipper::getStatusMessage(jint a0)
                    {
                        jclass cls = initializeClass();
                        return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_getStatusMessage_141401b3], a0));
                    }

                    jint ZipGzipper::gunzipFile(const ::java::io::File & a0, const ::java::io::File & a1)
                    {
                        jclass cls = initializeClass();
                        return env->callStaticIntMethod(cls, mids$[mid_gunzipFile_ffd62139], a0.this$, a1.this$);
                    }

                    ::java::lang::String ZipGzipper::gz2String(const ::java::lang::String & a0)
                    {
                        jclass cls = initializeClass();
                        return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_gz2String_97a5258f], a0.this$));
                    }

                    ::java::lang::String ZipGzipper::gz2String(const ::java::io::InputStream & a0)
                    {
                        jclass cls = initializeClass();
                        return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_gz2String_7b17797f], a0.this$));
                    }

                    jint ZipGzipper::gzipFile(const ::java::io::File & a0, const ::java::lang::String & a1)
                    {
                        jclass cls = initializeClass();
                        return env->callStaticIntMethod(cls, mids$[mid_gzipFile_b8789396], a0.this$, a1.this$);
                    }

                    jint ZipGzipper::unzipFile(const ::java::io::File & a0, const ::java::io::File & a1)
                    {
                        jclass cls = initializeClass();
                        return env->callStaticIntMethod(cls, mids$[mid_unzipFile_ffd62139], a0.this$, a1.this$);
                    }

                    jint ZipGzipper::zipFile(const ::java::io::File & a0, const ::java::io::File & a1)
                    {
                        jclass cls = initializeClass();
                        return env->callStaticIntMethod(cls, mids$[mid_zipFile_ffd62139], a0.this$, a1.this$);
                    }
                }
            }
        }
    }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace is {
    namespace iclt {
        namespace icenlp {
            namespace core {
                namespace utils {
                    static PyObject *t_ZipGzipper_cast_(PyTypeObject *type, PyObject *arg);
                    static PyObject *t_ZipGzipper_instance_(PyTypeObject *type, PyObject *arg);
                    static int t_ZipGzipper_init_(t_ZipGzipper *self, PyObject *args, PyObject *kwds);
                    static PyObject *t_ZipGzipper_getStatusMessage(PyTypeObject *type, PyObject *arg);
                    static PyObject *t_ZipGzipper_gunzipFile(PyTypeObject *type, PyObject *args);
                    static PyObject *t_ZipGzipper_gz2String(PyTypeObject *type, PyObject *args);
                    static PyObject *t_ZipGzipper_gzipFile(PyTypeObject *type, PyObject *args);
                    static PyObject *t_ZipGzipper_unzipFile(PyTypeObject *type, PyObject *args);
                    static PyObject *t_ZipGzipper_zipFile(PyTypeObject *type, PyObject *args);

                    static PyMethodDef t_ZipGzipper__methods_[] = {
                        DECLARE_METHOD(t_ZipGzipper, cast_, METH_O | METH_CLASS),
                        DECLARE_METHOD(t_ZipGzipper, instance_, METH_O | METH_CLASS),
                        DECLARE_METHOD(t_ZipGzipper, getStatusMessage, METH_O | METH_CLASS),
                        DECLARE_METHOD(t_ZipGzipper, gunzipFile, METH_VARARGS | METH_CLASS),
                        DECLARE_METHOD(t_ZipGzipper, gz2String, METH_VARARGS | METH_CLASS),
                        DECLARE_METHOD(t_ZipGzipper, gzipFile, METH_VARARGS | METH_CLASS),
                        DECLARE_METHOD(t_ZipGzipper, unzipFile, METH_VARARGS | METH_CLASS),
                        DECLARE_METHOD(t_ZipGzipper, zipFile, METH_VARARGS | METH_CLASS),
                        { NULL, NULL, 0, NULL }
                    };

                    DECLARE_TYPE(ZipGzipper, t_ZipGzipper, ::java::lang::Object, ZipGzipper, t_ZipGzipper_init_, 0, 0, 0, 0, 0);

                    void t_ZipGzipper::install(PyObject *module)
                    {
                        installType(&PY_TYPE(ZipGzipper), module, "ZipGzipper", 0);
                    }

                    void t_ZipGzipper::initialize(PyObject *module)
                    {
                        PyDict_SetItemString(PY_TYPE(ZipGzipper).tp_dict, "class_", make_descriptor(ZipGzipper::initializeClass, 1));
                        PyDict_SetItemString(PY_TYPE(ZipGzipper).tp_dict, "wrapfn_", make_descriptor(t_ZipGzipper::wrap_jobject));
                        PyDict_SetItemString(PY_TYPE(ZipGzipper).tp_dict, "boxfn_", make_descriptor(boxObject));
                        ZipGzipper::initializeClass();
                        PyDict_SetItemString(PY_TYPE(ZipGzipper).tp_dict, "BUF_SIZE", make_descriptor(ZipGzipper::BUF_SIZE));
                        PyDict_SetItemString(PY_TYPE(ZipGzipper).tp_dict, "STATUS_GUNZIP_FAIL", make_descriptor(ZipGzipper::STATUS_GUNZIP_FAIL));
                        PyDict_SetItemString(PY_TYPE(ZipGzipper).tp_dict, "STATUS_GZIP_FAIL", make_descriptor(ZipGzipper::STATUS_GZIP_FAIL));
                        PyDict_SetItemString(PY_TYPE(ZipGzipper).tp_dict, "STATUS_IN_FAIL", make_descriptor(ZipGzipper::STATUS_IN_FAIL));
                        PyDict_SetItemString(PY_TYPE(ZipGzipper).tp_dict, "STATUS_OK", make_descriptor(ZipGzipper::STATUS_OK));
                        PyDict_SetItemString(PY_TYPE(ZipGzipper).tp_dict, "STATUS_OUT_FAIL", make_descriptor(ZipGzipper::STATUS_OUT_FAIL));
                        PyDict_SetItemString(PY_TYPE(ZipGzipper).tp_dict, "STATUS_UNZIP_FAIL", make_descriptor(ZipGzipper::STATUS_UNZIP_FAIL));
                        PyDict_SetItemString(PY_TYPE(ZipGzipper).tp_dict, "STATUS_ZIP_FAIL", make_descriptor(ZipGzipper::STATUS_ZIP_FAIL));
                    }

                    static PyObject *t_ZipGzipper_cast_(PyTypeObject *type, PyObject *arg)
                    {
                        if (!(arg = castCheck(arg, ZipGzipper::initializeClass, 1)))
                            return NULL;
                        return t_ZipGzipper::wrap_Object(ZipGzipper(((t_ZipGzipper *) arg)->object.this$));
                    }
                    static PyObject *t_ZipGzipper_instance_(PyTypeObject *type, PyObject *arg)
                    {
                        if (!castCheck(arg, ZipGzipper::initializeClass, 0))
                            Py_RETURN_FALSE;
                        Py_RETURN_TRUE;
                    }

                    static int t_ZipGzipper_init_(t_ZipGzipper *self, PyObject *args, PyObject *kwds)
                    {
                        ZipGzipper object((jobject) NULL);

                        INT_CALL(object = ZipGzipper());
                        self->object = object;

                        return 0;
                    }

                    static PyObject *t_ZipGzipper_getStatusMessage(PyTypeObject *type, PyObject *arg)
                    {
                        jint a0;
                        ::java::lang::String result((jobject) NULL);

                        if (!parseArg(arg, "I", &a0))
                        {
                            OBJ_CALL(result = ::is::iclt::icenlp::core::utils::ZipGzipper::getStatusMessage(a0));
                            return j2p(result);
                        }

                        PyErr_SetArgsError(type, "getStatusMessage", arg);
                        return NULL;
                    }

                    static PyObject *t_ZipGzipper_gunzipFile(PyTypeObject *type, PyObject *args)
                    {
                        ::java::io::File a0((jobject) NULL);
                        ::java::io::File a1((jobject) NULL);
                        jint result;

                        if (!parseArgs(args, "kk", ::java::io::File::initializeClass, ::java::io::File::initializeClass, &a0, &a1))
                        {
                            OBJ_CALL(result = ::is::iclt::icenlp::core::utils::ZipGzipper::gunzipFile(a0, a1));
                            return PyInt_FromLong((long) result);
                        }

                        PyErr_SetArgsError(type, "gunzipFile", args);
                        return NULL;
                    }

                    static PyObject *t_ZipGzipper_gz2String(PyTypeObject *type, PyObject *args)
                    {
                        switch (PyTuple_GET_SIZE(args)) {
                          case 1:
                            {
                                ::java::lang::String a0((jobject) NULL);
                                ::java::lang::String result((jobject) NULL);

                                if (!parseArgs(args, "s", &a0))
                                {
                                    OBJ_CALL(result = ::is::iclt::icenlp::core::utils::ZipGzipper::gz2String(a0));
                                    return j2p(result);
                                }
                            }
                            {
                                ::java::io::InputStream a0((jobject) NULL);
                                ::java::lang::String result((jobject) NULL);

                                if (!parseArgs(args, "k", ::java::io::InputStream::initializeClass, &a0))
                                {
                                    OBJ_CALL(result = ::is::iclt::icenlp::core::utils::ZipGzipper::gz2String(a0));
                                    return j2p(result);
                                }
                            }
                        }

                        PyErr_SetArgsError(type, "gz2String", args);
                        return NULL;
                    }

                    static PyObject *t_ZipGzipper_gzipFile(PyTypeObject *type, PyObject *args)
                    {
                        ::java::io::File a0((jobject) NULL);
                        ::java::lang::String a1((jobject) NULL);
                        jint result;

                        if (!parseArgs(args, "ks", ::java::io::File::initializeClass, &a0, &a1))
                        {
                            OBJ_CALL(result = ::is::iclt::icenlp::core::utils::ZipGzipper::gzipFile(a0, a1));
                            return PyInt_FromLong((long) result);
                        }

                        PyErr_SetArgsError(type, "gzipFile", args);
                        return NULL;
                    }

                    static PyObject *t_ZipGzipper_unzipFile(PyTypeObject *type, PyObject *args)
                    {
                        ::java::io::File a0((jobject) NULL);
                        ::java::io::File a1((jobject) NULL);
                        jint result;

                        if (!parseArgs(args, "kk", ::java::io::File::initializeClass, ::java::io::File::initializeClass, &a0, &a1))
                        {
                            OBJ_CALL(result = ::is::iclt::icenlp::core::utils::ZipGzipper::unzipFile(a0, a1));
                            return PyInt_FromLong((long) result);
                        }

                        PyErr_SetArgsError(type, "unzipFile", args);
                        return NULL;
                    }

                    static PyObject *t_ZipGzipper_zipFile(PyTypeObject *type, PyObject *args)
                    {
                        ::java::io::File a0((jobject) NULL);
                        ::java::io::File a1((jobject) NULL);
                        jint result;

                        if (!parseArgs(args, "kk", ::java::io::File::initializeClass, ::java::io::File::initializeClass, &a0, &a1))
                        {
                            OBJ_CALL(result = ::is::iclt::icenlp::core::utils::ZipGzipper::zipFile(a0, a1));
                            return PyInt_FromLong((long) result);
                        }

                        PyErr_SetArgsError(type, "zipFile", args);
                        return NULL;
                    }
                }
            }
        }
    }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/lang/Class.h"
#include "java/lang/ClassNotFoundException.h"
#include "java/lang/Package.h"
#include "java/lang/IllegalAccessException.h"
#include "java/lang/ClassLoader.h"
#include "java/io/Serializable.h"
#include "java/io/InputStream.h"
#include "java/lang/SecurityException.h"
#include "java/lang/InstantiationException.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace java {
    namespace lang {

        ::java::lang::Class *Class::class$ = NULL;
        jmethodID *Class::mids$ = NULL;

        jclass Class::initializeClass()
        {
            if (!class$)
            {

                jclass cls = (jclass) env->findClass("java/lang/Class");

                mids$ = new jmethodID[max_mid];
                mids$[mid_asSubclass_ecb22eb3] = env->getMethodID(cls, "asSubclass", "(Ljava/lang/Class;)Ljava/lang/Class;");
                mids$[mid_cast_a932a95f] = env->getMethodID(cls, "cast", "(Ljava/lang/Object;)Ljava/lang/Object;");
                mids$[mid_desiredAssertionStatus_54c6a16a] = env->getMethodID(cls, "desiredAssertionStatus", "()Z");
                mids$[mid_forName_7d663d97] = env->getStaticMethodID(cls, "forName", "(Ljava/lang/String;)Ljava/lang/Class;");
                mids$[mid_forName_4c5c10fb] = env->getStaticMethodID(cls, "forName", "(Ljava/lang/String;ZLjava/lang/ClassLoader;)Ljava/lang/Class;");
                mids$[mid_getCanonicalName_14c7b5c5] = env->getMethodID(cls, "getCanonicalName", "()Ljava/lang/String;");
                mids$[mid_getClassLoader_8d2f11fc] = env->getMethodID(cls, "getClassLoader", "()Ljava/lang/ClassLoader;");
                mids$[mid_getClasses_ffb25e7d] = env->getMethodID(cls, "getClasses", "()[Ljava/lang/Class;");
                mids$[mid_getComponentType_44a5f2c9] = env->getMethodID(cls, "getComponentType", "()Ljava/lang/Class;");
                mids$[mid_getDeclaredClasses_ffb25e7d] = env->getMethodID(cls, "getDeclaredClasses", "()[Ljava/lang/Class;");
                mids$[mid_getDeclaringClass_44a5f2c9] = env->getMethodID(cls, "getDeclaringClass", "()Ljava/lang/Class;");
                mids$[mid_getEnclosingClass_44a5f2c9] = env->getMethodID(cls, "getEnclosingClass", "()Ljava/lang/Class;");
                mids$[mid_getEnumConstants_94e49c77] = env->getMethodID(cls, "getEnumConstants", "()[Ljava/lang/Object;");
                mids$[mid_getInterfaces_ffb25e7d] = env->getMethodID(cls, "getInterfaces", "()[Ljava/lang/Class;");
                mids$[mid_getModifiers_54c6a179] = env->getMethodID(cls, "getModifiers", "()I");
                mids$[mid_getName_14c7b5c5] = env->getMethodID(cls, "getName", "()Ljava/lang/String;");
                mids$[mid_getPackage_b0f2f7bb] = env->getMethodID(cls, "getPackage", "()Ljava/lang/Package;");
                mids$[mid_getResourceAsStream_222e59eb] = env->getMethodID(cls, "getResourceAsStream", "(Ljava/lang/String;)Ljava/io/InputStream;");
                mids$[mid_getSigners_94e49c77] = env->getMethodID(cls, "getSigners", "()[Ljava/lang/Object;");
                mids$[mid_getSimpleName_14c7b5c5] = env->getMethodID(cls, "getSimpleName", "()Ljava/lang/String;");
                mids$[mid_getSuperclass_44a5f2c9] = env->getMethodID(cls, "getSuperclass", "()Ljava/lang/Class;");
                mids$[mid_isAnnotation_54c6a16a] = env->getMethodID(cls, "isAnnotation", "()Z");
                mids$[mid_isAnonymousClass_54c6a16a] = env->getMethodID(cls, "isAnonymousClass", "()Z");
                mids$[mid_isArray_54c6a16a] = env->getMethodID(cls, "isArray", "()Z");
                mids$[mid_isAssignableFrom_a5deaff8] = env->getMethodID(cls, "isAssignableFrom", "(Ljava/lang/Class;)Z");
                mids$[mid_isEnum_54c6a16a] = env->getMethodID(cls, "isEnum", "()Z");
                mids$[mid_isInstance_290588e2] = env->getMethodID(cls, "isInstance", "(Ljava/lang/Object;)Z");
                mids$[mid_isInterface_54c6a16a] = env->getMethodID(cls, "isInterface", "()Z");
                mids$[mid_isLocalClass_54c6a16a] = env->getMethodID(cls, "isLocalClass", "()Z");
                mids$[mid_isMemberClass_54c6a16a] = env->getMethodID(cls, "isMemberClass", "()Z");
                mids$[mid_isPrimitive_54c6a16a] = env->getMethodID(cls, "isPrimitive", "()Z");
                mids$[mid_isSynthetic_54c6a16a] = env->getMethodID(cls, "isSynthetic", "()Z");
                mids$[mid_newInstance_846352c3] = env->getMethodID(cls, "newInstance", "()Ljava/lang/Object;");
                mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

                class$ = (::java::lang::Class *) new JObject(cls);
            }
            return (jclass) class$->this$;
        }

        Class Class::asSubclass(const Class & a0) const
        {
            return Class(env->callObjectMethod(this$, mids$[mid_asSubclass_ecb22eb3], a0.this$));
        }

        ::java::lang::Object Class::cast(const ::java::lang::Object & a0) const
        {
            return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_cast_a932a95f], a0.this$));
        }

        jboolean Class::desiredAssertionStatus() const
        {
            return env->callBooleanMethod(this$, mids$[mid_desiredAssertionStatus_54c6a16a]);
        }

        Class Class::forName(const ::java::lang::String & a0)
        {
            jclass cls = initializeClass();
            return Class(env->callStaticObjectMethod(cls, mids$[mid_forName_7d663d97], a0.this$));
        }

        Class Class::forName(const ::java::lang::String & a0, jboolean a1, const ::java::lang::ClassLoader & a2)
        {
            jclass cls = initializeClass();
            return Class(env->callStaticObjectMethod(cls, mids$[mid_forName_4c5c10fb], a0.this$, a1, a2.this$));
        }

        ::java::lang::String Class::getCanonicalName() const
        {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getCanonicalName_14c7b5c5]));
        }

        ::java::lang::ClassLoader Class::getClassLoader() const
        {
            return ::java::lang::ClassLoader(env->callObjectMethod(this$, mids$[mid_getClassLoader_8d2f11fc]));
        }

        JArray< Class > Class::getClasses() const
        {
            return JArray< Class >(env->callObjectMethod(this$, mids$[mid_getClasses_ffb25e7d]));
        }

        Class Class::getComponentType() const
        {
            return Class(env->callObjectMethod(this$, mids$[mid_getComponentType_44a5f2c9]));
        }

        JArray< Class > Class::getDeclaredClasses() const
        {
            return JArray< Class >(env->callObjectMethod(this$, mids$[mid_getDeclaredClasses_ffb25e7d]));
        }

        Class Class::getDeclaringClass() const
        {
            return Class(env->callObjectMethod(this$, mids$[mid_getDeclaringClass_44a5f2c9]));
        }

        Class Class::getEnclosingClass() const
        {
            return Class(env->callObjectMethod(this$, mids$[mid_getEnclosingClass_44a5f2c9]));
        }

        JArray< ::java::lang::Object > Class::getEnumConstants() const
        {
            return JArray< ::java::lang::Object >(env->callObjectMethod(this$, mids$[mid_getEnumConstants_94e49c77]));
        }

        JArray< Class > Class::getInterfaces() const
        {
            return JArray< Class >(env->callObjectMethod(this$, mids$[mid_getInterfaces_ffb25e7d]));
        }

        jint Class::getModifiers() const
        {
            return env->callIntMethod(this$, mids$[mid_getModifiers_54c6a179]);
        }

        ::java::lang::String Class::getName() const
        {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getName_14c7b5c5]));
        }

        ::java::lang::Package Class::getPackage() const
        {
            return ::java::lang::Package(env->callObjectMethod(this$, mids$[mid_getPackage_b0f2f7bb]));
        }

        ::java::io::InputStream Class::getResourceAsStream(const ::java::lang::String & a0) const
        {
            return ::java::io::InputStream(env->callObjectMethod(this$, mids$[mid_getResourceAsStream_222e59eb], a0.this$));
        }

        JArray< ::java::lang::Object > Class::getSigners() const
        {
            return JArray< ::java::lang::Object >(env->callObjectMethod(this$, mids$[mid_getSigners_94e49c77]));
        }

        ::java::lang::String Class::getSimpleName() const
        {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getSimpleName_14c7b5c5]));
        }

        Class Class::getSuperclass() const
        {
            return Class(env->callObjectMethod(this$, mids$[mid_getSuperclass_44a5f2c9]));
        }

        jboolean Class::isAnnotation() const
        {
            return env->callBooleanMethod(this$, mids$[mid_isAnnotation_54c6a16a]);
        }

        jboolean Class::isAnonymousClass() const
        {
            return env->callBooleanMethod(this$, mids$[mid_isAnonymousClass_54c6a16a]);
        }

        jboolean Class::isArray() const
        {
            return env->callBooleanMethod(this$, mids$[mid_isArray_54c6a16a]);
        }

        jboolean Class::isAssignableFrom(const Class & a0) const
        {
            return env->callBooleanMethod(this$, mids$[mid_isAssignableFrom_a5deaff8], a0.this$);
        }

        jboolean Class::isEnum() const
        {
            return env->callBooleanMethod(this$, mids$[mid_isEnum_54c6a16a]);
        }

        jboolean Class::isInstance(const ::java::lang::Object & a0) const
        {
            return env->callBooleanMethod(this$, mids$[mid_isInstance_290588e2], a0.this$);
        }

        jboolean Class::isInterface() const
        {
            return env->callBooleanMethod(this$, mids$[mid_isInterface_54c6a16a]);
        }

        jboolean Class::isLocalClass() const
        {
            return env->callBooleanMethod(this$, mids$[mid_isLocalClass_54c6a16a]);
        }

        jboolean Class::isMemberClass() const
        {
            return env->callBooleanMethod(this$, mids$[mid_isMemberClass_54c6a16a]);
        }

        jboolean Class::isPrimitive() const
        {
            return env->callBooleanMethod(this$, mids$[mid_isPrimitive_54c6a16a]);
        }

        jboolean Class::isSynthetic() const
        {
            return env->callBooleanMethod(this$, mids$[mid_isSynthetic_54c6a16a]);
        }

        ::java::lang::Object Class::newInstance() const
        {
            return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_newInstance_846352c3]));
        }

        ::java::lang::String Class::toString() const
        {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }
    }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
    namespace lang {
        static PyObject *t_Class_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Class_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Class_of_(t_Class *self, PyObject *args);
        static PyObject *t_Class_asSubclass(t_Class *self, PyObject *arg);
        static PyObject *t_Class_cast(t_Class *self, PyObject *arg);
        static PyObject *t_Class_desiredAssertionStatus(t_Class *self);
        static PyObject *t_Class_forName(PyTypeObject *type, PyObject *args);
        static PyObject *t_Class_getCanonicalName(t_Class *self);
        static PyObject *t_Class_getClassLoader(t_Class *self);
        static PyObject *t_Class_getClasses(t_Class *self);
        static PyObject *t_Class_getComponentType(t_Class *self);
        static PyObject *t_Class_getDeclaredClasses(t_Class *self);
        static PyObject *t_Class_getDeclaringClass(t_Class *self);
        static PyObject *t_Class_getEnclosingClass(t_Class *self);
        static PyObject *t_Class_getEnumConstants(t_Class *self);
        static PyObject *t_Class_getInterfaces(t_Class *self);
        static PyObject *t_Class_getModifiers(t_Class *self);
        static PyObject *t_Class_getName(t_Class *self);
        static PyObject *t_Class_getPackage(t_Class *self);
        static PyObject *t_Class_getResourceAsStream(t_Class *self, PyObject *arg);
        static PyObject *t_Class_getSigners(t_Class *self);
        static PyObject *t_Class_getSimpleName(t_Class *self);
        static PyObject *t_Class_getSuperclass(t_Class *self);
        static PyObject *t_Class_isAnnotation(t_Class *self);
        static PyObject *t_Class_isAnonymousClass(t_Class *self);
        static PyObject *t_Class_isArray(t_Class *self);
        static PyObject *t_Class_isAssignableFrom(t_Class *self, PyObject *arg);
        static PyObject *t_Class_isEnum(t_Class *self);
        static PyObject *t_Class_isInstance(t_Class *self, PyObject *arg);
        static PyObject *t_Class_isInterface(t_Class *self);
        static PyObject *t_Class_isLocalClass(t_Class *self);
        static PyObject *t_Class_isMemberClass(t_Class *self);
        static PyObject *t_Class_isPrimitive(t_Class *self);
        static PyObject *t_Class_isSynthetic(t_Class *self);
        static PyObject *t_Class_newInstance(t_Class *self);
        static PyObject *t_Class_toString(t_Class *self, PyObject *args);
        static PyObject *t_Class_get__annotation(t_Class *self, void *data);
        static PyObject *t_Class_get__anonymousClass(t_Class *self, void *data);
        static PyObject *t_Class_get__array(t_Class *self, void *data);
        static PyObject *t_Class_get__canonicalName(t_Class *self, void *data);
        static PyObject *t_Class_get__classLoader(t_Class *self, void *data);
        static PyObject *t_Class_get__classes(t_Class *self, void *data);
        static PyObject *t_Class_get__componentType(t_Class *self, void *data);
        static PyObject *t_Class_get__declaredClasses(t_Class *self, void *data);
        static PyObject *t_Class_get__declaringClass(t_Class *self, void *data);
        static PyObject *t_Class_get__enclosingClass(t_Class *self, void *data);
        static PyObject *t_Class_get__enum(t_Class *self, void *data);
        static PyObject *t_Class_get__enumConstants(t_Class *self, void *data);
        static PyObject *t_Class_get__interface(t_Class *self, void *data);
        static PyObject *t_Class_get__interfaces(t_Class *self, void *data);
        static PyObject *t_Class_get__localClass(t_Class *self, void *data);
        static PyObject *t_Class_get__memberClass(t_Class *self, void *data);
        static PyObject *t_Class_get__modifiers(t_Class *self, void *data);
        static PyObject *t_Class_get__name(t_Class *self, void *data);
        static PyObject *t_Class_get__package(t_Class *self, void *data);
        static PyObject *t_Class_get__primitive(t_Class *self, void *data);
        static PyObject *t_Class_get__signers(t_Class *self, void *data);
        static PyObject *t_Class_get__simpleName(t_Class *self, void *data);
        static PyObject *t_Class_get__superclass(t_Class *self, void *data);
        static PyObject *t_Class_get__synthetic(t_Class *self, void *data);
        static PyObject *t_Class_get__parameters_(t_Class *self, void *data);
        static PyGetSetDef t_Class__fields_[] = {
            DECLARE_GET_FIELD(t_Class, annotation),
            DECLARE_GET_FIELD(t_Class, anonymousClass),
            DECLARE_GET_FIELD(t_Class, array),
            DECLARE_GET_FIELD(t_Class, canonicalName),
            DECLARE_GET_FIELD(t_Class, classLoader),
            DECLARE_GET_FIELD(t_Class, classes),
            DECLARE_GET_FIELD(t_Class, componentType),
            DECLARE_GET_FIELD(t_Class, declaredClasses),
            DECLARE_GET_FIELD(t_Class, declaringClass),
            DECLARE_GET_FIELD(t_Class, enclosingClass),
            DECLARE_GET_FIELD(t_Class, enum),
            DECLARE_GET_FIELD(t_Class, enumConstants),
            DECLARE_GET_FIELD(t_Class, interface),
            DECLARE_GET_FIELD(t_Class, interfaces),
            DECLARE_GET_FIELD(t_Class, localClass),
            DECLARE_GET_FIELD(t_Class, memberClass),
            DECLARE_GET_FIELD(t_Class, modifiers),
            DECLARE_GET_FIELD(t_Class, name),
            DECLARE_GET_FIELD(t_Class, package),
            DECLARE_GET_FIELD(t_Class, primitive),
            DECLARE_GET_FIELD(t_Class, signers),
            DECLARE_GET_FIELD(t_Class, simpleName),
            DECLARE_GET_FIELD(t_Class, superclass),
            DECLARE_GET_FIELD(t_Class, synthetic),
            DECLARE_GET_FIELD(t_Class, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_Class__methods_[] = {
            DECLARE_METHOD(t_Class, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Class, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Class, of_, METH_VARARGS),
            DECLARE_METHOD(t_Class, asSubclass, METH_O),
            DECLARE_METHOD(t_Class, cast, METH_O),
            DECLARE_METHOD(t_Class, desiredAssertionStatus, METH_NOARGS),
            DECLARE_METHOD(t_Class, forName, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_Class, getCanonicalName, METH_NOARGS),
            DECLARE_METHOD(t_Class, getClassLoader, METH_NOARGS),
            DECLARE_METHOD(t_Class, getClasses, METH_NOARGS),
            DECLARE_METHOD(t_Class, getComponentType, METH_NOARGS),
            DECLARE_METHOD(t_Class, getDeclaredClasses, METH_NOARGS),
            DECLARE_METHOD(t_Class, getDeclaringClass, METH_NOARGS),
            DECLARE_METHOD(t_Class, getEnclosingClass, METH_NOARGS),
            DECLARE_METHOD(t_Class, getEnumConstants, METH_NOARGS),
            DECLARE_METHOD(t_Class, getInterfaces, METH_NOARGS),
            DECLARE_METHOD(t_Class, getModifiers, METH_NOARGS),
            DECLARE_METHOD(t_Class, getName, METH_NOARGS),
            DECLARE_METHOD(t_Class, getPackage, METH_NOARGS),
            DECLARE_METHOD(t_Class, getResourceAsStream, METH_O),
            DECLARE_METHOD(t_Class, getSigners, METH_NOARGS),
            DECLARE_METHOD(t_Class, getSimpleName, METH_NOARGS),
            DECLARE_METHOD(t_Class, getSuperclass, METH_NOARGS),
            DECLARE_METHOD(t_Class, isAnnotation, METH_NOARGS),
            DECLARE_METHOD(t_Class, isAnonymousClass, METH_NOARGS),
            DECLARE_METHOD(t_Class, isArray, METH_NOARGS),
            DECLARE_METHOD(t_Class, isAssignableFrom, METH_O),
            DECLARE_METHOD(t_Class, isEnum, METH_NOARGS),
            DECLARE_METHOD(t_Class, isInstance, METH_O),
            DECLARE_METHOD(t_Class, isInterface, METH_NOARGS),
            DECLARE_METHOD(t_Class, isLocalClass, METH_NOARGS),
            DECLARE_METHOD(t_Class, isMemberClass, METH_NOARGS),
            DECLARE_METHOD(t_Class, isPrimitive, METH_NOARGS),
            DECLARE_METHOD(t_Class, isSynthetic, METH_NOARGS),
            DECLARE_METHOD(t_Class, newInstance, METH_NOARGS),
            DECLARE_METHOD(t_Class, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(Class, t_Class, ::java::lang::Object, Class, abstract_init, 0, 0, t_Class__fields_, 0, 0);
        PyObject *t_Class::wrap_Object(const Class& object, PyTypeObject *T)
        {
            PyObject *obj = t_Class::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
                t_Class *self = (t_Class *) obj;
                self->parameters[0] = T;
            }
            return obj;
        }

        PyObject *t_Class::wrap_jobject(const jobject& object, PyTypeObject *T)
        {
            PyObject *obj = t_Class::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
                t_Class *self = (t_Class *) obj;
                self->parameters[0] = T;
            }
            return obj;
        }

        void t_Class::install(PyObject *module)
        {
            installType(&PY_TYPE(Class), module, "Class", 0);
        }

        void t_Class::initialize(PyObject *module)
        {
            PyDict_SetItemString(PY_TYPE(Class).tp_dict, "class_", make_descriptor(Class::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Class).tp_dict, "wrapfn_", make_descriptor(t_Class::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Class).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_Class_cast_(PyTypeObject *type, PyObject *arg)
        {
            if (!(arg = castCheck(arg, Class::initializeClass, 1)))
                return NULL;
            return t_Class::wrap_Object(Class(((t_Class *) arg)->object.this$));
        }
        static PyObject *t_Class_instance_(PyTypeObject *type, PyObject *arg)
        {
            if (!castCheck(arg, Class::initializeClass, 0))
                Py_RETURN_FALSE;
            Py_RETURN_TRUE;
        }

        static PyObject *t_Class_of_(t_Class *self, PyObject *args)
        {
            if (!parseArg(args, "T", 1, &(self->parameters)))
                Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static PyObject *t_Class_asSubclass(t_Class *self, PyObject *arg)
        {
            Class a0((jobject) NULL);
            PyTypeObject **p0;
            Class result((jobject) NULL);

            if (!parseArg(arg, "K", Class::initializeClass, &a0, &p0, t_Class::parameters_))
            {
                OBJ_CALL(result = self->object.asSubclass(a0));
                return t_Class::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "asSubclass", arg);
            return NULL;
        }

        static PyObject *t_Class_cast(t_Class *self, PyObject *arg)
        {
            ::java::lang::Object a0((jobject) NULL);
            ::java::lang::Object result((jobject) NULL);

            if (!parseArg(arg, "o", &a0))
            {
                OBJ_CALL(result = self->object.cast(a0));
                return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "cast", arg);
            return NULL;
        }

        static PyObject *t_Class_desiredAssertionStatus(t_Class *self)
        {
            jboolean result;
            OBJ_CALL(result = self->object.desiredAssertionStatus());
            Py_RETURN_BOOL(result);
        }

        static PyObject *t_Class_forName(PyTypeObject *type, PyObject *args)
        {
            switch (PyTuple_GET_SIZE(args)) {
              case 1:
                {
                    ::java::lang::String a0((jobject) NULL);
                    Class result((jobject) NULL);

                    if (!parseArgs(args, "s", &a0))
                    {
                        OBJ_CALL(result = ::java::lang::Class::forName(a0));
                        return t_Class::wrap_Object(result);
                    }
                }
                break;
              case 3:
                {
                    ::java::lang::String a0((jobject) NULL);
                    jboolean a1;
                    ::java::lang::ClassLoader a2((jobject) NULL);
                    Class result((jobject) NULL);

                    if (!parseArgs(args, "sZk", ::java::lang::ClassLoader::initializeClass, &a0, &a1, &a2))
                    {
                        OBJ_CALL(result = ::java::lang::Class::forName(a0, a1, a2));
                        return t_Class::wrap_Object(result);
                    }
                }
            }

            PyErr_SetArgsError(type, "forName", args);
            return NULL;
        }

        static PyObject *t_Class_getCanonicalName(t_Class *self)
        {
            ::java::lang::String result((jobject) NULL);
            OBJ_CALL(result = self->object.getCanonicalName());
            return j2p(result);
        }

        static PyObject *t_Class_getClassLoader(t_Class *self)
        {
            ::java::lang::ClassLoader result((jobject) NULL);
            OBJ_CALL(result = self->object.getClassLoader());
            return ::java::lang::t_ClassLoader::wrap_Object(result);
        }

        static PyObject *t_Class_getClasses(t_Class *self)
        {
            JArray< Class > result((jobject) NULL);
            OBJ_CALL(result = self->object.getClasses());
            return JArray<jobject>(result.this$).wrap(t_Class::wrap_jobject);
        }

        static PyObject *t_Class_getComponentType(t_Class *self)
        {
            Class result((jobject) NULL);
            OBJ_CALL(result = self->object.getComponentType());
            return t_Class::wrap_Object(result);
        }

        static PyObject *t_Class_getDeclaredClasses(t_Class *self)
        {
            JArray< Class > result((jobject) NULL);
            OBJ_CALL(result = self->object.getDeclaredClasses());
            return JArray<jobject>(result.this$).wrap(t_Class::wrap_jobject);
        }

        static PyObject *t_Class_getDeclaringClass(t_Class *self)
        {
            Class result((jobject) NULL);
            OBJ_CALL(result = self->object.getDeclaringClass());
            return t_Class::wrap_Object(result);
        }

        static PyObject *t_Class_getEnclosingClass(t_Class *self)
        {
            Class result((jobject) NULL);
            OBJ_CALL(result = self->object.getEnclosingClass());
            return t_Class::wrap_Object(result);
        }

        static PyObject *t_Class_getEnumConstants(t_Class *self)
        {
            JArray< ::java::lang::Object > result((jobject) NULL);
            OBJ_CALL(result = self->object.getEnumConstants());
            return JArray<jobject>(result.this$).wrap(::java::lang::t_Object::wrap_jobject);
        }

        static PyObject *t_Class_getInterfaces(t_Class *self)
        {
            JArray< Class > result((jobject) NULL);
            OBJ_CALL(result = self->object.getInterfaces());
            return JArray<jobject>(result.this$).wrap(t_Class::wrap_jobject);
        }

        static PyObject *t_Class_getModifiers(t_Class *self)
        {
            jint result;
            OBJ_CALL(result = self->object.getModifiers());
            return PyInt_FromLong((long) result);
        }

        static PyObject *t_Class_getName(t_Class *self)
        {
            ::java::lang::String result((jobject) NULL);
            OBJ_CALL(result = self->object.getName());
            return j2p(result);
        }

        static PyObject *t_Class_getPackage(t_Class *self)
        {
            ::java::lang::Package result((jobject) NULL);
            OBJ_CALL(result = self->object.getPackage());
            return ::java::lang::t_Package::wrap_Object(result);
        }

        static PyObject *t_Class_getResourceAsStream(t_Class *self, PyObject *arg)
        {
            ::java::lang::String a0((jobject) NULL);
            ::java::io::InputStream result((jobject) NULL);

            if (!parseArg(arg, "s", &a0))
            {
                OBJ_CALL(result = self->object.getResourceAsStream(a0));
                return ::java::io::t_InputStream::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "getResourceAsStream", arg);
            return NULL;
        }

        static PyObject *t_Class_getSigners(t_Class *self)
        {
            JArray< ::java::lang::Object > result((jobject) NULL);
            OBJ_CALL(result = self->object.getSigners());
            return JArray<jobject>(result.this$).wrap(::java::lang::t_Object::wrap_jobject);
        }

        static PyObject *t_Class_getSimpleName(t_Class *self)
        {
            ::java::lang::String result((jobject) NULL);
            OBJ_CALL(result = self->object.getSimpleName());
            return j2p(result);
        }

        static PyObject *t_Class_getSuperclass(t_Class *self)
        {
            Class result((jobject) NULL);
            OBJ_CALL(result = self->object.getSuperclass());
            return t_Class::wrap_Object(result);
        }

        static PyObject *t_Class_isAnnotation(t_Class *self)
        {
            jboolean result;
            OBJ_CALL(result = self->object.isAnnotation());
            Py_RETURN_BOOL(result);
        }

        static PyObject *t_Class_isAnonymousClass(t_Class *self)
        {
            jboolean result;
            OBJ_CALL(result = self->object.isAnonymousClass());
            Py_RETURN_BOOL(result);
        }

        static PyObject *t_Class_isArray(t_Class *self)
        {
            jboolean result;
            OBJ_CALL(result = self->object.isArray());
            Py_RETURN_BOOL(result);
        }

        static PyObject *t_Class_isAssignableFrom(t_Class *self, PyObject *arg)
        {
            Class a0((jobject) NULL);
            PyTypeObject **p0;
            jboolean result;

            if (!parseArg(arg, "K", Class::initializeClass, &a0, &p0, t_Class::parameters_))
            {
                OBJ_CALL(result = self->object.isAssignableFrom(a0));
                Py_RETURN_BOOL(result);
            }

            PyErr_SetArgsError((PyObject *) self, "isAssignableFrom", arg);
            return NULL;
        }

        static PyObject *t_Class_isEnum(t_Class *self)
        {
            jboolean result;
            OBJ_CALL(result = self->object.isEnum());
            Py_RETURN_BOOL(result);
        }

        static PyObject *t_Class_isInstance(t_Class *self, PyObject *arg)
        {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArg(arg, "o", &a0))
            {
                OBJ_CALL(result = self->object.isInstance(a0));
                Py_RETURN_BOOL(result);
            }

            PyErr_SetArgsError((PyObject *) self, "isInstance", arg);
            return NULL;
        }

        static PyObject *t_Class_isInterface(t_Class *self)
        {
            jboolean result;
            OBJ_CALL(result = self->object.isInterface());
            Py_RETURN_BOOL(result);
        }

        static PyObject *t_Class_isLocalClass(t_Class *self)
        {
            jboolean result;
            OBJ_CALL(result = self->object.isLocalClass());
            Py_RETURN_BOOL(result);
        }

        static PyObject *t_Class_isMemberClass(t_Class *self)
        {
            jboolean result;
            OBJ_CALL(result = self->object.isMemberClass());
            Py_RETURN_BOOL(result);
        }

        static PyObject *t_Class_isPrimitive(t_Class *self)
        {
            jboolean result;
            OBJ_CALL(result = self->object.isPrimitive());
            Py_RETURN_BOOL(result);
        }

        static PyObject *t_Class_isSynthetic(t_Class *self)
        {
            jboolean result;
            OBJ_CALL(result = self->object.isSynthetic());
            Py_RETURN_BOOL(result);
        }

        static PyObject *t_Class_newInstance(t_Class *self)
        {
            ::java::lang::Object result((jobject) NULL);
            OBJ_CALL(result = self->object.newInstance());
            return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
        }

        static PyObject *t_Class_toString(t_Class *self, PyObject *args)
        {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
                OBJ_CALL(result = self->object.toString());
                return j2p(result);
            }

            return callSuper(&PY_TYPE(Class), (PyObject *) self, "toString", args, 2);
        }
        static PyObject *t_Class_get__parameters_(t_Class *self, void *data)
        {
            return typeParameters(self->parameters, sizeof(self->parameters));
        }

        static PyObject *t_Class_get__annotation(t_Class *self, void *data)
        {
            jboolean value;
            OBJ_CALL(value = self->object.isAnnotation());
            Py_RETURN_BOOL(value);
        }

        static PyObject *t_Class_get__anonymousClass(t_Class *self, void *data)
        {
            jboolean value;
            OBJ_CALL(value = self->object.isAnonymousClass());
            Py_RETURN_BOOL(value);
        }

        static PyObject *t_Class_get__array(t_Class *self, void *data)
        {
            jboolean value;
            OBJ_CALL(value = self->object.isArray());
            Py_RETURN_BOOL(value);
        }

        static PyObject *t_Class_get__canonicalName(t_Class *self, void *data)
        {
            ::java::lang::String value((jobject) NULL);
            OBJ_CALL(value = self->object.getCanonicalName());
            return j2p(value);
        }

        static PyObject *t_Class_get__classLoader(t_Class *self, void *data)
        {
            ::java::lang::ClassLoader value((jobject) NULL);
            OBJ_CALL(value = self->object.getClassLoader());
            return ::java::lang::t_ClassLoader::wrap_Object(value);
        }

        static PyObject *t_Class_get__classes(t_Class *self, void *data)
        {
            JArray< Class > value((jobject) NULL);
            OBJ_CALL(value = self->object.getClasses());
            return JArray<jobject>(value.this$).wrap(t_Class::wrap_jobject);
        }

        static PyObject *t_Class_get__componentType(t_Class *self, void *data)
        {
            Class value((jobject) NULL);
            OBJ_CALL(value = self->object.getComponentType());
            return t_Class::wrap_Object(value);
        }

        static PyObject *t_Class_get__declaredClasses(t_Class *self, void *data)
        {
            JArray< Class > value((jobject) NULL);
            OBJ_CALL(value = self->object.getDeclaredClasses());
            return JArray<jobject>(value.this$).wrap(t_Class::wrap_jobject);
        }

        static PyObject *t_Class_get__declaringClass(t_Class *self, void *data)
        {
            Class value((jobject) NULL);
            OBJ_CALL(value = self->object.getDeclaringClass());
            return t_Class::wrap_Object(value);
        }

        static PyObject *t_Class_get__enclosingClass(t_Class *self, void *data)
        {
            Class value((jobject) NULL);
            OBJ_CALL(value = self->object.getEnclosingClass());
            return t_Class::wrap_Object(value);
        }

        static PyObject *t_Class_get__enum(t_Class *self, void *data)
        {
            jboolean value;
            OBJ_CALL(value = self->object.isEnum());
            Py_RETURN_BOOL(value);
        }

        static PyObject *t_Class_get__enumConstants(t_Class *self, void *data)
        {
            JArray< ::java::lang::Object > value((jobject) NULL);
            OBJ_CALL(value = self->object.getEnumConstants());
            return JArray<jobject>(value.this$).wrap(::java::lang::t_Object::wrap_jobject);
        }

        static PyObject *t_Class_get__interface(t_Class *self, void *data)
        {
            jboolean value;
            OBJ_CALL(value = self->object.isInterface());
            Py_RETURN_BOOL(value);
        }

        static PyObject *t_Class_get__interfaces(t_Class *self, void *data)
        {
            JArray< Class > value((jobject) NULL);
            OBJ_CALL(value = self->object.getInterfaces());
            return JArray<jobject>(value.this$).wrap(t_Class::wrap_jobject);
        }

        static PyObject *t_Class_get__localClass(t_Class *self, void *data)
        {
            jboolean value;
            OBJ_CALL(value = self->object.isLocalClass());
            Py_RETURN_BOOL(value);
        }

        static PyObject *t_Class_get__memberClass(t_Class *self, void *data)
        {
            jboolean value;
            OBJ_CALL(value = self->object.isMemberClass());
            Py_RETURN_BOOL(value);
        }

        static PyObject *t_Class_get__modifiers(t_Class *self, void *data)
        {
            jint value;
            OBJ_CALL(value = self->object.getModifiers());
            return PyInt_FromLong((long) value);
        }

        static PyObject *t_Class_get__name(t_Class *self, void *data)
        {
            ::java::lang::String value((jobject) NULL);
            OBJ_CALL(value = self->object.getName());
            return j2p(value);
        }

        static PyObject *t_Class_get__package(t_Class *self, void *data)
        {
            ::java::lang::Package value((jobject) NULL);
            OBJ_CALL(value = self->object.getPackage());
            return ::java::lang::t_Package::wrap_Object(value);
        }

        static PyObject *t_Class_get__primitive(t_Class *self, void *data)
        {
            jboolean value;
            OBJ_CALL(value = self->object.isPrimitive());
            Py_RETURN_BOOL(value);
        }

        static PyObject *t_Class_get__signers(t_Class *self, void *data)
        {
            JArray< ::java::lang::Object > value((jobject) NULL);
            OBJ_CALL(value = self->object.getSigners());
            return JArray<jobject>(value.this$).wrap(::java::lang::t_Object::wrap_jobject);
        }

        static PyObject *t_Class_get__simpleName(t_Class *self, void *data)
        {
            ::java::lang::String value((jobject) NULL);
            OBJ_CALL(value = self->object.getSimpleName());
            return j2p(value);
        }

        static PyObject *t_Class_get__superclass(t_Class *self, void *data)
        {
            Class value((jobject) NULL);
            OBJ_CALL(value = self->object.getSuperclass());
            return t_Class::wrap_Object(value);
        }

        static PyObject *t_Class_get__synthetic(t_Class *self, void *data)
        {
            jboolean value;
            OBJ_CALL(value = self->object.isSynthetic());
            Py_RETURN_BOOL(value);
        }
    }
}
#include <jni.h>
#include "JCCEnv.h"
#include "is/iclt/icenlp/core/lemmald/Lemmald.h"
#include "is/iclt/icenlp/core/lemmald/LemmaResult.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "is/iclt/icenlp/core/formald/tags/TaggedText.h"
#include "JArray.h"

namespace is {
    namespace iclt {
        namespace icenlp {
            namespace core {
                namespace lemmald {

                    ::java::lang::Class *Lemmald::class$ = NULL;
                    jmethodID *Lemmald::mids$ = NULL;

                    jclass Lemmald::initializeClass()
                    {
                        if (!class$)
                        {

                            jclass cls = (jclass) env->findClass("is/iclt/icenlp/core/lemmald/Lemmald");

                            mids$ = new jmethodID[max_mid];
                            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                            mids$[mid_init$_4a264742] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Ljava/lang/String;)V");
                            mids$[mid_getInstance_b3151502] = env->getStaticMethodID(cls, "getInstance", "()Lis/iclt/icenlp/core/lemmald/Lemmald;");
                            mids$[mid_lemmatize_79d992ab] = env->getMethodID(cls, "lemmatize", "(Ljava/lang/String;Ljava/lang/String;)Lis/iclt/icenlp/core/lemmald/LemmaResult;");
                            mids$[mid_lemmatizeTagged_37274943] = env->getMethodID(cls, "lemmatizeTagged", "(Lis/iclt/icenlp/core/formald/tags/TaggedText;)V");
                            mids$[mid_lemmatizeText_cb9f349c] = env->getMethodID(cls, "lemmatizeText", "(Ljava/lang/String;)Lis/iclt/icenlp/core/formald/tags/TaggedText;");
                            mids$[mid_newInstance_b3151502] = env->getStaticMethodID(cls, "newInstance", "()Lis/iclt/icenlp/core/lemmald/Lemmald;");
                            mids$[mid_terminate_54c6a166] = env->getStaticMethodID(cls, "terminate", "()V");
                            mids$[mid_createRuleIds_1034579c] = env->getStaticMethodID(cls, "createRuleIds", "(Ljava/lang/String;Ljava/lang/String;)Ljava/util/ArrayList;");

                            class$ = (::java::lang::Class *) new JObject(cls);
                        }
                        return (jclass) class$->this$;
                    }

                    Lemmald::Lemmald() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

                    Lemmald::Lemmald(const ::java::lang::String & a0, const ::java::lang::String & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_4a264742, a0.this$, a1.this$)) {}

                    Lemmald Lemmald::getInstance()
                    {
                        jclass cls = initializeClass();
                        return Lemmald(env->callStaticObjectMethod(cls, mids$[mid_getInstance_b3151502]));
                    }

                    ::is::iclt::icenlp::core::lemmald::LemmaResult Lemmald::lemmatize(const ::java::lang::String & a0, const ::java::lang::String & a1) const
                    {
                        return ::is::iclt::icenlp::core::lemmald::LemmaResult(env->callObjectMethod(this$, mids$[mid_lemmatize_79d992ab], a0.this$, a1.this$));
                    }

                    void Lemmald::lemmatizeTagged(const ::is::iclt::icenlp::core::formald::tags::TaggedText & a0) const
                    {
                        env->callVoidMethod(this$, mids$[mid_lemmatizeTagged_37274943], a0.this$);
                    }

                    ::is::iclt::icenlp::core::formald::tags::TaggedText Lemmald::lemmatizeText(const ::java::lang::String & a0) const
                    {
                        return ::is::iclt::icenlp::core::formald::tags::TaggedText(env->callObjectMethod(this$, mids$[mid_lemmatizeText_cb9f349c], a0.this$));
                    }

                    Lemmald Lemmald::newInstance()
                    {
                        jclass cls = initializeClass();
                        return Lemmald(env->callStaticObjectMethod(cls, mids$[mid_newInstance_b3151502]));
                    }

                    void Lemmald::terminate()
                    {
                        jclass cls = initializeClass();
                        env->callStaticVoidMethod(cls, mids$[mid_terminate_54c6a166]);
                    }
                }
            }
        }
    }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace is {
    namespace iclt {
        namespace icenlp {
            namespace core {
                namespace lemmald {
                    static PyObject *t_Lemmald_cast_(PyTypeObject *type, PyObject *arg);
                    static PyObject *t_Lemmald_instance_(PyTypeObject *type, PyObject *arg);
                    static int t_Lemmald_init_(t_Lemmald *self, PyObject *args, PyObject *kwds);
                    static PyObject *t_Lemmald_getInstance(PyTypeObject *type);
                    static PyObject *t_Lemmald_lemmatize(t_Lemmald *self, PyObject *args);
                    static PyObject *t_Lemmald_lemmatizeTagged(t_Lemmald *self, PyObject *arg);
                    static PyObject *t_Lemmald_lemmatizeText(t_Lemmald *self, PyObject *arg);
                    static PyObject *t_Lemmald_newInstance(PyTypeObject *type);
                    static PyObject *t_Lemmald_terminate(PyTypeObject *type);
                    static PyObject *t_Lemmald_get__instance(t_Lemmald *self, void *data);
                    static PyGetSetDef t_Lemmald__fields_[] = {
                        DECLARE_GET_FIELD(t_Lemmald, instance),
                        { NULL, NULL, NULL, NULL, NULL }
                    };

                    static PyMethodDef t_Lemmald__methods_[] = {
                        DECLARE_METHOD(t_Lemmald, cast_, METH_O | METH_CLASS),
                        DECLARE_METHOD(t_Lemmald, instance_, METH_O | METH_CLASS),
                        DECLARE_METHOD(t_Lemmald, getInstance, METH_NOARGS | METH_CLASS),
                        DECLARE_METHOD(t_Lemmald, lemmatize, METH_VARARGS),
                        DECLARE_METHOD(t_Lemmald, lemmatizeTagged, METH_O),
                        DECLARE_METHOD(t_Lemmald, lemmatizeText, METH_O),
                        DECLARE_METHOD(t_Lemmald, newInstance, METH_NOARGS | METH_CLASS),
                        DECLARE_METHOD(t_Lemmald, terminate, METH_NOARGS | METH_CLASS),
                        { NULL, NULL, 0, NULL }
                    };

                    DECLARE_TYPE(Lemmald, t_Lemmald, ::java::lang::Object, Lemmald, t_Lemmald_init_, 0, 0, t_Lemmald__fields_, 0, 0);

                    void t_Lemmald::install(PyObject *module)
                    {
                        installType(&PY_TYPE(Lemmald), module, "Lemmald", 0);
                    }

                    void t_Lemmald::initialize(PyObject *module)
                    {
                        PyDict_SetItemString(PY_TYPE(Lemmald).tp_dict, "class_", make_descriptor(Lemmald::initializeClass, 1));
                        PyDict_SetItemString(PY_TYPE(Lemmald).tp_dict, "wrapfn_", make_descriptor(t_Lemmald::wrap_jobject));
                        PyDict_SetItemString(PY_TYPE(Lemmald).tp_dict, "boxfn_", make_descriptor(boxObject));
                    }

                    static PyObject *t_Lemmald_cast_(PyTypeObject *type, PyObject *arg)
                    {
                        if (!(arg = castCheck(arg, Lemmald::initializeClass, 1)))
                            return NULL;
                        return t_Lemmald::wrap_Object(Lemmald(((t_Lemmald *) arg)->object.this$));
                    }
                    static PyObject *t_Lemmald_instance_(PyTypeObject *type, PyObject *arg)
                    {
                        if (!castCheck(arg, Lemmald::initializeClass, 0))
                            Py_RETURN_FALSE;
                        Py_RETURN_TRUE;
                    }

                    static int t_Lemmald_init_(t_Lemmald *self, PyObject *args, PyObject *kwds)
                    {
                        switch (PyTuple_GET_SIZE(args)) {
                          case 0:
                            {
                                Lemmald object((jobject) NULL);

                                INT_CALL(object = Lemmald());
                                self->object = object;
                                break;
                            }
                            goto err;
                          case 2:
                            {
                                ::java::lang::String a0((jobject) NULL);
                                ::java::lang::String a1((jobject) NULL);
                                Lemmald object((jobject) NULL);

                                if (!parseArgs(args, "ss", &a0, &a1))
                                {
                                    INT_CALL(object = Lemmald(a0, a1));
                                    self->object = object;
                                    break;
                                }
                            }
                          default:
                          err:
                            PyErr_SetArgsError((PyObject *) self, "__init__", args);
                            return -1;
                        }

                        return 0;
                    }

                    static PyObject *t_Lemmald_getInstance(PyTypeObject *type)
                    {
                        Lemmald result((jobject) NULL);
                        OBJ_CALL(result = ::is::iclt::icenlp::core::lemmald::Lemmald::getInstance());
                        return t_Lemmald::wrap_Object(result);
                    }

                    static PyObject *t_Lemmald_lemmatize(t_Lemmald *self, PyObject *args)
                    {
                        ::java::lang::String a0((jobject) NULL);
                        ::java::lang::String a1((jobject) NULL);
                        ::is::iclt::icenlp::core::lemmald::LemmaResult result((jobject) NULL);

                        if (!parseArgs(args, "ss", &a0, &a1))
                        {
                            OBJ_CALL(result = self->object.lemmatize(a0, a1));
                            return ::is::iclt::icenlp::core::lemmald::t_LemmaResult::wrap_Object(result);
                        }

                        PyErr_SetArgsError((PyObject *) self, "lemmatize", args);
                        return NULL;
                    }

                    static PyObject *t_Lemmald_lemmatizeTagged(t_Lemmald *self, PyObject *arg)
                    {
                        ::is::iclt::icenlp::core::formald::tags::TaggedText a0((jobject) NULL);

                        if (!parseArg(arg, "k", ::is::iclt::icenlp::core::formald::tags::TaggedText::initializeClass, &a0))
                        {
                            OBJ_CALL(self->object.lemmatizeTagged(a0));
                            Py_RETURN_NONE;
                        }

                        PyErr_SetArgsError((PyObject *) self, "lemmatizeTagged", arg);
                        return NULL;
                    }

                    static PyObject *t_Lemmald_lemmatizeText(t_Lemmald *self, PyObject *arg)
                    {
                        ::java::lang::String a0((jobject) NULL);
                        ::is::iclt::icenlp::core::formald::tags::TaggedText result((jobject) NULL);

                        if (!parseArg(arg, "s", &a0))
                        {
                            OBJ_CALL(result = self->object.lemmatizeText(a0));
                            return ::is::iclt::icenlp::core::formald::tags::t_TaggedText::wrap_Object(result);
                        }

                        PyErr_SetArgsError((PyObject *) self, "lemmatizeText", arg);
                        return NULL;
                    }

                    static PyObject *t_Lemmald_newInstance(PyTypeObject *type)
                    {
                        Lemmald result((jobject) NULL);
                        OBJ_CALL(result = ::is::iclt::icenlp::core::lemmald::Lemmald::newInstance());
                        return t_Lemmald::wrap_Object(result);
                    }

                    static PyObject *t_Lemmald_terminate(PyTypeObject *type)
                    {
                        OBJ_CALL(::is::iclt::icenlp::core::lemmald::Lemmald::terminate());
                        Py_RETURN_NONE;
                    }

                    static PyObject *t_Lemmald_get__instance(t_Lemmald *self, void *data)
                    {
                        Lemmald value((jobject) NULL);
                        OBJ_CALL(value = self->object.getInstance());
                        return t_Lemmald::wrap_Object(value);
                    }
                }
            }
        }
    }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/lang/Object.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "java/lang/InterruptedException.h"
#include "JArray.h"

namespace java {
    namespace lang {

        ::java::lang::Class *Object::class$ = NULL;
        jmethodID *Object::mids$ = NULL;

        jclass Object::initializeClass()
        {
            if (!class$)
            {

                jclass cls = (jclass) env->findClass("java/lang/Object");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
                mids$[mid_getClass_44a5f2c9] = env->getMethodID(cls, "getClass", "()Ljava/lang/Class;");
                mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
                mids$[mid_notify_54c6a166] = env->getMethodID(cls, "notify", "()V");
                mids$[mid_notifyAll_54c6a166] = env->getMethodID(cls, "notifyAll", "()V");
                mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
                mids$[mid_wait_54c6a166] = env->getMethodID(cls, "wait", "()V");
                mids$[mid_wait_0ee6df2f] = env->getMethodID(cls, "wait", "(J)V");
                mids$[mid_wait_25d05c8f] = env->getMethodID(cls, "wait", "(JI)V");
                mids$[mid_finalize_54c6a166] = env->getMethodID(cls, "finalize", "()V");
                mids$[mid_clone_846352c3] = env->getMethodID(cls, "clone", "()Ljava/lang/Object;");

                class$ = (::java::lang::Class *) new JObject(cls);
            }
            return (jclass) class$->this$;
        }

        Object::Object() : ::JObject(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        jboolean Object::equals(const Object & a0) const
        {
            return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        ::java::lang::Class Object::getClass() const
        {
            return ::java::lang::Class(env->callObjectMethod(this$, mids$[mid_getClass_44a5f2c9]));
        }

        jint Object::hashCode() const
        {
            return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        void Object::notify() const
        {
            env->callVoidMethod(this$, mids$[mid_notify_54c6a166]);
        }

        void Object::notifyAll() const
        {
            env->callVoidMethod(this$, mids$[mid_notifyAll_54c6a166]);
        }

        ::java::lang::String Object::toString() const
        {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }

        void Object::wait() const
        {
            env->callVoidMethod(this$, mids$[mid_wait_54c6a166]);
        }

        void Object::wait(jlong a0) const
        {
            env->callVoidMethod(this$, mids$[mid_wait_0ee6df2f], a0);
        }

        void Object::wait(jlong a0, jint a1) const
        {
            env->callVoidMethod(this$, mids$[mid_wait_25d05c8f], a0, a1);
        }
    }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
    namespace lang {
        static PyObject *t_Object_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Object_instance_(PyTypeObject *type, PyObject *arg);
        static int t_Object_init_(t_Object *self, PyObject *args, PyObject *kwds);
        static PyObject *t_Object_equals(t_Object *self, PyObject *arg);
        static PyObject *t_Object_getClass(t_Object *self);
        static PyObject *t_Object_hashCode(t_Object *self);
        static PyObject *t_Object_notify(t_Object *self);
        static PyObject *t_Object_notifyAll(t_Object *self);
        static PyObject *t_Object_toString(t_Object *self);
        static PyObject *t_Object_wait(t_Object *self, PyObject *args);
        static PyObject *t_Object_get__class(t_Object *self, void *data);
        static PyGetSetDef t_Object__fields_[] = {
            DECLARE_GET_FIELD(t_Object, class),
            { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_Object__methods_[] = {
            DECLARE_METHOD(t_Object, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Object, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Object, equals, METH_O),
            DECLARE_METHOD(t_Object, getClass, METH_NOARGS),
            DECLARE_METHOD(t_Object, hashCode, METH_NOARGS),
            DECLARE_METHOD(t_Object, notify, METH_NOARGS),
            DECLARE_METHOD(t_Object, notifyAll, METH_NOARGS),
            DECLARE_METHOD(t_Object, toString, METH_NOARGS),
            DECLARE_METHOD(t_Object, wait, METH_VARARGS),
            { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(Object, t_Object, JObject, Object, t_Object_init_, 0, 0, t_Object__fields_, 0, 0);

        void t_Object::install(PyObject *module)
        {
            installType(&PY_TYPE(Object), module, "Object", 0);
        }

        void t_Object::initialize(PyObject *module)
        {
            PyDict_SetItemString(PY_TYPE(Object).tp_dict, "class_", make_descriptor(Object::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Object).tp_dict, "wrapfn_", make_descriptor(t_Object::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Object).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_Object_cast_(PyTypeObject *type, PyObject *arg)
        {
            if (!(arg = castCheck(arg, Object::initializeClass, 1)))
                return NULL;
            return t_Object::wrap_Object(Object(((t_Object *) arg)->object.this$));
        }
        static PyObject *t_Object_instance_(PyTypeObject *type, PyObject *arg)
        {
            if (!castCheck(arg, Object::initializeClass, 0))
                Py_RETURN_FALSE;
            Py_RETURN_TRUE;
        }

        static int t_Object_init_(t_Object *self, PyObject *args, PyObject *kwds)
        {
            Object object((jobject) NULL);

            INT_CALL(object = Object());
            self->object = object;

            return 0;
        }

        static PyObject *t_Object_equals(t_Object *self, PyObject *arg)
        {
            Object a0((jobject) NULL);
            jboolean result;

            if (!parseArg(arg, "o", &a0))
            {
                OBJ_CALL(result = self->object.equals(a0));
                Py_RETURN_BOOL(result);
            }

            PyErr_SetArgsError((PyObject *) self, "equals", arg);
            return NULL;
        }

        static PyObject *t_Object_getClass(t_Object *self)
        {
            ::java::lang::Class result((jobject) NULL);
            OBJ_CALL(result = self->object.getClass());
            return ::java::lang::t_Class::wrap_Object(result);
        }

        static PyObject *t_Object_hashCode(t_Object *self)
        {
            jint result;
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
        }

        static PyObject *t_Object_notify(t_Object *self)
        {
            OBJ_CALL(self->object.notify());
            Py_RETURN_NONE;
        }

        static PyObject *t_Object_notifyAll(t_Object *self)
        {
            OBJ_CALL(self->object.notifyAll());
            Py_RETURN_NONE;
        }

        static PyObject *t_Object_toString(t_Object *self)
        {
            ::java::lang::String result((jobject) NULL);
            OBJ_CALL(result = self->object.toString());
            return j2p(result);
        }

        static PyObject *t_Object_wait(t_Object *self, PyObject *args)
        {
            switch (PyTuple_GET_SIZE(args)) {
              case 0:
                {
                    OBJ_CALL(self->object.wait());
                    Py_RETURN_NONE;
                }
                break;
              case 1:
                {
                    jlong a0;

                    if (!parseArgs(args, "J", &a0))
                    {
                        OBJ_CALL(self->object.wait(a0));
                        Py_RETURN_NONE;
                    }
                }
                break;
              case 2:
                {
                    jlong a0;
                    jint a1;

                    if (!parseArgs(args, "JI", &a0, &a1))
                    {
                        OBJ_CALL(self->object.wait(a0, a1));
                        Py_RETURN_NONE;
                    }
                }
            }

            PyErr_SetArgsError((PyObject *) self, "wait", args);
            return NULL;
        }

        static PyObject *t_Object_get__class(t_Object *self, void *data)
        {
            ::java::lang::Class value((jobject) NULL);
            OBJ_CALL(value = self->object.getClass());
            return ::java::lang::t_Class::wrap_Object(value);
        }
    }
}
#include <jni.h>
#include "JCCEnv.h"
#include "is/iclt/icenlp/core/lemmald/LemmaldSettings.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace is {
    namespace iclt {
        namespace icenlp {
            namespace core {
                namespace lemmald {

                    ::java::lang::Class *LemmaldSettings::class$ = NULL;
                    jmethodID *LemmaldSettings::mids$ = NULL;

                    jclass LemmaldSettings::initializeClass()
                    {
                        if (!class$)
                        {

                            jclass cls = (jclass) env->findClass("is/iclt/icenlp/core/lemmald/LemmaldSettings");

                            mids$ = new jmethodID[max_mid];
                            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                            mids$[mid_getProperty_97a5258f] = env->getStaticMethodID(cls, "getProperty", "(Ljava/lang/String;)Ljava/lang/String;");
                            mids$[mid_isOn_5fdc3f44] = env->getStaticMethodID(cls, "isOn", "(Ljava/lang/String;)Z");
                            mids$[mid_setValue_f3691645] = env->getStaticMethodID(cls, "setValue", "(Ljava/lang/String;Z)V");
                            mids$[mid_setValue_4a264742] = env->getStaticMethodID(cls, "setValue", "(Ljava/lang/String;Ljava/lang/String;)V");

                            class$ = (::java::lang::Class *) new JObject(cls);
                        }
                        return (jclass) class$->this$;
                    }

                    LemmaldSettings::LemmaldSettings() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

                    ::java::lang::String LemmaldSettings::getProperty(const ::java::lang::String & a0)
                    {
                        jclass cls = initializeClass();
                        return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_getProperty_97a5258f], a0.this$));
                    }

                    jboolean LemmaldSettings::isOn(const ::java::lang::String & a0)
                    {
                        jclass cls = initializeClass();
                        return env->callStaticBooleanMethod(cls, mids$[mid_isOn_5fdc3f44], a0.this$);
                    }

                    void LemmaldSettings::setValue(const ::java::lang::String & a0, jboolean a1)
                    {
                        jclass cls = initializeClass();
                        env->callStaticVoidMethod(cls, mids$[mid_setValue_f3691645], a0.this$, a1);
                    }

                    void LemmaldSettings::setValue(const ::java::lang::String & a0, const ::java::lang::String & a1)
                    {
                        jclass cls = initializeClass();
                        env->callStaticVoidMethod(cls, mids$[mid_setValue_4a264742], a0.this$, a1.this$);
                    }
                }
            }
        }
    }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace is {
    namespace iclt {
        namespace icenlp {
            namespace core {
                namespace lemmald {
                    static PyObject *t_LemmaldSettings_cast_(PyTypeObject *type, PyObject *arg);
                    static PyObject *t_LemmaldSettings_instance_(PyTypeObject *type, PyObject *arg);
                    static int t_LemmaldSettings_init_(t_LemmaldSettings *self, PyObject *args, PyObject *kwds);
                    static PyObject *t_LemmaldSettings_getProperty(PyTypeObject *type, PyObject *arg);
                    static PyObject *t_LemmaldSettings_isOn(PyTypeObject *type, PyObject *arg);
                    static PyObject *t_LemmaldSettings_setValue(PyTypeObject *type, PyObject *args);

                    static PyMethodDef t_LemmaldSettings__methods_[] = {
                        DECLARE_METHOD(t_LemmaldSettings, cast_, METH_O | METH_CLASS),
                        DECLARE_METHOD(t_LemmaldSettings, instance_, METH_O | METH_CLASS),
                        DECLARE_METHOD(t_LemmaldSettings, getProperty, METH_O | METH_CLASS),
                        DECLARE_METHOD(t_LemmaldSettings, isOn, METH_O | METH_CLASS),
                        DECLARE_METHOD(t_LemmaldSettings, setValue, METH_VARARGS | METH_CLASS),
                        { NULL, NULL, 0, NULL }
                    };

                    DECLARE_TYPE(LemmaldSettings, t_LemmaldSettings, ::java::lang::Object, LemmaldSettings, t_LemmaldSettings_init_, 0, 0, 0, 0, 0);

                    void t_LemmaldSettings::install(PyObject *module)
                    {
                        installType(&PY_TYPE(LemmaldSettings), module, "LemmaldSettings", 0);
                    }

                    void t_LemmaldSettings::initialize(PyObject *module)
                    {
                        PyDict_SetItemString(PY_TYPE(LemmaldSettings).tp_dict, "class_", make_descriptor(LemmaldSettings::initializeClass, 1));
                        PyDict_SetItemString(PY_TYPE(LemmaldSettings).tp_dict, "wrapfn_", make_descriptor(t_LemmaldSettings::wrap_jobject));
                        PyDict_SetItemString(PY_TYPE(LemmaldSettings).tp_dict, "boxfn_", make_descriptor(boxObject));
                    }

                    static PyObject *t_LemmaldSettings_cast_(PyTypeObject *type, PyObject *arg)
                    {
                        if (!(arg = castCheck(arg, LemmaldSettings::initializeClass, 1)))
                            return NULL;
                        return t_LemmaldSettings::wrap_Object(LemmaldSettings(((t_LemmaldSettings *) arg)->object.this$));
                    }
                    static PyObject *t_LemmaldSettings_instance_(PyTypeObject *type, PyObject *arg)
                    {
                        if (!castCheck(arg, LemmaldSettings::initializeClass, 0))
                            Py_RETURN_FALSE;
                        Py_RETURN_TRUE;
                    }

                    static int t_LemmaldSettings_init_(t_LemmaldSettings *self, PyObject *args, PyObject *kwds)
                    {
                        LemmaldSettings object((jobject) NULL);

                        INT_CALL(object = LemmaldSettings());
                        self->object = object;

                        return 0;
                    }

                    static PyObject *t_LemmaldSettings_getProperty(PyTypeObject *type, PyObject *arg)
                    {
                        ::java::lang::String a0((jobject) NULL);
                        ::java::lang::String result((jobject) NULL);

                        if (!parseArg(arg, "s", &a0))
                        {
                            OBJ_CALL(result = ::is::iclt::icenlp::core::lemmald::LemmaldSettings::getProperty(a0));
                            return j2p(result);
                        }

                        PyErr_SetArgsError(type, "getProperty", arg);
                        return NULL;
                    }

                    static PyObject *t_LemmaldSettings_isOn(PyTypeObject *type, PyObject *arg)
                    {
                        ::java::lang::String a0((jobject) NULL);
                        jboolean result;

                        if (!parseArg(arg, "s", &a0))
                        {
                            OBJ_CALL(result = ::is::iclt::icenlp::core::lemmald::LemmaldSettings::isOn(a0));
                            Py_RETURN_BOOL(result);
                        }

                        PyErr_SetArgsError(type, "isOn", arg);
                        return NULL;
                    }

                    static PyObject *t_LemmaldSettings_setValue(PyTypeObject *type, PyObject *args)
                    {
                        switch (PyTuple_GET_SIZE(args)) {
                          case 2:
                            {
                                ::java::lang::String a0((jobject) NULL);
                                jboolean a1;

                                if (!parseArgs(args, "sZ", &a0, &a1))
                                {
                                    OBJ_CALL(::is::iclt::icenlp::core::lemmald::LemmaldSettings::setValue(a0, a1));
                                    Py_RETURN_NONE;
                                }
                            }
                            {
                                ::java::lang::String a0((jobject) NULL);
                                ::java::lang::String a1((jobject) NULL);

                                if (!parseArgs(args, "ss", &a0, &a1))
                                {
                                    OBJ_CALL(::is::iclt::icenlp::core::lemmald::LemmaldSettings::setValue(a0, a1));
                                    Py_RETURN_NONE;
                                }
                            }
                        }

                        PyErr_SetArgsError(type, "setValue", args);
                        return NULL;
                    }
                }
            }
        }
    }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/lang/Character.h"
#include "java/lang/Comparable.h"
#include "java/io/Serializable.h"
#include "java/lang/Class.h"
#include "java/lang/CharSequence.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace java {
    namespace lang {

        ::java::lang::Class *Character::class$ = NULL;
        jmethodID *Character::mids$ = NULL;
        jbyte Character::COMBINING_SPACING_MARK = (jbyte) 0;
        jbyte Character::CONNECTOR_PUNCTUATION = (jbyte) 0;
        jbyte Character::CONTROL = (jbyte) 0;
        jbyte Character::CURRENCY_SYMBOL = (jbyte) 0;
        jbyte Character::DASH_PUNCTUATION = (jbyte) 0;
        jbyte Character::DECIMAL_DIGIT_NUMBER = (jbyte) 0;
        jbyte Character::DIRECTIONALITY_ARABIC_NUMBER = (jbyte) 0;
        jbyte Character::DIRECTIONALITY_BOUNDARY_NEUTRAL = (jbyte) 0;
        jbyte Character::DIRECTIONALITY_COMMON_NUMBER_SEPARATOR = (jbyte) 0;
        jbyte Character::DIRECTIONALITY_EUROPEAN_NUMBER = (jbyte) 0;
        jbyte Character::DIRECTIONALITY_EUROPEAN_NUMBER_SEPARATOR = (jbyte) 0;
        jbyte Character::DIRECTIONALITY_EUROPEAN_NUMBER_TERMINATOR = (jbyte) 0;
        jbyte Character::DIRECTIONALITY_LEFT_TO_RIGHT = (jbyte) 0;
        jbyte Character::DIRECTIONALITY_LEFT_TO_RIGHT_EMBEDDING = (jbyte) 0;
        jbyte Character::DIRECTIONALITY_LEFT_TO_RIGHT_OVERRIDE = (jbyte) 0;
        jbyte Character::DIRECTIONALITY_NONSPACING_MARK = (jbyte) 0;
        jbyte Character::DIRECTIONALITY_OTHER_NEUTRALS = (jbyte) 0;
        jbyte Character::DIRECTIONALITY_PARAGRAPH_SEPARATOR = (jbyte) 0;
        jbyte Character::DIRECTIONALITY_POP_DIRECTIONAL_FORMAT = (jbyte) 0;
        jbyte Character::DIRECTIONALITY_RIGHT_TO_LEFT = (jbyte) 0;
        jbyte Character::DIRECTIONALITY_RIGHT_TO_LEFT_ARABIC = (jbyte) 0;
        jbyte Character::DIRECTIONALITY_RIGHT_TO_LEFT_EMBEDDING = (jbyte) 0;
        jbyte Character::DIRECTIONALITY_RIGHT_TO_LEFT_OVERRIDE = (jbyte) 0;
        jbyte Character::DIRECTIONALITY_SEGMENT_SEPARATOR = (jbyte) 0;
        jbyte Character::DIRECTIONALITY_UNDEFINED = (jbyte) 0;
        jbyte Character::DIRECTIONALITY_WHITESPACE = (jbyte) 0;
        jbyte Character::ENCLOSING_MARK = (jbyte) 0;
        jbyte Character::END_PUNCTUATION = (jbyte) 0;
        jbyte Character::FINAL_QUOTE_PUNCTUATION = (jbyte) 0;
        jbyte Character::FORMAT = (jbyte) 0;
        jbyte Character::INITIAL_QUOTE_PUNCTUATION = (jbyte) 0;
        jbyte Character::LETTER_NUMBER = (jbyte) 0;
        jbyte Character::LINE_SEPARATOR = (jbyte) 0;
        jbyte Character::LOWERCASE_LETTER = (jbyte) 0;
        jbyte Character::MATH_SYMBOL = (jbyte) 0;
        jint Character::MAX_CODE_POINT = (jint) 0;
        jchar Character::MAX_HIGH_SURROGATE = (jchar) 0;
        jchar Character::MAX_LOW_SURROGATE = (jchar) 0;
        jint Character::MAX_RADIX = (jint) 0;
        jchar Character::MAX_SURROGATE = (jchar) 0;
        jchar Character::MAX_VALUE = (jchar) 0;
        jint Character::MIN_CODE_POINT = (jint) 0;
        jchar Character::MIN_HIGH_SURROGATE = (jchar) 0;
        jchar Character::MIN_LOW_SURROGATE = (jchar) 0;
        jint Character::MIN_RADIX = (jint) 0;
        jint Character::MIN_SUPPLEMENTARY_CODE_POINT = (jint) 0;
        jchar Character::MIN_SURROGATE = (jchar) 0;
        jchar Character::MIN_VALUE = (jchar) 0;
        jbyte Character::MODIFIER_LETTER = (jbyte) 0;
        jbyte Character::MODIFIER_SYMBOL = (jbyte) 0;
        jbyte Character::NON_SPACING_MARK = (jbyte) 0;
        jbyte Character::OTHER_LETTER = (jbyte) 0;
        jbyte Character::OTHER_NUMBER = (jbyte) 0;
        jbyte Character::OTHER_PUNCTUATION = (jbyte) 0;
        jbyte Character::OTHER_SYMBOL = (jbyte) 0;
        jbyte Character::PARAGRAPH_SEPARATOR = (jbyte) 0;
        jbyte Character::PRIVATE_USE = (jbyte) 0;
        jint Character::SIZE = (jint) 0;
        jbyte Character::SPACE_SEPARATOR = (jbyte) 0;
        jbyte Character::START_PUNCTUATION = (jbyte) 0;
        jbyte Character::SURROGATE = (jbyte) 0;
        jbyte Character::TITLECASE_LETTER = (jbyte) 0;
        ::java::lang::Class *Character::TYPE = NULL;
        jbyte Character::UNASSIGNED = (jbyte) 0;
        jbyte Character::UPPERCASE_LETTER = (jbyte) 0;

        jclass Character::initializeClass()
        {
            if (!class$)
            {

                jclass cls = (jclass) env->findClass("java/lang/Character");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_87fd545a] = env->getMethodID(cls, "<init>", "(C)V");
                mids$[mid_charCount_39c7bd23] = env->getStaticMethodID(cls, "charCount", "(I)I");
                mids$[mid_charValue_54c6a173] = env->getMethodID(cls, "charValue", "()C");
                mids$[mid_codePointAt_ec6430eb] = env->getStaticMethodID(cls, "codePointAt", "([CI)I");
                mids$[mid_codePointAt_2fbf15bf] = env->getStaticMethodID(cls, "codePointAt", "(Ljava/lang/CharSequence;I)I");
                mids$[mid_codePointAt_6f0bb349] = env->getStaticMethodID(cls, "codePointAt", "([CII)I");
                mids$[mid_codePointBefore_2fbf15bf] = env->getStaticMethodID(cls, "codePointBefore", "(Ljava/lang/CharSequence;I)I");
                mids$[mid_codePointBefore_ec6430eb] = env->getStaticMethodID(cls, "codePointBefore", "([CI)I");
                mids$[mid_codePointBefore_6f0bb349] = env->getStaticMethodID(cls, "codePointBefore", "([CII)I");
                mids$[mid_codePointCount_6cc8d7fd] = env->getStaticMethodID(cls, "codePointCount", "(Ljava/lang/CharSequence;II)I");
                mids$[mid_codePointCount_6f0bb349] = env->getStaticMethodID(cls, "codePointCount", "([CII)I");
                mids$[mid_compareTo_290588f1] = env->getMethodID(cls, "compareTo", "(Ljava/lang/Object;)I");
                mids$[mid_compareTo_35927258] = env->getMethodID(cls, "compareTo", "(Ljava/lang/Character;)I");
                mids$[mid_digit_3108448f] = env->getStaticMethodID(cls, "digit", "(CI)I");
                mids$[mid_digit_d8d154b9] = env->getStaticMethodID(cls, "digit", "(II)I");
                mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
                mids$[mid_forDigit_d8d154b3] = env->getStaticMethodID(cls, "forDigit", "(II)C");
                mids$[mid_getDirectionality_87fd544e] = env->getStaticMethodID(cls, "getDirectionality", "(C)B");
                mids$[mid_getDirectionality_39c7bd28] = env->getStaticMethodID(cls, "getDirectionality", "(I)B");
                mids$[mid_getNumericValue_39c7bd23] = env->getStaticMethodID(cls, "getNumericValue", "(I)I");
                mids$[mid_getNumericValue_87fd5445] = env->getStaticMethodID(cls, "getNumericValue", "(C)I");
                mids$[mid_getType_87fd5445] = env->getStaticMethodID(cls, "getType", "(C)I");
                mids$[mid_getType_39c7bd23] = env->getStaticMethodID(cls, "getType", "(I)I");
                mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
                mids$[mid_isDefined_87fd5456] = env->getStaticMethodID(cls, "isDefined", "(C)Z");
                mids$[mid_isDefined_39c7bd30] = env->getStaticMethodID(cls, "isDefined", "(I)Z");
                mids$[mid_isDigit_39c7bd30] = env->getStaticMethodID(cls, "isDigit", "(I)Z");
                mids$[mid_isDigit_87fd5456] = env->getStaticMethodID(cls, "isDigit", "(C)Z");
                mids$[mid_isHighSurrogate_87fd5456] = env->getStaticMethodID(cls, "isHighSurrogate", "(C)Z");
                mids$[mid_isISOControl_39c7bd30] = env->getStaticMethodID(cls, "isISOControl", "(I)Z");
                mids$[mid_isISOControl_87fd5456] = env->getStaticMethodID(cls, "isISOControl", "(C)Z");
                mids$[mid_isIdentifierIgnorable_39c7bd30] = env->getStaticMethodID(cls, "isIdentifierIgnorable", "(I)Z");
                mids$[mid_isIdentifierIgnorable_87fd5456] = env->getStaticMethodID(cls, "isIdentifierIgnorable", "(C)Z");
                mids$[mid_isJavaIdentifierPart_39c7bd30] = env->getStaticMethodID(cls, "isJavaIdentifierPart", "(I)Z");
                mids$[mid_isJavaIdentifierPart_87fd5456] = env->getStaticMethodID(cls, "isJavaIdentifierPart", "(C)Z");
                mids$[mid_isJavaIdentifierStart_87fd5456] = env->getStaticMethodID(cls, "isJavaIdentifierStart", "(C)Z");
                mids$[mid_isJavaIdentifierStart_39c7bd30] = env->getStaticMethodID(cls, "isJavaIdentifierStart", "(I)Z");
                mids$[mid_isJavaLetter_87fd5456] = env->getStaticMethodID(cls, "isJavaLetter", "(C)Z");
                mids$[mid_isJavaLetterOrDigit_87fd5456] = env->getStaticMethodID(cls, "isJavaLetterOrDigit", "(C)Z");
                mids$[mid_isLetter_87fd5456] = env->getStaticMethodID(cls, "isLetter", "(C)Z");
                mids$[mid_isLetter_39c7bd30] = env->getStaticMethodID(cls, "isLetter", "(I)Z");
                mids$[mid_isLetterOrDigit_39c7bd30] = env->getStaticMethodID(cls, "isLetterOrDigit", "(I)Z");
                mids$[mid_isLetterOrDigit_87fd5456] = env->getStaticMethodID(cls, "isLetterOrDigit", "(C)Z");
                mids$[mid_isLowSurrogate_87fd5456] = env->getStaticMethodID(cls, "isLowSurrogate", "(C)Z");
                mids$[mid_isLowerCase_39c7bd30] = env->getStaticMethodID(cls, "isLowerCase", "(I)Z");
                mids$[mid_isLowerCase_87fd5456] = env->getStaticMethodID(cls, "isLowerCase", "(C)Z");
                mids$[mid_isMirrored_87fd5456] = env->getStaticMethodID(cls, "isMirrored", "(C)Z");
                mids$[mid_isMirrored_39c7bd30] = env->getStaticMethodID(cls, "isMirrored", "(I)Z");
                mids$[mid_isSpace_87fd5456] = env->getStaticMethodID(cls, "isSpace", "(C)Z");
                mids$[mid_isSpaceChar_87fd5456] = env->getStaticMethodID(cls, "isSpaceChar", "(C)Z");
                mids$[mid_isSpaceChar_39c7bd30] = env->getStaticMethodID(cls, "isSpaceChar", "(I)Z");
                mids$[mid_isSupplementaryCodePoint_39c7bd30] = env->getStaticMethodID(cls, "isSupplementaryCodePoint", "(I)Z");
                mids$[mid_isSurrogatePair_37c94822] = env->getStaticMethodID(cls, "isSurrogatePair", "(CC)Z");
                mids$[mid_isTitleCase_39c7bd30] = env->getStaticMethodID(cls, "isTitleCase", "(I)Z");
                mids$[mid_isTitleCase_87fd5456] = env->getStaticMethodID(cls, "isTitleCase", "(C)Z");
                mids$[mid_isUnicodeIdentifierPart_87fd5456] = env->getStaticMethodID(cls, "isUnicodeIdentifierPart", "(C)Z");
                mids$[mid_isUnicodeIdentifierPart_39c7bd30] = env->getStaticMethodID(cls, "isUnicodeIdentifierPart", "(I)Z");
                mids$[mid_isUnicodeIdentifierStart_39c7bd30] = env->getStaticMethodID(cls, "isUnicodeIdentifierStart", "(I)Z");
                mids$[mid_isUnicodeIdentifierStart_87fd5456] = env->getStaticMethodID(cls, "isUnicodeIdentifierStart", "(C)Z");
                mids$[mid_isUpperCase_39c7bd30] = env->getStaticMethodID(cls, "isUpperCase", "(I)Z");
                mids$[mid_isUpperCase_87fd5456] = env->getStaticMethodID(cls, "isUpperCase", "(C)Z");
                mids$[mid_isValidCodePoint_39c7bd30] = env->getStaticMethodID(cls, "isValidCodePoint", "(I)Z");
                mids$[mid_isWhitespace_39c7bd30] = env->getStaticMethodID(cls, "isWhitespace", "(I)Z");
                mids$[mid_isWhitespace_87fd5456] = env->getStaticMethodID(cls, "isWhitespace", "(C)Z");
                mids$[mid_offsetByCodePoints_6cc8d7fd] = env->getStaticMethodID(cls, "offsetByCodePoints", "(Ljava/lang/CharSequence;II)I");
                mids$[mid_offsetByCodePoints_f453ace9] = env->getStaticMethodID(cls, "offsetByCodePoints", "([CIIII)I");
                mids$[mid_reverseBytes_87fd544f] = env->getStaticMethodID(cls, "reverseBytes", "(C)C");
                mids$[mid_toChars_b4292e99] = env->getStaticMethodID(cls, "toChars", "(I)[C");
                mids$[mid_toChars_273c5d2d] = env->getStaticMethodID(cls, "toChars", "(I[CI)I");
                mids$[mid_toCodePoint_37c94831] = env->getStaticMethodID(cls, "toCodePoint", "(CC)I");
                mids$[mid_toLowerCase_39c7bd23] = env->getStaticMethodID(cls, "toLowerCase", "(I)I");
                mids$[mid_toLowerCase_87fd544f] = env->getStaticMethodID(cls, "toLowerCase", "(C)C");
                mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
                mids$[mid_toString_7611a535] = env->getStaticMethodID(cls, "toString", "(C)Ljava/lang/String;");
                mids$[mid_toTitleCase_87fd544f] = env->getStaticMethodID(cls, "toTitleCase", "(C)C");
                mids$[mid_toTitleCase_39c7bd23] = env->getStaticMethodID(cls, "toTitleCase", "(I)I");
                mids$[mid_toUpperCase_39c7bd23] = env->getStaticMethodID(cls, "toUpperCase", "(I)I");
                mids$[mid_toUpperCase_87fd544f] = env->getStaticMethodID(cls, "toUpperCase", "(C)C");
                mids$[mid_valueOf_58724da6] = env->getStaticMethodID(cls, "valueOf", "(C)Ljava/lang/Character;");

                class$ = (::java::lang::Class *) new JObject(cls);
                cls = (jclass) class$->this$;

                COMBINING_SPACING_MARK = env->getStaticByteField(cls, "COMBINING_SPACING_MARK");
                CONNECTOR_PUNCTUATION = env->getStaticByteField(cls, "CONNECTOR_PUNCTUATION");
                CONTROL = env->getStaticByteField(cls, "CONTROL");
                CURRENCY_SYMBOL = env->getStaticByteField(cls, "CURRENCY_SYMBOL");
                DASH_PUNCTUATION = env->getStaticByteField(cls, "DASH_PUNCTUATION");
                DECIMAL_DIGIT_NUMBER = env->getStaticByteField(cls, "DECIMAL_DIGIT_NUMBER");
                DIRECTIONALITY_ARABIC_NUMBER = env->getStaticByteField(cls, "DIRECTIONALITY_ARABIC_NUMBER");
                DIRECTIONALITY_BOUNDARY_NEUTRAL = env->getStaticByteField(cls, "DIRECTIONALITY_BOUNDARY_NEUTRAL");
                DIRECTIONALITY_COMMON_NUMBER_SEPARATOR = env->getStaticByteField(cls, "DIRECTIONALITY_COMMON_NUMBER_SEPARATOR");
                DIRECTIONALITY_EUROPEAN_NUMBER = env->getStaticByteField(cls, "DIRECTIONALITY_EUROPEAN_NUMBER");
                DIRECTIONALITY_EUROPEAN_NUMBER_SEPARATOR = env->getStaticByteField(cls, "DIRECTIONALITY_EUROPEAN_NUMBER_SEPARATOR");
                DIRECTIONALITY_EUROPEAN_NUMBER_TERMINATOR = env->getStaticByteField(cls, "DIRECTIONALITY_EUROPEAN_NUMBER_TERMINATOR");
                DIRECTIONALITY_LEFT_TO_RIGHT = env->getStaticByteField(cls, "DIRECTIONALITY_LEFT_TO_RIGHT");
                DIRECTIONALITY_LEFT_TO_RIGHT_EMBEDDING = env->getStaticByteField(cls, "DIRECTIONALITY_LEFT_TO_RIGHT_EMBEDDING");
                DIRECTIONALITY_LEFT_TO_RIGHT_OVERRIDE = env->getStaticByteField(cls, "DIRECTIONALITY_LEFT_TO_RIGHT_OVERRIDE");
                DIRECTIONALITY_NONSPACING_MARK = env->getStaticByteField(cls, "DIRECTIONALITY_NONSPACING_MARK");
                DIRECTIONALITY_OTHER_NEUTRALS = env->getStaticByteField(cls, "DIRECTIONALITY_OTHER_NEUTRALS");
                DIRECTIONALITY_PARAGRAPH_SEPARATOR = env->getStaticByteField(cls, "DIRECTIONALITY_PARAGRAPH_SEPARATOR");
                DIRECTIONALITY_POP_DIRECTIONAL_FORMAT = env->getStaticByteField(cls, "DIRECTIONALITY_POP_DIRECTIONAL_FORMAT");
                DIRECTIONALITY_RIGHT_TO_LEFT = env->getStaticByteField(cls, "DIRECTIONALITY_RIGHT_TO_LEFT");
                DIRECTIONALITY_RIGHT_TO_LEFT_ARABIC = env->getStaticByteField(cls, "DIRECTIONALITY_RIGHT_TO_LEFT_ARABIC");
                DIRECTIONALITY_RIGHT_TO_LEFT_EMBEDDING = env->getStaticByteField(cls, "DIRECTIONALITY_RIGHT_TO_LEFT_EMBEDDING");
                DIRECTIONALITY_RIGHT_TO_LEFT_OVERRIDE = env->getStaticByteField(cls, "DIRECTIONALITY_RIGHT_TO_LEFT_OVERRIDE");
                DIRECTIONALITY_SEGMENT_SEPARATOR = env->getStaticByteField(cls, "DIRECTIONALITY_SEGMENT_SEPARATOR");
                DIRECTIONALITY_UNDEFINED = env->getStaticByteField(cls, "DIRECTIONALITY_UNDEFINED");
                DIRECTIONALITY_WHITESPACE = env->getStaticByteField(cls, "DIRECTIONALITY_WHITESPACE");
                ENCLOSING_MARK = env->getStaticByteField(cls, "ENCLOSING_MARK");
                END_PUNCTUATION = env->getStaticByteField(cls, "END_PUNCTUATION");
                FINAL_QUOTE_PUNCTUATION = env->getStaticByteField(cls, "FINAL_QUOTE_PUNCTUATION");
                FORMAT = env->getStaticByteField(cls, "FORMAT");
                INITIAL_QUOTE_PUNCTUATION = env->getStaticByteField(cls, "INITIAL_QUOTE_PUNCTUATION");
                LETTER_NUMBER = env->getStaticByteField(cls, "LETTER_NUMBER");
                LINE_SEPARATOR = env->getStaticByteField(cls, "LINE_SEPARATOR");
                LOWERCASE_LETTER = env->getStaticByteField(cls, "LOWERCASE_LETTER");
                MATH_SYMBOL = env->getStaticByteField(cls, "MATH_SYMBOL");
                MAX_CODE_POINT = env->getStaticIntField(cls, "MAX_CODE_POINT");
                MAX_HIGH_SURROGATE = env->getStaticCharField(cls, "MAX_HIGH_SURROGATE");
                MAX_LOW_SURROGATE = env->getStaticCharField(cls, "MAX_LOW_SURROGATE");
                MAX_RADIX = env->getStaticIntField(cls, "MAX_RADIX");
                MAX_SURROGATE = env->getStaticCharField(cls, "MAX_SURROGATE");
                MAX_VALUE = env->getStaticCharField(cls, "MAX_VALUE");
                MIN_CODE_POINT = env->getStaticIntField(cls, "MIN_CODE_POINT");
                MIN_HIGH_SURROGATE = env->getStaticCharField(cls, "MIN_HIGH_SURROGATE");
                MIN_LOW_SURROGATE = env->getStaticCharField(cls, "MIN_LOW_SURROGATE");
                MIN_RADIX = env->getStaticIntField(cls, "MIN_RADIX");
                MIN_SUPPLEMENTARY_CODE_POINT = env->getStaticIntField(cls, "MIN_SUPPLEMENTARY_CODE_POINT");
                MIN_SURROGATE = env->getStaticCharField(cls, "MIN_SURROGATE");
                MIN_VALUE = env->getStaticCharField(cls, "MIN_VALUE");
                MODIFIER_LETTER = env->getStaticByteField(cls, "MODIFIER_LETTER");
                MODIFIER_SYMBOL = env->getStaticByteField(cls, "MODIFIER_SYMBOL");
                NON_SPACING_MARK = env->getStaticByteField(cls, "NON_SPACING_MARK");
                OTHER_LETTER = env->getStaticByteField(cls, "OTHER_LETTER");
                OTHER_NUMBER = env->getStaticByteField(cls, "OTHER_NUMBER");
                OTHER_PUNCTUATION = env->getStaticByteField(cls, "OTHER_PUNCTUATION");
                OTHER_SYMBOL = env->getStaticByteField(cls, "OTHER_SYMBOL");
                PARAGRAPH_SEPARATOR = env->getStaticByteField(cls, "PARAGRAPH_SEPARATOR");
                PRIVATE_USE = env->getStaticByteField(cls, "PRIVATE_USE");
                SIZE = env->getStaticIntField(cls, "SIZE");
                SPACE_SEPARATOR = env->getStaticByteField(cls, "SPACE_SEPARATOR");
                START_PUNCTUATION = env->getStaticByteField(cls, "START_PUNCTUATION");
                SURROGATE = env->getStaticByteField(cls, "SURROGATE");
                TITLECASE_LETTER = env->getStaticByteField(cls, "TITLECASE_LETTER");
                TYPE = new ::java::lang::Class(env->getStaticObjectField(cls, "TYPE", "Ljava/lang/Class;"));
                UNASSIGNED = env->getStaticByteField(cls, "UNASSIGNED");
                UPPERCASE_LETTER = env->getStaticByteField(cls, "UPPERCASE_LETTER");
            }
            return (jclass) class$->this$;
        }

        Character::Character(jchar a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_87fd545a, a0)) {}

        jint Character::charCount(jint a0)
        {
            jclass cls = initializeClass();
            return env->callStaticIntMethod(cls, mids$[mid_charCount_39c7bd23], a0);
        }

        jchar Character::charValue() const
        {
            return env->callCharMethod(this$, mids$[mid_charValue_54c6a173]);
        }

        jint Character::codePointAt(const JArray< jchar > & a0, jint a1)
        {
            jclass cls = initializeClass();
            return env->callStaticIntMethod(cls, mids$[mid_codePointAt_ec6430eb], a0.this$, a1);
        }

        jint Character::codePointAt(const ::java::lang::CharSequence & a0, jint a1)
        {
            jclass cls = initializeClass();
            return env->callStaticIntMethod(cls, mids$[mid_codePointAt_2fbf15bf], a0.this$, a1);
        }

        jint Character::codePointAt(const JArray< jchar > & a0, jint a1, jint a2)
        {
            jclass cls = initializeClass();
            return env->callStaticIntMethod(cls, mids$[mid_codePointAt_6f0bb349], a0.this$, a1, a2);
        }

        jint Character::codePointBefore(const ::java::lang::CharSequence & a0, jint a1)
        {
            jclass cls = initializeClass();
            return env->callStaticIntMethod(cls, mids$[mid_codePointBefore_2fbf15bf], a0.this$, a1);
        }

        jint Character::codePointBefore(const JArray< jchar > & a0, jint a1)
        {
            jclass cls = initializeClass();
            return env->callStaticIntMethod(cls, mids$[mid_codePointBefore_ec6430eb], a0.this$, a1);
        }

        jint Character::codePointBefore(const JArray< jchar > & a0, jint a1, jint a2)
        {
            jclass cls = initializeClass();
            return env->callStaticIntMethod(cls, mids$[mid_codePointBefore_6f0bb349], a0.this$, a1, a2);
        }

        jint Character::codePointCount(const ::java::lang::CharSequence & a0, jint a1, jint a2)
        {
            jclass cls = initializeClass();
            return env->callStaticIntMethod(cls, mids$[mid_codePointCount_6cc8d7fd], a0.this$, a1, a2);
        }

        jint Character::codePointCount(const JArray< jchar > & a0, jint a1, jint a2)
        {
            jclass cls = initializeClass();
            return env->callStaticIntMethod(cls, mids$[mid_codePointCount_6f0bb349], a0.this$, a1, a2);
        }

        jint Character::compareTo(const ::java::lang::Object & a0) const
        {
            return env->callIntMethod(this$, mids$[mid_compareTo_290588f1], a0.this$);
        }

        jint Character::compareTo(const Character & a0) const
        {
            return env->callIntMethod(this$, mids$[mid_compareTo_35927258], a0.this$);
        }

        jint Character::digit(jchar a0, jint a1)
        {
            jclass cls = initializeClass();
            return env->callStaticIntMethod(cls, mids$[mid_digit_3108448f], a0, a1);
        }

        jint Character::digit(jint a0, jint a1)
        {
            jclass cls = initializeClass();
            return env->callStaticIntMethod(cls, mids$[mid_digit_d8d154b9], a0, a1);
        }

        jboolean Character::equals(const ::java::lang::Object & a0) const
        {
            return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        jchar Character::forDigit(jint a0, jint a1)
        {
            jclass cls = initializeClass();
            return env->callStaticCharMethod(cls, mids$[mid_forDigit_d8d154b3], a0, a1);
        }

        jbyte Character::getDirectionality(jchar a0)
        {
            jclass cls = initializeClass();
            return env->callStaticByteMethod(cls, mids$[mid_getDirectionality_87fd544e], a0);
        }

        jbyte Character::getDirectionality(jint a0)
        {
            jclass cls = initializeClass();
            return env->callStaticByteMethod(cls, mids$[mid_getDirectionality_39c7bd28], a0);
        }

        jint Character::getNumericValue(jint a0)
        {
            jclass cls = initializeClass();
            return env->callStaticIntMethod(cls, mids$[mid_getNumericValue_39c7bd23], a0);
        }

        jint Character::getNumericValue(jchar a0)
        {
            jclass cls = initializeClass();
            return env->callStaticIntMethod(cls, mids$[mid_getNumericValue_87fd5445], a0);
        }

        jint Character::getType(jchar a0)
        {
            jclass cls = initializeClass();
            return env->callStaticIntMethod(cls, mids$[mid_getType_87fd5445], a0);
        }

        jint Character::getType(jint a0)
        {
            jclass cls = initializeClass();
            return env->callStaticIntMethod(cls, mids$[mid_getType_39c7bd23], a0);
        }

        jint Character::hashCode() const
        {
            return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        jboolean Character::isDefined(jchar a0)
        {
            jclass cls = initializeClass();
            return env->callStaticBooleanMethod(cls, mids$[mid_isDefined_87fd5456], a0);
        }

        jboolean Character::isDefined(jint a0)
        {
            jclass cls = initializeClass();
            return env->callStaticBooleanMethod(cls, mids$[mid_isDefined_39c7bd30], a0);
        }

        jboolean Character::isDigit(jint a0)
        {
            jclass cls = initializeClass();
            return env->callStaticBooleanMethod(cls, mids$[mid_isDigit_39c7bd30], a0);
        }

        jboolean Character::isDigit(jchar a0)
        {
            jclass cls = initializeClass();
            return env->callStaticBooleanMethod(cls, mids$[mid_isDigit_87fd5456], a0);
        }

        jboolean Character::isHighSurrogate(jchar a0)
        {
            jclass cls = initializeClass();
            return env->callStaticBooleanMethod(cls, mids$[mid_isHighSurrogate_87fd5456], a0);
        }

        jboolean Character::isISOControl(jint a0)
        {
            jclass cls = initializeClass();
            return env->callStaticBooleanMethod(cls, mids$[mid_isISOControl_39c7bd30], a0);
        }

        jboolean Character::isISOControl(jchar a0)
        {
            jclass cls = initializeClass();
            return env->callStaticBooleanMethod(cls, mids$[mid_isISOControl_87fd5456], a0);
        }

        jboolean Character::isIdentifierIgnorable(jint a0)
        {
            jclass cls = initializeClass();
            return env->callStaticBooleanMethod(cls, mids$[mid_isIdentifierIgnorable_39c7bd30], a0);
        }

        jboolean Character::isIdentifierIgnorable(jchar a0)
        {
            jclass cls = initializeClass();
            return env->callStaticBooleanMethod(cls, mids$[mid_isIdentifierIgnorable_87fd5456], a0);
        }

        jboolean Character::isJavaIdentifierPart(jint a0)
        {
            jclass cls = initializeClass();
            return env->callStaticBooleanMethod(cls, mids$[mid_isJavaIdentifierPart_39c7bd30], a0);
        }

        jboolean Character::isJavaIdentifierPart(jchar a0)
        {
            jclass cls = initializeClass();
            return env->callStaticBooleanMethod(cls, mids$[mid_isJavaIdentifierPart_87fd5456], a0);
        }

        jboolean Character::isJavaIdentifierStart(jchar a0)
        {
            jclass cls = initializeClass();
            return env->callStaticBooleanMethod(cls, mids$[mid_isJavaIdentifierStart_87fd5456], a0);
        }

        jboolean Character::isJavaIdentifierStart(jint a0)
        {
            jclass cls = initializeClass();
            return env->callStaticBooleanMethod(cls, mids$[mid_isJavaIdentifierStart_39c7bd30], a0);
        }

        jboolean Character::isJavaLetter(jchar a0)
        {
            jclass cls = initializeClass();
            return env->callStaticBooleanMethod(cls, mids$[mid_isJavaLetter_87fd5456], a0);
        }

        jboolean Character::isJavaLetterOrDigit(jchar a0)
        {
            jclass cls = initializeClass();
            return env->callStaticBooleanMethod(cls, mids$[mid_isJavaLetterOrDigit_87fd5456], a0);
        }

        jboolean Character::isLetter(jchar a0)
        {
            jclass cls = initializeClass();
            return env->callStaticBooleanMethod(cls, mids$[mid_isLetter_87fd5456], a0);
        }

        jboolean Character::isLetter(jint a0)
        {
            jclass cls = initializeClass();
            return env->callStaticBooleanMethod(cls, mids$[mid_isLetter_39c7bd30], a0);
        }

        jboolean Character::isLetterOrDigit(jint a0)
        {
            jclass cls = initializeClass();
            return env->callStaticBooleanMethod(cls, mids$[mid_isLetterOrDigit_39c7bd30], a0);
        }

        jboolean Character::isLetterOrDigit(jchar a0)
        {
            jclass cls = initializeClass();
            return env->callStaticBooleanMethod(cls, mids$[mid_isLetterOrDigit_87fd5456], a0);
        }

        jboolean Character::isLowSurrogate(jchar a0)
        {
            jclass cls = initializeClass();
            return env->callStaticBooleanMethod(cls, mids$[mid_isLowSurrogate_87fd5456], a0);
        }

        jboolean Character::isLowerCase(jint a0)
        {
            jclass cls = initializeClass();
            return env->callStaticBooleanMethod(cls, mids$[mid_isLowerCase_39c7bd30], a0);
        }

        jboolean Character::isLowerCase(jchar a0)
        {
            jclass cls = initializeClass();
            return env->callStaticBooleanMethod(cls, mids$[mid_isLowerCase_87fd5456], a0);
        }

        jboolean Character::isMirrored(jchar a0)
        {
            jclass cls = initializeClass();
            return env->callStaticBooleanMethod(cls, mids$[mid_isMirrored_87fd5456], a0);
        }

        jboolean Character::isMirrored(jint a0)
        {
            jclass cls = initializeClass();
            return env->callStaticBooleanMethod(cls, mids$[mid_isMirrored_39c7bd30], a0);
        }

        jboolean Character::isSpace(jchar a0)
        {
            jclass cls = initializeClass();
            return env->callStaticBooleanMethod(cls, mids$[mid_isSpace_87fd5456], a0);
        }

        jboolean Character::isSpaceChar(jchar a0)
        {
            jclass cls = initializeClass();
            return env->callStaticBooleanMethod(cls, mids$[mid_isSpaceChar_87fd5456], a0);
        }

        jboolean Character::isSpaceChar(jint a0)
        {
            jclass cls = initializeClass();
            return env->callStaticBooleanMethod(cls, mids$[mid_isSpaceChar_39c7bd30], a0);
        }

        jboolean Character::isSupplementaryCodePoint(jint a0)
        {
            jclass cls = initializeClass();
            return env->callStaticBooleanMethod(cls, mids$[mid_isSupplementaryCodePoint_39c7bd30], a0);
        }

        jboolean Character::isSurrogatePair(jchar a0, jchar a1)
        {
            jclass cls = initializeClass();
            return env->callStaticBooleanMethod(cls, mids$[mid_isSurrogatePair_37c94822], a0, a1);
        }

        jboolean Character::isTitleCase(jint a0)
        {
            jclass cls = initializeClass();
            return env->callStaticBooleanMethod(cls, mids$[mid_isTitleCase_39c7bd30], a0);
        }

        jboolean Character::isTitleCase(jchar a0)
        {
            jclass cls = initializeClass();
            return env->callStaticBooleanMethod(cls, mids$[mid_isTitleCase_87fd5456], a0);
        }

        jboolean Character::isUnicodeIdentifierPart(jchar a0)
        {
            jclass cls = initializeClass();
            return env->callStaticBooleanMethod(cls, mids$[mid_isUnicodeIdentifierPart_87fd5456], a0);
        }

        jboolean Character::isUnicodeIdentifierPart(jint a0)
        {
            jclass cls = initializeClass();
            return env->callStaticBooleanMethod(cls, mids$[mid_isUnicodeIdentifierPart_39c7bd30], a0);
        }

        jboolean Character::isUnicodeIdentifierStart(jint a0)
        {
            jclass cls = initializeClass();
            return env->callStaticBooleanMethod(cls, mids$[mid_isUnicodeIdentifierStart_39c7bd30], a0);
        }

        jboolean Character::isUnicodeIdentifierStart(jchar a0)
        {
            jclass cls = initializeClass();
            return env->callStaticBooleanMethod(cls, mids$[mid_isUnicodeIdentifierStart_87fd5456], a0);
        }

        jboolean Character::isUpperCase(jint a0)
        {
            jclass cls = initializeClass();
            return env->callStaticBooleanMethod(cls, mids$[mid_isUpperCase_39c7bd30], a0);
        }

        jboolean Character::isUpperCase(jchar a0)
        {
            jclass cls = initializeClass();
            return env->callStaticBooleanMethod(cls, mids$[mid_isUpperCase_87fd5456], a0);
        }

        jboolean Character::isValidCodePoint(jint a0)
        {
            jclass cls = initializeClass();
            return env->callStaticBooleanMethod(cls, mids$[mid_isValidCodePoint_39c7bd30], a0);
        }

        jboolean Character::isWhitespace(jint a0)
        {
            jclass cls = initializeClass();
            return env->callStaticBooleanMethod(cls, mids$[mid_isWhitespace_39c7bd30], a0);
        }

        jboolean Character::isWhitespace(jchar a0)
        {
            jclass cls = initializeClass();
            return env->callStaticBooleanMethod(cls, mids$[mid_isWhitespace_87fd5456], a0);
        }

        jint Character::offsetByCodePoints(const ::java::lang::CharSequence & a0, jint a1, jint a2)
        {
            jclass cls = initializeClass();
            return env->callStaticIntMethod(cls, mids$[mid_offsetByCodePoints_6cc8d7fd], a0.this$, a1, a2);
        }

        jint Character::offsetByCodePoints(const JArray< jchar > & a0, jint a1, jint a2, jint a3, jint a4)
        {
            jclass cls = initializeClass();
            return env->callStaticIntMethod(cls, mids$[mid_offsetByCodePoints_f453ace9], a0.this$, a1, a2, a3, a4);
        }

        jchar Character::reverseBytes(jchar a0)
        {
            jclass cls = initializeClass();
            return env->callStaticCharMethod(cls, mids$[mid_reverseBytes_87fd544f], a0);
        }

        JArray< jchar > Character::toChars(jint a0)
        {
            jclass cls = initializeClass();
            return JArray< jchar >(env->callStaticObjectMethod(cls, mids$[mid_toChars_b4292e99], a0));
        }

        jint Character::toChars(jint a0, const JArray< jchar > & a1, jint a2)
        {
            jclass cls = initializeClass();
            return env->callStaticIntMethod(cls, mids$[mid_toChars_273c5d2d], a0, a1.this$, a2);
        }

        jint Character::toCodePoint(jchar a0, jchar a1)
        {
            jclass cls = initializeClass();
            return env->callStaticIntMethod(cls, mids$[mid_toCodePoint_37c94831], a0, a1);
        }

        jint Character::toLowerCase(jint a0)
        {
            jclass cls = initializeClass();
            return env->callStaticIntMethod(cls, mids$[mid_toLowerCase_39c7bd23], a0);
        }

        jchar Character::toLowerCase(jchar a0)
        {
            jclass cls = initializeClass();
            return env->callStaticCharMethod(cls, mids$[mid_toLowerCase_87fd544f], a0);
        }

        ::java::lang::String Character::toString() const
        {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }

        ::java::lang::String Character::toString(jchar a0)
        {
            jclass cls = initializeClass();
            return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_toString_7611a535], a0));
        }

        jchar Character::toTitleCase(jchar a0)
        {
            jclass cls = initializeClass();
            return env->callStaticCharMethod(cls, mids$[mid_toTitleCase_87fd544f], a0);
        }

        jint Character::toTitleCase(jint a0)
        {
            jclass cls = initializeClass();
            return env->callStaticIntMethod(cls, mids$[mid_toTitleCase_39c7bd23], a0);
        }

        jint Character::toUpperCase(jint a0)
        {
            jclass cls = initializeClass();
            return env->callStaticIntMethod(cls, mids$[mid_toUpperCase_39c7bd23], a0);
        }

        jchar Character::toUpperCase(jchar a0)
        {
            jclass cls = initializeClass();
            return env->callStaticCharMethod(cls, mids$[mid_toUpperCase_87fd544f], a0);
        }

        Character Character::valueOf(jchar a0)
        {
            jclass cls = initializeClass();
            return Character(env->callStaticObjectMethod(cls, mids$[mid_valueOf_58724da6], a0));
        }
    }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
    namespace lang {
        static PyObject *t_Character_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Character_instance_(PyTypeObject *type, PyObject *arg);
        static int t_Character_init_(t_Character *self, PyObject *args, PyObject *kwds);
        static PyObject *t_Character_charCount(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Character_charValue(t_Character *self);
        static PyObject *t_Character_codePointAt(PyTypeObject *type, PyObject *args);
        static PyObject *t_Character_codePointBefore(PyTypeObject *type, PyObject *args);
        static PyObject *t_Character_codePointCount(PyTypeObject *type, PyObject *args);
        static PyObject *t_Character_compareTo(t_Character *self, PyObject *args);
        static PyObject *t_Character_digit(PyTypeObject *type, PyObject *args);
        static PyObject *t_Character_equals(t_Character *self, PyObject *args);
        static PyObject *t_Character_forDigit(PyTypeObject *type, PyObject *args);
        static PyObject *t_Character_getDirectionality(PyTypeObject *type, PyObject *args);
        static PyObject *t_Character_getNumericValue(PyTypeObject *type, PyObject *args);
        static PyObject *t_Character_getType(PyTypeObject *type, PyObject *args);
        static PyObject *t_Character_hashCode(t_Character *self, PyObject *args);
        static PyObject *t_Character_isDefined(PyTypeObject *type, PyObject *args);
        static PyObject *t_Character_isDigit(PyTypeObject *type, PyObject *args);
        static PyObject *t_Character_isHighSurrogate(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Character_isISOControl(PyTypeObject *type, PyObject *args);
        static PyObject *t_Character_isIdentifierIgnorable(PyTypeObject *type, PyObject *args);
        static PyObject *t_Character_isJavaIdentifierPart(PyTypeObject *type, PyObject *args);
        static PyObject *t_Character_isJavaIdentifierStart(PyTypeObject *type, PyObject *args);
        static PyObject *t_Character_isJavaLetter(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Character_isJavaLetterOrDigit(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Character_isLetter(PyTypeObject *type, PyObject *args);
        static PyObject *t_Character_isLetterOrDigit(PyTypeObject *type, PyObject *args);
        static PyObject *t_Character_isLowSurrogate(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Character_isLowerCase(PyTypeObject *type, PyObject *args);
        static PyObject *t_Character_isMirrored(PyTypeObject *type, PyObject *args);
        static PyObject *t_Character_isSpace(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Character_isSpaceChar(PyTypeObject *type, PyObject *args);
        static PyObject *t_Character_isSupplementaryCodePoint(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Character_isSurrogatePair(PyTypeObject *type, PyObject *args);
        static PyObject *t_Character_isTitleCase(PyTypeObject *type, PyObject *args);
        static PyObject *t_Character_isUnicodeIdentifierPart(PyTypeObject *type, PyObject *args);
        static PyObject *t_Character_isUnicodeIdentifierStart(PyTypeObject *type, PyObject *args);
        static PyObject *t_Character_isUpperCase(PyTypeObject *type, PyObject *args);
        static PyObject *t_Character_isValidCodePoint(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Character_isWhitespace(PyTypeObject *type, PyObject *args);
        static PyObject *t_Character_offsetByCodePoints(PyTypeObject *type, PyObject *args);
        static PyObject *t_Character_reverseBytes(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Character_toChars(PyTypeObject *type, PyObject *args);
        static PyObject *t_Character_toCodePoint(PyTypeObject *type, PyObject *args);
        static PyObject *t_Character_toLowerCase(PyTypeObject *type, PyObject *args);
        static PyObject *t_Character_toString(t_Character *self, PyObject *args);
        static PyObject *t_Character_toString_(PyTypeObject *type, PyObject *args);
        static PyObject *t_Character_toTitleCase(PyTypeObject *type, PyObject *args);
        static PyObject *t_Character_toUpperCase(PyTypeObject *type, PyObject *args);
        static PyObject *t_Character_valueOf(PyTypeObject *type, PyObject *arg);

        static PyMethodDef t_Character__methods_[] = {
            DECLARE_METHOD(t_Character, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Character, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Character, charCount, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Character, charValue, METH_NOARGS),
            DECLARE_METHOD(t_Character, codePointAt, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_Character, codePointBefore, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_Character, codePointCount, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_Character, compareTo, METH_VARARGS),
            DECLARE_METHOD(t_Character, digit, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_Character, equals, METH_VARARGS),
            DECLARE_METHOD(t_Character, forDigit, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_Character, getDirectionality, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_Character, getNumericValue, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_Character, getType, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_Character, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_Character, isDefined, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_Character, isDigit, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_Character, isHighSurrogate, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Character, isISOControl, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_Character, isIdentifierIgnorable, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_Character, isJavaIdentifierPart, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_Character, isJavaIdentifierStart, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_Character, isJavaLetter, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Character, isJavaLetterOrDigit, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Character, isLetter, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_Character, isLetterOrDigit, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_Character, isLowSurrogate, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Character, isLowerCase, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_Character, isMirrored, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_Character, isSpace, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Character, isSpaceChar, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_Character, isSupplementaryCodePoint, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Character, isSurrogatePair, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_Character, isTitleCase, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_Character, isUnicodeIdentifierPart, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_Character, isUnicodeIdentifierStart, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_Character, isUpperCase, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_Character, isValidCodePoint, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Character, isWhitespace, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_Character, offsetByCodePoints, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_Character, reverseBytes, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Character, toChars, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_Character, toCodePoint, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_Character, toLowerCase, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_Character, toString, METH_VARARGS),
            DECLARE_METHOD(t_Character, toString_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Character, toTitleCase, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_Character, toUpperCase, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_Character, valueOf, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(Character, t_Character, ::java::lang::Object, Character, t_Character_init_, 0, 0, 0, 0, 0);

        void t_Character::install(PyObject *module)
        {
            installType(&PY_TYPE(Character), module, "Character", 0);
        }

        void t_Character::initialize(PyObject *module)
        {
            PyDict_SetItemString(PY_TYPE(Character).tp_dict, "class_", make_descriptor(Character::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Character).tp_dict, "wrapfn_", make_descriptor(unboxCharacter));
            PyDict_SetItemString(PY_TYPE(Character).tp_dict, "boxfn_", make_descriptor(boxCharacter));
            Character::initializeClass();
            PyDict_SetItemString(PY_TYPE(Character).tp_dict, "COMBINING_SPACING_MARK", make_descriptor(Character::COMBINING_SPACING_MARK));
            PyDict_SetItemString(PY_TYPE(Character).tp_dict, "CONNECTOR_PUNCTUATION", make_descriptor(Character::CONNECTOR_PUNCTUATION));
            PyDict_SetItemString(PY_TYPE(Character).tp_dict, "CONTROL", make_descriptor(Character::CONTROL));
            PyDict_SetItemString(PY_TYPE(Character).tp_dict, "CURRENCY_SYMBOL", make_descriptor(Character::CURRENCY_SYMBOL));
            PyDict_SetItemString(PY_TYPE(Character).tp_dict, "DASH_PUNCTUATION", make_descriptor(Character::DASH_PUNCTUATION));
            PyDict_SetItemString(PY_TYPE(Character).tp_dict, "DECIMAL_DIGIT_NUMBER", make_descriptor(Character::DECIMAL_DIGIT_NUMBER));
            PyDict_SetItemString(PY_TYPE(Character).tp_dict, "DIRECTIONALITY_ARABIC_NUMBER", make_descriptor(Character::DIRECTIONALITY_ARABIC_NUMBER));
            PyDict_SetItemString(PY_TYPE(Character).tp_dict, "DIRECTIONALITY_BOUNDARY_NEUTRAL", make_descriptor(Character::DIRECTIONALITY_BOUNDARY_NEUTRAL));
            PyDict_SetItemString(PY_TYPE(Character).tp_dict, "DIRECTIONALITY_COMMON_NUMBER_SEPARATOR", make_descriptor(Character::DIRECTIONALITY_COMMON_NUMBER_SEPARATOR));
            PyDict_SetItemString(PY_TYPE(Character).tp_dict, "DIRECTIONALITY_EUROPEAN_NUMBER", make_descriptor(Character::DIRECTIONALITY_EUROPEAN_NUMBER));
            PyDict_SetItemString(PY_TYPE(Character).tp_dict, "DIRECTIONALITY_EUROPEAN_NUMBER_SEPARATOR", make_descriptor(Character::DIRECTIONALITY_EUROPEAN_NUMBER_SEPARATOR));
            PyDict_SetItemString(PY_TYPE(Character).tp_dict, "DIRECTIONALITY_EUROPEAN_NUMBER_TERMINATOR", make_descriptor(Character::DIRECTIONALITY_EUROPEAN_NUMBER_TERMINATOR));
            PyDict_SetItemString(PY_TYPE(Character).tp_dict, "DIRECTIONALITY_LEFT_TO_RIGHT", make_descriptor(Character::DIRECTIONALITY_LEFT_TO_RIGHT));
            PyDict_SetItemString(PY_TYPE(Character).tp_dict, "DIRECTIONALITY_LEFT_TO_RIGHT_EMBEDDING", make_descriptor(Character::DIRECTIONALITY_LEFT_TO_RIGHT_EMBEDDING));
            PyDict_SetItemString(PY_TYPE(Character).tp_dict, "DIRECTIONALITY_LEFT_TO_RIGHT_OVERRIDE", make_descriptor(Character::DIRECTIONALITY_LEFT_TO_RIGHT_OVERRIDE));
            PyDict_SetItemString(PY_TYPE(Character).tp_dict, "DIRECTIONALITY_NONSPACING_MARK", make_descriptor(Character::DIRECTIONALITY_NONSPACING_MARK));
            PyDict_SetItemString(PY_TYPE(Character).tp_dict, "DIRECTIONALITY_OTHER_NEUTRALS", make_descriptor(Character::DIRECTIONALITY_OTHER_NEUTRALS));
            PyDict_SetItemString(PY_TYPE(Character).tp_dict, "DIRECTIONALITY_PARAGRAPH_SEPARATOR", make_descriptor(Character::DIRECTIONALITY_PARAGRAPH_SEPARATOR));
            PyDict_SetItemString(PY_TYPE(Character).tp_dict, "DIRECTIONALITY_POP_DIRECTIONAL_FORMAT", make_descriptor(Character::DIRECTIONALITY_POP_DIRECTIONAL_FORMAT));
            PyDict_SetItemString(PY_TYPE(Character).tp_dict, "DIRECTIONALITY_RIGHT_TO_LEFT", make_descriptor(Character::DIRECTIONALITY_RIGHT_TO_LEFT));
            PyDict_SetItemString(PY_TYPE(Character).tp_dict, "DIRECTIONALITY_RIGHT_TO_LEFT_ARABIC", make_descriptor(Character::DIRECTIONALITY_RIGHT_TO_LEFT_ARABIC));
            PyDict_SetItemString(PY_TYPE(Character).tp_dict, "DIRECTIONALITY_RIGHT_TO_LEFT_EMBEDDING", make_descriptor(Character::DIRECTIONALITY_RIGHT_TO_LEFT_EMBEDDING));
            PyDict_SetItemString(PY_TYPE(Character).tp_dict, "DIRECTIONALITY_RIGHT_TO_LEFT_OVERRIDE", make_descriptor(Character::DIRECTIONALITY_RIGHT_TO_LEFT_OVERRIDE));
            PyDict_SetItemString(PY_TYPE(Character).tp_dict, "DIRECTIONALITY_SEGMENT_SEPARATOR", make_descriptor(Character::DIRECTIONALITY_SEGMENT_SEPARATOR));
            PyDict_SetItemString(PY_TYPE(Character).tp_dict, "DIRECTIONALITY_UNDEFINED", make_descriptor(Character::DIRECTIONALITY_UNDEFINED));
            PyDict_SetItemString(PY_TYPE(Character).tp_dict, "DIRECTIONALITY_WHITESPACE", make_descriptor(Character::DIRECTIONALITY_WHITESPACE));
            PyDict_SetItemString(PY_TYPE(Character).tp_dict, "ENCLOSING_MARK", make_descriptor(Character::ENCLOSING_MARK));
            PyDict_SetItemString(PY_TYPE(Character).tp_dict, "END_PUNCTUATION", make_descriptor(Character::END_PUNCTUATION));
            PyDict_SetItemString(PY_TYPE(Character).tp_dict, "FINAL_QUOTE_PUNCTUATION", make_descriptor(Character::FINAL_QUOTE_PUNCTUATION));
            PyDict_SetItemString(PY_TYPE(Character).tp_dict, "FORMAT", make_descriptor(Character::FORMAT));
            PyDict_SetItemString(PY_TYPE(Character).tp_dict, "INITIAL_QUOTE_PUNCTUATION", make_descriptor(Character::INITIAL_QUOTE_PUNCTUATION));
            PyDict_SetItemString(PY_TYPE(Character).tp_dict, "LETTER_NUMBER", make_descriptor(Character::LETTER_NUMBER));
            PyDict_SetItemString(PY_TYPE(Character).tp_dict, "LINE_SEPARATOR", make_descriptor(Character::LINE_SEPARATOR));
            PyDict_SetItemString(PY_TYPE(Character).tp_dict, "LOWERCASE_LETTER", make_descriptor(Character::LOWERCASE_LETTER));
            PyDict_SetItemString(PY_TYPE(Character).tp_dict, "MATH_SYMBOL", make_descriptor(Character::MATH_SYMBOL));
            PyDict_SetItemString(PY_TYPE(Character).tp_dict, "MAX_CODE_POINT", make_descriptor(Character::MAX_CODE_POINT));
            PyDict_SetItemString(PY_TYPE(Character).tp_dict, "MAX_HIGH_SURROGATE", make_descriptor(Character::MAX_HIGH_SURROGATE));
            PyDict_SetItemString(PY_TYPE(Character).tp_dict, "MAX_LOW_SURROGATE", make_descriptor(Character::MAX_LOW_SURROGATE));
            PyDict_SetItemString(PY_TYPE(Character).tp_dict, "MAX_RADIX", make_descriptor(Character::MAX_RADIX));
            PyDict_SetItemString(PY_TYPE(Character).tp_dict, "MAX_SURROGATE", make_descriptor(Character::MAX_SURROGATE));
            PyDict_SetItemString(PY_TYPE(Character).tp_dict, "MAX_VALUE", make_descriptor(Character::MAX_VALUE));
            PyDict_SetItemString(PY_TYPE(Character).tp_dict, "MIN_CODE_POINT", make_descriptor(Character::MIN_CODE_POINT));
            PyDict_SetItemString(PY_TYPE(Character).tp_dict, "MIN_HIGH_SURROGATE", make_descriptor(Character::MIN_HIGH_SURROGATE));
            PyDict_SetItemString(PY_TYPE(Character).tp_dict, "MIN_LOW_SURROGATE", make_descriptor(Character::MIN_LOW_SURROGATE));
            PyDict_SetItemString(PY_TYPE(Character).tp_dict, "MIN_RADIX", make_descriptor(Character::MIN_RADIX));
            PyDict_SetItemString(PY_TYPE(Character).tp_dict, "MIN_SUPPLEMENTARY_CODE_POINT", make_descriptor(Character::MIN_SUPPLEMENTARY_CODE_POINT));
            PyDict_SetItemString(PY_TYPE(Character).tp_dict, "MIN_SURROGATE", make_descriptor(Character::MIN_SURROGATE));
            PyDict_SetItemString(PY_TYPE(Character).tp_dict, "MIN_VALUE", make_descriptor(Character::MIN_VALUE));
            PyDict_SetItemString(PY_TYPE(Character).tp_dict, "MODIFIER_LETTER", make_descriptor(Character::MODIFIER_LETTER));
            PyDict_SetItemString(PY_TYPE(Character).tp_dict, "MODIFIER_SYMBOL", make_descriptor(Character::MODIFIER_SYMBOL));
            PyDict_SetItemString(PY_TYPE(Character).tp_dict, "NON_SPACING_MARK", make_descriptor(Character::NON_SPACING_MARK));
            PyDict_SetItemString(PY_TYPE(Character).tp_dict, "OTHER_LETTER", make_descriptor(Character::OTHER_LETTER));
            PyDict_SetItemString(PY_TYPE(Character).tp_dict, "OTHER_NUMBER", make_descriptor(Character::OTHER_NUMBER));
            PyDict_SetItemString(PY_TYPE(Character).tp_dict, "OTHER_PUNCTUATION", make_descriptor(Character::OTHER_PUNCTUATION));
            PyDict_SetItemString(PY_TYPE(Character).tp_dict, "OTHER_SYMBOL", make_descriptor(Character::OTHER_SYMBOL));
            PyDict_SetItemString(PY_TYPE(Character).tp_dict, "PARAGRAPH_SEPARATOR", make_descriptor(Character::PARAGRAPH_SEPARATOR));
            PyDict_SetItemString(PY_TYPE(Character).tp_dict, "PRIVATE_USE", make_descriptor(Character::PRIVATE_USE));
            PyDict_SetItemString(PY_TYPE(Character).tp_dict, "SIZE", make_descriptor(Character::SIZE));
            PyDict_SetItemString(PY_TYPE(Character).tp_dict, "SPACE_SEPARATOR", make_descriptor(Character::SPACE_SEPARATOR));
            PyDict_SetItemString(PY_TYPE(Character).tp_dict, "START_PUNCTUATION", make_descriptor(Character::START_PUNCTUATION));
            PyDict_SetItemString(PY_TYPE(Character).tp_dict, "SURROGATE", make_descriptor(Character::SURROGATE));
            PyDict_SetItemString(PY_TYPE(Character).tp_dict, "TITLECASE_LETTER", make_descriptor(Character::TITLECASE_LETTER));
            PyDict_SetItemString(PY_TYPE(Character).tp_dict, "TYPE", make_descriptor(::java::lang::t_Class::wrap_Object(*Character::TYPE)));
            PyDict_SetItemString(PY_TYPE(Character).tp_dict, "UNASSIGNED", make_descriptor(Character::UNASSIGNED));
            PyDict_SetItemString(PY_TYPE(Character).tp_dict, "UPPERCASE_LETTER", make_descriptor(Character::UPPERCASE_LETTER));
        }

        static PyObject *t_Character_cast_(PyTypeObject *type, PyObject *arg)
        {
            if (!(arg = castCheck(arg, Character::initializeClass, 1)))
                return NULL;
            return t_Character::wrap_Object(Character(((t_Character *) arg)->object.this$));
        }
        static PyObject *t_Character_instance_(PyTypeObject *type, PyObject *arg)
        {
            if (!castCheck(arg, Character::initializeClass, 0))
                Py_RETURN_FALSE;
            Py_RETURN_TRUE;
        }

        static int t_Character_init_(t_Character *self, PyObject *args, PyObject *kwds)
        {
            jchar a0;
            Character object((jobject) NULL);

            if (!parseArgs(args, "C", &a0))
            {
                INT_CALL(object = Character(a0));
                self->object = object;
            }
            else
            {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
            }

            return 0;
        }

        static PyObject *t_Character_charCount(PyTypeObject *type, PyObject *arg)
        {
            jint a0;
            jint result;

            if (!parseArg(arg, "I", &a0))
            {
                OBJ_CALL(result = ::java::lang::Character::charCount(a0));
                return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError(type, "charCount", arg);
            return NULL;
        }

        static PyObject *t_Character_charValue(t_Character *self)
        {
            jchar result;
            OBJ_CALL(result = self->object.charValue());
            return PyUnicode_FromUnicode((Py_UNICODE *) &result, 1);
        }

        static PyObject *t_Character_codePointAt(PyTypeObject *type, PyObject *args)
        {
            switch (PyTuple_GET_SIZE(args)) {
              case 2:
                {
                    JArray< jchar > a0((jobject) NULL);
                    jint a1;
                    jint result;

                    if (!parseArgs(args, "[CI", &a0, &a1))
                    {
                        OBJ_CALL(result = ::java::lang::Character::codePointAt(a0, a1));
                        return PyInt_FromLong((long) result);
                    }
                }
                {
                    ::java::lang::CharSequence a0((jobject) NULL);
                    jint a1;
                    jint result;

                    if (!parseArgs(args, "OI", &::java::lang::PY_TYPE(CharSequence), &a0, &a1))
                    {
                        OBJ_CALL(result = ::java::lang::Character::codePointAt(a0, a1));
                        return PyInt_FromLong((long) result);
                    }
                }
                break;
              case 3:
                {
                    JArray< jchar > a0((jobject) NULL);
                    jint a1;
                    jint a2;
                    jint result;

                    if (!parseArgs(args, "[CII", &a0, &a1, &a2))
                    {
                        OBJ_CALL(result = ::java::lang::Character::codePointAt(a0, a1, a2));
                        return PyInt_FromLong((long) result);
                    }
                }
            }

            PyErr_SetArgsError(type, "codePointAt", args);
            return NULL;
        }

        static PyObject *t_Character_codePointBefore(PyTypeObject *type, PyObject *args)
        {
            switch (PyTuple_GET_SIZE(args)) {
              case 2:
                {
                    ::java::lang::CharSequence a0((jobject) NULL);
                    jint a1;
                    jint result;

                    if (!parseArgs(args, "OI", &::java::lang::PY_TYPE(CharSequence), &a0, &a1))
                    {
                        OBJ_CALL(result = ::java::lang::Character::codePointBefore(a0, a1));
                        return PyInt_FromLong((long) result);
                    }
                }
                {
                    JArray< jchar > a0((jobject) NULL);
                    jint a1;
                    jint result;

                    if (!parseArgs(args, "[CI", &a0, &a1))
                    {
                        OBJ_CALL(result = ::java::lang::Character::codePointBefore(a0, a1));
                        return PyInt_FromLong((long) result);
                    }
                }
                break;
              case 3:
                {
                    JArray< jchar > a0((jobject) NULL);
                    jint a1;
                    jint a2;
                    jint result;

                    if (!parseArgs(args, "[CII", &a0, &a1, &a2))
                    {
                        OBJ_CALL(result = ::java::lang::Character::codePointBefore(a0, a1, a2));
                        return PyInt_FromLong((long) result);
                    }
                }
            }

            PyErr_SetArgsError(type, "codePointBefore", args);
            return NULL;
        }

        static PyObject *t_Character_codePointCount(PyTypeObject *type, PyObject *args)
        {
            switch (PyTuple_GET_SIZE(args)) {
              case 3:
                {
                    ::java::lang::CharSequence a0((jobject) NULL);
                    jint a1;
                    jint a2;
                    jint result;

                    if (!parseArgs(args, "OII", &::java::lang::PY_TYPE(CharSequence), &a0, &a1, &a2))
                    {
                        OBJ_CALL(result = ::java::lang::Character::codePointCount(a0, a1, a2));
                        return PyInt_FromLong((long) result);
                    }
                }
                {
                    JArray< jchar > a0((jobject) NULL);
                    jint a1;
                    jint a2;
                    jint result;

                    if (!parseArgs(args, "[CII", &a0, &a1, &a2))
                    {
                        OBJ_CALL(result = ::java::lang::Character::codePointCount(a0, a1, a2));
                        return PyInt_FromLong((long) result);
                    }
                }
            }

            PyErr_SetArgsError(type, "codePointCount", args);
            return NULL;
        }

        static PyObject *t_Character_compareTo(t_Character *self, PyObject *args)
        {
            switch (PyTuple_GET_SIZE(args)) {
              case 1:
                {
                    ::java::lang::Object a0((jobject) NULL);
                    jint result;

                    if (!parseArgs(args, "o", &a0))
                    {
                        OBJ_CALL(result = self->object.compareTo(a0));
                        return PyInt_FromLong((long) result);
                    }
                }
                {
                    Character a0((jobject) NULL);
                    jint result;

                    if (!parseArgs(args, "O", &::java::lang::PY_TYPE(Character), &a0))
                    {
                        OBJ_CALL(result = self->object.compareTo(a0));
                        return PyInt_FromLong((long) result);
                    }
                }
            }

            PyErr_SetArgsError((PyObject *) self, "compareTo", args);
            return NULL;
        }

        static PyObject *t_Character_digit(PyTypeObject *type, PyObject *args)
        {
            switch (PyTuple_GET_SIZE(args)) {
              case 2:
                {
                    jchar a0;
                    jint a1;
                    jint result;

                    if (!parseArgs(args, "CI", &a0, &a1))
                    {
                        OBJ_CALL(result = ::java::lang::Character::digit(a0, a1));
                        return PyInt_FromLong((long) result);
                    }
                }
                {
                    jint a0;
                    jint a1;
                    jint result;

                    if (!parseArgs(args, "II", &a0, &a1))
                    {
                        OBJ_CALL(result = ::java::lang::Character::digit(a0, a1));
                        return PyInt_FromLong((long) result);
                    }
                }
            }

            PyErr_SetArgsError(type, "digit", args);
            return NULL;
        }

        static PyObject *t_Character_equals(t_Character *self, PyObject *args)
        {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
                OBJ_CALL(result = self->object.equals(a0));
                Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(Character), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_Character_forDigit(PyTypeObject *type, PyObject *args)
        {
            jint a0;
            jint a1;
            jchar result;

            if (!parseArgs(args, "II", &a0, &a1))
            {
                OBJ_CALL(result = ::java::lang::Character::forDigit(a0, a1));
                return PyUnicode_FromUnicode((Py_UNICODE *) &result, 1);
            }

            PyErr_SetArgsError(type, "forDigit", args);
            return NULL;
        }

        static PyObject *t_Character_getDirectionality(PyTypeObject *type, PyObject *args)
        {
            switch (PyTuple_GET_SIZE(args)) {
              case 1:
                {
                    jchar a0;
                    jbyte result;

                    if (!parseArgs(args, "C", &a0))
                    {
                        OBJ_CALL(result = ::java::lang::Character::getDirectionality(a0));
                        return PyInt_FromLong((long) result);
                    }
                }
                {
                    jint a0;
                    jbyte result;

                    if (!parseArgs(args, "I", &a0))
                    {
                        OBJ_CALL(result = ::java::lang::Character::getDirectionality(a0));
                        return PyInt_FromLong((long) result);
                    }
                }
            }

            PyErr_SetArgsError(type, "getDirectionality", args);
            return NULL;
        }

        static PyObject *t_Character_getNumericValue(PyTypeObject *type, PyObject *args)
        {
            switch (PyTuple_GET_SIZE(args)) {
              case 1:
                {
                    jint a0;
                    jint result;

                    if (!parseArgs(args, "I", &a0))
                    {
                        OBJ_CALL(result = ::java::lang::Character::getNumericValue(a0));
                        return PyInt_FromLong((long) result);
                    }
                }
                {
                    jchar a0;
                    jint result;

                    if (!parseArgs(args, "C", &a0))
                    {
                        OBJ_CALL(result = ::java::lang::Character::getNumericValue(a0));
                        return PyInt_FromLong((long) result);
                    }
                }
            }

            PyErr_SetArgsError(type, "getNumericValue", args);
            return NULL;
        }

        static PyObject *t_Character_getType(PyTypeObject *type, PyObject *args)
        {
            switch (PyTuple_GET_SIZE(args)) {
              case 1:
                {
                    jchar a0;
                    jint result;

                    if (!parseArgs(args, "C", &a0))
                    {
                        OBJ_CALL(result = ::java::lang::Character::getType(a0));
                        return PyInt_FromLong((long) result);
                    }
                }
                {
                    jint a0;
                    jint result;

                    if (!parseArgs(args, "I", &a0))
                    {
                        OBJ_CALL(result = ::java::lang::Character::getType(a0));
                        return PyInt_FromLong((long) result);
                    }
                }
            }

            PyErr_SetArgsError(type, "getType", args);
            return NULL;
        }

        static PyObject *t_Character_hashCode(t_Character *self, PyObject *args)
        {
            jint result;

            if (!parseArgs(args, ""))
            {
                OBJ_CALL(result = self->object.hashCode());
                return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(Character), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_Character_isDefined(PyTypeObject *type, PyObject *args)
        {
            switch (PyTuple_GET_SIZE(args)) {
              case 1:
                {
                    jchar a0;
                    jboolean result;

                    if (!parseArgs(args, "C", &a0))
                    {
                        OBJ_CALL(result = ::java::lang::Character::isDefined(a0));
                        Py_RETURN_BOOL(result);
                    }
                }
                {
                    jint a0;
                    jboolean result;

                    if (!parseArgs(args, "I", &a0))
                    {
                        OBJ_CALL(result = ::java::lang::Character::isDefined(a0));
                        Py_RETURN_BOOL(result);
                    }
                }
            }

            PyErr_SetArgsError(type, "isDefined", args);
            return NULL;
        }

        static PyObject *t_Character_isDigit(PyTypeObject *type, PyObject *args)
        {
            switch (PyTuple_GET_SIZE(args)) {
              case 1:
                {
                    jint a0;
                    jboolean result;

                    if (!parseArgs(args, "I", &a0))
                    {
                        OBJ_CALL(result = ::java::lang::Character::isDigit(a0));
                        Py_RETURN_BOOL(result);
                    }
                }
                {
                    jchar a0;
                    jboolean result;

                    if (!parseArgs(args, "C", &a0))
                    {
                        OBJ_CALL(result = ::java::lang::Character::isDigit(a0));
                        Py_RETURN_BOOL(result);
                    }
                }
            }

            PyErr_SetArgsError(type, "isDigit", args);
            return NULL;
        }

        static PyObject *t_Character_isHighSurrogate(PyTypeObject *type, PyObject *arg)
        {
            jchar a0;
            jboolean result;

            if (!parseArg(arg, "C", &a0))
            {
                OBJ_CALL(result = ::java::lang::Character::isHighSurrogate(a0));
                Py_RETURN_BOOL(result);
            }

            PyErr_SetArgsError(type, "isHighSurrogate", arg);
            return NULL;
        }

        static PyObject *t_Character_isISOControl(PyTypeObject *type, PyObject *args)
        {
            switch (PyTuple_GET_SIZE(args)) {
              case 1:
                {
                    jint a0;
                    jboolean result;

                    if (!parseArgs(args, "I", &a0))
                    {
                        OBJ_CALL(result = ::java::lang::Character::isISOControl(a0));
                        Py_RETURN_BOOL(result);
                    }
                }
                {
                    jchar a0;
                    jboolean result;

                    if (!parseArgs(args, "C", &a0))
                    {
                        OBJ_CALL(result = ::java::lang::Character::isISOControl(a0));
                        Py_RETURN_BOOL(result);
                    }
                }
            }

            PyErr_SetArgsError(type, "isISOControl", args);
            return NULL;
        }

        static PyObject *t_Character_isIdentifierIgnorable(PyTypeObject *type, PyObject *args)
        {
            switch (PyTuple_GET_SIZE(args)) {
              case 1:
                {
                    jint a0;
                    jboolean result;

                    if (!parseArgs(args, "I", &a0))
                    {
                        OBJ_CALL(result = ::java::lang::Character::isIdentifierIgnorable(a0));
                        Py_RETURN_BOOL(result);
                    }
                }
                {
                    jchar a0;
                    jboolean result;

                    if (!parseArgs(args, "C", &a0))
                    {
                        OBJ_CALL(result = ::java::lang::Character::isIdentifierIgnorable(a0));
                        Py_RETURN_BOOL(result);
                    }
                }
            }

            PyErr_SetArgsError(type, "isIdentifierIgnorable", args);
            return NULL;
        }

        static PyObject *t_Character_isJavaIdentifierPart(PyTypeObject *type, PyObject *args)
        {
            switch (PyTuple_GET_SIZE(args)) {
              case 1:
                {
                    jint a0;
                    jboolean result;

                    if (!parseArgs(args, "I", &a0))
                    {
                        OBJ_CALL(result = ::java::lang::Character::isJavaIdentifierPart(a0));
                        Py_RETURN_BOOL(result);
                    }
                }
                {
                    jchar a0;
                    jboolean result;

                    if (!parseArgs(args, "C", &a0))
                    {
                        OBJ_CALL(result = ::java::lang::Character::isJavaIdentifierPart(a0));
                        Py_RETURN_BOOL(result);
                    }
                }
            }

            PyErr_SetArgsError(type, "isJavaIdentifierPart", args);
            return NULL;
        }

        static PyObject *t_Character_isJavaIdentifierStart(PyTypeObject *type, PyObject *args)
        {
            switch (PyTuple_GET_SIZE(args)) {
              case 1:
                {
                    jchar a0;
                    jboolean result;

                    if (!parseArgs(args, "C", &a0))
                    {
                        OBJ_CALL(result = ::java::lang::Character::isJavaIdentifierStart(a0));
                        Py_RETURN_BOOL(result);
                    }
                }
                {
                    jint a0;
                    jboolean result;

                    if (!parseArgs(args, "I", &a0))
                    {
                        OBJ_CALL(result = ::java::lang::Character::isJavaIdentifierStart(a0));
                        Py_RETURN_BOOL(result);
                    }
                }
            }

            PyErr_SetArgsError(type, "isJavaIdentifierStart", args);
            return NULL;
        }

        static PyObject *t_Character_isJavaLetter(PyTypeObject *type, PyObject *arg)
        {
            jchar a0;
            jboolean result;

            if (!parseArg(arg, "C", &a0))
            {
                OBJ_CALL(result = ::java::lang::Character::isJavaLetter(a0));
                Py_RETURN_BOOL(result);
            }

            PyErr_SetArgsError(type, "isJavaLetter", arg);
            return NULL;
        }

        static PyObject *t_Character_isJavaLetterOrDigit(PyTypeObject *type, PyObject *arg)
        {
            jchar a0;
            jboolean result;

            if (!parseArg(arg, "C", &a0))
            {
                OBJ_CALL(result = ::java::lang::Character::isJavaLetterOrDigit(a0));
                Py_RETURN_BOOL(result);
            }

            PyErr_SetArgsError(type, "isJavaLetterOrDigit", arg);
            return NULL;
        }

        static PyObject *t_Character_isLetter(PyTypeObject *type, PyObject *args)
        {
            switch (PyTuple_GET_SIZE(args)) {
              case 1:
                {
                    jchar a0;
                    jboolean result;

                    if (!parseArgs(args, "C", &a0))
                    {
                        OBJ_CALL(result = ::java::lang::Character::isLetter(a0));
                        Py_RETURN_BOOL(result);
                    }
                }
                {
                    jint a0;
                    jboolean result;

                    if (!parseArgs(args, "I", &a0))
                    {
                        OBJ_CALL(result = ::java::lang::Character::isLetter(a0));
                        Py_RETURN_BOOL(result);
                    }
                }
            }

            PyErr_SetArgsError(type, "isLetter", args);
            return NULL;
        }

        static PyObject *t_Character_isLetterOrDigit(PyTypeObject *type, PyObject *args)
        {
            switch (PyTuple_GET_SIZE(args)) {
              case 1:
                {
                    jint a0;
                    jboolean result;

                    if (!parseArgs(args, "I", &a0))
                    {
                        OBJ_CALL(result = ::java::lang::Character::isLetterOrDigit(a0));
                        Py_RETURN_BOOL(result);
                    }
                }
                {
                    jchar a0;
                    jboolean result;

                    if (!parseArgs(args, "C", &a0))
                    {
                        OBJ_CALL(result = ::java::lang::Character::isLetterOrDigit(a0));
                        Py_RETURN_BOOL(result);
                    }
                }
            }

            PyErr_SetArgsError(type, "isLetterOrDigit", args);
            return NULL;
        }

        static PyObject *t_Character_isLowSurrogate(PyTypeObject *type, PyObject *arg)
        {
            jchar a0;
            jboolean result;

            if (!parseArg(arg, "C", &a0))
            {
                OBJ_CALL(result = ::java::lang::Character::isLowSurrogate(a0));
                Py_RETURN_BOOL(result);
            }

            PyErr_SetArgsError(type, "isLowSurrogate", arg);
            return NULL;
        }

        static PyObject *t_Character_isLowerCase(PyTypeObject *type, PyObject *args)
        {
            switch (PyTuple_GET_SIZE(args)) {
              case 1:
                {
                    jint a0;
                    jboolean result;

                    if (!parseArgs(args, "I", &a0))
                    {
                        OBJ_CALL(result = ::java::lang::Character::isLowerCase(a0));
                        Py_RETURN_BOOL(result);
                    }
                }
                {
                    jchar a0;
                    jboolean result;

                    if (!parseArgs(args, "C", &a0))
                    {
                        OBJ_CALL(result = ::java::lang::Character::isLowerCase(a0));
                        Py_RETURN_BOOL(result);
                    }
                }
            }

            PyErr_SetArgsError(type, "isLowerCase", args);
            return NULL;
        }

        static PyObject *t_Character_isMirrored(PyTypeObject *type, PyObject *args)
        {
            switch (PyTuple_GET_SIZE(args)) {
              case 1:
                {
                    jchar a0;
                    jboolean result;

                    if (!parseArgs(args, "C", &a0))
                    {
                        OBJ_CALL(result = ::java::lang::Character::isMirrored(a0));
                        Py_RETURN_BOOL(result);
                    }
                }
                {
                    jint a0;
                    jboolean result;

                    if (!parseArgs(args, "I", &a0))
                    {
                        OBJ_CALL(result = ::java::lang::Character::isMirrored(a0));
                        Py_RETURN_BOOL(result);
                    }
                }
            }

            PyErr_SetArgsError(type, "isMirrored", args);
            return NULL;
        }

        static PyObject *t_Character_isSpace(PyTypeObject *type, PyObject *arg)
        {
            jchar a0;
            jboolean result;

            if (!parseArg(arg, "C", &a0))
            {
                OBJ_CALL(result = ::java::lang::Character::isSpace(a0));
                Py_RETURN_BOOL(result);
            }

            PyErr_SetArgsError(type, "isSpace", arg);
            return NULL;
        }

        static PyObject *t_Character_isSpaceChar(PyTypeObject *type, PyObject *args)
        {
            switch (PyTuple_GET_SIZE(args)) {
              case 1:
                {
                    jchar a0;
                    jboolean result;

                    if (!parseArgs(args, "C", &a0))
                    {
                        OBJ_CALL(result = ::java::lang::Character::isSpaceChar(a0));
                        Py_RETURN_BOOL(result);
                    }
                }
                {
                    jint a0;
                    jboolean result;

                    if (!parseArgs(args, "I", &a0))
                    {
                        OBJ_CALL(result = ::java::lang::Character::isSpaceChar(a0));
                        Py_RETURN_BOOL(result);
                    }
                }
            }

            PyErr_SetArgsError(type, "isSpaceChar", args);
            return NULL;
        }

        static PyObject *t_Character_isSupplementaryCodePoint(PyTypeObject *type, PyObject *arg)
        {
            jint a0;
            jboolean result;

            if (!parseArg(arg, "I", &a0))
            {
                OBJ_CALL(result = ::java::lang::Character::isSupplementaryCodePoint(a0));
                Py_RETURN_BOOL(result);
            }

            PyErr_SetArgsError(type, "isSupplementaryCodePoint", arg);
            return NULL;
        }

        static PyObject *t_Character_isSurrogatePair(PyTypeObject *type, PyObject *args)
        {
            jchar a0;
            jchar a1;
            jboolean result;

            if (!parseArgs(args, "CC", &a0, &a1))
            {
                OBJ_CALL(result = ::java::lang::Character::isSurrogatePair(a0, a1));
                Py_RETURN_BOOL(result);
            }

            PyErr_SetArgsError(type, "isSurrogatePair", args);
            return NULL;
        }

        static PyObject *t_Character_isTitleCase(PyTypeObject *type, PyObject *args)
        {
            switch (PyTuple_GET_SIZE(args)) {
              case 1:
                {
                    jint a0;
                    jboolean result;

                    if (!parseArgs(args, "I", &a0))
                    {
                        OBJ_CALL(result = ::java::lang::Character::isTitleCase(a0));
                        Py_RETURN_BOOL(result);
                    }
                }
                {
                    jchar a0;
                    jboolean result;

                    if (!parseArgs(args, "C", &a0))
                    {
                        OBJ_CALL(result = ::java::lang::Character::isTitleCase(a0));
                        Py_RETURN_BOOL(result);
                    }
                }
            }

            PyErr_SetArgsError(type, "isTitleCase", args);
            return NULL;
        }

        static PyObject *t_Character_isUnicodeIdentifierPart(PyTypeObject *type, PyObject *args)
        {
            switch (PyTuple_GET_SIZE(args)) {
              case 1:
                {
                    jchar a0;
                    jboolean result;

                    if (!parseArgs(args, "C", &a0))
                    {
                        OBJ_CALL(result = ::java::lang::Character::isUnicodeIdentifierPart(a0));
                        Py_RETURN_BOOL(result);
                    }
                }
                {
                    jint a0;
                    jboolean result;

                    if (!parseArgs(args, "I", &a0))
                    {
                        OBJ_CALL(result = ::java::lang::Character::isUnicodeIdentifierPart(a0));
                        Py_RETURN_BOOL(result);
                    }
                }
            }

            PyErr_SetArgsError(type, "isUnicodeIdentifierPart", args);
            return NULL;
        }

        static PyObject *t_Character_isUnicodeIdentifierStart(PyTypeObject *type, PyObject *args)
        {
            switch (PyTuple_GET_SIZE(args)) {
              case 1:
                {
                    jint a0;
                    jboolean result;

                    if (!parseArgs(args, "I", &a0))
                    {
                        OBJ_CALL(result = ::java::lang::Character::isUnicodeIdentifierStart(a0));
                        Py_RETURN_BOOL(result);
                    }
                }
                {
                    jchar a0;
                    jboolean result;

                    if (!parseArgs(args, "C", &a0))
                    {
                        OBJ_CALL(result = ::java::lang::Character::isUnicodeIdentifierStart(a0));
                        Py_RETURN_BOOL(result);
                    }
                }
            }

            PyErr_SetArgsError(type, "isUnicodeIdentifierStart", args);
            return NULL;
        }

        static PyObject *t_Character_isUpperCase(PyTypeObject *type, PyObject *args)
        {
            switch (PyTuple_GET_SIZE(args)) {
              case 1:
                {
                    jint a0;
                    jboolean result;

                    if (!parseArgs(args, "I", &a0))
                    {
                        OBJ_CALL(result = ::java::lang::Character::isUpperCase(a0));
                        Py_RETURN_BOOL(result);
                    }
                }
                {
                    jchar a0;
                    jboolean result;

                    if (!parseArgs(args, "C", &a0))
                    {
                        OBJ_CALL(result = ::java::lang::Character::isUpperCase(a0));
                        Py_RETURN_BOOL(result);
                    }
                }
            }

            PyErr_SetArgsError(type, "isUpperCase", args);
            return NULL;
        }

        static PyObject *t_Character_isValidCodePoint(PyTypeObject *type, PyObject *arg)
        {
            jint a0;
            jboolean result;

            if (!parseArg(arg, "I", &a0))
            {
                OBJ_CALL(result = ::java::lang::Character::isValidCodePoint(a0));
                Py_RETURN_BOOL(result);
            }

            PyErr_SetArgsError(type, "isValidCodePoint", arg);
            return NULL;
        }

        static PyObject *t_Character_isWhitespace(PyTypeObject *type, PyObject *args)
        {
            switch (PyTuple_GET_SIZE(args)) {
              case 1:
                {
                    jint a0;
                    jboolean result;

                    if (!parseArgs(args, "I", &a0))
                    {
                        OBJ_CALL(result = ::java::lang::Character::isWhitespace(a0));
                        Py_RETURN_BOOL(result);
                    }
                }
                {
                    jchar a0;
                    jboolean result;

                    if (!parseArgs(args, "C", &a0))
                    {
                        OBJ_CALL(result = ::java::lang::Character::isWhitespace(a0));
                        Py_RETURN_BOOL(result);
                    }
                }
            }

            PyErr_SetArgsError(type, "isWhitespace", args);
            return NULL;
        }

        static PyObject *t_Character_offsetByCodePoints(PyTypeObject *type, PyObject *args)
        {
            switch (PyTuple_GET_SIZE(args)) {
              case 3:
                {
                    ::java::lang::CharSequence a0((jobject) NULL);
                    jint a1;
                    jint a2;
                    jint result;

                    if (!parseArgs(args, "OII", &::java::lang::PY_TYPE(CharSequence), &a0, &a1, &a2))
                    {
                        OBJ_CALL(result = ::java::lang::Character::offsetByCodePoints(a0, a1, a2));
                        return PyInt_FromLong((long) result);
                    }
                }
                break;
              case 5:
                {
                    JArray< jchar > a0((jobject) NULL);
                    jint a1;
                    jint a2;
                    jint a3;
                    jint a4;
                    jint result;

                    if (!parseArgs(args, "[CIIII", &a0, &a1, &a2, &a3, &a4))
                    {
                        OBJ_CALL(result = ::java::lang::Character::offsetByCodePoints(a0, a1, a2, a3, a4));
                        return PyInt_FromLong((long) result);
                    }
                }
            }

            PyErr_SetArgsError(type, "offsetByCodePoints", args);
            return NULL;
        }

        static PyObject *t_Character_reverseBytes(PyTypeObject *type, PyObject *arg)
        {
            jchar a0;
            jchar result;

            if (!parseArg(arg, "C", &a0))
            {
                OBJ_CALL(result = ::java::lang::Character::reverseBytes(a0));
                return PyUnicode_FromUnicode((Py_UNICODE *) &result, 1);
            }

            PyErr_SetArgsError(type, "reverseBytes", arg);
            return NULL;
        }

        static PyObject *t_Character_toChars(PyTypeObject *type, PyObject *args)
        {
            switch (PyTuple_GET_SIZE(args)) {
              case 1:
                {
                    jint a0;
                    JArray< jchar > result((jobject) NULL);

                    if (!parseArgs(args, "I", &a0))
                    {
                        OBJ_CALL(result = ::java::lang::Character::toChars(a0));
                        return result.wrap();
                    }
                }
                break;
              case 3:
                {
                    jint a0;
                    JArray< jchar > a1((jobject) NULL);
                    jint a2;
                    jint result;

                    if (!parseArgs(args, "I[CI", &a0, &a1, &a2))
                    {
                        OBJ_CALL(result = ::java::lang::Character::toChars(a0, a1, a2));
                        return PyInt_FromLong((long) result);
                    }
                }
            }

            PyErr_SetArgsError(type, "toChars", args);
            return NULL;
        }

        static PyObject *t_Character_toCodePoint(PyTypeObject *type, PyObject *args)
        {
            jchar a0;
            jchar a1;
            jint result;

            if (!parseArgs(args, "CC", &a0, &a1))
            {
                OBJ_CALL(result = ::java::lang::Character::toCodePoint(a0, a1));
                return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError(type, "toCodePoint", args);
            return NULL;
        }

        static PyObject *t_Character_toLowerCase(PyTypeObject *type, PyObject *args)
        {
            switch (PyTuple_GET_SIZE(args)) {
              case 1:
                {
                    jint a0;
                    jint result;

                    if (!parseArgs(args, "I", &a0))
                    {
                        OBJ_CALL(result = ::java::lang::Character::toLowerCase(a0));
                        return PyInt_FromLong((long) result);
                    }
                }
                {
                    jchar a0;
                    jchar result;

                    if (!parseArgs(args, "C", &a0))
                    {
                        OBJ_CALL(result = ::java::lang::Character::toLowerCase(a0));
                        return PyUnicode_FromUnicode((Py_UNICODE *) &result, 1);
                    }
                }
            }

            PyErr_SetArgsError(type, "toLowerCase", args);
            return NULL;
        }

        static PyObject *t_Character_toString(t_Character *self, PyObject *args)
        {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
                OBJ_CALL(result = self->object.toString());
                return j2p(result);
            }

            return callSuper(&PY_TYPE(Character), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_Character_toString_(PyTypeObject *type, PyObject *args)
        {
            jchar a0;
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, "C", &a0))
            {
                OBJ_CALL(result = ::java::lang::Character::toString(a0));
                return j2p(result);
            }

            PyErr_SetArgsError(type, "toString_", args);
            return NULL;
        }

        static PyObject *t_Character_toTitleCase(PyTypeObject *type, PyObject *args)
        {
            switch (PyTuple_GET_SIZE(args)) {
              case 1:
                {
                    jchar a0;
                    jchar result;

                    if (!parseArgs(args, "C", &a0))
                    {
                        OBJ_CALL(result = ::java::lang::Character::toTitleCase(a0));
                        return PyUnicode_FromUnicode((Py_UNICODE *) &result, 1);
                    }
                }
                {
                    jint a0;
                    jint result;

                    if (!parseArgs(args, "I", &a0))
                    {
                        OBJ_CALL(result = ::java::lang::Character::toTitleCase(a0));
                        return PyInt_FromLong((long) result);
                    }
                }
            }

            PyErr_SetArgsError(type, "toTitleCase", args);
            return NULL;
        }

        static PyObject *t_Character_toUpperCase(PyTypeObject *type, PyObject *args)
        {
            switch (PyTuple_GET_SIZE(args)) {
              case 1:
                {
                    jint a0;
                    jint result;

                    if (!parseArgs(args, "I", &a0))
                    {
                        OBJ_CALL(result = ::java::lang::Character::toUpperCase(a0));
                        return PyInt_FromLong((long) result);
                    }
                }
                {
                    jchar a0;
                    jchar result;

                    if (!parseArgs(args, "C", &a0))
                    {
                        OBJ_CALL(result = ::java::lang::Character::toUpperCase(a0));
                        return PyUnicode_FromUnicode((Py_UNICODE *) &result, 1);
                    }
                }
            }

            PyErr_SetArgsError(type, "toUpperCase", args);
            return NULL;
        }

        static PyObject *t_Character_valueOf(PyTypeObject *type, PyObject *arg)
        {
            jchar a0;
            Character result((jobject) NULL);

            if (!parseArg(arg, "C", &a0))
            {
                OBJ_CALL(result = ::java::lang::Character::valueOf(a0));
                return t_Character::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "valueOf", arg);
            return NULL;
        }
    }
}
#include <jni.h>
#include "JCCEnv.h"
#include "is/iclt/icenlp/core/tokenizer/TokenizerResources.h"
#include "java/lang/Class.h"
#include "java/io/InputStream.h"
#include "JArray.h"

namespace is {
    namespace iclt {
        namespace icenlp {
            namespace core {
                namespace tokenizer {

                    ::java::lang::Class *TokenizerResources::class$ = NULL;
                    jmethodID *TokenizerResources::mids$ = NULL;
                    jfieldID *TokenizerResources::fids$ = NULL;

                    jclass TokenizerResources::initializeClass()
                    {
                        if (!class$)
                        {

                            jclass cls = (jclass) env->findClass("is/iclt/icenlp/core/tokenizer/TokenizerResources");

                            mids$ = new jmethodID[max_mid];
                            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");

                            fids$ = new jfieldID[max_fid];
                            fids$[fid_isLexicon] = env->getFieldID(cls, "isLexicon", "Ljava/io/InputStream;");

                            class$ = (::java::lang::Class *) new JObject(cls);
                        }
                        return (jclass) class$->this$;
                    }

                    TokenizerResources::TokenizerResources() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

                    ::java::io::InputStream TokenizerResources::_get_isLexicon() const
                    {
                        return ::java::io::InputStream(env->getObjectField(this$, fids$[fid_isLexicon]));
                    }

                    void TokenizerResources::_set_isLexicon(const ::java::io::InputStream & a0) const
                    {
                        env->setObjectField(this$, fids$[fid_isLexicon], a0.this$);
                    }
                }
            }
        }
    }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace is {
    namespace iclt {
        namespace icenlp {
            namespace core {
                namespace tokenizer {
                    static PyObject *t_TokenizerResources_cast_(PyTypeObject *type, PyObject *arg);
                    static PyObject *t_TokenizerResources_instance_(PyTypeObject *type, PyObject *arg);
                    static int t_TokenizerResources_init_(t_TokenizerResources *self, PyObject *args, PyObject *kwds);
                    static PyObject *t_TokenizerResources_get__isLexicon(t_TokenizerResources *self, void *data);
                    static int t_TokenizerResources_set__isLexicon(t_TokenizerResources *self, PyObject *arg, void *data);

                    static PyGetSetDef t_TokenizerResources__fields_[] = {
                        DECLARE_GETSET_FIELD(t_TokenizerResources, isLexicon),
                        { NULL, NULL, NULL, NULL, NULL }
                    };

                    static PyMethodDef t_TokenizerResources__methods_[] = {
                        DECLARE_METHOD(t_TokenizerResources, cast_, METH_O | METH_CLASS),
                        DECLARE_METHOD(t_TokenizerResources, instance_, METH_O | METH_CLASS),
                        { NULL, NULL, 0, NULL }
                    };

                    DECLARE_TYPE(TokenizerResources, t_TokenizerResources, ::java::lang::Object, TokenizerResources, t_TokenizerResources_init_, 0, 0, t_TokenizerResources__fields_, 0, 0);

                    void t_TokenizerResources::install(PyObject *module)
                    {
                        installType(&PY_TYPE(TokenizerResources), module, "TokenizerResources", 0);
                    }

                    void t_TokenizerResources::initialize(PyObject *module)
                    {
                        PyDict_SetItemString(PY_TYPE(TokenizerResources).tp_dict, "class_", make_descriptor(TokenizerResources::initializeClass, 1));
                        PyDict_SetItemString(PY_TYPE(TokenizerResources).tp_dict, "wrapfn_", make_descriptor(t_TokenizerResources::wrap_jobject));
                        PyDict_SetItemString(PY_TYPE(TokenizerResources).tp_dict, "boxfn_", make_descriptor(boxObject));
                    }

                    static PyObject *t_TokenizerResources_cast_(PyTypeObject *type, PyObject *arg)
                    {
                        if (!(arg = castCheck(arg, TokenizerResources::initializeClass, 1)))
                            return NULL;
                        return t_TokenizerResources::wrap_Object(TokenizerResources(((t_TokenizerResources *) arg)->object.this$));
                    }
                    static PyObject *t_TokenizerResources_instance_(PyTypeObject *type, PyObject *arg)
                    {
                        if (!castCheck(arg, TokenizerResources::initializeClass, 0))
                            Py_RETURN_FALSE;
                        Py_RETURN_TRUE;
                    }

                    static int t_TokenizerResources_init_(t_TokenizerResources *self, PyObject *args, PyObject *kwds)
                    {
                        TokenizerResources object((jobject) NULL);

                        INT_CALL(object = TokenizerResources());
                        self->object = object;

                        return 0;
                    }

                    static PyObject *t_TokenizerResources_get__isLexicon(t_TokenizerResources *self, void *data)
                    {
                        ::java::io::InputStream value((jobject) NULL);
                        OBJ_CALL(value = self->object._get_isLexicon());
                        return ::java::io::t_InputStream::wrap_Object(value);
                    }
                    static int t_TokenizerResources_set__isLexicon(t_TokenizerResources *self, PyObject *arg, void *data)
                    {
                        ::java::io::InputStream value((jobject) NULL);
                        if (!parseArg(arg, "k", ::java::io::InputStream::initializeClass, &value))
                        {
                            INT_CALL(self->object._set_isLexicon(value));
                            return 0;
                        }
                        PyErr_SetArgsError((PyObject *) self, "isLexicon", arg);
                        return -1;
                    }
                }
            }
        }
    }
}
#include <jni.h>
#include "JCCEnv.h"
#include "is/iclt/icenlp/core/icetagger/IceTagger$HmmModelType.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace is {
    namespace iclt {
        namespace icenlp {
            namespace core {
                namespace icetagger {

                    ::java::lang::Class *IceTagger$HmmModelType::class$ = NULL;
                    jmethodID *IceTagger$HmmModelType::mids$ = NULL;
                    IceTagger$HmmModelType *IceTagger$HmmModelType::end = NULL;
                    IceTagger$HmmModelType *IceTagger$HmmModelType::none = NULL;
                    IceTagger$HmmModelType *IceTagger$HmmModelType::start = NULL;
                    IceTagger$HmmModelType *IceTagger$HmmModelType::startend = NULL;

                    jclass IceTagger$HmmModelType::initializeClass()
                    {
                        if (!class$)
                        {

                            jclass cls = (jclass) env->findClass("is/iclt/icenlp/core/icetagger/IceTagger$HmmModelType");

                            mids$ = new jmethodID[max_mid];
                            mids$[mid_valueOf_321d7bf4] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;)Lis/iclt/icenlp/core/icetagger/IceTagger$HmmModelType;");
                            mids$[mid_values_7e2769ba] = env->getStaticMethodID(cls, "values", "()[Lis/iclt/icenlp/core/icetagger/IceTagger$HmmModelType;");

                            class$ = (::java::lang::Class *) new JObject(cls);
                            cls = (jclass) class$->this$;

                            end = new IceTagger$HmmModelType(env->getStaticObjectField(cls, "end", "Lis/iclt/icenlp/core/icetagger/IceTagger$HmmModelType;"));
                            none = new IceTagger$HmmModelType(env->getStaticObjectField(cls, "none", "Lis/iclt/icenlp/core/icetagger/IceTagger$HmmModelType;"));
                            start = new IceTagger$HmmModelType(env->getStaticObjectField(cls, "start", "Lis/iclt/icenlp/core/icetagger/IceTagger$HmmModelType;"));
                            startend = new IceTagger$HmmModelType(env->getStaticObjectField(cls, "startend", "Lis/iclt/icenlp/core/icetagger/IceTagger$HmmModelType;"));
                        }
                        return (jclass) class$->this$;
                    }

                    IceTagger$HmmModelType IceTagger$HmmModelType::valueOf(const ::java::lang::String & a0)
                    {
                        jclass cls = initializeClass();
                        return IceTagger$HmmModelType(env->callStaticObjectMethod(cls, mids$[mid_valueOf_321d7bf4], a0.this$));
                    }

                    JArray< IceTagger$HmmModelType > IceTagger$HmmModelType::values()
                    {
                        jclass cls = initializeClass();
                        return JArray< IceTagger$HmmModelType >(env->callStaticObjectMethod(cls, mids$[mid_values_7e2769ba]));
                    }
                }
            }
        }
    }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace is {
    namespace iclt {
        namespace icenlp {
            namespace core {
                namespace icetagger {
                    static PyObject *t_IceTagger$HmmModelType_cast_(PyTypeObject *type, PyObject *arg);
                    static PyObject *t_IceTagger$HmmModelType_instance_(PyTypeObject *type, PyObject *arg);
                    static PyObject *t_IceTagger$HmmModelType_valueOf(PyTypeObject *type, PyObject *args);
                    static PyObject *t_IceTagger$HmmModelType_values(PyTypeObject *type);

                    static PyMethodDef t_IceTagger$HmmModelType__methods_[] = {
                        DECLARE_METHOD(t_IceTagger$HmmModelType, cast_, METH_O | METH_CLASS),
                        DECLARE_METHOD(t_IceTagger$HmmModelType, instance_, METH_O | METH_CLASS),
                        DECLARE_METHOD(t_IceTagger$HmmModelType, valueOf, METH_VARARGS | METH_CLASS),
                        DECLARE_METHOD(t_IceTagger$HmmModelType, values, METH_NOARGS | METH_CLASS),
                        { NULL, NULL, 0, NULL }
                    };

                    DECLARE_TYPE(IceTagger$HmmModelType, t_IceTagger$HmmModelType, ::java::lang::Enum, IceTagger$HmmModelType, abstract_init, 0, 0, 0, 0, 0);

                    void t_IceTagger$HmmModelType::install(PyObject *module)
                    {
                        installType(&PY_TYPE(IceTagger$HmmModelType), module, "IceTagger$HmmModelType", 0);
                    }

                    void t_IceTagger$HmmModelType::initialize(PyObject *module)
                    {
                        PyDict_SetItemString(PY_TYPE(IceTagger$HmmModelType).tp_dict, "class_", make_descriptor(IceTagger$HmmModelType::initializeClass, 1));
                        PyDict_SetItemString(PY_TYPE(IceTagger$HmmModelType).tp_dict, "wrapfn_", make_descriptor(t_IceTagger$HmmModelType::wrap_jobject));
                        PyDict_SetItemString(PY_TYPE(IceTagger$HmmModelType).tp_dict, "boxfn_", make_descriptor(boxObject));
                        IceTagger$HmmModelType::initializeClass();
                        PyDict_SetItemString(PY_TYPE(IceTagger$HmmModelType).tp_dict, "end", make_descriptor(t_IceTagger$HmmModelType::wrap_Object(*IceTagger$HmmModelType::end)));
                        PyDict_SetItemString(PY_TYPE(IceTagger$HmmModelType).tp_dict, "none", make_descriptor(t_IceTagger$HmmModelType::wrap_Object(*IceTagger$HmmModelType::none)));
                        PyDict_SetItemString(PY_TYPE(IceTagger$HmmModelType).tp_dict, "start", make_descriptor(t_IceTagger$HmmModelType::wrap_Object(*IceTagger$HmmModelType::start)));
                        PyDict_SetItemString(PY_TYPE(IceTagger$HmmModelType).tp_dict, "startend", make_descriptor(t_IceTagger$HmmModelType::wrap_Object(*IceTagger$HmmModelType::startend)));
                    }

                    static PyObject *t_IceTagger$HmmModelType_cast_(PyTypeObject *type, PyObject *arg)
                    {
                        if (!(arg = castCheck(arg, IceTagger$HmmModelType::initializeClass, 1)))
                            return NULL;
                        return t_IceTagger$HmmModelType::wrap_Object(IceTagger$HmmModelType(((t_IceTagger$HmmModelType *) arg)->object.this$));
                    }
                    static PyObject *t_IceTagger$HmmModelType_instance_(PyTypeObject *type, PyObject *arg)
                    {
                        if (!castCheck(arg, IceTagger$HmmModelType::initializeClass, 0))
                            Py_RETURN_FALSE;
                        Py_RETURN_TRUE;
                    }

                    static PyObject *t_IceTagger$HmmModelType_valueOf(PyTypeObject *type, PyObject *args)
                    {
                        ::java::lang::String a0((jobject) NULL);
                        IceTagger$HmmModelType result((jobject) NULL);

                        if (!parseArgs(args, "s", &a0))
                        {
                            OBJ_CALL(result = ::is::iclt::icenlp::core::icetagger::IceTagger$HmmModelType::valueOf(a0));
                            return t_IceTagger$HmmModelType::wrap_Object(result);
                        }

                        return callSuper(type, "valueOf", args, 2);
                    }

                    static PyObject *t_IceTagger$HmmModelType_values(PyTypeObject *type)
                    {
                        JArray< IceTagger$HmmModelType > result((jobject) NULL);
                        OBJ_CALL(result = ::is::iclt::icenlp::core::icetagger::IceTagger$HmmModelType::values());
                        return JArray<jobject>(result.this$).wrap(t_IceTagger$HmmModelType::wrap_jobject);
                    }
                }
            }
        }
    }
}
#include <jni.h>
#include "JCCEnv.h"
#include "is/iclt/icenlp/core/tritagger/FreqLexicon.h"
#include "java/io/IOException.h"
#include "java/lang/NullPointerException.h"
#include "java/lang/Class.h"
#include "java/io/InputStream.h"
#include "java/lang/String.h"
#include "java/util/Vector.h"
#include "JArray.h"

namespace is {
    namespace iclt {
        namespace icenlp {
            namespace core {
                namespace tritagger {

                    ::java::lang::Class *FreqLexicon::class$ = NULL;
                    jmethodID *FreqLexicon::mids$ = NULL;
                    jfieldID *FreqLexicon::fids$ = NULL;
                    jint FreqLexicon::formatFrequency = (jint) 0;
                    jint FreqLexicon::formatNoFrequency = (jint) 0;

                    jclass FreqLexicon::initializeClass()
                    {
                        if (!class$)
                        {

                            jclass cls = (jclass) env->findClass("is/iclt/icenlp/core/tritagger/FreqLexicon");

                            mids$ = new jmethodID[max_mid];
                            mids$[mid_init$_d41a79ef] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;IZ)V");
                            mids$[mid_init$_a587ce43] = env->getMethodID(cls, "<init>", "(Ljava/io/InputStream;IZ)V");
                            mids$[mid_getFrequencySuffix_f369165a] = env->getMethodID(cls, "getFrequencySuffix", "(Ljava/lang/String;Z)I");
                            mids$[mid_getFrequencySuffixTag_55e0e84c] = env->getMethodID(cls, "getFrequencySuffixTag", "(Ljava/lang/String;Ljava/lang/String;Z)I");
                            mids$[mid_getFrequencyWord_5fdc3f57] = env->getMethodID(cls, "getFrequencyWord", "(Ljava/lang/String;)I");
                            mids$[mid_getFrequencyWordTag_4a26475d] = env->getMethodID(cls, "getFrequencyWordTag", "(Ljava/lang/String;Ljava/lang/String;)I");
                            mids$[mid_getLongestSuffixLength_f369165a] = env->getMethodID(cls, "getLongestSuffixLength", "(Ljava/lang/String;Z)I");
                            mids$[mid_getNumEntries_54c6a179] = env->getMethodID(cls, "getNumEntries", "()I");
                            mids$[mid_getProbSuffix_f3691657] = env->getMethodID(cls, "getProbSuffix", "(Ljava/lang/String;Z)D");
                            mids$[mid_getProbWord_5fdc3f5a] = env->getMethodID(cls, "getProbWord", "(Ljava/lang/String;)D");
                            mids$[mid_getTagsLower_38f24ddb] = env->getMethodID(cls, "getTagsLower", "()Ljava/util/Vector;");
                            mids$[mid_getTagsUpper_38f24ddb] = env->getMethodID(cls, "getTagsUpper", "()Ljava/util/Vector;");
                            mids$[mid_getTheta_54c6a174] = env->getMethodID(cls, "getTheta", "()D");
                            mids$[mid_lookupSuffix_edaaade4] = env->getMethodID(cls, "lookupSuffix", "(Ljava/lang/String;Z)Ljava/lang/String;");
                            mids$[mid_lookupWord_edaaade4] = env->getMethodID(cls, "lookupWord", "(Ljava/lang/String;Z)Ljava/lang/String;");
                            mids$[mid_suffixesCreated_54c6a16a] = env->getMethodID(cls, "suffixesCreated", "()Z");

                            fids$ = new jfieldID[max_fid];
                            fids$[fid_corpusSize] = env->getFieldID(cls, "corpusSize", "I");
                            fids$[fid_suffixLength] = env->getFieldID(cls, "suffixLength", "I");
                            fids$[fid_suffixStart] = env->getFieldID(cls, "suffixStart", "I");

                            class$ = (::java::lang::Class *) new JObject(cls);
                            cls = (jclass) class$->this$;

                            formatFrequency = env->getStaticIntField(cls, "formatFrequency");
                            formatNoFrequency = env->getStaticIntField(cls, "formatNoFrequency");
                        }
                        return (jclass) class$->this$;
                    }

                    FreqLexicon::FreqLexicon(const ::java::lang::String & a0, jint a1, jboolean a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_d41a79ef, a0.this$, a1, a2)) {}

                    FreqLexicon::FreqLexicon(const ::java::io::InputStream & a0, jint a1, jboolean a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_a587ce43, a0.this$, a1, a2)) {}

                    jint FreqLexicon::getFrequencySuffix(const ::java::lang::String & a0, jboolean a1) const
                    {
                        return env->callIntMethod(this$, mids$[mid_getFrequencySuffix_f369165a], a0.this$, a1);
                    }

                    jint FreqLexicon::getFrequencySuffixTag(const ::java::lang::String & a0, const ::java::lang::String & a1, jboolean a2) const
                    {
                        return env->callIntMethod(this$, mids$[mid_getFrequencySuffixTag_55e0e84c], a0.this$, a1.this$, a2);
                    }

                    jint FreqLexicon::getFrequencyWord(const ::java::lang::String & a0) const
                    {
                        return env->callIntMethod(this$, mids$[mid_getFrequencyWord_5fdc3f57], a0.this$);
                    }

                    jint FreqLexicon::getFrequencyWordTag(const ::java::lang::String & a0, const ::java::lang::String & a1) const
                    {
                        return env->callIntMethod(this$, mids$[mid_getFrequencyWordTag_4a26475d], a0.this$, a1.this$);
                    }

                    jint FreqLexicon::getLongestSuffixLength(const ::java::lang::String & a0, jboolean a1) const
                    {
                        return env->callIntMethod(this$, mids$[mid_getLongestSuffixLength_f369165a], a0.this$, a1);
                    }

                    jint FreqLexicon::getNumEntries() const
                    {
                        return env->callIntMethod(this$, mids$[mid_getNumEntries_54c6a179]);
                    }

                    jdouble FreqLexicon::getProbSuffix(const ::java::lang::String & a0, jboolean a1) const
                    {
                        return env->callDoubleMethod(this$, mids$[mid_getProbSuffix_f3691657], a0.this$, a1);
                    }

                    jdouble FreqLexicon::getProbWord(const ::java::lang::String & a0) const
                    {
                        return env->callDoubleMethod(this$, mids$[mid_getProbWord_5fdc3f5a], a0.this$);
                    }

                    ::java::util::Vector FreqLexicon::getTagsLower() const
                    {
                        return ::java::util::Vector(env->callObjectMethod(this$, mids$[mid_getTagsLower_38f24ddb]));
                    }

                    ::java::util::Vector FreqLexicon::getTagsUpper() const
                    {
                        return ::java::util::Vector(env->callObjectMethod(this$, mids$[mid_getTagsUpper_38f24ddb]));
                    }

                    jdouble FreqLexicon::getTheta() const
                    {
                        return env->callDoubleMethod(this$, mids$[mid_getTheta_54c6a174]);
                    }

                    ::java::lang::String FreqLexicon::lookupSuffix(const ::java::lang::String & a0, jboolean a1) const
                    {
                        return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_lookupSuffix_edaaade4], a0.this$, a1));
                    }

                    ::java::lang::String FreqLexicon::lookupWord(const ::java::lang::String & a0, jboolean a1) const
                    {
                        return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_lookupWord_edaaade4], a0.this$, a1));
                    }

                    jboolean FreqLexicon::suffixesCreated() const
                    {
                        return env->callBooleanMethod(this$, mids$[mid_suffixesCreated_54c6a16a]);
                    }

                    jint FreqLexicon::_get_corpusSize() const
                    {
                        return env->getIntField(this$, fids$[fid_corpusSize]);
                    }

                    void FreqLexicon::_set_corpusSize(jint a0) const
                    {
                        env->setIntField(this$, fids$[fid_corpusSize], a0);
                    }

                    jint FreqLexicon::_get_suffixLength() const
                    {
                        return env->getIntField(this$, fids$[fid_suffixLength]);
                    }

                    jint FreqLexicon::_get_suffixStart() const
                    {
                        return env->getIntField(this$, fids$[fid_suffixStart]);
                    }
                }
            }
        }
    }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace is {
    namespace iclt {
        namespace icenlp {
            namespace core {
                namespace tritagger {
                    static PyObject *t_FreqLexicon_cast_(PyTypeObject *type, PyObject *arg);
                    static PyObject *t_FreqLexicon_instance_(PyTypeObject *type, PyObject *arg);
                    static int t_FreqLexicon_init_(t_FreqLexicon *self, PyObject *args, PyObject *kwds);
                    static PyObject *t_FreqLexicon_getFrequencySuffix(t_FreqLexicon *self, PyObject *args);
                    static PyObject *t_FreqLexicon_getFrequencySuffixTag(t_FreqLexicon *self, PyObject *args);
                    static PyObject *t_FreqLexicon_getFrequencyWord(t_FreqLexicon *self, PyObject *arg);
                    static PyObject *t_FreqLexicon_getFrequencyWordTag(t_FreqLexicon *self, PyObject *args);
                    static PyObject *t_FreqLexicon_getLongestSuffixLength(t_FreqLexicon *self, PyObject *args);
                    static PyObject *t_FreqLexicon_getNumEntries(t_FreqLexicon *self);
                    static PyObject *t_FreqLexicon_getProbSuffix(t_FreqLexicon *self, PyObject *args);
                    static PyObject *t_FreqLexicon_getProbWord(t_FreqLexicon *self, PyObject *arg);
                    static PyObject *t_FreqLexicon_getTagsLower(t_FreqLexicon *self);
                    static PyObject *t_FreqLexicon_getTagsUpper(t_FreqLexicon *self);
                    static PyObject *t_FreqLexicon_getTheta(t_FreqLexicon *self);
                    static PyObject *t_FreqLexicon_lookupSuffix(t_FreqLexicon *self, PyObject *args);
                    static PyObject *t_FreqLexicon_lookupWord(t_FreqLexicon *self, PyObject *args);
                    static PyObject *t_FreqLexicon_suffixesCreated(t_FreqLexicon *self);
                    static PyObject *t_FreqLexicon_get__corpusSize(t_FreqLexicon *self, void *data);
                    static int t_FreqLexicon_set__corpusSize(t_FreqLexicon *self, PyObject *arg, void *data);
                    static PyObject *t_FreqLexicon_get__suffixLength(t_FreqLexicon *self, void *data);
                    static PyObject *t_FreqLexicon_get__suffixStart(t_FreqLexicon *self, void *data);

                    static PyObject *t_FreqLexicon_get__numEntries(t_FreqLexicon *self, void *data);
                    static PyObject *t_FreqLexicon_get__tagsLower(t_FreqLexicon *self, void *data);
                    static PyObject *t_FreqLexicon_get__tagsUpper(t_FreqLexicon *self, void *data);
                    static PyObject *t_FreqLexicon_get__theta(t_FreqLexicon *self, void *data);
                    static PyGetSetDef t_FreqLexicon__fields_[] = {
                        DECLARE_GETSET_FIELD(t_FreqLexicon, corpusSize),
                        DECLARE_GET_FIELD(t_FreqLexicon, suffixLength),
                        DECLARE_GET_FIELD(t_FreqLexicon, suffixStart),
                        DECLARE_GET_FIELD(t_FreqLexicon, numEntries),
                        DECLARE_GET_FIELD(t_FreqLexicon, tagsLower),
                        DECLARE_GET_FIELD(t_FreqLexicon, tagsUpper),
                        DECLARE_GET_FIELD(t_FreqLexicon, theta),
                        { NULL, NULL, NULL, NULL, NULL }
                    };

                    static PyMethodDef t_FreqLexicon__methods_[] = {
                        DECLARE_METHOD(t_FreqLexicon, cast_, METH_O | METH_CLASS),
                        DECLARE_METHOD(t_FreqLexicon, instance_, METH_O | METH_CLASS),
                        DECLARE_METHOD(t_FreqLexicon, getFrequencySuffix, METH_VARARGS),
                        DECLARE_METHOD(t_FreqLexicon, getFrequencySuffixTag, METH_VARARGS),
                        DECLARE_METHOD(t_FreqLexicon, getFrequencyWord, METH_O),
                        DECLARE_METHOD(t_FreqLexicon, getFrequencyWordTag, METH_VARARGS),
                        DECLARE_METHOD(t_FreqLexicon, getLongestSuffixLength, METH_VARARGS),
                        DECLARE_METHOD(t_FreqLexicon, getNumEntries, METH_NOARGS),
                        DECLARE_METHOD(t_FreqLexicon, getProbSuffix, METH_VARARGS),
                        DECLARE_METHOD(t_FreqLexicon, getProbWord, METH_O),
                        DECLARE_METHOD(t_FreqLexicon, getTagsLower, METH_NOARGS),
                        DECLARE_METHOD(t_FreqLexicon, getTagsUpper, METH_NOARGS),
                        DECLARE_METHOD(t_FreqLexicon, getTheta, METH_NOARGS),
                        DECLARE_METHOD(t_FreqLexicon, lookupSuffix, METH_VARARGS),
                        DECLARE_METHOD(t_FreqLexicon, lookupWord, METH_VARARGS),
                        DECLARE_METHOD(t_FreqLexicon, suffixesCreated, METH_NOARGS),
                        { NULL, NULL, 0, NULL }
                    };

                    DECLARE_TYPE(FreqLexicon, t_FreqLexicon, ::java::lang::Object, FreqLexicon, t_FreqLexicon_init_, 0, 0, t_FreqLexicon__fields_, 0, 0);

                    void t_FreqLexicon::install(PyObject *module)
                    {
                        installType(&PY_TYPE(FreqLexicon), module, "FreqLexicon", 0);
                    }

                    void t_FreqLexicon::initialize(PyObject *module)
                    {
                        PyDict_SetItemString(PY_TYPE(FreqLexicon).tp_dict, "class_", make_descriptor(FreqLexicon::initializeClass, 1));
                        PyDict_SetItemString(PY_TYPE(FreqLexicon).tp_dict, "wrapfn_", make_descriptor(t_FreqLexicon::wrap_jobject));
                        PyDict_SetItemString(PY_TYPE(FreqLexicon).tp_dict, "boxfn_", make_descriptor(boxObject));
                        FreqLexicon::initializeClass();
                        PyDict_SetItemString(PY_TYPE(FreqLexicon).tp_dict, "formatFrequency", make_descriptor(FreqLexicon::formatFrequency));
                        PyDict_SetItemString(PY_TYPE(FreqLexicon).tp_dict, "formatNoFrequency", make_descriptor(FreqLexicon::formatNoFrequency));
                    }

                    static PyObject *t_FreqLexicon_cast_(PyTypeObject *type, PyObject *arg)
                    {
                        if (!(arg = castCheck(arg, FreqLexicon::initializeClass, 1)))
                            return NULL;
                        return t_FreqLexicon::wrap_Object(FreqLexicon(((t_FreqLexicon *) arg)->object.this$));
                    }
                    static PyObject *t_FreqLexicon_instance_(PyTypeObject *type, PyObject *arg)
                    {
                        if (!castCheck(arg, FreqLexicon::initializeClass, 0))
                            Py_RETURN_FALSE;
                        Py_RETURN_TRUE;
                    }

                    static int t_FreqLexicon_init_(t_FreqLexicon *self, PyObject *args, PyObject *kwds)
                    {
                        switch (PyTuple_GET_SIZE(args)) {
                          case 3:
                            {
                                ::java::lang::String a0((jobject) NULL);
                                jint a1;
                                jboolean a2;
                                FreqLexicon object((jobject) NULL);

                                if (!parseArgs(args, "sIZ", &a0, &a1, &a2))
                                {
                                    INT_CALL(object = FreqLexicon(a0, a1, a2));
                                    self->object = object;
                                    break;
                                }
                            }
                            {
                                ::java::io::InputStream a0((jobject) NULL);
                                jint a1;
                                jboolean a2;
                                FreqLexicon object((jobject) NULL);

                                if (!parseArgs(args, "kIZ", ::java::io::InputStream::initializeClass, &a0, &a1, &a2))
                                {
                                    INT_CALL(object = FreqLexicon(a0, a1, a2));
                                    self->object = object;
                                    break;
                                }
                            }
                          default:
                            PyErr_SetArgsError((PyObject *) self, "__init__", args);
                            return -1;
                        }

                        return 0;
                    }

                    static PyObject *t_FreqLexicon_getFrequencySuffix(t_FreqLexicon *self, PyObject *args)
                    {
                        ::java::lang::String a0((jobject) NULL);
                        jboolean a1;
                        jint result;

                        if (!parseArgs(args, "sZ", &a0, &a1))
                        {
                            OBJ_CALL(result = self->object.getFrequencySuffix(a0, a1));
                            return PyInt_FromLong((long) result);
                        }

                        PyErr_SetArgsError((PyObject *) self, "getFrequencySuffix", args);
                        return NULL;
                    }

                    static PyObject *t_FreqLexicon_getFrequencySuffixTag(t_FreqLexicon *self, PyObject *args)
                    {
                        ::java::lang::String a0((jobject) NULL);
                        ::java::lang::String a1((jobject) NULL);
                        jboolean a2;
                        jint result;

                        if (!parseArgs(args, "ssZ", &a0, &a1, &a2))
                        {
                            OBJ_CALL(result = self->object.getFrequencySuffixTag(a0, a1, a2));
                            return PyInt_FromLong((long) result);
                        }

                        PyErr_SetArgsError((PyObject *) self, "getFrequencySuffixTag", args);
                        return NULL;
                    }

                    static PyObject *t_FreqLexicon_getFrequencyWord(t_FreqLexicon *self, PyObject *arg)
                    {
                        ::java::lang::String a0((jobject) NULL);
                        jint result;

                        if (!parseArg(arg, "s", &a0))
                        {
                            OBJ_CALL(result = self->object.getFrequencyWord(a0));
                            return PyInt_FromLong((long) result);
                        }

                        PyErr_SetArgsError((PyObject *) self, "getFrequencyWord", arg);
                        return NULL;
                    }

                    static PyObject *t_FreqLexicon_getFrequencyWordTag(t_FreqLexicon *self, PyObject *args)
                    {
                        ::java::lang::String a0((jobject) NULL);
                        ::java::lang::String a1((jobject) NULL);
                        jint result;

                        if (!parseArgs(args, "ss", &a0, &a1))
                        {
                            OBJ_CALL(result = self->object.getFrequencyWordTag(a0, a1));
                            return PyInt_FromLong((long) result);
                        }

                        PyErr_SetArgsError((PyObject *) self, "getFrequencyWordTag", args);
                        return NULL;
                    }

                    static PyObject *t_FreqLexicon_getLongestSuffixLength(t_FreqLexicon *self, PyObject *args)
                    {
                        ::java::lang::String a0((jobject) NULL);
                        jboolean a1;
                        jint result;

                        if (!parseArgs(args, "sZ", &a0, &a1))
                        {
                            OBJ_CALL(result = self->object.getLongestSuffixLength(a0, a1));
                            return PyInt_FromLong((long) result);
                        }

                        PyErr_SetArgsError((PyObject *) self, "getLongestSuffixLength", args);
                        return NULL;
                    }

                    static PyObject *t_FreqLexicon_getNumEntries(t_FreqLexicon *self)
                    {
                        jint result;
                        OBJ_CALL(result = self->object.getNumEntries());
                        return PyInt_FromLong((long) result);
                    }

                    static PyObject *t_FreqLexicon_getProbSuffix(t_FreqLexicon *self, PyObject *args)
                    {
                        ::java::lang::String a0((jobject) NULL);
                        jboolean a1;
                        jdouble result;

                        if (!parseArgs(args, "sZ", &a0, &a1))
                        {
                            OBJ_CALL(result = self->object.getProbSuffix(a0, a1));
                            return PyFloat_FromDouble((double) result);
                        }

                        PyErr_SetArgsError((PyObject *) self, "getProbSuffix", args);
                        return NULL;
                    }

                    static PyObject *t_FreqLexicon_getProbWord(t_FreqLexicon *self, PyObject *arg)
                    {
                        ::java::lang::String a0((jobject) NULL);
                        jdouble result;

                        if (!parseArg(arg, "s", &a0))
                        {
                            OBJ_CALL(result = self->object.getProbWord(a0));
                            return PyFloat_FromDouble((double) result);
                        }

                        PyErr_SetArgsError((PyObject *) self, "getProbWord", arg);
                        return NULL;
                    }

                    static PyObject *t_FreqLexicon_getTagsLower(t_FreqLexicon *self)
                    {
                        ::java::util::Vector result((jobject) NULL);
                        OBJ_CALL(result = self->object.getTagsLower());
                        return ::java::util::t_Vector::wrap_Object(result);
                    }

                    static PyObject *t_FreqLexicon_getTagsUpper(t_FreqLexicon *self)
                    {
                        ::java::util::Vector result((jobject) NULL);
                        OBJ_CALL(result = self->object.getTagsUpper());
                        return ::java::util::t_Vector::wrap_Object(result);
                    }

                    static PyObject *t_FreqLexicon_getTheta(t_FreqLexicon *self)
                    {
                        jdouble result;
                        OBJ_CALL(result = self->object.getTheta());
                        return PyFloat_FromDouble((double) result);
                    }

                    static PyObject *t_FreqLexicon_lookupSuffix(t_FreqLexicon *self, PyObject *args)
                    {
                        ::java::lang::String a0((jobject) NULL);
                        jboolean a1;
                        ::java::lang::String result((jobject) NULL);

                        if (!parseArgs(args, "sZ", &a0, &a1))
                        {
                            OBJ_CALL(result = self->object.lookupSuffix(a0, a1));
                            return j2p(result);
                        }

                        PyErr_SetArgsError((PyObject *) self, "lookupSuffix", args);
                        return NULL;
                    }

                    static PyObject *t_FreqLexicon_lookupWord(t_FreqLexicon *self, PyObject *args)
                    {
                        ::java::lang::String a0((jobject) NULL);
                        jboolean a1;
                        ::java::lang::String result((jobject) NULL);

                        if (!parseArgs(args, "sZ", &a0, &a1))
                        {
                            OBJ_CALL(result = self->object.lookupWord(a0, a1));
                            return j2p(result);
                        }

                        PyErr_SetArgsError((PyObject *) self, "lookupWord", args);
                        return NULL;
                    }

                    static PyObject *t_FreqLexicon_suffixesCreated(t_FreqLexicon *self)
                    {
                        jboolean result;
                        OBJ_CALL(result = self->object.suffixesCreated());
                        Py_RETURN_BOOL(result);
                    }

                    static PyObject *t_FreqLexicon_get__corpusSize(t_FreqLexicon *self, void *data)
                    {
                        jint value;
                        OBJ_CALL(value = self->object._get_corpusSize());
                        return PyInt_FromLong((long) value);
                    }
                    static int t_FreqLexicon_set__corpusSize(t_FreqLexicon *self, PyObject *arg, void *data)
                    {
                        jint value;
                        if (!parseArg(arg, "I", &value))
                        {
                            INT_CALL(self->object._set_corpusSize(value));
                            return 0;
                        }
                        PyErr_SetArgsError((PyObject *) self, "corpusSize", arg);
                        return -1;
                    }

                    static PyObject *t_FreqLexicon_get__suffixLength(t_FreqLexicon *self, void *data)
                    {
                        jint value;
                        OBJ_CALL(value = self->object._get_suffixLength());
                        return PyInt_FromLong((long) value);
                    }

                    static PyObject *t_FreqLexicon_get__suffixStart(t_FreqLexicon *self, void *data)
                    {
                        jint value;
                        OBJ_CALL(value = self->object._get_suffixStart());
                        return PyInt_FromLong((long) value);
                    }

                    static PyObject *t_FreqLexicon_get__numEntries(t_FreqLexicon *self, void *data)
                    {
                        jint value;
                        OBJ_CALL(value = self->object.getNumEntries());
                        return PyInt_FromLong((long) value);
                    }

                    static PyObject *t_FreqLexicon_get__tagsLower(t_FreqLexicon *self, void *data)
                    {
                        ::java::util::Vector value((jobject) NULL);
                        OBJ_CALL(value = self->object.getTagsLower());
                        return ::java::util::t_Vector::wrap_Object(value);
                    }

                    static PyObject *t_FreqLexicon_get__tagsUpper(t_FreqLexicon *self, void *data)
                    {
                        ::java::util::Vector value((jobject) NULL);
                        OBJ_CALL(value = self->object.getTagsUpper());
                        return ::java::util::t_Vector::wrap_Object(value);
                    }

                    static PyObject *t_FreqLexicon_get__theta(t_FreqLexicon *self, void *data)
                    {
                        jdouble value;
                        OBJ_CALL(value = self->object.getTheta());
                        return PyFloat_FromDouble((double) value);
                    }
                }
            }
        }
    }
}
#include <jni.h>
#include "JCCEnv.h"
#include "is/iclt/icenlp/core/lemmald/Trainer.h"
#include "is/iclt/icenlp/core/lemmald/LemmaWord.h"
#include "java/util/Hashtable.h"
#include "java/util/ArrayList.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace is {
    namespace iclt {
        namespace icenlp {
            namespace core {
                namespace lemmald {

                    ::java::lang::Class *Trainer::class$ = NULL;
                    jmethodID *Trainer::mids$ = NULL;

                    jclass Trainer::initializeClass()
                    {
                        if (!class$)
                        {

                            jclass cls = (jclass) env->findClass("is/iclt/icenlp/core/lemmald/Trainer");

                            mids$ = new jmethodID[max_mid];
                            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                            mids$[mid_createRules_c996b0ca] = env->getStaticMethodID(cls, "createRules", "(Lis/iclt/icenlp/core/lemmald/LemmaWord;)Ljava/util/Hashtable;");
                            mids$[mid_createRules_1e41fe25] = env->getStaticMethodID(cls, "createRules", "(Lis/iclt/icenlp/core/lemmald/LemmaWord;Z)Ljava/util/Hashtable;");
                            mids$[mid_createRules_eb58b49e] = env->getStaticMethodID(cls, "createRules", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Z)Ljava/util/Hashtable;");
                            mids$[mid_loadTrainingData_e5d0f376] = env->getStaticMethodID(cls, "loadTrainingData", "(Ljava/lang/String;)Ljava/util/ArrayList;");
                            mids$[mid_loadTrainingData_e2a42533] = env->getStaticMethodID(cls, "loadTrainingData", "(Ljava/lang/String;Z)Ljava/util/ArrayList;");
                            mids$[mid_trainLemmatizer_4a264742] = env->getMethodID(cls, "trainLemmatizer", "(Ljava/lang/String;Ljava/lang/String;)V");

                            class$ = (::java::lang::Class *) new JObject(cls);
                        }
                        return (jclass) class$->this$;
                    }

                    Trainer::Trainer() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

                    ::java::util::Hashtable Trainer::createRules(const ::is::iclt::icenlp::core::lemmald::LemmaWord & a0)
                    {
                        jclass cls = initializeClass();
                        return ::java::util::Hashtable(env->callStaticObjectMethod(cls, mids$[mid_createRules_c996b0ca], a0.this$));
                    }

                    ::java::util::Hashtable Trainer::createRules(const ::is::iclt::icenlp::core::lemmald::LemmaWord & a0, jboolean a1)
                    {
                        jclass cls = initializeClass();
                        return ::java::util::Hashtable(env->callStaticObjectMethod(cls, mids$[mid_createRules_1e41fe25], a0.this$, a1));
                    }

                    ::java::util::Hashtable Trainer::createRules(const ::java::lang::String & a0, const ::java::lang::String & a1, const ::java::lang::String & a2, jboolean a3)
                    {
                        jclass cls = initializeClass();
                        return ::java::util::Hashtable(env->callStaticObjectMethod(cls, mids$[mid_createRules_eb58b49e], a0.this$, a1.this$, a2.this$, a3));
                    }

                    ::java::util::ArrayList Trainer::loadTrainingData(const ::java::lang::String & a0)
                    {
                        jclass cls = initializeClass();
                        return ::java::util::ArrayList(env->callStaticObjectMethod(cls, mids$[mid_loadTrainingData_e5d0f376], a0.this$));
                    }

                    ::java::util::ArrayList Trainer::loadTrainingData(const ::java::lang::String & a0, jboolean a1)
                    {
                        jclass cls = initializeClass();
                        return ::java::util::ArrayList(env->callStaticObjectMethod(cls, mids$[mid_loadTrainingData_e2a42533], a0.this$, a1));
                    }

                    void Trainer::trainLemmatizer(const ::java::lang::String & a0, const ::java::lang::String & a1) const
                    {
                        env->callVoidMethod(this$, mids$[mid_trainLemmatizer_4a264742], a0.this$, a1.this$);
                    }
                }
            }
        }
    }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace is {
    namespace iclt {
        namespace icenlp {
            namespace core {
                namespace lemmald {
                    static PyObject *t_Trainer_cast_(PyTypeObject *type, PyObject *arg);
                    static PyObject *t_Trainer_instance_(PyTypeObject *type, PyObject *arg);
                    static int t_Trainer_init_(t_Trainer *self, PyObject *args, PyObject *kwds);
                    static PyObject *t_Trainer_createRules(PyTypeObject *type, PyObject *args);
                    static PyObject *t_Trainer_loadTrainingData(PyTypeObject *type, PyObject *args);
                    static PyObject *t_Trainer_trainLemmatizer(t_Trainer *self, PyObject *args);

                    static PyMethodDef t_Trainer__methods_[] = {
                        DECLARE_METHOD(t_Trainer, cast_, METH_O | METH_CLASS),
                        DECLARE_METHOD(t_Trainer, instance_, METH_O | METH_CLASS),
                        DECLARE_METHOD(t_Trainer, createRules, METH_VARARGS | METH_CLASS),
                        DECLARE_METHOD(t_Trainer, loadTrainingData, METH_VARARGS | METH_CLASS),
                        DECLARE_METHOD(t_Trainer, trainLemmatizer, METH_VARARGS),
                        { NULL, NULL, 0, NULL }
                    };

                    DECLARE_TYPE(Trainer, t_Trainer, ::java::lang::Object, Trainer, t_Trainer_init_, 0, 0, 0, 0, 0);

                    void t_Trainer::install(PyObject *module)
                    {
                        installType(&PY_TYPE(Trainer), module, "Trainer", 0);
                    }

                    void t_Trainer::initialize(PyObject *module)
                    {
                        PyDict_SetItemString(PY_TYPE(Trainer).tp_dict, "class_", make_descriptor(Trainer::initializeClass, 1));
                        PyDict_SetItemString(PY_TYPE(Trainer).tp_dict, "wrapfn_", make_descriptor(t_Trainer::wrap_jobject));
                        PyDict_SetItemString(PY_TYPE(Trainer).tp_dict, "boxfn_", make_descriptor(boxObject));
                    }

                    static PyObject *t_Trainer_cast_(PyTypeObject *type, PyObject *arg)
                    {
                        if (!(arg = castCheck(arg, Trainer::initializeClass, 1)))
                            return NULL;
                        return t_Trainer::wrap_Object(Trainer(((t_Trainer *) arg)->object.this$));
                    }
                    static PyObject *t_Trainer_instance_(PyTypeObject *type, PyObject *arg)
                    {
                        if (!castCheck(arg, Trainer::initializeClass, 0))
                            Py_RETURN_FALSE;
                        Py_RETURN_TRUE;
                    }

                    static int t_Trainer_init_(t_Trainer *self, PyObject *args, PyObject *kwds)
                    {
                        Trainer object((jobject) NULL);

                        INT_CALL(object = Trainer());
                        self->object = object;

                        return 0;
                    }

                    static PyObject *t_Trainer_createRules(PyTypeObject *type, PyObject *args)
                    {
                        switch (PyTuple_GET_SIZE(args)) {
                          case 1:
                            {
                                ::is::iclt::icenlp::core::lemmald::LemmaWord a0((jobject) NULL);
                                ::java::util::Hashtable result((jobject) NULL);

                                if (!parseArgs(args, "k", ::is::iclt::icenlp::core::lemmald::LemmaWord::initializeClass, &a0))
                                {
                                    OBJ_CALL(result = ::is::iclt::icenlp::core::lemmald::Trainer::createRules(a0));
                                    return ::java::util::t_Hashtable::wrap_Object(result, &::java::lang::PY_TYPE(String), &::java::lang::PY_TYPE(String));
                                }
                            }
                            break;
                          case 2:
                            {
                                ::is::iclt::icenlp::core::lemmald::LemmaWord a0((jobject) NULL);
                                jboolean a1;
                                ::java::util::Hashtable result((jobject) NULL);

                                if (!parseArgs(args, "kZ", ::is::iclt::icenlp::core::lemmald::LemmaWord::initializeClass, &a0, &a1))
                                {
                                    OBJ_CALL(result = ::is::iclt::icenlp::core::lemmald::Trainer::createRules(a0, a1));
                                    return ::java::util::t_Hashtable::wrap_Object(result, &::java::lang::PY_TYPE(String), &::java::lang::PY_TYPE(String));
                                }
                            }
                            break;
                          case 4:
                            {
                                ::java::lang::String a0((jobject) NULL);
                                ::java::lang::String a1((jobject) NULL);
                                ::java::lang::String a2((jobject) NULL);
                                jboolean a3;
                                ::java::util::Hashtable result((jobject) NULL);

                                if (!parseArgs(args, "sssZ", &a0, &a1, &a2, &a3))
                                {
                                    OBJ_CALL(result = ::is::iclt::icenlp::core::lemmald::Trainer::createRules(a0, a1, a2, a3));
                                    return ::java::util::t_Hashtable::wrap_Object(result, &::java::lang::PY_TYPE(String), &::java::lang::PY_TYPE(String));
                                }
                            }
                        }

                        PyErr_SetArgsError(type, "createRules", args);
                        return NULL;
                    }

                    static PyObject *t_Trainer_loadTrainingData(PyTypeObject *type, PyObject *args)
                    {
                        switch (PyTuple_GET_SIZE(args)) {
                          case 1:
                            {
                                ::java::lang::String a0((jobject) NULL);
                                ::java::util::ArrayList result((jobject) NULL);

                                if (!parseArgs(args, "s", &a0))
                                {
                                    OBJ_CALL(result = ::is::iclt::icenlp::core::lemmald::Trainer::loadTrainingData(a0));
                                    return ::java::util::t_ArrayList::wrap_Object(result, &::is::iclt::icenlp::core::lemmald::PY_TYPE(LemmaWord));
                                }
                            }
                            break;
                          case 2:
                            {
                                ::java::lang::String a0((jobject) NULL);
                                jboolean a1;
                                ::java::util::ArrayList result((jobject) NULL);

                                if (!parseArgs(args, "sZ", &a0, &a1))
                                {
                                    OBJ_CALL(result = ::is::iclt::icenlp::core::lemmald::Trainer::loadTrainingData(a0, a1));
                                    return ::java::util::t_ArrayList::wrap_Object(result, &::is::iclt::icenlp::core::lemmald::PY_TYPE(LemmaWord));
                                }
                            }
                        }

                        PyErr_SetArgsError(type, "loadTrainingData", args);
                        return NULL;
                    }

                    static PyObject *t_Trainer_trainLemmatizer(t_Trainer *self, PyObject *args)
                    {
                        ::java::lang::String a0((jobject) NULL);
                        ::java::lang::String a1((jobject) NULL);

                        if (!parseArgs(args, "ss", &a0, &a1))
                        {
                            OBJ_CALL(self->object.trainLemmatizer(a0, a1));
                            Py_RETURN_NONE;
                        }

                        PyErr_SetArgsError((PyObject *) self, "trainLemmatizer", args);
                        return NULL;
                    }
                }
            }
        }
    }
}
#include <jni.h>
#include "JCCEnv.h"
#include "is/iclt/icenlp/core/iceNER/NameSearcher$Role.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace is {
    namespace iclt {
        namespace icenlp {
            namespace core {
                namespace iceNER {

                    ::java::lang::Class *NameSearcher$Role::class$ = NULL;
                    jmethodID *NameSearcher$Role::mids$ = NULL;
                    NameSearcher$Role *NameSearcher$Role::NOVALUE = NULL;
                    NameSearcher$Role *NameSearcher$Role::RELATION_PERSON = NULL;
                    NameSearcher$Role *NameSearcher$Role::ROLE_COMPANY = NULL;
                    NameSearcher$Role *NameSearcher$Role::ROLE_EVENT = NULL;
                    NameSearcher$Role *NameSearcher$Role::ROLE_LOCATION = NULL;
                    NameSearcher$Role *NameSearcher$Role::ROLE_PERSON = NULL;

                    jclass NameSearcher$Role::initializeClass()
                    {
                        if (!class$)
                        {

                            jclass cls = (jclass) env->findClass("is/iclt/icenlp/core/iceNER/NameSearcher$Role");

                            mids$ = new jmethodID[max_mid];
                            mids$[mid_toRole_71411865] = env->getStaticMethodID(cls, "toRole", "(Ljava/lang/String;)Lis/iclt/icenlp/core/iceNER/NameSearcher$Role;");
                            mids$[mid_valueOf_71411865] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;)Lis/iclt/icenlp/core/iceNER/NameSearcher$Role;");
                            mids$[mid_values_429eaf57] = env->getStaticMethodID(cls, "values", "()[Lis/iclt/icenlp/core/iceNER/NameSearcher$Role;");

                            class$ = (::java::lang::Class *) new JObject(cls);
                            cls = (jclass) class$->this$;

                            NOVALUE = new NameSearcher$Role(env->getStaticObjectField(cls, "NOVALUE", "Lis/iclt/icenlp/core/iceNER/NameSearcher$Role;"));
                            RELATION_PERSON = new NameSearcher$Role(env->getStaticObjectField(cls, "RELATION_PERSON", "Lis/iclt/icenlp/core/iceNER/NameSearcher$Role;"));
                            ROLE_COMPANY = new NameSearcher$Role(env->getStaticObjectField(cls, "ROLE_COMPANY", "Lis/iclt/icenlp/core/iceNER/NameSearcher$Role;"));
                            ROLE_EVENT = new NameSearcher$Role(env->getStaticObjectField(cls, "ROLE_EVENT", "Lis/iclt/icenlp/core/iceNER/NameSearcher$Role;"));
                            ROLE_LOCATION = new NameSearcher$Role(env->getStaticObjectField(cls, "ROLE_LOCATION", "Lis/iclt/icenlp/core/iceNER/NameSearcher$Role;"));
                            ROLE_PERSON = new NameSearcher$Role(env->getStaticObjectField(cls, "ROLE_PERSON", "Lis/iclt/icenlp/core/iceNER/NameSearcher$Role;"));
                        }
                        return (jclass) class$->this$;
                    }

                    NameSearcher$Role NameSearcher$Role::toRole(const ::java::lang::String & a0)
                    {
                        jclass cls = initializeClass();
                        return NameSearcher$Role(env->callStaticObjectMethod(cls, mids$[mid_toRole_71411865], a0.this$));
                    }

                    NameSearcher$Role NameSearcher$Role::valueOf(const ::java::lang::String & a0)
                    {
                        jclass cls = initializeClass();
                        return NameSearcher$Role(env->callStaticObjectMethod(cls, mids$[mid_valueOf_71411865], a0.this$));
                    }

                    JArray< NameSearcher$Role > NameSearcher$Role::values()
                    {
                        jclass cls = initializeClass();
                        return JArray< NameSearcher$Role >(env->callStaticObjectMethod(cls, mids$[mid_values_429eaf57]));
                    }
                }
            }
        }
    }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace is {
    namespace iclt {
        namespace icenlp {
            namespace core {
                namespace iceNER {
                    static PyObject *t_NameSearcher$Role_cast_(PyTypeObject *type, PyObject *arg);
                    static PyObject *t_NameSearcher$Role_instance_(PyTypeObject *type, PyObject *arg);
                    static PyObject *t_NameSearcher$Role_toRole(PyTypeObject *type, PyObject *arg);
                    static PyObject *t_NameSearcher$Role_valueOf(PyTypeObject *type, PyObject *args);
                    static PyObject *t_NameSearcher$Role_values(PyTypeObject *type);

                    static PyMethodDef t_NameSearcher$Role__methods_[] = {
                        DECLARE_METHOD(t_NameSearcher$Role, cast_, METH_O | METH_CLASS),
                        DECLARE_METHOD(t_NameSearcher$Role, instance_, METH_O | METH_CLASS),
                        DECLARE_METHOD(t_NameSearcher$Role, toRole, METH_O | METH_CLASS),
                        DECLARE_METHOD(t_NameSearcher$Role, valueOf, METH_VARARGS | METH_CLASS),
                        DECLARE_METHOD(t_NameSearcher$Role, values, METH_NOARGS | METH_CLASS),
                        { NULL, NULL, 0, NULL }
                    };

                    DECLARE_TYPE(NameSearcher$Role, t_NameSearcher$Role, ::java::lang::Enum, NameSearcher$Role, abstract_init, 0, 0, 0, 0, 0);

                    void t_NameSearcher$Role::install(PyObject *module)
                    {
                        installType(&PY_TYPE(NameSearcher$Role), module, "NameSearcher$Role", 0);
                    }

                    void t_NameSearcher$Role::initialize(PyObject *module)
                    {
                        PyDict_SetItemString(PY_TYPE(NameSearcher$Role).tp_dict, "class_", make_descriptor(NameSearcher$Role::initializeClass, 1));
                        PyDict_SetItemString(PY_TYPE(NameSearcher$Role).tp_dict, "wrapfn_", make_descriptor(t_NameSearcher$Role::wrap_jobject));
                        PyDict_SetItemString(PY_TYPE(NameSearcher$Role).tp_dict, "boxfn_", make_descriptor(boxObject));
                        NameSearcher$Role::initializeClass();
                        PyDict_SetItemString(PY_TYPE(NameSearcher$Role).tp_dict, "NOVALUE", make_descriptor(t_NameSearcher$Role::wrap_Object(*NameSearcher$Role::NOVALUE)));
                        PyDict_SetItemString(PY_TYPE(NameSearcher$Role).tp_dict, "RELATION_PERSON", make_descriptor(t_NameSearcher$Role::wrap_Object(*NameSearcher$Role::RELATION_PERSON)));
                        PyDict_SetItemString(PY_TYPE(NameSearcher$Role).tp_dict, "ROLE_COMPANY", make_descriptor(t_NameSearcher$Role::wrap_Object(*NameSearcher$Role::ROLE_COMPANY)));
                        PyDict_SetItemString(PY_TYPE(NameSearcher$Role).tp_dict, "ROLE_EVENT", make_descriptor(t_NameSearcher$Role::wrap_Object(*NameSearcher$Role::ROLE_EVENT)));
                        PyDict_SetItemString(PY_TYPE(NameSearcher$Role).tp_dict, "ROLE_LOCATION", make_descriptor(t_NameSearcher$Role::wrap_Object(*NameSearcher$Role::ROLE_LOCATION)));
                        PyDict_SetItemString(PY_TYPE(NameSearcher$Role).tp_dict, "ROLE_PERSON", make_descriptor(t_NameSearcher$Role::wrap_Object(*NameSearcher$Role::ROLE_PERSON)));
                    }

                    static PyObject *t_NameSearcher$Role_cast_(PyTypeObject *type, PyObject *arg)
                    {
                        if (!(arg = castCheck(arg, NameSearcher$Role::initializeClass, 1)))
                            return NULL;
                        return t_NameSearcher$Role::wrap_Object(NameSearcher$Role(((t_NameSearcher$Role *) arg)->object.this$));
                    }
                    static PyObject *t_NameSearcher$Role_instance_(PyTypeObject *type, PyObject *arg)
                    {
                        if (!castCheck(arg, NameSearcher$Role::initializeClass, 0))
                            Py_RETURN_FALSE;
                        Py_RETURN_TRUE;
                    }

                    static PyObject *t_NameSearcher$Role_toRole(PyTypeObject *type, PyObject *arg)
                    {
                        ::java::lang::String a0((jobject) NULL);
                        NameSearcher$Role result((jobject) NULL);

                        if (!parseArg(arg, "s", &a0))
                        {
                            OBJ_CALL(result = ::is::iclt::icenlp::core::iceNER::NameSearcher$Role::toRole(a0));
                            return t_NameSearcher$Role::wrap_Object(result);
                        }

                        PyErr_SetArgsError(type, "toRole", arg);
                        return NULL;
                    }

                    static PyObject *t_NameSearcher$Role_valueOf(PyTypeObject *type, PyObject *args)
                    {
                        ::java::lang::String a0((jobject) NULL);
                        NameSearcher$Role result((jobject) NULL);

                        if (!parseArgs(args, "s", &a0))
                        {
                            OBJ_CALL(result = ::is::iclt::icenlp::core::iceNER::NameSearcher$Role::valueOf(a0));
                            return t_NameSearcher$Role::wrap_Object(result);
                        }

                        return callSuper(type, "valueOf", args, 2);
                    }

                    static PyObject *t_NameSearcher$Role_values(PyTypeObject *type)
                    {
                        JArray< NameSearcher$Role > result((jobject) NULL);
                        OBJ_CALL(result = ::is::iclt::icenlp::core::iceNER::NameSearcher$Role::values());
                        return JArray<jobject>(result.this$).wrap(t_NameSearcher$Role::wrap_jobject);
                    }
                }
            }
        }
    }
}
#include <jni.h>
#include "JCCEnv.h"
#include "is/iclt/icenlp/core/utils/XmlOperations.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace is {
    namespace iclt {
        namespace icenlp {
            namespace core {
                namespace utils {

                    ::java::lang::Class *XmlOperations::class$ = NULL;
                    jmethodID *XmlOperations::mids$ = NULL;

                    jclass XmlOperations::initializeClass()
                    {
                        if (!class$)
                        {

                            jclass cls = (jclass) env->findClass("is/iclt/icenlp/core/utils/XmlOperations");

                            mids$ = new jmethodID[max_mid];
                            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");

                            class$ = (::java::lang::Class *) new JObject(cls);
                        }
                        return (jclass) class$->this$;
                    }

                    XmlOperations::XmlOperations() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}
                }
            }
        }
    }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace is {
    namespace iclt {
        namespace icenlp {
            namespace core {
                namespace utils {
                    static PyObject *t_XmlOperations_cast_(PyTypeObject *type, PyObject *arg);
                    static PyObject *t_XmlOperations_instance_(PyTypeObject *type, PyObject *arg);
                    static int t_XmlOperations_init_(t_XmlOperations *self, PyObject *args, PyObject *kwds);

                    static PyMethodDef t_XmlOperations__methods_[] = {
                        DECLARE_METHOD(t_XmlOperations, cast_, METH_O | METH_CLASS),
                        DECLARE_METHOD(t_XmlOperations, instance_, METH_O | METH_CLASS),
                        { NULL, NULL, 0, NULL }
                    };

                    DECLARE_TYPE(XmlOperations, t_XmlOperations, ::java::lang::Object, XmlOperations, t_XmlOperations_init_, 0, 0, 0, 0, 0);

                    void t_XmlOperations::install(PyObject *module)
                    {
                        installType(&PY_TYPE(XmlOperations), module, "XmlOperations", 0);
                    }

                    void t_XmlOperations::initialize(PyObject *module)
                    {
                        PyDict_SetItemString(PY_TYPE(XmlOperations).tp_dict, "class_", make_descriptor(XmlOperations::initializeClass, 1));
                        PyDict_SetItemString(PY_TYPE(XmlOperations).tp_dict, "wrapfn_", make_descriptor(t_XmlOperations::wrap_jobject));
                        PyDict_SetItemString(PY_TYPE(XmlOperations).tp_dict, "boxfn_", make_descriptor(boxObject));
                    }

                    static PyObject *t_XmlOperations_cast_(PyTypeObject *type, PyObject *arg)
                    {
                        if (!(arg = castCheck(arg, XmlOperations::initializeClass, 1)))
                            return NULL;
                        return t_XmlOperations::wrap_Object(XmlOperations(((t_XmlOperations *) arg)->object.this$));
                    }
                    static PyObject *t_XmlOperations_instance_(PyTypeObject *type, PyObject *arg)
                    {
                        if (!castCheck(arg, XmlOperations::initializeClass, 0))
                            Py_RETURN_FALSE;
                        Py_RETURN_TRUE;
                    }

                    static int t_XmlOperations_init_(t_XmlOperations *self, PyObject *args, PyObject *kwds)
                    {
                        XmlOperations object((jobject) NULL);

                        INT_CALL(object = XmlOperations());
                        self->object = object;

                        return 0;
                    }
                }
            }
        }
    }
}
#include <jni.h>
#include "JCCEnv.h"
#include "is/iclt/icenlp/core/tokenizer/Token$MWECode.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace is {
    namespace iclt {
        namespace icenlp {
            namespace core {
                namespace tokenizer {

                    ::java::lang::Class *Token$MWECode::class$ = NULL;
                    jmethodID *Token$MWECode::mids$ = NULL;
                    Token$MWECode *Token$MWECode::begins = NULL;
                    Token$MWECode *Token$MWECode::ends = NULL;
                    Token$MWECode *Token$MWECode::none = NULL;

                    jclass Token$MWECode::initializeClass()
                    {
                        if (!class$)
                        {

                            jclass cls = (jclass) env->findClass("is/iclt/icenlp/core/tokenizer/Token$MWECode");

                            mids$ = new jmethodID[max_mid];
                            mids$[mid_valueOf_2e8728ea] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;)Lis/iclt/icenlp/core/tokenizer/Token$MWECode;");
                            mids$[mid_values_3d238c7c] = env->getStaticMethodID(cls, "values", "()[Lis/iclt/icenlp/core/tokenizer/Token$MWECode;");

                            class$ = (::java::lang::Class *) new JObject(cls);
                            cls = (jclass) class$->this$;

                            begins = new Token$MWECode(env->getStaticObjectField(cls, "begins", "Lis/iclt/icenlp/core/tokenizer/Token$MWECode;"));
                            ends = new Token$MWECode(env->getStaticObjectField(cls, "ends", "Lis/iclt/icenlp/core/tokenizer/Token$MWECode;"));
                            none = new Token$MWECode(env->getStaticObjectField(cls, "none", "Lis/iclt/icenlp/core/tokenizer/Token$MWECode;"));
                        }
                        return (jclass) class$->this$;
                    }

                    Token$MWECode Token$MWECode::valueOf(const ::java::lang::String & a0)
                    {
                        jclass cls = initializeClass();
                        return Token$MWECode(env->callStaticObjectMethod(cls, mids$[mid_valueOf_2e8728ea], a0.this$));
                    }

                    JArray< Token$MWECode > Token$MWECode::values()
                    {
                        jclass cls = initializeClass();
                        return JArray< Token$MWECode >(env->callStaticObjectMethod(cls, mids$[mid_values_3d238c7c]));
                    }
                }
            }
        }
    }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace is {
    namespace iclt {
        namespace icenlp {
            namespace core {
                namespace tokenizer {
                    static PyObject *t_Token$MWECode_cast_(PyTypeObject *type, PyObject *arg);
                    static PyObject *t_Token$MWECode_instance_(PyTypeObject *type, PyObject *arg);
                    static PyObject *t_Token$MWECode_valueOf(PyTypeObject *type, PyObject *args);
                    static PyObject *t_Token$MWECode_values(PyTypeObject *type);

                    static PyMethodDef t_Token$MWECode__methods_[] = {
                        DECLARE_METHOD(t_Token$MWECode, cast_, METH_O | METH_CLASS),
                        DECLARE_METHOD(t_Token$MWECode, instance_, METH_O | METH_CLASS),
                        DECLARE_METHOD(t_Token$MWECode, valueOf, METH_VARARGS | METH_CLASS),
                        DECLARE_METHOD(t_Token$MWECode, values, METH_NOARGS | METH_CLASS),
                        { NULL, NULL, 0, NULL }
                    };

                    DECLARE_TYPE(Token$MWECode, t_Token$MWECode, ::java::lang::Enum, Token$MWECode, abstract_init, 0, 0, 0, 0, 0);

                    void t_Token$MWECode::install(PyObject *module)
                    {
                        installType(&PY_TYPE(Token$MWECode), module, "Token$MWECode", 0);
                    }

                    void t_Token$MWECode::initialize(PyObject *module)
                    {
                        PyDict_SetItemString(PY_TYPE(Token$MWECode).tp_dict, "class_", make_descriptor(Token$MWECode::initializeClass, 1));
                        PyDict_SetItemString(PY_TYPE(Token$MWECode).tp_dict, "wrapfn_", make_descriptor(t_Token$MWECode::wrap_jobject));
                        PyDict_SetItemString(PY_TYPE(Token$MWECode).tp_dict, "boxfn_", make_descriptor(boxObject));
                        Token$MWECode::initializeClass();
                        PyDict_SetItemString(PY_TYPE(Token$MWECode).tp_dict, "begins", make_descriptor(t_Token$MWECode::wrap_Object(*Token$MWECode::begins)));
                        PyDict_SetItemString(PY_TYPE(Token$MWECode).tp_dict, "ends", make_descriptor(t_Token$MWECode::wrap_Object(*Token$MWECode::ends)));
                        PyDict_SetItemString(PY_TYPE(Token$MWECode).tp_dict, "none", make_descriptor(t_Token$MWECode::wrap_Object(*Token$MWECode::none)));
                    }

                    static PyObject *t_Token$MWECode_cast_(PyTypeObject *type, PyObject *arg)
                    {
                        if (!(arg = castCheck(arg, Token$MWECode::initializeClass, 1)))
                            return NULL;
                        return t_Token$MWECode::wrap_Object(Token$MWECode(((t_Token$MWECode *) arg)->object.this$));
                    }
                    static PyObject *t_Token$MWECode_instance_(PyTypeObject *type, PyObject *arg)
                    {
                        if (!castCheck(arg, Token$MWECode::initializeClass, 0))
                            Py_RETURN_FALSE;
                        Py_RETURN_TRUE;
                    }

                    static PyObject *t_Token$MWECode_valueOf(PyTypeObject *type, PyObject *args)
                    {
                        ::java::lang::String a0((jobject) NULL);
                        Token$MWECode result((jobject) NULL);

                        if (!parseArgs(args, "s", &a0))
                        {
                            OBJ_CALL(result = ::is::iclt::icenlp::core::tokenizer::Token$MWECode::valueOf(a0));
                            return t_Token$MWECode::wrap_Object(result);
                        }

                        return callSuper(type, "valueOf", args, 2);
                    }

                    static PyObject *t_Token$MWECode_values(PyTypeObject *type)
                    {
                        JArray< Token$MWECode > result((jobject) NULL);
                        OBJ_CALL(result = ::is::iclt::icenlp::core::tokenizer::Token$MWECode::values());
                        return JArray<jobject>(result.this$).wrap(t_Token$MWECode::wrap_jobject);
                    }
                }
            }
        }
    }
}
#include <jni.h>
#include "JCCEnv.h"
#include "is/iclt/icenlp/runner/RunTrie.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace is {
    namespace iclt {
        namespace icenlp {
            namespace runner {

                ::java::lang::Class *RunTrie::class$ = NULL;
                jmethodID *RunTrie::mids$ = NULL;

                jclass RunTrie::initializeClass()
                {
                    if (!class$)
                    {

                        jclass cls = (jclass) env->findClass("is/iclt/icenlp/runner/RunTrie");

                        mids$ = new jmethodID[max_mid];
                        mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                        mids$[mid_main_4dd4540c] = env->getStaticMethodID(cls, "main", "([Ljava/lang/String;)V");

                        class$ = (::java::lang::Class *) new JObject(cls);
                    }
                    return (jclass) class$->this$;
                }

                RunTrie::RunTrie() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

                void RunTrie::main(const JArray< ::java::lang::String > & a0)
                {
                    jclass cls = initializeClass();
                    env->callStaticVoidMethod(cls, mids$[mid_main_4dd4540c], a0.this$);
                }
            }
        }
    }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace is {
    namespace iclt {
        namespace icenlp {
            namespace runner {
                static PyObject *t_RunTrie_cast_(PyTypeObject *type, PyObject *arg);
                static PyObject *t_RunTrie_instance_(PyTypeObject *type, PyObject *arg);
                static int t_RunTrie_init_(t_RunTrie *self, PyObject *args, PyObject *kwds);
                static PyObject *t_RunTrie_main(PyTypeObject *type, PyObject *arg);

                static PyMethodDef t_RunTrie__methods_[] = {
                    DECLARE_METHOD(t_RunTrie, cast_, METH_O | METH_CLASS),
                    DECLARE_METHOD(t_RunTrie, instance_, METH_O | METH_CLASS),
                    DECLARE_METHOD(t_RunTrie, main, METH_O | METH_CLASS),
                    { NULL, NULL, 0, NULL }
                };

                DECLARE_TYPE(RunTrie, t_RunTrie, ::java::lang::Object, RunTrie, t_RunTrie_init_, 0, 0, 0, 0, 0);

                void t_RunTrie::install(PyObject *module)
                {
                    installType(&PY_TYPE(RunTrie), module, "RunTrie", 0);
                }

                void t_RunTrie::initialize(PyObject *module)
                {
                    PyDict_SetItemString(PY_TYPE(RunTrie).tp_dict, "class_", make_descriptor(RunTrie::initializeClass, 1));
                    PyDict_SetItemString(PY_TYPE(RunTrie).tp_dict, "wrapfn_", make_descriptor(t_RunTrie::wrap_jobject));
                    PyDict_SetItemString(PY_TYPE(RunTrie).tp_dict, "boxfn_", make_descriptor(boxObject));
                }

                static PyObject *t_RunTrie_cast_(PyTypeObject *type, PyObject *arg)
                {
                    if (!(arg = castCheck(arg, RunTrie::initializeClass, 1)))
                        return NULL;
                    return t_RunTrie::wrap_Object(RunTrie(((t_RunTrie *) arg)->object.this$));
                }
                static PyObject *t_RunTrie_instance_(PyTypeObject *type, PyObject *arg)
                {
                    if (!castCheck(arg, RunTrie::initializeClass, 0))
                        Py_RETURN_FALSE;
                    Py_RETURN_TRUE;
                }

                static int t_RunTrie_init_(t_RunTrie *self, PyObject *args, PyObject *kwds)
                {
                    RunTrie object((jobject) NULL);

                    INT_CALL(object = RunTrie());
                    self->object = object;

                    return 0;
                }

                static PyObject *t_RunTrie_main(PyTypeObject *type, PyObject *arg)
                {
                    JArray< ::java::lang::String > a0((jobject) NULL);

                    if (!parseArg(arg, "[s", &a0))
                    {
                        OBJ_CALL(::is::iclt::icenlp::runner::RunTrie::main(a0));
                        Py_RETURN_NONE;
                    }

                    PyErr_SetArgsError(type, "main", arg);
                    return NULL;
                }
            }
        }
    }
}
#include <jni.h>
#include "JCCEnv.h"
#include "is/iclt/icenlp/core/iceparser/Case_NP.h"
#include "java/io/IOException.h"
#include "java/io/Reader.h"
#include "java/io/Writer.h"
#include "java/lang/Class.h"
#include "java/io/InputStream.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace is {
    namespace iclt {
        namespace icenlp {
            namespace core {
                namespace iceparser {

                    ::java::lang::Class *Case_NP::class$ = NULL;
                    jmethodID *Case_NP::mids$ = NULL;
                    jint Case_NP::YYEOF = (jint) 0;
                    jint Case_NP::YYINITIAL = (jint) 0;

                    jclass Case_NP::initializeClass()
                    {
                        if (!class$)
                        {

                            jclass cls = (jclass) env->findClass("is/iclt/icenlp/core/iceparser/Case_NP");

                            mids$ = new jmethodID[max_mid];
                            mids$[mid_init$_cf2e3c10] = env->getMethodID(cls, "<init>", "(Ljava/io/Reader;)V");
                            mids$[mid_init$_be2e4f90] = env->getMethodID(cls, "<init>", "(Ljava/io/InputStream;)V");
                            mids$[mid_main_4dd4540c] = env->getStaticMethodID(cls, "main", "([Ljava/lang/String;)V");
                            mids$[mid_parse_5bcd5850] = env->getMethodID(cls, "parse", "(Ljava/io/Writer;)V");
                            mids$[mid_yybegin_39c7bd3c] = env->getMethodID(cls, "yybegin", "(I)V");
                            mids$[mid_yycharat_39c7bd29] = env->getMethodID(cls, "yycharat", "(I)C");
                            mids$[mid_yyclose_54c6a166] = env->getMethodID(cls, "yyclose", "()V");
                            mids$[mid_yylength_54c6a179] = env->getMethodID(cls, "yylength", "()I");
                            mids$[mid_yylex_54c6a179] = env->getMethodID(cls, "yylex", "()I");
                            mids$[mid_yypushback_39c7bd3c] = env->getMethodID(cls, "yypushback", "(I)V");
                            mids$[mid_yyreset_cf2e3c10] = env->getMethodID(cls, "yyreset", "(Ljava/io/Reader;)V");
                            mids$[mid_yystate_54c6a179] = env->getMethodID(cls, "yystate", "()I");
                            mids$[mid_yytext_14c7b5c5] = env->getMethodID(cls, "yytext", "()Ljava/lang/String;");

                            class$ = (::java::lang::Class *) new JObject(cls);
                            cls = (jclass) class$->this$;

                            YYEOF = env->getStaticIntField(cls, "YYEOF");
                            YYINITIAL = env->getStaticIntField(cls, "YYINITIAL");
                        }
                        return (jclass) class$->this$;
                    }

                    Case_NP::Case_NP(const ::java::io::Reader & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_cf2e3c10, a0.this$)) {}

                    Case_NP::Case_NP(const ::java::io::InputStream & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_be2e4f90, a0.this$)) {}

                    void Case_NP::main(const JArray< ::java::lang::String > & a0)
                    {
                        jclass cls = initializeClass();
                        env->callStaticVoidMethod(cls, mids$[mid_main_4dd4540c], a0.this$);
                    }

                    void Case_NP::parse(const ::java::io::Writer & a0) const
                    {
                        env->callVoidMethod(this$, mids$[mid_parse_5bcd5850], a0.this$);
                    }

                    void Case_NP::yybegin(jint a0) const
                    {
                        env->callVoidMethod(this$, mids$[mid_yybegin_39c7bd3c], a0);
                    }

                    jchar Case_NP::yycharat(jint a0) const
                    {
                        return env->callCharMethod(this$, mids$[mid_yycharat_39c7bd29], a0);
                    }

                    void Case_NP::yyclose() const
                    {
                        env->callVoidMethod(this$, mids$[mid_yyclose_54c6a166]);
                    }

                    jint Case_NP::yylength() const
                    {
                        return env->callIntMethod(this$, mids$[mid_yylength_54c6a179]);
                    }

                    jint Case_NP::yylex() const
                    {
                        return env->callIntMethod(this$, mids$[mid_yylex_54c6a179]);
                    }

                    void Case_NP::yypushback(jint a0) const
                    {
                        env->callVoidMethod(this$, mids$[mid_yypushback_39c7bd3c], a0);
                    }

                    void Case_NP::yyreset(const ::java::io::Reader & a0) const
                    {
                        env->callVoidMethod(this$, mids$[mid_yyreset_cf2e3c10], a0.this$);
                    }

                    jint Case_NP::yystate() const
                    {
                        return env->callIntMethod(this$, mids$[mid_yystate_54c6a179]);
                    }

                    ::java::lang::String Case_NP::yytext() const
                    {
                        return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_yytext_14c7b5c5]));
                    }
                }
            }
        }
    }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace is {
    namespace iclt {
        namespace icenlp {
            namespace core {
                namespace iceparser {
                    static PyObject *t_Case_NP_cast_(PyTypeObject *type, PyObject *arg);
                    static PyObject *t_Case_NP_instance_(PyTypeObject *type, PyObject *arg);
                    static int t_Case_NP_init_(t_Case_NP *self, PyObject *args, PyObject *kwds);
                    static PyObject *t_Case_NP_main(PyTypeObject *type, PyObject *arg);
                    static PyObject *t_Case_NP_parse(t_Case_NP *self, PyObject *arg);
                    static PyObject *t_Case_NP_yybegin(t_Case_NP *self, PyObject *arg);
                    static PyObject *t_Case_NP_yycharat(t_Case_NP *self, PyObject *arg);
                    static PyObject *t_Case_NP_yyclose(t_Case_NP *self);
                    static PyObject *t_Case_NP_yylength(t_Case_NP *self);
                    static PyObject *t_Case_NP_yylex(t_Case_NP *self);
                    static PyObject *t_Case_NP_yypushback(t_Case_NP *self, PyObject *arg);
                    static PyObject *t_Case_NP_yyreset(t_Case_NP *self, PyObject *arg);
                    static PyObject *t_Case_NP_yystate(t_Case_NP *self);
                    static PyObject *t_Case_NP_yytext(t_Case_NP *self);

                    static PyMethodDef t_Case_NP__methods_[] = {
                        DECLARE_METHOD(t_Case_NP, cast_, METH_O | METH_CLASS),
                        DECLARE_METHOD(t_Case_NP, instance_, METH_O | METH_CLASS),
                        DECLARE_METHOD(t_Case_NP, main, METH_O | METH_CLASS),
                        DECLARE_METHOD(t_Case_NP, parse, METH_O),
                        DECLARE_METHOD(t_Case_NP, yybegin, METH_O),
                        DECLARE_METHOD(t_Case_NP, yycharat, METH_O),
                        DECLARE_METHOD(t_Case_NP, yyclose, METH_NOARGS),
                        DECLARE_METHOD(t_Case_NP, yylength, METH_NOARGS),
                        DECLARE_METHOD(t_Case_NP, yylex, METH_NOARGS),
                        DECLARE_METHOD(t_Case_NP, yypushback, METH_O),
                        DECLARE_METHOD(t_Case_NP, yyreset, METH_O),
                        DECLARE_METHOD(t_Case_NP, yystate, METH_NOARGS),
                        DECLARE_METHOD(t_Case_NP, yytext, METH_NOARGS),
                        { NULL, NULL, 0, NULL }
                    };

                    DECLARE_TYPE(Case_NP, t_Case_NP, ::java::lang::Object, Case_NP, t_Case_NP_init_, 0, 0, 0, 0, 0);

                    void t_Case_NP::install(PyObject *module)
                    {
                        installType(&PY_TYPE(Case_NP), module, "Case_NP", 0);
                    }

                    void t_Case_NP::initialize(PyObject *module)
                    {
                        PyDict_SetItemString(PY_TYPE(Case_NP).tp_dict, "class_", make_descriptor(Case_NP::initializeClass, 1));
                        PyDict_SetItemString(PY_TYPE(Case_NP).tp_dict, "wrapfn_", make_descriptor(t_Case_NP::wrap_jobject));
                        PyDict_SetItemString(PY_TYPE(Case_NP).tp_dict, "boxfn_", make_descriptor(boxObject));
                        Case_NP::initializeClass();
                        PyDict_SetItemString(PY_TYPE(Case_NP).tp_dict, "YYEOF", make_descriptor(Case_NP::YYEOF));
                        PyDict_SetItemString(PY_TYPE(Case_NP).tp_dict, "YYINITIAL", make_descriptor(Case_NP::YYINITIAL));
                    }

                    static PyObject *t_Case_NP_cast_(PyTypeObject *type, PyObject *arg)
                    {
                        if (!(arg = castCheck(arg, Case_NP::initializeClass, 1)))
                            return NULL;
                        return t_Case_NP::wrap_Object(Case_NP(((t_Case_NP *) arg)->object.this$));
                    }
                    static PyObject *t_Case_NP_instance_(PyTypeObject *type, PyObject *arg)
                    {
                        if (!castCheck(arg, Case_NP::initializeClass, 0))
                            Py_RETURN_FALSE;
                        Py_RETURN_TRUE;
                    }

                    static int t_Case_NP_init_(t_Case_NP *self, PyObject *args, PyObject *kwds)
                    {
                        switch (PyTuple_GET_SIZE(args)) {
                          case 1:
                            {
                                ::java::io::Reader a0((jobject) NULL);
                                Case_NP object((jobject) NULL);

                                if (!parseArgs(args, "k", ::java::io::Reader::initializeClass, &a0))
                                {
                                    INT_CALL(object = Case_NP(a0));
                                    self->object = object;
                                    break;
                                }
                            }
                            {
                                ::java::io::InputStream a0((jobject) NULL);
                                Case_NP object((jobject) NULL);

                                if (!parseArgs(args, "k", ::java::io::InputStream::initializeClass, &a0))
                                {
                                    INT_CALL(object = Case_NP(a0));
                                    self->object = object;
                                    break;
                                }
                            }
                          default:
                            PyErr_SetArgsError((PyObject *) self, "__init__", args);
                            return -1;
                        }

                        return 0;
                    }

                    static PyObject *t_Case_NP_main(PyTypeObject *type, PyObject *arg)
                    {
                        JArray< ::java::lang::String > a0((jobject) NULL);

                        if (!parseArg(arg, "[s", &a0))
                        {
                            OBJ_CALL(::is::iclt::icenlp::core::iceparser::Case_NP::main(a0));
                            Py_RETURN_NONE;
                        }

                        PyErr_SetArgsError(type, "main", arg);
                        return NULL;
                    }

                    static PyObject *t_Case_NP_parse(t_Case_NP *self, PyObject *arg)
                    {
                        ::java::io::Writer a0((jobject) NULL);

                        if (!parseArg(arg, "k", ::java::io::Writer::initializeClass, &a0))
                        {
                            OBJ_CALL(self->object.parse(a0));
                            Py_RETURN_NONE;
                        }

                        PyErr_SetArgsError((PyObject *) self, "parse", arg);
                        return NULL;
                    }

                    static PyObject *t_Case_NP_yybegin(t_Case_NP *self, PyObject *arg)
                    {
                        jint a0;

                        if (!parseArg(arg, "I", &a0))
                        {
                            OBJ_CALL(self->object.yybegin(a0));
                            Py_RETURN_NONE;
                        }

                        PyErr_SetArgsError((PyObject *) self, "yybegin", arg);
                        return NULL;
                    }

                    static PyObject *t_Case_NP_yycharat(t_Case_NP *self, PyObject *arg)
                    {
                        jint a0;
                        jchar result;

                        if (!parseArg(arg, "I", &a0))
                        {
                            OBJ_CALL(result = self->object.yycharat(a0));
                            return PyUnicode_FromUnicode((Py_UNICODE *) &result, 1);
                        }

                        PyErr_SetArgsError((PyObject *) self, "yycharat", arg);
                        return NULL;
                    }

                    static PyObject *t_Case_NP_yyclose(t_Case_NP *self)
                    {
                        OBJ_CALL(self->object.yyclose());
                        Py_RETURN_NONE;
                    }

                    static PyObject *t_Case_NP_yylength(t_Case_NP *self)
                    {
                        jint result;
                        OBJ_CALL(result = self->object.yylength());
                        return PyInt_FromLong((long) result);
                    }

                    static PyObject *t_Case_NP_yylex(t_Case_NP *self)
                    {
                        jint result;
                        OBJ_CALL(result = self->object.yylex());
                        return PyInt_FromLong((long) result);
                    }

                    static PyObject *t_Case_NP_yypushback(t_Case_NP *self, PyObject *arg)
                    {
                        jint a0;

                        if (!parseArg(arg, "I", &a0))
                        {
                            OBJ_CALL(self->object.yypushback(a0));
                            Py_RETURN_NONE;
                        }

                        PyErr_SetArgsError((PyObject *) self, "yypushback", arg);
                        return NULL;
                    }

                    static PyObject *t_Case_NP_yyreset(t_Case_NP *self, PyObject *arg)
                    {
                        ::java::io::Reader a0((jobject) NULL);

                        if (!parseArg(arg, "k", ::java::io::Reader::initializeClass, &a0))
                        {
                            OBJ_CALL(self->object.yyreset(a0));
                            Py_RETURN_NONE;
                        }

                        PyErr_SetArgsError((PyObject *) self, "yyreset", arg);
                        return NULL;
                    }

                    static PyObject *t_Case_NP_yystate(t_Case_NP *self)
                    {
                        jint result;
                        OBJ_CALL(result = self->object.yystate());
                        return PyInt_FromLong((long) result);
                    }

                    static PyObject *t_Case_NP_yytext(t_Case_NP *self)
                    {
                        ::java::lang::String result((jobject) NULL);
                        OBJ_CALL(result = self->object.yytext());
                        return j2p(result);
                    }
                }
            }
        }
    }
}
#include <jni.h>
#include "JCCEnv.h"
#include "is/iclt/icenlp/core/iceNER/NameScanner.h"
#include "java/io/IOException.h"
#include "java/io/Reader.h"
#include "java/lang/Class.h"
#include "java/io/InputStream.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace is {
    namespace iclt {
        namespace icenlp {
            namespace core {
                namespace iceNER {

                    ::java::lang::Class *NameScanner::class$ = NULL;
                    jmethodID *NameScanner::mids$ = NULL;
                    jint NameScanner::YYEOF = (jint) 0;
                    jint NameScanner::YYINITIAL = (jint) 0;

                    jclass NameScanner::initializeClass()
                    {
                        if (!class$)
                        {

                            jclass cls = (jclass) env->findClass("is/iclt/icenlp/core/iceNER/NameScanner");

                            mids$ = new jmethodID[max_mid];
                            mids$[mid_init$_be2e4f90] = env->getMethodID(cls, "<init>", "(Ljava/io/InputStream;)V");
                            mids$[mid_init$_cf2e3c10] = env->getMethodID(cls, "<init>", "(Ljava/io/Reader;)V");
                            mids$[mid_main_4dd4540c] = env->getStaticMethodID(cls, "main", "([Ljava/lang/String;)V");
                            mids$[mid_yybegin_39c7bd3c] = env->getMethodID(cls, "yybegin", "(I)V");
                            mids$[mid_yycharat_39c7bd29] = env->getMethodID(cls, "yycharat", "(I)C");
                            mids$[mid_yyclose_54c6a166] = env->getMethodID(cls, "yyclose", "()V");
                            mids$[mid_yylength_54c6a179] = env->getMethodID(cls, "yylength", "()I");
                            mids$[mid_yylex_54c6a179] = env->getMethodID(cls, "yylex", "()I");
                            mids$[mid_yypushback_39c7bd3c] = env->getMethodID(cls, "yypushback", "(I)V");
                            mids$[mid_yyreset_cf2e3c10] = env->getMethodID(cls, "yyreset", "(Ljava/io/Reader;)V");
                            mids$[mid_yystate_54c6a179] = env->getMethodID(cls, "yystate", "()I");
                            mids$[mid_yytext_14c7b5c5] = env->getMethodID(cls, "yytext", "()Ljava/lang/String;");

                            class$ = (::java::lang::Class *) new JObject(cls);
                            cls = (jclass) class$->this$;

                            YYEOF = env->getStaticIntField(cls, "YYEOF");
                            YYINITIAL = env->getStaticIntField(cls, "YYINITIAL");
                        }
                        return (jclass) class$->this$;
                    }

                    NameScanner::NameScanner(const ::java::io::InputStream & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_be2e4f90, a0.this$)) {}

                    NameScanner::NameScanner(const ::java::io::Reader & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_cf2e3c10, a0.this$)) {}

                    void NameScanner::main(const JArray< ::java::lang::String > & a0)
                    {
                        jclass cls = initializeClass();
                        env->callStaticVoidMethod(cls, mids$[mid_main_4dd4540c], a0.this$);
                    }

                    void NameScanner::yybegin(jint a0) const
                    {
                        env->callVoidMethod(this$, mids$[mid_yybegin_39c7bd3c], a0);
                    }

                    jchar NameScanner::yycharat(jint a0) const
                    {
                        return env->callCharMethod(this$, mids$[mid_yycharat_39c7bd29], a0);
                    }

                    void NameScanner::yyclose() const
                    {
                        env->callVoidMethod(this$, mids$[mid_yyclose_54c6a166]);
                    }

                    jint NameScanner::yylength() const
                    {
                        return env->callIntMethod(this$, mids$[mid_yylength_54c6a179]);
                    }

                    jint NameScanner::yylex() const
                    {
                        return env->callIntMethod(this$, mids$[mid_yylex_54c6a179]);
                    }

                    void NameScanner::yypushback(jint a0) const
                    {
                        env->callVoidMethod(this$, mids$[mid_yypushback_39c7bd3c], a0);
                    }

                    void NameScanner::yyreset(const ::java::io::Reader & a0) const
                    {
                        env->callVoidMethod(this$, mids$[mid_yyreset_cf2e3c10], a0.this$);
                    }

                    jint NameScanner::yystate() const
                    {
                        return env->callIntMethod(this$, mids$[mid_yystate_54c6a179]);
                    }

                    ::java::lang::String NameScanner::yytext() const
                    {
                        return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_yytext_14c7b5c5]));
                    }
                }
            }
        }
    }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace is {
    namespace iclt {
        namespace icenlp {
            namespace core {
                namespace iceNER {
                    static PyObject *t_NameScanner_cast_(PyTypeObject *type, PyObject *arg);
                    static PyObject *t_NameScanner_instance_(PyTypeObject *type, PyObject *arg);
                    static int t_NameScanner_init_(t_NameScanner *self, PyObject *args, PyObject *kwds);
                    static PyObject *t_NameScanner_main(PyTypeObject *type, PyObject *arg);
                    static PyObject *t_NameScanner_yybegin(t_NameScanner *self, PyObject *arg);
                    static PyObject *t_NameScanner_yycharat(t_NameScanner *self, PyObject *arg);
                    static PyObject *t_NameScanner_yyclose(t_NameScanner *self);
                    static PyObject *t_NameScanner_yylength(t_NameScanner *self);
                    static PyObject *t_NameScanner_yylex(t_NameScanner *self);
                    static PyObject *t_NameScanner_yypushback(t_NameScanner *self, PyObject *arg);
                    static PyObject *t_NameScanner_yyreset(t_NameScanner *self, PyObject *arg);
                    static PyObject *t_NameScanner_yystate(t_NameScanner *self);
                    static PyObject *t_NameScanner_yytext(t_NameScanner *self);

                    static PyMethodDef t_NameScanner__methods_[] = {
                        DECLARE_METHOD(t_NameScanner, cast_, METH_O | METH_CLASS),
                        DECLARE_METHOD(t_NameScanner, instance_, METH_O | METH_CLASS),
                        DECLARE_METHOD(t_NameScanner, main, METH_O | METH_CLASS),
                        DECLARE_METHOD(t_NameScanner, yybegin, METH_O),
                        DECLARE_METHOD(t_NameScanner, yycharat, METH_O),
                        DECLARE_METHOD(t_NameScanner, yyclose, METH_NOARGS),
                        DECLARE_METHOD(t_NameScanner, yylength, METH_NOARGS),
                        DECLARE_METHOD(t_NameScanner, yylex, METH_NOARGS),
                        DECLARE_METHOD(t_NameScanner, yypushback, METH_O),
                        DECLARE_METHOD(t_NameScanner, yyreset, METH_O),
                        DECLARE_METHOD(t_NameScanner, yystate, METH_NOARGS),
                        DECLARE_METHOD(t_NameScanner, yytext, METH_NOARGS),
                        { NULL, NULL, 0, NULL }
                    };

                    DECLARE_TYPE(NameScanner, t_NameScanner, ::java::lang::Object, NameScanner, t_NameScanner_init_, 0, 0, 0, 0, 0);

                    void t_NameScanner::install(PyObject *module)
                    {
                        installType(&PY_TYPE(NameScanner), module, "NameScanner", 0);
                    }

                    void t_NameScanner::initialize(PyObject *module)
                    {
                        PyDict_SetItemString(PY_TYPE(NameScanner).tp_dict, "class_", make_descriptor(NameScanner::initializeClass, 1));
                        PyDict_SetItemString(PY_TYPE(NameScanner).tp_dict, "wrapfn_", make_descriptor(t_NameScanner::wrap_jobject));
                        PyDict_SetItemString(PY_TYPE(NameScanner).tp_dict, "boxfn_", make_descriptor(boxObject));
                        NameScanner::initializeClass();
                        PyDict_SetItemString(PY_TYPE(NameScanner).tp_dict, "YYEOF", make_descriptor(NameScanner::YYEOF));
                        PyDict_SetItemString(PY_TYPE(NameScanner).tp_dict, "YYINITIAL", make_descriptor(NameScanner::YYINITIAL));
                    }

                    static PyObject *t_NameScanner_cast_(PyTypeObject *type, PyObject *arg)
                    {
                        if (!(arg = castCheck(arg, NameScanner::initializeClass, 1)))
                            return NULL;
                        return t_NameScanner::wrap_Object(NameScanner(((t_NameScanner *) arg)->object.this$));
                    }
                    static PyObject *t_NameScanner_instance_(PyTypeObject *type, PyObject *arg)
                    {
                        if (!castCheck(arg, NameScanner::initializeClass, 0))
                            Py_RETURN_FALSE;
                        Py_RETURN_TRUE;
                    }

                    static int t_NameScanner_init_(t_NameScanner *self, PyObject *args, PyObject *kwds)
                    {
                        switch (PyTuple_GET_SIZE(args)) {
                          case 1:
                            {
                                ::java::io::InputStream a0((jobject) NULL);
                                NameScanner object((jobject) NULL);

                                if (!parseArgs(args, "k", ::java::io::InputStream::initializeClass, &a0))
                                {
                                    INT_CALL(object = NameScanner(a0));
                                    self->object = object;
                                    break;
                                }
                            }
                            {
                                ::java::io::Reader a0((jobject) NULL);
                                NameScanner object((jobject) NULL);

                                if (!parseArgs(args, "k", ::java::io::Reader::initializeClass, &a0))
                                {
                                    INT_CALL(object = NameScanner(a0));
                                    self->object = object;
                                    break;
                                }
                            }
                          default:
                            PyErr_SetArgsError((PyObject *) self, "__init__", args);
                            return -1;
                        }

                        return 0;
                    }

                    static PyObject *t_NameScanner_main(PyTypeObject *type, PyObject *arg)
                    {
                        JArray< ::java::lang::String > a0((jobject) NULL);

                        if (!parseArg(arg, "[s", &a0))
                        {
                            OBJ_CALL(::is::iclt::icenlp::core::iceNER::NameScanner::main(a0));
                            Py_RETURN_NONE;
                        }

                        PyErr_SetArgsError(type, "main", arg);
                        return NULL;
                    }

                    static PyObject *t_NameScanner_yybegin(t_NameScanner *self, PyObject *arg)
                    {
                        jint a0;

                        if (!parseArg(arg, "I", &a0))
                        {
                            OBJ_CALL(self->object.yybegin(a0));
                            Py_RETURN_NONE;
                        }

                        PyErr_SetArgsError((PyObject *) self, "yybegin", arg);
                        return NULL;
                    }

                    static PyObject *t_NameScanner_yycharat(t_NameScanner *self, PyObject *arg)
                    {
                        jint a0;
                        jchar result;

                        if (!parseArg(arg, "I", &a0))
                        {
                            OBJ_CALL(result = self->object.yycharat(a0));
                            return PyUnicode_FromUnicode((Py_UNICODE *) &result, 1);
                        }

                        PyErr_SetArgsError((PyObject *) self, "yycharat", arg);
                        return NULL;
                    }

                    static PyObject *t_NameScanner_yyclose(t_NameScanner *self)
                    {
                        OBJ_CALL(self->object.yyclose());
                        Py_RETURN_NONE;
                    }

                    static PyObject *t_NameScanner_yylength(t_NameScanner *self)
                    {
                        jint result;
                        OBJ_CALL(result = self->object.yylength());
                        return PyInt_FromLong((long) result);
                    }

                    static PyObject *t_NameScanner_yylex(t_NameScanner *self)
                    {
                        jint result;
                        OBJ_CALL(result = self->object.yylex());
                        return PyInt_FromLong((long) result);
                    }

                    static PyObject *t_NameScanner_yypushback(t_NameScanner *self, PyObject *arg)
                    {
                        jint a0;

                        if (!parseArg(arg, "I", &a0))
                        {
                            OBJ_CALL(self->object.yypushback(a0));
                            Py_RETURN_NONE;
                        }

                        PyErr_SetArgsError((PyObject *) self, "yypushback", arg);
                        return NULL;
                    }

                    static PyObject *t_NameScanner_yyreset(t_NameScanner *self, PyObject *arg)
                    {
                        ::java::io::Reader a0((jobject) NULL);

                        if (!parseArg(arg, "k", ::java::io::Reader::initializeClass, &a0))
                        {
                            OBJ_CALL(self->object.yyreset(a0));
                            Py_RETURN_NONE;
                        }

                        PyErr_SetArgsError((PyObject *) self, "yyreset", arg);
                        return NULL;
                    }

                    static PyObject *t_NameScanner_yystate(t_NameScanner *self)
                    {
                        jint result;
                        OBJ_CALL(result = self->object.yystate());
                        return PyInt_FromLong((long) result);
                    }

                    static PyObject *t_NameScanner_yytext(t_NameScanner *self)
                    {
                        ::java::lang::String result((jobject) NULL);
                        OBJ_CALL(result = self->object.yytext());
                        return j2p(result);
                    }
                }
            }
        }
    }
}
#include <jni.h>
#include "JCCEnv.h"
#include "is/iclt/icenlp/core/iceparser/Func_OBJ2.h"
#include "java/io/IOException.h"
#include "java/io/Reader.h"
#include "java/io/Writer.h"
#include "java/lang/Class.h"
#include "java/io/InputStream.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace is {
    namespace iclt {
        namespace icenlp {
            namespace core {
                namespace iceparser {

                    ::java::lang::Class *Func_OBJ2::class$ = NULL;
                    jmethodID *Func_OBJ2::mids$ = NULL;
                    jint Func_OBJ2::YYEOF = (jint) 0;
                    jint Func_OBJ2::YYINITIAL = (jint) 0;

                    jclass Func_OBJ2::initializeClass()
                    {
                        if (!class$)
                        {

                            jclass cls = (jclass) env->findClass("is/iclt/icenlp/core/iceparser/Func_OBJ2");

                            mids$ = new jmethodID[max_mid];
                            mids$[mid_init$_cf2e3c10] = env->getMethodID(cls, "<init>", "(Ljava/io/Reader;)V");
                            mids$[mid_init$_be2e4f90] = env->getMethodID(cls, "<init>", "(Ljava/io/InputStream;)V");
                            mids$[mid_main_4dd4540c] = env->getStaticMethodID(cls, "main", "([Ljava/lang/String;)V");
                            mids$[mid_parse_5bcd5850] = env->getMethodID(cls, "parse", "(Ljava/io/Writer;)V");
                            mids$[mid_yybegin_39c7bd3c] = env->getMethodID(cls, "yybegin", "(I)V");
                            mids$[mid_yycharat_39c7bd29] = env->getMethodID(cls, "yycharat", "(I)C");
                            mids$[mid_yyclose_54c6a166] = env->getMethodID(cls, "yyclose", "()V");
                            mids$[mid_yylength_54c6a179] = env->getMethodID(cls, "yylength", "()I");
                            mids$[mid_yylex_54c6a179] = env->getMethodID(cls, "yylex", "()I");
                            mids$[mid_yypushback_39c7bd3c] = env->getMethodID(cls, "yypushback", "(I)V");
                            mids$[mid_yyreset_cf2e3c10] = env->getMethodID(cls, "yyreset", "(Ljava/io/Reader;)V");
                            mids$[mid_yystate_54c6a179] = env->getMethodID(cls, "yystate", "()I");
                            mids$[mid_yytext_14c7b5c5] = env->getMethodID(cls, "yytext", "()Ljava/lang/String;");

                            class$ = (::java::lang::Class *) new JObject(cls);
                            cls = (jclass) class$->this$;

                            YYEOF = env->getStaticIntField(cls, "YYEOF");
                            YYINITIAL = env->getStaticIntField(cls, "YYINITIAL");
                        }
                        return (jclass) class$->this$;
                    }

                    Func_OBJ2::Func_OBJ2(const ::java::io::Reader & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_cf2e3c10, a0.this$)) {}

                    Func_OBJ2::Func_OBJ2(const ::java::io::InputStream & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_be2e4f90, a0.this$)) {}

                    void Func_OBJ2::main(const JArray< ::java::lang::String > & a0)
                    {
                        jclass cls = initializeClass();
                        env->callStaticVoidMethod(cls, mids$[mid_main_4dd4540c], a0.this$);
                    }

                    void Func_OBJ2::parse(const ::java::io::Writer & a0) const
                    {
                        env->callVoidMethod(this$, mids$[mid_parse_5bcd5850], a0.this$);
                    }

                    void Func_OBJ2::yybegin(jint a0) const
                    {
                        env->callVoidMethod(this$, mids$[mid_yybegin_39c7bd3c], a0);
                    }

                    jchar Func_OBJ2::yycharat(jint a0) const
                    {
                        return env->callCharMethod(this$, mids$[mid_yycharat_39c7bd29], a0);
                    }

                    void Func_OBJ2::yyclose() const
                    {
                        env->callVoidMethod(this$, mids$[mid_yyclose_54c6a166]);
                    }

                    jint Func_OBJ2::yylength() const
                    {
                        return env->callIntMethod(this$, mids$[mid_yylength_54c6a179]);
                    }

                    jint Func_OBJ2::yylex() const
                    {
                        return env->callIntMethod(this$, mids$[mid_yylex_54c6a179]);
                    }

                    void Func_OBJ2::yypushback(jint a0) const
                    {
                        env->callVoidMethod(this$, mids$[mid_yypushback_39c7bd3c], a0);
                    }

                    void Func_OBJ2::yyreset(const ::java::io::Reader & a0) const
                    {
                        env->callVoidMethod(this$, mids$[mid_yyreset_cf2e3c10], a0.this$);
                    }

                    jint Func_OBJ2::yystate() const
                    {
                        return env->callIntMethod(this$, mids$[mid_yystate_54c6a179]);
                    }

                    ::java::lang::String Func_OBJ2::yytext() const
                    {
                        return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_yytext_14c7b5c5]));
                    }
                }
            }
        }
    }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace is {
    namespace iclt {
        namespace icenlp {
            namespace core {
                namespace iceparser {
                    static PyObject *t_Func_OBJ2_cast_(PyTypeObject *type, PyObject *arg);
                    static PyObject *t_Func_OBJ2_instance_(PyTypeObject *type, PyObject *arg);
                    static int t_Func_OBJ2_init_(t_Func_OBJ2 *self, PyObject *args, PyObject *kwds);
                    static PyObject *t_Func_OBJ2_main(PyTypeObject *type, PyObject *arg);
                    static PyObject *t_Func_OBJ2_parse(t_Func_OBJ2 *self, PyObject *arg);
                    static PyObject *t_Func_OBJ2_yybegin(t_Func_OBJ2 *self, PyObject *arg);
                    static PyObject *t_Func_OBJ2_yycharat(t_Func_OBJ2 *self, PyObject *arg);
                    static PyObject *t_Func_OBJ2_yyclose(t_Func_OBJ2 *self);
                    static PyObject *t_Func_OBJ2_yylength(t_Func_OBJ2 *self);
                    static PyObject *t_Func_OBJ2_yylex(t_Func_OBJ2 *self);
                    static PyObject *t_Func_OBJ2_yypushback(t_Func_OBJ2 *self, PyObject *arg);
                    static PyObject *t_Func_OBJ2_yyreset(t_Func_OBJ2 *self, PyObject *arg);
                    static PyObject *t_Func_OBJ2_yystate(t_Func_OBJ2 *self);
                    static PyObject *t_Func_OBJ2_yytext(t_Func_OBJ2 *self);

                    static PyMethodDef t_Func_OBJ2__methods_[] = {
                        DECLARE_METHOD(t_Func_OBJ2, cast_, METH_O | METH_CLASS),
                        DECLARE_METHOD(t_Func_OBJ2, instance_, METH_O | METH_CLASS),
                        DECLARE_METHOD(t_Func_OBJ2, main, METH_O | METH_CLASS),
                        DECLARE_METHOD(t_Func_OBJ2, parse, METH_O),
                        DECLARE_METHOD(t_Func_OBJ2, yybegin, METH_O),
                        DECLARE_METHOD(t_Func_OBJ2, yycharat, METH_O),
                        DECLARE_METHOD(t_Func_OBJ2, yyclose, METH_NOARGS),
                        DECLARE_METHOD(t_Func_OBJ2, yylength, METH_NOARGS),
                        DECLARE_METHOD(t_Func_OBJ2, yylex, METH_NOARGS),
                        DECLARE_METHOD(t_Func_OBJ2, yypushback, METH_O),
                        DECLARE_METHOD(t_Func_OBJ2, yyreset, METH_O),
                        DECLARE_METHOD(t_Func_OBJ2, yystate, METH_NOARGS),
                        DECLARE_METHOD(t_Func_OBJ2, yytext, METH_NOARGS),
                        { NULL, NULL, 0, NULL }
                    };

                    DECLARE_TYPE(Func_OBJ2, t_Func_OBJ2, ::java::lang::Object, Func_OBJ2, t_Func_OBJ2_init_, 0, 0, 0, 0, 0);

                    void t_Func_OBJ2::install(PyObject *module)
                    {
                        installType(&PY_TYPE(Func_OBJ2), module, "Func_OBJ2", 0);
                    }

                    void t_Func_OBJ2::initialize(PyObject *module)
                    {
                        PyDict_SetItemString(PY_TYPE(Func_OBJ2).tp_dict, "class_", make_descriptor(Func_OBJ2::initializeClass, 1));
                        PyDict_SetItemString(PY_TYPE(Func_OBJ2).tp_dict, "wrapfn_", make_descriptor(t_Func_OBJ2::wrap_jobject));
                        PyDict_SetItemString(PY_TYPE(Func_OBJ2).tp_dict, "boxfn_", make_descriptor(boxObject));
                        Func_OBJ2::initializeClass();
                        PyDict_SetItemString(PY_TYPE(Func_OBJ2).tp_dict, "YYEOF", make_descriptor(Func_OBJ2::YYEOF));
                        PyDict_SetItemString(PY_TYPE(Func_OBJ2).tp_dict, "YYINITIAL", make_descriptor(Func_OBJ2::YYINITIAL));
                    }

                    static PyObject *t_Func_OBJ2_cast_(PyTypeObject *type, PyObject *arg)
                    {
                        if (!(arg = castCheck(arg, Func_OBJ2::initializeClass, 1)))
                            return NULL;
                        return t_Func_OBJ2::wrap_Object(Func_OBJ2(((t_Func_OBJ2 *) arg)->object.this$));
                    }
                    static PyObject *t_Func_OBJ2_instance_(PyTypeObject *type, PyObject *arg)
                    {
                        if (!castCheck(arg, Func_OBJ2::initializeClass, 0))
                            Py_RETURN_FALSE;
                        Py_RETURN_TRUE;
                    }

                    static int t_Func_OBJ2_init_(t_Func_OBJ2 *self, PyObject *args, PyObject *kwds)
                    {
                        switch (PyTuple_GET_SIZE(args)) {
                          case 1:
                            {
                                ::java::io::Reader a0((jobject) NULL);
                                Func_OBJ2 object((jobject) NULL);

                                if (!parseArgs(args, "k", ::java::io::Reader::initializeClass, &a0))
                                {
                                    INT_CALL(object = Func_OBJ2(a0));
                                    self->object = object;
                                    break;
                                }
                            }
                            {
                                ::java::io::InputStream a0((jobject) NULL);
                                Func_OBJ2 object((jobject) NULL);

                                if (!parseArgs(args, "k", ::java::io::InputStream::initializeClass, &a0))
                                {
                                    INT_CALL(object = Func_OBJ2(a0));
                                    self->object = object;
                                    break;
                                }
                            }
                          default:
                            PyErr_SetArgsError((PyObject *) self, "__init__", args);
                            return -1;
                        }

                        return 0;
                    }

                    static PyObject *t_Func_OBJ2_main(PyTypeObject *type, PyObject *arg)
                    {
                        JArray< ::java::lang::String > a0((jobject) NULL);

                        if (!parseArg(arg, "[s", &a0))
                        {
                            OBJ_CALL(::is::iclt::icenlp::core::iceparser::Func_OBJ2::main(a0));
                            Py_RETURN_NONE;
                        }

                        PyErr_SetArgsError(type, "main", arg);
                        return NULL;
                    }

                    static PyObject *t_Func_OBJ2_parse(t_Func_OBJ2 *self, PyObject *arg)
                    {
                        ::java::io::Writer a0((jobject) NULL);

                        if (!parseArg(arg, "k", ::java::io::Writer::initializeClass, &a0))
                        {
                            OBJ_CALL(self->object.parse(a0));
                            Py_RETURN_NONE;
                        }

                        PyErr_SetArgsError((PyObject *) self, "parse", arg);
                        return NULL;
                    }

                    static PyObject *t_Func_OBJ2_yybegin(t_Func_OBJ2 *self, PyObject *arg)
                    {
                        jint a0;

                        if (!parseArg(arg, "I", &a0))
                        {
                            OBJ_CALL(self->object.yybegin(a0));
                            Py_RETURN_NONE;
                        }

                        PyErr_SetArgsError((PyObject *) self, "yybegin", arg);
                        return NULL;
                    }

                    static PyObject *t_Func_OBJ2_yycharat(t_Func_OBJ2 *self, PyObject *arg)
                    {
                        jint a0;
                        jchar result;

                        if (!parseArg(arg, "I", &a0))
                        {
                            OBJ_CALL(result = self->object.yycharat(a0));
                            return PyUnicode_FromUnicode((Py_UNICODE *) &result, 1);
                        }

                        PyErr_SetArgsError((PyObject *) self, "yycharat", arg);
                        return NULL;
                    }

                    static PyObject *t_Func_OBJ2_yyclose(t_Func_OBJ2 *self)
                    {
                        OBJ_CALL(self->object.yyclose());
                        Py_RETURN_NONE;
                    }

                    static PyObject *t_Func_OBJ2_yylength(t_Func_OBJ2 *self)
                    {
                        jint result;
                        OBJ_CALL(result = self->object.yylength());
                        return PyInt_FromLong((long) result);
                    }

                    static PyObject *t_Func_OBJ2_yylex(t_Func_OBJ2 *self)
                    {
                        jint result;
                        OBJ_CALL(result = self->object.yylex());
                        return PyInt_FromLong((long) result);
                    }

                    static PyObject *t_Func_OBJ2_yypushback(t_Func_OBJ2 *self, PyObject *arg)
                    {
                        jint a0;

                        if (!parseArg(arg, "I", &a0))
                        {
                            OBJ_CALL(self->object.yypushback(a0));
                            Py_RETURN_NONE;
                        }

                        PyErr_SetArgsError((PyObject *) self, "yypushback", arg);
                        return NULL;
                    }

                    static PyObject *t_Func_OBJ2_yyreset(t_Func_OBJ2 *self, PyObject *arg)
                    {
                        ::java::io::Reader a0((jobject) NULL);

                        if (!parseArg(arg, "k", ::java::io::Reader::initializeClass, &a0))
                        {
                            OBJ_CALL(self->object.yyreset(a0));
                            Py_RETURN_NONE;
                        }

                        PyErr_SetArgsError((PyObject *) self, "yyreset", arg);
                        return NULL;
                    }

                    static PyObject *t_Func_OBJ2_yystate(t_Func_OBJ2 *self)
                    {
                        jint result;
                        OBJ_CALL(result = self->object.yystate());
                        return PyInt_FromLong((long) result);
                    }

                    static PyObject *t_Func_OBJ2_yytext(t_Func_OBJ2 *self)
                    {
                        ::java::lang::String result((jobject) NULL);
                        OBJ_CALL(result = self->object.yytext());
                        return j2p(result);
                    }
                }
            }
        }
    }
}
#include <jni.h>
#include "JCCEnv.h"
#include "is/iclt/icenlp/core/iceparser/Phrase_NP.h"
#include "java/io/IOException.h"
#include "java/io/Reader.h"
#include "java/io/Writer.h"
#include "java/lang/Class.h"
#include "java/io/InputStream.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace is {
    namespace iclt {
        namespace icenlp {
            namespace core {
                namespace iceparser {

                    ::java::lang::Class *Phrase_NP::class$ = NULL;
                    jmethodID *Phrase_NP::mids$ = NULL;
                    jint Phrase_NP::YYEOF = (jint) 0;
                    jint Phrase_NP::YYINITIAL = (jint) 0;

                    jclass Phrase_NP::initializeClass()
                    {
                        if (!class$)
                        {

                            jclass cls = (jclass) env->findClass("is/iclt/icenlp/core/iceparser/Phrase_NP");

                            mids$ = new jmethodID[max_mid];
                            mids$[mid_init$_cf2e3c10] = env->getMethodID(cls, "<init>", "(Ljava/io/Reader;)V");
                            mids$[mid_init$_be2e4f90] = env->getMethodID(cls, "<init>", "(Ljava/io/InputStream;)V");
                            mids$[mid_main_4dd4540c] = env->getStaticMethodID(cls, "main", "([Ljava/lang/String;)V");
                            mids$[mid_parse_5bcd5850] = env->getMethodID(cls, "parse", "(Ljava/io/Writer;)V");
                            mids$[mid_yybegin_39c7bd3c] = env->getMethodID(cls, "yybegin", "(I)V");
                            mids$[mid_yycharat_39c7bd29] = env->getMethodID(cls, "yycharat", "(I)C");
                            mids$[mid_yyclose_54c6a166] = env->getMethodID(cls, "yyclose", "()V");
                            mids$[mid_yylength_54c6a179] = env->getMethodID(cls, "yylength", "()I");
                            mids$[mid_yylex_54c6a179] = env->getMethodID(cls, "yylex", "()I");
                            mids$[mid_yypushback_39c7bd3c] = env->getMethodID(cls, "yypushback", "(I)V");
                            mids$[mid_yyreset_cf2e3c10] = env->getMethodID(cls, "yyreset", "(Ljava/io/Reader;)V");
                            mids$[mid_yystate_54c6a179] = env->getMethodID(cls, "yystate", "()I");
                            mids$[mid_yytext_14c7b5c5] = env->getMethodID(cls, "yytext", "()Ljava/lang/String;");

                            class$ = (::java::lang::Class *) new JObject(cls);
                            cls = (jclass) class$->this$;

                            YYEOF = env->getStaticIntField(cls, "YYEOF");
                            YYINITIAL = env->getStaticIntField(cls, "YYINITIAL");
                        }
                        return (jclass) class$->this$;
                    }

                    Phrase_NP::Phrase_NP(const ::java::io::Reader & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_cf2e3c10, a0.this$)) {}

                    Phrase_NP::Phrase_NP(const ::java::io::InputStream & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_be2e4f90, a0.this$)) {}

                    void Phrase_NP::main(const JArray< ::java::lang::String > & a0)
                    {
                        jclass cls = initializeClass();
                        env->callStaticVoidMethod(cls, mids$[mid_main_4dd4540c], a0.this$);
                    }

                    void Phrase_NP::parse(const ::java::io::Writer & a0) const
                    {
                        env->callVoidMethod(this$, mids$[mid_parse_5bcd5850], a0.this$);
                    }

                    void Phrase_NP::yybegin(jint a0) const
                    {
                        env->callVoidMethod(this$, mids$[mid_yybegin_39c7bd3c], a0);
                    }

                    jchar Phrase_NP::yycharat(jint a0) const
                    {
                        return env->callCharMethod(this$, mids$[mid_yycharat_39c7bd29], a0);
                    }

                    void Phrase_NP::yyclose() const
                    {
                        env->callVoidMethod(this$, mids$[mid_yyclose_54c6a166]);
                    }

                    jint Phrase_NP::yylength() const
                    {
                        return env->callIntMethod(this$, mids$[mid_yylength_54c6a179]);
                    }

                    jint Phrase_NP::yylex() const
                    {
                        return env->callIntMethod(this$, mids$[mid_yylex_54c6a179]);
                    }

                    void Phrase_NP::yypushback(jint a0) const
                    {
                        env->callVoidMethod(this$, mids$[mid_yypushback_39c7bd3c], a0);
                    }

                    void Phrase_NP::yyreset(const ::java::io::Reader & a0) const
                    {
                        env->callVoidMethod(this$, mids$[mid_yyreset_cf2e3c10], a0.this$);
                    }

                    jint Phrase_NP::yystate() const
                    {
                        return env->callIntMethod(this$, mids$[mid_yystate_54c6a179]);
                    }

                    ::java::lang::String Phrase_NP::yytext() const
                    {
                        return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_yytext_14c7b5c5]));
                    }
                }
            }
        }
    }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace is {
    namespace iclt {
        namespace icenlp {
            namespace core {
                namespace iceparser {
                    static PyObject *t_Phrase_NP_cast_(PyTypeObject *type, PyObject *arg);
                    static PyObject *t_Phrase_NP_instance_(PyTypeObject *type, PyObject *arg);
                    static int t_Phrase_NP_init_(t_Phrase_NP *self, PyObject *args, PyObject *kwds);
                    static PyObject *t_Phrase_NP_main(PyTypeObject *type, PyObject *arg);
                    static PyObject *t_Phrase_NP_parse(t_Phrase_NP *self, PyObject *arg);
                    static PyObject *t_Phrase_NP_yybegin(t_Phrase_NP *self, PyObject *arg);
                    static PyObject *t_Phrase_NP_yycharat(t_Phrase_NP *self, PyObject *arg);
                    static PyObject *t_Phrase_NP_yyclose(t_Phrase_NP *self);
                    static PyObject *t_Phrase_NP_yylength(t_Phrase_NP *self);
                    static PyObject *t_Phrase_NP_yylex(t_Phrase_NP *self);
                    static PyObject *t_Phrase_NP_yypushback(t_Phrase_NP *self, PyObject *arg);
                    static PyObject *t_Phrase_NP_yyreset(t_Phrase_NP *self, PyObject *arg);
                    static PyObject *t_Phrase_NP_yystate(t_Phrase_NP *self);
                    static PyObject *t_Phrase_NP_yytext(t_Phrase_NP *self);

                    static PyMethodDef t_Phrase_NP__methods_[] = {
                        DECLARE_METHOD(t_Phrase_NP, cast_, METH_O | METH_CLASS),
                        DECLARE_METHOD(t_Phrase_NP, instance_, METH_O | METH_CLASS),
                        DECLARE_METHOD(t_Phrase_NP, main, METH_O | METH_CLASS),
                        DECLARE_METHOD(t_Phrase_NP, parse, METH_O),
                        DECLARE_METHOD(t_Phrase_NP, yybegin, METH_O),
                        DECLARE_METHOD(t_Phrase_NP, yycharat, METH_O),
                        DECLARE_METHOD(t_Phrase_NP, yyclose, METH_NOARGS),
                        DECLARE_METHOD(t_Phrase_NP, yylength, METH_NOARGS),
                        DECLARE_METHOD(t_Phrase_NP, yylex, METH_NOARGS),
                        DECLARE_METHOD(t_Phrase_NP, yypushback, METH_O),
                        DECLARE_METHOD(t_Phrase_NP, yyreset, METH_O),
                        DECLARE_METHOD(t_Phrase_NP, yystate, METH_NOARGS),
                        DECLARE_METHOD(t_Phrase_NP, yytext, METH_NOARGS),
                        { NULL, NULL, 0, NULL }
                    };

                    DECLARE_TYPE(Phrase_NP, t_Phrase_NP, ::java::lang::Object, Phrase_NP, t_Phrase_NP_init_, 0, 0, 0, 0, 0);

                    void t_Phrase_NP::install(PyObject *module)
                    {
                        installType(&PY_TYPE(Phrase_NP), module, "Phrase_NP", 0);
                    }

                    void t_Phrase_NP::initialize(PyObject *module)
                    {
                        PyDict_SetItemString(PY_TYPE(Phrase_NP).tp_dict, "class_", make_descriptor(Phrase_NP::initializeClass, 1));
                        PyDict_SetItemString(PY_TYPE(Phrase_NP).tp_dict, "wrapfn_", make_descriptor(t_Phrase_NP::wrap_jobject));
                        PyDict_SetItemString(PY_TYPE(Phrase_NP).tp_dict, "boxfn_", make_descriptor(boxObject));
                        Phrase_NP::initializeClass();
                        PyDict_SetItemString(PY_TYPE(Phrase_NP).tp_dict, "YYEOF", make_descriptor(Phrase_NP::YYEOF));
                        PyDict_SetItemString(PY_TYPE(Phrase_NP).tp_dict, "YYINITIAL", make_descriptor(Phrase_NP::YYINITIAL));
                    }

                    static PyObject *t_Phrase_NP_cast_(PyTypeObject *type, PyObject *arg)
                    {
                        if (!(arg = castCheck(arg, Phrase_NP::initializeClass, 1)))
                            return NULL;
                        return t_Phrase_NP::wrap_Object(Phrase_NP(((t_Phrase_NP *) arg)->object.this$));
                    }
                    static PyObject *t_Phrase_NP_instance_(PyTypeObject *type, PyObject *arg)
                    {
                        if (!castCheck(arg, Phrase_NP::initializeClass, 0))
                            Py_RETURN_FALSE;
                        Py_RETURN_TRUE;
                    }

                    static int t_Phrase_NP_init_(t_Phrase_NP *self, PyObject *args, PyObject *kwds)
                    {
                        switch (PyTuple_GET_SIZE(args)) {
                          case 1:
                            {
                                ::java::io::Reader a0((jobject) NULL);
                                Phrase_NP object((jobject) NULL);

                                if (!parseArgs(args, "k", ::java::io::Reader::initializeClass, &a0))
                                {
                                    INT_CALL(object = Phrase_NP(a0));
                                    self->object = object;
                                    break;
                                }
                            }
                            {
                                ::java::io::InputStream a0((jobject) NULL);
                                Phrase_NP object((jobject) NULL);

                                if (!parseArgs(args, "k", ::java::io::InputStream::initializeClass, &a0))
                                {
                                    INT_CALL(object = Phrase_NP(a0));
                                    self->object = object;
                                    break;
                                }
                            }
                          default:
                            PyErr_SetArgsError((PyObject *) self, "__init__", args);
                            return -1;
                        }

                        return 0;
                    }

                    static PyObject *t_Phrase_NP_main(PyTypeObject *type, PyObject *arg)
                    {
                        JArray< ::java::lang::String > a0((jobject) NULL);

                        if (!parseArg(arg, "[s", &a0))
                        {
                            OBJ_CALL(::is::iclt::icenlp::core::iceparser::Phrase_NP::main(a0));
                            Py_RETURN_NONE;
                        }

                        PyErr_SetArgsError(type, "main", arg);
                        return NULL;
                    }

                    static PyObject *t_Phrase_NP_parse(t_Phrase_NP *self, PyObject *arg)
                    {
                        ::java::io::Writer a0((jobject) NULL);

                        if (!parseArg(arg, "k", ::java::io::Writer::initializeClass, &a0))
                        {
                            OBJ_CALL(self->object.parse(a0));
                            Py_RETURN_NONE;
                        }

                        PyErr_SetArgsError((PyObject *) self, "parse", arg);
                        return NULL;
                    }

                    static PyObject *t_Phrase_NP_yybegin(t_Phrase_NP *self, PyObject *arg)
                    {
                        jint a0;

                        if (!parseArg(arg, "I", &a0))
                        {
                            OBJ_CALL(self->object.yybegin(a0));
                            Py_RETURN_NONE;
                        }

                        PyErr_SetArgsError((PyObject *) self, "yybegin", arg);
                        return NULL;
                    }

                    static PyObject *t_Phrase_NP_yycharat(t_Phrase_NP *self, PyObject *arg)
                    {
                        jint a0;
                        jchar result;

                        if (!parseArg(arg, "I", &a0))
                        {
                            OBJ_CALL(result = self->object.yycharat(a0));
                            return PyUnicode_FromUnicode((Py_UNICODE *) &result, 1);
                        }

                        PyErr_SetArgsError((PyObject *) self, "yycharat", arg);
                        return NULL;
                    }

                    static PyObject *t_Phrase_NP_yyclose(t_Phrase_NP *self)
                    {
                        OBJ_CALL(self->object.yyclose());
                        Py_RETURN_NONE;
                    }

                    static PyObject *t_Phrase_NP_yylength(t_Phrase_NP *self)
                    {
                        jint result;
                        OBJ_CALL(result = self->object.yylength());
                        return PyInt_FromLong((long) result);
                    }

                    static PyObject *t_Phrase_NP_yylex(t_Phrase_NP *self)
                    {
                        jint result;
                        OBJ_CALL(result = self->object.yylex());
                        return PyInt_FromLong((long) result);
                    }

                    static PyObject *t_Phrase_NP_yypushback(t_Phrase_NP *self, PyObject *arg)
                    {
                        jint a0;

                        if (!parseArg(arg, "I", &a0))
                        {
                            OBJ_CALL(self->object.yypushback(a0));
                            Py_RETURN_NONE;
                        }

                        PyErr_SetArgsError((PyObject *) self, "yypushback", arg);
                        return NULL;
                    }

                    static PyObject *t_Phrase_NP_yyreset(t_Phrase_NP *self, PyObject *arg)
                    {
                        ::java::io::Reader a0((jobject) NULL);

                        if (!parseArg(arg, "k", ::java::io::Reader::initializeClass, &a0))
                        {
                            OBJ_CALL(self->object.yyreset(a0));
                            Py_RETURN_NONE;
                        }

                        PyErr_SetArgsError((PyObject *) self, "yyreset", arg);
                        return NULL;
                    }

                    static PyObject *t_Phrase_NP_yystate(t_Phrase_NP *self)
                    {
                        jint result;
                        OBJ_CALL(result = self->object.yystate());
                        return PyInt_FromLong((long) result);
                    }

                    static PyObject *t_Phrase_NP_yytext(t_Phrase_NP *self)
                    {
                        ::java::lang::String result((jobject) NULL);
                        OBJ_CALL(result = self->object.yytext());
                        return j2p(result);
                    }
                }
            }
        }
    }
}
#include <jni.h>
#include "JCCEnv.h"
#include "is/iclt/icenlp/core/formald/tagsets/IfdEnglish.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace is {
    namespace iclt {
        namespace icenlp {
            namespace core {
                namespace formald {
                    namespace tagsets {

                        ::java::lang::Class *IfdEnglish::class$ = NULL;
                        jmethodID *IfdEnglish::mids$ = NULL;

                        jclass IfdEnglish::initializeClass()
                        {
                            if (!class$)
                            {

                                jclass cls = (jclass) env->findClass("is/iclt/icenlp/core/formald/tagsets/IfdEnglish");

                                mids$ = new jmethodID[max_mid];
                                mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                                mids$[mid_getMapping_97a5258f] = env->getMethodID(cls, "getMapping", "(Ljava/lang/String;)Ljava/lang/String;");
                                mids$[mid_getTag_97a5258f] = env->getMethodID(cls, "getTag", "(Ljava/lang/String;)Ljava/lang/String;");
                                mids$[mid_loadPostmap_54c6a166] = env->getMethodID(cls, "loadPostmap", "()V");
                                mids$[mid_loadTagmaps_54c6a166] = env->getMethodID(cls, "loadTagmaps", "()V");

                                class$ = (::java::lang::Class *) new JObject(cls);
                            }
                            return (jclass) class$->this$;
                        }

                        IfdEnglish::IfdEnglish() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

                        ::java::lang::String IfdEnglish::getMapping(const ::java::lang::String & a0) const
                        {
                            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getMapping_97a5258f], a0.this$));
                        }

                        ::java::lang::String IfdEnglish::getTag(const ::java::lang::String & a0) const
                        {
                            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getTag_97a5258f], a0.this$));
                        }

                        void IfdEnglish::loadPostmap() const
                        {
                            env->callVoidMethod(this$, mids$[mid_loadPostmap_54c6a166]);
                        }

                        void IfdEnglish::loadTagmaps() const
                        {
                            env->callVoidMethod(this$, mids$[mid_loadTagmaps_54c6a166]);
                        }
                    }
                }
            }
        }
    }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace is {
    namespace iclt {
        namespace icenlp {
            namespace core {
                namespace formald {
                    namespace tagsets {
                        static PyObject *t_IfdEnglish_cast_(PyTypeObject *type, PyObject *arg);
                        static PyObject *t_IfdEnglish_instance_(PyTypeObject *type, PyObject *arg);
                        static int t_IfdEnglish_init_(t_IfdEnglish *self, PyObject *args, PyObject *kwds);
                        static PyObject *t_IfdEnglish_getMapping(t_IfdEnglish *self, PyObject *arg);
                        static PyObject *t_IfdEnglish_getTag(t_IfdEnglish *self, PyObject *arg);
                        static PyObject *t_IfdEnglish_loadPostmap(t_IfdEnglish *self);
                        static PyObject *t_IfdEnglish_loadTagmaps(t_IfdEnglish *self);

                        static PyMethodDef t_IfdEnglish__methods_[] = {
                            DECLARE_METHOD(t_IfdEnglish, cast_, METH_O | METH_CLASS),
                            DECLARE_METHOD(t_IfdEnglish, instance_, METH_O | METH_CLASS),
                            DECLARE_METHOD(t_IfdEnglish, getMapping, METH_O),
                            DECLARE_METHOD(t_IfdEnglish, getTag, METH_O),
                            DECLARE_METHOD(t_IfdEnglish, loadPostmap, METH_NOARGS),
                            DECLARE_METHOD(t_IfdEnglish, loadTagmaps, METH_NOARGS),
                            { NULL, NULL, 0, NULL }
                        };

                        DECLARE_TYPE(IfdEnglish, t_IfdEnglish, ::java::lang::Object, IfdEnglish, t_IfdEnglish_init_, 0, 0, 0, 0, 0);

                        void t_IfdEnglish::install(PyObject *module)
                        {
                            installType(&PY_TYPE(IfdEnglish), module, "IfdEnglish", 0);
                        }

                        void t_IfdEnglish::initialize(PyObject *module)
                        {
                            PyDict_SetItemString(PY_TYPE(IfdEnglish).tp_dict, "class_", make_descriptor(IfdEnglish::initializeClass, 1));
                            PyDict_SetItemString(PY_TYPE(IfdEnglish).tp_dict, "wrapfn_", make_descriptor(t_IfdEnglish::wrap_jobject));
                            PyDict_SetItemString(PY_TYPE(IfdEnglish).tp_dict, "boxfn_", make_descriptor(boxObject));
                        }

                        static PyObject *t_IfdEnglish_cast_(PyTypeObject *type, PyObject *arg)
                        {
                            if (!(arg = castCheck(arg, IfdEnglish::initializeClass, 1)))
                                return NULL;
                            return t_IfdEnglish::wrap_Object(IfdEnglish(((t_IfdEnglish *) arg)->object.this$));
                        }
                        static PyObject *t_IfdEnglish_instance_(PyTypeObject *type, PyObject *arg)
                        {
                            if (!castCheck(arg, IfdEnglish::initializeClass, 0))
                                Py_RETURN_FALSE;
                            Py_RETURN_TRUE;
                        }

                        static int t_IfdEnglish_init_(t_IfdEnglish *self, PyObject *args, PyObject *kwds)
                        {
                            IfdEnglish object((jobject) NULL);

                            INT_CALL(object = IfdEnglish());
                            self->object = object;

                            return 0;
                        }

                        static PyObject *t_IfdEnglish_getMapping(t_IfdEnglish *self, PyObject *arg)
                        {
                            ::java::lang::String a0((jobject) NULL);
                            ::java::lang::String result((jobject) NULL);

                            if (!parseArg(arg, "s", &a0))
                            {
                                OBJ_CALL(result = self->object.getMapping(a0));
                                return j2p(result);
                            }

                            PyErr_SetArgsError((PyObject *) self, "getMapping", arg);
                            return NULL;
                        }

                        static PyObject *t_IfdEnglish_getTag(t_IfdEnglish *self, PyObject *arg)
                        {
                            ::java::lang::String a0((jobject) NULL);
                            ::java::lang::String result((jobject) NULL);

                            if (!parseArg(arg, "s", &a0))
                            {
                                OBJ_CALL(result = self->object.getTag(a0));
                                return j2p(result);
                            }

                            PyErr_SetArgsError((PyObject *) self, "getTag", arg);
                            return NULL;
                        }

                        static PyObject *t_IfdEnglish_loadPostmap(t_IfdEnglish *self)
                        {
                            OBJ_CALL(self->object.loadPostmap());
                            Py_RETURN_NONE;
                        }

                        static PyObject *t_IfdEnglish_loadTagmaps(t_IfdEnglish *self)
                        {
                            OBJ_CALL(self->object.loadTagmaps());
                            Py_RETURN_NONE;
                        }
                    }
                }
            }
        }
    }
}
#include <jni.h>
#include "JCCEnv.h"
#include "is/iclt/icenlp/core/iceparser/Clean2.h"
#include "java/io/IOException.h"
#include "java/io/Reader.h"
#include "java/io/Writer.h"
#include "java/lang/Class.h"
#include "java/io/InputStream.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace is {
    namespace iclt {
        namespace icenlp {
            namespace core {
                namespace iceparser {

                    ::java::lang::Class *Clean2::class$ = NULL;
                    jmethodID *Clean2::mids$ = NULL;
                    jint Clean2::YYEOF = (jint) 0;
                    jint Clean2::YYINITIAL = (jint) 0;

                    jclass Clean2::initializeClass()
                    {
                        if (!class$)
                        {

                            jclass cls = (jclass) env->findClass("is/iclt/icenlp/core/iceparser/Clean2");

                            mids$ = new jmethodID[max_mid];
                            mids$[mid_init$_cf2e3c10] = env->getMethodID(cls, "<init>", "(Ljava/io/Reader;)V");
                            mids$[mid_init$_be2e4f90] = env->getMethodID(cls, "<init>", "(Ljava/io/InputStream;)V");
                            mids$[mid_main_4dd4540c] = env->getStaticMethodID(cls, "main", "([Ljava/lang/String;)V");
                            mids$[mid_parse_5bcd5850] = env->getMethodID(cls, "parse", "(Ljava/io/Writer;)V");
                            mids$[mid_yybegin_39c7bd3c] = env->getMethodID(cls, "yybegin", "(I)V");
                            mids$[mid_yycharat_39c7bd29] = env->getMethodID(cls, "yycharat", "(I)C");
                            mids$[mid_yyclose_54c6a166] = env->getMethodID(cls, "yyclose", "()V");
                            mids$[mid_yylength_54c6a179] = env->getMethodID(cls, "yylength", "()I");
                            mids$[mid_yylex_54c6a179] = env->getMethodID(cls, "yylex", "()I");
                            mids$[mid_yypushback_39c7bd3c] = env->getMethodID(cls, "yypushback", "(I)V");
                            mids$[mid_yyreset_cf2e3c10] = env->getMethodID(cls, "yyreset", "(Ljava/io/Reader;)V");
                            mids$[mid_yystate_54c6a179] = env->getMethodID(cls, "yystate", "()I");
                            mids$[mid_yytext_14c7b5c5] = env->getMethodID(cls, "yytext", "()Ljava/lang/String;");

                            class$ = (::java::lang::Class *) new JObject(cls);
                            cls = (jclass) class$->this$;

                            YYEOF = env->getStaticIntField(cls, "YYEOF");
                            YYINITIAL = env->getStaticIntField(cls, "YYINITIAL");
                        }
                        return (jclass) class$->this$;
                    }

                    Clean2::Clean2(const ::java::io::Reader & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_cf2e3c10, a0.this$)) {}

                    Clean2::Clean2(const ::java::io::InputStream & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_be2e4f90, a0.this$)) {}

                    void Clean2::main(const JArray< ::java::lang::String > & a0)
                    {
                        jclass cls = initializeClass();
                        env->callStaticVoidMethod(cls, mids$[mid_main_4dd4540c], a0.this$);
                    }

                    void Clean2::parse(const ::java::io::Writer & a0) const
                    {
                        env->callVoidMethod(this$, mids$[mid_parse_5bcd5850], a0.this$);
                    }

                    void Clean2::yybegin(jint a0) const
                    {
                        env->callVoidMethod(this$, mids$[mid_yybegin_39c7bd3c], a0);
                    }

                    jchar Clean2::yycharat(jint a0) const
                    {
                        return env->callCharMethod(this$, mids$[mid_yycharat_39c7bd29], a0);
                    }

                    void Clean2::yyclose() const
                    {
                        env->callVoidMethod(this$, mids$[mid_yyclose_54c6a166]);
                    }

                    jint Clean2::yylength() const
                    {
                        return env->callIntMethod(this$, mids$[mid_yylength_54c6a179]);
                    }

                    jint Clean2::yylex() const
                    {
                        return env->callIntMethod(this$, mids$[mid_yylex_54c6a179]);
                    }

                    void Clean2::yypushback(jint a0) const
                    {
                        env->callVoidMethod(this$, mids$[mid_yypushback_39c7bd3c], a0);
                    }

                    void Clean2::yyreset(const ::java::io::Reader & a0) const
                    {
                        env->callVoidMethod(this$, mids$[mid_yyreset_cf2e3c10], a0.this$);
                    }

                    jint Clean2::yystate() const
                    {
                        return env->callIntMethod(this$, mids$[mid_yystate_54c6a179]);
                    }

                    ::java::lang::String Clean2::yytext() const
                    {
                        return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_yytext_14c7b5c5]));
                    }
                }
            }
        }
    }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace is {
    namespace iclt {
        namespace icenlp {
            namespace core {
                namespace iceparser {
                    static PyObject *t_Clean2_cast_(PyTypeObject *type, PyObject *arg);
                    static PyObject *t_Clean2_instance_(PyTypeObject *type, PyObject *arg);
                    static int t_Clean2_init_(t_Clean2 *self, PyObject *args, PyObject *kwds);
                    static PyObject *t_Clean2_main(PyTypeObject *type, PyObject *arg);
                    static PyObject *t_Clean2_parse(t_Clean2 *self, PyObject *arg);
                    static PyObject *t_Clean2_yybegin(t_Clean2 *self, PyObject *arg);
                    static PyObject *t_Clean2_yycharat(t_Clean2 *self, PyObject *arg);
                    static PyObject *t_Clean2_yyclose(t_Clean2 *self);
                    static PyObject *t_Clean2_yylength(t_Clean2 *self);
                    static PyObject *t_Clean2_yylex(t_Clean2 *self);
                    static PyObject *t_Clean2_yypushback(t_Clean2 *self, PyObject *arg);
                    static PyObject *t_Clean2_yyreset(t_Clean2 *self, PyObject *arg);
                    static PyObject *t_Clean2_yystate(t_Clean2 *self);
                    static PyObject *t_Clean2_yytext(t_Clean2 *self);

                    static PyMethodDef t_Clean2__methods_[] = {
                        DECLARE_METHOD(t_Clean2, cast_, METH_O | METH_CLASS),
                        DECLARE_METHOD(t_Clean2, instance_, METH_O | METH_CLASS),
                        DECLARE_METHOD(t_Clean2, main, METH_O | METH_CLASS),
                        DECLARE_METHOD(t_Clean2, parse, METH_O),
                        DECLARE_METHOD(t_Clean2, yybegin, METH_O),
                        DECLARE_METHOD(t_Clean2, yycharat, METH_O),
                        DECLARE_METHOD(t_Clean2, yyclose, METH_NOARGS),
                        DECLARE_METHOD(t_Clean2, yylength, METH_NOARGS),
                        DECLARE_METHOD(t_Clean2, yylex, METH_NOARGS),
                        DECLARE_METHOD(t_Clean2, yypushback, METH_O),
                        DECLARE_METHOD(t_Clean2, yyreset, METH_O),
                        DECLARE_METHOD(t_Clean2, yystate, METH_NOARGS),
                        DECLARE_METHOD(t_Clean2, yytext, METH_NOARGS),
                        { NULL, NULL, 0, NULL }
                    };

                    DECLARE_TYPE(Clean2, t_Clean2, ::java::lang::Object, Clean2, t_Clean2_init_, 0, 0, 0, 0, 0);

                    void t_Clean2::install(PyObject *module)
                    {
                        installType(&PY_TYPE(Clean2), module, "Clean2", 0);
                    }

                    void t_Clean2::initialize(PyObject *module)
                    {
                        PyDict_SetItemString(PY_TYPE(Clean2).tp_dict, "class_", make_descriptor(Clean2::initializeClass, 1));
                        PyDict_SetItemString(PY_TYPE(Clean2).tp_dict, "wrapfn_", make_descriptor(t_Clean2::wrap_jobject));
                        PyDict_SetItemString(PY_TYPE(Clean2).tp_dict, "boxfn_", make_descriptor(boxObject));
                        Clean2::initializeClass();
                        PyDict_SetItemString(PY_TYPE(Clean2).tp_dict, "YYEOF", make_descriptor(Clean2::YYEOF));
                        PyDict_SetItemString(PY_TYPE(Clean2).tp_dict, "YYINITIAL", make_descriptor(Clean2::YYINITIAL));
                    }

                    static PyObject *t_Clean2_cast_(PyTypeObject *type, PyObject *arg)
                    {
                        if (!(arg = castCheck(arg, Clean2::initializeClass, 1)))
                            return NULL;
                        return t_Clean2::wrap_Object(Clean2(((t_Clean2 *) arg)->object.this$));
                    }
                    static PyObject *t_Clean2_instance_(PyTypeObject *type, PyObject *arg)
                    {
                        if (!castCheck(arg, Clean2::initializeClass, 0))
                            Py_RETURN_FALSE;
                        Py_RETURN_TRUE;
                    }

                    static int t_Clean2_init_(t_Clean2 *self, PyObject *args, PyObject *kwds)
                    {
                        switch (PyTuple_GET_SIZE(args)) {
                          case 1:
                            {
                                ::java::io::Reader a0((jobject) NULL);
                                Clean2 object((jobject) NULL);

                                if (!parseArgs(args, "k", ::java::io::Reader::initializeClass, &a0))
                                {
                                    INT_CALL(object = Clean2(a0));
                                    self->object = object;
                                    break;
                                }
                            }
                            {
                                ::java::io::InputStream a0((jobject) NULL);
                                Clean2 object((jobject) NULL);

                                if (!parseArgs(args, "k", ::java::io::InputStream::initializeClass, &a0))
                                {
                                    INT_CALL(object = Clean2(a0));
                                    self->object = object;
                                    break;
                                }
                            }
                          default:
                            PyErr_SetArgsError((PyObject *) self, "__init__", args);
                            return -1;
                        }

                        return 0;
                    }

                    static PyObject *t_Clean2_main(PyTypeObject *type, PyObject *arg)
                    {
                        JArray< ::java::lang::String > a0((jobject) NULL);

                        if (!parseArg(arg, "[s", &a0))
                        {
                            OBJ_CALL(::is::iclt::icenlp::core::iceparser::Clean2::main(a0));
                            Py_RETURN_NONE;
                        }

                        PyErr_SetArgsError(type, "main", arg);
                        return NULL;
                    }

                    static PyObject *t_Clean2_parse(t_Clean2 *self, PyObject *arg)
                    {
                        ::java::io::Writer a0((jobject) NULL);

                        if (!parseArg(arg, "k", ::java::io::Writer::initializeClass, &a0))
                        {
                            OBJ_CALL(self->object.parse(a0));
                            Py_RETURN_NONE;
                        }

                        PyErr_SetArgsError((PyObject *) self, "parse", arg);
                        return NULL;
                    }

                    static PyObject *t_Clean2_yybegin(t_Clean2 *self, PyObject *arg)
                    {
                        jint a0;

                        if (!parseArg(arg, "I", &a0))
                        {
                            OBJ_CALL(self->object.yybegin(a0));
                            Py_RETURN_NONE;
                        }

                        PyErr_SetArgsError((PyObject *) self, "yybegin", arg);
                        return NULL;
                    }

                    static PyObject *t_Clean2_yycharat(t_Clean2 *self, PyObject *arg)
                    {
                        jint a0;
                        jchar result;

                        if (!parseArg(arg, "I", &a0))
                        {
                            OBJ_CALL(result = self->object.yycharat(a0));
                            return PyUnicode_FromUnicode((Py_UNICODE *) &result, 1);
                        }

                        PyErr_SetArgsError((PyObject *) self, "yycharat", arg);
                        return NULL;
                    }

                    static PyObject *t_Clean2_yyclose(t_Clean2 *self)
                    {
                        OBJ_CALL(self->object.yyclose());
                        Py_RETURN_NONE;
                    }

                    static PyObject *t_Clean2_yylength(t_Clean2 *self)
                    {
                        jint result;
                        OBJ_CALL(result = self->object.yylength());
                        return PyInt_FromLong((long) result);
                    }

                    static PyObject *t_Clean2_yylex(t_Clean2 *self)
                    {
                        jint result;
                        OBJ_CALL(result = self->object.yylex());
                        return PyInt_FromLong((long) result);
                    }

                    static PyObject *t_Clean2_yypushback(t_Clean2 *self, PyObject *arg)
                    {
                        jint a0;

                        if (!parseArg(arg, "I", &a0))
                        {
                            OBJ_CALL(self->object.yypushback(a0));
                            Py_RETURN_NONE;
                        }

                        PyErr_SetArgsError((PyObject *) self, "yypushback", arg);
                        return NULL;
                    }

                    static PyObject *t_Clean2_yyreset(t_Clean2 *self, PyObject *arg)
                    {
                        ::java::io::Reader a0((jobject) NULL);

                        if (!parseArg(arg, "k", ::java::io::Reader::initializeClass, &a0))
                        {
                            OBJ_CALL(self->object.yyreset(a0));
                            Py_RETURN_NONE;
                        }

                        PyErr_SetArgsError((PyObject *) self, "yyreset", arg);
                        return NULL;
                    }

                    static PyObject *t_Clean2_yystate(t_Clean2 *self)
                    {
                        jint result;
                        OBJ_CALL(result = self->object.yystate());
                        return PyInt_FromLong((long) result);
                    }

                    static PyObject *t_Clean2_yytext(t_Clean2 *self)
                    {
                        ::java::lang::String result((jobject) NULL);
                        OBJ_CALL(result = self->object.yytext());
                        return j2p(result);
                    }
                }
            }
        }
    }
}
#include <jni.h>
#include "JCCEnv.h"
#include "is/iclt/icenlp/core/icemorphy/MorphoRuleVerbPastParticiple.h"
#include "is/iclt/icenlp/core/icemorphy/MorphoRuleVerb$Mood.h"
#include "is/iclt/icenlp/core/icemorphy/IceMorphy$MorphoClass.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "is/iclt/icenlp/core/icemorphy/MorphoRuleVerb$Voice.h"
#include "JArray.h"

namespace is {
    namespace iclt {
        namespace icenlp {
            namespace core {
                namespace icemorphy {

                    ::java::lang::Class *MorphoRuleVerbPastParticiple::class$ = NULL;
                    jmethodID *MorphoRuleVerbPastParticiple::mids$ = NULL;

                    jclass MorphoRuleVerbPastParticiple::initializeClass()
                    {
                        if (!class$)
                        {

                            jclass cls = (jclass) env->findClass("is/iclt/icenlp/core/icemorphy/MorphoRuleVerbPastParticiple");

                            mids$ = new jmethodID[max_mid];
                            mids$[mid_init$_5b0ae4fd] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;ILis/iclt/icenlp/core/icemorphy/IceMorphy$MorphoClass;Lis/iclt/icenlp/core/icemorphy/MorphoRuleVerb$Mood;Lis/iclt/icenlp/core/icemorphy/MorphoRuleVerb$Voice;CCCCZ)V");
                            mids$[mid_init$_d1abb45a] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;ILis/iclt/icenlp/core/icemorphy/IceMorphy$MorphoClass;Lis/iclt/icenlp/core/icemorphy/MorphoRuleVerb$Mood;Lis/iclt/icenlp/core/icemorphy/MorphoRuleVerb$Voice;CCCCZZ)V");

                            class$ = (::java::lang::Class *) new JObject(cls);
                        }
                        return (jclass) class$->this$;
                    }

                    MorphoRuleVerbPastParticiple::MorphoRuleVerbPastParticiple(const ::java::lang::String & a0, jint a1, const ::is::iclt::icenlp::core::icemorphy::IceMorphy$MorphoClass & a2, const ::is::iclt::icenlp::core::icemorphy::MorphoRuleVerb$Mood & a3, const ::is::iclt::icenlp::core::icemorphy::MorphoRuleVerb$Voice & a4, jchar a5, jchar a6, jchar a7, jchar a8, jboolean a9) : ::is::iclt::icenlp::core::icemorphy::MorphoRuleVerbFinite(env->newObject(initializeClass, &mids$, mid_init$_5b0ae4fd, a0.this$, a1, a2.this$, a3.this$, a4.this$, a5, a6, a7, a8, a9)) {}

                    MorphoRuleVerbPastParticiple::MorphoRuleVerbPastParticiple(const ::java::lang::String & a0, jint a1, const ::is::iclt::icenlp::core::icemorphy::IceMorphy$MorphoClass & a2, const ::is::iclt::icenlp::core::icemorphy::MorphoRuleVerb$Mood & a3, const ::is::iclt::icenlp::core::icemorphy::MorphoRuleVerb$Voice & a4, jchar a5, jchar a6, jchar a7, jchar a8, jboolean a9, jboolean a10) : ::is::iclt::icenlp::core::icemorphy::MorphoRuleVerbFinite(env->newObject(initializeClass, &mids$, mid_init$_d1abb45a, a0.this$, a1, a2.this$, a3.this$, a4.this$, a5, a6, a7, a8, a9, a10)) {}
                }
            }
        }
    }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace is {
    namespace iclt {
        namespace icenlp {
            namespace core {
                namespace icemorphy {
                    static PyObject *t_MorphoRuleVerbPastParticiple_cast_(PyTypeObject *type, PyObject *arg);
                    static PyObject *t_MorphoRuleVerbPastParticiple_instance_(PyTypeObject *type, PyObject *arg);
                    static int t_MorphoRuleVerbPastParticiple_init_(t_MorphoRuleVerbPastParticiple *self, PyObject *args, PyObject *kwds);

                    static PyMethodDef t_MorphoRuleVerbPastParticiple__methods_[] = {
                        DECLARE_METHOD(t_MorphoRuleVerbPastParticiple, cast_, METH_O | METH_CLASS),
                        DECLARE_METHOD(t_MorphoRuleVerbPastParticiple, instance_, METH_O | METH_CLASS),
                        { NULL, NULL, 0, NULL }
                    };

                    DECLARE_TYPE(MorphoRuleVerbPastParticiple, t_MorphoRuleVerbPastParticiple, ::is::iclt::icenlp::core::icemorphy::MorphoRuleVerbFinite, MorphoRuleVerbPastParticiple, t_MorphoRuleVerbPastParticiple_init_, 0, 0, 0, 0, 0);

                    void t_MorphoRuleVerbPastParticiple::install(PyObject *module)
                    {
                        installType(&PY_TYPE(MorphoRuleVerbPastParticiple), module, "MorphoRuleVerbPastParticiple", 0);
                    }

                    void t_MorphoRuleVerbPastParticiple::initialize(PyObject *module)
                    {
                        PyDict_SetItemString(PY_TYPE(MorphoRuleVerbPastParticiple).tp_dict, "class_", make_descriptor(MorphoRuleVerbPastParticiple::initializeClass, 1));
                        PyDict_SetItemString(PY_TYPE(MorphoRuleVerbPastParticiple).tp_dict, "wrapfn_", make_descriptor(t_MorphoRuleVerbPastParticiple::wrap_jobject));
                        PyDict_SetItemString(PY_TYPE(MorphoRuleVerbPastParticiple).tp_dict, "boxfn_", make_descriptor(boxObject));
                    }

                    static PyObject *t_MorphoRuleVerbPastParticiple_cast_(PyTypeObject *type, PyObject *arg)
                    {
                        if (!(arg = castCheck(arg, MorphoRuleVerbPastParticiple::initializeClass, 1)))
                            return NULL;
                        return t_MorphoRuleVerbPastParticiple::wrap_Object(MorphoRuleVerbPastParticiple(((t_MorphoRuleVerbPastParticiple *) arg)->object.this$));
                    }
                    static PyObject *t_MorphoRuleVerbPastParticiple_instance_(PyTypeObject *type, PyObject *arg)
                    {
                        if (!castCheck(arg, MorphoRuleVerbPastParticiple::initializeClass, 0))
                            Py_RETURN_FALSE;
                        Py_RETURN_TRUE;
                    }

                    static int t_MorphoRuleVerbPastParticiple_init_(t_MorphoRuleVerbPastParticiple *self, PyObject *args, PyObject *kwds)
                    {
                        switch (PyTuple_GET_SIZE(args)) {
                          case 10:
                            {
                                ::java::lang::String a0((jobject) NULL);
                                jint a1;
                                ::is::iclt::icenlp::core::icemorphy::IceMorphy$MorphoClass a2((jobject) NULL);
                                ::is::iclt::icenlp::core::icemorphy::MorphoRuleVerb$Mood a3((jobject) NULL);
                                ::is::iclt::icenlp::core::icemorphy::MorphoRuleVerb$Voice a4((jobject) NULL);
                                jchar a5;
                                jchar a6;
                                jchar a7;
                                jchar a8;
                                jboolean a9;
                                MorphoRuleVerbPastParticiple object((jobject) NULL);

                                if (!parseArgs(args, "sIkkkCCCCZ", ::is::iclt::icenlp::core::icemorphy::IceMorphy$MorphoClass::initializeClass, ::is::iclt::icenlp::core::icemorphy::MorphoRuleVerb$Mood::initializeClass, ::is::iclt::icenlp::core::icemorphy::MorphoRuleVerb$Voice::initializeClass, &a0, &a1, &a2, &a3, &a4, &a5, &a6, &a7, &a8, &a9))
                                {
                                    INT_CALL(object = MorphoRuleVerbPastParticiple(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9));
                                    self->object = object;
                                    break;
                                }
                            }
                            goto err;
                          case 11:
                            {
                                ::java::lang::String a0((jobject) NULL);
                                jint a1;
                                ::is::iclt::icenlp::core::icemorphy::IceMorphy$MorphoClass a2((jobject) NULL);
                                ::is::iclt::icenlp::core::icemorphy::MorphoRuleVerb$Mood a3((jobject) NULL);
                                ::is::iclt::icenlp::core::icemorphy::MorphoRuleVerb$Voice a4((jobject) NULL);
                                jchar a5;
                                jchar a6;
                                jchar a7;
                                jchar a8;
                                jboolean a9;
                                jboolean a10;
                                MorphoRuleVerbPastParticiple object((jobject) NULL);

                                if (!parseArgs(args, "sIkkkCCCCZZ", ::is::iclt::icenlp::core::icemorphy::IceMorphy$MorphoClass::initializeClass, ::is::iclt::icenlp::core::icemorphy::MorphoRuleVerb$Mood::initializeClass, ::is::iclt::icenlp::core::icemorphy::MorphoRuleVerb$Voice::initializeClass, &a0, &a1, &a2, &a3, &a4, &a5, &a6, &a7, &a8, &a9, &a10))
                                {
                                    INT_CALL(object = MorphoRuleVerbPastParticiple(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10));
                                    self->object = object;
                                    break;
                                }
                            }
                          default:
                          err:
                            PyErr_SetArgsError((PyObject *) self, "__init__", args);
                            return -1;
                        }

                        return 0;
                    }
                }
            }
        }
    }
}
#include <jni.h>
#include "JCCEnv.h"
#include "is/iclt/icenlp/runner/RunLemmald.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace is {
    namespace iclt {
        namespace icenlp {
            namespace runner {

                ::java::lang::Class *RunLemmald::class$ = NULL;
                jmethodID *RunLemmald::mids$ = NULL;

                jclass RunLemmald::initializeClass()
                {
                    if (!class$)
                    {

                        jclass cls = (jclass) env->findClass("is/iclt/icenlp/runner/RunLemmald");

                        mids$ = new jmethodID[max_mid];
                        mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                        mids$[mid_main_4dd4540c] = env->getStaticMethodID(cls, "main", "([Ljava/lang/String;)V");

                        class$ = (::java::lang::Class *) new JObject(cls);
                    }
                    return (jclass) class$->this$;
                }

                RunLemmald::RunLemmald() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

                void RunLemmald::main(const JArray< ::java::lang::String > & a0)
                {
                    jclass cls = initializeClass();
                    env->callStaticVoidMethod(cls, mids$[mid_main_4dd4540c], a0.this$);
                }
            }
        }
    }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace is {
    namespace iclt {
        namespace icenlp {
            namespace runner {
                static PyObject *t_RunLemmald_cast_(PyTypeObject *type, PyObject *arg);
                static PyObject *t_RunLemmald_instance_(PyTypeObject *type, PyObject *arg);
                static int t_RunLemmald_init_(t_RunLemmald *self, PyObject *args, PyObject *kwds);
                static PyObject *t_RunLemmald_main(PyTypeObject *type, PyObject *arg);

                static PyMethodDef t_RunLemmald__methods_[] = {
                    DECLARE_METHOD(t_RunLemmald, cast_, METH_O | METH_CLASS),
                    DECLARE_METHOD(t_RunLemmald, instance_, METH_O | METH_CLASS),
                    DECLARE_METHOD(t_RunLemmald, main, METH_O | METH_CLASS),
                    { NULL, NULL, 0, NULL }
                };

                DECLARE_TYPE(RunLemmald, t_RunLemmald, ::java::lang::Object, RunLemmald, t_RunLemmald_init_, 0, 0, 0, 0, 0);

                void t_RunLemmald::install(PyObject *module)
                {
                    installType(&PY_TYPE(RunLemmald), module, "RunLemmald", 0);
                }

                void t_RunLemmald::initialize(PyObject *module)
                {
                    PyDict_SetItemString(PY_TYPE(RunLemmald).tp_dict, "class_", make_descriptor(RunLemmald::initializeClass, 1));
                    PyDict_SetItemString(PY_TYPE(RunLemmald).tp_dict, "wrapfn_", make_descriptor(t_RunLemmald::wrap_jobject));
                    PyDict_SetItemString(PY_TYPE(RunLemmald).tp_dict, "boxfn_", make_descriptor(boxObject));
                }

                static PyObject *t_RunLemmald_cast_(PyTypeObject *type, PyObject *arg)
                {
                    if (!(arg = castCheck(arg, RunLemmald::initializeClass, 1)))
                        return NULL;
                    return t_RunLemmald::wrap_Object(RunLemmald(((t_RunLemmald *) arg)->object.this$));
                }
                static PyObject *t_RunLemmald_instance_(PyTypeObject *type, PyObject *arg)
                {
                    if (!castCheck(arg, RunLemmald::initializeClass, 0))
                        Py_RETURN_FALSE;
                    Py_RETURN_TRUE;
                }

                static int t_RunLemmald_init_(t_RunLemmald *self, PyObject *args, PyObject *kwds)
                {
                    RunLemmald object((jobject) NULL);

                    INT_CALL(object = RunLemmald());
                    self->object = object;

                    return 0;
                }

                static PyObject *t_RunLemmald_main(PyTypeObject *type, PyObject *arg)
                {
                    JArray< ::java::lang::String > a0((jobject) NULL);

                    if (!parseArg(arg, "[s", &a0))
                    {
                        OBJ_CALL(::is::iclt::icenlp::runner::RunLemmald::main(a0));
                        Py_RETURN_NONE;
                    }

                    PyErr_SetArgsError(type, "main", arg);
                    return NULL;
                }
            }
        }
    }
}
#include <jni.h>
#include "JCCEnv.h"
#include "is/iclt/icenlp/runner/RunNameFinder.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace is {
    namespace iclt {
        namespace icenlp {
            namespace runner {

                ::java::lang::Class *RunNameFinder::class$ = NULL;
                jmethodID *RunNameFinder::mids$ = NULL;

                jclass RunNameFinder::initializeClass()
                {
                    if (!class$)
                    {

                        jclass cls = (jclass) env->findClass("is/iclt/icenlp/runner/RunNameFinder");

                        mids$ = new jmethodID[max_mid];
                        mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                        mids$[mid_main_4dd4540c] = env->getStaticMethodID(cls, "main", "([Ljava/lang/String;)V");

                        class$ = (::java::lang::Class *) new JObject(cls);
                    }
                    return (jclass) class$->this$;
                }

                RunNameFinder::RunNameFinder() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

                void RunNameFinder::main(const JArray< ::java::lang::String > & a0)
                {
                    jclass cls = initializeClass();
                    env->callStaticVoidMethod(cls, mids$[mid_main_4dd4540c], a0.this$);
                }
            }
        }
    }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace is {
    namespace iclt {
        namespace icenlp {
            namespace runner {
                static PyObject *t_RunNameFinder_cast_(PyTypeObject *type, PyObject *arg);
                static PyObject *t_RunNameFinder_instance_(PyTypeObject *type, PyObject *arg);
                static int t_RunNameFinder_init_(t_RunNameFinder *self, PyObject *args, PyObject *kwds);
                static PyObject *t_RunNameFinder_main(PyTypeObject *type, PyObject *arg);

                static PyMethodDef t_RunNameFinder__methods_[] = {
                    DECLARE_METHOD(t_RunNameFinder, cast_, METH_O | METH_CLASS),
                    DECLARE_METHOD(t_RunNameFinder, instance_, METH_O | METH_CLASS),
                    DECLARE_METHOD(t_RunNameFinder, main, METH_O | METH_CLASS),
                    { NULL, NULL, 0, NULL }
                };

                DECLARE_TYPE(RunNameFinder, t_RunNameFinder, ::java::lang::Object, RunNameFinder, t_RunNameFinder_init_, 0, 0, 0, 0, 0);

                void t_RunNameFinder::install(PyObject *module)
                {
                    installType(&PY_TYPE(RunNameFinder), module, "RunNameFinder", 0);
                }

                void t_RunNameFinder::initialize(PyObject *module)
                {
                    PyDict_SetItemString(PY_TYPE(RunNameFinder).tp_dict, "class_", make_descriptor(RunNameFinder::initializeClass, 1));
                    PyDict_SetItemString(PY_TYPE(RunNameFinder).tp_dict, "wrapfn_", make_descriptor(t_RunNameFinder::wrap_jobject));
                    PyDict_SetItemString(PY_TYPE(RunNameFinder).tp_dict, "boxfn_", make_descriptor(boxObject));
                }

                static PyObject *t_RunNameFinder_cast_(PyTypeObject *type, PyObject *arg)
                {
                    if (!(arg = castCheck(arg, RunNameFinder::initializeClass, 1)))
                        return NULL;
                    return t_RunNameFinder::wrap_Object(RunNameFinder(((t_RunNameFinder *) arg)->object.this$));
                }
                static PyObject *t_RunNameFinder_instance_(PyTypeObject *type, PyObject *arg)
                {
                    if (!castCheck(arg, RunNameFinder::initializeClass, 0))
                        Py_RETURN_FALSE;
                    Py_RETURN_TRUE;
                }

                static int t_RunNameFinder_init_(t_RunNameFinder *self, PyObject *args, PyObject *kwds)
                {
                    RunNameFinder object((jobject) NULL);

                    INT_CALL(object = RunNameFinder());
                    self->object = object;

                    return 0;
                }

                static PyObject *t_RunNameFinder_main(PyTypeObject *type, PyObject *arg)
                {
                    JArray< ::java::lang::String > a0((jobject) NULL);

                    if (!parseArg(arg, "[s", &a0))
                    {
                        OBJ_CALL(::is::iclt::icenlp::runner::RunNameFinder::main(a0));
                        Py_RETURN_NONE;
                    }

                    PyErr_SetArgsError(type, "main", arg);
                    return NULL;
                }
            }
        }
    }
}
#include <jni.h>
#include "JCCEnv.h"
#include "is/iclt/icenlp/core/icetagger/IceTaggerOutput.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "is/iclt/icenlp/core/tokenizer/IceTokenTags.h"
#include "JArray.h"

namespace is {
    namespace iclt {
        namespace icenlp {
            namespace core {
                namespace icetagger {

                    ::java::lang::Class *IceTaggerOutput::class$ = NULL;
                    jmethodID *IceTaggerOutput::mids$ = NULL;

                    jclass IceTaggerOutput::initializeClass()
                    {
                        if (!class$)
                        {

                            jclass cls = (jclass) env->findClass("is/iclt/icenlp/core/icetagger/IceTaggerOutput");

                            mids$ = new jmethodID[max_mid];
                            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                            mids$[mid_init$_e0d3b7fb] = env->getMethodID(cls, "<init>", "(ILjava/lang/String;ZZLjava/lang/String;Z)V");
                            mids$[mid_buildOutput_12d5ebc7] = env->getMethodID(cls, "buildOutput", "(Lis/iclt/icenlp/core/tokenizer/IceTokenTags;II)Ljava/lang/String;");
                            mids$[mid_buildOutputBaseTagging_e57c73cb] = env->getMethodID(cls, "buildOutputBaseTagging", "(Lis/iclt/icenlp/core/tokenizer/IceTokenTags;)Ljava/lang/String;");
                            mids$[mid_getMappedTag_97a5258f] = env->getMethodID(cls, "getMappedTag", "(Ljava/lang/String;)Ljava/lang/String;");

                            class$ = (::java::lang::Class *) new JObject(cls);
                        }
                        return (jclass) class$->this$;
                    }

                    IceTaggerOutput::IceTaggerOutput() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

                    IceTaggerOutput::IceTaggerOutput(jint a0, const ::java::lang::String & a1, jboolean a2, jboolean a3, const ::java::lang::String & a4, jboolean a5) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_e0d3b7fb, a0, a1.this$, a2, a3, a4.this$, a5)) {}

                    ::java::lang::String IceTaggerOutput::buildOutput(const ::is::iclt::icenlp::core::tokenizer::IceTokenTags & a0, jint a1, jint a2) const
                    {
                        return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_buildOutput_12d5ebc7], a0.this$, a1, a2));
                    }

                    ::java::lang::String IceTaggerOutput::buildOutputBaseTagging(const ::is::iclt::icenlp::core::tokenizer::IceTokenTags & a0) const
                    {
                        return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_buildOutputBaseTagging_e57c73cb], a0.this$));
                    }
                }
            }
        }
    }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace is {
    namespace iclt {
        namespace icenlp {
            namespace core {
                namespace icetagger {
                    static PyObject *t_IceTaggerOutput_cast_(PyTypeObject *type, PyObject *arg);
                    static PyObject *t_IceTaggerOutput_instance_(PyTypeObject *type, PyObject *arg);
                    static int t_IceTaggerOutput_init_(t_IceTaggerOutput *self, PyObject *args, PyObject *kwds);
                    static PyObject *t_IceTaggerOutput_buildOutput(t_IceTaggerOutput *self, PyObject *args);
                    static PyObject *t_IceTaggerOutput_buildOutputBaseTagging(t_IceTaggerOutput *self, PyObject *arg);

                    static PyMethodDef t_IceTaggerOutput__methods_[] = {
                        DECLARE_METHOD(t_IceTaggerOutput, cast_, METH_O | METH_CLASS),
                        DECLARE_METHOD(t_IceTaggerOutput, instance_, METH_O | METH_CLASS),
                        DECLARE_METHOD(t_IceTaggerOutput, buildOutput, METH_VARARGS),
                        DECLARE_METHOD(t_IceTaggerOutput, buildOutputBaseTagging, METH_O),
                        { NULL, NULL, 0, NULL }
                    };

                    DECLARE_TYPE(IceTaggerOutput, t_IceTaggerOutput, ::java::lang::Object, IceTaggerOutput, t_IceTaggerOutput_init_, 0, 0, 0, 0, 0);

                    void t_IceTaggerOutput::install(PyObject *module)
                    {
                        installType(&PY_TYPE(IceTaggerOutput), module, "IceTaggerOutput", 0);
                    }

                    void t_IceTaggerOutput::initialize(PyObject *module)
                    {
                        PyDict_SetItemString(PY_TYPE(IceTaggerOutput).tp_dict, "class_", make_descriptor(IceTaggerOutput::initializeClass, 1));
                        PyDict_SetItemString(PY_TYPE(IceTaggerOutput).tp_dict, "wrapfn_", make_descriptor(t_IceTaggerOutput::wrap_jobject));
                        PyDict_SetItemString(PY_TYPE(IceTaggerOutput).tp_dict, "boxfn_", make_descriptor(boxObject));
                    }

                    static PyObject *t_IceTaggerOutput_cast_(PyTypeObject *type, PyObject *arg)
                    {
                        if (!(arg = castCheck(arg, IceTaggerOutput::initializeClass, 1)))
                            return NULL;
                        return t_IceTaggerOutput::wrap_Object(IceTaggerOutput(((t_IceTaggerOutput *) arg)->object.this$));
                    }
                    static PyObject *t_IceTaggerOutput_instance_(PyTypeObject *type, PyObject *arg)
                    {
                        if (!castCheck(arg, IceTaggerOutput::initializeClass, 0))
                            Py_RETURN_FALSE;
                        Py_RETURN_TRUE;
                    }

                    static int t_IceTaggerOutput_init_(t_IceTaggerOutput *self, PyObject *args, PyObject *kwds)
                    {
                        switch (PyTuple_GET_SIZE(args)) {
                          case 0:
                            {
                                IceTaggerOutput object((jobject) NULL);

                                INT_CALL(object = IceTaggerOutput());
                                self->object = object;
                                break;
                            }
                            goto err;
                          case 6:
                            {
                                jint a0;
                                ::java::lang::String a1((jobject) NULL);
                                jboolean a2;
                                jboolean a3;
                                ::java::lang::String a4((jobject) NULL);
                                jboolean a5;
                                IceTaggerOutput object((jobject) NULL);

                                if (!parseArgs(args, "IsZZsZ", &a0, &a1, &a2, &a3, &a4, &a5))
                                {
                                    INT_CALL(object = IceTaggerOutput(a0, a1, a2, a3, a4, a5));
                                    self->object = object;
                                    break;
                                }
                            }
                          default:
                          err:
                            PyErr_SetArgsError((PyObject *) self, "__init__", args);
                            return -1;
                        }

                        return 0;
                    }

                    static PyObject *t_IceTaggerOutput_buildOutput(t_IceTaggerOutput *self, PyObject *args)
                    {
                        ::is::iclt::icenlp::core::tokenizer::IceTokenTags a0((jobject) NULL);
                        jint a1;
                        jint a2;
                        ::java::lang::String result((jobject) NULL);

                        if (!parseArgs(args, "kII", ::is::iclt::icenlp::core::tokenizer::IceTokenTags::initializeClass, &a0, &a1, &a2))
                        {
                            OBJ_CALL(result = self->object.buildOutput(a0, a1, a2));
                            return j2p(result);
                        }

                        PyErr_SetArgsError((PyObject *) self, "buildOutput", args);
                        return NULL;
                    }

                    static PyObject *t_IceTaggerOutput_buildOutputBaseTagging(t_IceTaggerOutput *self, PyObject *arg)
                    {
                        ::is::iclt::icenlp::core::tokenizer::IceTokenTags a0((jobject) NULL);
                        ::java::lang::String result((jobject) NULL);

                        if (!parseArg(arg, "k", ::is::iclt::icenlp::core::tokenizer::IceTokenTags::initializeClass, &a0))
                        {
                            OBJ_CALL(result = self->object.buildOutputBaseTagging(a0));
                            return j2p(result);
                        }

                        PyErr_SetArgsError((PyObject *) self, "buildOutputBaseTagging", arg);
                        return NULL;
                    }
                }
            }
        }
    }
}
#include <jni.h>
#include "JCCEnv.h"
#include "is/iclt/icenlp/core/utils/PropertiesEncoding.h"
#include "java/io/IOException.h"
#include "java/io/OutputStream.h"
#include "java/lang/Class.h"
#include "java/io/InputStream.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace is {
    namespace iclt {
        namespace icenlp {
            namespace core {
                namespace utils {

                    ::java::lang::Class *PropertiesEncoding::class$ = NULL;
                    jmethodID *PropertiesEncoding::mids$ = NULL;

                    jclass PropertiesEncoding::initializeClass()
                    {
                        if (!class$)
                        {

                            jclass cls = (jclass) env->findClass("is/iclt/icenlp/core/utils/PropertiesEncoding");

                            mids$ = new jmethodID[max_mid];
                            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                            mids$[mid_init$_c4afb15c] = env->getMethodID(cls, "<init>", "(Ljava/util/Properties;)V");
                            mids$[mid_load_be2e4f90] = env->getMethodID(cls, "load", "(Ljava/io/InputStream;)V");
                            mids$[mid_removeWhiteSpaces_97a5258f] = env->getStaticMethodID(cls, "removeWhiteSpaces", "(Ljava/lang/String;)Ljava/lang/String;");
                            mids$[mid_store_c195c3b2] = env->getMethodID(cls, "store", "(Ljava/io/OutputStream;Ljava/lang/String;)V");

                            class$ = (::java::lang::Class *) new JObject(cls);
                        }
                        return (jclass) class$->this$;
                    }

                    PropertiesEncoding::PropertiesEncoding() : ::java::util::Properties(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

                    PropertiesEncoding::PropertiesEncoding(const ::java::util::Properties & a0) : ::java::util::Properties(env->newObject(initializeClass, &mids$, mid_init$_c4afb15c, a0.this$)) {}

                    void PropertiesEncoding::load(const ::java::io::InputStream & a0) const
                    {
                        env->callVoidMethod(this$, mids$[mid_load_be2e4f90], a0.this$);
                    }

                    ::java::lang::String PropertiesEncoding::removeWhiteSpaces(const ::java::lang::String & a0)
                    {
                        jclass cls = initializeClass();
                        return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_removeWhiteSpaces_97a5258f], a0.this$));
                    }

                    void PropertiesEncoding::store(const ::java::io::OutputStream & a0, const ::java::lang::String & a1) const
                    {
                        env->callVoidMethod(this$, mids$[mid_store_c195c3b2], a0.this$, a1.this$);
                    }
                }
            }
        }
    }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace is {
    namespace iclt {
        namespace icenlp {
            namespace core {
                namespace utils {
                    static PyObject *t_PropertiesEncoding_cast_(PyTypeObject *type, PyObject *arg);
                    static PyObject *t_PropertiesEncoding_instance_(PyTypeObject *type, PyObject *arg);
                    static int t_PropertiesEncoding_init_(t_PropertiesEncoding *self, PyObject *args, PyObject *kwds);
                    static PyObject *t_PropertiesEncoding_load(t_PropertiesEncoding *self, PyObject *args);
                    static PyObject *t_PropertiesEncoding_removeWhiteSpaces(PyTypeObject *type, PyObject *arg);
                    static PyObject *t_PropertiesEncoding_store(t_PropertiesEncoding *self, PyObject *args);

                    static PyMethodDef t_PropertiesEncoding__methods_[] = {
                        DECLARE_METHOD(t_PropertiesEncoding, cast_, METH_O | METH_CLASS),
                        DECLARE_METHOD(t_PropertiesEncoding, instance_, METH_O | METH_CLASS),
                        DECLARE_METHOD(t_PropertiesEncoding, load, METH_VARARGS),
                        DECLARE_METHOD(t_PropertiesEncoding, removeWhiteSpaces, METH_O | METH_CLASS),
                        DECLARE_METHOD(t_PropertiesEncoding, store, METH_VARARGS),
                        { NULL, NULL, 0, NULL }
                    };

                    DECLARE_TYPE(PropertiesEncoding, t_PropertiesEncoding, ::java::util::Properties, PropertiesEncoding, t_PropertiesEncoding_init_, 0, 0, 0, 0, 0);

                    void t_PropertiesEncoding::install(PyObject *module)
                    {
                        installType(&PY_TYPE(PropertiesEncoding), module, "PropertiesEncoding", 0);
                    }

                    void t_PropertiesEncoding::initialize(PyObject *module)
                    {
                        PyDict_SetItemString(PY_TYPE(PropertiesEncoding).tp_dict, "class_", make_descriptor(PropertiesEncoding::initializeClass, 1));
                        PyDict_SetItemString(PY_TYPE(PropertiesEncoding).tp_dict, "wrapfn_", make_descriptor(t_PropertiesEncoding::wrap_jobject));
                        PyDict_SetItemString(PY_TYPE(PropertiesEncoding).tp_dict, "boxfn_", make_descriptor(boxObject));
                    }

                    static PyObject *t_PropertiesEncoding_cast_(PyTypeObject *type, PyObject *arg)
                    {
                        if (!(arg = castCheck(arg, PropertiesEncoding::initializeClass, 1)))
                            return NULL;
                        return t_PropertiesEncoding::wrap_Object(PropertiesEncoding(((t_PropertiesEncoding *) arg)->object.this$));
                    }
                    static PyObject *t_PropertiesEncoding_instance_(PyTypeObject *type, PyObject *arg)
                    {
                        if (!castCheck(arg, PropertiesEncoding::initializeClass, 0))
                            Py_RETURN_FALSE;
                        Py_RETURN_TRUE;
                    }

                    static int t_PropertiesEncoding_init_(t_PropertiesEncoding *self, PyObject *args, PyObject *kwds)
                    {
                        switch (PyTuple_GET_SIZE(args)) {
                          case 0:
                            {
                                PropertiesEncoding object((jobject) NULL);

                                INT_CALL(object = PropertiesEncoding());
                                self->object = object;
                                break;
                            }
                            goto err;
                          case 1:
                            {
                                ::java::util::Properties a0((jobject) NULL);
                                PropertiesEncoding object((jobject) NULL);

                                if (!parseArgs(args, "k", ::java::util::Properties::initializeClass, &a0))
                                {
                                    INT_CALL(object = PropertiesEncoding(a0));
                                    self->object = object;
                                    break;
                                }
                            }
                          default:
                          err:
                            PyErr_SetArgsError((PyObject *) self, "__init__", args);
                            return -1;
                        }

                        return 0;
                    }

                    static PyObject *t_PropertiesEncoding_load(t_PropertiesEncoding *self, PyObject *args)
                    {
                        ::java::io::InputStream a0((jobject) NULL);

                        if (!parseArgs(args, "k", ::java::io::InputStream::initializeClass, &a0))
                        {
                            OBJ_CALL(self->object.load(a0));
                            Py_RETURN_NONE;
                        }

                        return callSuper(&PY_TYPE(PropertiesEncoding), (PyObject *) self, "load", args, 2);
                    }

                    static PyObject *t_PropertiesEncoding_removeWhiteSpaces(PyTypeObject *type, PyObject *arg)
                    {
                        ::java::lang::String a0((jobject) NULL);
                        ::java::lang::String result((jobject) NULL);

                        if (!parseArg(arg, "s", &a0))
                        {
                            OBJ_CALL(result = ::is::iclt::icenlp::core::utils::PropertiesEncoding::removeWhiteSpaces(a0));
                            return j2p(result);
                        }

                        PyErr_SetArgsError(type, "removeWhiteSpaces", arg);
                        return NULL;
                    }

                    static PyObject *t_PropertiesEncoding_store(t_PropertiesEncoding *self, PyObject *args)
                    {
                        ::java::io::OutputStream a0((jobject) NULL);
                        ::java::lang::String a1((jobject) NULL);

                        if (!parseArgs(args, "ks", ::java::io::OutputStream::initializeClass, &a0, &a1))
                        {
                            OBJ_CALL(self->object.store(a0, a1));
                            Py_RETURN_NONE;
                        }

                        return callSuper(&PY_TYPE(PropertiesEncoding), (PyObject *) self, "store", args, 2);
                    }
                }
            }
        }
    }
}
#include <jni.h>
#include "JCCEnv.h"
#include "is/iclt/icenlp/core/lemmald/LemmaWord.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace is {
    namespace iclt {
        namespace icenlp {
            namespace core {
                namespace lemmald {

                    ::java::lang::Class *LemmaWord::class$ = NULL;
                    jmethodID *LemmaWord::mids$ = NULL;

                    jclass LemmaWord::initializeClass()
                    {
                        if (!class$)
                        {

                            jclass cls = (jclass) env->findClass("is/iclt/icenlp/core/lemmald/LemmaWord");

                            mids$ = new jmethodID[max_mid];
                            mids$[mid_init$_9c119564] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V");
                            mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
                            mids$[mid_getLemma_14c7b5c5] = env->getMethodID(cls, "getLemma", "()Ljava/lang/String;");
                            mids$[mid_getTag_14c7b5c5] = env->getMethodID(cls, "getTag", "()Ljava/lang/String;");
                            mids$[mid_getWordForm_14c7b5c5] = env->getMethodID(cls, "getWordForm", "()Ljava/lang/String;");
                            mids$[mid_setLemma_5fdc3f48] = env->getMethodID(cls, "setLemma", "(Ljava/lang/String;)V");
                            mids$[mid_setTag_5fdc3f48] = env->getMethodID(cls, "setTag", "(Ljava/lang/String;)V");
                            mids$[mid_setWordForm_5fdc3f48] = env->getMethodID(cls, "setWordForm", "(Ljava/lang/String;)V");
                            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

                            class$ = (::java::lang::Class *) new JObject(cls);
                        }
                        return (jclass) class$->this$;
                    }

                    LemmaWord::LemmaWord(const ::java::lang::String & a0, const ::java::lang::String & a1, const ::java::lang::String & a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_9c119564, a0.this$, a1.this$, a2.this$)) {}

                    jboolean LemmaWord::equals(const ::java::lang::Object & a0) const
                    {
                        return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
                    }

                    ::java::lang::String LemmaWord::getLemma() const
                    {
                        return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getLemma_14c7b5c5]));
                    }

                    ::java::lang::String LemmaWord::getTag() const
                    {
                        return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getTag_14c7b5c5]));
                    }

                    ::java::lang::String LemmaWord::getWordForm() const
                    {
                        return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getWordForm_14c7b5c5]));
                    }

                    void LemmaWord::setLemma(const ::java::lang::String & a0) const
                    {
                        env->callVoidMethod(this$, mids$[mid_setLemma_5fdc3f48], a0.this$);
                    }

                    void LemmaWord::setTag(const ::java::lang::String & a0) const
                    {
                        env->callVoidMethod(this$, mids$[mid_setTag_5fdc3f48], a0.this$);
                    }

                    void LemmaWord::setWordForm(const ::java::lang::String & a0) const
                    {
                        env->callVoidMethod(this$, mids$[mid_setWordForm_5fdc3f48], a0.this$);
                    }

                    ::java::lang::String LemmaWord::toString() const
                    {
                        return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
                    }
                }
            }
        }
    }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace is {
    namespace iclt {
        namespace icenlp {
            namespace core {
                namespace lemmald {
                    static PyObject *t_LemmaWord_cast_(PyTypeObject *type, PyObject *arg);
                    static PyObject *t_LemmaWord_instance_(PyTypeObject *type, PyObject *arg);
                    static int t_LemmaWord_init_(t_LemmaWord *self, PyObject *args, PyObject *kwds);
                    static PyObject *t_LemmaWord_equals(t_LemmaWord *self, PyObject *args);
                    static PyObject *t_LemmaWord_getLemma(t_LemmaWord *self);
                    static PyObject *t_LemmaWord_getTag(t_LemmaWord *self);
                    static PyObject *t_LemmaWord_getWordForm(t_LemmaWord *self);
                    static PyObject *t_LemmaWord_setLemma(t_LemmaWord *self, PyObject *arg);
                    static PyObject *t_LemmaWord_setTag(t_LemmaWord *self, PyObject *arg);
                    static PyObject *t_LemmaWord_setWordForm(t_LemmaWord *self, PyObject *arg);
                    static PyObject *t_LemmaWord_toString(t_LemmaWord *self, PyObject *args);
                    static PyObject *t_LemmaWord_get__lemma(t_LemmaWord *self, void *data);
                    static int t_LemmaWord_set__lemma(t_LemmaWord *self, PyObject *arg, void *data);
                    static PyObject *t_LemmaWord_get__tag(t_LemmaWord *self, void *data);
                    static int t_LemmaWord_set__tag(t_LemmaWord *self, PyObject *arg, void *data);
                    static PyObject *t_LemmaWord_get__wordForm(t_LemmaWord *self, void *data);
                    static int t_LemmaWord_set__wordForm(t_LemmaWord *self, PyObject *arg, void *data);
                    static PyGetSetDef t_LemmaWord__fields_[] = {
                        DECLARE_GETSET_FIELD(t_LemmaWord, lemma),
                        DECLARE_GETSET_FIELD(t_LemmaWord, tag),
                        DECLARE_GETSET_FIELD(t_LemmaWord, wordForm),
                        { NULL, NULL, NULL, NULL, NULL }
                    };

                    static PyMethodDef t_LemmaWord__methods_[] = {
                        DECLARE_METHOD(t_LemmaWord, cast_, METH_O | METH_CLASS),
                        DECLARE_METHOD(t_LemmaWord, instance_, METH_O | METH_CLASS),
                        DECLARE_METHOD(t_LemmaWord, equals, METH_VARARGS),
                        DECLARE_METHOD(t_LemmaWord, getLemma, METH_NOARGS),
                        DECLARE_METHOD(t_LemmaWord, getTag, METH_NOARGS),
                        DECLARE_METHOD(t_LemmaWord, getWordForm, METH_NOARGS),
                        DECLARE_METHOD(t_LemmaWord, setLemma, METH_O),
                        DECLARE_METHOD(t_LemmaWord, setTag, METH_O),
                        DECLARE_METHOD(t_LemmaWord, setWordForm, METH_O),
                        DECLARE_METHOD(t_LemmaWord, toString, METH_VARARGS),
                        { NULL, NULL, 0, NULL }
                    };

                    DECLARE_TYPE(LemmaWord, t_LemmaWord, ::java::lang::Object, LemmaWord, t_LemmaWord_init_, 0, 0, t_LemmaWord__fields_, 0, 0);

                    void t_LemmaWord::install(PyObject *module)
                    {
                        installType(&PY_TYPE(LemmaWord), module, "LemmaWord", 0);
                    }

                    void t_LemmaWord::initialize(PyObject *module)
                    {
                        PyDict_SetItemString(PY_TYPE(LemmaWord).tp_dict, "class_", make_descriptor(LemmaWord::initializeClass, 1));
                        PyDict_SetItemString(PY_TYPE(LemmaWord).tp_dict, "wrapfn_", make_descriptor(t_LemmaWord::wrap_jobject));
                        PyDict_SetItemString(PY_TYPE(LemmaWord).tp_dict, "boxfn_", make_descriptor(boxObject));
                    }

                    static PyObject *t_LemmaWord_cast_(PyTypeObject *type, PyObject *arg)
                    {
                        if (!(arg = castCheck(arg, LemmaWord::initializeClass, 1)))
                            return NULL;
                        return t_LemmaWord::wrap_Object(LemmaWord(((t_LemmaWord *) arg)->object.this$));
                    }
                    static PyObject *t_LemmaWord_instance_(PyTypeObject *type, PyObject *arg)
                    {
                        if (!castCheck(arg, LemmaWord::initializeClass, 0))
                            Py_RETURN_FALSE;
                        Py_RETURN_TRUE;
                    }

                    static int t_LemmaWord_init_(t_LemmaWord *self, PyObject *args, PyObject *kwds)
                    {
                        ::java::lang::String a0((jobject) NULL);
                        ::java::lang::String a1((jobject) NULL);
                        ::java::lang::String a2((jobject) NULL);
                        LemmaWord object((jobject) NULL);

                        if (!parseArgs(args, "sss", &a0, &a1, &a2))
                        {
                            INT_CALL(object = LemmaWord(a0, a1, a2));
                            self->object = object;
                        }
                        else
                        {
                            PyErr_SetArgsError((PyObject *) self, "__init__", args);
                            return -1;
                        }

                        return 0;
                    }

                    static PyObject *t_LemmaWord_equals(t_LemmaWord *self, PyObject *args)
                    {
                        ::java::lang::Object a0((jobject) NULL);
                        jboolean result;

                        if (!parseArgs(args, "o", &a0))
                        {
                            OBJ_CALL(result = self->object.equals(a0));
                            Py_RETURN_BOOL(result);
                        }

                        return callSuper(&PY_TYPE(LemmaWord), (PyObject *) self, "equals", args, 2);
                    }

                    static PyObject *t_LemmaWord_getLemma(t_LemmaWord *self)
                    {
                        ::java::lang::String result((jobject) NULL);
                        OBJ_CALL(result = self->object.getLemma());
                        return j2p(result);
                    }

                    static PyObject *t_LemmaWord_getTag(t_LemmaWord *self)
                    {
                        ::java::lang::String result((jobject) NULL);
                        OBJ_CALL(result = self->object.getTag());
                        return j2p(result);
                    }

                    static PyObject *t_LemmaWord_getWordForm(t_LemmaWord *self)
                    {
                        ::java::lang::String result((jobject) NULL);
                        OBJ_CALL(result = self->object.getWordForm());
                        return j2p(result);
                    }

                    static PyObject *t_LemmaWord_setLemma(t_LemmaWord *self, PyObject *arg)
                    {
                        ::java::lang::String a0((jobject) NULL);

                        if (!parseArg(arg, "s", &a0))
                        {
                            OBJ_CALL(self->object.setLemma(a0));
                            Py_RETURN_NONE;
                        }

                        PyErr_SetArgsError((PyObject *) self, "setLemma", arg);
                        return NULL;
                    }

                    static PyObject *t_LemmaWord_setTag(t_LemmaWord *self, PyObject *arg)
                    {
                        ::java::lang::String a0((jobject) NULL);

                        if (!parseArg(arg, "s", &a0))
                        {
                            OBJ_CALL(self->object.setTag(a0));
                            Py_RETURN_NONE;
                        }

                        PyErr_SetArgsError((PyObject *) self, "setTag", arg);
                        return NULL;
                    }

                    static PyObject *t_LemmaWord_setWordForm(t_LemmaWord *self, PyObject *arg)
                    {
                        ::java::lang::String a0((jobject) NULL);

                        if (!parseArg(arg, "s", &a0))
                        {
                            OBJ_CALL(self->object.setWordForm(a0));
                            Py_RETURN_NONE;
                        }

                        PyErr_SetArgsError((PyObject *) self, "setWordForm", arg);
                        return NULL;
                    }

                    static PyObject *t_LemmaWord_toString(t_LemmaWord *self, PyObject *args)
                    {
                        ::java::lang::String result((jobject) NULL);

                        if (!parseArgs(args, ""))
                        {
                            OBJ_CALL(result = self->object.toString());
                            return j2p(result);
                        }

                        return callSuper(&PY_TYPE(LemmaWord), (PyObject *) self, "toString", args, 2);
                    }

                    static PyObject *t_LemmaWord_get__lemma(t_LemmaWord *self, void *data)
                    {
                        ::java::lang::String value((jobject) NULL);
                        OBJ_CALL(value = self->object.getLemma());
                        return j2p(value);
                    }
                    static int t_LemmaWord_set__lemma(t_LemmaWord *self, PyObject *arg, void *data)
                    {
                        {
                            ::java::lang::String value((jobject) NULL);
                            if (!parseArg(arg, "s", &value))
                            {
                                INT_CALL(self->object.setLemma(value));
                                return 0;
                            }
                        }
                        PyErr_SetArgsError((PyObject *) self, "lemma", arg);
                        return -1;
                    }

                    static PyObject *t_LemmaWord_get__tag(t_LemmaWord *self, void *data)
                    {
                        ::java::lang::String value((jobject) NULL);
                        OBJ_CALL(value = self->object.getTag());
                        return j2p(value);
                    }
                    static int t_LemmaWord_set__tag(t_LemmaWord *self, PyObject *arg, void *data)
                    {
                        {
                            ::java::lang::String value((jobject) NULL);
                            if (!parseArg(arg, "s", &value))
                            {
                                INT_CALL(self->object.setTag(value));
                                return 0;
                            }
                        }
                        PyErr_SetArgsError((PyObject *) self, "tag", arg);
                        return -1;
                    }

                    static PyObject *t_LemmaWord_get__wordForm(t_LemmaWord *self, void *data)
                    {
                        ::java::lang::String value((jobject) NULL);
                        OBJ_CALL(value = self->object.getWordForm());
                        return j2p(value);
                    }
                    static int t_LemmaWord_set__wordForm(t_LemmaWord *self, PyObject *arg, void *data)
                    {
                        {
                            ::java::lang::String value((jobject) NULL);
                            if (!parseArg(arg, "s", &value))
                            {
                                INT_CALL(self->object.setWordForm(value));
                                return 0;
                            }
                        }
                        PyErr_SetArgsError((PyObject *) self, "wordForm", arg);
                        return -1;
                    }
                }
            }
        }
    }
}
#include <jni.h>
#include "JCCEnv.h"
#include "is/iclt/icenlp/core/utils/TrieNode.h"
#include "java/util/ArrayList.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace is {
    namespace iclt {
        namespace icenlp {
            namespace core {
                namespace utils {

                    ::java::lang::Class *TrieNode::class$ = NULL;
                    jmethodID *TrieNode::mids$ = NULL;

                    jclass TrieNode::initializeClass()
                    {
                        if (!class$)
                        {

                            jclass cls = (jclass) env->findClass("is/iclt/icenlp/core/utils/TrieNode");

                            mids$ = new jmethodID[max_mid];
                            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                            mids$[mid_init$_64a6756b] = env->getMethodID(cls, "<init>", "(CZ)V");
                            mids$[mid_init$_53c95395] = env->getMethodID(cls, "<init>", "(CZLjava/lang/String;)V");
                            mids$[mid_addSubNode_cb603d8d] = env->getMethodID(cls, "addSubNode", "(Lis/iclt/icenlp/core/utils/TrieNode;)V");
                            mids$[mid_findSubNode_09702e88] = env->getMethodID(cls, "findSubNode", "(C)Lis/iclt/icenlp/core/utils/TrieNode;");
                            mids$[mid_getLabel_54c6a173] = env->getMethodID(cls, "getLabel", "()C");
                            mids$[mid_getNextNodes_21eb51b0] = env->getMethodID(cls, "getNextNodes", "()Ljava/util/ArrayList;");
                            mids$[mid_getValue_14c7b5c5] = env->getMethodID(cls, "getValue", "()Ljava/lang/String;");
                            mids$[mid_numCharacters_54c6a179] = env->getMethodID(cls, "numCharacters", "()I");
                            mids$[mid_numStrings_54c6a179] = env->getMethodID(cls, "numStrings", "()I");
                            mids$[mid_setValue_5fdc3f48] = env->getMethodID(cls, "setValue", "(Ljava/lang/String;)V");

                            class$ = (::java::lang::Class *) new JObject(cls);
                        }
                        return (jclass) class$->this$;
                    }

                    TrieNode::TrieNode() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

                    TrieNode::TrieNode(jchar a0, jboolean a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_64a6756b, a0, a1)) {}

                    TrieNode::TrieNode(jchar a0, jboolean a1, const ::java::lang::String & a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_53c95395, a0, a1, a2.this$)) {}

                    void TrieNode::addSubNode(const TrieNode & a0) const
                    {
                        env->callVoidMethod(this$, mids$[mid_addSubNode_cb603d8d], a0.this$);
                    }

                    TrieNode TrieNode::findSubNode(jchar a0) const
                    {
                        return TrieNode(env->callObjectMethod(this$, mids$[mid_findSubNode_09702e88], a0));
                    }

                    jchar TrieNode::getLabel() const
                    {
                        return env->callCharMethod(this$, mids$[mid_getLabel_54c6a173]);
                    }

                    ::java::util::ArrayList TrieNode::getNextNodes() const
                    {
                        return ::java::util::ArrayList(env->callObjectMethod(this$, mids$[mid_getNextNodes_21eb51b0]));
                    }

                    ::java::lang::String TrieNode::getValue() const
                    {
                        return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getValue_14c7b5c5]));
                    }

                    jint TrieNode::numCharacters() const
                    {
                        return env->callIntMethod(this$, mids$[mid_numCharacters_54c6a179]);
                    }

                    jint TrieNode::numStrings() const
                    {
                        return env->callIntMethod(this$, mids$[mid_numStrings_54c6a179]);
                    }

                    void TrieNode::setValue(const ::java::lang::String & a0) const
                    {
                        env->callVoidMethod(this$, mids$[mid_setValue_5fdc3f48], a0.this$);
                    }
                }
            }
        }
    }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace is {
    namespace iclt {
        namespace icenlp {
            namespace core {
                namespace utils {
                    static PyObject *t_TrieNode_cast_(PyTypeObject *type, PyObject *arg);
                    static PyObject *t_TrieNode_instance_(PyTypeObject *type, PyObject *arg);
                    static int t_TrieNode_init_(t_TrieNode *self, PyObject *args, PyObject *kwds);
                    static PyObject *t_TrieNode_addSubNode(t_TrieNode *self, PyObject *arg);
                    static PyObject *t_TrieNode_findSubNode(t_TrieNode *self, PyObject *arg);
                    static PyObject *t_TrieNode_getLabel(t_TrieNode *self);
                    static PyObject *t_TrieNode_getNextNodes(t_TrieNode *self);
                    static PyObject *t_TrieNode_getValue(t_TrieNode *self);
                    static PyObject *t_TrieNode_numCharacters(t_TrieNode *self);
                    static PyObject *t_TrieNode_numStrings(t_TrieNode *self);
                    static PyObject *t_TrieNode_setValue(t_TrieNode *self, PyObject *arg);
                    static PyObject *t_TrieNode_get__label(t_TrieNode *self, void *data);
                    static PyObject *t_TrieNode_get__nextNodes(t_TrieNode *self, void *data);
                    static PyObject *t_TrieNode_get__value(t_TrieNode *self, void *data);
                    static int t_TrieNode_set__value(t_TrieNode *self, PyObject *arg, void *data);
                    static PyGetSetDef t_TrieNode__fields_[] = {
                        DECLARE_GET_FIELD(t_TrieNode, label),
                        DECLARE_GET_FIELD(t_TrieNode, nextNodes),
                        DECLARE_GETSET_FIELD(t_TrieNode, value),
                        { NULL, NULL, NULL, NULL, NULL }
                    };

                    static PyMethodDef t_TrieNode__methods_[] = {
                        DECLARE_METHOD(t_TrieNode, cast_, METH_O | METH_CLASS),
                        DECLARE_METHOD(t_TrieNode, instance_, METH_O | METH_CLASS),
                        DECLARE_METHOD(t_TrieNode, addSubNode, METH_O),
                        DECLARE_METHOD(t_TrieNode, findSubNode, METH_O),
                        DECLARE_METHOD(t_TrieNode, getLabel, METH_NOARGS),
                        DECLARE_METHOD(t_TrieNode, getNextNodes, METH_NOARGS),
                        DECLARE_METHOD(t_TrieNode, getValue, METH_NOARGS),
                        DECLARE_METHOD(t_TrieNode, numCharacters, METH_NOARGS),
                        DECLARE_METHOD(t_TrieNode, numStrings, METH_NOARGS),
                        DECLARE_METHOD(t_TrieNode, setValue, METH_O),
                        { NULL, NULL, 0, NULL }
                    };

                    DECLARE_TYPE(TrieNode, t_TrieNode, ::java::lang::Object, TrieNode, t_TrieNode_init_, 0, 0, t_TrieNode__fields_, 0, 0);

                    void t_TrieNode::install(PyObject *module)
                    {
                        installType(&PY_TYPE(TrieNode), module, "TrieNode", 0);
                    }

                    void t_TrieNode::initialize(PyObject *module)
                    {
                        PyDict_SetItemString(PY_TYPE(TrieNode).tp_dict, "class_", make_descriptor(TrieNode::initializeClass, 1));
                        PyDict_SetItemString(PY_TYPE(TrieNode).tp_dict, "wrapfn_", make_descriptor(t_TrieNode::wrap_jobject));
                        PyDict_SetItemString(PY_TYPE(TrieNode).tp_dict, "boxfn_", make_descriptor(boxObject));
                    }

                    static PyObject *t_TrieNode_cast_(PyTypeObject *type, PyObject *arg)
                    {
                        if (!(arg = castCheck(arg, TrieNode::initializeClass, 1)))
                            return NULL;
                        return t_TrieNode::wrap_Object(TrieNode(((t_TrieNode *) arg)->object.this$));
                    }
                    static PyObject *t_TrieNode_instance_(PyTypeObject *type, PyObject *arg)
                    {
                        if (!castCheck(arg, TrieNode::initializeClass, 0))
                            Py_RETURN_FALSE;
                        Py_RETURN_TRUE;
                    }

                    static int t_TrieNode_init_(t_TrieNode *self, PyObject *args, PyObject *kwds)
                    {
                        switch (PyTuple_GET_SIZE(args)) {
                          case 0:
                            {
                                TrieNode object((jobject) NULL);

                                INT_CALL(object = TrieNode());
                                self->object = object;
                                break;
                            }
                            goto err;
                          case 2:
                            {
                                jchar a0;
                                jboolean a1;
                                TrieNode object((jobject) NULL);

                                if (!parseArgs(args, "CZ", &a0, &a1))
                                {
                                    INT_CALL(object = TrieNode(a0, a1));
                                    self->object = object;
                                    break;
                                }
                            }
                            goto err;
                          case 3:
                            {
                                jchar a0;
                                jboolean a1;
                                ::java::lang::String a2((jobject) NULL);
                                TrieNode object((jobject) NULL);

                                if (!parseArgs(args, "CZs", &a0, &a1, &a2))
                                {
                                    INT_CALL(object = TrieNode(a0, a1, a2));
                                    self->object = object;
                                    break;
                                }
                            }
                          default:
                          err:
                            PyErr_SetArgsError((PyObject *) self, "__init__", args);
                            return -1;
                        }

                        return 0;
                    }

                    static PyObject *t_TrieNode_addSubNode(t_TrieNode *self, PyObject *arg)
                    {
                        TrieNode a0((jobject) NULL);

                        if (!parseArg(arg, "k", TrieNode::initializeClass, &a0))
                        {
                            OBJ_CALL(self->object.addSubNode(a0));
                            Py_RETURN_NONE;
                        }

                        PyErr_SetArgsError((PyObject *) self, "addSubNode", arg);
                        return NULL;
                    }

                    static PyObject *t_TrieNode_findSubNode(t_TrieNode *self, PyObject *arg)
                    {
                        jchar a0;
                        TrieNode result((jobject) NULL);

                        if (!parseArg(arg, "C", &a0))
                        {
                            OBJ_CALL(result = self->object.findSubNode(a0));
                            return t_TrieNode::wrap_Object(result);
                        }

                        PyErr_SetArgsError((PyObject *) self, "findSubNode", arg);
                        return NULL;
                    }

                    static PyObject *t_TrieNode_getLabel(t_TrieNode *self)
                    {
                        jchar result;
                        OBJ_CALL(result = self->object.getLabel());
                        return PyUnicode_FromUnicode((Py_UNICODE *) &result, 1);
                    }

                    static PyObject *t_TrieNode_getNextNodes(t_TrieNode *self)
                    {
                        ::java::util::ArrayList result((jobject) NULL);
                        OBJ_CALL(result = self->object.getNextNodes());
                        return ::java::util::t_ArrayList::wrap_Object(result);
                    }

                    static PyObject *t_TrieNode_getValue(t_TrieNode *self)
                    {
                        ::java::lang::String result((jobject) NULL);
                        OBJ_CALL(result = self->object.getValue());
                        return j2p(result);
                    }

                    static PyObject *t_TrieNode_numCharacters(t_TrieNode *self)
                    {
                        jint result;
                        OBJ_CALL(result = self->object.numCharacters());
                        return PyInt_FromLong((long) result);
                    }

                    static PyObject *t_TrieNode_numStrings(t_TrieNode *self)
                    {
                        jint result;
                        OBJ_CALL(result = self->object.numStrings());
                        return PyInt_FromLong((long) result);
                    }

                    static PyObject *t_TrieNode_setValue(t_TrieNode *self, PyObject *arg)
                    {
                        ::java::lang::String a0((jobject) NULL);

                        if (!parseArg(arg, "s", &a0))
                        {
                            OBJ_CALL(self->object.setValue(a0));
                            Py_RETURN_NONE;
                        }

                        PyErr_SetArgsError((PyObject *) self, "setValue", arg);
                        return NULL;
                    }

                    static PyObject *t_TrieNode_get__label(t_TrieNode *self, void *data)
                    {
                        jchar value;
                        OBJ_CALL(value = self->object.getLabel());
                        return PyUnicode_FromUnicode((Py_UNICODE *) &value, 1);
                    }

                    static PyObject *t_TrieNode_get__nextNodes(t_TrieNode *self, void *data)
                    {
                        ::java::util::ArrayList value((jobject) NULL);
                        OBJ_CALL(value = self->object.getNextNodes());
                        return ::java::util::t_ArrayList::wrap_Object(value);
                    }

                    static PyObject *t_TrieNode_get__value(t_TrieNode *self, void *data)
                    {
                        ::java::lang::String value((jobject) NULL);
                        OBJ_CALL(value = self->object.getValue());
                        return j2p(value);
                    }
                    static int t_TrieNode_set__value(t_TrieNode *self, PyObject *arg, void *data)
                    {
                        {
                            ::java::lang::String value((jobject) NULL);
                            if (!parseArg(arg, "s", &value))
                            {
                                INT_CALL(self->object.setValue(value));
                                return 0;
                            }
                        }
                        PyErr_SetArgsError((PyObject *) self, "value", arg);
                        return -1;
                    }
                }
            }
        }
    }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/util/Hashtable.h"
#include "java/util/Collection.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "java/lang/Cloneable.h"
#include "java/util/Map$Entry.h"
#include "java/util/Enumeration.h"
#include "java/io/Serializable.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "java/lang/Object.h"
#include "JArray.h"

namespace java {
    namespace util {

        ::java::lang::Class *Hashtable::class$ = NULL;
        jmethodID *Hashtable::mids$ = NULL;

        jclass Hashtable::initializeClass()
        {
            if (!class$)
            {

                jclass cls = (jclass) env->findClass("java/util/Hashtable");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                mids$[mid_init$_39c7bd3c] = env->getMethodID(cls, "<init>", "(I)V");
                mids$[mid_init$_4c9e2b1c] = env->getMethodID(cls, "<init>", "(Ljava/util/Map;)V");
                mids$[mid_init$_abdf2c51] = env->getMethodID(cls, "<init>", "(IF)V");
                mids$[mid_clear_54c6a166] = env->getMethodID(cls, "clear", "()V");
                mids$[mid_clone_846352c3] = env->getMethodID(cls, "clone", "()Ljava/lang/Object;");
                mids$[mid_contains_290588e2] = env->getMethodID(cls, "contains", "(Ljava/lang/Object;)Z");
                mids$[mid_containsKey_290588e2] = env->getMethodID(cls, "containsKey", "(Ljava/lang/Object;)Z");
                mids$[mid_containsValue_290588e2] = env->getMethodID(cls, "containsValue", "(Ljava/lang/Object;)Z");
                mids$[mid_elements_39f88070] = env->getMethodID(cls, "elements", "()Ljava/util/Enumeration;");
                mids$[mid_entrySet_03e99967] = env->getMethodID(cls, "entrySet", "()Ljava/util/Set;");
                mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
                mids$[mid_get_a932a95f] = env->getMethodID(cls, "get", "(Ljava/lang/Object;)Ljava/lang/Object;");
                mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
                mids$[mid_isEmpty_54c6a16a] = env->getMethodID(cls, "isEmpty", "()Z");
                mids$[mid_keySet_03e99967] = env->getMethodID(cls, "keySet", "()Ljava/util/Set;");
                mids$[mid_keys_39f88070] = env->getMethodID(cls, "keys", "()Ljava/util/Enumeration;");
                mids$[mid_put_537d5bdf] = env->getMethodID(cls, "put", "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;");
                mids$[mid_putAll_4c9e2b1c] = env->getMethodID(cls, "putAll", "(Ljava/util/Map;)V");
                mids$[mid_remove_a932a95f] = env->getMethodID(cls, "remove", "(Ljava/lang/Object;)Ljava/lang/Object;");
                mids$[mid_size_54c6a179] = env->getMethodID(cls, "size", "()I");
                mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
                mids$[mid_values_2d2d7de4] = env->getMethodID(cls, "values", "()Ljava/util/Collection;");
                mids$[mid_rehash_54c6a166] = env->getMethodID(cls, "rehash", "()V");

                class$ = (::java::lang::Class *) new JObject(cls);
            }
            return (jclass) class$->this$;
        }

        Hashtable::Hashtable() : ::java::util::Dictionary(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        Hashtable::Hashtable(jint a0) : ::java::util::Dictionary(env->newObject(initializeClass, &mids$, mid_init$_39c7bd3c, a0)) {}

        Hashtable::Hashtable(const ::java::util::Map & a0) : ::java::util::Dictionary(env->newObject(initializeClass, &mids$, mid_init$_4c9e2b1c, a0.this$)) {}

        Hashtable::Hashtable(jint a0, jfloat a1) : ::java::util::Dictionary(env->newObject(initializeClass, &mids$, mid_init$_abdf2c51, a0, a1)) {}

        void Hashtable::clear() const
        {
            env->callVoidMethod(this$, mids$[mid_clear_54c6a166]);
        }

        ::java::lang::Object Hashtable::clone() const
        {
            return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_clone_846352c3]));
        }

        jboolean Hashtable::contains(const ::java::lang::Object & a0) const
        {
            return env->callBooleanMethod(this$, mids$[mid_contains_290588e2], a0.this$);
        }

        jboolean Hashtable::containsKey(const ::java::lang::Object & a0) const
        {
            return env->callBooleanMethod(this$, mids$[mid_containsKey_290588e2], a0.this$);
        }

        jboolean Hashtable::containsValue(const ::java::lang::Object & a0) const
        {
            return env->callBooleanMethod(this$, mids$[mid_containsValue_290588e2], a0.this$);
        }

        ::java::util::Enumeration Hashtable::elements() const
        {
            return ::java::util::Enumeration(env->callObjectMethod(this$, mids$[mid_elements_39f88070]));
        }

        ::java::util::Set Hashtable::entrySet() const
        {
            return ::java::util::Set(env->callObjectMethod(this$, mids$[mid_entrySet_03e99967]));
        }

        jboolean Hashtable::equals(const ::java::lang::Object & a0) const
        {
            return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        ::java::lang::Object Hashtable::get(const ::java::lang::Object & a0) const
        {
            return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_get_a932a95f], a0.this$));
        }

        jint Hashtable::hashCode() const
        {
            return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        jboolean Hashtable::isEmpty() const
        {
            return env->callBooleanMethod(this$, mids$[mid_isEmpty_54c6a16a]);
        }

        ::java::util::Set Hashtable::keySet() const
        {
            return ::java::util::Set(env->callObjectMethod(this$, mids$[mid_keySet_03e99967]));
        }

        ::java::util::Enumeration Hashtable::keys() const
        {
            return ::java::util::Enumeration(env->callObjectMethod(this$, mids$[mid_keys_39f88070]));
        }

        ::java::lang::Object Hashtable::put(const ::java::lang::Object & a0, const ::java::lang::Object & a1) const
        {
            return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_put_537d5bdf], a0.this$, a1.this$));
        }

        void Hashtable::putAll(const ::java::util::Map & a0) const
        {
            env->callVoidMethod(this$, mids$[mid_putAll_4c9e2b1c], a0.this$);
        }

        ::java::lang::Object Hashtable::remove(const ::java::lang::Object & a0) const
        {
            return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_remove_a932a95f], a0.this$));
        }

        jint Hashtable::size() const
        {
            return env->callIntMethod(this$, mids$[mid_size_54c6a179]);
        }

        ::java::lang::String Hashtable::toString() const
        {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }

        ::java::util::Collection Hashtable::values() const
        {
            return ::java::util::Collection(env->callObjectMethod(this$, mids$[mid_values_2d2d7de4]));
        }
    }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
    namespace util {
        static PyObject *t_Hashtable_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Hashtable_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Hashtable_of_(t_Hashtable *self, PyObject *args);
        static int t_Hashtable_init_(t_Hashtable *self, PyObject *args, PyObject *kwds);
        static PyObject *t_Hashtable_clear(t_Hashtable *self);
        static PyObject *t_Hashtable_clone(t_Hashtable *self);
        static PyObject *t_Hashtable_contains(t_Hashtable *self, PyObject *arg);
        static PyObject *t_Hashtable_containsKey(t_Hashtable *self, PyObject *arg);
        static PyObject *t_Hashtable_containsValue(t_Hashtable *self, PyObject *arg);
        static PyObject *t_Hashtable_elements(t_Hashtable *self, PyObject *args);
        static PyObject *t_Hashtable_entrySet(t_Hashtable *self);
        static PyObject *t_Hashtable_equals(t_Hashtable *self, PyObject *args);
        static PyObject *t_Hashtable_get(t_Hashtable *self, PyObject *args);
        static PyObject *t_Hashtable_hashCode(t_Hashtable *self, PyObject *args);
        static PyObject *t_Hashtable_isEmpty(t_Hashtable *self, PyObject *args);
        static PyObject *t_Hashtable_keySet(t_Hashtable *self);
        static PyObject *t_Hashtable_keys(t_Hashtable *self, PyObject *args);
        static PyObject *t_Hashtable_put(t_Hashtable *self, PyObject *args);
        static PyObject *t_Hashtable_putAll(t_Hashtable *self, PyObject *arg);
        static PyObject *t_Hashtable_remove(t_Hashtable *self, PyObject *args);
        static PyObject *t_Hashtable_size(t_Hashtable *self, PyObject *args);
        static PyObject *t_Hashtable_toString(t_Hashtable *self, PyObject *args);
        static PyObject *t_Hashtable_values(t_Hashtable *self);
        static PyObject *t_Hashtable_get__empty(t_Hashtable *self, void *data);
        static PyObject *t_Hashtable_get__parameters_(t_Hashtable *self, void *data);
        static PyGetSetDef t_Hashtable__fields_[] = {
            DECLARE_GET_FIELD(t_Hashtable, empty),
            DECLARE_GET_FIELD(t_Hashtable, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_Hashtable__methods_[] = {
            DECLARE_METHOD(t_Hashtable, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Hashtable, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Hashtable, of_, METH_VARARGS),
            DECLARE_METHOD(t_Hashtable, clear, METH_NOARGS),
            DECLARE_METHOD(t_Hashtable, clone, METH_NOARGS),
            DECLARE_METHOD(t_Hashtable, contains, METH_O),
            DECLARE_METHOD(t_Hashtable, containsKey, METH_O),
            DECLARE_METHOD(t_Hashtable, containsValue, METH_O),
            DECLARE_METHOD(t_Hashtable, elements, METH_VARARGS),
            DECLARE_METHOD(t_Hashtable, entrySet, METH_NOARGS),
            DECLARE_METHOD(t_Hashtable, equals, METH_VARARGS),
            DECLARE_METHOD(t_Hashtable, get, METH_VARARGS),
            DECLARE_METHOD(t_Hashtable, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_Hashtable, isEmpty, METH_VARARGS),
            DECLARE_METHOD(t_Hashtable, keySet, METH_NOARGS),
            DECLARE_METHOD(t_Hashtable, keys, METH_VARARGS),
            DECLARE_METHOD(t_Hashtable, put, METH_VARARGS),
            DECLARE_METHOD(t_Hashtable, putAll, METH_O),
            DECLARE_METHOD(t_Hashtable, remove, METH_VARARGS),
            DECLARE_METHOD(t_Hashtable, size, METH_VARARGS),
            DECLARE_METHOD(t_Hashtable, toString, METH_VARARGS),
            DECLARE_METHOD(t_Hashtable, values, METH_NOARGS),
            { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(Hashtable, t_Hashtable, ::java::util::Dictionary, Hashtable, t_Hashtable_init_, 0, 0, t_Hashtable__fields_, 0, 0);
        PyObject *t_Hashtable::wrap_Object(const Hashtable& object, PyTypeObject *K, PyTypeObject *V)
        {
            PyObject *obj = t_Hashtable::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
                t_Hashtable *self = (t_Hashtable *) obj;
                self->parameters[0] = K;
                self->parameters[1] = V;
            }
            return obj;
        }

        PyObject *t_Hashtable::wrap_jobject(const jobject& object, PyTypeObject *K, PyTypeObject *V)
        {
            PyObject *obj = t_Hashtable::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
                t_Hashtable *self = (t_Hashtable *) obj;
                self->parameters[0] = K;
                self->parameters[1] = V;
            }
            return obj;
        }

        void t_Hashtable::install(PyObject *module)
        {
            installType(&PY_TYPE(Hashtable), module, "Hashtable", 0);
        }

        void t_Hashtable::initialize(PyObject *module)
        {
            PyDict_SetItemString(PY_TYPE(Hashtable).tp_dict, "class_", make_descriptor(Hashtable::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Hashtable).tp_dict, "wrapfn_", make_descriptor(t_Hashtable::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Hashtable).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_Hashtable_cast_(PyTypeObject *type, PyObject *arg)
        {
            if (!(arg = castCheck(arg, Hashtable::initializeClass, 1)))
                return NULL;
            return t_Hashtable::wrap_Object(Hashtable(((t_Hashtable *) arg)->object.this$));
        }
        static PyObject *t_Hashtable_instance_(PyTypeObject *type, PyObject *arg)
        {
            if (!castCheck(arg, Hashtable::initializeClass, 0))
                Py_RETURN_FALSE;
            Py_RETURN_TRUE;
        }

        static PyObject *t_Hashtable_of_(t_Hashtable *self, PyObject *args)
        {
            if (!parseArg(args, "T", 2, &(self->parameters)))
                Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static int t_Hashtable_init_(t_Hashtable *self, PyObject *args, PyObject *kwds)
        {
            switch (PyTuple_GET_SIZE(args)) {
              case 0:
                {
                    Hashtable object((jobject) NULL);

                    INT_CALL(object = Hashtable());
                    self->object = object;
                    break;
                }
                goto err;
              case 1:
                {
                    jint a0;
                    Hashtable object((jobject) NULL);

                    if (!parseArgs(args, "I", &a0))
                    {
                        INT_CALL(object = Hashtable(a0));
                        self->object = object;
                        break;
                    }
                }
                {
                    ::java::util::Map a0((jobject) NULL);
                    PyTypeObject **p0;
                    Hashtable object((jobject) NULL);

                    if (!parseArgs(args, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
                    {
                        INT_CALL(object = Hashtable(a0));
                        self->object = object;
                        break;
                    }
                }
                goto err;
              case 2:
                {
                    jint a0;
                    jfloat a1;
                    Hashtable object((jobject) NULL);

                    if (!parseArgs(args, "IF", &a0, &a1))
                    {
                        INT_CALL(object = Hashtable(a0, a1));
                        self->object = object;
                        break;
                    }
                }
              default:
              err:
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
            }

            return 0;
        }

        static PyObject *t_Hashtable_clear(t_Hashtable *self)
        {
            OBJ_CALL(self->object.clear());
            Py_RETURN_NONE;
        }

        static PyObject *t_Hashtable_clone(t_Hashtable *self)
        {
            ::java::lang::Object result((jobject) NULL);
            OBJ_CALL(result = self->object.clone());
            return ::java::lang::t_Object::wrap_Object(result);
        }

        static PyObject *t_Hashtable_contains(t_Hashtable *self, PyObject *arg)
        {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArg(arg, "o", &a0))
            {
                OBJ_CALL(result = self->object.contains(a0));
                Py_RETURN_BOOL(result);
            }

            PyErr_SetArgsError((PyObject *) self, "contains", arg);
            return NULL;
        }

        static PyObject *t_Hashtable_containsKey(t_Hashtable *self, PyObject *arg)
        {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArg(arg, "o", &a0))
            {
                OBJ_CALL(result = self->object.containsKey(a0));
                Py_RETURN_BOOL(result);
            }

            PyErr_SetArgsError((PyObject *) self, "containsKey", arg);
            return NULL;
        }

        static PyObject *t_Hashtable_containsValue(t_Hashtable *self, PyObject *arg)
        {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArg(arg, "o", &a0))
            {
                OBJ_CALL(result = self->object.containsValue(a0));
                Py_RETURN_BOOL(result);
            }

            PyErr_SetArgsError((PyObject *) self, "containsValue", arg);
            return NULL;
        }

        static PyObject *t_Hashtable_elements(t_Hashtable *self, PyObject *args)
        {
            ::java::util::Enumeration result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
                OBJ_CALL(result = self->object.elements());
                return ::java::util::t_Enumeration::wrap_Object(result, self->parameters[1]);
            }

            return callSuper(&PY_TYPE(Hashtable), (PyObject *) self, "elements", args, 2);
        }

        static PyObject *t_Hashtable_entrySet(t_Hashtable *self)
        {
            ::java::util::Set result((jobject) NULL);
            OBJ_CALL(result = self->object.entrySet());
            return ::java::util::t_Set::wrap_Object(result);
        }

        static PyObject *t_Hashtable_equals(t_Hashtable *self, PyObject *args)
        {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
                OBJ_CALL(result = self->object.equals(a0));
                Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(Hashtable), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_Hashtable_get(t_Hashtable *self, PyObject *args)
        {
            ::java::lang::Object a0((jobject) NULL);
            ::java::lang::Object result((jobject) NULL);

            if (!parseArgs(args, "o", &a0))
            {
                OBJ_CALL(result = self->object.get(a0));
                return self->parameters[1] != NULL ? wrapType(self->parameters[1], result.this$) : ::java::lang::t_Object::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Hashtable), (PyObject *) self, "get", args, 2);
        }

        static PyObject *t_Hashtable_hashCode(t_Hashtable *self, PyObject *args)
        {
            jint result;

            if (!parseArgs(args, ""))
            {
                OBJ_CALL(result = self->object.hashCode());
                return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(Hashtable), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_Hashtable_isEmpty(t_Hashtable *self, PyObject *args)
        {
            jboolean result;

            if (!parseArgs(args, ""))
            {
                OBJ_CALL(result = self->object.isEmpty());
                Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(Hashtable), (PyObject *) self, "isEmpty", args, 2);
        }

        static PyObject *t_Hashtable_keySet(t_Hashtable *self)
        {
            ::java::util::Set result((jobject) NULL);
            OBJ_CALL(result = self->object.keySet());
            return ::java::util::t_Set::wrap_Object(result, self->parameters[0]);
        }

        static PyObject *t_Hashtable_keys(t_Hashtable *self, PyObject *args)
        {
            ::java::util::Enumeration result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
                OBJ_CALL(result = self->object.keys());
                return ::java::util::t_Enumeration::wrap_Object(result, self->parameters[0]);
            }

            return callSuper(&PY_TYPE(Hashtable), (PyObject *) self, "keys", args, 2);
        }

        static PyObject *t_Hashtable_put(t_Hashtable *self, PyObject *args)
        {
            ::java::lang::Object a0((jobject) NULL);
            ::java::lang::Object a1((jobject) NULL);
            ::java::lang::Object result((jobject) NULL);

            if (!parseArgs(args, "OO", self->parameters[0], self->parameters[1], &a0, &a1))
            {
                OBJ_CALL(result = self->object.put(a0, a1));
                return self->parameters[1] != NULL ? wrapType(self->parameters[1], result.this$) : ::java::lang::t_Object::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Hashtable), (PyObject *) self, "put", args, 2);
        }

        static PyObject *t_Hashtable_putAll(t_Hashtable *self, PyObject *arg)
        {
            ::java::util::Map a0((jobject) NULL);
            PyTypeObject **p0;

            if (!parseArg(arg, "K", ::java::util::Map::initializeClass, &a0, &p0, ::java::util::t_Map::parameters_))
            {
                OBJ_CALL(self->object.putAll(a0));
                Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "putAll", arg);
            return NULL;
        }

        static PyObject *t_Hashtable_remove(t_Hashtable *self, PyObject *args)
        {
            ::java::lang::Object a0((jobject) NULL);
            ::java::lang::Object result((jobject) NULL);

            if (!parseArgs(args, "o", &a0))
            {
                OBJ_CALL(result = self->object.remove(a0));
                return self->parameters[1] != NULL ? wrapType(self->parameters[1], result.this$) : ::java::lang::t_Object::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Hashtable), (PyObject *) self, "remove", args, 2);
        }

        static PyObject *t_Hashtable_size(t_Hashtable *self, PyObject *args)
        {
            jint result;

            if (!parseArgs(args, ""))
            {
                OBJ_CALL(result = self->object.size());
                return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(Hashtable), (PyObject *) self, "size", args, 2);
        }

        static PyObject *t_Hashtable_toString(t_Hashtable *self, PyObject *args)
        {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
                OBJ_CALL(result = self->object.toString());
                return j2p(result);
            }

            return callSuper(&PY_TYPE(Hashtable), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_Hashtable_values(t_Hashtable *self)
        {
            ::java::util::Collection result((jobject) NULL);
            OBJ_CALL(result = self->object.values());
            return ::java::util::t_Collection::wrap_Object(result, self->parameters[1]);
        }
        static PyObject *t_Hashtable_get__parameters_(t_Hashtable *self, void *data)
        {
            return typeParameters(self->parameters, sizeof(self->parameters));
        }

        static PyObject *t_Hashtable_get__empty(t_Hashtable *self, void *data)
        {
            jboolean value;
            OBJ_CALL(value = self->object.isEmpty());
            Py_RETURN_BOOL(value);
        }
    }
}
#include <jni.h>
#include "JCCEnv.h"
#include "is/iclt/icenlp/core/tokenizer/HmmTokenTags.h"
#include "is/iclt/icenlp/core/tokenizer/Token$TokenCode.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace is {
    namespace iclt {
        namespace icenlp {
            namespace core {
                namespace tokenizer {

                    ::java::lang::Class *HmmTokenTags::class$ = NULL;
                    jmethodID *HmmTokenTags::mids$ = NULL;

                    jclass HmmTokenTags::initializeClass()
                    {
                        if (!class$)
                        {

                            jclass cls = (jclass) env->findClass("is/iclt/icenlp/core/tokenizer/HmmTokenTags");

                            mids$ = new jmethodID[max_mid];
                            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                            mids$[mid_init$_7f9b69a7] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lis/iclt/icenlp/core/tokenizer/Token$TokenCode;)V");
                            mids$[mid_getCardinalKey_14c7b5c5] = env->getMethodID(cls, "getCardinalKey", "()Ljava/lang/String;");
                            mids$[mid_getSuffixLength_54c6a179] = env->getMethodID(cls, "getSuffixLength", "()I");
                            mids$[mid_isCardinal_54c6a16a] = env->getMethodID(cls, "isCardinal", "()Z");
                            mids$[mid_isMorpho_54c6a16a] = env->getMethodID(cls, "isMorpho", "()Z");
                            mids$[mid_setCardinalKey_5fdc3f48] = env->getMethodID(cls, "setCardinalKey", "(Ljava/lang/String;)V");
                            mids$[mid_setMorpho_bb0c767f] = env->getMethodID(cls, "setMorpho", "(Z)V");
                            mids$[mid_setSuffixLength_39c7bd3c] = env->getMethodID(cls, "setSuffixLength", "(I)V");

                            class$ = (::java::lang::Class *) new JObject(cls);
                        }
                        return (jclass) class$->this$;
                    }

                    HmmTokenTags::HmmTokenTags() : ::is::iclt::icenlp::core::tokenizer::TokenTags(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

                    HmmTokenTags::HmmTokenTags(const ::java::lang::String & a0, const ::is::iclt::icenlp::core::tokenizer::Token$TokenCode & a1) : ::is::iclt::icenlp::core::tokenizer::TokenTags(env->newObject(initializeClass, &mids$, mid_init$_7f9b69a7, a0.this$, a1.this$)) {}

                    ::java::lang::String HmmTokenTags::getCardinalKey() const
                    {
                        return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getCardinalKey_14c7b5c5]));
                    }

                    jint HmmTokenTags::getSuffixLength() const
                    {
                        return env->callIntMethod(this$, mids$[mid_getSuffixLength_54c6a179]);
                    }

                    jboolean HmmTokenTags::isCardinal() const
                    {
                        return env->callBooleanMethod(this$, mids$[mid_isCardinal_54c6a16a]);
                    }

                    jboolean HmmTokenTags::isMorpho() const
                    {
                        return env->callBooleanMethod(this$, mids$[mid_isMorpho_54c6a16a]);
                    }

                    void HmmTokenTags::setCardinalKey(const ::java::lang::String & a0) const
                    {
                        env->callVoidMethod(this$, mids$[mid_setCardinalKey_5fdc3f48], a0.this$);
                    }

                    void HmmTokenTags::setMorpho(jboolean a0) const
                    {
                        env->callVoidMethod(this$, mids$[mid_setMorpho_bb0c767f], a0);
                    }

                    void HmmTokenTags::setSuffixLength(jint a0) const
                    {
                        env->callVoidMethod(this$, mids$[mid_setSuffixLength_39c7bd3c], a0);
                    }
                }
            }
        }
    }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace is {
    namespace iclt {
        namespace icenlp {
            namespace core {
                namespace tokenizer {
                    static PyObject *t_HmmTokenTags_cast_(PyTypeObject *type, PyObject *arg);
                    static PyObject *t_HmmTokenTags_instance_(PyTypeObject *type, PyObject *arg);
                    static int t_HmmTokenTags_init_(t_HmmTokenTags *self, PyObject *args, PyObject *kwds);
                    static PyObject *t_HmmTokenTags_getCardinalKey(t_HmmTokenTags *self, PyObject *args);
                    static PyObject *t_HmmTokenTags_getSuffixLength(t_HmmTokenTags *self, PyObject *args);
                    static PyObject *t_HmmTokenTags_isCardinal(t_HmmTokenTags *self, PyObject *args);
                    static PyObject *t_HmmTokenTags_isMorpho(t_HmmTokenTags *self, PyObject *args);
                    static PyObject *t_HmmTokenTags_setCardinalKey(t_HmmTokenTags *self, PyObject *args);
                    static PyObject *t_HmmTokenTags_setMorpho(t_HmmTokenTags *self, PyObject *args);
                    static PyObject *t_HmmTokenTags_setSuffixLength(t_HmmTokenTags *self, PyObject *args);
                    static PyObject *t_HmmTokenTags_get__cardinal(t_HmmTokenTags *self, void *data);
                    static PyObject *t_HmmTokenTags_get__cardinalKey(t_HmmTokenTags *self, void *data);
                    static int t_HmmTokenTags_set__cardinalKey(t_HmmTokenTags *self, PyObject *arg, void *data);
                    static PyObject *t_HmmTokenTags_get__morpho(t_HmmTokenTags *self, void *data);
                    static int t_HmmTokenTags_set__morpho(t_HmmTokenTags *self, PyObject *arg, void *data);
                    static PyObject *t_HmmTokenTags_get__suffixLength(t_HmmTokenTags *self, void *data);
                    static int t_HmmTokenTags_set__suffixLength(t_HmmTokenTags *self, PyObject *arg, void *data);
                    static PyGetSetDef t_HmmTokenTags__fields_[] = {
                        DECLARE_GET_FIELD(t_HmmTokenTags, cardinal),
                        DECLARE_GETSET_FIELD(t_HmmTokenTags, cardinalKey),
                        DECLARE_GETSET_FIELD(t_HmmTokenTags, morpho),
                        DECLARE_GETSET_FIELD(t_HmmTokenTags, suffixLength),
                        { NULL, NULL, NULL, NULL, NULL }
                    };

                    static PyMethodDef t_HmmTokenTags__methods_[] = {
                        DECLARE_METHOD(t_HmmTokenTags, cast_, METH_O | METH_CLASS),
                        DECLARE_METHOD(t_HmmTokenTags, instance_, METH_O | METH_CLASS),
                        DECLARE_METHOD(t_HmmTokenTags, getCardinalKey, METH_VARARGS),
                        DECLARE_METHOD(t_HmmTokenTags, getSuffixLength, METH_VARARGS),
                        DECLARE_METHOD(t_HmmTokenTags, isCardinal, METH_VARARGS),
                        DECLARE_METHOD(t_HmmTokenTags, isMorpho, METH_VARARGS),
                        DECLARE_METHOD(t_HmmTokenTags, setCardinalKey, METH_VARARGS),
                        DECLARE_METHOD(t_HmmTokenTags, setMorpho, METH_VARARGS),
                        DECLARE_METHOD(t_HmmTokenTags, setSuffixLength, METH_VARARGS),
                        { NULL, NULL, 0, NULL }
                    };

                    DECLARE_TYPE(HmmTokenTags, t_HmmTokenTags, ::is::iclt::icenlp::core::tokenizer::TokenTags, HmmTokenTags, t_HmmTokenTags_init_, 0, 0, t_HmmTokenTags__fields_, 0, 0);

                    void t_HmmTokenTags::install(PyObject *module)
                    {
                        installType(&PY_TYPE(HmmTokenTags), module, "HmmTokenTags", 0);
                    }

                    void t_HmmTokenTags::initialize(PyObject *module)
                    {
                        PyDict_SetItemString(PY_TYPE(HmmTokenTags).tp_dict, "class_", make_descriptor(HmmTokenTags::initializeClass, 1));
                        PyDict_SetItemString(PY_TYPE(HmmTokenTags).tp_dict, "wrapfn_", make_descriptor(t_HmmTokenTags::wrap_jobject));
                        PyDict_SetItemString(PY_TYPE(HmmTokenTags).tp_dict, "boxfn_", make_descriptor(boxObject));
                    }

                    static PyObject *t_HmmTokenTags_cast_(PyTypeObject *type, PyObject *arg)
                    {
                        if (!(arg = castCheck(arg, HmmTokenTags::initializeClass, 1)))
                            return NULL;
                        return t_HmmTokenTags::wrap_Object(HmmTokenTags(((t_HmmTokenTags *) arg)->object.this$));
                    }
                    static PyObject *t_HmmTokenTags_instance_(PyTypeObject *type, PyObject *arg)
                    {
                        if (!castCheck(arg, HmmTokenTags::initializeClass, 0))
                            Py_RETURN_FALSE;
                        Py_RETURN_TRUE;
                    }

                    static int t_HmmTokenTags_init_(t_HmmTokenTags *self, PyObject *args, PyObject *kwds)
                    {
                        switch (PyTuple_GET_SIZE(args)) {
                          case 0:
                            {
                                HmmTokenTags object((jobject) NULL);

                                INT_CALL(object = HmmTokenTags());
                                self->object = object;
                                break;
                            }
                            goto err;
                          case 2:
                            {
                                ::java::lang::String a0((jobject) NULL);
                                ::is::iclt::icenlp::core::tokenizer::Token$TokenCode a1((jobject) NULL);
                                HmmTokenTags object((jobject) NULL);

                                if (!parseArgs(args, "sk", ::is::iclt::icenlp::core::tokenizer::Token$TokenCode::initializeClass, &a0, &a1))
                                {
                                    INT_CALL(object = HmmTokenTags(a0, a1));
                                    self->object = object;
                                    break;
                                }
                            }
                          default:
                          err:
                            PyErr_SetArgsError((PyObject *) self, "__init__", args);
                            return -1;
                        }

                        return 0;
                    }

                    static PyObject *t_HmmTokenTags_getCardinalKey(t_HmmTokenTags *self, PyObject *args)
                    {
                        ::java::lang::String result((jobject) NULL);

                        if (!parseArgs(args, ""))
                        {
                            OBJ_CALL(result = self->object.getCardinalKey());
                            return j2p(result);
                        }

                        return callSuper(&PY_TYPE(HmmTokenTags), (PyObject *) self, "getCardinalKey", args, 2);
                    }

                    static PyObject *t_HmmTokenTags_getSuffixLength(t_HmmTokenTags *self, PyObject *args)
                    {
                        jint result;

                        if (!parseArgs(args, ""))
                        {
                            OBJ_CALL(result = self->object.getSuffixLength());
                            return PyInt_FromLong((long) result);
                        }

                        return callSuper(&PY_TYPE(HmmTokenTags), (PyObject *) self, "getSuffixLength", args, 2);
                    }

                    static PyObject *t_HmmTokenTags_isCardinal(t_HmmTokenTags *self, PyObject *args)
                    {
                        jboolean result;

                        if (!parseArgs(args, ""))
                        {
                            OBJ_CALL(result = self->object.isCardinal());
                            Py_RETURN_BOOL(result);
                        }

                        return callSuper(&PY_TYPE(HmmTokenTags), (PyObject *) self, "isCardinal", args, 2);
                    }

                    static PyObject *t_HmmTokenTags_isMorpho(t_HmmTokenTags *self, PyObject *args)
                    {
                        jboolean result;

                        if (!parseArgs(args, ""))
                        {
                            OBJ_CALL(result = self->object.isMorpho());
                            Py_RETURN_BOOL(result);
                        }

                        return callSuper(&PY_TYPE(HmmTokenTags), (PyObject *) self, "isMorpho", args, 2);
                    }

                    static PyObject *t_HmmTokenTags_setCardinalKey(t_HmmTokenTags *self, PyObject *args)
                    {
                        ::java::lang::String a0((jobject) NULL);

                        if (!parseArgs(args, "s", &a0))
                        {
                            OBJ_CALL(self->object.setCardinalKey(a0));
                            Py_RETURN_NONE;
                        }

                        return callSuper(&PY_TYPE(HmmTokenTags), (PyObject *) self, "setCardinalKey", args, 2);
                    }

                    static PyObject *t_HmmTokenTags_setMorpho(t_HmmTokenTags *self, PyObject *args)
                    {
                        jboolean a0;

                        if (!parseArgs(args, "Z", &a0))
                        {
                            OBJ_CALL(self->object.setMorpho(a0));
                            Py_RETURN_NONE;
                        }

                        return callSuper(&PY_TYPE(HmmTokenTags), (PyObject *) self, "setMorpho", args, 2);
                    }

                    static PyObject *t_HmmTokenTags_setSuffixLength(t_HmmTokenTags *self, PyObject *args)
                    {
                        jint a0;

                        if (!parseArgs(args, "I", &a0))
                        {
                            OBJ_CALL(self->object.setSuffixLength(a0));
                            Py_RETURN_NONE;
                        }

                        return callSuper(&PY_TYPE(HmmTokenTags), (PyObject *) self, "setSuffixLength", args, 2);
                    }

                    static PyObject *t_HmmTokenTags_get__cardinal(t_HmmTokenTags *self, void *data)
                    {
                        jboolean value;
                        OBJ_CALL(value = self->object.isCardinal());
                        Py_RETURN_BOOL(value);
                    }

                    static PyObject *t_HmmTokenTags_get__cardinalKey(t_HmmTokenTags *self, void *data)
                    {
                        ::java::lang::String value((jobject) NULL);
                        OBJ_CALL(value = self->object.getCardinalKey());
                        return j2p(value);
                    }
                    static int t_HmmTokenTags_set__cardinalKey(t_HmmTokenTags *self, PyObject *arg, void *data)
                    {
                        {
                            ::java::lang::String value((jobject) NULL);
                            if (!parseArg(arg, "s", &value))
                            {
                                INT_CALL(self->object.setCardinalKey(value));
                                return 0;
                            }
                        }
                        PyErr_SetArgsError((PyObject *) self, "cardinalKey", arg);
                        return -1;
                    }

                    static PyObject *t_HmmTokenTags_get__morpho(t_HmmTokenTags *self, void *data)
                    {
                        jboolean value;
                        OBJ_CALL(value = self->object.isMorpho());
                        Py_RETURN_BOOL(value);
                    }
                    static int t_HmmTokenTags_set__morpho(t_HmmTokenTags *self, PyObject *arg, void *data)
                    {
                        {
                            jboolean value;
                            if (!parseArg(arg, "Z", &value))
                            {
                                INT_CALL(self->object.setMorpho(value));
                                return 0;
                            }
                        }
                        PyErr_SetArgsError((PyObject *) self, "morpho", arg);
                        return -1;
                    }

                    static PyObject *t_HmmTokenTags_get__suffixLength(t_HmmTokenTags *self, void *data)
                    {
                        jint value;
                        OBJ_CALL(value = self->object.getSuffixLength());
                        return PyInt_FromLong((long) value);
                    }
                    static int t_HmmTokenTags_set__suffixLength(t_HmmTokenTags *self, PyObject *arg, void *data)
                    {
                        {
                            jint value;
                            if (!parseArg(arg, "I", &value))
                            {
                                INT_CALL(self->object.setSuffixLength(value));
                                return 0;
                            }
                        }
                        PyErr_SetArgsError((PyObject *) self, "suffixLength", arg);
                        return -1;
                    }
                }
            }
        }
    }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/util/Iterator.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace java {
    namespace util {

        ::java::lang::Class *Iterator::class$ = NULL;
        jmethodID *Iterator::mids$ = NULL;

        jclass Iterator::initializeClass()
        {
            if (!class$)
            {

                jclass cls = (jclass) env->findClass("java/util/Iterator");

                mids$ = new jmethodID[max_mid];
                mids$[mid_hasNext_54c6a16a] = env->getMethodID(cls, "hasNext", "()Z");
                mids$[mid_next_846352c3] = env->getMethodID(cls, "next", "()Ljava/lang/Object;");
                mids$[mid_remove_54c6a166] = env->getMethodID(cls, "remove", "()V");

                class$ = (::java::lang::Class *) new JObject(cls);
            }
            return (jclass) class$->this$;
        }

        jboolean Iterator::hasNext() const
        {
            return env->callBooleanMethod(this$, mids$[mid_hasNext_54c6a16a]);
        }

        ::java::lang::Object Iterator::next() const
        {
            return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_next_846352c3]));
        }

        void Iterator::remove() const
        {
            env->callVoidMethod(this$, mids$[mid_remove_54c6a166]);
        }
    }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
    namespace util {
        static PyObject *t_Iterator_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Iterator_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Iterator_of_(t_Iterator *self, PyObject *args);
        static PyObject *t_Iterator_hasNext(t_Iterator *self);
        static PyObject *t_Iterator_next(t_Iterator *self);
        static PyObject *t_Iterator_remove(t_Iterator *self);
        static PyObject *t_Iterator_get__parameters_(t_Iterator *self, void *data);
        static PyGetSetDef t_Iterator__fields_[] = {
            DECLARE_GET_FIELD(t_Iterator, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_Iterator__methods_[] = {
            DECLARE_METHOD(t_Iterator, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Iterator, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Iterator, of_, METH_VARARGS),
            DECLARE_METHOD(t_Iterator, hasNext, METH_NOARGS),
            DECLARE_METHOD(t_Iterator, next, METH_NOARGS),
            DECLARE_METHOD(t_Iterator, remove, METH_NOARGS),
            { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(Iterator, t_Iterator, ::java::lang::Object, Iterator, abstract_init, PyObject_SelfIter, ((PyObject *(*)(::java::util::t_Iterator *)) get_generic_iterator_next< ::java::util::t_Iterator,::java::lang::t_Object >), t_Iterator__fields_, 0, 0);
        PyObject *t_Iterator::wrap_Object(const Iterator& object, PyTypeObject *E)
        {
            PyObject *obj = t_Iterator::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
                t_Iterator *self = (t_Iterator *) obj;
                self->parameters[0] = E;
            }
            return obj;
        }

        PyObject *t_Iterator::wrap_jobject(const jobject& object, PyTypeObject *E)
        {
            PyObject *obj = t_Iterator::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
                t_Iterator *self = (t_Iterator *) obj;
                self->parameters[0] = E;
            }
            return obj;
        }

        void t_Iterator::install(PyObject *module)
        {
            installType(&PY_TYPE(Iterator), module, "Iterator", 0);
        }

        void t_Iterator::initialize(PyObject *module)
        {
            PyDict_SetItemString(PY_TYPE(Iterator).tp_dict, "class_", make_descriptor(Iterator::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Iterator).tp_dict, "wrapfn_", make_descriptor(t_Iterator::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Iterator).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_Iterator_cast_(PyTypeObject *type, PyObject *arg)
        {
            if (!(arg = castCheck(arg, Iterator::initializeClass, 1)))
                return NULL;
            return t_Iterator::wrap_Object(Iterator(((t_Iterator *) arg)->object.this$));
        }
        static PyObject *t_Iterator_instance_(PyTypeObject *type, PyObject *arg)
        {
            if (!castCheck(arg, Iterator::initializeClass, 0))
                Py_RETURN_FALSE;
            Py_RETURN_TRUE;
        }

        static PyObject *t_Iterator_of_(t_Iterator *self, PyObject *args)
        {
            if (!parseArg(args, "T", 1, &(self->parameters)))
                Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static PyObject *t_Iterator_hasNext(t_Iterator *self)
        {
            jboolean result;
            OBJ_CALL(result = self->object.hasNext());
            Py_RETURN_BOOL(result);
        }

        static PyObject *t_Iterator_next(t_Iterator *self)
        {
            ::java::lang::Object result((jobject) NULL);
            OBJ_CALL(result = self->object.next());
            return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
        }

        static PyObject *t_Iterator_remove(t_Iterator *self)
        {
            OBJ_CALL(self->object.remove());
            Py_RETURN_NONE;
        }
        static PyObject *t_Iterator_get__parameters_(t_Iterator *self, void *data)
        {
            return typeParameters(self->parameters, sizeof(self->parameters));
        }
    }
}
#include <jni.h>
#include "JCCEnv.h"
#include "is/iclt/icenlp/core/lemmald/LemmaResult.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace is {
    namespace iclt {
        namespace icenlp {
            namespace core {
                namespace lemmald {

                    ::java::lang::Class *LemmaResult::class$ = NULL;
                    jmethodID *LemmaResult::mids$ = NULL;

                    jclass LemmaResult::initializeClass()
                    {
                        if (!class$)
                        {

                            jclass cls = (jclass) env->findClass("is/iclt/icenlp/core/lemmald/LemmaResult");

                            mids$ = new jmethodID[max_mid];
                            mids$[mid_init$_55e0e853] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Ljava/lang/String;Z)V");
                            mids$[mid_getLemma_14c7b5c5] = env->getMethodID(cls, "getLemma", "()Ljava/lang/String;");
                            mids$[mid_getMessage_14c7b5c5] = env->getMethodID(cls, "getMessage", "()Ljava/lang/String;");
                            mids$[mid_getTag_14c7b5c5] = env->getMethodID(cls, "getTag", "()Ljava/lang/String;");
                            mids$[mid_getWordForm_14c7b5c5] = env->getMethodID(cls, "getWordForm", "()Ljava/lang/String;");
                            mids$[mid_getWordId_14c7b5c5] = env->getMethodID(cls, "getWordId", "()Ljava/lang/String;");
                            mids$[mid_isSuccess_54c6a16a] = env->getMethodID(cls, "isSuccess", "()Z");
                            mids$[mid_setLemma_5fdc3f48] = env->getMethodID(cls, "setLemma", "(Ljava/lang/String;)V");
                            mids$[mid_setMessage_5fdc3f48] = env->getMethodID(cls, "setMessage", "(Ljava/lang/String;)V");
                            mids$[mid_setSuccess_bb0c767f] = env->getMethodID(cls, "setSuccess", "(Z)V");
                            mids$[mid_setTag_5fdc3f48] = env->getMethodID(cls, "setTag", "(Ljava/lang/String;)V");
                            mids$[mid_setWordForm_5fdc3f48] = env->getMethodID(cls, "setWordForm", "(Ljava/lang/String;)V");

                            class$ = (::java::lang::Class *) new JObject(cls);
                        }
                        return (jclass) class$->this$;
                    }

                    LemmaResult::LemmaResult(const ::java::lang::String & a0, const ::java::lang::String & a1, jboolean a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_55e0e853, a0.this$, a1.this$, a2)) {}

                    ::java::lang::String LemmaResult::getLemma() const
                    {
                        return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getLemma_14c7b5c5]));
                    }

                    ::java::lang::String LemmaResult::getMessage() const
                    {
                        return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getMessage_14c7b5c5]));
                    }

                    ::java::lang::String LemmaResult::getTag() const
                    {
                        return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getTag_14c7b5c5]));
                    }

                    ::java::lang::String LemmaResult::getWordForm() const
                    {
                        return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getWordForm_14c7b5c5]));
                    }

                    ::java::lang::String LemmaResult::getWordId() const
                    {
                        return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getWordId_14c7b5c5]));
                    }

                    jboolean LemmaResult::isSuccess() const
                    {
                        return env->callBooleanMethod(this$, mids$[mid_isSuccess_54c6a16a]);
                    }

                    void LemmaResult::setLemma(const ::java::lang::String & a0) const
                    {
                        env->callVoidMethod(this$, mids$[mid_setLemma_5fdc3f48], a0.this$);
                    }

                    void LemmaResult::setMessage(const ::java::lang::String & a0) const
                    {
                        env->callVoidMethod(this$, mids$[mid_setMessage_5fdc3f48], a0.this$);
                    }

                    void LemmaResult::setSuccess(jboolean a0) const
                    {
                        env->callVoidMethod(this$, mids$[mid_setSuccess_bb0c767f], a0);
                    }

                    void LemmaResult::setTag(const ::java::lang::String & a0) const
                    {
                        env->callVoidMethod(this$, mids$[mid_setTag_5fdc3f48], a0.this$);
                    }

                    void LemmaResult::setWordForm(const ::java::lang::String & a0) const
                    {
                        env->callVoidMethod(this$, mids$[mid_setWordForm_5fdc3f48], a0.this$);
                    }
                }
            }
        }
    }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace is {
    namespace iclt {
        namespace icenlp {
            namespace core {
                namespace lemmald {
                    static PyObject *t_LemmaResult_cast_(PyTypeObject *type, PyObject *arg);
                    static PyObject *t_LemmaResult_instance_(PyTypeObject *type, PyObject *arg);
                    static int t_LemmaResult_init_(t_LemmaResult *self, PyObject *args, PyObject *kwds);
                    static PyObject *t_LemmaResult_getLemma(t_LemmaResult *self);
                    static PyObject *t_LemmaResult_getMessage(t_LemmaResult *self);
                    static PyObject *t_LemmaResult_getTag(t_LemmaResult *self);
                    static PyObject *t_LemmaResult_getWordForm(t_LemmaResult *self);
                    static PyObject *t_LemmaResult_getWordId(t_LemmaResult *self);
                    static PyObject *t_LemmaResult_isSuccess(t_LemmaResult *self);
                    static PyObject *t_LemmaResult_setLemma(t_LemmaResult *self, PyObject *arg);
                    static PyObject *t_LemmaResult_setMessage(t_LemmaResult *self, PyObject *arg);
                    static PyObject *t_LemmaResult_setSuccess(t_LemmaResult *self, PyObject *arg);
                    static PyObject *t_LemmaResult_setTag(t_LemmaResult *self, PyObject *arg);
                    static PyObject *t_LemmaResult_setWordForm(t_LemmaResult *self, PyObject *arg);
                    static PyObject *t_LemmaResult_get__lemma(t_LemmaResult *self, void *data);
                    static int t_LemmaResult_set__lemma(t_LemmaResult *self, PyObject *arg, void *data);
                    static PyObject *t_LemmaResult_get__message(t_LemmaResult *self, void *data);
                    static int t_LemmaResult_set__message(t_LemmaResult *self, PyObject *arg, void *data);
                    static PyObject *t_LemmaResult_get__success(t_LemmaResult *self, void *data);
                    static int t_LemmaResult_set__success(t_LemmaResult *self, PyObject *arg, void *data);
                    static PyObject *t_LemmaResult_get__tag(t_LemmaResult *self, void *data);
                    static int t_LemmaResult_set__tag(t_LemmaResult *self, PyObject *arg, void *data);
                    static PyObject *t_LemmaResult_get__wordForm(t_LemmaResult *self, void *data);
                    static int t_LemmaResult_set__wordForm(t_LemmaResult *self, PyObject *arg, void *data);
                    static PyObject *t_LemmaResult_get__wordId(t_LemmaResult *self, void *data);
                    static PyGetSetDef t_LemmaResult__fields_[] = {
                        DECLARE_GETSET_FIELD(t_LemmaResult, lemma),
                        DECLARE_GETSET_FIELD(t_LemmaResult, message),
                        DECLARE_GETSET_FIELD(t_LemmaResult, success),
                        DECLARE_GETSET_FIELD(t_LemmaResult, tag),
                        DECLARE_GETSET_FIELD(t_LemmaResult, wordForm),
                        DECLARE_GET_FIELD(t_LemmaResult, wordId),
                        { NULL, NULL, NULL, NULL, NULL }
                    };

                    static PyMethodDef t_LemmaResult__methods_[] = {
                        DECLARE_METHOD(t_LemmaResult, cast_, METH_O | METH_CLASS),
                        DECLARE_METHOD(t_LemmaResult, instance_, METH_O | METH_CLASS),
                        DECLARE_METHOD(t_LemmaResult, getLemma, METH_NOARGS),
                        DECLARE_METHOD(t_LemmaResult, getMessage, METH_NOARGS),
                        DECLARE_METHOD(t_LemmaResult, getTag, METH_NOARGS),
                        DECLARE_METHOD(t_LemmaResult, getWordForm, METH_NOARGS),
                        DECLARE_METHOD(t_LemmaResult, getWordId, METH_NOARGS),
                        DECLARE_METHOD(t_LemmaResult, isSuccess, METH_NOARGS),
                        DECLARE_METHOD(t_LemmaResult, setLemma, METH_O),
                        DECLARE_METHOD(t_LemmaResult, setMessage, METH_O),
                        DECLARE_METHOD(t_LemmaResult, setSuccess, METH_O),
                        DECLARE_METHOD(t_LemmaResult, setTag, METH_O),
                        DECLARE_METHOD(t_LemmaResult, setWordForm, METH_O),
                        { NULL, NULL, 0, NULL }
                    };

                    DECLARE_TYPE(LemmaResult, t_LemmaResult, ::java::lang::Object, LemmaResult, t_LemmaResult_init_, 0, 0, t_LemmaResult__fields_, 0, 0);

                    void t_LemmaResult::install(PyObject *module)
                    {
                        installType(&PY_TYPE(LemmaResult), module, "LemmaResult", 0);
                    }

                    void t_LemmaResult::initialize(PyObject *module)
                    {
                        PyDict_SetItemString(PY_TYPE(LemmaResult).tp_dict, "class_", make_descriptor(LemmaResult::initializeClass, 1));
                        PyDict_SetItemString(PY_TYPE(LemmaResult).tp_dict, "wrapfn_", make_descriptor(t_LemmaResult::wrap_jobject));
                        PyDict_SetItemString(PY_TYPE(LemmaResult).tp_dict, "boxfn_", make_descriptor(boxObject));
                    }

                    static PyObject *t_LemmaResult_cast_(PyTypeObject *type, PyObject *arg)
                    {
                        if (!(arg = castCheck(arg, LemmaResult::initializeClass, 1)))
                            return NULL;
                        return t_LemmaResult::wrap_Object(LemmaResult(((t_LemmaResult *) arg)->object.this$));
                    }
                    static PyObject *t_LemmaResult_instance_(PyTypeObject *type, PyObject *arg)
                    {
                        if (!castCheck(arg, LemmaResult::initializeClass, 0))
                            Py_RETURN_FALSE;
                        Py_RETURN_TRUE;
                    }

                    static int t_LemmaResult_init_(t_LemmaResult *self, PyObject *args, PyObject *kwds)
                    {
                        ::java::lang::String a0((jobject) NULL);
                        ::java::lang::String a1((jobject) NULL);
                        jboolean a2;
                        LemmaResult object((jobject) NULL);

                        if (!parseArgs(args, "ssZ", &a0, &a1, &a2))
                        {
                            INT_CALL(object = LemmaResult(a0, a1, a2));
                            self->object = object;
                        }
                        else
                        {
                            PyErr_SetArgsError((PyObject *) self, "__init__", args);
                            return -1;
                        }

                        return 0;
                    }

                    static PyObject *t_LemmaResult_getLemma(t_LemmaResult *self)
                    {
                        ::java::lang::String result((jobject) NULL);
                        OBJ_CALL(result = self->object.getLemma());
                        return j2p(result);
                    }

                    static PyObject *t_LemmaResult_getMessage(t_LemmaResult *self)
                    {
                        ::java::lang::String result((jobject) NULL);
                        OBJ_CALL(result = self->object.getMessage());
                        return j2p(result);
                    }

                    static PyObject *t_LemmaResult_getTag(t_LemmaResult *self)
                    {
                        ::java::lang::String result((jobject) NULL);
                        OBJ_CALL(result = self->object.getTag());
                        return j2p(result);
                    }

                    static PyObject *t_LemmaResult_getWordForm(t_LemmaResult *self)
                    {
                        ::java::lang::String result((jobject) NULL);
                        OBJ_CALL(result = self->object.getWordForm());
                        return j2p(result);
                    }

                    static PyObject *t_LemmaResult_getWordId(t_LemmaResult *self)
                    {
                        ::java::lang::String result((jobject) NULL);
                        OBJ_CALL(result = self->object.getWordId());
                        return j2p(result);
                    }

                    static PyObject *t_LemmaResult_isSuccess(t_LemmaResult *self)
                    {
                        jboolean result;
                        OBJ_CALL(result = self->object.isSuccess());
                        Py_RETURN_BOOL(result);
                    }

                    static PyObject *t_LemmaResult_setLemma(t_LemmaResult *self, PyObject *arg)
                    {
                        ::java::lang::String a0((jobject) NULL);

                        if (!parseArg(arg, "s", &a0))
                        {
                            OBJ_CALL(self->object.setLemma(a0));
                            Py_RETURN_NONE;
                        }

                        PyErr_SetArgsError((PyObject *) self, "setLemma", arg);
                        return NULL;
                    }

                    static PyObject *t_LemmaResult_setMessage(t_LemmaResult *self, PyObject *arg)
                    {
                        ::java::lang::String a0((jobject) NULL);

                        if (!parseArg(arg, "s", &a0))
                        {
                            OBJ_CALL(self->object.setMessage(a0));
                            Py_RETURN_NONE;
                        }

                        PyErr_SetArgsError((PyObject *) self, "setMessage", arg);
                        return NULL;
                    }

                    static PyObject *t_LemmaResult_setSuccess(t_LemmaResult *self, PyObject *arg)
                    {
                        jboolean a0;

                        if (!parseArg(arg, "Z", &a0))
                        {
                            OBJ_CALL(self->object.setSuccess(a0));
                            Py_RETURN_NONE;
                        }

                        PyErr_SetArgsError((PyObject *) self, "setSuccess", arg);
                        return NULL;
                    }

                    static PyObject *t_LemmaResult_setTag(t_LemmaResult *self, PyObject *arg)
                    {
                        ::java::lang::String a0((jobject) NULL);

                        if (!parseArg(arg, "s", &a0))
                        {
                            OBJ_CALL(self->object.setTag(a0));
                            Py_RETURN_NONE;
                        }

                        PyErr_SetArgsError((PyObject *) self, "setTag", arg);
                        return NULL;
                    }

                    static PyObject *t_LemmaResult_setWordForm(t_LemmaResult *self, PyObject *arg)
                    {
                        ::java::lang::String a0((jobject) NULL);

                        if (!parseArg(arg, "s", &a0))
                        {
                            OBJ_CALL(self->object.setWordForm(a0));
                            Py_RETURN_NONE;
                        }

                        PyErr_SetArgsError((PyObject *) self, "setWordForm", arg);
                        return NULL;
                    }

                    static PyObject *t_LemmaResult_get__lemma(t_LemmaResult *self, void *data)
                    {
                        ::java::lang::String value((jobject) NULL);
                        OBJ_CALL(value = self->object.getLemma());
                        return j2p(value);
                    }
                    static int t_LemmaResult_set__lemma(t_LemmaResult *self, PyObject *arg, void *data)
                    {
                        {
                            ::java::lang::String value((jobject) NULL);
                            if (!parseArg(arg, "s", &value))
                            {
                                INT_CALL(self->object.setLemma(value));
                                return 0;
                            }
                        }
                        PyErr_SetArgsError((PyObject *) self, "lemma", arg);
                        return -1;
                    }

                    static PyObject *t_LemmaResult_get__message(t_LemmaResult *self, void *data)
                    {
                        ::java::lang::String value((jobject) NULL);
                        OBJ_CALL(value = self->object.getMessage());
                        return j2p(value);
                    }
                    static int t_LemmaResult_set__message(t_LemmaResult *self, PyObject *arg, void *data)
                    {
                        {
                            ::java::lang::String value((jobject) NULL);
                            if (!parseArg(arg, "s", &value))
                            {
                                INT_CALL(self->object.setMessage(value));
                                return 0;
                            }
                        }
                        PyErr_SetArgsError((PyObject *) self, "message", arg);
                        return -1;
                    }

                    static PyObject *t_LemmaResult_get__success(t_LemmaResult *self, void *data)
                    {
                        jboolean value;
                        OBJ_CALL(value = self->object.isSuccess());
                        Py_RETURN_BOOL(value);
                    }
                    static int t_LemmaResult_set__success(t_LemmaResult *self, PyObject *arg, void *data)
                    {
                        {
                            jboolean value;
                            if (!parseArg(arg, "Z", &value))
                            {
                                INT_CALL(self->object.setSuccess(value));
                                return 0;
                            }
                        }
                        PyErr_SetArgsError((PyObject *) self, "success", arg);
                        return -1;
                    }

                    static PyObject *t_LemmaResult_get__tag(t_LemmaResult *self, void *data)
                    {
                        ::java::lang::String value((jobject) NULL);
                        OBJ_CALL(value = self->object.getTag());
                        return j2p(value);
                    }
                    static int t_LemmaResult_set__tag(t_LemmaResult *self, PyObject *arg, void *data)
                    {
                        {
                            ::java::lang::String value((jobject) NULL);
                            if (!parseArg(arg, "s", &value))
                            {
                                INT_CALL(self->object.setTag(value));
                                return 0;
                            }
                        }
                        PyErr_SetArgsError((PyObject *) self, "tag", arg);
                        return -1;
                    }

                    static PyObject *t_LemmaResult_get__wordForm(t_LemmaResult *self, void *data)
                    {
                        ::java::lang::String value((jobject) NULL);
                        OBJ_CALL(value = self->object.getWordForm());
                        return j2p(value);
                    }
                    static int t_LemmaResult_set__wordForm(t_LemmaResult *self, PyObject *arg, void *data)
                    {
                        {
                            ::java::lang::String value((jobject) NULL);
                            if (!parseArg(arg, "s", &value))
                            {
                                INT_CALL(self->object.setWordForm(value));
                                return 0;
                            }
                        }
                        PyErr_SetArgsError((PyObject *) self, "wordForm", arg);
                        return -1;
                    }

                    static PyObject *t_LemmaResult_get__wordId(t_LemmaResult *self, void *data)
                    {
                        ::java::lang::String value((jobject) NULL);
                        OBJ_CALL(value = self->object.getWordId());
                        return j2p(value);
                    }
                }
            }
        }
    }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/lang/Number.h"
#include "java/io/Serializable.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace java {
    namespace lang {

        ::java::lang::Class *Number::class$ = NULL;
        jmethodID *Number::mids$ = NULL;

        jclass Number::initializeClass()
        {
            if (!class$)
            {

                jclass cls = (jclass) env->findClass("java/lang/Number");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                mids$[mid_byteValue_54c6a172] = env->getMethodID(cls, "byteValue", "()B");
                mids$[mid_doubleValue_54c6a174] = env->getMethodID(cls, "doubleValue", "()D");
                mids$[mid_floatValue_54c6a176] = env->getMethodID(cls, "floatValue", "()F");
                mids$[mid_intValue_54c6a179] = env->getMethodID(cls, "intValue", "()I");
                mids$[mid_longValue_54c6a17a] = env->getMethodID(cls, "longValue", "()J");
                mids$[mid_shortValue_54c6a163] = env->getMethodID(cls, "shortValue", "()S");

                class$ = (::java::lang::Class *) new JObject(cls);
            }
            return (jclass) class$->this$;
        }

        Number::Number() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        jbyte Number::byteValue() const
        {
            return env->callByteMethod(this$, mids$[mid_byteValue_54c6a172]);
        }

        jdouble Number::doubleValue() const
        {
            return env->callDoubleMethod(this$, mids$[mid_doubleValue_54c6a174]);
        }

        jfloat Number::floatValue() const
        {
            return env->callFloatMethod(this$, mids$[mid_floatValue_54c6a176]);
        }

        jint Number::intValue() const
        {
            return env->callIntMethod(this$, mids$[mid_intValue_54c6a179]);
        }

        jlong Number::longValue() const
        {
            return env->callLongMethod(this$, mids$[mid_longValue_54c6a17a]);
        }

        jshort Number::shortValue() const
        {
            return env->callShortMethod(this$, mids$[mid_shortValue_54c6a163]);
        }
    }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
    namespace lang {
        static PyObject *t_Number_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Number_instance_(PyTypeObject *type, PyObject *arg);
        static int t_Number_init_(t_Number *self, PyObject *args, PyObject *kwds);
        static PyObject *t_Number_byteValue(t_Number *self);
        static PyObject *t_Number_doubleValue(t_Number *self);
        static PyObject *t_Number_floatValue(t_Number *self);
        static PyObject *t_Number_intValue(t_Number *self);
        static PyObject *t_Number_longValue(t_Number *self);
        static PyObject *t_Number_shortValue(t_Number *self);

        static PyMethodDef t_Number__methods_[] = {
            DECLARE_METHOD(t_Number, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Number, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Number, byteValue, METH_NOARGS),
            DECLARE_METHOD(t_Number, doubleValue, METH_NOARGS),
            DECLARE_METHOD(t_Number, floatValue, METH_NOARGS),
            DECLARE_METHOD(t_Number, intValue, METH_NOARGS),
            DECLARE_METHOD(t_Number, longValue, METH_NOARGS),
            DECLARE_METHOD(t_Number, shortValue, METH_NOARGS),
            { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(Number, t_Number, ::java::lang::Object, Number, t_Number_init_, 0, 0, 0, 0, 0);

        void t_Number::install(PyObject *module)
        {
            installType(&PY_TYPE(Number), module, "Number", 0);
        }

        void t_Number::initialize(PyObject *module)
        {
            PyDict_SetItemString(PY_TYPE(Number).tp_dict, "class_", make_descriptor(Number::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Number).tp_dict, "wrapfn_", make_descriptor(t_Number::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Number).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_Number_cast_(PyTypeObject *type, PyObject *arg)
        {
            if (!(arg = castCheck(arg, Number::initializeClass, 1)))
                return NULL;
            return t_Number::wrap_Object(Number(((t_Number *) arg)->object.this$));
        }
        static PyObject *t_Number_instance_(PyTypeObject *type, PyObject *arg)
        {
            if (!castCheck(arg, Number::initializeClass, 0))
                Py_RETURN_FALSE;
            Py_RETURN_TRUE;
        }

        static int t_Number_init_(t_Number *self, PyObject *args, PyObject *kwds)
        {
            Number object((jobject) NULL);

            INT_CALL(object = Number());
            self->object = object;

            return 0;
        }

        static PyObject *t_Number_byteValue(t_Number *self)
        {
            jbyte result;
            OBJ_CALL(result = self->object.byteValue());
            return PyInt_FromLong((long) result);
        }

        static PyObject *t_Number_doubleValue(t_Number *self)
        {
            jdouble result;
            OBJ_CALL(result = self->object.doubleValue());
            return PyFloat_FromDouble((double) result);
        }

        static PyObject *t_Number_floatValue(t_Number *self)
        {
            jfloat result;
            OBJ_CALL(result = self->object.floatValue());
            return PyFloat_FromDouble((double) result);
        }

        static PyObject *t_Number_intValue(t_Number *self)
        {
            jint result;
            OBJ_CALL(result = self->object.intValue());
            return PyInt_FromLong((long) result);
        }

        static PyObject *t_Number_longValue(t_Number *self)
        {
            jlong result;
            OBJ_CALL(result = self->object.longValue());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_Number_shortValue(t_Number *self)
        {
            jshort result;
            OBJ_CALL(result = self->object.shortValue());
            return PyInt_FromLong((long) result);
        }
    }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/lang/Byte.h"
#include "java/lang/Comparable.h"
#include "java/lang/NumberFormatException.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "java/lang/Object.h"
#include "JArray.h"

namespace java {
    namespace lang {

        ::java::lang::Class *Byte::class$ = NULL;
        jmethodID *Byte::mids$ = NULL;
        jbyte Byte::MAX_VALUE = (jbyte) 0;
        jbyte Byte::MIN_VALUE = (jbyte) 0;
        jint Byte::SIZE = (jint) 0;
        ::java::lang::Class *Byte::TYPE = NULL;

        jclass Byte::initializeClass()
        {
            if (!class$)
            {

                jclass cls = (jclass) env->findClass("java/lang/Byte");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_b2271687] = env->getMethodID(cls, "<init>", "(B)V");
                mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
                mids$[mid_byteValue_54c6a172] = env->getMethodID(cls, "byteValue", "()B");
                mids$[mid_compareTo_290588f1] = env->getMethodID(cls, "compareTo", "(Ljava/lang/Object;)I");
                mids$[mid_compareTo_c2b89a9a] = env->getMethodID(cls, "compareTo", "(Ljava/lang/Byte;)I");
                mids$[mid_decode_4a53f64a] = env->getStaticMethodID(cls, "decode", "(Ljava/lang/String;)Ljava/lang/Byte;");
                mids$[mid_doubleValue_54c6a174] = env->getMethodID(cls, "doubleValue", "()D");
                mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
                mids$[mid_floatValue_54c6a176] = env->getMethodID(cls, "floatValue", "()F");
                mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
                mids$[mid_intValue_54c6a179] = env->getMethodID(cls, "intValue", "()I");
                mids$[mid_longValue_54c6a17a] = env->getMethodID(cls, "longValue", "()J");
                mids$[mid_parseByte_5fdc3f5c] = env->getStaticMethodID(cls, "parseByte", "(Ljava/lang/String;)B");
                mids$[mid_parseByte_6e53ccd2] = env->getStaticMethodID(cls, "parseByte", "(Ljava/lang/String;I)B");
                mids$[mid_shortValue_54c6a163] = env->getMethodID(cls, "shortValue", "()S");
                mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
                mids$[mid_toString_fce80606] = env->getStaticMethodID(cls, "toString", "(B)Ljava/lang/String;");
                mids$[mid_valueOf_f1e1a5a7] = env->getStaticMethodID(cls, "valueOf", "(B)Ljava/lang/Byte;");
                mids$[mid_valueOf_4a53f64a] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;)Ljava/lang/Byte;");
                mids$[mid_valueOf_83e30bb0] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;I)Ljava/lang/Byte;");

                class$ = (::java::lang::Class *) new JObject(cls);
                cls = (jclass) class$->this$;

                MAX_VALUE = env->getStaticByteField(cls, "MAX_VALUE");
                MIN_VALUE = env->getStaticByteField(cls, "MIN_VALUE");
                SIZE = env->getStaticIntField(cls, "SIZE");
                TYPE = new ::java::lang::Class(env->getStaticObjectField(cls, "TYPE", "Ljava/lang/Class;"));
            }
            return (jclass) class$->this$;
        }

        Byte::Byte(jbyte a0) : ::java::lang::Number(env->newObject(initializeClass, &mids$, mid_init$_b2271687, a0)) {}

        Byte::Byte(const ::java::lang::String & a0) : ::java::lang::Number(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}

        jbyte Byte::byteValue() const
        {
            return env->callByteMethod(this$, mids$[mid_byteValue_54c6a172]);
        }

        jint Byte::compareTo(const ::java::lang::Object & a0) const
        {
            return env->callIntMethod(this$, mids$[mid_compareTo_290588f1], a0.this$);
        }

        jint Byte::compareTo(const Byte & a0) const
        {
            return env->callIntMethod(this$, mids$[mid_compareTo_c2b89a9a], a0.this$);
        }

        Byte Byte::decode(const ::java::lang::String & a0)
        {
            jclass cls = initializeClass();
            return Byte(env->callStaticObjectMethod(cls, mids$[mid_decode_4a53f64a], a0.this$));
        }

        jdouble Byte::doubleValue() const
        {
            return env->callDoubleMethod(this$, mids$[mid_doubleValue_54c6a174]);
        }

        jboolean Byte::equals(const ::java::lang::Object & a0) const
        {
            return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        jfloat Byte::floatValue() const
        {
            return env->callFloatMethod(this$, mids$[mid_floatValue_54c6a176]);
        }

        jint Byte::hashCode() const
        {
            return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        jint Byte::intValue() const
        {
            return env->callIntMethod(this$, mids$[mid_intValue_54c6a179]);
        }

        jlong Byte::longValue() const
        {
            return env->callLongMethod(this$, mids$[mid_longValue_54c6a17a]);
        }

        jbyte Byte::parseByte(const ::java::lang::String & a0)
        {
            jclass cls = initializeClass();
            return env->callStaticByteMethod(cls, mids$[mid_parseByte_5fdc3f5c], a0.this$);
        }

        jbyte Byte::parseByte(const ::java::lang::String & a0, jint a1)
        {
            jclass cls = initializeClass();
            return env->callStaticByteMethod(cls, mids$[mid_parseByte_6e53ccd2], a0.this$, a1);
        }

        jshort Byte::shortValue() const
        {
            return env->callShortMethod(this$, mids$[mid_shortValue_54c6a163]);
        }

        ::java::lang::String Byte::toString() const
        {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }

        ::java::lang::String Byte::toString(jbyte a0)
        {
            jclass cls = initializeClass();
            return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_toString_fce80606], a0));
        }

        Byte Byte::valueOf(jbyte a0)
        {
            jclass cls = initializeClass();
            return Byte(env->callStaticObjectMethod(cls, mids$[mid_valueOf_f1e1a5a7], a0));
        }

        Byte Byte::valueOf(const ::java::lang::String & a0)
        {
            jclass cls = initializeClass();
            return Byte(env->callStaticObjectMethod(cls, mids$[mid_valueOf_4a53f64a], a0.this$));
        }

        Byte Byte::valueOf(const ::java::lang::String & a0, jint a1)
        {
            jclass cls = initializeClass();
            return Byte(env->callStaticObjectMethod(cls, mids$[mid_valueOf_83e30bb0], a0.this$, a1));
        }
    }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
    namespace lang {
        static PyObject *t_Byte_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Byte_instance_(PyTypeObject *type, PyObject *arg);
        static int t_Byte_init_(t_Byte *self, PyObject *args, PyObject *kwds);
        static PyObject *t_Byte_byteValue(t_Byte *self, PyObject *args);
        static PyObject *t_Byte_compareTo(t_Byte *self, PyObject *args);
        static PyObject *t_Byte_decode(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Byte_doubleValue(t_Byte *self, PyObject *args);
        static PyObject *t_Byte_equals(t_Byte *self, PyObject *args);
        static PyObject *t_Byte_floatValue(t_Byte *self, PyObject *args);
        static PyObject *t_Byte_hashCode(t_Byte *self, PyObject *args);
        static PyObject *t_Byte_intValue(t_Byte *self, PyObject *args);
        static PyObject *t_Byte_longValue(t_Byte *self, PyObject *args);
        static PyObject *t_Byte_parseByte(PyTypeObject *type, PyObject *args);
        static PyObject *t_Byte_shortValue(t_Byte *self, PyObject *args);
        static PyObject *t_Byte_toString(t_Byte *self, PyObject *args);
        static PyObject *t_Byte_toString_(PyTypeObject *type, PyObject *args);
        static PyObject *t_Byte_valueOf(PyTypeObject *type, PyObject *args);

        static PyMethodDef t_Byte__methods_[] = {
            DECLARE_METHOD(t_Byte, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Byte, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Byte, byteValue, METH_VARARGS),
            DECLARE_METHOD(t_Byte, compareTo, METH_VARARGS),
            DECLARE_METHOD(t_Byte, decode, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Byte, doubleValue, METH_VARARGS),
            DECLARE_METHOD(t_Byte, equals, METH_VARARGS),
            DECLARE_METHOD(t_Byte, floatValue, METH_VARARGS),
            DECLARE_METHOD(t_Byte, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_Byte, intValue, METH_VARARGS),
            DECLARE_METHOD(t_Byte, longValue, METH_VARARGS),
            DECLARE_METHOD(t_Byte, parseByte, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_Byte, shortValue, METH_VARARGS),
            DECLARE_METHOD(t_Byte, toString, METH_VARARGS),
            DECLARE_METHOD(t_Byte, toString_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Byte, valueOf, METH_VARARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(Byte, t_Byte, ::java::lang::Number, Byte, t_Byte_init_, 0, 0, 0, 0, 0);

        void t_Byte::install(PyObject *module)
        {
            installType(&PY_TYPE(Byte), module, "Byte", 0);
        }

        void t_Byte::initialize(PyObject *module)
        {
            PyDict_SetItemString(PY_TYPE(Byte).tp_dict, "class_", make_descriptor(Byte::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Byte).tp_dict, "wrapfn_", make_descriptor(unboxByte));
            PyDict_SetItemString(PY_TYPE(Byte).tp_dict, "boxfn_", make_descriptor(boxByte));
            Byte::initializeClass();
            PyDict_SetItemString(PY_TYPE(Byte).tp_dict, "MAX_VALUE", make_descriptor(Byte::MAX_VALUE));
            PyDict_SetItemString(PY_TYPE(Byte).tp_dict, "MIN_VALUE", make_descriptor(Byte::MIN_VALUE));
            PyDict_SetItemString(PY_TYPE(Byte).tp_dict, "SIZE", make_descriptor(Byte::SIZE));
            PyDict_SetItemString(PY_TYPE(Byte).tp_dict, "TYPE", make_descriptor(::java::lang::t_Class::wrap_Object(*Byte::TYPE)));
        }

        static PyObject *t_Byte_cast_(PyTypeObject *type, PyObject *arg)
        {
            if (!(arg = castCheck(arg, Byte::initializeClass, 1)))
                return NULL;
            return t_Byte::wrap_Object(Byte(((t_Byte *) arg)->object.this$));
        }
        static PyObject *t_Byte_instance_(PyTypeObject *type, PyObject *arg)
        {
            if (!castCheck(arg, Byte::initializeClass, 0))
                Py_RETURN_FALSE;
            Py_RETURN_TRUE;
        }

        static int t_Byte_init_(t_Byte *self, PyObject *args, PyObject *kwds)
        {
            switch (PyTuple_GET_SIZE(args)) {
              case 1:
                {
                    jbyte a0;
                    Byte object((jobject) NULL);

                    if (!parseArgs(args, "B", &a0))
                    {
                        INT_CALL(object = Byte(a0));
                        self->object = object;
                        break;
                    }
                }
                {
                    ::java::lang::String a0((jobject) NULL);
                    Byte object((jobject) NULL);

                    if (!parseArgs(args, "s", &a0))
                    {
                        INT_CALL(object = Byte(a0));
                        self->object = object;
                        break;
                    }
                }
              default:
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
            }

            return 0;
        }

        static PyObject *t_Byte_byteValue(t_Byte *self, PyObject *args)
        {
            jbyte result;

            if (!parseArgs(args, ""))
            {
                OBJ_CALL(result = self->object.byteValue());
                return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(Byte), (PyObject *) self, "byteValue", args, 2);
        }

        static PyObject *t_Byte_compareTo(t_Byte *self, PyObject *args)
        {
            switch (PyTuple_GET_SIZE(args)) {
              case 1:
                {
                    ::java::lang::Object a0((jobject) NULL);
                    jint result;

                    if (!parseArgs(args, "o", &a0))
                    {
                        OBJ_CALL(result = self->object.compareTo(a0));
                        return PyInt_FromLong((long) result);
                    }
                }
                {
                    Byte a0((jobject) NULL);
                    jint result;

                    if (!parseArgs(args, "O", &::java::lang::PY_TYPE(Byte), &a0))
                    {
                        OBJ_CALL(result = self->object.compareTo(a0));
                        return PyInt_FromLong((long) result);
                    }
                }
            }

            PyErr_SetArgsError((PyObject *) self, "compareTo", args);
            return NULL;
        }

        static PyObject *t_Byte_decode(PyTypeObject *type, PyObject *arg)
        {
            ::java::lang::String a0((jobject) NULL);
            Byte result((jobject) NULL);

            if (!parseArg(arg, "s", &a0))
            {
                OBJ_CALL(result = ::java::lang::Byte::decode(a0));
                return t_Byte::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "decode", arg);
            return NULL;
        }

        static PyObject *t_Byte_doubleValue(t_Byte *self, PyObject *args)
        {
            jdouble result;

            if (!parseArgs(args, ""))
            {
                OBJ_CALL(result = self->object.doubleValue());
                return PyFloat_FromDouble((double) result);
            }

            return callSuper(&PY_TYPE(Byte), (PyObject *) self, "doubleValue", args, 2);
        }

        static PyObject *t_Byte_equals(t_Byte *self, PyObject *args)
        {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
                OBJ_CALL(result = self->object.equals(a0));
                Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(Byte), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_Byte_floatValue(t_Byte *self, PyObject *args)
        {
            jfloat result;

            if (!parseArgs(args, ""))
            {
                OBJ_CALL(result = self->object.floatValue());
                return PyFloat_FromDouble((double) result);
            }

            return callSuper(&PY_TYPE(Byte), (PyObject *) self, "floatValue", args, 2);
        }

        static PyObject *t_Byte_hashCode(t_Byte *self, PyObject *args)
        {
            jint result;

            if (!parseArgs(args, ""))
            {
                OBJ_CALL(result = self->object.hashCode());
                return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(Byte), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_Byte_intValue(t_Byte *self, PyObject *args)
        {
            jint result;

            if (!parseArgs(args, ""))
            {
                OBJ_CALL(result = self->object.intValue());
                return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(Byte), (PyObject *) self, "intValue", args, 2);
        }

        static PyObject *t_Byte_longValue(t_Byte *self, PyObject *args)
        {
            jlong result;

            if (!parseArgs(args, ""))
            {
                OBJ_CALL(result = self->object.longValue());
                return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            return callSuper(&PY_TYPE(Byte), (PyObject *) self, "longValue", args, 2);
        }

        static PyObject *t_Byte_parseByte(PyTypeObject *type, PyObject *args)
        {
            switch (PyTuple_GET_SIZE(args)) {
              case 1:
                {
                    ::java::lang::String a0((jobject) NULL);
                    jbyte result;

                    if (!parseArgs(args, "s", &a0))
                    {
                        OBJ_CALL(result = ::java::lang::Byte::parseByte(a0));
                        return PyInt_FromLong((long) result);
                    }
                }
                break;
              case 2:
                {
                    ::java::lang::String a0((jobject) NULL);
                    jint a1;
                    jbyte result;

                    if (!parseArgs(args, "sI", &a0, &a1))
                    {
                        OBJ_CALL(result = ::java::lang::Byte::parseByte(a0, a1));
                        return PyInt_FromLong((long) result);
                    }
                }
            }

            PyErr_SetArgsError(type, "parseByte", args);
            return NULL;
        }

        static PyObject *t_Byte_shortValue(t_Byte *self, PyObject *args)
        {
            jshort result;

            if (!parseArgs(args, ""))
            {
                OBJ_CALL(result = self->object.shortValue());
                return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(Byte), (PyObject *) self, "shortValue", args, 2);
        }

        static PyObject *t_Byte_toString(t_Byte *self, PyObject *args)
        {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
                OBJ_CALL(result = self->object.toString());
                return j2p(result);
            }

            return callSuper(&PY_TYPE(Byte), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_Byte_toString_(PyTypeObject *type, PyObject *args)
        {
            jbyte a0;
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, "B", &a0))
            {
                OBJ_CALL(result = ::java::lang::Byte::toString(a0));
                return j2p(result);
            }

            PyErr_SetArgsError(type, "toString_", args);
            return NULL;
        }

        static PyObject *t_Byte_valueOf(PyTypeObject *type, PyObject *args)
        {
            switch (PyTuple_GET_SIZE(args)) {
              case 1:
                {
                    jbyte a0;
                    Byte result((jobject) NULL);

                    if (!parseArgs(args, "B", &a0))
                    {
                        OBJ_CALL(result = ::java::lang::Byte::valueOf(a0));
                        return t_Byte::wrap_Object(result);
                    }
                }
                {
                    ::java::lang::String a0((jobject) NULL);
                    Byte result((jobject) NULL);

                    if (!parseArgs(args, "s", &a0))
                    {
                        OBJ_CALL(result = ::java::lang::Byte::valueOf(a0));
                        return t_Byte::wrap_Object(result);
                    }
                }
                break;
              case 2:
                {
                    ::java::lang::String a0((jobject) NULL);
                    jint a1;
                    Byte result((jobject) NULL);

                    if (!parseArgs(args, "sI", &a0, &a1))
                    {
                        OBJ_CALL(result = ::java::lang::Byte::valueOf(a0, a1));
                        return t_Byte::wrap_Object(result);
                    }
                }
            }

            PyErr_SetArgsError(type, "valueOf", args);
            return NULL;
        }
    }
}
#include <jni.h>
#include "JCCEnv.h"
#include "is/iclt/icenlp/core/lemmald/Tester.h"
#include "is/iclt/icenlp/core/lemmald/Lemmald.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace is {
    namespace iclt {
        namespace icenlp {
            namespace core {
                namespace lemmald {

                    ::java::lang::Class *Tester::class$ = NULL;
                    jmethodID *Tester::mids$ = NULL;

                    jclass Tester::initializeClass()
                    {
                        if (!class$)
                        {

                            jclass cls = (jclass) env->findClass("is/iclt/icenlp/core/lemmald/Tester");

                            mids$ = new jmethodID[max_mid];
                            mids$[mid_init$_945fe657] = env->getMethodID(cls, "<init>", "(Lis/iclt/icenlp/core/lemmald/Lemmald;)V");
                            mids$[mid_runLemmatizerTest_5fdc3f48] = env->getMethodID(cls, "runLemmatizerTest", "(Ljava/lang/String;)V");

                            class$ = (::java::lang::Class *) new JObject(cls);
                        }
                        return (jclass) class$->this$;
                    }

                    Tester::Tester(const ::is::iclt::icenlp::core::lemmald::Lemmald & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_945fe657, a0.this$)) {}

                    void Tester::runLemmatizerTest(const ::java::lang::String & a0) const
                    {
                        env->callVoidMethod(this$, mids$[mid_runLemmatizerTest_5fdc3f48], a0.this$);
                    }
                }
            }
        }
    }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace is {
    namespace iclt {
        namespace icenlp {
            namespace core {
                namespace lemmald {
                    static PyObject *t_Tester_cast_(PyTypeObject *type, PyObject *arg);
                    static PyObject *t_Tester_instance_(PyTypeObject *type, PyObject *arg);
                    static int t_Tester_init_(t_Tester *self, PyObject *args, PyObject *kwds);
                    static PyObject *t_Tester_runLemmatizerTest(t_Tester *self, PyObject *arg);

                    static PyMethodDef t_Tester__methods_[] = {
                        DECLARE_METHOD(t_Tester, cast_, METH_O | METH_CLASS),
                        DECLARE_METHOD(t_Tester, instance_, METH_O | METH_CLASS),
                        DECLARE_METHOD(t_Tester, runLemmatizerTest, METH_O),
                        { NULL, NULL, 0, NULL }
                    };

                    DECLARE_TYPE(Tester, t_Tester, ::java::lang::Object, Tester, t_Tester_init_, 0, 0, 0, 0, 0);

                    void t_Tester::install(PyObject *module)
                    {
                        installType(&PY_TYPE(Tester), module, "Tester", 0);
                    }

                    void t_Tester::initialize(PyObject *module)
                    {
                        PyDict_SetItemString(PY_TYPE(Tester).tp_dict, "class_", make_descriptor(Tester::initializeClass, 1));
                        PyDict_SetItemString(PY_TYPE(Tester).tp_dict, "wrapfn_", make_descriptor(t_Tester::wrap_jobject));
                        PyDict_SetItemString(PY_TYPE(Tester).tp_dict, "boxfn_", make_descriptor(boxObject));
                    }

                    static PyObject *t_Tester_cast_(PyTypeObject *type, PyObject *arg)
                    {
                        if (!(arg = castCheck(arg, Tester::initializeClass, 1)))
                            return NULL;
                        return t_Tester::wrap_Object(Tester(((t_Tester *) arg)->object.this$));
                    }
                    static PyObject *t_Tester_instance_(PyTypeObject *type, PyObject *arg)
                    {
                        if (!castCheck(arg, Tester::initializeClass, 0))
                            Py_RETURN_FALSE;
                        Py_RETURN_TRUE;
                    }

                    static int t_Tester_init_(t_Tester *self, PyObject *args, PyObject *kwds)
                    {
                        ::is::iclt::icenlp::core::lemmald::Lemmald a0((jobject) NULL);
                        Tester object((jobject) NULL);

                        if (!parseArgs(args, "k", ::is::iclt::icenlp::core::lemmald::Lemmald::initializeClass, &a0))
                        {
                            INT_CALL(object = Tester(a0));
                            self->object = object;
                        }
                        else
                        {
                            PyErr_SetArgsError((PyObject *) self, "__init__", args);
                            return -1;
                        }

                        return 0;
                    }

                    static PyObject *t_Tester_runLemmatizerTest(t_Tester *self, PyObject *arg)
                    {
                        ::java::lang::String a0((jobject) NULL);

                        if (!parseArg(arg, "s", &a0))
                        {
                            OBJ_CALL(self->object.runLemmatizerTest(a0));
                            Py_RETURN_NONE;
                        }

                        PyErr_SetArgsError((PyObject *) self, "runLemmatizerTest", arg);
                        return NULL;
                    }
                }
            }
        }
    }
}
#include <jni.h>
#include "JCCEnv.h"
#include "is/iclt/icenlp/core/iceparser/Phrase_NPs.h"
#include "java/io/IOException.h"
#include "java/io/Reader.h"
#include "java/io/Writer.h"
#include "java/lang/Class.h"
#include "java/io/InputStream.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace is {
    namespace iclt {
        namespace icenlp {
            namespace core {
                namespace iceparser {

                    ::java::lang::Class *Phrase_NPs::class$ = NULL;
                    jmethodID *Phrase_NPs::mids$ = NULL;
                    jint Phrase_NPs::YYEOF = (jint) 0;
                    jint Phrase_NPs::YYINITIAL = (jint) 0;

                    jclass Phrase_NPs::initializeClass()
                    {
                        if (!class$)
                        {

                            jclass cls = (jclass) env->findClass("is/iclt/icenlp/core/iceparser/Phrase_NPs");

                            mids$ = new jmethodID[max_mid];
                            mids$[mid_init$_cf2e3c10] = env->getMethodID(cls, "<init>", "(Ljava/io/Reader;)V");
                            mids$[mid_init$_be2e4f90] = env->getMethodID(cls, "<init>", "(Ljava/io/InputStream;)V");
                            mids$[mid_main_4dd4540c] = env->getStaticMethodID(cls, "main", "([Ljava/lang/String;)V");
                            mids$[mid_parse_5bcd5850] = env->getMethodID(cls, "parse", "(Ljava/io/Writer;)V");
                            mids$[mid_yybegin_39c7bd3c] = env->getMethodID(cls, "yybegin", "(I)V");
                            mids$[mid_yycharat_39c7bd29] = env->getMethodID(cls, "yycharat", "(I)C");
                            mids$[mid_yyclose_54c6a166] = env->getMethodID(cls, "yyclose", "()V");
                            mids$[mid_yylength_54c6a179] = env->getMethodID(cls, "yylength", "()I");
                            mids$[mid_yylex_54c6a179] = env->getMethodID(cls, "yylex", "()I");
                            mids$[mid_yypushback_39c7bd3c] = env->getMethodID(cls, "yypushback", "(I)V");
                            mids$[mid_yyreset_cf2e3c10] = env->getMethodID(cls, "yyreset", "(Ljava/io/Reader;)V");
                            mids$[mid_yystate_54c6a179] = env->getMethodID(cls, "yystate", "()I");
                            mids$[mid_yytext_14c7b5c5] = env->getMethodID(cls, "yytext", "()Ljava/lang/String;");

                            class$ = (::java::lang::Class *) new JObject(cls);
                            cls = (jclass) class$->this$;

                            YYEOF = env->getStaticIntField(cls, "YYEOF");
                            YYINITIAL = env->getStaticIntField(cls, "YYINITIAL");
                        }
                        return (jclass) class$->this$;
                    }

                    Phrase_NPs::Phrase_NPs(const ::java::io::Reader & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_cf2e3c10, a0.this$)) {}

                    Phrase_NPs::Phrase_NPs(const ::java::io::InputStream & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_be2e4f90, a0.this$)) {}

                    void Phrase_NPs::main(const JArray< ::java::lang::String > & a0)
                    {
                        jclass cls = initializeClass();
                        env->callStaticVoidMethod(cls, mids$[mid_main_4dd4540c], a0.this$);
                    }

                    void Phrase_NPs::parse(const ::java::io::Writer & a0) const
                    {
                        env->callVoidMethod(this$, mids$[mid_parse_5bcd5850], a0.this$);
                    }

                    void Phrase_NPs::yybegin(jint a0) const
                    {
                        env->callVoidMethod(this$, mids$[mid_yybegin_39c7bd3c], a0);
                    }

                    jchar Phrase_NPs::yycharat(jint a0) const
                    {
                        return env->callCharMethod(this$, mids$[mid_yycharat_39c7bd29], a0);
                    }

                    void Phrase_NPs::yyclose() const
                    {
                        env->callVoidMethod(this$, mids$[mid_yyclose_54c6a166]);
                    }

                    jint Phrase_NPs::yylength() const
                    {
                        return env->callIntMethod(this$, mids$[mid_yylength_54c6a179]);
                    }

                    jint Phrase_NPs::yylex() const
                    {
                        return env->callIntMethod(this$, mids$[mid_yylex_54c6a179]);
                    }

                    void Phrase_NPs::yypushback(jint a0) const
                    {
                        env->callVoidMethod(this$, mids$[mid_yypushback_39c7bd3c], a0);
                    }

                    void Phrase_NPs::yyreset(const ::java::io::Reader & a0) const
                    {
                        env->callVoidMethod(this$, mids$[mid_yyreset_cf2e3c10], a0.this$);
                    }

                    jint Phrase_NPs::yystate() const
                    {
                        return env->callIntMethod(this$, mids$[mid_yystate_54c6a179]);
                    }

                    ::java::lang::String Phrase_NPs::yytext() const
                    {
                        return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_yytext_14c7b5c5]));
                    }
                }
            }
        }
    }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace is {
    namespace iclt {
        namespace icenlp {
            namespace core {
                namespace iceparser {
                    static PyObject *t_Phrase_NPs_cast_(PyTypeObject *type, PyObject *arg);
                    static PyObject *t_Phrase_NPs_instance_(PyTypeObject *type, PyObject *arg);
                    static int t_Phrase_NPs_init_(t_Phrase_NPs *self, PyObject *args, PyObject *kwds);
                    static PyObject *t_Phrase_NPs_main(PyTypeObject *type, PyObject *arg);
                    static PyObject *t_Phrase_NPs_parse(t_Phrase_NPs *self, PyObject *arg);
                    static PyObject *t_Phrase_NPs_yybegin(t_Phrase_NPs *self, PyObject *arg);
                    static PyObject *t_Phrase_NPs_yycharat(t_Phrase_NPs *self, PyObject *arg);
                    static PyObject *t_Phrase_NPs_yyclose(t_Phrase_NPs *self);
                    static PyObject *t_Phrase_NPs_yylength(t_Phrase_NPs *self);
                    static PyObject *t_Phrase_NPs_yylex(t_Phrase_NPs *self);
                    static PyObject *t_Phrase_NPs_yypushback(t_Phrase_NPs *self, PyObject *arg);
                    static PyObject *t_Phrase_NPs_yyreset(t_Phrase_NPs *self, PyObject *arg);
                    static PyObject *t_Phrase_NPs_yystate(t_Phrase_NPs *self);
                    static PyObject *t_Phrase_NPs_yytext(t_Phrase_NPs *self);

                    static PyMethodDef t_Phrase_NPs__methods_[] = {
                        DECLARE_METHOD(t_Phrase_NPs, cast_, METH_O | METH_CLASS),
                        DECLARE_METHOD(t_Phrase_NPs, instance_, METH_O | METH_CLASS),
                        DECLARE_METHOD(t_Phrase_NPs, main, METH_O | METH_CLASS),
                        DECLARE_METHOD(t_Phrase_NPs, parse, METH_O),
                        DECLARE_METHOD(t_Phrase_NPs, yybegin, METH_O),
                        DECLARE_METHOD(t_Phrase_NPs, yycharat, METH_O),
                        DECLARE_METHOD(t_Phrase_NPs, yyclose, METH_NOARGS),
                        DECLARE_METHOD(t_Phrase_NPs, yylength, METH_NOARGS),
                        DECLARE_METHOD(t_Phrase_NPs, yylex, METH_NOARGS),
                        DECLARE_METHOD(t_Phrase_NPs, yypushback, METH_O),
                        DECLARE_METHOD(t_Phrase_NPs, yyreset, METH_O),
                        DECLARE_METHOD(t_Phrase_NPs, yystate, METH_NOARGS),
                        DECLARE_METHOD(t_Phrase_NPs, yytext, METH_NOARGS),
                        { NULL, NULL, 0, NULL }
                    };

                    DECLARE_TYPE(Phrase_NPs, t_Phrase_NPs, ::java::lang::Object, Phrase_NPs, t_Phrase_NPs_init_, 0, 0, 0, 0, 0);

                    void t_Phrase_NPs::install(PyObject *module)
                    {
                        installType(&PY_TYPE(Phrase_NPs), module, "Phrase_NPs", 0);
                    }

                    void t_Phrase_NPs::initialize(PyObject *module)
                    {
                        PyDict_SetItemString(PY_TYPE(Phrase_NPs).tp_dict, "class_", make_descriptor(Phrase_NPs::initializeClass, 1));
                        PyDict_SetItemString(PY_TYPE(Phrase_NPs).tp_dict, "wrapfn_", make_descriptor(t_Phrase_NPs::wrap_jobject));
                        PyDict_SetItemString(PY_TYPE(Phrase_NPs).tp_dict, "boxfn_", make_descriptor(boxObject));
                        Phrase_NPs::initializeClass();
                        PyDict_SetItemString(PY_TYPE(Phrase_NPs).tp_dict, "YYEOF", make_descriptor(Phrase_NPs::YYEOF));
                        PyDict_SetItemString(PY_TYPE(Phrase_NPs).tp_dict, "YYINITIAL", make_descriptor(Phrase_NPs::YYINITIAL));
                    }

                    static PyObject *t_Phrase_NPs_cast_(PyTypeObject *type, PyObject *arg)
                    {
                        if (!(arg = castCheck(arg, Phrase_NPs::initializeClass, 1)))
                            return NULL;
                        return t_Phrase_NPs::wrap_Object(Phrase_NPs(((t_Phrase_NPs *) arg)->object.this$));
                    }
                    static PyObject *t_Phrase_NPs_instance_(PyTypeObject *type, PyObject *arg)
                    {
                        if (!castCheck(arg, Phrase_NPs::initializeClass, 0))
                            Py_RETURN_FALSE;
                        Py_RETURN_TRUE;
                    }

                    static int t_Phrase_NPs_init_(t_Phrase_NPs *self, PyObject *args, PyObject *kwds)
                    {
                        switch (PyTuple_GET_SIZE(args)) {
                          case 1:
                            {
                                ::java::io::Reader a0((jobject) NULL);
                                Phrase_NPs object((jobject) NULL);

                                if (!parseArgs(args, "k", ::java::io::Reader::initializeClass, &a0))
                                {
                                    INT_CALL(object = Phrase_NPs(a0));
                                    self->object = object;
                                    break;
                                }
                            }
                            {
                                ::java::io::InputStream a0((jobject) NULL);
                                Phrase_NPs object((jobject) NULL);

                                if (!parseArgs(args, "k", ::java::io::InputStream::initializeClass, &a0))
                                {
                                    INT_CALL(object = Phrase_NPs(a0));
                                    self->object = object;
                                    break;
                                }
                            }
                          default:
                            PyErr_SetArgsError((PyObject *) self, "__init__", args);
                            return -1;
                        }

                        return 0;
                    }

                    static PyObject *t_Phrase_NPs_main(PyTypeObject *type, PyObject *arg)
                    {
                        JArray< ::java::lang::String > a0((jobject) NULL);

                        if (!parseArg(arg, "[s", &a0))
                        {
                            OBJ_CALL(::is::iclt::icenlp::core::iceparser::Phrase_NPs::main(a0));
                            Py_RETURN_NONE;
                        }

                        PyErr_SetArgsError(type, "main", arg);
                        return NULL;
                    }

                    static PyObject *t_Phrase_NPs_parse(t_Phrase_NPs *self, PyObject *arg)
                    {
                        ::java::io::Writer a0((jobject) NULL);

                        if (!parseArg(arg, "k", ::java::io::Writer::initializeClass, &a0))
                        {
                            OBJ_CALL(self->object.parse(a0));
                            Py_RETURN_NONE;
                        }

                        PyErr_SetArgsError((PyObject *) self, "parse", arg);
                        return NULL;
                    }

                    static PyObject *t_Phrase_NPs_yybegin(t_Phrase_NPs *self, PyObject *arg)
                    {
                        jint a0;

                        if (!parseArg(arg, "I", &a0))
                        {
                            OBJ_CALL(self->object.yybegin(a0));
                            Py_RETURN_NONE;
                        }

                        PyErr_SetArgsError((PyObject *) self, "yybegin", arg);
                        return NULL;
                    }

                    static PyObject *t_Phrase_NPs_yycharat(t_Phrase_NPs *self, PyObject *arg)
                    {
                        jint a0;
                        jchar result;

                        if (!parseArg(arg, "I", &a0))
                        {
                            OBJ_CALL(result = self->object.yycharat(a0));
                            return PyUnicode_FromUnicode((Py_UNICODE *) &result, 1);
                        }

                        PyErr_SetArgsError((PyObject *) self, "yycharat", arg);
                        return NULL;
                    }

                    static PyObject *t_Phrase_NPs_yyclose(t_Phrase_NPs *self)
                    {
                        OBJ_CALL(self->object.yyclose());
                        Py_RETURN_NONE;
                    }

                    static PyObject *t_Phrase_NPs_yylength(t_Phrase_NPs *self)
                    {
                        jint result;
                        OBJ_CALL(result = self->object.yylength());
                        return PyInt_FromLong((long) result);
                    }

                    static PyObject *t_Phrase_NPs_yylex(t_Phrase_NPs *self)
                    {
                        jint result;
                        OBJ_CALL(result = self->object.yylex());
                        return PyInt_FromLong((long) result);
                    }

                    static PyObject *t_Phrase_NPs_yypushback(t_Phrase_NPs *self, PyObject *arg)
                    {
                        jint a0;

                        if (!parseArg(arg, "I", &a0))
                        {
                            OBJ_CALL(self->object.yypushback(a0));
                            Py_RETURN_NONE;
                        }

                        PyErr_SetArgsError((PyObject *) self, "yypushback", arg);
                        return NULL;
                    }

                    static PyObject *t_Phrase_NPs_yyreset(t_Phrase_NPs *self, PyObject *arg)
                    {
                        ::java::io::Reader a0((jobject) NULL);

                        if (!parseArg(arg, "k", ::java::io::Reader::initializeClass, &a0))
                        {
                            OBJ_CALL(self->object.yyreset(a0));
                            Py_RETURN_NONE;
                        }

                        PyErr_SetArgsError((PyObject *) self, "yyreset", arg);
                        return NULL;
                    }

                    static PyObject *t_Phrase_NPs_yystate(t_Phrase_NPs *self)
                    {
                        jint result;
                        OBJ_CALL(result = self->object.yystate());
                        return PyInt_FromLong((long) result);
                    }

                    static PyObject *t_Phrase_NPs_yytext(t_Phrase_NPs *self)
                    {
                        ::java::lang::String result((jobject) NULL);
                        OBJ_CALL(result = self->object.yytext());
                        return j2p(result);
                    }
                }
            }
        }
    }
}
#include <jni.h>
#include "JCCEnv.h"
#include "is/iclt/icenlp/core/icemorphy/IceMorphyLexicons.h"
#include "java/io/IOException.h"
#include "is/iclt/icenlp/core/utils/Lexicon.h"
#include "is/iclt/icenlp/core/utils/WordList.h"
#include "java/lang/NullPointerException.h"
#include "java/lang/Class.h"
#include "java/io/InputStream.h"
#include "is/iclt/icenlp/core/icetagger/IceFrequency.h"
#include "java/lang/String.h"
#include "is/iclt/icenlp/core/utils/Trie.h"
#include "JArray.h"

namespace is {
    namespace iclt {
        namespace icenlp {
            namespace core {
                namespace icemorphy {

                    ::java::lang::Class *IceMorphyLexicons::class$ = NULL;
                    jmethodID *IceMorphyLexicons::mids$ = NULL;
                    jfieldID *IceMorphyLexicons::fids$ = NULL;
                    ::java::lang::String *IceMorphyLexicons::dictionary = NULL;
                    ::java::lang::String *IceMorphyLexicons::dictionaryBase = NULL;
                    ::java::lang::String *IceMorphyLexicons::endingsBaseDictionary = NULL;
                    ::java::lang::String *IceMorphyLexicons::endingsDictionary = NULL;
                    ::java::lang::String *IceMorphyLexicons::endingsProperDictionary = NULL;
                    ::java::lang::String *IceMorphyLexicons::prefixesDictionary = NULL;
                    ::java::lang::String *IceMorphyLexicons::tagFrequencyFile = NULL;

                    jclass IceMorphyLexicons::initializeClass()
                    {
                        if (!class$)
                        {

                            jclass cls = (jclass) env->findClass("is/iclt/icenlp/core/icemorphy/IceMorphyLexicons");

                            mids$ = new jmethodID[max_mid];
                            mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
                            mids$[mid_init$_c465e1dc] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V");
                            mids$[mid_init$_a2a4aeec] = env->getMethodID(cls, "<init>", "(Ljava/io/InputStream;Ljava/io/InputStream;Ljava/io/InputStream;Ljava/io/InputStream;Ljava/io/InputStream;Ljava/io/InputStream;Ljava/io/InputStream;)V");

                            fids$ = new jfieldID[max_fid];
                            fids$[fid_baseDict] = env->getFieldID(cls, "baseDict", "Lis/iclt/icenlp/core/utils/Lexicon;");
                            fids$[fid_dict] = env->getFieldID(cls, "dict", "Lis/iclt/icenlp/core/utils/Lexicon;");
                            fids$[fid_dictPathTagger] = env->getFieldID(cls, "dictPathTagger", "Ljava/lang/String;");
                            fids$[fid_endings] = env->getFieldID(cls, "endings", "Lis/iclt/icenlp/core/utils/Trie;");
                            fids$[fid_endingsBase] = env->getFieldID(cls, "endingsBase", "Lis/iclt/icenlp/core/utils/Trie;");
                            fids$[fid_endingsProper] = env->getFieldID(cls, "endingsProper", "Lis/iclt/icenlp/core/utils/Trie;");
                            fids$[fid_prefixes] = env->getFieldID(cls, "prefixes", "Lis/iclt/icenlp/core/utils/WordList;");
                            fids$[fid_tagFrequency] = env->getFieldID(cls, "tagFrequency", "Lis/iclt/icenlp/core/icetagger/IceFrequency;");

                            class$ = (::java::lang::Class *) new JObject(cls);
                            cls = (jclass) class$->this$;

                            dictionary = new ::java::lang::String(env->getStaticObjectField(cls, "dictionary", "Ljava/lang/String;"));
                            dictionaryBase = new ::java::lang::String(env->getStaticObjectField(cls, "dictionaryBase", "Ljava/lang/String;"));
                            endingsBaseDictionary = new ::java::lang::String(env->getStaticObjectField(cls, "endingsBaseDictionary", "Ljava/lang/String;"));
                            endingsDictionary = new ::java::lang::String(env->getStaticObjectField(cls, "endingsDictionary", "Ljava/lang/String;"));
                            endingsProperDictionary = new ::java::lang::String(env->getStaticObjectField(cls, "endingsProperDictionary", "Ljava/lang/String;"));
                            prefixesDictionary = new ::java::lang::String(env->getStaticObjectField(cls, "prefixesDictionary", "Ljava/lang/String;"));
                            tagFrequencyFile = new ::java::lang::String(env->getStaticObjectField(cls, "tagFrequencyFile", "Ljava/lang/String;"));
                        }
                        return (jclass) class$->this$;
                    }

                    IceMorphyLexicons::IceMorphyLexicons(const ::java::lang::String & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}

                    IceMorphyLexicons::IceMorphyLexicons(const ::java::lang::String & a0, const ::java::lang::String & a1, const ::java::lang::String & a2, const ::java::lang::String & a3, const ::java::lang::String & a4, const ::java::lang::String & a5, const ::java::lang::String & a6) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_c465e1dc, a0.this$, a1.this$, a2.this$, a3.this$, a4.this$, a5.this$, a6.this$)) {}

                    IceMorphyLexicons::IceMorphyLexicons(const ::java::io::InputStream & a0, const ::java::io::InputStream & a1, const ::java::io::InputStream & a2, const ::java::io::InputStream & a3, const ::java::io::InputStream & a4, const ::java::io::InputStream & a5, const ::java::io::InputStream & a6) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_a2a4aeec, a0.this$, a1.this$, a2.this$, a3.this$, a4.this$, a5.this$, a6.this$)) {}

                    ::is::iclt::icenlp::core::utils::Lexicon IceMorphyLexicons::_get_baseDict() const
                    {
                        return ::is::iclt::icenlp::core::utils::Lexicon(env->getObjectField(this$, fids$[fid_baseDict]));
                    }

                    void IceMorphyLexicons::_set_baseDict(const ::is::iclt::icenlp::core::utils::Lexicon & a0) const
                    {
                        env->setObjectField(this$, fids$[fid_baseDict], a0.this$);
                    }

                    ::is::iclt::icenlp::core::utils::Lexicon IceMorphyLexicons::_get_dict() const
                    {
                        return ::is::iclt::icenlp::core::utils::Lexicon(env->getObjectField(this$, fids$[fid_dict]));
                    }

                    void IceMorphyLexicons::_set_dict(const ::is::iclt::icenlp::core::utils::Lexicon & a0) const
                    {
                        env->setObjectField(this$, fids$[fid_dict], a0.this$);
                    }

                    ::java::lang::String IceMorphyLexicons::_get_dictPathTagger() const
                    {
                        return ::java::lang::String(env->getObjectField(this$, fids$[fid_dictPathTagger]));
                    }

                    void IceMorphyLexicons::_set_dictPathTagger(const ::java::lang::String & a0) const
                    {
                        env->setObjectField(this$, fids$[fid_dictPathTagger], a0.this$);
                    }

                    ::is::iclt::icenlp::core::utils::Trie IceMorphyLexicons::_get_endings() const
                    {
                        return ::is::iclt::icenlp::core::utils::Trie(env->getObjectField(this$, fids$[fid_endings]));
                    }

                    void IceMorphyLexicons::_set_endings(const ::is::iclt::icenlp::core::utils::Trie & a0) const
                    {
                        env->setObjectField(this$, fids$[fid_endings], a0.this$);
                    }

                    ::is::iclt::icenlp::core::utils::Trie IceMorphyLexicons::_get_endingsBase() const
                    {
                        return ::is::iclt::icenlp::core::utils::Trie(env->getObjectField(this$, fids$[fid_endingsBase]));
                    }

                    void IceMorphyLexicons::_set_endingsBase(const ::is::iclt::icenlp::core::utils::Trie & a0) const
                    {
                        env->setObjectField(this$, fids$[fid_endingsBase], a0.this$);
                    }

                    ::is::iclt::icenlp::core::utils::Trie IceMorphyLexicons::_get_endingsProper() const
                    {
                        return ::is::iclt::icenlp::core::utils::Trie(env->getObjectField(this$, fids$[fid_endingsProper]));
                    }

                    void IceMorphyLexicons::_set_endingsProper(const ::is::iclt::icenlp::core::utils::Trie & a0) const
                    {
                        env->setObjectField(this$, fids$[fid_endingsProper], a0.this$);
                    }

                    ::is::iclt::icenlp::core::utils::WordList IceMorphyLexicons::_get_prefixes() const
                    {
                        return ::is::iclt::icenlp::core::utils::WordList(env->getObjectField(this$, fids$[fid_prefixes]));
                    }

                    void IceMorphyLexicons::_set_prefixes(const ::is::iclt::icenlp::core::utils::WordList & a0) const
                    {
                        env->setObjectField(this$, fids$[fid_prefixes], a0.this$);
                    }

                    ::is::iclt::icenlp::core::icetagger::IceFrequency IceMorphyLexicons::_get_tagFrequency() const
                    {
                        return ::is::iclt::icenlp::core::icetagger::IceFrequency(env->getObjectField(this$, fids$[fid_tagFrequency]));
                    }

                    void IceMorphyLexicons::_set_tagFrequency(const ::is::iclt::icenlp::core::icetagger::IceFrequency & a0) const
                    {
                        env->setObjectField(this$, fids$[fid_tagFrequency], a0.this$);
                    }
                }
            }
        }
    }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace is {
    namespace iclt {
        namespace icenlp {
            namespace core {
                namespace icemorphy {
                    static PyObject *t_IceMorphyLexicons_cast_(PyTypeObject *type, PyObject *arg);
                    static PyObject *t_IceMorphyLexicons_instance_(PyTypeObject *type, PyObject *arg);
                    static int t_IceMorphyLexicons_init_(t_IceMorphyLexicons *self, PyObject *args, PyObject *kwds);
                    static PyObject *t_IceMorphyLexicons_get__baseDict(t_IceMorphyLexicons *self, void *data);
                    static int t_IceMorphyLexicons_set__baseDict(t_IceMorphyLexicons *self, PyObject *arg, void *data);
                    static PyObject *t_IceMorphyLexicons_get__dict(t_IceMorphyLexicons *self, void *data);
                    static int t_IceMorphyLexicons_set__dict(t_IceMorphyLexicons *self, PyObject *arg, void *data);
                    static PyObject *t_IceMorphyLexicons_get__dictPathTagger(t_IceMorphyLexicons *self, void *data);
                    static int t_IceMorphyLexicons_set__dictPathTagger(t_IceMorphyLexicons *self, PyObject *arg, void *data);
                    static PyObject *t_IceMorphyLexicons_get__endings(t_IceMorphyLexicons *self, void *data);
                    static int t_IceMorphyLexicons_set__endings(t_IceMorphyLexicons *self, PyObject *arg, void *data);
                    static PyObject *t_IceMorphyLexicons_get__endingsBase(t_IceMorphyLexicons *self, void *data);
                    static int t_IceMorphyLexicons_set__endingsBase(t_IceMorphyLexicons *self, PyObject *arg, void *data);
                    static PyObject *t_IceMorphyLexicons_get__endingsProper(t_IceMorphyLexicons *self, void *data);
                    static int t_IceMorphyLexicons_set__endingsProper(t_IceMorphyLexicons *self, PyObject *arg, void *data);
                    static PyObject *t_IceMorphyLexicons_get__prefixes(t_IceMorphyLexicons *self, void *data);
                    static int t_IceMorphyLexicons_set__prefixes(t_IceMorphyLexicons *self, PyObject *arg, void *data);
                    static PyObject *t_IceMorphyLexicons_get__tagFrequency(t_IceMorphyLexicons *self, void *data);
                    static int t_IceMorphyLexicons_set__tagFrequency(t_IceMorphyLexicons *self, PyObject *arg, void *data);

                    static PyGetSetDef t_IceMorphyLexicons__fields_[] = {
                        DECLARE_GETSET_FIELD(t_IceMorphyLexicons, baseDict),
                        DECLARE_GETSET_FIELD(t_IceMorphyLexicons, dict),
                        DECLARE_GETSET_FIELD(t_IceMorphyLexicons, dictPathTagger),
                        DECLARE_GETSET_FIELD(t_IceMorphyLexicons, endings),
                        DECLARE_GETSET_FIELD(t_IceMorphyLexicons, endingsBase),
                        DECLARE_GETSET_FIELD(t_IceMorphyLexicons, endingsProper),
                        DECLARE_GETSET_FIELD(t_IceMorphyLexicons, prefixes),
                        DECLARE_GETSET_FIELD(t_IceMorphyLexicons, tagFrequency),
                        { NULL, NULL, NULL, NULL, NULL }
                    };

                    static PyMethodDef t_IceMorphyLexicons__methods_[] = {
                        DECLARE_METHOD(t_IceMorphyLexicons, cast_, METH_O | METH_CLASS),
                        DECLARE_METHOD(t_IceMorphyLexicons, instance_, METH_O | METH_CLASS),
                        { NULL, NULL, 0, NULL }
                    };

                    DECLARE_TYPE(IceMorphyLexicons, t_IceMorphyLexicons, ::java::lang::Object, IceMorphyLexicons, t_IceMorphyLexicons_init_, 0, 0, t_IceMorphyLexicons__fields_, 0, 0);

                    void t_IceMorphyLexicons::install(PyObject *module)
                    {
                        installType(&PY_TYPE(IceMorphyLexicons), module, "IceMorphyLexicons", 0);
                    }

                    void t_IceMorphyLexicons::initialize(PyObject *module)
                    {
                        PyDict_SetItemString(PY_TYPE(IceMorphyLexicons).tp_dict, "class_", make_descriptor(IceMorphyLexicons::initializeClass, 1));
                        PyDict_SetItemString(PY_TYPE(IceMorphyLexicons).tp_dict, "wrapfn_", make_descriptor(t_IceMorphyLexicons::wrap_jobject));
                        PyDict_SetItemString(PY_TYPE(IceMorphyLexicons).tp_dict, "boxfn_", make_descriptor(boxObject));
                        IceMorphyLexicons::initializeClass();
                        PyDict_SetItemString(PY_TYPE(IceMorphyLexicons).tp_dict, "dictionary", make_descriptor(j2p(*IceMorphyLexicons::dictionary)));
                        PyDict_SetItemString(PY_TYPE(IceMorphyLexicons).tp_dict, "dictionaryBase", make_descriptor(j2p(*IceMorphyLexicons::dictionaryBase)));
                        PyDict_SetItemString(PY_TYPE(IceMorphyLexicons).tp_dict, "endingsBaseDictionary", make_descriptor(j2p(*IceMorphyLexicons::endingsBaseDictionary)));
                        PyDict_SetItemString(PY_TYPE(IceMorphyLexicons).tp_dict, "endingsDictionary", make_descriptor(j2p(*IceMorphyLexicons::endingsDictionary)));
                        PyDict_SetItemString(PY_TYPE(IceMorphyLexicons).tp_dict, "endingsProperDictionary", make_descriptor(j2p(*IceMorphyLexicons::endingsProperDictionary)));
                        PyDict_SetItemString(PY_TYPE(IceMorphyLexicons).tp_dict, "prefixesDictionary", make_descriptor(j2p(*IceMorphyLexicons::prefixesDictionary)));
                        PyDict_SetItemString(PY_TYPE(IceMorphyLexicons).tp_dict, "tagFrequencyFile", make_descriptor(j2p(*IceMorphyLexicons::tagFrequencyFile)));
                    }

                    static PyObject *t_IceMorphyLexicons_cast_(PyTypeObject *type, PyObject *arg)
                    {
                        if (!(arg = castCheck(arg, IceMorphyLexicons::initializeClass, 1)))
                            return NULL;
                        return t_IceMorphyLexicons::wrap_Object(IceMorphyLexicons(((t_IceMorphyLexicons *) arg)->object.this$));
                    }
                    static PyObject *t_IceMorphyLexicons_instance_(PyTypeObject *type, PyObject *arg)
                    {
                        if (!castCheck(arg, IceMorphyLexicons::initializeClass, 0))
                            Py_RETURN_FALSE;
                        Py_RETURN_TRUE;
                    }

                    static int t_IceMorphyLexicons_init_(t_IceMorphyLexicons *self, PyObject *args, PyObject *kwds)
                    {
                        switch (PyTuple_GET_SIZE(args)) {
                          case 1:
                            {
                                ::java::lang::String a0((jobject) NULL);
                                IceMorphyLexicons object((jobject) NULL);

                                if (!parseArgs(args, "s", &a0))
                                {
                                    INT_CALL(object = IceMorphyLexicons(a0));
                                    self->object = object;
                                    break;
                                }
                            }
                            goto err;
                          case 7:
                            {
                                ::java::lang::String a0((jobject) NULL);
                                ::java::lang::String a1((jobject) NULL);
                                ::java::lang::String a2((jobject) NULL);
                                ::java::lang::String a3((jobject) NULL);
                                ::java::lang::String a4((jobject) NULL);
                                ::java::lang::String a5((jobject) NULL);
                                ::java::lang::String a6((jobject) NULL);
                                IceMorphyLexicons object((jobject) NULL);

                                if (!parseArgs(args, "sssssss", &a0, &a1, &a2, &a3, &a4, &a5, &a6))
                                {
                                    INT_CALL(object = IceMorphyLexicons(a0, a1, a2, a3, a4, a5, a6));
                                    self->object = object;
                                    break;
                                }
                            }
                            {
                                ::java::io::InputStream a0((jobject) NULL);
                                ::java::io::InputStream a1((jobject) NULL);
                                ::java::io::InputStream a2((jobject) NULL);
                                ::java::io::InputStream a3((jobject) NULL);
                                ::java::io::InputStream a4((jobject) NULL);
                                ::java::io::InputStream a5((jobject) NULL);
                                ::java::io::InputStream a6((jobject) NULL);
                                IceMorphyLexicons object((jobject) NULL);

                                if (!parseArgs(args, "kkkkkkk", ::java::io::InputStream::initializeClass, ::java::io::InputStream::initializeClass, ::java::io::InputStream::initializeClass, ::java::io::InputStream::initializeClass, ::java::io::InputStream::initializeClass, ::java::io::InputStream::initializeClass, ::java::io::InputStream::initializeClass, &a0, &a1, &a2, &a3, &a4, &a5, &a6))
                                {
                                    INT_CALL(object = IceMorphyLexicons(a0, a1, a2, a3, a4, a5, a6));
                                    self->object = object;
                                    break;
                                }
                            }
                          default:
                          err:
                            PyErr_SetArgsError((PyObject *) self, "__init__", args);
                            return -1;
                        }

                        return 0;
                    }

                    static PyObject *t_IceMorphyLexicons_get__baseDict(t_IceMorphyLexicons *self, void *data)
                    {
                        ::is::iclt::icenlp::core::utils::Lexicon value((jobject) NULL);
                        OBJ_CALL(value = self->object._get_baseDict());
                        return ::is::iclt::icenlp::core::utils::t_Lexicon::wrap_Object(value);
                    }
                    static int t_IceMorphyLexicons_set__baseDict(t_IceMorphyLexicons *self, PyObject *arg, void *data)
                    {
                        ::is::iclt::icenlp::core::utils::Lexicon value((jobject) NULL);
                        if (!parseArg(arg, "k", ::is::iclt::icenlp::core::utils::Lexicon::initializeClass, &value))
                        {
                            INT_CALL(self->object._set_baseDict(value));
                            return 0;
                        }
                        PyErr_SetArgsError((PyObject *) self, "baseDict", arg);
                        return -1;
                    }

                    static PyObject *t_IceMorphyLexicons_get__dict(t_IceMorphyLexicons *self, void *data)
                    {
                        ::is::iclt::icenlp::core::utils::Lexicon value((jobject) NULL);
                        OBJ_CALL(value = self->object._get_dict());
                        return ::is::iclt::icenlp::core::utils::t_Lexicon::wrap_Object(value);
                    }
                    static int t_IceMorphyLexicons_set__dict(t_IceMorphyLexicons *self, PyObject *arg, void *data)
                    {
                        ::is::iclt::icenlp::core::utils::Lexicon value((jobject) NULL);
                        if (!parseArg(arg, "k", ::is::iclt::icenlp::core::utils::Lexicon::initializeClass, &value))
                        {
                            INT_CALL(self->object._set_dict(value));
                            return 0;
                        }
                        PyErr_SetArgsError((PyObject *) self, "dict", arg);
                        return -1;
                    }

                    static PyObject *t_IceMorphyLexicons_get__dictPathTagger(t_IceMorphyLexicons *self, void *data)
                    {
                        ::java::lang::String value((jobject) NULL);
                        OBJ_CALL(value = self->object._get_dictPathTagger());
                        return j2p(value);
                    }
                    static int t_IceMorphyLexicons_set__dictPathTagger(t_IceMorphyLexicons *self, PyObject *arg, void *data)
                    {
                        ::java::lang::String value((jobject) NULL);
                        if (!parseArg(arg, "s", &value))
                        {
                            INT_CALL(self->object._set_dictPathTagger(value));
                            return 0;
                        }
                        PyErr_SetArgsError((PyObject *) self, "dictPathTagger", arg);
                        return -1;
                    }

                    static PyObject *t_IceMorphyLexicons_get__endings(t_IceMorphyLexicons *self, void *data)
                    {
                        ::is::iclt::icenlp::core::utils::Trie value((jobject) NULL);
                        OBJ_CALL(value = self->object._get_endings());
                        return ::is::iclt::icenlp::core::utils::t_Trie::wrap_Object(value);
                    }
                    static int t_IceMorphyLexicons_set__endings(t_IceMorphyLexicons *self, PyObject *arg, void *data)
                    {
                        ::is::iclt::icenlp::core::utils::Trie value((jobject) NULL);
                        if (!parseArg(arg, "k", ::is::iclt::icenlp::core::utils::Trie::initializeClass, &value))
                        {
                            INT_CALL(self->object._set_endings(value));
                            return 0;
                        }
                        PyErr_SetArgsError((PyObject *) self, "endings", arg);
                        return -1;
                    }

                    static PyObject *t_IceMorphyLexicons_get__endingsBase(t_IceMorphyLexicons *self, void *data)
                    {
                        ::is::iclt::icenlp::core::utils::Trie value((jobject) NULL);
                        OBJ_CALL(value = self->object._get_endingsBase());
                        return ::is::iclt::icenlp::core::utils::t_Trie::wrap_Object(value);
                    }
                    static int t_IceMorphyLexicons_set__endingsBase(t_IceMorphyLexicons *self, PyObject *arg, void *data)
                    {
                        ::is::iclt::icenlp::core::utils::Trie value((jobject) NULL);
                        if (!parseArg(arg, "k", ::is::iclt::icenlp::core::utils::Trie::initializeClass, &value))
                        {
                            INT_CALL(self->object._set_endingsBase(value));
                            return 0;
                        }
                        PyErr_SetArgsError((PyObject *) self, "endingsBase", arg);
                        return -1;
                    }

                    static PyObject *t_IceMorphyLexicons_get__endingsProper(t_IceMorphyLexicons *self, void *data)
                    {
                        ::is::iclt::icenlp::core::utils::Trie value((jobject) NULL);
                        OBJ_CALL(value = self->object._get_endingsProper());
                        return ::is::iclt::icenlp::core::utils::t_Trie::wrap_Object(value);
                    }
                    static int t_IceMorphyLexicons_set__endingsProper(t_IceMorphyLexicons *self, PyObject *arg, void *data)
                    {
                        ::is::iclt::icenlp::core::utils::Trie value((jobject) NULL);
                        if (!parseArg(arg, "k", ::is::iclt::icenlp::core::utils::Trie::initializeClass, &value))
                        {
                            INT_CALL(self->object._set_endingsProper(value));
                            return 0;
                        }
                        PyErr_SetArgsError((PyObject *) self, "endingsProper", arg);
                        return -1;
                    }

                    static PyObject *t_IceMorphyLexicons_get__prefixes(t_IceMorphyLexicons *self, void *data)
                    {
                        ::is::iclt::icenlp::core::utils::WordList value((jobject) NULL);
                        OBJ_CALL(value = self->object._get_prefixes());
                        return ::is::iclt::icenlp::core::utils::t_WordList::wrap_Object(value);
                    }
                    static int t_IceMorphyLexicons_set__prefixes(t_IceMorphyLexicons *self, PyObject *arg, void *data)
                    {
                        ::is::iclt::icenlp::core::utils::WordList value((jobject) NULL);
                        if (!parseArg(arg, "k", ::is::iclt::icenlp::core::utils::WordList::initializeClass, &value))
                        {
                            INT_CALL(self->object._set_prefixes(value));
                            return 0;
                        }
                        PyErr_SetArgsError((PyObject *) self, "prefixes", arg);
                        return -1;
                    }

                    static PyObject *t_IceMorphyLexicons_get__tagFrequency(t_IceMorphyLexicons *self, void *data)
                    {
                        ::is::iclt::icenlp::core::icetagger::IceFrequency value((jobject) NULL);
                        OBJ_CALL(value = self->object._get_tagFrequency());
                        return ::is::iclt::icenlp::core::icetagger::t_IceFrequency::wrap_Object(value);
                    }
                    static int t_IceMorphyLexicons_set__tagFrequency(t_IceMorphyLexicons *self, PyObject *arg, void *data)
                    {
                        ::is::iclt::icenlp::core::icetagger::IceFrequency value((jobject) NULL);
                        if (!parseArg(arg, "k", ::is::iclt::icenlp::core::icetagger::IceFrequency::initializeClass, &value))
                        {
                            INT_CALL(self->object._set_tagFrequency(value));
                            return 0;
                        }
                        PyErr_SetArgsError((PyObject *) self, "tagFrequency", arg);
                        return -1;
                    }
                }
            }
        }
    }
}
#include <jni.h>
#include "JCCEnv.h"
#include "is/iclt/icenlp/core/formald/tags/Ice2TagFormat.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace is {
    namespace iclt {
        namespace icenlp {
            namespace core {
                namespace formald {
                    namespace tags {

                        ::java::lang::Class *Ice2TagFormat::class$ = NULL;
                        jmethodID *Ice2TagFormat::mids$ = NULL;

                        jclass Ice2TagFormat::initializeClass()
                        {
                            if (!class$)
                            {

                                jclass cls = (jclass) env->findClass("is/iclt/icenlp/core/formald/tags/Ice2TagFormat");

                                mids$ = new jmethodID[max_mid];
                                mids$[mid_newInstance_f7326a91] = env->getStaticMethodID(cls, "newInstance", "()Lis/iclt/icenlp/core/formald/tags/TagFormat;");
                                mids$[mid_sampleData_14c7b5c5] = env->getMethodID(cls, "sampleData", "()Ljava/lang/String;");

                                class$ = (::java::lang::Class *) new JObject(cls);
                            }
                            return (jclass) class$->this$;
                        }

                        ::is::iclt::icenlp::core::formald::tags::TagFormat Ice2TagFormat::newInstance()
                        {
                            jclass cls = initializeClass();
                            return ::is::iclt::icenlp::core::formald::tags::TagFormat(env->callStaticObjectMethod(cls, mids$[mid_newInstance_f7326a91]));
                        }

                        ::java::lang::String Ice2TagFormat::sampleData() const
                        {
                            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_sampleData_14c7b5c5]));
                        }
                    }
                }
            }
        }
    }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace is {
    namespace iclt {
        namespace icenlp {
            namespace core {
                namespace formald {
                    namespace tags {
                        static PyObject *t_Ice2TagFormat_cast_(PyTypeObject *type, PyObject *arg);
                        static PyObject *t_Ice2TagFormat_instance_(PyTypeObject *type, PyObject *arg);
                        static PyObject *t_Ice2TagFormat_newInstance(PyTypeObject *type);
                        static PyObject *t_Ice2TagFormat_sampleData(t_Ice2TagFormat *self, PyObject *args);

                        static PyMethodDef t_Ice2TagFormat__methods_[] = {
                            DECLARE_METHOD(t_Ice2TagFormat, cast_, METH_O | METH_CLASS),
                            DECLARE_METHOD(t_Ice2TagFormat, instance_, METH_O | METH_CLASS),
                            DECLARE_METHOD(t_Ice2TagFormat, newInstance, METH_NOARGS | METH_CLASS),
                            DECLARE_METHOD(t_Ice2TagFormat, sampleData, METH_VARARGS),
                            { NULL, NULL, 0, NULL }
                        };

                        DECLARE_TYPE(Ice2TagFormat, t_Ice2TagFormat, ::is::iclt::icenlp::core::formald::tags::TagFormat, Ice2TagFormat, abstract_init, 0, 0, 0, 0, 0);

                        void t_Ice2TagFormat::install(PyObject *module)
                        {
                            installType(&PY_TYPE(Ice2TagFormat), module, "Ice2TagFormat", 0);
                        }

                        void t_Ice2TagFormat::initialize(PyObject *module)
                        {
                            PyDict_SetItemString(PY_TYPE(Ice2TagFormat).tp_dict, "class_", make_descriptor(Ice2TagFormat::initializeClass, 1));
                            PyDict_SetItemString(PY_TYPE(Ice2TagFormat).tp_dict, "wrapfn_", make_descriptor(t_Ice2TagFormat::wrap_jobject));
                            PyDict_SetItemString(PY_TYPE(Ice2TagFormat).tp_dict, "boxfn_", make_descriptor(boxObject));
                        }

                        static PyObject *t_Ice2TagFormat_cast_(PyTypeObject *type, PyObject *arg)
                        {
                            if (!(arg = castCheck(arg, Ice2TagFormat::initializeClass, 1)))
                                return NULL;
                            return t_Ice2TagFormat::wrap_Object(Ice2TagFormat(((t_Ice2TagFormat *) arg)->object.this$));
                        }
                        static PyObject *t_Ice2TagFormat_instance_(PyTypeObject *type, PyObject *arg)
                        {
                            if (!castCheck(arg, Ice2TagFormat::initializeClass, 0))
                                Py_RETURN_FALSE;
                            Py_RETURN_TRUE;
                        }

                        static PyObject *t_Ice2TagFormat_newInstance(PyTypeObject *type)
                        {
                            ::is::iclt::icenlp::core::formald::tags::TagFormat result((jobject) NULL);
                            OBJ_CALL(result = ::is::iclt::icenlp::core::formald::tags::Ice2TagFormat::newInstance());
                            return ::is::iclt::icenlp::core::formald::tags::t_TagFormat::wrap_Object(result);
                        }

                        static PyObject *t_Ice2TagFormat_sampleData(t_Ice2TagFormat *self, PyObject *args)
                        {
                            ::java::lang::String result((jobject) NULL);

                            if (!parseArgs(args, ""))
                            {
                                OBJ_CALL(result = self->object.sampleData());
                                return j2p(result);
                            }

                            return callSuper(&PY_TYPE(Ice2TagFormat), (PyObject *) self, "sampleData", args, 2);
                        }
                    }
                }
            }
        }
    }
}
#include <jni.h>
#include "JCCEnv.h"
#include "is/iclt/icenlp/core/formald/tags/XMLTagFormat.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace is {
    namespace iclt {
        namespace icenlp {
            namespace core {
                namespace formald {
                    namespace tags {

                        ::java::lang::Class *XMLTagFormat::class$ = NULL;
                        jmethodID *XMLTagFormat::mids$ = NULL;

                        jclass XMLTagFormat::initializeClass()
                        {
                            if (!class$)
                            {

                                jclass cls = (jclass) env->findClass("is/iclt/icenlp/core/formald/tags/XMLTagFormat");

                                mids$ = new jmethodID[max_mid];
                                mids$[mid_newInstance_f7326a91] = env->getStaticMethodID(cls, "newInstance", "()Lis/iclt/icenlp/core/formald/tags/TagFormat;");
                                mids$[mid_sampleData_14c7b5c5] = env->getMethodID(cls, "sampleData", "()Ljava/lang/String;");

                                class$ = (::java::lang::Class *) new JObject(cls);
                            }
                            return (jclass) class$->this$;
                        }

                        ::is::iclt::icenlp::core::formald::tags::TagFormat XMLTagFormat::newInstance()
                        {
                            jclass cls = initializeClass();
                            return ::is::iclt::icenlp::core::formald::tags::TagFormat(env->callStaticObjectMethod(cls, mids$[mid_newInstance_f7326a91]));
                        }

                        ::java::lang::String XMLTagFormat::sampleData() const
                        {
                            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_sampleData_14c7b5c5]));
                        }
                    }
                }
            }
        }
    }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace is {
    namespace iclt {
        namespace icenlp {
            namespace core {
                namespace formald {
                    namespace tags {
                        static PyObject *t_XMLTagFormat_cast_(PyTypeObject *type, PyObject *arg);
                        static PyObject *t_XMLTagFormat_instance_(PyTypeObject *type, PyObject *arg);
                        static PyObject *t_XMLTagFormat_newInstance(PyTypeObject *type);
                        static PyObject *t_XMLTagFormat_sampleData(t_XMLTagFormat *self, PyObject *args);

                        static PyMethodDef t_XMLTagFormat__methods_[] = {
                            DECLARE_METHOD(t_XMLTagFormat, cast_, METH_O | METH_CLASS),
                            DECLARE_METHOD(t_XMLTagFormat, instance_, METH_O | METH_CLASS),
                            DECLARE_METHOD(t_XMLTagFormat, newInstance, METH_NOARGS | METH_CLASS),
                            DECLARE_METHOD(t_XMLTagFormat, sampleData, METH_VARARGS),
                            { NULL, NULL, 0, NULL }
                        };

                        DECLARE_TYPE(XMLTagFormat, t_XMLTagFormat, ::is::iclt::icenlp::core::formald::tags::TagFormat, XMLTagFormat, abstract_init, 0, 0, 0, 0, 0);

                        void t_XMLTagFormat::install(PyObject *module)
                        {
                            installType(&PY_TYPE(XMLTagFormat), module, "XMLTagFormat", 0);
                        }

                        void t_XMLTagFormat::initialize(PyObject *module)
                        {
                            PyDict_SetItemString(PY_TYPE(XMLTagFormat).tp_dict, "class_", make_descriptor(XMLTagFormat::initializeClass, 1));
                            PyDict_SetItemString(PY_TYPE(XMLTagFormat).tp_dict, "wrapfn_", make_descriptor(t_XMLTagFormat::wrap_jobject));
                            PyDict_SetItemString(PY_TYPE(XMLTagFormat).tp_dict, "boxfn_", make_descriptor(boxObject));
                        }

                        static PyObject *t_XMLTagFormat_cast_(PyTypeObject *type, PyObject *arg)
                        {
                            if (!(arg = castCheck(arg, XMLTagFormat::initializeClass, 1)))
                                return NULL;
                            return t_XMLTagFormat::wrap_Object(XMLTagFormat(((t_XMLTagFormat *) arg)->object.this$));
                        }
                        static PyObject *t_XMLTagFormat_instance_(PyTypeObject *type, PyObject *arg)
                        {
                            if (!castCheck(arg, XMLTagFormat::initializeClass, 0))
                                Py_RETURN_FALSE;
                            Py_RETURN_TRUE;
                        }

                        static PyObject *t_XMLTagFormat_newInstance(PyTypeObject *type)
                        {
                            ::is::iclt::icenlp::core::formald::tags::TagFormat result((jobject) NULL);
                            OBJ_CALL(result = ::is::iclt::icenlp::core::formald::tags::XMLTagFormat::newInstance());
                            return ::is::iclt::icenlp::core::formald::tags::t_TagFormat::wrap_Object(result);
                        }

                        static PyObject *t_XMLTagFormat_sampleData(t_XMLTagFormat *self, PyObject *args)
                        {
                            ::java::lang::String result((jobject) NULL);

                            if (!parseArgs(args, ""))
                            {
                                OBJ_CALL(result = self->object.sampleData());
                                return j2p(result);
                            }

                            return callSuper(&PY_TYPE(XMLTagFormat), (PyObject *) self, "sampleData", args, 2);
                        }
                    }
                }
            }
        }
    }
}
#include <jni.h>
#include "JCCEnv.h"
#include "is/iclt/icenlp/core/iceparser/Phrase_VP.h"
#include "java/io/IOException.h"
#include "java/io/Reader.h"
#include "java/io/Writer.h"
#include "java/lang/Class.h"
#include "java/io/InputStream.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace is {
    namespace iclt {
        namespace icenlp {
            namespace core {
                namespace iceparser {

                    ::java::lang::Class *Phrase_VP::class$ = NULL;
                    jmethodID *Phrase_VP::mids$ = NULL;
                    jint Phrase_VP::YYEOF = (jint) 0;
                    jint Phrase_VP::YYINITIAL = (jint) 0;

                    jclass Phrase_VP::initializeClass()
                    {
                        if (!class$)
                        {

                            jclass cls = (jclass) env->findClass("is/iclt/icenlp/core/iceparser/Phrase_VP");

                            mids$ = new jmethodID[max_mid];
                            mids$[mid_init$_cf2e3c10] = env->getMethodID(cls, "<init>", "(Ljava/io/Reader;)V");
                            mids$[mid_init$_be2e4f90] = env->getMethodID(cls, "<init>", "(Ljava/io/InputStream;)V");
                            mids$[mid_main_4dd4540c] = env->getStaticMethodID(cls, "main", "([Ljava/lang/String;)V");
                            mids$[mid_parse_5bcd5850] = env->getMethodID(cls, "parse", "(Ljava/io/Writer;)V");
                            mids$[mid_yybegin_39c7bd3c] = env->getMethodID(cls, "yybegin", "(I)V");
                            mids$[mid_yycharat_39c7bd29] = env->getMethodID(cls, "yycharat", "(I)C");
                            mids$[mid_yyclose_54c6a166] = env->getMethodID(cls, "yyclose", "()V");
                            mids$[mid_yylength_54c6a179] = env->getMethodID(cls, "yylength", "()I");
                            mids$[mid_yylex_54c6a179] = env->getMethodID(cls, "yylex", "()I");
                            mids$[mid_yypushback_39c7bd3c] = env->getMethodID(cls, "yypushback", "(I)V");
                            mids$[mid_yyreset_cf2e3c10] = env->getMethodID(cls, "yyreset", "(Ljava/io/Reader;)V");
                            mids$[mid_yystate_54c6a179] = env->getMethodID(cls, "yystate", "()I");
                            mids$[mid_yytext_14c7b5c5] = env->getMethodID(cls, "yytext", "()Ljava/lang/String;");

                            class$ = (::java::lang::Class *) new JObject(cls);
                            cls = (jclass) class$->this$;

                            YYEOF = env->getStaticIntField(cls, "YYEOF");
                            YYINITIAL = env->getStaticIntField(cls, "YYINITIAL");
                        }
                        return (jclass) class$->this$;
                    }

                    Phrase_VP::Phrase_VP(const ::java::io::Reader & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_cf2e3c10, a0.this$)) {}

                    Phrase_VP::Phrase_VP(const ::java::io::InputStream & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_be2e4f90, a0.this$)) {}

                    void Phrase_VP::main(const JArray< ::java::lang::String > & a0)
                    {
                        jclass cls = initializeClass();
                        env->callStaticVoidMethod(cls, mids$[mid_main_4dd4540c], a0.this$);
                    }

                    void Phrase_VP::parse(const ::java::io::Writer & a0) const
                    {
                        env->callVoidMethod(this$, mids$[mid_parse_5bcd5850], a0.this$);
                    }

                    void Phrase_VP::yybegin(jint a0) const
                    {
                        env->callVoidMethod(this$, mids$[mid_yybegin_39c7bd3c], a0);
                    }

                    jchar Phrase_VP::yycharat(jint a0) const
                    {
                        return env->callCharMethod(this$, mids$[mid_yycharat_39c7bd29], a0);
                    }

                    void Phrase_VP::yyclose() const
                    {
                        env->callVoidMethod(this$, mids$[mid_yyclose_54c6a166]);
                    }

                    jint Phrase_VP::yylength() const
                    {
                        return env->callIntMethod(this$, mids$[mid_yylength_54c6a179]);
                    }

                    jint Phrase_VP::yylex() const
                    {
                        return env->callIntMethod(this$, mids$[mid_yylex_54c6a179]);
                    }

                    void Phrase_VP::yypushback(jint a0) const
                    {
                        env->callVoidMethod(this$, mids$[mid_yypushback_39c7bd3c], a0);
                    }

                    void Phrase_VP::yyreset(const ::java::io::Reader & a0) const
                    {
                        env->callVoidMethod(this$, mids$[mid_yyreset_cf2e3c10], a0.this$);
                    }

                    jint Phrase_VP::yystate() const
                    {
                        return env->callIntMethod(this$, mids$[mid_yystate_54c6a179]);
                    }

                    ::java::lang::String Phrase_VP::yytext() const
                    {
                        return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_yytext_14c7b5c5]));
                    }
                }
            }
        }
    }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace is {
    namespace iclt {
        namespace icenlp {
            namespace core {
                namespace iceparser {
                    static PyObject *t_Phrase_VP_cast_(PyTypeObject *type, PyObject *arg);
                    static PyObject *t_Phrase_VP_instance_(PyTypeObject *type, PyObject *arg);
                    static int t_Phrase_VP_init_(t_Phrase_VP *self, PyObject *args, PyObject *kwds);
                    static PyObject *t_Phrase_VP_main(PyTypeObject *type, PyObject *arg);
                    static PyObject *t_Phrase_VP_parse(t_Phrase_VP *self, PyObject *arg);
                    static PyObject *t_Phrase_VP_yybegin(t_Phrase_VP *self, PyObject *arg);
                    static PyObject *t_Phrase_VP_yycharat(t_Phrase_VP *self, PyObject *arg);
                    static PyObject *t_Phrase_VP_yyclose(t_Phrase_VP *self);
                    static PyObject *t_Phrase_VP_yylength(t_Phrase_VP *self);
                    static PyObject *t_Phrase_VP_yylex(t_Phrase_VP *self);
                    static PyObject *t_Phrase_VP_yypushback(t_Phrase_VP *self, PyObject *arg);
                    static PyObject *t_Phrase_VP_yyreset(t_Phrase_VP *self, PyObject *arg);
                    static PyObject *t_Phrase_VP_yystate(t_Phrase_VP *self);
                    static PyObject *t_Phrase_VP_yytext(t_Phrase_VP *self);

                    static PyMethodDef t_Phrase_VP__methods_[] = {
                        DECLARE_METHOD(t_Phrase_VP, cast_, METH_O | METH_CLASS),
                        DECLARE_METHOD(t_Phrase_VP, instance_, METH_O | METH_CLASS),
                        DECLARE_METHOD(t_Phrase_VP, main, METH_O | METH_CLASS),
                        DECLARE_METHOD(t_Phrase_VP, parse, METH_O),
                        DECLARE_METHOD(t_Phrase_VP, yybegin, METH_O),
                        DECLARE_METHOD(t_Phrase_VP, yycharat, METH_O),
                        DECLARE_METHOD(t_Phrase_VP, yyclose, METH_NOARGS),
                        DECLARE_METHOD(t_Phrase_VP, yylength, METH_NOARGS),
                        DECLARE_METHOD(t_Phrase_VP, yylex, METH_NOARGS),
                        DECLARE_METHOD(t_Phrase_VP, yypushback, METH_O),
                        DECLARE_METHOD(t_Phrase_VP, yyreset, METH_O),
                        DECLARE_METHOD(t_Phrase_VP, yystate, METH_NOARGS),
                        DECLARE_METHOD(t_Phrase_VP, yytext, METH_NOARGS),
                        { NULL, NULL, 0, NULL }
                    };

                    DECLARE_TYPE(Phrase_VP, t_Phrase_VP, ::java::lang::Object, Phrase_VP, t_Phrase_VP_init_, 0, 0, 0, 0, 0);

                    void t_Phrase_VP::install(PyObject *module)
                    {
                        installType(&PY_TYPE(Phrase_VP), module, "Phrase_VP", 0);
                    }

                    void t_Phrase_VP::initialize(PyObject *module)
                    {
                        PyDict_SetItemString(PY_TYPE(Phrase_VP).tp_dict, "class_", make_descriptor(Phrase_VP::initializeClass, 1));
                        PyDict_SetItemString(PY_TYPE(Phrase_VP).tp_dict, "wrapfn_", make_descriptor(t_Phrase_VP::wrap_jobject));
                        PyDict_SetItemString(PY_TYPE(Phrase_VP).tp_dict, "boxfn_", make_descriptor(boxObject));
                        Phrase_VP::initializeClass();
                        PyDict_SetItemString(PY_TYPE(Phrase_VP).tp_dict, "YYEOF", make_descriptor(Phrase_VP::YYEOF));
                        PyDict_SetItemString(PY_TYPE(Phrase_VP).tp_dict, "YYINITIAL", make_descriptor(Phrase_VP::YYINITIAL));
                    }

                    static PyObject *t_Phrase_VP_cast_(PyTypeObject *type, PyObject *arg)
                    {
                        if (!(arg = castCheck(arg, Phrase_VP::initializeClass, 1)))
                            return NULL;
                        return t_Phrase_VP::wrap_Object(Phrase_VP(((t_Phrase_VP *) arg)->object.this$));
                    }
                    static PyObject *t_Phrase_VP_instance_(PyTypeObject *type, PyObject *arg)
                    {
                        if (!castCheck(arg, Phrase_VP::initializeClass, 0))
                            Py_RETURN_FALSE;
                        Py_RETURN_TRUE;
                    }

                    static int t_Phrase_VP_init_(t_Phrase_VP *self, PyObject *args, PyObject *kwds)
                    {
                        switch (PyTuple_GET_SIZE(args)) {
                          case 1:
                            {
                                ::java::io::Reader a0((jobject) NULL);
                                Phrase_VP object((jobject) NULL);

                                if (!parseArgs(args, "k", ::java::io::Reader::initializeClass, &a0))
                                {
                                    INT_CALL(object = Phrase_VP(a0));
                                    self->object = object;
                                    break;
                                }
                            }
                            {
                                ::java::io::InputStream a0((jobject) NULL);
                                Phrase_VP object((jobject) NULL);

                                if (!parseArgs(args, "k", ::java::io::InputStream::initializeClass, &a0))
                                {
                                    INT_CALL(object = Phrase_VP(a0));
                                    self->object = object;
                                    break;
                                }
                            }
                          default:
                            PyErr_SetArgsError((PyObject *) self, "__init__", args);
                            return -1;
                        }

                        return 0;
                    }

                    static PyObject *t_Phrase_VP_main(PyTypeObject *type, PyObject *arg)
                    {
                        JArray< ::java::lang::String > a0((jobject) NULL);

                        if (!parseArg(arg, "[s", &a0))
                        {
                            OBJ_CALL(::is::iclt::icenlp::core::iceparser::Phrase_VP::main(a0));
                            Py_RETURN_NONE;
                        }

                        PyErr_SetArgsError(type, "main", arg);
                        return NULL;
                    }

                    static PyObject *t_Phrase_VP_parse(t_Phrase_VP *self, PyObject *arg)
                    {
                        ::java::io::Writer a0((jobject) NULL);

                        if (!parseArg(arg, "k", ::java::io::Writer::initializeClass, &a0))
                        {
                            OBJ_CALL(self->object.parse(a0));
                            Py_RETURN_NONE;
                        }

                        PyErr_SetArgsError((PyObject *) self, "parse", arg);
                        return NULL;
                    }

                    static PyObject *t_Phrase_VP_yybegin(t_Phrase_VP *self, PyObject *arg)
                    {
                        jint a0;

                        if (!parseArg(arg, "I", &a0))
                        {
                            OBJ_CALL(self->object.yybegin(a0));
                            Py_RETURN_NONE;
                        }

                        PyErr_SetArgsError((PyObject *) self, "yybegin", arg);
                        return NULL;
                    }

                    static PyObject *t_Phrase_VP_yycharat(t_Phrase_VP *self, PyObject *arg)
                    {
                        jint a0;
                        jchar result;

                        if (!parseArg(arg, "I", &a0))
                        {
                            OBJ_CALL(result = self->object.yycharat(a0));
                            return PyUnicode_FromUnicode((Py_UNICODE *) &result, 1);
                        }

                        PyErr_SetArgsError((PyObject *) self, "yycharat", arg);
                        return NULL;
                    }

                    static PyObject *t_Phrase_VP_yyclose(t_Phrase_VP *self)
                    {
                        OBJ_CALL(self->object.yyclose());
                        Py_RETURN_NONE;
                    }

                    static PyObject *t_Phrase_VP_yylength(t_Phrase_VP *self)
                    {
                        jint result;
                        OBJ_CALL(result = self->object.yylength());
                        return PyInt_FromLong((long) result);
                    }

                    static PyObject *t_Phrase_VP_yylex(t_Phrase_VP *self)
                    {
                        jint result;
                        OBJ_CALL(result = self->object.yylex());
                        return PyInt_FromLong((long) result);
                    }

                    static PyObject *t_Phrase_VP_yypushback(t_Phrase_VP *self, PyObject *arg)
                    {
                        jint a0;

                        if (!parseArg(arg, "I", &a0))
                        {
                            OBJ_CALL(self->object.yypushback(a0));
                            Py_RETURN_NONE;
                        }

                        PyErr_SetArgsError((PyObject *) self, "yypushback", arg);
                        return NULL;
                    }

                    static PyObject *t_Phrase_VP_yyreset(t_Phrase_VP *self, PyObject *arg)
                    {
                        ::java::io::Reader a0((jobject) NULL);

                        if (!parseArg(arg, "k", ::java::io::Reader::initializeClass, &a0))
                        {
                            OBJ_CALL(self->object.yyreset(a0));
                            Py_RETURN_NONE;
                        }

                        PyErr_SetArgsError((PyObject *) self, "yyreset", arg);
                        return NULL;
                    }

                    static PyObject *t_Phrase_VP_yystate(t_Phrase_VP *self)
                    {
                        jint result;
                        OBJ_CALL(result = self->object.yystate());
                        return PyInt_FromLong((long) result);
                    }

                    static PyObject *t_Phrase_VP_yytext(t_Phrase_VP *self)
                    {
                        ::java::lang::String result((jobject) NULL);
                        OBJ_CALL(result = self->object.yytext());
                        return j2p(result);
                    }
                }
            }
        }
    }
}
#include <jni.h>
#include "JCCEnv.h"
#include "is/iclt/icenlp/core/formald/tags/TaggedText.h"
#include "is/iclt/icenlp/core/formald/tags/TagFormat.h"
#include "is/iclt/icenlp/core/formald/tags/TaggedToken.h"
#include "java/util/List.h"
#include "java/lang/String.h"
#include "is/iclt/icenlp/core/formald/tags/TaggedSentence.h"
#include "java/lang/Class.h"
#include "java/io/File.h"
#include "is/iclt/icenlp/core/formald/tagsets/Tagset.h"
#include "JArray.h"

namespace is {
    namespace iclt {
        namespace icenlp {
            namespace core {
                namespace formald {
                    namespace tags {

                        ::java::lang::Class *TaggedText::class$ = NULL;
                        jmethodID *TaggedText::mids$ = NULL;

                        jclass TaggedText::initializeClass()
                        {
                            if (!class$)
                            {

                                jclass cls = (jclass) env->findClass("is/iclt/icenlp/core/formald/tags/TaggedText");

                                mids$ = new jmethodID[max_mid];
                                mids$[mid_addSentence_4b6dd875] = env->getMethodID(cls, "addSentence", "(Lis/iclt/icenlp/core/formald/tags/TaggedSentence;)V");
                                mids$[mid_createSentence_060fbffc] = env->getMethodID(cls, "createSentence", "()Lis/iclt/icenlp/core/formald/tags/TaggedSentence;");
                                mids$[mid_getSentence_feeeaaca] = env->getMethodID(cls, "getSentence", "(I)Lis/iclt/icenlp/core/formald/tags/TaggedSentence;");
                                mids$[mid_getSentenceCount_54c6a179] = env->getMethodID(cls, "getSentenceCount", "()I");
                                mids$[mid_getSentences_87851566] = env->getMethodID(cls, "getSentences", "()Ljava/util/List;");
                                mids$[mid_getTagFormat_f7326a91] = env->getMethodID(cls, "getTagFormat", "()Lis/iclt/icenlp/core/formald/tags/TagFormat;");
                                mids$[mid_getTagset_cc201b9a] = env->getMethodID(cls, "getTagset", "()Lis/iclt/icenlp/core/formald/tagsets/Tagset;");
                                mids$[mid_getTokens_87851566] = env->getMethodID(cls, "getTokens", "()Ljava/util/List;");
                                mids$[mid_isDefaultTagset_54c6a16a] = env->getMethodID(cls, "isDefaultTagset", "()Z");
                                mids$[mid_newInstance_db88959a] = env->getStaticMethodID(cls, "newInstance", "()Lis/iclt/icenlp/core/formald/tags/TaggedText;");
                                mids$[mid_newInstance_5b238eeb] = env->getStaticMethodID(cls, "newInstance", "(Lis/iclt/icenlp/core/formald/tagsets/Tagset;)Lis/iclt/icenlp/core/formald/tags/TaggedText;");
                                mids$[mid_newInstance_5d7d294a] = env->getStaticMethodID(cls, "newInstance", "(Ljava/lang/String;Lis/iclt/icenlp/core/formald/tags/TagFormat;)Lis/iclt/icenlp/core/formald/tags/TaggedText;");
                                mids$[mid_newInstanceFromFile_55e241c1] = env->getStaticMethodID(cls, "newInstanceFromFile", "(Ljava/io/File;Lis/iclt/icenlp/core/formald/tags/TagFormat;)Lis/iclt/icenlp/core/formald/tags/TaggedText;");
                                mids$[mid_removeSentence_4b6dd875] = env->getMethodID(cls, "removeSentence", "(Lis/iclt/icenlp/core/formald/tags/TaggedSentence;)V");
                                mids$[mid_setTagFormat_bb3e15b8] = env->getMethodID(cls, "setTagFormat", "(Lis/iclt/icenlp/core/formald/tags/TagFormat;)V");
                                mids$[mid_setTagset_3483f5cb] = env->getMethodID(cls, "setTagset", "(Lis/iclt/icenlp/core/formald/tagsets/Tagset;)V");
                                mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
                                mids$[mid_toString_b9f5ff67] = env->getMethodID(cls, "toString", "(Lis/iclt/icenlp/core/formald/tags/TagFormat;)Ljava/lang/String;");

                                class$ = (::java::lang::Class *) new JObject(cls);
                            }
                            return (jclass) class$->this$;
                        }

                        void TaggedText::addSentence(const ::is::iclt::icenlp::core::formald::tags::TaggedSentence & a0) const
                        {
                            env->callVoidMethod(this$, mids$[mid_addSentence_4b6dd875], a0.this$);
                        }

                        ::is::iclt::icenlp::core::formald::tags::TaggedSentence TaggedText::createSentence() const
                        {
                            return ::is::iclt::icenlp::core::formald::tags::TaggedSentence(env->callObjectMethod(this$, mids$[mid_createSentence_060fbffc]));
                        }

                        ::is::iclt::icenlp::core::formald::tags::TaggedSentence TaggedText::getSentence(jint a0) const
                        {
                            return ::is::iclt::icenlp::core::formald::tags::TaggedSentence(env->callObjectMethod(this$, mids$[mid_getSentence_feeeaaca], a0));
                        }

                        jint TaggedText::getSentenceCount() const
                        {
                            return env->callIntMethod(this$, mids$[mid_getSentenceCount_54c6a179]);
                        }

                        ::java::util::List TaggedText::getSentences() const
                        {
                            return ::java::util::List(env->callObjectMethod(this$, mids$[mid_getSentences_87851566]));
                        }

                        ::is::iclt::icenlp::core::formald::tags::TagFormat TaggedText::getTagFormat() const
                        {
                            return ::is::iclt::icenlp::core::formald::tags::TagFormat(env->callObjectMethod(this$, mids$[mid_getTagFormat_f7326a91]));
                        }

                        ::is::iclt::icenlp::core::formald::tagsets::Tagset TaggedText::getTagset() const
                        {
                            return ::is::iclt::icenlp::core::formald::tagsets::Tagset(env->callObjectMethod(this$, mids$[mid_getTagset_cc201b9a]));
                        }

                        ::java::util::List TaggedText::getTokens() const
                        {
                            return ::java::util::List(env->callObjectMethod(this$, mids$[mid_getTokens_87851566]));
                        }

                        jboolean TaggedText::isDefaultTagset() const
                        {
                            return env->callBooleanMethod(this$, mids$[mid_isDefaultTagset_54c6a16a]);
                        }

                        TaggedText TaggedText::newInstance()
                        {
                            jclass cls = initializeClass();
                            return TaggedText(env->callStaticObjectMethod(cls, mids$[mid_newInstance_db88959a]));
                        }

                        TaggedText TaggedText::newInstance(const ::is::iclt::icenlp::core::formald::tagsets::Tagset & a0)
                        {
                            jclass cls = initializeClass();
                            return TaggedText(env->callStaticObjectMethod(cls, mids$[mid_newInstance_5b238eeb], a0.this$));
                        }

                        TaggedText TaggedText::newInstance(const ::java::lang::String & a0, const ::is::iclt::icenlp::core::formald::tags::TagFormat & a1)
                        {
                            jclass cls = initializeClass();
                            return TaggedText(env->callStaticObjectMethod(cls, mids$[mid_newInstance_5d7d294a], a0.this$, a1.this$));
                        }

                        TaggedText TaggedText::newInstanceFromFile(const ::java::io::File & a0, const ::is::iclt::icenlp::core::formald::tags::TagFormat & a1)
                        {
                            jclass cls = initializeClass();
                            return TaggedText(env->callStaticObjectMethod(cls, mids$[mid_newInstanceFromFile_55e241c1], a0.this$, a1.this$));
                        }

                        void TaggedText::removeSentence(const ::is::iclt::icenlp::core::formald::tags::TaggedSentence & a0) const
                        {
                            env->callVoidMethod(this$, mids$[mid_removeSentence_4b6dd875], a0.this$);
                        }

                        void TaggedText::setTagFormat(const ::is::iclt::icenlp::core::formald::tags::TagFormat & a0) const
                        {
                            env->callVoidMethod(this$, mids$[mid_setTagFormat_bb3e15b8], a0.this$);
                        }

                        void TaggedText::setTagset(const ::is::iclt::icenlp::core::formald::tagsets::Tagset & a0) const
                        {
                            env->callVoidMethod(this$, mids$[mid_setTagset_3483f5cb], a0.this$);
                        }

                        ::java::lang::String TaggedText::toString() const
                        {
                            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
                        }

                        ::java::lang::String TaggedText::toString(const ::is::iclt::icenlp::core::formald::tags::TagFormat & a0) const
                        {
                            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_b9f5ff67], a0.this$));
                        }
                    }
                }
            }
        }
    }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace is {
    namespace iclt {
        namespace icenlp {
            namespace core {
                namespace formald {
                    namespace tags {
                        static PyObject *t_TaggedText_cast_(PyTypeObject *type, PyObject *arg);
                        static PyObject *t_TaggedText_instance_(PyTypeObject *type, PyObject *arg);
                        static PyObject *t_TaggedText_addSentence(t_TaggedText *self, PyObject *arg);
                        static PyObject *t_TaggedText_createSentence(t_TaggedText *self);
                        static PyObject *t_TaggedText_getSentence(t_TaggedText *self, PyObject *arg);
                        static PyObject *t_TaggedText_getSentenceCount(t_TaggedText *self);
                        static PyObject *t_TaggedText_getSentences(t_TaggedText *self);
                        static PyObject *t_TaggedText_getTagFormat(t_TaggedText *self);
                        static PyObject *t_TaggedText_getTagset(t_TaggedText *self);
                        static PyObject *t_TaggedText_getTokens(t_TaggedText *self);
                        static PyObject *t_TaggedText_isDefaultTagset(t_TaggedText *self);
                        static PyObject *t_TaggedText_newInstance(PyTypeObject *type, PyObject *args);
                        static PyObject *t_TaggedText_newInstanceFromFile(PyTypeObject *type, PyObject *args);
                        static PyObject *t_TaggedText_removeSentence(t_TaggedText *self, PyObject *arg);
                        static PyObject *t_TaggedText_setTagFormat(t_TaggedText *self, PyObject *arg);
                        static PyObject *t_TaggedText_setTagset(t_TaggedText *self, PyObject *arg);
                        static PyObject *t_TaggedText_toString(t_TaggedText *self, PyObject *args);
                        static PyObject *t_TaggedText_get__defaultTagset(t_TaggedText *self, void *data);
                        static PyObject *t_TaggedText_get__sentenceCount(t_TaggedText *self, void *data);
                        static PyObject *t_TaggedText_get__sentences(t_TaggedText *self, void *data);
                        static PyObject *t_TaggedText_get__tagFormat(t_TaggedText *self, void *data);
                        static int t_TaggedText_set__tagFormat(t_TaggedText *self, PyObject *arg, void *data);
                        static PyObject *t_TaggedText_get__tagset(t_TaggedText *self, void *data);
                        static int t_TaggedText_set__tagset(t_TaggedText *self, PyObject *arg, void *data);
                        static PyObject *t_TaggedText_get__tokens(t_TaggedText *self, void *data);
                        static PyGetSetDef t_TaggedText__fields_[] = {
                            DECLARE_GET_FIELD(t_TaggedText, defaultTagset),
                            DECLARE_GET_FIELD(t_TaggedText, sentenceCount),
                            DECLARE_GET_FIELD(t_TaggedText, sentences),
                            DECLARE_GETSET_FIELD(t_TaggedText, tagFormat),
                            DECLARE_GETSET_FIELD(t_TaggedText, tagset),
                            DECLARE_GET_FIELD(t_TaggedText, tokens),
                            { NULL, NULL, NULL, NULL, NULL }
                        };

                        static PyMethodDef t_TaggedText__methods_[] = {
                            DECLARE_METHOD(t_TaggedText, cast_, METH_O | METH_CLASS),
                            DECLARE_METHOD(t_TaggedText, instance_, METH_O | METH_CLASS),
                            DECLARE_METHOD(t_TaggedText, addSentence, METH_O),
                            DECLARE_METHOD(t_TaggedText, createSentence, METH_NOARGS),
                            DECLARE_METHOD(t_TaggedText, getSentence, METH_O),
                            DECLARE_METHOD(t_TaggedText, getSentenceCount, METH_NOARGS),
                            DECLARE_METHOD(t_TaggedText, getSentences, METH_NOARGS),
                            DECLARE_METHOD(t_TaggedText, getTagFormat, METH_NOARGS),
                            DECLARE_METHOD(t_TaggedText, getTagset, METH_NOARGS),
                            DECLARE_METHOD(t_TaggedText, getTokens, METH_NOARGS),
                            DECLARE_METHOD(t_TaggedText, isDefaultTagset, METH_NOARGS),
                            DECLARE_METHOD(t_TaggedText, newInstance, METH_VARARGS | METH_CLASS),
                            DECLARE_METHOD(t_TaggedText, newInstanceFromFile, METH_VARARGS | METH_CLASS),
                            DECLARE_METHOD(t_TaggedText, removeSentence, METH_O),
                            DECLARE_METHOD(t_TaggedText, setTagFormat, METH_O),
                            DECLARE_METHOD(t_TaggedText, setTagset, METH_O),
                            DECLARE_METHOD(t_TaggedText, toString, METH_VARARGS),
                            { NULL, NULL, 0, NULL }
                        };

                        DECLARE_TYPE(TaggedText, t_TaggedText, ::is::iclt::icenlp::core::formald::Text, TaggedText, abstract_init, 0, 0, t_TaggedText__fields_, 0, 0);

                        void t_TaggedText::install(PyObject *module)
                        {
                            installType(&PY_TYPE(TaggedText), module, "TaggedText", 0);
                        }

                        void t_TaggedText::initialize(PyObject *module)
                        {
                            PyDict_SetItemString(PY_TYPE(TaggedText).tp_dict, "class_", make_descriptor(TaggedText::initializeClass, 1));
                            PyDict_SetItemString(PY_TYPE(TaggedText).tp_dict, "wrapfn_", make_descriptor(t_TaggedText::wrap_jobject));
                            PyDict_SetItemString(PY_TYPE(TaggedText).tp_dict, "boxfn_", make_descriptor(boxObject));
                        }

                        static PyObject *t_TaggedText_cast_(PyTypeObject *type, PyObject *arg)
                        {
                            if (!(arg = castCheck(arg, TaggedText::initializeClass, 1)))
                                return NULL;
                            return t_TaggedText::wrap_Object(TaggedText(((t_TaggedText *) arg)->object.this$));
                        }
                        static PyObject *t_TaggedText_instance_(PyTypeObject *type, PyObject *arg)
                        {
                            if (!castCheck(arg, TaggedText::initializeClass, 0))
                                Py_RETURN_FALSE;
                            Py_RETURN_TRUE;
                        }

                        static PyObject *t_TaggedText_addSentence(t_TaggedText *self, PyObject *arg)
                        {
                            ::is::iclt::icenlp::core::formald::tags::TaggedSentence a0((jobject) NULL);

                            if (!parseArg(arg, "k", ::is::iclt::icenlp::core::formald::tags::TaggedSentence::initializeClass, &a0))
                            {
                                OBJ_CALL(self->object.addSentence(a0));
                                Py_RETURN_NONE;
                            }

                            PyErr_SetArgsError((PyObject *) self, "addSentence", arg);
                            return NULL;
                        }

                        static PyObject *t_TaggedText_createSentence(t_TaggedText *self)
                        {
                            ::is::iclt::icenlp::core::formald::tags::TaggedSentence result((jobject) NULL);
                            OBJ_CALL(result = self->object.createSentence());
                            return ::is::iclt::icenlp::core::formald::tags::t_TaggedSentence::wrap_Object(result);
                        }

                        static PyObject *t_TaggedText_getSentence(t_TaggedText *self, PyObject *arg)
                        {
                            jint a0;
                            ::is::iclt::icenlp::core::formald::tags::TaggedSentence result((jobject) NULL);

                            if (!parseArg(arg, "I", &a0))
                            {
                                OBJ_CALL(result = self->object.getSentence(a0));
                                return ::is::iclt::icenlp::core::formald::tags::t_TaggedSentence::wrap_Object(result);
                            }

                            PyErr_SetArgsError((PyObject *) self, "getSentence", arg);
                            return NULL;
                        }

                        static PyObject *t_TaggedText_getSentenceCount(t_TaggedText *self)
                        {
                            jint result;
                            OBJ_CALL(result = self->object.getSentenceCount());
                            return PyInt_FromLong((long) result);
                        }

                        static PyObject *t_TaggedText_getSentences(t_TaggedText *self)
                        {
                            ::java::util::List result((jobject) NULL);
                            OBJ_CALL(result = self->object.getSentences());
                            return ::java::util::t_List::wrap_Object(result, &::is::iclt::icenlp::core::formald::tags::PY_TYPE(TaggedSentence));
                        }

                        static PyObject *t_TaggedText_getTagFormat(t_TaggedText *self)
                        {
                            ::is::iclt::icenlp::core::formald::tags::TagFormat result((jobject) NULL);
                            OBJ_CALL(result = self->object.getTagFormat());
                            return ::is::iclt::icenlp::core::formald::tags::t_TagFormat::wrap_Object(result);
                        }

                        static PyObject *t_TaggedText_getTagset(t_TaggedText *self)
                        {
                            ::is::iclt::icenlp::core::formald::tagsets::Tagset result((jobject) NULL);
                            OBJ_CALL(result = self->object.getTagset());
                            return ::is::iclt::icenlp::core::formald::tagsets::t_Tagset::wrap_Object(result);
                        }

                        static PyObject *t_TaggedText_getTokens(t_TaggedText *self)
                        {
                            ::java::util::List result((jobject) NULL);
                            OBJ_CALL(result = self->object.getTokens());
                            return ::java::util::t_List::wrap_Object(result, &::is::iclt::icenlp::core::formald::tags::PY_TYPE(TaggedToken));
                        }

                        static PyObject *t_TaggedText_isDefaultTagset(t_TaggedText *self)
                        {
                            jboolean result;
                            OBJ_CALL(result = self->object.isDefaultTagset());
                            Py_RETURN_BOOL(result);
                        }

                        static PyObject *t_TaggedText_newInstance(PyTypeObject *type, PyObject *args)
                        {
                            switch (PyTuple_GET_SIZE(args)) {
                              case 0:
                                {
                                    TaggedText result((jobject) NULL);
                                    OBJ_CALL(result = ::is::iclt::icenlp::core::formald::tags::TaggedText::newInstance());
                                    return t_TaggedText::wrap_Object(result);
                                }
                                break;
                              case 1:
                                {
                                    ::is::iclt::icenlp::core::formald::tagsets::Tagset a0((jobject) NULL);
                                    TaggedText result((jobject) NULL);

                                    if (!parseArgs(args, "k", ::is::iclt::icenlp::core::formald::tagsets::Tagset::initializeClass, &a0))
                                    {
                                        OBJ_CALL(result = ::is::iclt::icenlp::core::formald::tags::TaggedText::newInstance(a0));
                                        return t_TaggedText::wrap_Object(result);
                                    }
                                }
                                break;
                              case 2:
                                {
                                    ::java::lang::String a0((jobject) NULL);
                                    ::is::iclt::icenlp::core::formald::tags::TagFormat a1((jobject) NULL);
                                    TaggedText result((jobject) NULL);

                                    if (!parseArgs(args, "sk", ::is::iclt::icenlp::core::formald::tags::TagFormat::initializeClass, &a0, &a1))
                                    {
                                        OBJ_CALL(result = ::is::iclt::icenlp::core::formald::tags::TaggedText::newInstance(a0, a1));
                                        return t_TaggedText::wrap_Object(result);
                                    }
                                }
                            }

                            PyErr_SetArgsError(type, "newInstance", args);
                            return NULL;
                        }

                        static PyObject *t_TaggedText_newInstanceFromFile(PyTypeObject *type, PyObject *args)
                        {
                            ::java::io::File a0((jobject) NULL);
                            ::is::iclt::icenlp::core::formald::tags::TagFormat a1((jobject) NULL);
                            TaggedText result((jobject) NULL);

                            if (!parseArgs(args, "kk", ::java::io::File::initializeClass, ::is::iclt::icenlp::core::formald::tags::TagFormat::initializeClass, &a0, &a1))
                            {
                                OBJ_CALL(result = ::is::iclt::icenlp::core::formald::tags::TaggedText::newInstanceFromFile(a0, a1));
                                return t_TaggedText::wrap_Object(result);
                            }

                            PyErr_SetArgsError(type, "newInstanceFromFile", args);
                            return NULL;
                        }

                        static PyObject *t_TaggedText_removeSentence(t_TaggedText *self, PyObject *arg)
                        {
                            ::is::iclt::icenlp::core::formald::tags::TaggedSentence a0((jobject) NULL);

                            if (!parseArg(arg, "k", ::is::iclt::icenlp::core::formald::tags::TaggedSentence::initializeClass, &a0))
                            {
                                OBJ_CALL(self->object.removeSentence(a0));
                                Py_RETURN_NONE;
                            }

                            PyErr_SetArgsError((PyObject *) self, "removeSentence", arg);
                            return NULL;
                        }

                        static PyObject *t_TaggedText_setTagFormat(t_TaggedText *self, PyObject *arg)
                        {
                            ::is::iclt::icenlp::core::formald::tags::TagFormat a0((jobject) NULL);

                            if (!parseArg(arg, "k", ::is::iclt::icenlp::core::formald::tags::TagFormat::initializeClass, &a0))
                            {
                                OBJ_CALL(self->object.setTagFormat(a0));
                                Py_RETURN_NONE;
                            }

                            PyErr_SetArgsError((PyObject *) self, "setTagFormat", arg);
                            return NULL;
                        }

                        static PyObject *t_TaggedText_setTagset(t_TaggedText *self, PyObject *arg)
                        {
                            ::is::iclt::icenlp::core::formald::tagsets::Tagset a0((jobject) NULL);

                            if (!parseArg(arg, "k", ::is::iclt::icenlp::core::formald::tagsets::Tagset::initializeClass, &a0))
                            {
                                OBJ_CALL(self->object.setTagset(a0));
                                Py_RETURN_NONE;
                            }

                            PyErr_SetArgsError((PyObject *) self, "setTagset", arg);
                            return NULL;
                        }

                        static PyObject *t_TaggedText_toString(t_TaggedText *self, PyObject *args)
                        {
                            switch (PyTuple_GET_SIZE(args)) {
                              case 0:
                                {
                                    ::java::lang::String result((jobject) NULL);
                                    OBJ_CALL(result = self->object.toString());
                                    return j2p(result);
                                }
                                break;
                              case 1:
                                {
                                    ::is::iclt::icenlp::core::formald::tags::TagFormat a0((jobject) NULL);
                                    ::java::lang::String result((jobject) NULL);

                                    if (!parseArgs(args, "k", ::is::iclt::icenlp::core::formald::tags::TagFormat::initializeClass, &a0))
                                    {
                                        OBJ_CALL(result = self->object.toString(a0));
                                        return j2p(result);
                                    }
                                }
                            }

                            return callSuper(&PY_TYPE(TaggedText), (PyObject *) self, "toString", args, 2);
                        }

                        static PyObject *t_TaggedText_get__defaultTagset(t_TaggedText *self, void *data)
                        {
                            jboolean value;
                            OBJ_CALL(value = self->object.isDefaultTagset());
                            Py_RETURN_BOOL(value);
                        }

                        static PyObject *t_TaggedText_get__sentenceCount(t_TaggedText *self, void *data)
                        {
                            jint value;
                            OBJ_CALL(value = self->object.getSentenceCount());
                            return PyInt_FromLong((long) value);
                        }

                        static PyObject *t_TaggedText_get__sentences(t_TaggedText *self, void *data)
                        {
                            ::java::util::List value((jobject) NULL);
                            OBJ_CALL(value = self->object.getSentences());
                            return ::java::util::t_List::wrap_Object(value);
                        }

                        static PyObject *t_TaggedText_get__tagFormat(t_TaggedText *self, void *data)
                        {
                            ::is::iclt::icenlp::core::formald::tags::TagFormat value((jobject) NULL);
                            OBJ_CALL(value = self->object.getTagFormat());
                            return ::is::iclt::icenlp::core::formald::tags::t_TagFormat::wrap_Object(value);
                        }
                        static int t_TaggedText_set__tagFormat(t_TaggedText *self, PyObject *arg, void *data)
                        {
                            {
                                ::is::iclt::icenlp::core::formald::tags::TagFormat value((jobject) NULL);
                                if (!parseArg(arg, "k", ::is::iclt::icenlp::core::formald::tags::TagFormat::initializeClass, &value))
                                {
                                    INT_CALL(self->object.setTagFormat(value));
                                    return 0;
                                }
                            }
                            PyErr_SetArgsError((PyObject *) self, "tagFormat", arg);
                            return -1;
                        }

                        static PyObject *t_TaggedText_get__tagset(t_TaggedText *self, void *data)
                        {
                            ::is::iclt::icenlp::core::formald::tagsets::Tagset value((jobject) NULL);
                            OBJ_CALL(value = self->object.getTagset());
                            return ::is::iclt::icenlp::core::formald::tagsets::t_Tagset::wrap_Object(value);
                        }
                        static int t_TaggedText_set__tagset(t_TaggedText *self, PyObject *arg, void *data)
                        {
                            {
                                ::is::iclt::icenlp::core::formald::tagsets::Tagset value((jobject) NULL);
                                if (!parseArg(arg, "k", ::is::iclt::icenlp::core::formald::tagsets::Tagset::initializeClass, &value))
                                {
                                    INT_CALL(self->object.setTagset(value));
                                    return 0;
                                }
                            }
                            PyErr_SetArgsError((PyObject *) self, "tagset", arg);
                            return -1;
                        }

                        static PyObject *t_TaggedText_get__tokens(t_TaggedText *self, void *data)
                        {
                            ::java::util::List value((jobject) NULL);
                            OBJ_CALL(value = self->object.getTokens());
                            return ::java::util::t_List::wrap_Object(value);
                        }
                    }
                }
            }
        }
    }
}
#include <jni.h>
#include "JCCEnv.h"
#include "is/iclt/icenlp/core/icetagger/IceDisambiguator.h"
#include "java/util/ArrayList.h"
#include "is/iclt/icenlp/core/tokenizer/IceTokenTags.h"
#include "java/lang/Class.h"
#include "is/iclt/icenlp/core/utils/IceLog.h"
#include "is/iclt/icenlp/core/utils/Lexicon.h"
#include "JArray.h"

namespace is {
    namespace iclt {
        namespace icenlp {
            namespace core {
                namespace icetagger {

                    ::java::lang::Class *IceDisambiguator::class$ = NULL;
                    jmethodID *IceDisambiguator::mids$ = NULL;

                    jclass IceDisambiguator::initializeClass()
                    {
                        if (!class$)
                        {

                            jclass cls = (jclass) env->findClass("is/iclt/icenlp/core/icetagger/IceDisambiguator");

                            mids$ = new jmethodID[max_mid];
                            mids$[mid_init$_0df54ce1] = env->getMethodID(cls, "<init>", "(Lis/iclt/icenlp/core/utils/IceLog;Lis/iclt/icenlp/core/utils/Lexicon;Lis/iclt/icenlp/core/utils/Lexicon;Z)V");
                            mids$[mid_disAmbiguateGlobal_54c6a166] = env->getMethodID(cls, "disAmbiguateGlobal", "()V");
                            mids$[mid_disAmbiguateLocal_54c6a166] = env->getMethodID(cls, "disAmbiguateLocal", "()V");
                            mids$[mid_removeTags_a1b441dc] = env->getMethodID(cls, "removeTags", "(Lis/iclt/icenlp/core/tokenizer/IceTokenTags;Lis/iclt/icenlp/core/tokenizer/IceTokenTags;Lis/iclt/icenlp/core/tokenizer/IceTokenTags;Lis/iclt/icenlp/core/tokenizer/IceTokenTags;Lis/iclt/icenlp/core/tokenizer/IceTokenTags;)V");
                            mids$[mid_setFullDisambiguation_bb0c767f] = env->getMethodID(cls, "setFullDisambiguation", "(Z)V");
                            mids$[mid_setTokens_b3f662f9] = env->getMethodID(cls, "setTokens", "(Ljava/util/ArrayList;)V");

                            class$ = (::java::lang::Class *) new JObject(cls);
                        }
                        return (jclass) class$->this$;
                    }

                    IceDisambiguator::IceDisambiguator(const ::is::iclt::icenlp::core::utils::IceLog & a0, const ::is::iclt::icenlp::core::utils::Lexicon & a1, const ::is::iclt::icenlp::core::utils::Lexicon & a2, jboolean a3) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_0df54ce1, a0.this$, a1.this$, a2.this$, a3)) {}

                    void IceDisambiguator::disAmbiguateGlobal() const
                    {
                        env->callVoidMethod(this$, mids$[mid_disAmbiguateGlobal_54c6a166]);
                    }

                    void IceDisambiguator::disAmbiguateLocal() const
                    {
                        env->callVoidMethod(this$, mids$[mid_disAmbiguateLocal_54c6a166]);
                    }

                    void IceDisambiguator::removeTags(const ::is::iclt::icenlp::core::tokenizer::IceTokenTags & a0, const ::is::iclt::icenlp::core::tokenizer::IceTokenTags & a1, const ::is::iclt::icenlp::core::tokenizer::IceTokenTags & a2, const ::is::iclt::icenlp::core::tokenizer::IceTokenTags & a3, const ::is::iclt::icenlp::core::tokenizer::IceTokenTags & a4) const
                    {
                        env->callVoidMethod(this$, mids$[mid_removeTags_a1b441dc], a0.this$, a1.this$, a2.this$, a3.this$, a4.this$);
                    }

                    void IceDisambiguator::setFullDisambiguation(jboolean a0) const
                    {
                        env->callVoidMethod(this$, mids$[mid_setFullDisambiguation_bb0c767f], a0);
                    }

                    void IceDisambiguator::setTokens(const ::java::util::ArrayList & a0) const
                    {
                        env->callVoidMethod(this$, mids$[mid_setTokens_b3f662f9], a0.this$);
                    }
                }
            }
        }
    }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace is {
    namespace iclt {
        namespace icenlp {
            namespace core {
                namespace icetagger {
                    static PyObject *t_IceDisambiguator_cast_(PyTypeObject *type, PyObject *arg);
                    static PyObject *t_IceDisambiguator_instance_(PyTypeObject *type, PyObject *arg);
                    static int t_IceDisambiguator_init_(t_IceDisambiguator *self, PyObject *args, PyObject *kwds);
                    static PyObject *t_IceDisambiguator_disAmbiguateGlobal(t_IceDisambiguator *self);
                    static PyObject *t_IceDisambiguator_disAmbiguateLocal(t_IceDisambiguator *self);
                    static PyObject *t_IceDisambiguator_removeTags(t_IceDisambiguator *self, PyObject *args);
                    static PyObject *t_IceDisambiguator_setFullDisambiguation(t_IceDisambiguator *self, PyObject *arg);
                    static PyObject *t_IceDisambiguator_setTokens(t_IceDisambiguator *self, PyObject *arg);
                    static int t_IceDisambiguator_set__fullDisambiguation(t_IceDisambiguator *self, PyObject *arg, void *data);
                    static int t_IceDisambiguator_set__tokens(t_IceDisambiguator *self, PyObject *arg, void *data);
                    static PyGetSetDef t_IceDisambiguator__fields_[] = {
                        DECLARE_SET_FIELD(t_IceDisambiguator, fullDisambiguation),
                        DECLARE_SET_FIELD(t_IceDisambiguator, tokens),
                        { NULL, NULL, NULL, NULL, NULL }
                    };

                    static PyMethodDef t_IceDisambiguator__methods_[] = {
                        DECLARE_METHOD(t_IceDisambiguator, cast_, METH_O | METH_CLASS),
                        DECLARE_METHOD(t_IceDisambiguator, instance_, METH_O | METH_CLASS),
                        DECLARE_METHOD(t_IceDisambiguator, disAmbiguateGlobal, METH_NOARGS),
                        DECLARE_METHOD(t_IceDisambiguator, disAmbiguateLocal, METH_NOARGS),
                        DECLARE_METHOD(t_IceDisambiguator, removeTags, METH_VARARGS),
                        DECLARE_METHOD(t_IceDisambiguator, setFullDisambiguation, METH_O),
                        DECLARE_METHOD(t_IceDisambiguator, setTokens, METH_O),
                        { NULL, NULL, 0, NULL }
                    };

                    DECLARE_TYPE(IceDisambiguator, t_IceDisambiguator, ::java::lang::Object, IceDisambiguator, t_IceDisambiguator_init_, 0, 0, t_IceDisambiguator__fields_, 0, 0);

                    void t_IceDisambiguator::install(PyObject *module)
                    {
                        installType(&PY_TYPE(IceDisambiguator), module, "IceDisambiguator", 0);
                    }

                    void t_IceDisambiguator::initialize(PyObject *module)
                    {
                        PyDict_SetItemString(PY_TYPE(IceDisambiguator).tp_dict, "class_", make_descriptor(IceDisambiguator::initializeClass, 1));
                        PyDict_SetItemString(PY_TYPE(IceDisambiguator).tp_dict, "wrapfn_", make_descriptor(t_IceDisambiguator::wrap_jobject));
                        PyDict_SetItemString(PY_TYPE(IceDisambiguator).tp_dict, "boxfn_", make_descriptor(boxObject));
                    }

                    static PyObject *t_IceDisambiguator_cast_(PyTypeObject *type, PyObject *arg)
                    {
                        if (!(arg = castCheck(arg, IceDisambiguator::initializeClass, 1)))
                            return NULL;
                        return t_IceDisambiguator::wrap_Object(IceDisambiguator(((t_IceDisambiguator *) arg)->object.this$));
                    }
                    static PyObject *t_IceDisambiguator_instance_(PyTypeObject *type, PyObject *arg)
                    {
                        if (!castCheck(arg, IceDisambiguator::initializeClass, 0))
                            Py_RETURN_FALSE;
                        Py_RETURN_TRUE;
                    }

                    static int t_IceDisambiguator_init_(t_IceDisambiguator *self, PyObject *args, PyObject *kwds)
                    {
                        ::is::iclt::icenlp::core::utils::IceLog a0((jobject) NULL);
                        ::is::iclt::icenlp::core::utils::Lexicon a1((jobject) NULL);
                        ::is::iclt::icenlp::core::utils::Lexicon a2((jobject) NULL);
                        jboolean a3;
                        IceDisambiguator object((jobject) NULL);

                        if (!parseArgs(args, "kkkZ", ::is::iclt::icenlp::core::utils::IceLog::initializeClass, ::is::iclt::icenlp::core::utils::Lexicon::initializeClass, ::is::iclt::icenlp::core::utils::Lexicon::initializeClass, &a0, &a1, &a2, &a3))
                        {
                            INT_CALL(object = IceDisambiguator(a0, a1, a2, a3));
                            self->object = object;
                        }
                        else
                        {
                            PyErr_SetArgsError((PyObject *) self, "__init__", args);
                            return -1;
                        }

                        return 0;
                    }

                    static PyObject *t_IceDisambiguator_disAmbiguateGlobal(t_IceDisambiguator *self)
                    {
                        OBJ_CALL(self->object.disAmbiguateGlobal());
                        Py_RETURN_NONE;
                    }

                    static PyObject *t_IceDisambiguator_disAmbiguateLocal(t_IceDisambiguator *self)
                    {
                        OBJ_CALL(self->object.disAmbiguateLocal());
                        Py_RETURN_NONE;
                    }

                    static PyObject *t_IceDisambiguator_removeTags(t_IceDisambiguator *self, PyObject *args)
                    {
                        ::is::iclt::icenlp::core::tokenizer::IceTokenTags a0((jobject) NULL);
                        ::is::iclt::icenlp::core::tokenizer::IceTokenTags a1((jobject) NULL);
                        ::is::iclt::icenlp::core::tokenizer::IceTokenTags a2((jobject) NULL);
                        ::is::iclt::icenlp::core::tokenizer::IceTokenTags a3((jobject) NULL);
                        ::is::iclt::icenlp::core::tokenizer::IceTokenTags a4((jobject) NULL);

                        if (!parseArgs(args, "kkkkk", ::is::iclt::icenlp::core::tokenizer::IceTokenTags::initializeClass, ::is::iclt::icenlp::core::tokenizer::IceTokenTags::initializeClass, ::is::iclt::icenlp::core::tokenizer::IceTokenTags::initializeClass, ::is::iclt::icenlp::core::tokenizer::IceTokenTags::initializeClass, ::is::iclt::icenlp::core::tokenizer::IceTokenTags::initializeClass, &a0, &a1, &a2, &a3, &a4))
                        {
                            OBJ_CALL(self->object.removeTags(a0, a1, a2, a3, a4));
                            Py_RETURN_NONE;
                        }

                        PyErr_SetArgsError((PyObject *) self, "removeTags", args);
                        return NULL;
                    }

                    static PyObject *t_IceDisambiguator_setFullDisambiguation(t_IceDisambiguator *self, PyObject *arg)
                    {
                        jboolean a0;

                        if (!parseArg(arg, "Z", &a0))
                        {
                            OBJ_CALL(self->object.setFullDisambiguation(a0));
                            Py_RETURN_NONE;
                        }

                        PyErr_SetArgsError((PyObject *) self, "setFullDisambiguation", arg);
                        return NULL;
                    }

                    static PyObject *t_IceDisambiguator_setTokens(t_IceDisambiguator *self, PyObject *arg)
                    {
                        ::java::util::ArrayList a0((jobject) NULL);
                        PyTypeObject **p0;

                        if (!parseArg(arg, "K", ::java::util::ArrayList::initializeClass, &a0, &p0, ::java::util::t_ArrayList::parameters_))
                        {
                            OBJ_CALL(self->object.setTokens(a0));
                            Py_RETURN_NONE;
                        }

                        PyErr_SetArgsError((PyObject *) self, "setTokens", arg);
                        return NULL;
                    }

                    static int t_IceDisambiguator_set__fullDisambiguation(t_IceDisambiguator *self, PyObject *arg, void *data)
                    {
                        {
                            jboolean value;
                            if (!parseArg(arg, "Z", &value))
                            {
                                INT_CALL(self->object.setFullDisambiguation(value));
                                return 0;
                            }
                        }
                        PyErr_SetArgsError((PyObject *) self, "fullDisambiguation", arg);
                        return -1;
                    }

                    static int t_IceDisambiguator_set__tokens(t_IceDisambiguator *self, PyObject *arg, void *data)
                    {
                        {
                            ::java::util::ArrayList value((jobject) NULL);
                            if (!parseArg(arg, "k", ::java::util::ArrayList::initializeClass, &value))
                            {
                                INT_CALL(self->object.setTokens(value));
                                return 0;
                            }
                        }
                        PyErr_SetArgsError((PyObject *) self, "tokens", arg);
                        return -1;
                    }
                }
            }
        }
    }
}
#include <jni.h>
#include "JCCEnv.h"
#include "is/iclt/icenlp/core/formald/tags/Ice1TagFormat.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace is {
    namespace iclt {
        namespace icenlp {
            namespace core {
                namespace formald {
                    namespace tags {

                        ::java::lang::Class *Ice1TagFormat::class$ = NULL;
                        jmethodID *Ice1TagFormat::mids$ = NULL;

                        jclass Ice1TagFormat::initializeClass()
                        {
                            if (!class$)
                            {

                                jclass cls = (jclass) env->findClass("is/iclt/icenlp/core/formald/tags/Ice1TagFormat");

                                mids$ = new jmethodID[max_mid];
                                mids$[mid_newInstance_f7326a91] = env->getStaticMethodID(cls, "newInstance", "()Lis/iclt/icenlp/core/formald/tags/TagFormat;");
                                mids$[mid_sampleData_14c7b5c5] = env->getMethodID(cls, "sampleData", "()Ljava/lang/String;");

                                class$ = (::java::lang::Class *) new JObject(cls);
                            }
                            return (jclass) class$->this$;
                        }

                        ::is::iclt::icenlp::core::formald::tags::TagFormat Ice1TagFormat::newInstance()
                        {
                            jclass cls = initializeClass();
                            return ::is::iclt::icenlp::core::formald::tags::TagFormat(env->callStaticObjectMethod(cls, mids$[mid_newInstance_f7326a91]));
                        }

                        ::java::lang::String Ice1TagFormat::sampleData() const
                        {
                            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_sampleData_14c7b5c5]));
                        }
                    }
                }
            }
        }
    }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace is {
    namespace iclt {
        namespace icenlp {
            namespace core {
                namespace formald {
                    namespace tags {
                        static PyObject *t_Ice1TagFormat_cast_(PyTypeObject *type, PyObject *arg);
                        static PyObject *t_Ice1TagFormat_instance_(PyTypeObject *type, PyObject *arg);
                        static PyObject *t_Ice1TagFormat_newInstance(PyTypeObject *type);
                        static PyObject *t_Ice1TagFormat_sampleData(t_Ice1TagFormat *self, PyObject *args);

                        static PyMethodDef t_Ice1TagFormat__methods_[] = {
                            DECLARE_METHOD(t_Ice1TagFormat, cast_, METH_O | METH_CLASS),
                            DECLARE_METHOD(t_Ice1TagFormat, instance_, METH_O | METH_CLASS),
                            DECLARE_METHOD(t_Ice1TagFormat, newInstance, METH_NOARGS | METH_CLASS),
                            DECLARE_METHOD(t_Ice1TagFormat, sampleData, METH_VARARGS),
                            { NULL, NULL, 0, NULL }
                        };

                        DECLARE_TYPE(Ice1TagFormat, t_Ice1TagFormat, ::is::iclt::icenlp::core::formald::tags::TagFormat, Ice1TagFormat, abstract_init, 0, 0, 0, 0, 0);

                        void t_Ice1TagFormat::install(PyObject *module)
                        {
                            installType(&PY_TYPE(Ice1TagFormat), module, "Ice1TagFormat", 0);
                        }

                        void t_Ice1TagFormat::initialize(PyObject *module)
                        {
                            PyDict_SetItemString(PY_TYPE(Ice1TagFormat).tp_dict, "class_", make_descriptor(Ice1TagFormat::initializeClass, 1));
                            PyDict_SetItemString(PY_TYPE(Ice1TagFormat).tp_dict, "wrapfn_", make_descriptor(t_Ice1TagFormat::wrap_jobject));
                            PyDict_SetItemString(PY_TYPE(Ice1TagFormat).tp_dict, "boxfn_", make_descriptor(boxObject));
                        }

                        static PyObject *t_Ice1TagFormat_cast_(PyTypeObject *type, PyObject *arg)
                        {
                            if (!(arg = castCheck(arg, Ice1TagFormat::initializeClass, 1)))
                                return NULL;
                            return t_Ice1TagFormat::wrap_Object(Ice1TagFormat(((t_Ice1TagFormat *) arg)->object.this$));
                        }
                        static PyObject *t_Ice1TagFormat_instance_(PyTypeObject *type, PyObject *arg)
                        {
                            if (!castCheck(arg, Ice1TagFormat::initializeClass, 0))
                                Py_RETURN_FALSE;
                            Py_RETURN_TRUE;
                        }

                        static PyObject *t_Ice1TagFormat_newInstance(PyTypeObject *type)
                        {
                            ::is::iclt::icenlp::core::formald::tags::TagFormat result((jobject) NULL);
                            OBJ_CALL(result = ::is::iclt::icenlp::core::formald::tags::Ice1TagFormat::newInstance());
                            return ::is::iclt::icenlp::core::formald::tags::t_TagFormat::wrap_Object(result);
                        }

                        static PyObject *t_Ice1TagFormat_sampleData(t_Ice1TagFormat *self, PyObject *args)
                        {
                            ::java::lang::String result((jobject) NULL);

                            if (!parseArgs(args, ""))
                            {
                                OBJ_CALL(result = self->object.sampleData());
                                return j2p(result);
                            }

                            return callSuper(&PY_TYPE(Ice1TagFormat), (PyObject *) self, "sampleData", args, 2);
                        }
                    }
                }
            }
        }
    }
}
#include <jni.h>
#include "JCCEnv.h"
#include "is/iclt/icenlp/core/tritagger/StateMap.h"
#include "java/util/ArrayList.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace is {
    namespace iclt {
        namespace icenlp {
            namespace core {
                namespace tritagger {

                    ::java::lang::Class *StateMap::class$ = NULL;
                    jmethodID *StateMap::mids$ = NULL;

                    jclass StateMap::initializeClass()
                    {
                        if (!class$)
                        {

                            jclass cls = (jclass) env->findClass("is/iclt/icenlp/core/tritagger/StateMap");

                            mids$ = new jmethodID[max_mid];
                            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                            mids$[mid_getFirstTag_141401b3] = env->getMethodID(cls, "getFirstTag", "(I)Ljava/lang/String;");
                            mids$[mid_getSecondTag_141401b3] = env->getMethodID(cls, "getSecondTag", "(I)Ljava/lang/String;");
                            mids$[mid_getState_141401b3] = env->getMethodID(cls, "getState", "(I)Ljava/lang/String;");
                            mids$[mid_getStateId_5fdc3f57] = env->getMethodID(cls, "getStateId", "(Ljava/lang/String;)I");
                            mids$[mid_getStateId_4a26475d] = env->getMethodID(cls, "getStateId", "(Ljava/lang/String;Ljava/lang/String;)I");
                            mids$[mid_mapTagsBigrams_b3f662e6] = env->getMethodID(cls, "mapTagsBigrams", "(Ljava/util/ArrayList;)I");
                            mids$[mid_mapTagsTrigrams_b3f662e6] = env->getMethodID(cls, "mapTagsTrigrams", "(Ljava/util/ArrayList;)I");

                            class$ = (::java::lang::Class *) new JObject(cls);
                        }
                        return (jclass) class$->this$;
                    }

                    StateMap::StateMap() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

                    ::java::lang::String StateMap::getFirstTag(jint a0) const
                    {
                        return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getFirstTag_141401b3], a0));
                    }

                    ::java::lang::String StateMap::getSecondTag(jint a0) const
                    {
                        return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getSecondTag_141401b3], a0));
                    }

                    ::java::lang::String StateMap::getState(jint a0) const
                    {
                        return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getState_141401b3], a0));
                    }

                    jint StateMap::getStateId(const ::java::lang::String & a0) const
                    {
                        return env->callIntMethod(this$, mids$[mid_getStateId_5fdc3f57], a0.this$);
                    }

                    jint StateMap::getStateId(const ::java::lang::String & a0, const ::java::lang::String & a1) const
                    {
                        return env->callIntMethod(this$, mids$[mid_getStateId_4a26475d], a0.this$, a1.this$);
                    }

                    jint StateMap::mapTagsBigrams(const ::java::util::ArrayList & a0) const
                    {
                        return env->callIntMethod(this$, mids$[mid_mapTagsBigrams_b3f662e6], a0.this$);
                    }

                    jint StateMap::mapTagsTrigrams(const ::java::util::ArrayList & a0) const
                    {
                        return env->callIntMethod(this$, mids$[mid_mapTagsTrigrams_b3f662e6], a0.this$);
                    }
                }
            }
        }
    }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace is {
    namespace iclt {
        namespace icenlp {
            namespace core {
                namespace tritagger {
                    static PyObject *t_StateMap_cast_(PyTypeObject *type, PyObject *arg);
                    static PyObject *t_StateMap_instance_(PyTypeObject *type, PyObject *arg);
                    static int t_StateMap_init_(t_StateMap *self, PyObject *args, PyObject *kwds);
                    static PyObject *t_StateMap_getFirstTag(t_StateMap *self, PyObject *arg);
                    static PyObject *t_StateMap_getSecondTag(t_StateMap *self, PyObject *arg);
                    static PyObject *t_StateMap_getState(t_StateMap *self, PyObject *arg);
                    static PyObject *t_StateMap_getStateId(t_StateMap *self, PyObject *args);
                    static PyObject *t_StateMap_mapTagsBigrams(t_StateMap *self, PyObject *arg);
                    static PyObject *t_StateMap_mapTagsTrigrams(t_StateMap *self, PyObject *arg);

                    static PyMethodDef t_StateMap__methods_[] = {
                        DECLARE_METHOD(t_StateMap, cast_, METH_O | METH_CLASS),
                        DECLARE_METHOD(t_StateMap, instance_, METH_O | METH_CLASS),
                        DECLARE_METHOD(t_StateMap, getFirstTag, METH_O),
                        DECLARE_METHOD(t_StateMap, getSecondTag, METH_O),
                        DECLARE_METHOD(t_StateMap, getState, METH_O),
                        DECLARE_METHOD(t_StateMap, getStateId, METH_VARARGS),
                        DECLARE_METHOD(t_StateMap, mapTagsBigrams, METH_O),
                        DECLARE_METHOD(t_StateMap, mapTagsTrigrams, METH_O),
                        { NULL, NULL, 0, NULL }
                    };

                    DECLARE_TYPE(StateMap, t_StateMap, ::java::lang::Object, StateMap, t_StateMap_init_, 0, 0, 0, 0, 0);

                    void t_StateMap::install(PyObject *module)
                    {
                        installType(&PY_TYPE(StateMap), module, "StateMap", 0);
                    }

                    void t_StateMap::initialize(PyObject *module)
                    {
                        PyDict_SetItemString(PY_TYPE(StateMap).tp_dict, "class_", make_descriptor(StateMap::initializeClass, 1));
                        PyDict_SetItemString(PY_TYPE(StateMap).tp_dict, "wrapfn_", make_descriptor(t_StateMap::wrap_jobject));
                        PyDict_SetItemString(PY_TYPE(StateMap).tp_dict, "boxfn_", make_descriptor(boxObject));
                    }

                    static PyObject *t_StateMap_cast_(PyTypeObject *type, PyObject *arg)
                    {
                        if (!(arg = castCheck(arg, StateMap::initializeClass, 1)))
                            return NULL;
                        return t_StateMap::wrap_Object(StateMap(((t_StateMap *) arg)->object.this$));
                    }
                    static PyObject *t_StateMap_instance_(PyTypeObject *type, PyObject *arg)
                    {
                        if (!castCheck(arg, StateMap::initializeClass, 0))
                            Py_RETURN_FALSE;
                        Py_RETURN_TRUE;
                    }

                    static int t_StateMap_init_(t_StateMap *self, PyObject *args, PyObject *kwds)
                    {
                        StateMap object((jobject) NULL);

                        INT_CALL(object = StateMap());
                        self->object = object;

                        return 0;
                    }

                    static PyObject *t_StateMap_getFirstTag(t_StateMap *self, PyObject *arg)
                    {
                        jint a0;
                        ::java::lang::String result((jobject) NULL);

                        if (!parseArg(arg, "I", &a0))
                        {
                            OBJ_CALL(result = self->object.getFirstTag(a0));
                            return j2p(result);
                        }

                        PyErr_SetArgsError((PyObject *) self, "getFirstTag", arg);
                        return NULL;
                    }

                    static PyObject *t_StateMap_getSecondTag(t_StateMap *self, PyObject *arg)
                    {
                        jint a0;
                        ::java::lang::String result((jobject) NULL);

                        if (!parseArg(arg, "I", &a0))
                        {
                            OBJ_CALL(result = self->object.getSecondTag(a0));
                            return j2p(result);
                        }

                        PyErr_SetArgsError((PyObject *) self, "getSecondTag", arg);
                        return NULL;
                    }

                    static PyObject *t_StateMap_getState(t_StateMap *self, PyObject *arg)
                    {
                        jint a0;
                        ::java::lang::String result((jobject) NULL);

                        if (!parseArg(arg, "I", &a0))
                        {
                            OBJ_CALL(result = self->object.getState(a0));
                            return j2p(result);
                        }

                        PyErr_SetArgsError((PyObject *) self, "getState", arg);
                        return NULL;
                    }

                    static PyObject *t_StateMap_getStateId(t_StateMap *self, PyObject *args)
                    {
                        switch (PyTuple_GET_SIZE(args)) {
                          case 1:
                            {
                                ::java::lang::String a0((jobject) NULL);
                                jint result;

                                if (!parseArgs(args, "s", &a0))
                                {
                                    OBJ_CALL(result = self->object.getStateId(a0));
                                    return PyInt_FromLong((long) result);
                                }
                            }
                            break;
                          case 2:
                            {
                                ::java::lang::String a0((jobject) NULL);
                                ::java::lang::String a1((jobject) NULL);
                                jint result;

                                if (!parseArgs(args, "ss", &a0, &a1))
                                {
                                    OBJ_CALL(result = self->object.getStateId(a0, a1));
                                    return PyInt_FromLong((long) result);
                                }
                            }
                        }

                        PyErr_SetArgsError((PyObject *) self, "getStateId", args);
                        return NULL;
                    }

                    static PyObject *t_StateMap_mapTagsBigrams(t_StateMap *self, PyObject *arg)
                    {
                        ::java::util::ArrayList a0((jobject) NULL);
                        PyTypeObject **p0;
                        jint result;

                        if (!parseArg(arg, "K", ::java::util::ArrayList::initializeClass, &a0, &p0, ::java::util::t_ArrayList::parameters_))
                        {
                            OBJ_CALL(result = self->object.mapTagsBigrams(a0));
                            return PyInt_FromLong((long) result);
                        }

                        PyErr_SetArgsError((PyObject *) self, "mapTagsBigrams", arg);
                        return NULL;
                    }

                    static PyObject *t_StateMap_mapTagsTrigrams(t_StateMap *self, PyObject *arg)
                    {
                        ::java::util::ArrayList a0((jobject) NULL);
                        PyTypeObject **p0;
                        jint result;

                        if (!parseArg(arg, "K", ::java::util::ArrayList::initializeClass, &a0, &p0, ::java::util::t_ArrayList::parameters_))
                        {
                            OBJ_CALL(result = self->object.mapTagsTrigrams(a0));
                            return PyInt_FromLong((long) result);
                        }

                        PyErr_SetArgsError((PyObject *) self, "mapTagsTrigrams", arg);
                        return NULL;
                    }
                }
            }
        }
    }
}
#include <jni.h>
#include "JCCEnv.h"
#include "is/iclt/icenlp/core/lemmald/PostFixer.h"
#include "is/iclt/icenlp/core/lemmald/LemmaResult.h"
#include "java/lang/Class.h"
#include "java/io/InputStream.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace is {
    namespace iclt {
        namespace icenlp {
            namespace core {
                namespace lemmald {

                    ::java::lang::Class *PostFixer::class$ = NULL;
                    jmethodID *PostFixer::mids$ = NULL;

                    jclass PostFixer::initializeClass()
                    {
                        if (!class$)
                        {

                            jclass cls = (jclass) env->findClass("is/iclt/icenlp/core/lemmald/PostFixer");

                            mids$ = new jmethodID[max_mid];
                            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                            mids$[mid_loadPostfixRules_be2e4f90] = env->getStaticMethodID(cls, "loadPostfixRules", "(Ljava/io/InputStream;)V");
                            mids$[mid_loadPostfixRules_5fdc3f48] = env->getStaticMethodID(cls, "loadPostfixRules", "(Ljava/lang/String;)V");
                            mids$[mid_postfix_56a7972e] = env->getStaticMethodID(cls, "postfix", "(Lis/iclt/icenlp/core/lemmald/LemmaResult;)V");

                            class$ = (::java::lang::Class *) new JObject(cls);
                        }
                        return (jclass) class$->this$;
                    }

                    PostFixer::PostFixer() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

                    void PostFixer::loadPostfixRules(const ::java::io::InputStream & a0)
                    {
                        jclass cls = initializeClass();
                        env->callStaticVoidMethod(cls, mids$[mid_loadPostfixRules_be2e4f90], a0.this$);
                    }

                    void PostFixer::loadPostfixRules(const ::java::lang::String & a0)
                    {
                        jclass cls = initializeClass();
                        env->callStaticVoidMethod(cls, mids$[mid_loadPostfixRules_5fdc3f48], a0.this$);
                    }

                    void PostFixer::postfix(const ::is::iclt::icenlp::core::lemmald::LemmaResult & a0)
                    {
                        jclass cls = initializeClass();
                        env->callStaticVoidMethod(cls, mids$[mid_postfix_56a7972e], a0.this$);
                    }
                }
            }
        }
    }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace is {
    namespace iclt {
        namespace icenlp {
            namespace core {
                namespace lemmald {
                    static PyObject *t_PostFixer_cast_(PyTypeObject *type, PyObject *arg);
                    static PyObject *t_PostFixer_instance_(PyTypeObject *type, PyObject *arg);
                    static int t_PostFixer_init_(t_PostFixer *self, PyObject *args, PyObject *kwds);
                    static PyObject *t_PostFixer_loadPostfixRules(PyTypeObject *type, PyObject *args);
                    static PyObject *t_PostFixer_postfix(PyTypeObject *type, PyObject *arg);

                    static PyMethodDef t_PostFixer__methods_[] = {
                        DECLARE_METHOD(t_PostFixer, cast_, METH_O | METH_CLASS),
                        DECLARE_METHOD(t_PostFixer, instance_, METH_O | METH_CLASS),
                        DECLARE_METHOD(t_PostFixer, loadPostfixRules, METH_VARARGS | METH_CLASS),
                        DECLARE_METHOD(t_PostFixer, postfix, METH_O | METH_CLASS),
                        { NULL, NULL, 0, NULL }
                    };

                    DECLARE_TYPE(PostFixer, t_PostFixer, ::java::lang::Object, PostFixer, t_PostFixer_init_, 0, 0, 0, 0, 0);

                    void t_PostFixer::install(PyObject *module)
                    {
                        installType(&PY_TYPE(PostFixer), module, "PostFixer", 0);
                    }

                    void t_PostFixer::initialize(PyObject *module)
                    {
                        PyDict_SetItemString(PY_TYPE(PostFixer).tp_dict, "class_", make_descriptor(PostFixer::initializeClass, 1));
                        PyDict_SetItemString(PY_TYPE(PostFixer).tp_dict, "wrapfn_", make_descriptor(t_PostFixer::wrap_jobject));
                        PyDict_SetItemString(PY_TYPE(PostFixer).tp_dict, "boxfn_", make_descriptor(boxObject));
                    }

                    static PyObject *t_PostFixer_cast_(PyTypeObject *type, PyObject *arg)
                    {
                        if (!(arg = castCheck(arg, PostFixer::initializeClass, 1)))
                            return NULL;
                        return t_PostFixer::wrap_Object(PostFixer(((t_PostFixer *) arg)->object.this$));
                    }
                    static PyObject *t_PostFixer_instance_(PyTypeObject *type, PyObject *arg)
                    {
                        if (!castCheck(arg, PostFixer::initializeClass, 0))
                            Py_RETURN_FALSE;
                        Py_RETURN_TRUE;
                    }

                    static int t_PostFixer_init_(t_PostFixer *self, PyObject *args, PyObject *kwds)
                    {
                        PostFixer object((jobject) NULL);

                        INT_CALL(object = PostFixer());
                        self->object = object;

                        return 0;
                    }

                    static PyObject *t_PostFixer_loadPostfixRules(PyTypeObject *type, PyObject *args)
                    {
                        switch (PyTuple_GET_SIZE(args)) {
                          case 1:
                            {
                                ::java::io::InputStream a0((jobject) NULL);

                                if (!parseArgs(args, "k", ::java::io::InputStream::initializeClass, &a0))
                                {
                                    OBJ_CALL(::is::iclt::icenlp::core::lemmald::PostFixer::loadPostfixRules(a0));
                                    Py_RETURN_NONE;
                                }
                            }
                            {
                                ::java::lang::String a0((jobject) NULL);

                                if (!parseArgs(args, "s", &a0))
                                {
                                    OBJ_CALL(::is::iclt::icenlp::core::lemmald::PostFixer::loadPostfixRules(a0));
                                    Py_RETURN_NONE;
                                }
                            }
                        }

                        PyErr_SetArgsError(type, "loadPostfixRules", args);
                        return NULL;
                    }

                    static PyObject *t_PostFixer_postfix(PyTypeObject *type, PyObject *arg)
                    {
                        ::is::iclt::icenlp::core::lemmald::LemmaResult a0((jobject) NULL);

                        if (!parseArg(arg, "k", ::is::iclt::icenlp::core::lemmald::LemmaResult::initializeClass, &a0))
                        {
                            OBJ_CALL(::is::iclt::icenlp::core::lemmald::PostFixer::postfix(a0));
                            Py_RETURN_NONE;
                        }

                        PyErr_SetArgsError(type, "postfix", arg);
                        return NULL;
                    }
                }
            }
        }
    }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/lang/Throwable.h"
#include "java/io/PrintStream.h"
#include "java/lang/StackTraceElement.h"
#include "java/io/PrintWriter.h"
#include "java/io/Serializable.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace java {
    namespace lang {

        ::java::lang::Class *Throwable::class$ = NULL;
        jmethodID *Throwable::mids$ = NULL;

        jclass Throwable::initializeClass()
        {
            if (!class$)
            {

                jclass cls = (jclass) env->findClass("java/lang/Throwable");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
                mids$[mid_init$_01646a2e] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Ljava/lang/Throwable;)V");
                mids$[mid_fillInStackTrace_9a29189d] = env->getMethodID(cls, "fillInStackTrace", "()Ljava/lang/Throwable;");
                mids$[mid_getCause_9a29189d] = env->getMethodID(cls, "getCause", "()Ljava/lang/Throwable;");
                mids$[mid_getLocalizedMessage_14c7b5c5] = env->getMethodID(cls, "getLocalizedMessage", "()Ljava/lang/String;");
                mids$[mid_getMessage_14c7b5c5] = env->getMethodID(cls, "getMessage", "()Ljava/lang/String;");
                mids$[mid_getStackTrace_25f1f6aa] = env->getMethodID(cls, "getStackTrace", "()[Ljava/lang/StackTraceElement;");
                mids$[mid_initCause_dabad90f] = env->getMethodID(cls, "initCause", "(Ljava/lang/Throwable;)Ljava/lang/Throwable;");
                mids$[mid_printStackTrace_54c6a166] = env->getMethodID(cls, "printStackTrace", "()V");
                mids$[mid_printStackTrace_1b7c898b] = env->getMethodID(cls, "printStackTrace", "(Ljava/io/PrintStream;)V");
                mids$[mid_printStackTrace_82fffd94] = env->getMethodID(cls, "printStackTrace", "(Ljava/io/PrintWriter;)V");
                mids$[mid_setStackTrace_3d8798bf] = env->getMethodID(cls, "setStackTrace", "([Ljava/lang/StackTraceElement;)V");
                mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

                class$ = (::java::lang::Class *) new JObject(cls);
            }
            return (jclass) class$->this$;
        }

        Throwable::Throwable() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        Throwable::Throwable(const ::java::lang::String & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}

        Throwable::Throwable(const ::java::lang::String & a0, const Throwable & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_01646a2e, a0.this$, a1.this$)) {}

        Throwable Throwable::fillInStackTrace() const
        {
            return Throwable(env->callObjectMethod(this$, mids$[mid_fillInStackTrace_9a29189d]));
        }

        Throwable Throwable::getCause() const
        {
            return Throwable(env->callObjectMethod(this$, mids$[mid_getCause_9a29189d]));
        }

        ::java::lang::String Throwable::getLocalizedMessage() const
        {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getLocalizedMessage_14c7b5c5]));
        }

        ::java::lang::String Throwable::getMessage() const
        {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getMessage_14c7b5c5]));
        }

        JArray< ::java::lang::StackTraceElement > Throwable::getStackTrace() const
        {
            return JArray< ::java::lang::StackTraceElement >(env->callObjectMethod(this$, mids$[mid_getStackTrace_25f1f6aa]));
        }

        Throwable Throwable::initCause(const Throwable & a0) const
        {
            return Throwable(env->callObjectMethod(this$, mids$[mid_initCause_dabad90f], a0.this$));
        }

        void Throwable::printStackTrace() const
        {
            env->callVoidMethod(this$, mids$[mid_printStackTrace_54c6a166]);
        }

        void Throwable::printStackTrace(const ::java::io::PrintStream & a0) const
        {
            env->callVoidMethod(this$, mids$[mid_printStackTrace_1b7c898b], a0.this$);
        }

        void Throwable::printStackTrace(const ::java::io::PrintWriter & a0) const
        {
            env->callVoidMethod(this$, mids$[mid_printStackTrace_82fffd94], a0.this$);
        }

        void Throwable::setStackTrace(const JArray< ::java::lang::StackTraceElement > & a0) const
        {
            env->callVoidMethod(this$, mids$[mid_setStackTrace_3d8798bf], a0.this$);
        }

        ::java::lang::String Throwable::toString() const
        {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }
    }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
    namespace lang {
        static PyObject *t_Throwable_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Throwable_instance_(PyTypeObject *type, PyObject *arg);
        static int t_Throwable_init_(t_Throwable *self, PyObject *args, PyObject *kwds);
        static PyObject *t_Throwable_fillInStackTrace(t_Throwable *self);
        static PyObject *t_Throwable_getCause(t_Throwable *self);
        static PyObject *t_Throwable_getLocalizedMessage(t_Throwable *self);
        static PyObject *t_Throwable_getMessage(t_Throwable *self);
        static PyObject *t_Throwable_getStackTrace(t_Throwable *self);
        static PyObject *t_Throwable_initCause(t_Throwable *self, PyObject *arg);
        static PyObject *t_Throwable_printStackTrace(t_Throwable *self, PyObject *args);
        static PyObject *t_Throwable_setStackTrace(t_Throwable *self, PyObject *arg);
        static PyObject *t_Throwable_toString(t_Throwable *self, PyObject *args);
        static PyObject *t_Throwable_get__cause(t_Throwable *self, void *data);
        static PyObject *t_Throwable_get__localizedMessage(t_Throwable *self, void *data);
        static PyObject *t_Throwable_get__message(t_Throwable *self, void *data);
        static PyObject *t_Throwable_get__stackTrace(t_Throwable *self, void *data);
        static int t_Throwable_set__stackTrace(t_Throwable *self, PyObject *arg, void *data);
        static PyGetSetDef t_Throwable__fields_[] = {
            DECLARE_GET_FIELD(t_Throwable, cause),
            DECLARE_GET_FIELD(t_Throwable, localizedMessage),
            DECLARE_GET_FIELD(t_Throwable, message),
            DECLARE_GETSET_FIELD(t_Throwable, stackTrace),
            { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_Throwable__methods_[] = {
            DECLARE_METHOD(t_Throwable, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Throwable, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Throwable, fillInStackTrace, METH_NOARGS),
            DECLARE_METHOD(t_Throwable, getCause, METH_NOARGS),
            DECLARE_METHOD(t_Throwable, getLocalizedMessage, METH_NOARGS),
            DECLARE_METHOD(t_Throwable, getMessage, METH_NOARGS),
            DECLARE_METHOD(t_Throwable, getStackTrace, METH_NOARGS),
            DECLARE_METHOD(t_Throwable, initCause, METH_O),
            DECLARE_METHOD(t_Throwable, printStackTrace, METH_VARARGS),
            DECLARE_METHOD(t_Throwable, setStackTrace, METH_O),
            DECLARE_METHOD(t_Throwable, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(Throwable, t_Throwable, ::java::lang::Object, Throwable, t_Throwable_init_, 0, 0, t_Throwable__fields_, 0, 0);

        void t_Throwable::install(PyObject *module)
        {
            installType(&PY_TYPE(Throwable), module, "Throwable", 0);
        }

        void t_Throwable::initialize(PyObject *module)
        {
            PyDict_SetItemString(PY_TYPE(Throwable).tp_dict, "class_", make_descriptor(Throwable::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Throwable).tp_dict, "wrapfn_", make_descriptor(t_Throwable::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Throwable).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_Throwable_cast_(PyTypeObject *type, PyObject *arg)
        {
            if (!(arg = castCheck(arg, Throwable::initializeClass, 1)))
                return NULL;
            return t_Throwable::wrap_Object(Throwable(((t_Throwable *) arg)->object.this$));
        }
        static PyObject *t_Throwable_instance_(PyTypeObject *type, PyObject *arg)
        {
            if (!castCheck(arg, Throwable::initializeClass, 0))
                Py_RETURN_FALSE;
            Py_RETURN_TRUE;
        }

        static int t_Throwable_init_(t_Throwable *self, PyObject *args, PyObject *kwds)
        {
            switch (PyTuple_GET_SIZE(args)) {
              case 0:
                {
                    Throwable object((jobject) NULL);

                    INT_CALL(object = Throwable());
                    self->object = object;
                    break;
                }
                goto err;
              case 1:
                {
                    ::java::lang::String a0((jobject) NULL);
                    Throwable object((jobject) NULL);

                    if (!parseArgs(args, "s", &a0))
                    {
                        INT_CALL(object = Throwable(a0));
                        self->object = object;
                        break;
                    }
                }
                goto err;
              case 2:
                {
                    ::java::lang::String a0((jobject) NULL);
                    Throwable a1((jobject) NULL);
                    Throwable object((jobject) NULL);

                    if (!parseArgs(args, "sk", Throwable::initializeClass, &a0, &a1))
                    {
                        INT_CALL(object = Throwable(a0, a1));
                        self->object = object;
                        break;
                    }
                }
              default:
              err:
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
            }

            return 0;
        }

        static PyObject *t_Throwable_fillInStackTrace(t_Throwable *self)
        {
            Throwable result((jobject) NULL);
            OBJ_CALL(result = self->object.fillInStackTrace());
            return t_Throwable::wrap_Object(result);
        }

        static PyObject *t_Throwable_getCause(t_Throwable *self)
        {
            Throwable result((jobject) NULL);
            OBJ_CALL(result = self->object.getCause());
            return t_Throwable::wrap_Object(result);
        }

        static PyObject *t_Throwable_getLocalizedMessage(t_Throwable *self)
        {
            ::java::lang::String result((jobject) NULL);
            OBJ_CALL(result = self->object.getLocalizedMessage());
            return j2p(result);
        }

        static PyObject *t_Throwable_getMessage(t_Throwable *self)
        {
            ::java::lang::String result((jobject) NULL);
            OBJ_CALL(result = self->object.getMessage());
            return j2p(result);
        }

        static PyObject *t_Throwable_getStackTrace(t_Throwable *self)
        {
            JArray< ::java::lang::StackTraceElement > result((jobject) NULL);
            OBJ_CALL(result = self->object.getStackTrace());
            return JArray<jobject>(result.this$).wrap(::java::lang::t_StackTraceElement::wrap_jobject);
        }

        static PyObject *t_Throwable_initCause(t_Throwable *self, PyObject *arg)
        {
            Throwable a0((jobject) NULL);
            Throwable result((jobject) NULL);

            if (!parseArg(arg, "k", Throwable::initializeClass, &a0))
            {
                OBJ_CALL(result = self->object.initCause(a0));
                return t_Throwable::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "initCause", arg);
            return NULL;
        }

        static PyObject *t_Throwable_printStackTrace(t_Throwable *self, PyObject *args)
        {
            switch (PyTuple_GET_SIZE(args)) {
              case 0:
                {
                    OBJ_CALL(self->object.printStackTrace());
                    Py_RETURN_NONE;
                }
                break;
              case 1:
                {
                    ::java::io::PrintStream a0((jobject) NULL);

                    if (!parseArgs(args, "k", ::java::io::PrintStream::initializeClass, &a0))
                    {
                        OBJ_CALL(self->object.printStackTrace(a0));
                        Py_RETURN_NONE;
                    }
                }
                {
                    ::java::io::PrintWriter a0((jobject) NULL);

                    if (!parseArgs(args, "k", ::java::io::PrintWriter::initializeClass, &a0))
                    {
                        OBJ_CALL(self->object.printStackTrace(a0));
                        Py_RETURN_NONE;
                    }
                }
            }

            PyErr_SetArgsError((PyObject *) self, "printStackTrace", args);
            return NULL;
        }

        static PyObject *t_Throwable_setStackTrace(t_Throwable *self, PyObject *arg)
        {
            JArray< ::java::lang::StackTraceElement > a0((jobject) NULL);

            if (!parseArg(arg, "[k", ::java::lang::StackTraceElement::initializeClass, &a0))
            {
                OBJ_CALL(self->object.setStackTrace(a0));
                Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setStackTrace", arg);
            return NULL;
        }

        static PyObject *t_Throwable_toString(t_Throwable *self, PyObject *args)
        {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
                OBJ_CALL(result = self->object.toString());
                return j2p(result);
            }

            return callSuper(&PY_TYPE(Throwable), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_Throwable_get__cause(t_Throwable *self, void *data)
        {
            Throwable value((jobject) NULL);
            OBJ_CALL(value = self->object.getCause());
            return t_Throwable::wrap_Object(value);
        }

        static PyObject *t_Throwable_get__localizedMessage(t_Throwable *self, void *data)
        {
            ::java::lang::String value((jobject) NULL);
            OBJ_CALL(value = self->object.getLocalizedMessage());
            return j2p(value);
        }

        static PyObject *t_Throwable_get__message(t_Throwable *self, void *data)
        {
            ::java::lang::String value((jobject) NULL);
            OBJ_CALL(value = self->object.getMessage());
            return j2p(value);
        }

        static PyObject *t_Throwable_get__stackTrace(t_Throwable *self, void *data)
        {
            JArray< ::java::lang::StackTraceElement > value((jobject) NULL);
            OBJ_CALL(value = self->object.getStackTrace());
            return JArray<jobject>(value.this$).wrap(::java::lang::t_StackTraceElement::wrap_jobject);
        }
        static int t_Throwable_set__stackTrace(t_Throwable *self, PyObject *arg, void *data)
        {
            {
                JArray< ::java::lang::StackTraceElement > value((jobject) NULL);
                if (!parseArg(arg, "[k", ::java::lang::StackTraceElement::initializeClass, &value))
                {
                    INT_CALL(self->object.setStackTrace(value));
                    return 0;
                }
            }
            PyErr_SetArgsError((PyObject *) self, "stackTrace", arg);
            return -1;
        }
    }
}
#include <jni.h>
#include "JCCEnv.h"
#include "is/iclt/icenlp/core/formald/tagsets/Tagset.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace is {
    namespace iclt {
        namespace icenlp {
            namespace core {
                namespace formald {
                    namespace tagsets {

                        ::java::lang::Class *Tagset::class$ = NULL;
                        jmethodID *Tagset::mids$ = NULL;
                        Tagset *Tagset::APERTIUM = NULL;
                        Tagset *Tagset::IFD = NULL;

                        jclass Tagset::initializeClass()
                        {
                            if (!class$)
                            {

                                jclass cls = (jclass) env->findClass("is/iclt/icenlp/core/formald/tagsets/Tagset");

                                mids$ = new jmethodID[max_mid];
                                mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                                mids$[mid_getDefault_cc201b9a] = env->getStaticMethodID(cls, "getDefault", "()Lis/iclt/icenlp/core/formald/tagsets/Tagset;");
                                mids$[mid_getStandardTag_97a5258f] = env->getMethodID(cls, "getStandardTag", "(Ljava/lang/String;)Ljava/lang/String;");
                                mids$[mid_getTag_97a5258f] = env->getMethodID(cls, "getTag", "(Ljava/lang/String;)Ljava/lang/String;");

                                class$ = (::java::lang::Class *) new JObject(cls);
                                cls = (jclass) class$->this$;

                                APERTIUM = new Tagset(env->getStaticObjectField(cls, "APERTIUM", "Lis/iclt/icenlp/core/formald/tagsets/Tagset;"));
                                IFD = new Tagset(env->getStaticObjectField(cls, "IFD", "Lis/iclt/icenlp/core/formald/tagsets/Tagset;"));
                            }
                            return (jclass) class$->this$;
                        }

                        Tagset::Tagset() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

                        Tagset Tagset::getDefault()
                        {
                            jclass cls = initializeClass();
                            return Tagset(env->callStaticObjectMethod(cls, mids$[mid_getDefault_cc201b9a]));
                        }

                        ::java::lang::String Tagset::getStandardTag(const ::java::lang::String & a0) const
                        {
                            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getStandardTag_97a5258f], a0.this$));
                        }

                        ::java::lang::String Tagset::getTag(const ::java::lang::String & a0) const
                        {
                            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getTag_97a5258f], a0.this$));
                        }
                    }
                }
            }
        }
    }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace is {
    namespace iclt {
        namespace icenlp {
            namespace core {
                namespace formald {
                    namespace tagsets {
                        static PyObject *t_Tagset_cast_(PyTypeObject *type, PyObject *arg);
                        static PyObject *t_Tagset_instance_(PyTypeObject *type, PyObject *arg);
                        static int t_Tagset_init_(t_Tagset *self, PyObject *args, PyObject *kwds);
                        static PyObject *t_Tagset_getDefault(PyTypeObject *type);
                        static PyObject *t_Tagset_getStandardTag(t_Tagset *self, PyObject *arg);
                        static PyObject *t_Tagset_getTag(t_Tagset *self, PyObject *arg);
                        static PyObject *t_Tagset_get__default(t_Tagset *self, void *data);
                        static PyGetSetDef t_Tagset__fields_[] = {
                            DECLARE_GET_FIELD(t_Tagset, default),
                            { NULL, NULL, NULL, NULL, NULL }
                        };

                        static PyMethodDef t_Tagset__methods_[] = {
                            DECLARE_METHOD(t_Tagset, cast_, METH_O | METH_CLASS),
                            DECLARE_METHOD(t_Tagset, instance_, METH_O | METH_CLASS),
                            DECLARE_METHOD(t_Tagset, getDefault, METH_NOARGS | METH_CLASS),
                            DECLARE_METHOD(t_Tagset, getStandardTag, METH_O),
                            DECLARE_METHOD(t_Tagset, getTag, METH_O),
                            { NULL, NULL, 0, NULL }
                        };

                        DECLARE_TYPE(Tagset, t_Tagset, ::java::lang::Object, Tagset, t_Tagset_init_, 0, 0, t_Tagset__fields_, 0, 0);

                        void t_Tagset::install(PyObject *module)
                        {
                            installType(&PY_TYPE(Tagset), module, "Tagset", 0);
                        }

                        void t_Tagset::initialize(PyObject *module)
                        {
                            PyDict_SetItemString(PY_TYPE(Tagset).tp_dict, "class_", make_descriptor(Tagset::initializeClass, 1));
                            PyDict_SetItemString(PY_TYPE(Tagset).tp_dict, "wrapfn_", make_descriptor(t_Tagset::wrap_jobject));
                            PyDict_SetItemString(PY_TYPE(Tagset).tp_dict, "boxfn_", make_descriptor(boxObject));
                            Tagset::initializeClass();
                            PyDict_SetItemString(PY_TYPE(Tagset).tp_dict, "APERTIUM", make_descriptor(t_Tagset::wrap_Object(*Tagset::APERTIUM)));
                            PyDict_SetItemString(PY_TYPE(Tagset).tp_dict, "IFD", make_descriptor(t_Tagset::wrap_Object(*Tagset::IFD)));
                        }

                        static PyObject *t_Tagset_cast_(PyTypeObject *type, PyObject *arg)
                        {
                            if (!(arg = castCheck(arg, Tagset::initializeClass, 1)))
                                return NULL;
                            return t_Tagset::wrap_Object(Tagset(((t_Tagset *) arg)->object.this$));
                        }
                        static PyObject *t_Tagset_instance_(PyTypeObject *type, PyObject *arg)
                        {
                            if (!castCheck(arg, Tagset::initializeClass, 0))
                                Py_RETURN_FALSE;
                            Py_RETURN_TRUE;
                        }

                        static int t_Tagset_init_(t_Tagset *self, PyObject *args, PyObject *kwds)
                        {
                            Tagset object((jobject) NULL);

                            INT_CALL(object = Tagset());
                            self->object = object;

                            return 0;
                        }

                        static PyObject *t_Tagset_getDefault(PyTypeObject *type)
                        {
                            Tagset result((jobject) NULL);
                            OBJ_CALL(result = ::is::iclt::icenlp::core::formald::tagsets::Tagset::getDefault());
                            return t_Tagset::wrap_Object(result);
                        }

                        static PyObject *t_Tagset_getStandardTag(t_Tagset *self, PyObject *arg)
                        {
                            ::java::lang::String a0((jobject) NULL);
                            ::java::lang::String result((jobject) NULL);

                            if (!parseArg(arg, "s", &a0))
                            {
                                OBJ_CALL(result = self->object.getStandardTag(a0));
                                return j2p(result);
                            }

                            PyErr_SetArgsError((PyObject *) self, "getStandardTag", arg);
                            return NULL;
                        }

                        static PyObject *t_Tagset_getTag(t_Tagset *self, PyObject *arg)
                        {
                            ::java::lang::String a0((jobject) NULL);
                            ::java::lang::String result((jobject) NULL);

                            if (!parseArg(arg, "s", &a0))
                            {
                                OBJ_CALL(result = self->object.getTag(a0));
                                return j2p(result);
                            }

                            PyErr_SetArgsError((PyObject *) self, "getTag", arg);
                            return NULL;
                        }

                        static PyObject *t_Tagset_get__default(t_Tagset *self, void *data)
                        {
                            Tagset value((jobject) NULL);
                            OBJ_CALL(value = self->object.getDefault());
                            return t_Tagset::wrap_Object(value);
                        }
                    }
                }
            }
        }
    }
}
#include <jni.h>
#include "JCCEnv.h"
#include "is/iclt/icenlp/core/tokenizer/IceTokenTags$UnknownType.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace is {
    namespace iclt {
        namespace icenlp {
            namespace core {
                namespace tokenizer {

                    ::java::lang::Class *IceTokenTags$UnknownType::class$ = NULL;
                    jmethodID *IceTokenTags$UnknownType::mids$ = NULL;
                    IceTokenTags$UnknownType *IceTokenTags$UnknownType::ending = NULL;
                    IceTokenTags$UnknownType *IceTokenTags$UnknownType::guessed = NULL;
                    IceTokenTags$UnknownType *IceTokenTags$UnknownType::morpho = NULL;
                    IceTokenTags$UnknownType *IceTokenTags$UnknownType::none = NULL;
                    IceTokenTags$UnknownType *IceTokenTags$UnknownType::properNoun = NULL;

                    jclass IceTokenTags$UnknownType::initializeClass()
                    {
                        if (!class$)
                        {

                            jclass cls = (jclass) env->findClass("is/iclt/icenlp/core/tokenizer/IceTokenTags$UnknownType");

                            mids$ = new jmethodID[max_mid];
                            mids$[mid_valueOf_65d2bc21] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;)Lis/iclt/icenlp/core/tokenizer/IceTokenTags$UnknownType;");
                            mids$[mid_values_4ef5d6c7] = env->getStaticMethodID(cls, "values", "()[Lis/iclt/icenlp/core/tokenizer/IceTokenTags$UnknownType;");

                            class$ = (::java::lang::Class *) new JObject(cls);
                            cls = (jclass) class$->this$;

                            ending = new IceTokenTags$UnknownType(env->getStaticObjectField(cls, "ending", "Lis/iclt/icenlp/core/tokenizer/IceTokenTags$UnknownType;"));
                            guessed = new IceTokenTags$UnknownType(env->getStaticObjectField(cls, "guessed", "Lis/iclt/icenlp/core/tokenizer/IceTokenTags$UnknownType;"));
                            morpho = new IceTokenTags$UnknownType(env->getStaticObjectField(cls, "morpho", "Lis/iclt/icenlp/core/tokenizer/IceTokenTags$UnknownType;"));
                            none = new IceTokenTags$UnknownType(env->getStaticObjectField(cls, "none", "Lis/iclt/icenlp/core/tokenizer/IceTokenTags$UnknownType;"));
                            properNoun = new IceTokenTags$UnknownType(env->getStaticObjectField(cls, "properNoun", "Lis/iclt/icenlp/core/tokenizer/IceTokenTags$UnknownType;"));
                        }
                        return (jclass) class$->this$;
                    }

                    IceTokenTags$UnknownType IceTokenTags$UnknownType::valueOf(const ::java::lang::String & a0)
                    {
                        jclass cls = initializeClass();
                        return IceTokenTags$UnknownType(env->callStaticObjectMethod(cls, mids$[mid_valueOf_65d2bc21], a0.this$));
                    }

                    JArray< IceTokenTags$UnknownType > IceTokenTags$UnknownType::values()
                    {
                        jclass cls = initializeClass();
                        return JArray< IceTokenTags$UnknownType >(env->callStaticObjectMethod(cls, mids$[mid_values_4ef5d6c7]));
                    }
                }
            }
        }
    }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace is {
    namespace iclt {
        namespace icenlp {
            namespace core {
                namespace tokenizer {
                    static PyObject *t_IceTokenTags$UnknownType_cast_(PyTypeObject *type, PyObject *arg);
                    static PyObject *t_IceTokenTags$UnknownType_instance_(PyTypeObject *type, PyObject *arg);
                    static PyObject *t_IceTokenTags$UnknownType_valueOf(PyTypeObject *type, PyObject *args);
                    static PyObject *t_IceTokenTags$UnknownType_values(PyTypeObject *type);

                    static PyMethodDef t_IceTokenTags$UnknownType__methods_[] = {
                        DECLARE_METHOD(t_IceTokenTags$UnknownType, cast_, METH_O | METH_CLASS),
                        DECLARE_METHOD(t_IceTokenTags$UnknownType, instance_, METH_O | METH_CLASS),
                        DECLARE_METHOD(t_IceTokenTags$UnknownType, valueOf, METH_VARARGS | METH_CLASS),
                        DECLARE_METHOD(t_IceTokenTags$UnknownType, values, METH_NOARGS | METH_CLASS),
                        { NULL, NULL, 0, NULL }
                    };

                    DECLARE_TYPE(IceTokenTags$UnknownType, t_IceTokenTags$UnknownType, ::java::lang::Enum, IceTokenTags$UnknownType, abstract_init, 0, 0, 0, 0, 0);

                    void t_IceTokenTags$UnknownType::install(PyObject *module)
                    {
                        installType(&PY_TYPE(IceTokenTags$UnknownType), module, "IceTokenTags$UnknownType", 0);
                    }

                    void t_IceTokenTags$UnknownType::initialize(PyObject *module)
                    {
                        PyDict_SetItemString(PY_TYPE(IceTokenTags$UnknownType).tp_dict, "class_", make_descriptor(IceTokenTags$UnknownType::initializeClass, 1));
                        PyDict_SetItemString(PY_TYPE(IceTokenTags$UnknownType).tp_dict, "wrapfn_", make_descriptor(t_IceTokenTags$UnknownType::wrap_jobject));
                        PyDict_SetItemString(PY_TYPE(IceTokenTags$UnknownType).tp_dict, "boxfn_", make_descriptor(boxObject));
                        IceTokenTags$UnknownType::initializeClass();
                        PyDict_SetItemString(PY_TYPE(IceTokenTags$UnknownType).tp_dict, "ending", make_descriptor(t_IceTokenTags$UnknownType::wrap_Object(*IceTokenTags$UnknownType::ending)));
                        PyDict_SetItemString(PY_TYPE(IceTokenTags$UnknownType).tp_dict, "guessed", make_descriptor(t_IceTokenTags$UnknownType::wrap_Object(*IceTokenTags$UnknownType::guessed)));
                        PyDict_SetItemString(PY_TYPE(IceTokenTags$UnknownType).tp_dict, "morpho", make_descriptor(t_IceTokenTags$UnknownType::wrap_Object(*IceTokenTags$UnknownType::morpho)));
                        PyDict_SetItemString(PY_TYPE(IceTokenTags$UnknownType).tp_dict, "none", make_descriptor(t_IceTokenTags$UnknownType::wrap_Object(*IceTokenTags$UnknownType::none)));
                        PyDict_SetItemString(PY_TYPE(IceTokenTags$UnknownType).tp_dict, "properNoun", make_descriptor(t_IceTokenTags$UnknownType::wrap_Object(*IceTokenTags$UnknownType::properNoun)));
                    }

                    static PyObject *t_IceTokenTags$UnknownType_cast_(PyTypeObject *type, PyObject *arg)
                    {
                        if (!(arg = castCheck(arg, IceTokenTags$UnknownType::initializeClass, 1)))
                            return NULL;
                        return t_IceTokenTags$UnknownType::wrap_Object(IceTokenTags$UnknownType(((t_IceTokenTags$UnknownType *) arg)->object.this$));
                    }
                    static PyObject *t_IceTokenTags$UnknownType_instance_(PyTypeObject *type, PyObject *arg)
                    {
                        if (!castCheck(arg, IceTokenTags$UnknownType::initializeClass, 0))
                            Py_RETURN_FALSE;
                        Py_RETURN_TRUE;
                    }

                    static PyObject *t_IceTokenTags$UnknownType_valueOf(PyTypeObject *type, PyObject *args)
                    {
                        ::java::lang::String a0((jobject) NULL);
                        IceTokenTags$UnknownType result((jobject) NULL);

                        if (!parseArgs(args, "s", &a0))
                        {
                            OBJ_CALL(result = ::is::iclt::icenlp::core::tokenizer::IceTokenTags$UnknownType::valueOf(a0));
                            return t_IceTokenTags$UnknownType::wrap_Object(result);
                        }

                        return callSuper(type, "valueOf", args, 2);
                    }

                    static PyObject *t_IceTokenTags$UnknownType_values(PyTypeObject *type)
                    {
                        JArray< IceTokenTags$UnknownType > result((jobject) NULL);
                        OBJ_CALL(result = ::is::iclt::icenlp::core::tokenizer::IceTokenTags$UnknownType::values());
                        return JArray<jobject>(result.this$).wrap(t_IceTokenTags$UnknownType::wrap_jobject);
                    }
                }
            }
        }
    }
}
#include <jni.h>
#include "JCCEnv.h"
#include "is/iclt/icenlp/core/icemorphy/MorphoRuleVerbFinite.h"
#include "is/iclt/icenlp/core/icemorphy/MorphoRuleVerb$Mood.h"
#include "is/iclt/icenlp/core/icemorphy/IceMorphy$MorphoClass.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "is/iclt/icenlp/core/icemorphy/MorphoRuleVerb$Voice.h"
#include "JArray.h"

namespace is {
    namespace iclt {
        namespace icenlp {
            namespace core {
                namespace icemorphy {

                    ::java::lang::Class *MorphoRuleVerbFinite::class$ = NULL;
                    jmethodID *MorphoRuleVerbFinite::mids$ = NULL;

                    jclass MorphoRuleVerbFinite::initializeClass()
                    {
                        if (!class$)
                        {

                            jclass cls = (jclass) env->findClass("is/iclt/icenlp/core/icemorphy/MorphoRuleVerbFinite");

                            mids$ = new jmethodID[max_mid];
                            mids$[mid_init$_8f0e2a90] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;ILis/iclt/icenlp/core/icemorphy/IceMorphy$MorphoClass;Lis/iclt/icenlp/core/icemorphy/MorphoRuleVerb$Mood;Lis/iclt/icenlp/core/icemorphy/MorphoRuleVerb$Voice;CCCCC)V");
                            mids$[mid_init$_66cab6fd] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;ILis/iclt/icenlp/core/icemorphy/IceMorphy$MorphoClass;Lis/iclt/icenlp/core/icemorphy/MorphoRuleVerb$Mood;Lis/iclt/icenlp/core/icemorphy/MorphoRuleVerb$Voice;CCCCCZ)V");

                            class$ = (::java::lang::Class *) new JObject(cls);
                        }
                        return (jclass) class$->this$;
                    }

                    MorphoRuleVerbFinite::MorphoRuleVerbFinite(const ::java::lang::String & a0, jint a1, const ::is::iclt::icenlp::core::icemorphy::IceMorphy$MorphoClass & a2, const ::is::iclt::icenlp::core::icemorphy::MorphoRuleVerb$Mood & a3, const ::is::iclt::icenlp::core::icemorphy::MorphoRuleVerb$Voice & a4, jchar a5, jchar a6, jchar a7, jchar a8, jchar a9) : ::is::iclt::icenlp::core::icemorphy::MorphoRuleVerb(env->newObject(initializeClass, &mids$, mid_init$_8f0e2a90, a0.this$, a1, a2.this$, a3.this$, a4.this$, a5, a6, a7, a8, a9)) {}

                    MorphoRuleVerbFinite::MorphoRuleVerbFinite(const ::java::lang::String & a0, jint a1, const ::is::iclt::icenlp::core::icemorphy::IceMorphy$MorphoClass & a2, const ::is::iclt::icenlp::core::icemorphy::MorphoRuleVerb$Mood & a3, const ::is::iclt::icenlp::core::icemorphy::MorphoRuleVerb$Voice & a4, jchar a5, jchar a6, jchar a7, jchar a8, jchar a9, jboolean a10) : ::is::iclt::icenlp::core::icemorphy::MorphoRuleVerb(env->newObject(initializeClass, &mids$, mid_init$_66cab6fd, a0.this$, a1, a2.this$, a3.this$, a4.this$, a5, a6, a7, a8, a9, a10)) {}
                }
            }
        }
    }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace is {
    namespace iclt {
        namespace icenlp {
            namespace core {
                namespace icemorphy {
                    static PyObject *t_MorphoRuleVerbFinite_cast_(PyTypeObject *type, PyObject *arg);
                    static PyObject *t_MorphoRuleVerbFinite_instance_(PyTypeObject *type, PyObject *arg);
                    static int t_MorphoRuleVerbFinite_init_(t_MorphoRuleVerbFinite *self, PyObject *args, PyObject *kwds);

                    static PyMethodDef t_MorphoRuleVerbFinite__methods_[] = {
                        DECLARE_METHOD(t_MorphoRuleVerbFinite, cast_, METH_O | METH_CLASS),
                        DECLARE_METHOD(t_MorphoRuleVerbFinite, instance_, METH_O | METH_CLASS),
                        { NULL, NULL, 0, NULL }
                    };

                    DECLARE_TYPE(MorphoRuleVerbFinite, t_MorphoRuleVerbFinite, ::is::iclt::icenlp::core::icemorphy::MorphoRuleVerb, MorphoRuleVerbFinite, t_MorphoRuleVerbFinite_init_, 0, 0, 0, 0, 0);

                    void t_MorphoRuleVerbFinite::install(PyObject *module)
                    {
                        installType(&PY_TYPE(MorphoRuleVerbFinite), module, "MorphoRuleVerbFinite", 0);
                    }

                    void t_MorphoRuleVerbFinite::initialize(PyObject *module)
                    {
                        PyDict_SetItemString(PY_TYPE(MorphoRuleVerbFinite).tp_dict, "class_", make_descriptor(MorphoRuleVerbFinite::initializeClass, 1));
                        PyDict_SetItemString(PY_TYPE(MorphoRuleVerbFinite).tp_dict, "wrapfn_", make_descriptor(t_MorphoRuleVerbFinite::wrap_jobject));
                        PyDict_SetItemString(PY_TYPE(MorphoRuleVerbFinite).tp_dict, "boxfn_", make_descriptor(boxObject));
                    }

                    static PyObject *t_MorphoRuleVerbFinite_cast_(PyTypeObject *type, PyObject *arg)
                    {
                        if (!(arg = castCheck(arg, MorphoRuleVerbFinite::initializeClass, 1)))
                            return NULL;
                        return t_MorphoRuleVerbFinite::wrap_Object(MorphoRuleVerbFinite(((t_MorphoRuleVerbFinite *) arg)->object.this$));
                    }
                    static PyObject *t_MorphoRuleVerbFinite_instance_(PyTypeObject *type, PyObject *arg)
                    {
                        if (!castCheck(arg, MorphoRuleVerbFinite::initializeClass, 0))
                            Py_RETURN_FALSE;
                        Py_RETURN_TRUE;
                    }

                    static int t_MorphoRuleVerbFinite_init_(t_MorphoRuleVerbFinite *self, PyObject *args, PyObject *kwds)
                    {
                        switch (PyTuple_GET_SIZE(args)) {
                          case 10:
                            {
                                ::java::lang::String a0((jobject) NULL);
                                jint a1;
                                ::is::iclt::icenlp::core::icemorphy::IceMorphy$MorphoClass a2((jobject) NULL);
                                ::is::iclt::icenlp::core::icemorphy::MorphoRuleVerb$Mood a3((jobject) NULL);
                                ::is::iclt::icenlp::core::icemorphy::MorphoRuleVerb$Voice a4((jobject) NULL);
                                jchar a5;
                                jchar a6;
                                jchar a7;
                                jchar a8;
                                jchar a9;
                                MorphoRuleVerbFinite object((jobject) NULL);

                                if (!parseArgs(args, "sIkkkCCCCC", ::is::iclt::icenlp::core::icemorphy::IceMorphy$MorphoClass::initializeClass, ::is::iclt::icenlp::core::icemorphy::MorphoRuleVerb$Mood::initializeClass, ::is::iclt::icenlp::core::icemorphy::MorphoRuleVerb$Voice::initializeClass, &a0, &a1, &a2, &a3, &a4, &a5, &a6, &a7, &a8, &a9))
                                {
                                    INT_CALL(object = MorphoRuleVerbFinite(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9));
                                    self->object = object;
                                    break;
                                }
                            }
                            goto err;
                          case 11:
                            {
                                ::java::lang::String a0((jobject) NULL);
                                jint a1;
                                ::is::iclt::icenlp::core::icemorphy::IceMorphy$MorphoClass a2((jobject) NULL);
                                ::is::iclt::icenlp::core::icemorphy::MorphoRuleVerb$Mood a3((jobject) NULL);
                                ::is::iclt::icenlp::core::icemorphy::MorphoRuleVerb$Voice a4((jobject) NULL);
                                jchar a5;
                                jchar a6;
                                jchar a7;
                                jchar a8;
                                jchar a9;
                                jboolean a10;
                                MorphoRuleVerbFinite object((jobject) NULL);

                                if (!parseArgs(args, "sIkkkCCCCCZ", ::is::iclt::icenlp::core::icemorphy::IceMorphy$MorphoClass::initializeClass, ::is::iclt::icenlp::core::icemorphy::MorphoRuleVerb$Mood::initializeClass, ::is::iclt::icenlp::core::icemorphy::MorphoRuleVerb$Voice::initializeClass, &a0, &a1, &a2, &a3, &a4, &a5, &a6, &a7, &a8, &a9, &a10))
                                {
                                    INT_CALL(object = MorphoRuleVerbFinite(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10));
                                    self->object = object;
                                    break;
                                }
                            }
                          default:
                          err:
                            PyErr_SetArgsError((PyObject *) self, "__init__", args);
                            return -1;
                        }

                        return 0;
                    }
                }
            }
        }
    }
}
#include <jni.h>
#include "JCCEnv.h"
#include "is/iclt/icenlp/core/icemorphy/MorphoRule.h"
#include "is/iclt/icenlp/core/icemorphy/IceMorphy$MorphoClass.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace is {
    namespace iclt {
        namespace icenlp {
            namespace core {
                namespace icemorphy {

                    ::java::lang::Class *MorphoRule::class$ = NULL;
                    jmethodID *MorphoRule::mids$ = NULL;

                    jclass MorphoRule::initializeClass()
                    {
                        if (!class$)
                        {

                            jclass cls = (jclass) env->findClass("is/iclt/icenlp/core/icemorphy/MorphoRule");

                            mids$ = new jmethodID[max_mid];
                            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                            mids$[mid_init$_1bb6441e] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;ILis/iclt/icenlp/core/icemorphy/IceMorphy$MorphoClass;)V");

                            class$ = (::java::lang::Class *) new JObject(cls);
                        }
                        return (jclass) class$->this$;
                    }

                    MorphoRule::MorphoRule() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

                    MorphoRule::MorphoRule(const ::java::lang::String & a0, jint a1, const ::is::iclt::icenlp::core::icemorphy::IceMorphy$MorphoClass & a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_1bb6441e, a0.this$, a1, a2.this$)) {}
                }
            }
        }
    }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace is {
    namespace iclt {
        namespace icenlp {
            namespace core {
                namespace icemorphy {
                    static PyObject *t_MorphoRule_cast_(PyTypeObject *type, PyObject *arg);
                    static PyObject *t_MorphoRule_instance_(PyTypeObject *type, PyObject *arg);
                    static int t_MorphoRule_init_(t_MorphoRule *self, PyObject *args, PyObject *kwds);

                    static PyMethodDef t_MorphoRule__methods_[] = {
                        DECLARE_METHOD(t_MorphoRule, cast_, METH_O | METH_CLASS),
                        DECLARE_METHOD(t_MorphoRule, instance_, METH_O | METH_CLASS),
                        { NULL, NULL, 0, NULL }
                    };

                    DECLARE_TYPE(MorphoRule, t_MorphoRule, ::java::lang::Object, MorphoRule, t_MorphoRule_init_, 0, 0, 0, 0, 0);

                    void t_MorphoRule::install(PyObject *module)
                    {
                        installType(&PY_TYPE(MorphoRule), module, "MorphoRule", 0);
                    }

                    void t_MorphoRule::initialize(PyObject *module)
                    {
                        PyDict_SetItemString(PY_TYPE(MorphoRule).tp_dict, "class_", make_descriptor(MorphoRule::initializeClass, 1));
                        PyDict_SetItemString(PY_TYPE(MorphoRule).tp_dict, "wrapfn_", make_descriptor(t_MorphoRule::wrap_jobject));
                        PyDict_SetItemString(PY_TYPE(MorphoRule).tp_dict, "boxfn_", make_descriptor(boxObject));
                    }

                    static PyObject *t_MorphoRule_cast_(PyTypeObject *type, PyObject *arg)
                    {
                        if (!(arg = castCheck(arg, MorphoRule::initializeClass, 1)))
                            return NULL;
                        return t_MorphoRule::wrap_Object(MorphoRule(((t_MorphoRule *) arg)->object.this$));
                    }
                    static PyObject *t_MorphoRule_instance_(PyTypeObject *type, PyObject *arg)
                    {
                        if (!castCheck(arg, MorphoRule::initializeClass, 0))
                            Py_RETURN_FALSE;
                        Py_RETURN_TRUE;
                    }

                    static int t_MorphoRule_init_(t_MorphoRule *self, PyObject *args, PyObject *kwds)
                    {
                        switch (PyTuple_GET_SIZE(args)) {
                          case 0:
                            {
                                MorphoRule object((jobject) NULL);

                                INT_CALL(object = MorphoRule());
                                self->object = object;
                                break;
                            }
                            goto err;
                          case 3:
                            {
                                ::java::lang::String a0((jobject) NULL);
                                jint a1;
                                ::is::iclt::icenlp::core::icemorphy::IceMorphy$MorphoClass a2((jobject) NULL);
                                MorphoRule object((jobject) NULL);

                                if (!parseArgs(args, "sIk", ::is::iclt::icenlp::core::icemorphy::IceMorphy$MorphoClass::initializeClass, &a0, &a1, &a2))
                                {
                                    INT_CALL(object = MorphoRule(a0, a1, a2));
                                    self->object = object;
                                    break;
                                }
                            }
                          default:
                          err:
                            PyErr_SetArgsError((PyObject *) self, "__init__", args);
                            return -1;
                        }

                        return 0;
                    }
                }
            }
        }
    }
}
#include <jni.h>
#include "JCCEnv.h"
#include "is/iclt/icenlp/runner/RunIceTaggerApertium.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace is {
    namespace iclt {
        namespace icenlp {
            namespace runner {

                ::java::lang::Class *RunIceTaggerApertium::class$ = NULL;
                jmethodID *RunIceTaggerApertium::mids$ = NULL;

                jclass RunIceTaggerApertium::initializeClass()
                {
                    if (!class$)
                    {

                        jclass cls = (jclass) env->findClass("is/iclt/icenlp/runner/RunIceTaggerApertium");

                        mids$ = new jmethodID[max_mid];
                        mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                        mids$[mid_main_4dd4540c] = env->getStaticMethodID(cls, "main", "([Ljava/lang/String;)V");

                        class$ = (::java::lang::Class *) new JObject(cls);
                    }
                    return (jclass) class$->this$;
                }

                RunIceTaggerApertium::RunIceTaggerApertium() : ::is::iclt::icenlp::runner::RunIceTagger(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

                void RunIceTaggerApertium::main(const JArray< ::java::lang::String > & a0)
                {
                    jclass cls = initializeClass();
                    env->callStaticVoidMethod(cls, mids$[mid_main_4dd4540c], a0.this$);
                }
            }
        }
    }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace is {
    namespace iclt {
        namespace icenlp {
            namespace runner {
                static PyObject *t_RunIceTaggerApertium_cast_(PyTypeObject *type, PyObject *arg);
                static PyObject *t_RunIceTaggerApertium_instance_(PyTypeObject *type, PyObject *arg);
                static int t_RunIceTaggerApertium_init_(t_RunIceTaggerApertium *self, PyObject *args, PyObject *kwds);
                static PyObject *t_RunIceTaggerApertium_main(PyTypeObject *type, PyObject *args);

                static PyMethodDef t_RunIceTaggerApertium__methods_[] = {
                    DECLARE_METHOD(t_RunIceTaggerApertium, cast_, METH_O | METH_CLASS),
                    DECLARE_METHOD(t_RunIceTaggerApertium, instance_, METH_O | METH_CLASS),
                    DECLARE_METHOD(t_RunIceTaggerApertium, main, METH_VARARGS | METH_CLASS),
                    { NULL, NULL, 0, NULL }
                };

                DECLARE_TYPE(RunIceTaggerApertium, t_RunIceTaggerApertium, ::is::iclt::icenlp::runner::RunIceTagger, RunIceTaggerApertium, t_RunIceTaggerApertium_init_, 0, 0, 0, 0, 0);

                void t_RunIceTaggerApertium::install(PyObject *module)
                {
                    installType(&PY_TYPE(RunIceTaggerApertium), module, "RunIceTaggerApertium", 0);
                }

                void t_RunIceTaggerApertium::initialize(PyObject *module)
                {
                    PyDict_SetItemString(PY_TYPE(RunIceTaggerApertium).tp_dict, "class_", make_descriptor(RunIceTaggerApertium::initializeClass, 1));
                    PyDict_SetItemString(PY_TYPE(RunIceTaggerApertium).tp_dict, "wrapfn_", make_descriptor(t_RunIceTaggerApertium::wrap_jobject));
                    PyDict_SetItemString(PY_TYPE(RunIceTaggerApertium).tp_dict, "boxfn_", make_descriptor(boxObject));
                }

                static PyObject *t_RunIceTaggerApertium_cast_(PyTypeObject *type, PyObject *arg)
                {
                    if (!(arg = castCheck(arg, RunIceTaggerApertium::initializeClass, 1)))
                        return NULL;
                    return t_RunIceTaggerApertium::wrap_Object(RunIceTaggerApertium(((t_RunIceTaggerApertium *) arg)->object.this$));
                }
                static PyObject *t_RunIceTaggerApertium_instance_(PyTypeObject *type, PyObject *arg)
                {
                    if (!castCheck(arg, RunIceTaggerApertium::initializeClass, 0))
                        Py_RETURN_FALSE;
                    Py_RETURN_TRUE;
                }

                static int t_RunIceTaggerApertium_init_(t_RunIceTaggerApertium *self, PyObject *args, PyObject *kwds)
                {
                    RunIceTaggerApertium object((jobject) NULL);

                    INT_CALL(object = RunIceTaggerApertium());
                    self->object = object;

                    return 0;
                }

                static PyObject *t_RunIceTaggerApertium_main(PyTypeObject *type, PyObject *args)
                {
                    JArray< ::java::lang::String > a0((jobject) NULL);

                    if (!parseArgs(args, "[s", &a0))
                    {
                        OBJ_CALL(::is::iclt::icenlp::runner::RunIceTaggerApertium::main(a0));
                        Py_RETURN_NONE;
                    }

                    return callSuper(type, "main", args, 2);
                }
            }
        }
    }
}
#include <jni.h>
#include "JCCEnv.h"
#include "is/iclt/icenlp/runner/RunIceTagger.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace is {
    namespace iclt {
        namespace icenlp {
            namespace runner {

                ::java::lang::Class *RunIceTagger::class$ = NULL;
                jmethodID *RunIceTagger::mids$ = NULL;

                jclass RunIceTagger::initializeClass()
                {
                    if (!class$)
                    {

                        jclass cls = (jclass) env->findClass("is/iclt/icenlp/runner/RunIceTagger");

                        mids$ = new jmethodID[max_mid];
                        mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                        mids$[mid_main_4dd4540c] = env->getStaticMethodID(cls, "main", "([Ljava/lang/String;)V");
                        mids$[mid_initialize_8d71b8e0] = env->getMethodID(cls, "initialize", "([Ljava/lang/String;)Ljava/util/Date;");
                        mids$[mid_printResults_e001e437] = env->getMethodID(cls, "printResults", "(Ljava/io/BufferedWriter;)V");
                        mids$[mid_performTagging_54c6a166] = env->getMethodID(cls, "performTagging", "()V");
                        mids$[mid_finish_aa83a4b3] = env->getMethodID(cls, "finish", "(Ljava/util/Date;)V");

                        class$ = (::java::lang::Class *) new JObject(cls);
                    }
                    return (jclass) class$->this$;
                }

                RunIceTagger::RunIceTagger() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

                void RunIceTagger::main(const JArray< ::java::lang::String > & a0)
                {
                    jclass cls = initializeClass();
                    env->callStaticVoidMethod(cls, mids$[mid_main_4dd4540c], a0.this$);
                }
            }
        }
    }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace is {
    namespace iclt {
        namespace icenlp {
            namespace runner {
                static PyObject *t_RunIceTagger_cast_(PyTypeObject *type, PyObject *arg);
                static PyObject *t_RunIceTagger_instance_(PyTypeObject *type, PyObject *arg);
                static int t_RunIceTagger_init_(t_RunIceTagger *self, PyObject *args, PyObject *kwds);
                static PyObject *t_RunIceTagger_main(PyTypeObject *type, PyObject *arg);

                static PyMethodDef t_RunIceTagger__methods_[] = {
                    DECLARE_METHOD(t_RunIceTagger, cast_, METH_O | METH_CLASS),
                    DECLARE_METHOD(t_RunIceTagger, instance_, METH_O | METH_CLASS),
                    DECLARE_METHOD(t_RunIceTagger, main, METH_O | METH_CLASS),
                    { NULL, NULL, 0, NULL }
                };

                DECLARE_TYPE(RunIceTagger, t_RunIceTagger, ::java::lang::Object, RunIceTagger, t_RunIceTagger_init_, 0, 0, 0, 0, 0);

                void t_RunIceTagger::install(PyObject *module)
                {
                    installType(&PY_TYPE(RunIceTagger), module, "RunIceTagger", 0);
                }

                void t_RunIceTagger::initialize(PyObject *module)
                {
                    PyDict_SetItemString(PY_TYPE(RunIceTagger).tp_dict, "class_", make_descriptor(RunIceTagger::initializeClass, 1));
                    PyDict_SetItemString(PY_TYPE(RunIceTagger).tp_dict, "wrapfn_", make_descriptor(t_RunIceTagger::wrap_jobject));
                    PyDict_SetItemString(PY_TYPE(RunIceTagger).tp_dict, "boxfn_", make_descriptor(boxObject));
                }

                static PyObject *t_RunIceTagger_cast_(PyTypeObject *type, PyObject *arg)
                {
                    if (!(arg = castCheck(arg, RunIceTagger::initializeClass, 1)))
                        return NULL;
                    return t_RunIceTagger::wrap_Object(RunIceTagger(((t_RunIceTagger *) arg)->object.this$));
                }
                static PyObject *t_RunIceTagger_instance_(PyTypeObject *type, PyObject *arg)
                {
                    if (!castCheck(arg, RunIceTagger::initializeClass, 0))
                        Py_RETURN_FALSE;
                    Py_RETURN_TRUE;
                }

                static int t_RunIceTagger_init_(t_RunIceTagger *self, PyObject *args, PyObject *kwds)
                {
                    RunIceTagger object((jobject) NULL);

                    INT_CALL(object = RunIceTagger());
                    self->object = object;

                    return 0;
                }

                static PyObject *t_RunIceTagger_main(PyTypeObject *type, PyObject *arg)
                {
                    JArray< ::java::lang::String > a0((jobject) NULL);

                    if (!parseArg(arg, "[s", &a0))
                    {
                        OBJ_CALL(::is::iclt::icenlp::runner::RunIceTagger::main(a0));
                        Py_RETURN_NONE;
                    }

                    PyErr_SetArgsError(type, "main", arg);
                    return NULL;
                }
            }
        }
    }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/io/PrintWriter.h"
#include "java/lang/CharSequence.h"
#include "java/io/OutputStream.h"
#include "java/lang/Class.h"
#include "java/io/UnsupportedEncodingException.h"
#include "java/io/FileNotFoundException.h"
#include "java/util/Locale.h"
#include "java/io/File.h"
#include "java/lang/String.h"
#include "java/lang/Appendable.h"
#include "java/lang/Object.h"
#include "JArray.h"

namespace java {
    namespace io {

        ::java::lang::Class *PrintWriter::class$ = NULL;
        jmethodID *PrintWriter::mids$ = NULL;

        jclass PrintWriter::initializeClass()
        {
            if (!class$)
            {

                jclass cls = (jclass) env->findClass("java/io/PrintWriter");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
                mids$[mid_init$_c3dacf57] = env->getMethodID(cls, "<init>", "(Ljava/io/File;)V");
                mids$[mid_init$_5bcd5850] = env->getMethodID(cls, "<init>", "(Ljava/io/Writer;)V");
                mids$[mid_init$_82d865f8] = env->getMethodID(cls, "<init>", "(Ljava/io/OutputStream;)V");
                mids$[mid_init$_53203e9d] = env->getMethodID(cls, "<init>", "(Ljava/io/Writer;Z)V");
                mids$[mid_init$_a0fd6605] = env->getMethodID(cls, "<init>", "(Ljava/io/OutputStream;Z)V");
                mids$[mid_init$_4a264742] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Ljava/lang/String;)V");
                mids$[mid_init$_b8789389] = env->getMethodID(cls, "<init>", "(Ljava/io/File;Ljava/lang/String;)V");
                mids$[mid_append_4ea4b69d] = env->getMethodID(cls, "append", "(Ljava/lang/CharSequence;)Ljava/io/PrintWriter;");
                mids$[mid_append_6cdbddb5] = env->getMethodID(cls, "append", "(C)Ljava/io/PrintWriter;");
                mids$[mid_append_19a20159] = env->getMethodID(cls, "append", "(Ljava/lang/CharSequence;II)Ljava/io/PrintWriter;");
                mids$[mid_checkError_54c6a16a] = env->getMethodID(cls, "checkError", "()Z");
                mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
                mids$[mid_flush_54c6a166] = env->getMethodID(cls, "flush", "()V");
                mids$[mid_format_d515d1d7] = env->getMethodID(cls, "format", "(Ljava/lang/String;[Ljava/lang/Object;)Ljava/io/PrintWriter;");
                mids$[mid_format_0bde164c] = env->getMethodID(cls, "format", "(Ljava/util/Locale;Ljava/lang/String;[Ljava/lang/Object;)Ljava/io/PrintWriter;");
                mids$[mid_print_5d1c7645] = env->getMethodID(cls, "print", "(D)V");
                mids$[mid_print_87fd545a] = env->getMethodID(cls, "print", "(C)V");
                mids$[mid_print_700e23d6] = env->getMethodID(cls, "print", "([C)V");
                mids$[mid_print_bb0c767f] = env->getMethodID(cls, "print", "(Z)V");
                mids$[mid_print_39c7bd3c] = env->getMethodID(cls, "print", "(I)V");
                mids$[mid_print_5fdc3f48] = env->getMethodID(cls, "print", "(Ljava/lang/String;)V");
                mids$[mid_print_290588ee] = env->getMethodID(cls, "print", "(Ljava/lang/Object;)V");
                mids$[mid_print_06298cab] = env->getMethodID(cls, "print", "(F)V");
                mids$[mid_print_0ee6df2f] = env->getMethodID(cls, "print", "(J)V");
                mids$[mid_printf_d515d1d7] = env->getMethodID(cls, "printf", "(Ljava/lang/String;[Ljava/lang/Object;)Ljava/io/PrintWriter;");
                mids$[mid_printf_0bde164c] = env->getMethodID(cls, "printf", "(Ljava/util/Locale;Ljava/lang/String;[Ljava/lang/Object;)Ljava/io/PrintWriter;");
                mids$[mid_println_54c6a166] = env->getMethodID(cls, "println", "()V");
                mids$[mid_println_39c7bd3c] = env->getMethodID(cls, "println", "(I)V");
                mids$[mid_println_5fdc3f48] = env->getMethodID(cls, "println", "(Ljava/lang/String;)V");
                mids$[mid_println_0ee6df2f] = env->getMethodID(cls, "println", "(J)V");
                mids$[mid_println_bb0c767f] = env->getMethodID(cls, "println", "(Z)V");
                mids$[mid_println_06298cab] = env->getMethodID(cls, "println", "(F)V");
                mids$[mid_println_5d1c7645] = env->getMethodID(cls, "println", "(D)V");
                mids$[mid_println_700e23d6] = env->getMethodID(cls, "println", "([C)V");
                mids$[mid_println_290588ee] = env->getMethodID(cls, "println", "(Ljava/lang/Object;)V");
                mids$[mid_println_87fd545a] = env->getMethodID(cls, "println", "(C)V");
                mids$[mid_write_5fdc3f48] = env->getMethodID(cls, "write", "(Ljava/lang/String;)V");
                mids$[mid_write_700e23d6] = env->getMethodID(cls, "write", "([C)V");
                mids$[mid_write_39c7bd3c] = env->getMethodID(cls, "write", "(I)V");
                mids$[mid_write_6f0bb356] = env->getMethodID(cls, "write", "([CII)V");
                mids$[mid_write_555f322c] = env->getMethodID(cls, "write", "(Ljava/lang/String;II)V");
                mids$[mid_setError_54c6a166] = env->getMethodID(cls, "setError", "()V");
                mids$[mid_clearError_54c6a166] = env->getMethodID(cls, "clearError", "()V");

                class$ = (::java::lang::Class *) new JObject(cls);
            }
            return (jclass) class$->this$;
        }

        PrintWriter::PrintWriter(const ::java::lang::String & a0) : ::java::io::Writer(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}

        PrintWriter::PrintWriter(const ::java::io::File & a0) : ::java::io::Writer(env->newObject(initializeClass, &mids$, mid_init$_c3dacf57, a0.this$)) {}

        PrintWriter::PrintWriter(const ::java::io::Writer & a0) : ::java::io::Writer(env->newObject(initializeClass, &mids$, mid_init$_5bcd5850, a0.this$)) {}

        PrintWriter::PrintWriter(const ::java::io::OutputStream & a0) : ::java::io::Writer(env->newObject(initializeClass, &mids$, mid_init$_82d865f8, a0.this$)) {}

        PrintWriter::PrintWriter(const ::java::io::Writer & a0, jboolean a1) : ::java::io::Writer(env->newObject(initializeClass, &mids$, mid_init$_53203e9d, a0.this$, a1)) {}

        PrintWriter::PrintWriter(const ::java::io::OutputStream & a0, jboolean a1) : ::java::io::Writer(env->newObject(initializeClass, &mids$, mid_init$_a0fd6605, a0.this$, a1)) {}

        PrintWriter::PrintWriter(const ::java::lang::String & a0, const ::java::lang::String & a1) : ::java::io::Writer(env->newObject(initializeClass, &mids$, mid_init$_4a264742, a0.this$, a1.this$)) {}

        PrintWriter::PrintWriter(const ::java::io::File & a0, const ::java::lang::String & a1) : ::java::io::Writer(env->newObject(initializeClass, &mids$, mid_init$_b8789389, a0.this$, a1.this$)) {}

        PrintWriter PrintWriter::append(const ::java::lang::CharSequence & a0) const
        {
            return PrintWriter(env->callObjectMethod(this$, mids$[mid_append_4ea4b69d], a0.this$));
        }

        PrintWriter PrintWriter::append(jchar a0) const
        {
            return PrintWriter(env->callObjectMethod(this$, mids$[mid_append_6cdbddb5], a0));
        }

        PrintWriter PrintWriter::append(const ::java::lang::CharSequence & a0, jint a1, jint a2) const
        {
            return PrintWriter(env->callObjectMethod(this$, mids$[mid_append_19a20159], a0.this$, a1, a2));
        }

        jboolean PrintWriter::checkError() const
        {
            return env->callBooleanMethod(this$, mids$[mid_checkError_54c6a16a]);
        }

        void PrintWriter::close() const
        {
            env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
        }

        void PrintWriter::flush() const
        {
            env->callVoidMethod(this$, mids$[mid_flush_54c6a166]);
        }

        PrintWriter PrintWriter::format(const ::java::lang::String & a0, const JArray< ::java::lang::Object > & a1) const
        {
            return PrintWriter(env->callObjectMethod(this$, mids$[mid_format_d515d1d7], a0.this$, a1.this$));
        }

        PrintWriter PrintWriter::format(const ::java::util::Locale & a0, const ::java::lang::String & a1, const JArray< ::java::lang::Object > & a2) const
        {
            return PrintWriter(env->callObjectMethod(this$, mids$[mid_format_0bde164c], a0.this$, a1.this$, a2.this$));
        }

        void PrintWriter::print(jdouble a0) const
        {
            env->callVoidMethod(this$, mids$[mid_print_5d1c7645], a0);
        }

        void PrintWriter::print(jchar a0) const
        {
            env->callVoidMethod(this$, mids$[mid_print_87fd545a], a0);
        }

        void PrintWriter::print(const JArray< jchar > & a0) const
        {
            env->callVoidMethod(this$, mids$[mid_print_700e23d6], a0.this$);
        }

        void PrintWriter::print(jboolean a0) const
        {
            env->callVoidMethod(this$, mids$[mid_print_bb0c767f], a0);
        }

        void PrintWriter::print(jint a0) const
        {
            env->callVoidMethod(this$, mids$[mid_print_39c7bd3c], a0);
        }

        void PrintWriter::print(const ::java::lang::String & a0) const
        {
            env->callVoidMethod(this$, mids$[mid_print_5fdc3f48], a0.this$);
        }

        void PrintWriter::print(const ::java::lang::Object & a0) const
        {
            env->callVoidMethod(this$, mids$[mid_print_290588ee], a0.this$);
        }

        void PrintWriter::print(jfloat a0) const
        {
            env->callVoidMethod(this$, mids$[mid_print_06298cab], a0);
        }

        void PrintWriter::print(jlong a0) const
        {
            env->callVoidMethod(this$, mids$[mid_print_0ee6df2f], a0);
        }

        PrintWriter PrintWriter::printf(const ::java::lang::String & a0, const JArray< ::java::lang::Object > & a1) const
        {
            return PrintWriter(env->callObjectMethod(this$, mids$[mid_printf_d515d1d7], a0.this$, a1.this$));
        }

        PrintWriter PrintWriter::printf(const ::java::util::Locale & a0, const ::java::lang::String & a1, const JArray< ::java::lang::Object > & a2) const
        {
            return PrintWriter(env->callObjectMethod(this$, mids$[mid_printf_0bde164c], a0.this$, a1.this$, a2.this$));
        }

        void PrintWriter::println() const
        {
            env->callVoidMethod(this$, mids$[mid_println_54c6a166]);
        }

        void PrintWriter::println(jint a0) const
        {
            env->callVoidMethod(this$, mids$[mid_println_39c7bd3c], a0);
        }

        void PrintWriter::println(const ::java::lang::String & a0) const
        {
            env->callVoidMethod(this$, mids$[mid_println_5fdc3f48], a0.this$);
        }

        void PrintWriter::println(jlong a0) const
        {
            env->callVoidMethod(this$, mids$[mid_println_0ee6df2f], a0);
        }

        void PrintWriter::println(jboolean a0) const
        {
            env->callVoidMethod(this$, mids$[mid_println_bb0c767f], a0);
        }

        void PrintWriter::println(jfloat a0) const
        {
            env->callVoidMethod(this$, mids$[mid_println_06298cab], a0);
        }

        void PrintWriter::println(jdouble a0) const
        {
            env->callVoidMethod(this$, mids$[mid_println_5d1c7645], a0);
        }

        void PrintWriter::println(const JArray< jchar > & a0) const
        {
            env->callVoidMethod(this$, mids$[mid_println_700e23d6], a0.this$);
        }

        void PrintWriter::println(const ::java::lang::Object & a0) const
        {
            env->callVoidMethod(this$, mids$[mid_println_290588ee], a0.this$);
        }

        void PrintWriter::println(jchar a0) const
        {
            env->callVoidMethod(this$, mids$[mid_println_87fd545a], a0);
        }

        void PrintWriter::write(const ::java::lang::String & a0) const
        {
            env->callVoidMethod(this$, mids$[mid_write_5fdc3f48], a0.this$);
        }

        void PrintWriter::write(const JArray< jchar > & a0) const
        {
            env->callVoidMethod(this$, mids$[mid_write_700e23d6], a0.this$);
        }

        void PrintWriter::write(jint a0) const
        {
            env->callVoidMethod(this$, mids$[mid_write_39c7bd3c], a0);
        }

        void PrintWriter::write(const JArray< jchar > & a0, jint a1, jint a2) const
        {
            env->callVoidMethod(this$, mids$[mid_write_6f0bb356], a0.this$, a1, a2);
        }

        void PrintWriter::write(const ::java::lang::String & a0, jint a1, jint a2) const
        {
            env->callVoidMethod(this$, mids$[mid_write_555f322c], a0.this$, a1, a2);
        }
    }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
    namespace io {
        static PyObject *t_PrintWriter_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PrintWriter_instance_(PyTypeObject *type, PyObject *arg);
        static int t_PrintWriter_init_(t_PrintWriter *self, PyObject *args, PyObject *kwds);
        static PyObject *t_PrintWriter_append(t_PrintWriter *self, PyObject *args);
        static PyObject *t_PrintWriter_checkError(t_PrintWriter *self);
        static PyObject *t_PrintWriter_close(t_PrintWriter *self, PyObject *args);
        static PyObject *t_PrintWriter_flush(t_PrintWriter *self, PyObject *args);
        static PyObject *t_PrintWriter_format(t_PrintWriter *self, PyObject *args);
        static PyObject *t_PrintWriter_print(t_PrintWriter *self, PyObject *args);
        static PyObject *t_PrintWriter_printf(t_PrintWriter *self, PyObject *args);
        static PyObject *t_PrintWriter_println(t_PrintWriter *self, PyObject *args);
        static PyObject *t_PrintWriter_write(t_PrintWriter *self, PyObject *args);

        static PyMethodDef t_PrintWriter__methods_[] = {
            DECLARE_METHOD(t_PrintWriter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PrintWriter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PrintWriter, append, METH_VARARGS),
            DECLARE_METHOD(t_PrintWriter, checkError, METH_NOARGS),
            DECLARE_METHOD(t_PrintWriter, close, METH_VARARGS),
            DECLARE_METHOD(t_PrintWriter, flush, METH_VARARGS),
            DECLARE_METHOD(t_PrintWriter, format, METH_VARARGS),
            DECLARE_METHOD(t_PrintWriter, print, METH_VARARGS),
            DECLARE_METHOD(t_PrintWriter, printf, METH_VARARGS),
            DECLARE_METHOD(t_PrintWriter, println, METH_VARARGS),
            DECLARE_METHOD(t_PrintWriter, write, METH_VARARGS),
            { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(PrintWriter, t_PrintWriter, ::java::io::Writer, PrintWriter, t_PrintWriter_init_, 0, 0, 0, 0, 0);

        void t_PrintWriter::install(PyObject *module)
        {
            installType(&PY_TYPE(PrintWriter), module, "PrintWriter", 0);
        }

        void t_PrintWriter::initialize(PyObject *module)
        {
            PyDict_SetItemString(PY_TYPE(PrintWriter).tp_dict, "class_", make_descriptor(PrintWriter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PrintWriter).tp_dict, "wrapfn_", make_descriptor(t_PrintWriter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PrintWriter).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_PrintWriter_cast_(PyTypeObject *type, PyObject *arg)
        {
            if (!(arg = castCheck(arg, PrintWriter::initializeClass, 1)))
                return NULL;
            return t_PrintWriter::wrap_Object(PrintWriter(((t_PrintWriter *) arg)->object.this$));
        }
        static PyObject *t_PrintWriter_instance_(PyTypeObject *type, PyObject *arg)
        {
            if (!castCheck(arg, PrintWriter::initializeClass, 0))
                Py_RETURN_FALSE;
            Py_RETURN_TRUE;
        }

        static int t_PrintWriter_init_(t_PrintWriter *self, PyObject *args, PyObject *kwds)
        {
            switch (PyTuple_GET_SIZE(args)) {
              case 1:
                {
                    ::java::lang::String a0((jobject) NULL);
                    PrintWriter object((jobject) NULL);

                    if (!parseArgs(args, "s", &a0))
                    {
                        INT_CALL(object = PrintWriter(a0));
                        self->object = object;
                        break;
                    }
                }
                {
                    ::java::io::File a0((jobject) NULL);
                    PrintWriter object((jobject) NULL);

                    if (!parseArgs(args, "k", ::java::io::File::initializeClass, &a0))
                    {
                        INT_CALL(object = PrintWriter(a0));
                        self->object = object;
                        break;
                    }
                }
                {
                    ::java::io::Writer a0((jobject) NULL);
                    PrintWriter object((jobject) NULL);

                    if (!parseArgs(args, "k", ::java::io::Writer::initializeClass, &a0))
                    {
                        INT_CALL(object = PrintWriter(a0));
                        self->object = object;
                        break;
                    }
                }
                {
                    ::java::io::OutputStream a0((jobject) NULL);
                    PrintWriter object((jobject) NULL);

                    if (!parseArgs(args, "k", ::java::io::OutputStream::initializeClass, &a0))
                    {
                        INT_CALL(object = PrintWriter(a0));
                        self->object = object;
                        break;
                    }
                }
                goto err;
              case 2:
                {
                    ::java::io::Writer a0((jobject) NULL);
                    jboolean a1;
                    PrintWriter object((jobject) NULL);

                    if (!parseArgs(args, "kZ", ::java::io::Writer::initializeClass, &a0, &a1))
                    {
                        INT_CALL(object = PrintWriter(a0, a1));
                        self->object = object;
                        break;
                    }
                }
                {
                    ::java::io::OutputStream a0((jobject) NULL);
                    jboolean a1;
                    PrintWriter object((jobject) NULL);

                    if (!parseArgs(args, "kZ", ::java::io::OutputStream::initializeClass, &a0, &a1))
                    {
                        INT_CALL(object = PrintWriter(a0, a1));
                        self->object = object;
                        break;
                    }
                }
                {
                    ::java::lang::String a0((jobject) NULL);
                    ::java::lang::String a1((jobject) NULL);
                    PrintWriter object((jobject) NULL);

                    if (!parseArgs(args, "ss", &a0, &a1))
                    {
                        INT_CALL(object = PrintWriter(a0, a1));
                        self->object = object;
                        break;
                    }
                }
                {
                    ::java::io::File a0((jobject) NULL);
                    ::java::lang::String a1((jobject) NULL);
                    PrintWriter object((jobject) NULL);

                    if (!parseArgs(args, "ks", ::java::io::File::initializeClass, &a0, &a1))
                    {
                        INT_CALL(object = PrintWriter(a0, a1));
                        self->object = object;
                        break;
                    }
                }
              default:
              err:
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
            }

            return 0;
        }

        static PyObject *t_PrintWriter_append(t_PrintWriter *self, PyObject *args)
        {
            switch (PyTuple_GET_SIZE(args)) {
              case 1:
                {
                    ::java::lang::CharSequence a0((jobject) NULL);
                    PrintWriter result((jobject) NULL);

                    if (!parseArgs(args, "O", &::java::lang::PY_TYPE(CharSequence), &a0))
                    {
                        OBJ_CALL(result = self->object.append(a0));
                        return t_PrintWriter::wrap_Object(result);
                    }
                }
                {
                    jchar a0;
                    PrintWriter result((jobject) NULL);

                    if (!parseArgs(args, "C", &a0))
                    {
                        OBJ_CALL(result = self->object.append(a0));
                        return t_PrintWriter::wrap_Object(result);
                    }
                }
                break;
              case 3:
                {
                    ::java::lang::CharSequence a0((jobject) NULL);
                    jint a1;
                    jint a2;
                    PrintWriter result((jobject) NULL);

                    if (!parseArgs(args, "OII", &::java::lang::PY_TYPE(CharSequence), &a0, &a1, &a2))
                    {
                        OBJ_CALL(result = self->object.append(a0, a1, a2));
                        return t_PrintWriter::wrap_Object(result);
                    }
                }
            }

            return callSuper(&PY_TYPE(PrintWriter), (PyObject *) self, "append", args, 2);
        }

        static PyObject *t_PrintWriter_checkError(t_PrintWriter *self)
        {
            jboolean result;
            OBJ_CALL(result = self->object.checkError());
            Py_RETURN_BOOL(result);
        }

        static PyObject *t_PrintWriter_close(t_PrintWriter *self, PyObject *args)
        {

            if (!parseArgs(args, ""))
            {
                OBJ_CALL(self->object.close());
                Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(PrintWriter), (PyObject *) self, "close", args, 2);
        }

        static PyObject *t_PrintWriter_flush(t_PrintWriter *self, PyObject *args)
        {

            if (!parseArgs(args, ""))
            {
                OBJ_CALL(self->object.flush());
                Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(PrintWriter), (PyObject *) self, "flush", args, 2);
        }

        static PyObject *t_PrintWriter_format(t_PrintWriter *self, PyObject *args)
        {
            switch (PyTuple_GET_SIZE(args)) {
              case 2:
                {
                    ::java::lang::String a0((jobject) NULL);
                    JArray< ::java::lang::Object > a1((jobject) NULL);
                    PrintWriter result((jobject) NULL);

                    if (!parseArgs(args, "s[o", &a0, &a1))
                    {
                        OBJ_CALL(result = self->object.format(a0, a1));
                        return t_PrintWriter::wrap_Object(result);
                    }
                }
                break;
              case 3:
                {
                    ::java::util::Locale a0((jobject) NULL);
                    ::java::lang::String a1((jobject) NULL);
                    JArray< ::java::lang::Object > a2((jobject) NULL);
                    PrintWriter result((jobject) NULL);

                    if (!parseArgs(args, "ks[o", ::java::util::Locale::initializeClass, &a0, &a1, &a2))
                    {
                        OBJ_CALL(result = self->object.format(a0, a1, a2));
                        return t_PrintWriter::wrap_Object(result);
                    }
                }
            }

            PyErr_SetArgsError((PyObject *) self, "format", args);
            return NULL;
        }

        static PyObject *t_PrintWriter_print(t_PrintWriter *self, PyObject *args)
        {
            switch (PyTuple_GET_SIZE(args)) {
              case 1:
                {
                    jdouble a0;

                    if (!parseArgs(args, "D", &a0))
                    {
                        OBJ_CALL(self->object.print(a0));
                        Py_RETURN_NONE;
                    }
                }
                {
                    jchar a0;

                    if (!parseArgs(args, "C", &a0))
                    {
                        OBJ_CALL(self->object.print(a0));
                        Py_RETURN_NONE;
                    }
                }
                {
                    JArray< jchar > a0((jobject) NULL);

                    if (!parseArgs(args, "[C", &a0))
                    {
                        OBJ_CALL(self->object.print(a0));
                        Py_RETURN_NONE;
                    }
                }
                {
                    jboolean a0;

                    if (!parseArgs(args, "Z", &a0))
                    {
                        OBJ_CALL(self->object.print(a0));
                        Py_RETURN_NONE;
                    }
                }
                {
                    jint a0;

                    if (!parseArgs(args, "I", &a0))
                    {
                        OBJ_CALL(self->object.print(a0));
                        Py_RETURN_NONE;
                    }
                }
                {
                    ::java::lang::String a0((jobject) NULL);

                    if (!parseArgs(args, "s", &a0))
                    {
                        OBJ_CALL(self->object.print(a0));
                        Py_RETURN_NONE;
                    }
                }
                {
                    ::java::lang::Object a0((jobject) NULL);

                    if (!parseArgs(args, "o", &a0))
                    {
                        OBJ_CALL(self->object.print(a0));
                        Py_RETURN_NONE;
                    }
                }
                {
                    jfloat a0;

                    if (!parseArgs(args, "F", &a0))
                    {
                        OBJ_CALL(self->object.print(a0));
                        Py_RETURN_NONE;
                    }
                }
                {
                    jlong a0;

                    if (!parseArgs(args, "J", &a0))
                    {
                        OBJ_CALL(self->object.print(a0));
                        Py_RETURN_NONE;
                    }
                }
            }

            PyErr_SetArgsError((PyObject *) self, "print", args);
            return NULL;
        }

        static PyObject *t_PrintWriter_printf(t_PrintWriter *self, PyObject *args)
        {
            switch (PyTuple_GET_SIZE(args)) {
              case 2:
                {
                    ::java::lang::String a0((jobject) NULL);
                    JArray< ::java::lang::Object > a1((jobject) NULL);
                    PrintWriter result((jobject) NULL);

                    if (!parseArgs(args, "s[o", &a0, &a1))
                    {
                        OBJ_CALL(result = self->object.printf(a0, a1));
                        return t_PrintWriter::wrap_Object(result);
                    }
                }
                break;
              case 3:
                {
                    ::java::util::Locale a0((jobject) NULL);
                    ::java::lang::String a1((jobject) NULL);
                    JArray< ::java::lang::Object > a2((jobject) NULL);
                    PrintWriter result((jobject) NULL);

                    if (!parseArgs(args, "ks[o", ::java::util::Locale::initializeClass, &a0, &a1, &a2))
                    {
                        OBJ_CALL(result = self->object.printf(a0, a1, a2));
                        return t_PrintWriter::wrap_Object(result);
                    }
                }
            }

            PyErr_SetArgsError((PyObject *) self, "printf", args);
            return NULL;
        }

        static PyObject *t_PrintWriter_println(t_PrintWriter *self, PyObject *args)
        {
            switch (PyTuple_GET_SIZE(args)) {
              case 0:
                {
                    OBJ_CALL(self->object.println());
                    Py_RETURN_NONE;
                }
                break;
              case 1:
                {
                    jint a0;

                    if (!parseArgs(args, "I", &a0))
                    {
                        OBJ_CALL(self->object.println(a0));
                        Py_RETURN_NONE;
                    }
                }
                {
                    ::java::lang::String a0((jobject) NULL);

                    if (!parseArgs(args, "s", &a0))
                    {
                        OBJ_CALL(self->object.println(a0));
                        Py_RETURN_NONE;
                    }
                }
                {
                    jlong a0;

                    if (!parseArgs(args, "J", &a0))
                    {
                        OBJ_CALL(self->object.println(a0));
                        Py_RETURN_NONE;
                    }
                }
                {
                    jboolean a0;

                    if (!parseArgs(args, "Z", &a0))
                    {
                        OBJ_CALL(self->object.println(a0));
                        Py_RETURN_NONE;
                    }
                }
                {
                    jfloat a0;

                    if (!parseArgs(args, "F", &a0))
                    {
                        OBJ_CALL(self->object.println(a0));
                        Py_RETURN_NONE;
                    }
                }
                {
                    jdouble a0;

                    if (!parseArgs(args, "D", &a0))
                    {
                        OBJ_CALL(self->object.println(a0));
                        Py_RETURN_NONE;
                    }
                }
                {
                    JArray< jchar > a0((jobject) NULL);

                    if (!parseArgs(args, "[C", &a0))
                    {
                        OBJ_CALL(self->object.println(a0));
                        Py_RETURN_NONE;
                    }
                }
                {
                    ::java::lang::Object a0((jobject) NULL);

                    if (!parseArgs(args, "o", &a0))
                    {
                        OBJ_CALL(self->object.println(a0));
                        Py_RETURN_NONE;
                    }
                }
                {
                    jchar a0;

                    if (!parseArgs(args, "C", &a0))
                    {
                        OBJ_CALL(self->object.println(a0));
                        Py_RETURN_NONE;
                    }
                }
            }

            PyErr_SetArgsError((PyObject *) self, "println", args);
            return NULL;
        }

        static PyObject *t_PrintWriter_write(t_PrintWriter *self, PyObject *args)
        {
            switch (PyTuple_GET_SIZE(args)) {
              case 1:
                {
                    ::java::lang::String a0((jobject) NULL);

                    if (!parseArgs(args, "s", &a0))
                    {
                        OBJ_CALL(self->object.write(a0));
                        Py_RETURN_NONE;
                    }
                }
                {
                    JArray< jchar > a0((jobject) NULL);

                    if (!parseArgs(args, "[C", &a0))
                    {
                        OBJ_CALL(self->object.write(a0));
                        Py_RETURN_NONE;
                    }
                }
                {
                    jint a0;

                    if (!parseArgs(args, "I", &a0))
                    {
                        OBJ_CALL(self->object.write(a0));
                        Py_RETURN_NONE;
                    }
                }
                break;
              case 3:
                {
                    JArray< jchar > a0((jobject) NULL);
                    jint a1;
                    jint a2;

                    if (!parseArgs(args, "[CII", &a0, &a1, &a2))
                    {
                        OBJ_CALL(self->object.write(a0, a1, a2));
                        Py_RETURN_NONE;
                    }
                }
                {
                    ::java::lang::String a0((jobject) NULL);
                    jint a1;
                    jint a2;

                    if (!parseArgs(args, "sII", &a0, &a1, &a2))
                    {
                        OBJ_CALL(self->object.write(a0, a1, a2));
                        Py_RETURN_NONE;
                    }
                }
            }

            return callSuper(&PY_TYPE(PrintWriter), (PyObject *) self, "write", args, 2);
        }
    }
}
#include <jni.h>
#include "JCCEnv.h"
#include "is/iclt/icenlp/core/formald/tags/TagFormatConverter.h"
#include "is/iclt/icenlp/core/formald/tags/TagFormat.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace is {
    namespace iclt {
        namespace icenlp {
            namespace core {
                namespace formald {
                    namespace tags {

                        ::java::lang::Class *TagFormatConverter::class$ = NULL;
                        jmethodID *TagFormatConverter::mids$ = NULL;

                        jclass TagFormatConverter::initializeClass()
                        {
                            if (!class$)
                            {

                                jclass cls = (jclass) env->findClass("is/iclt/icenlp/core/formald/tags/TagFormatConverter");

                                mids$ = new jmethodID[max_mid];
                                mids$[mid_newInstance_c1a556d4] = env->getStaticMethodID(cls, "newInstance", "(Lis/iclt/icenlp/core/formald/tags/TagFormat;Lis/iclt/icenlp/core/formald/tags/TagFormat;)Lis/iclt/icenlp/core/formald/tags/TagFormatConverter;");

                                class$ = (::java::lang::Class *) new JObject(cls);
                            }
                            return (jclass) class$->this$;
                        }

                        TagFormatConverter TagFormatConverter::newInstance(const ::is::iclt::icenlp::core::formald::tags::TagFormat & a0, const ::is::iclt::icenlp::core::formald::tags::TagFormat & a1)
                        {
                            jclass cls = initializeClass();
                            return TagFormatConverter(env->callStaticObjectMethod(cls, mids$[mid_newInstance_c1a556d4], a0.this$, a1.this$));
                        }
                    }
                }
            }
        }
    }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace is {
    namespace iclt {
        namespace icenlp {
            namespace core {
                namespace formald {
                    namespace tags {
                        static PyObject *t_TagFormatConverter_cast_(PyTypeObject *type, PyObject *arg);
                        static PyObject *t_TagFormatConverter_instance_(PyTypeObject *type, PyObject *arg);
                        static PyObject *t_TagFormatConverter_newInstance(PyTypeObject *type, PyObject *args);

                        static PyMethodDef t_TagFormatConverter__methods_[] = {
                            DECLARE_METHOD(t_TagFormatConverter, cast_, METH_O | METH_CLASS),
                            DECLARE_METHOD(t_TagFormatConverter, instance_, METH_O | METH_CLASS),
                            DECLARE_METHOD(t_TagFormatConverter, newInstance, METH_VARARGS | METH_CLASS),
                            { NULL, NULL, 0, NULL }
                        };

                        DECLARE_TYPE(TagFormatConverter, t_TagFormatConverter, ::is::iclt::icenlp::core::formald::FormatConverter, TagFormatConverter, abstract_init, 0, 0, 0, 0, 0);

                        void t_TagFormatConverter::install(PyObject *module)
                        {
                            installType(&PY_TYPE(TagFormatConverter), module, "TagFormatConverter", 0);
                        }

                        void t_TagFormatConverter::initialize(PyObject *module)
                        {
                            PyDict_SetItemString(PY_TYPE(TagFormatConverter).tp_dict, "class_", make_descriptor(TagFormatConverter::initializeClass, 1));
                            PyDict_SetItemString(PY_TYPE(TagFormatConverter).tp_dict, "wrapfn_", make_descriptor(t_TagFormatConverter::wrap_jobject));
                            PyDict_SetItemString(PY_TYPE(TagFormatConverter).tp_dict, "boxfn_", make_descriptor(boxObject));
                        }

                        static PyObject *t_TagFormatConverter_cast_(PyTypeObject *type, PyObject *arg)
                        {
                            if (!(arg = castCheck(arg, TagFormatConverter::initializeClass, 1)))
                                return NULL;
                            return t_TagFormatConverter::wrap_Object(TagFormatConverter(((t_TagFormatConverter *) arg)->object.this$));
                        }
                        static PyObject *t_TagFormatConverter_instance_(PyTypeObject *type, PyObject *arg)
                        {
                            if (!castCheck(arg, TagFormatConverter::initializeClass, 0))
                                Py_RETURN_FALSE;
                            Py_RETURN_TRUE;
                        }

                        static PyObject *t_TagFormatConverter_newInstance(PyTypeObject *type, PyObject *args)
                        {
                            ::is::iclt::icenlp::core::formald::tags::TagFormat a0((jobject) NULL);
                            ::is::iclt::icenlp::core::formald::tags::TagFormat a1((jobject) NULL);
                            TagFormatConverter result((jobject) NULL);

                            if (!parseArgs(args, "kk", ::is::iclt::icenlp::core::formald::tags::TagFormat::initializeClass, ::is::iclt::icenlp::core::formald::tags::TagFormat::initializeClass, &a0, &a1))
                            {
                                OBJ_CALL(result = ::is::iclt::icenlp::core::formald::tags::TagFormatConverter::newInstance(a0, a1));
                                return t_TagFormatConverter::wrap_Object(result);
                            }

                            PyErr_SetArgsError(type, "newInstance", args);
                            return NULL;
                        }
                    }
                }
            }
        }
    }
}
#include <jni.h>
#include "JCCEnv.h"
#include "is/iclt/icenlp/facade/IceParserFacade.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace is {
    namespace iclt {
        namespace icenlp {
            namespace facade {

                ::java::lang::Class *IceParserFacade::class$ = NULL;
                jmethodID *IceParserFacade::mids$ = NULL;

                jclass IceParserFacade::initializeClass()
                {
                    if (!class$)
                    {

                        jclass cls = (jclass) env->findClass("is/iclt/icenlp/facade/IceParserFacade");

                        mids$ = new jmethodID[max_mid];
                        mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                        mids$[mid_main_4dd4540c] = env->getStaticMethodID(cls, "main", "([Ljava/lang/String;)V");
                        mids$[mid_parse_97a5258f] = env->getMethodID(cls, "parse", "(Ljava/lang/String;)Ljava/lang/String;");
                        mids$[mid_parse_edaaade4] = env->getMethodID(cls, "parse", "(Ljava/lang/String;Z)Ljava/lang/String;");
                        mids$[mid_parse_3568370d] = env->getMethodID(cls, "parse", "(Ljava/lang/String;ZZ)Ljava/lang/String;");

                        class$ = (::java::lang::Class *) new JObject(cls);
                    }
                    return (jclass) class$->this$;
                }

                IceParserFacade::IceParserFacade() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

                void IceParserFacade::main(const JArray< ::java::lang::String > & a0)
                {
                    jclass cls = initializeClass();
                    env->callStaticVoidMethod(cls, mids$[mid_main_4dd4540c], a0.this$);
                }

                ::java::lang::String IceParserFacade::parse(const ::java::lang::String & a0) const
                {
                    return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_parse_97a5258f], a0.this$));
                }

                ::java::lang::String IceParserFacade::parse(const ::java::lang::String & a0, jboolean a1) const
                {
                    return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_parse_edaaade4], a0.this$, a1));
                }

                ::java::lang::String IceParserFacade::parse(const ::java::lang::String & a0, jboolean a1, jboolean a2) const
                {
                    return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_parse_3568370d], a0.this$, a1, a2));
                }
            }
        }
    }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace is {
    namespace iclt {
        namespace icenlp {
            namespace facade {
                static PyObject *t_IceParserFacade_cast_(PyTypeObject *type, PyObject *arg);
                static PyObject *t_IceParserFacade_instance_(PyTypeObject *type, PyObject *arg);
                static int t_IceParserFacade_init_(t_IceParserFacade *self, PyObject *args, PyObject *kwds);
                static PyObject *t_IceParserFacade_main(PyTypeObject *type, PyObject *arg);
                static PyObject *t_IceParserFacade_parse(t_IceParserFacade *self, PyObject *args);

                static PyMethodDef t_IceParserFacade__methods_[] = {
                    DECLARE_METHOD(t_IceParserFacade, cast_, METH_O | METH_CLASS),
                    DECLARE_METHOD(t_IceParserFacade, instance_, METH_O | METH_CLASS),
                    DECLARE_METHOD(t_IceParserFacade, main, METH_O | METH_CLASS),
                    DECLARE_METHOD(t_IceParserFacade, parse, METH_VARARGS),
                    { NULL, NULL, 0, NULL }
                };

                DECLARE_TYPE(IceParserFacade, t_IceParserFacade, ::java::lang::Object, IceParserFacade, t_IceParserFacade_init_, 0, 0, 0, 0, 0);

                void t_IceParserFacade::install(PyObject *module)
                {
                    installType(&PY_TYPE(IceParserFacade), module, "IceParserFacade", 0);
                }

                void t_IceParserFacade::initialize(PyObject *module)
                {
                    PyDict_SetItemString(PY_TYPE(IceParserFacade).tp_dict, "class_", make_descriptor(IceParserFacade::initializeClass, 1));
                    PyDict_SetItemString(PY_TYPE(IceParserFacade).tp_dict, "wrapfn_", make_descriptor(t_IceParserFacade::wrap_jobject));
                    PyDict_SetItemString(PY_TYPE(IceParserFacade).tp_dict, "boxfn_", make_descriptor(boxObject));
                }

                static PyObject *t_IceParserFacade_cast_(PyTypeObject *type, PyObject *arg)
                {
                    if (!(arg = castCheck(arg, IceParserFacade::initializeClass, 1)))
                        return NULL;
                    return t_IceParserFacade::wrap_Object(IceParserFacade(((t_IceParserFacade *) arg)->object.this$));
                }
                static PyObject *t_IceParserFacade_instance_(PyTypeObject *type, PyObject *arg)
                {
                    if (!castCheck(arg, IceParserFacade::initializeClass, 0))
                        Py_RETURN_FALSE;
                    Py_RETURN_TRUE;
                }

                static int t_IceParserFacade_init_(t_IceParserFacade *self, PyObject *args, PyObject *kwds)
                {
                    IceParserFacade object((jobject) NULL);

                    INT_CALL(object = IceParserFacade());
                    self->object = object;

                    return 0;
                }

                static PyObject *t_IceParserFacade_main(PyTypeObject *type, PyObject *arg)
                {
                    JArray< ::java::lang::String > a0((jobject) NULL);

                    if (!parseArg(arg, "[s", &a0))
                    {
                        OBJ_CALL(::is::iclt::icenlp::facade::IceParserFacade::main(a0));
                        Py_RETURN_NONE;
                    }

                    PyErr_SetArgsError(type, "main", arg);
                    return NULL;
                }

                static PyObject *t_IceParserFacade_parse(t_IceParserFacade *self, PyObject *args)
                {
                    switch (PyTuple_GET_SIZE(args)) {
                      case 1:
                        {
                            ::java::lang::String a0((jobject) NULL);
                            ::java::lang::String result((jobject) NULL);

                            if (!parseArgs(args, "s", &a0))
                            {
                                OBJ_CALL(result = self->object.parse(a0));
                                return j2p(result);
                            }
                        }
                        break;
                      case 2:
                        {
                            ::java::lang::String a0((jobject) NULL);
                            jboolean a1;
                            ::java::lang::String result((jobject) NULL);

                            if (!parseArgs(args, "sZ", &a0, &a1))
                            {
                                OBJ_CALL(result = self->object.parse(a0, a1));
                                return j2p(result);
                            }
                        }
                        break;
                      case 3:
                        {
                            ::java::lang::String a0((jobject) NULL);
                            jboolean a1;
                            jboolean a2;
                            ::java::lang::String result((jobject) NULL);

                            if (!parseArgs(args, "sZZ", &a0, &a1, &a2))
                            {
                                OBJ_CALL(result = self->object.parse(a0, a1, a2));
                                return j2p(result);
                            }
                        }
                    }

                    PyErr_SetArgsError((PyObject *) self, "parse", args);
                    return NULL;
                }
            }
        }
    }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/lang/Enum.h"
#include "java/lang/Comparable.h"
#include "java/io/Serializable.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace java {
    namespace lang {

        ::java::lang::Class *Enum::class$ = NULL;
        jmethodID *Enum::mids$ = NULL;

        jclass Enum::initializeClass()
        {
            if (!class$)
            {

                jclass cls = (jclass) env->findClass("java/lang/Enum");

                mids$ = new jmethodID[max_mid];
                mids$[mid_compareTo_618aa849] = env->getMethodID(cls, "compareTo", "(Ljava/lang/Enum;)I");
                mids$[mid_compareTo_290588f1] = env->getMethodID(cls, "compareTo", "(Ljava/lang/Object;)I");
                mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
                mids$[mid_getDeclaringClass_44a5f2c9] = env->getMethodID(cls, "getDeclaringClass", "()Ljava/lang/Class;");
                mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
                mids$[mid_name_14c7b5c5] = env->getMethodID(cls, "name", "()Ljava/lang/String;");
                mids$[mid_ordinal_54c6a179] = env->getMethodID(cls, "ordinal", "()I");
                mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
                mids$[mid_valueOf_46e8491f] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/Class;Ljava/lang/String;)Ljava/lang/Enum;");
                mids$[mid_finalize_54c6a166] = env->getMethodID(cls, "finalize", "()V");
                mids$[mid_clone_846352c3] = env->getMethodID(cls, "clone", "()Ljava/lang/Object;");

                class$ = (::java::lang::Class *) new JObject(cls);
            }
            return (jclass) class$->this$;
        }

        jint Enum::compareTo(const Enum & a0) const
        {
            return env->callIntMethod(this$, mids$[mid_compareTo_618aa849], a0.this$);
        }

        jint Enum::compareTo(const ::java::lang::Object & a0) const
        {
            return env->callIntMethod(this$, mids$[mid_compareTo_290588f1], a0.this$);
        }

        jboolean Enum::equals(const ::java::lang::Object & a0) const
        {
            return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        ::java::lang::Class Enum::getDeclaringClass() const
        {
            return ::java::lang::Class(env->callObjectMethod(this$, mids$[mid_getDeclaringClass_44a5f2c9]));
        }

        jint Enum::hashCode() const
        {
            return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        ::java::lang::String Enum::name() const
        {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_name_14c7b5c5]));
        }

        jint Enum::ordinal() const
        {
            return env->callIntMethod(this$, mids$[mid_ordinal_54c6a179]);
        }

        ::java::lang::String Enum::toString() const
        {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }

        Enum Enum::valueOf(const ::java::lang::Class & a0, const ::java::lang::String & a1)
        {
            jclass cls = initializeClass();
            return Enum(env->callStaticObjectMethod(cls, mids$[mid_valueOf_46e8491f], a0.this$, a1.this$));
        }
    }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
    namespace lang {
        static PyObject *t_Enum_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Enum_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Enum_of_(t_Enum *self, PyObject *args);
        static PyObject *t_Enum_compareTo(t_Enum *self, PyObject *args);
        static PyObject *t_Enum_equals(t_Enum *self, PyObject *args);
        static PyObject *t_Enum_getDeclaringClass(t_Enum *self);
        static PyObject *t_Enum_hashCode(t_Enum *self, PyObject *args);
        static PyObject *t_Enum_name(t_Enum *self);
        static PyObject *t_Enum_ordinal(t_Enum *self);
        static PyObject *t_Enum_toString(t_Enum *self, PyObject *args);
        static PyObject *t_Enum_valueOf(PyTypeObject *type, PyObject *args);
        static PyObject *t_Enum_get__declaringClass(t_Enum *self, void *data);
        static PyObject *t_Enum_get__parameters_(t_Enum *self, void *data);
        static PyGetSetDef t_Enum__fields_[] = {
            DECLARE_GET_FIELD(t_Enum, declaringClass),
            DECLARE_GET_FIELD(t_Enum, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_Enum__methods_[] = {
            DECLARE_METHOD(t_Enum, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Enum, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Enum, of_, METH_VARARGS),
            DECLARE_METHOD(t_Enum, compareTo, METH_VARARGS),
            DECLARE_METHOD(t_Enum, equals, METH_VARARGS),
            DECLARE_METHOD(t_Enum, getDeclaringClass, METH_NOARGS),
            DECLARE_METHOD(t_Enum, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_Enum, name, METH_NOARGS),
            DECLARE_METHOD(t_Enum, ordinal, METH_NOARGS),
            DECLARE_METHOD(t_Enum, toString, METH_VARARGS),
            DECLARE_METHOD(t_Enum, valueOf, METH_VARARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(Enum, t_Enum, ::java::lang::Object, Enum, abstract_init, 0, 0, t_Enum__fields_, 0, 0);
        PyObject *t_Enum::wrap_Object(const Enum& object, PyTypeObject *E)
        {
            PyObject *obj = t_Enum::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
                t_Enum *self = (t_Enum *) obj;
                self->parameters[0] = E;
            }
            return obj;
        }

        PyObject *t_Enum::wrap_jobject(const jobject& object, PyTypeObject *E)
        {
            PyObject *obj = t_Enum::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
                t_Enum *self = (t_Enum *) obj;
                self->parameters[0] = E;
            }
            return obj;
        }

        void t_Enum::install(PyObject *module)
        {
            installType(&PY_TYPE(Enum), module, "Enum", 0);
        }

        void t_Enum::initialize(PyObject *module)
        {
            PyDict_SetItemString(PY_TYPE(Enum).tp_dict, "class_", make_descriptor(Enum::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Enum).tp_dict, "wrapfn_", make_descriptor(t_Enum::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Enum).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_Enum_cast_(PyTypeObject *type, PyObject *arg)
        {
            if (!(arg = castCheck(arg, Enum::initializeClass, 1)))
                return NULL;
            return t_Enum::wrap_Object(Enum(((t_Enum *) arg)->object.this$));
        }
        static PyObject *t_Enum_instance_(PyTypeObject *type, PyObject *arg)
        {
            if (!castCheck(arg, Enum::initializeClass, 0))
                Py_RETURN_FALSE;
            Py_RETURN_TRUE;
        }

        static PyObject *t_Enum_of_(t_Enum *self, PyObject *args)
        {
            if (!parseArg(args, "T", 1, &(self->parameters)))
                Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static PyObject *t_Enum_compareTo(t_Enum *self, PyObject *args)
        {
            switch (PyTuple_GET_SIZE(args)) {
              case 1:
                {
                    Enum a0((jobject) NULL);
                    PyTypeObject **p0;
                    jint result;

                    if (!parseArgs(args, "K", Enum::initializeClass, &a0, &p0, t_Enum::parameters_))
                    {
                        OBJ_CALL(result = self->object.compareTo(a0));
                        return PyInt_FromLong((long) result);
                    }
                }
                {
                    ::java::lang::Object a0((jobject) NULL);
                    jint result;

                    if (!parseArgs(args, "o", &a0))
                    {
                        OBJ_CALL(result = self->object.compareTo(a0));
                        return PyInt_FromLong((long) result);
                    }
                }
            }

            PyErr_SetArgsError((PyObject *) self, "compareTo", args);
            return NULL;
        }

        static PyObject *t_Enum_equals(t_Enum *self, PyObject *args)
        {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
                OBJ_CALL(result = self->object.equals(a0));
                Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(Enum), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_Enum_getDeclaringClass(t_Enum *self)
        {
            ::java::lang::Class result((jobject) NULL);
            OBJ_CALL(result = self->object.getDeclaringClass());
            return ::java::lang::t_Class::wrap_Object(result, self->parameters[0]);
        }

        static PyObject *t_Enum_hashCode(t_Enum *self, PyObject *args)
        {
            jint result;

            if (!parseArgs(args, ""))
            {
                OBJ_CALL(result = self->object.hashCode());
                return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(Enum), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_Enum_name(t_Enum *self)
        {
            ::java::lang::String result((jobject) NULL);
            OBJ_CALL(result = self->object.name());
            return j2p(result);
        }

        static PyObject *t_Enum_ordinal(t_Enum *self)
        {
            jint result;
            OBJ_CALL(result = self->object.ordinal());
            return PyInt_FromLong((long) result);
        }

        static PyObject *t_Enum_toString(t_Enum *self, PyObject *args)
        {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
                OBJ_CALL(result = self->object.toString());
                return j2p(result);
            }

            return callSuper(&PY_TYPE(Enum), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_Enum_valueOf(PyTypeObject *type, PyObject *args)
        {
            ::java::lang::Class a0((jobject) NULL);
            PyTypeObject **p0;
            ::java::lang::String a1((jobject) NULL);
            Enum result((jobject) NULL);

            if (!parseArgs(args, "Ks", ::java::lang::Class::initializeClass, &a0, &p0, ::java::lang::t_Class::parameters_, &a1))
            {
                OBJ_CALL(result = ::java::lang::Enum::valueOf(a0, a1));
                return p0 != NULL && p0[0] != NULL ? wrapType(p0[0], result.this$) : t_Enum::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "valueOf", args);
            return NULL;
        }
        static PyObject *t_Enum_get__parameters_(t_Enum *self, void *data)
        {
            return typeParameters(self->parameters, sizeof(self->parameters));
        }

        static PyObject *t_Enum_get__declaringClass(t_Enum *self, void *data)
        {
            ::java::lang::Class value((jobject) NULL);
            OBJ_CALL(value = self->object.getDeclaringClass());
            return ::java::lang::t_Class::wrap_Object(value);
        }
    }
}
#include <jni.h>
#include "JCCEnv.h"
#include "is/iclt/icenlp/core/tritagger/TriTaggerOutput.h"
#include "is/iclt/icenlp/core/tokenizer/TokenTags.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace is {
    namespace iclt {
        namespace icenlp {
            namespace core {
                namespace tritagger {

                    ::java::lang::Class *TriTaggerOutput::class$ = NULL;
                    jmethodID *TriTaggerOutput::mids$ = NULL;

                    jclass TriTaggerOutput::initializeClass()
                    {
                        if (!class$)
                        {

                            jclass cls = (jclass) env->findClass("is/iclt/icenlp/core/tritagger/TriTaggerOutput");

                            mids$ = new jmethodID[max_mid];
                            mids$[mid_init$_39c7bd3c] = env->getMethodID(cls, "<init>", "(I)V");
                            mids$[mid_buildOutput_8d34d1cd] = env->getMethodID(cls, "buildOutput", "(Lis/iclt/icenlp/core/tokenizer/TokenTags;II)Ljava/lang/String;");

                            class$ = (::java::lang::Class *) new JObject(cls);
                        }
                        return (jclass) class$->this$;
                    }

                    TriTaggerOutput::TriTaggerOutput(jint a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_39c7bd3c, a0)) {}

                    ::java::lang::String TriTaggerOutput::buildOutput(const ::is::iclt::icenlp::core::tokenizer::TokenTags & a0, jint a1, jint a2) const
                    {
                        return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_buildOutput_8d34d1cd], a0.this$, a1, a2));
                    }
                }
            }
        }
    }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace is {
    namespace iclt {
        namespace icenlp {
            namespace core {
                namespace tritagger {
                    static PyObject *t_TriTaggerOutput_cast_(PyTypeObject *type, PyObject *arg);
                    static PyObject *t_TriTaggerOutput_instance_(PyTypeObject *type, PyObject *arg);
                    static int t_TriTaggerOutput_init_(t_TriTaggerOutput *self, PyObject *args, PyObject *kwds);
                    static PyObject *t_TriTaggerOutput_buildOutput(t_TriTaggerOutput *self, PyObject *args);

                    static PyMethodDef t_TriTaggerOutput__methods_[] = {
                        DECLARE_METHOD(t_TriTaggerOutput, cast_, METH_O | METH_CLASS),
                        DECLARE_METHOD(t_TriTaggerOutput, instance_, METH_O | METH_CLASS),
                        DECLARE_METHOD(t_TriTaggerOutput, buildOutput, METH_VARARGS),
                        { NULL, NULL, 0, NULL }
                    };

                    DECLARE_TYPE(TriTaggerOutput, t_TriTaggerOutput, ::java::lang::Object, TriTaggerOutput, t_TriTaggerOutput_init_, 0, 0, 0, 0, 0);

                    void t_TriTaggerOutput::install(PyObject *module)
                    {
                        installType(&PY_TYPE(TriTaggerOutput), module, "TriTaggerOutput", 0);
                    }

                    void t_TriTaggerOutput::initialize(PyObject *module)
                    {
                        PyDict_SetItemString(PY_TYPE(TriTaggerOutput).tp_dict, "class_", make_descriptor(TriTaggerOutput::initializeClass, 1));
                        PyDict_SetItemString(PY_TYPE(TriTaggerOutput).tp_dict, "wrapfn_", make_descriptor(t_TriTaggerOutput::wrap_jobject));
                        PyDict_SetItemString(PY_TYPE(TriTaggerOutput).tp_dict, "boxfn_", make_descriptor(boxObject));
                    }

                    static PyObject *t_TriTaggerOutput_cast_(PyTypeObject *type, PyObject *arg)
                    {
                        if (!(arg = castCheck(arg, TriTaggerOutput::initializeClass, 1)))
                            return NULL;
                        return t_TriTaggerOutput::wrap_Object(TriTaggerOutput(((t_TriTaggerOutput *) arg)->object.this$));
                    }
                    static PyObject *t_TriTaggerOutput_instance_(PyTypeObject *type, PyObject *arg)
                    {
                        if (!castCheck(arg, TriTaggerOutput::initializeClass, 0))
                            Py_RETURN_FALSE;
                        Py_RETURN_TRUE;
                    }

                    static int t_TriTaggerOutput_init_(t_TriTaggerOutput *self, PyObject *args, PyObject *kwds)
                    {
                        jint a0;
                        TriTaggerOutput object((jobject) NULL);

                        if (!parseArgs(args, "I", &a0))
                        {
                            INT_CALL(object = TriTaggerOutput(a0));
                            self->object = object;
                        }
                        else
                        {
                            PyErr_SetArgsError((PyObject *) self, "__init__", args);
                            return -1;
                        }

                        return 0;
                    }

                    static PyObject *t_TriTaggerOutput_buildOutput(t_TriTaggerOutput *self, PyObject *args)
                    {
                        ::is::iclt::icenlp::core::tokenizer::TokenTags a0((jobject) NULL);
                        jint a1;
                        jint a2;
                        ::java::lang::String result((jobject) NULL);

                        if (!parseArgs(args, "kII", ::is::iclt::icenlp::core::tokenizer::TokenTags::initializeClass, &a0, &a1, &a2))
                        {
                            OBJ_CALL(result = self->object.buildOutput(a0, a1, a2));
                            return j2p(result);
                        }

                        PyErr_SetArgsError((PyObject *) self, "buildOutput", args);
                        return NULL;
                    }
                }
            }
        }
    }
}
#include <jni.h>
#include "JCCEnv.h"
#include "is/iclt/icenlp/core/utils/Tag.h"
#include "java/lang/Character.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace is {
    namespace iclt {
        namespace icenlp {
            namespace core {
                namespace utils {

                    ::java::lang::Class *Tag::class$ = NULL;
                    jmethodID *Tag::mids$ = NULL;

                    jclass Tag::initializeClass()
                    {
                        if (!class$)
                        {

                            jclass cls = (jclass) env->findClass("is/iclt/icenlp/core/utils/Tag");

                            mids$ = new jmethodID[max_mid];
                            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                            mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
                            mids$[mid_clearTagStr_54c6a166] = env->getMethodID(cls, "clearTagStr", "()V");
                            mids$[mid_getFirstLetter_ecb29eea] = env->getMethodID(cls, "getFirstLetter", "()Ljava/lang/Character;");
                            mids$[mid_getTagStr_14c7b5c5] = env->getMethodID(cls, "getTagStr", "()Ljava/lang/String;");
                            mids$[mid_isValid_54c6a16a] = env->getMethodID(cls, "isValid", "()Z");
                            mids$[mid_setTagStr_5fdc3f48] = env->getMethodID(cls, "setTagStr", "(Ljava/lang/String;)V");
                            mids$[mid_setValid_bb0c767f] = env->getMethodID(cls, "setValid", "(Z)V");
                            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
                            mids$[mid_interpretTag_54c6a166] = env->getMethodID(cls, "interpretTag", "()V");

                            class$ = (::java::lang::Class *) new JObject(cls);
                        }
                        return (jclass) class$->this$;
                    }

                    Tag::Tag() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

                    Tag::Tag(const ::java::lang::String & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}

                    void Tag::clearTagStr() const
                    {
                        env->callVoidMethod(this$, mids$[mid_clearTagStr_54c6a166]);
                    }

                    ::java::lang::Character Tag::getFirstLetter() const
                    {
                        return ::java::lang::Character(env->callObjectMethod(this$, mids$[mid_getFirstLetter_ecb29eea]));
                    }

                    ::java::lang::String Tag::getTagStr() const
                    {
                        return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getTagStr_14c7b5c5]));
                    }

                    jboolean Tag::isValid() const
                    {
                        return env->callBooleanMethod(this$, mids$[mid_isValid_54c6a16a]);
                    }

                    void Tag::setTagStr(const ::java::lang::String & a0) const
                    {
                        env->callVoidMethod(this$, mids$[mid_setTagStr_5fdc3f48], a0.this$);
                    }

                    void Tag::setValid(jboolean a0) const
                    {
                        env->callVoidMethod(this$, mids$[mid_setValid_bb0c767f], a0);
                    }

                    ::java::lang::String Tag::toString() const
                    {
                        return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
                    }
                }
            }
        }
    }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace is {
    namespace iclt {
        namespace icenlp {
            namespace core {
                namespace utils {
                    static PyObject *t_Tag_cast_(PyTypeObject *type, PyObject *arg);
                    static PyObject *t_Tag_instance_(PyTypeObject *type, PyObject *arg);
                    static int t_Tag_init_(t_Tag *self, PyObject *args, PyObject *kwds);
                    static PyObject *t_Tag_clearTagStr(t_Tag *self);
                    static PyObject *t_Tag_getFirstLetter(t_Tag *self);
                    static PyObject *t_Tag_getTagStr(t_Tag *self);
                    static PyObject *t_Tag_isValid(t_Tag *self);
                    static PyObject *t_Tag_setTagStr(t_Tag *self, PyObject *arg);
                    static PyObject *t_Tag_setValid(t_Tag *self, PyObject *arg);
                    static PyObject *t_Tag_toString(t_Tag *self, PyObject *args);
                    static PyObject *t_Tag_get__firstLetter(t_Tag *self, void *data);
                    static PyObject *t_Tag_get__tagStr(t_Tag *self, void *data);
                    static int t_Tag_set__tagStr(t_Tag *self, PyObject *arg, void *data);
                    static PyObject *t_Tag_get__valid(t_Tag *self, void *data);
                    static int t_Tag_set__valid(t_Tag *self, PyObject *arg, void *data);
                    static PyGetSetDef t_Tag__fields_[] = {
                        DECLARE_GET_FIELD(t_Tag, firstLetter),
                        DECLARE_GETSET_FIELD(t_Tag, tagStr),
                        DECLARE_GETSET_FIELD(t_Tag, valid),
                        { NULL, NULL, NULL, NULL, NULL }
                    };

                    static PyMethodDef t_Tag__methods_[] = {
                        DECLARE_METHOD(t_Tag, cast_, METH_O | METH_CLASS),
                        DECLARE_METHOD(t_Tag, instance_, METH_O | METH_CLASS),
                        DECLARE_METHOD(t_Tag, clearTagStr, METH_NOARGS),
                        DECLARE_METHOD(t_Tag, getFirstLetter, METH_NOARGS),
                        DECLARE_METHOD(t_Tag, getTagStr, METH_NOARGS),
                        DECLARE_METHOD(t_Tag, isValid, METH_NOARGS),
                        DECLARE_METHOD(t_Tag, setTagStr, METH_O),
                        DECLARE_METHOD(t_Tag, setValid, METH_O),
                        DECLARE_METHOD(t_Tag, toString, METH_VARARGS),
                        { NULL, NULL, 0, NULL }
                    };

                    DECLARE_TYPE(Tag, t_Tag, ::java::lang::Object, Tag, t_Tag_init_, 0, 0, t_Tag__fields_, 0, 0);

                    void t_Tag::install(PyObject *module)
                    {
                        installType(&PY_TYPE(Tag), module, "Tag", 0);
                    }

                    void t_Tag::initialize(PyObject *module)
                    {
                        PyDict_SetItemString(PY_TYPE(Tag).tp_dict, "class_", make_descriptor(Tag::initializeClass, 1));
                        PyDict_SetItemString(PY_TYPE(Tag).tp_dict, "wrapfn_", make_descriptor(t_Tag::wrap_jobject));
                        PyDict_SetItemString(PY_TYPE(Tag).tp_dict, "boxfn_", make_descriptor(boxObject));
                    }

                    static PyObject *t_Tag_cast_(PyTypeObject *type, PyObject *arg)
                    {
                        if (!(arg = castCheck(arg, Tag::initializeClass, 1)))
                            return NULL;
                        return t_Tag::wrap_Object(Tag(((t_Tag *) arg)->object.this$));
                    }
                    static PyObject *t_Tag_instance_(PyTypeObject *type, PyObject *arg)
                    {
                        if (!castCheck(arg, Tag::initializeClass, 0))
                            Py_RETURN_FALSE;
                        Py_RETURN_TRUE;
                    }

                    static int t_Tag_init_(t_Tag *self, PyObject *args, PyObject *kwds)
                    {
                        switch (PyTuple_GET_SIZE(args)) {
                          case 0:
                            {
                                Tag object((jobject) NULL);

                                INT_CALL(object = Tag());
                                self->object = object;
                                break;
                            }
                            goto err;
                          case 1:
                            {
                                ::java::lang::String a0((jobject) NULL);
                                Tag object((jobject) NULL);

                                if (!parseArgs(args, "s", &a0))
                                {
                                    INT_CALL(object = Tag(a0));
                                    self->object = object;
                                    break;
                                }
                            }
                          default:
                          err:
                            PyErr_SetArgsError((PyObject *) self, "__init__", args);
                            return -1;
                        }

                        return 0;
                    }

                    static PyObject *t_Tag_clearTagStr(t_Tag *self)
                    {
                        OBJ_CALL(self->object.clearTagStr());
                        Py_RETURN_NONE;
                    }

                    static PyObject *t_Tag_getFirstLetter(t_Tag *self)
                    {
                        ::java::lang::Character result((jobject) NULL);
                        OBJ_CALL(result = self->object.getFirstLetter());
                        return ::java::lang::t_Character::wrap_Object(result);
                    }

                    static PyObject *t_Tag_getTagStr(t_Tag *self)
                    {
                        ::java::lang::String result((jobject) NULL);
                        OBJ_CALL(result = self->object.getTagStr());
                        return j2p(result);
                    }

                    static PyObject *t_Tag_isValid(t_Tag *self)
                    {
                        jboolean result;
                        OBJ_CALL(result = self->object.isValid());
                        Py_RETURN_BOOL(result);
                    }

                    static PyObject *t_Tag_setTagStr(t_Tag *self, PyObject *arg)
                    {
                        ::java::lang::String a0((jobject) NULL);

                        if (!parseArg(arg, "s", &a0))
                        {
                            OBJ_CALL(self->object.setTagStr(a0));
                            Py_RETURN_NONE;
                        }

                        PyErr_SetArgsError((PyObject *) self, "setTagStr", arg);
                        return NULL;
                    }

                    static PyObject *t_Tag_setValid(t_Tag *self, PyObject *arg)
                    {
                        jboolean a0;

                        if (!parseArg(arg, "Z", &a0))
                        {
                            OBJ_CALL(self->object.setValid(a0));
                            Py_RETURN_NONE;
                        }

                        PyErr_SetArgsError((PyObject *) self, "setValid", arg);
                        return NULL;
                    }

                    static PyObject *t_Tag_toString(t_Tag *self, PyObject *args)
                    {
                        ::java::lang::String result((jobject) NULL);

                        if (!parseArgs(args, ""))
                        {
                            OBJ_CALL(result = self->object.toString());
                            return j2p(result);
                        }

                        return callSuper(&PY_TYPE(Tag), (PyObject *) self, "toString", args, 2);
                    }

                    static PyObject *t_Tag_get__firstLetter(t_Tag *self, void *data)
                    {
                        ::java::lang::Character value((jobject) NULL);
                        OBJ_CALL(value = self->object.getFirstLetter());
                        return ::java::lang::t_Character::wrap_Object(value);
                    }

                    static PyObject *t_Tag_get__tagStr(t_Tag *self, void *data)
                    {
                        ::java::lang::String value((jobject) NULL);
                        OBJ_CALL(value = self->object.getTagStr());
                        return j2p(value);
                    }
                    static int t_Tag_set__tagStr(t_Tag *self, PyObject *arg, void *data)
                    {
                        {
                            ::java::lang::String value((jobject) NULL);
                            if (!parseArg(arg, "s", &value))
                            {
                                INT_CALL(self->object.setTagStr(value));
                                return 0;
                            }
                        }
                        PyErr_SetArgsError((PyObject *) self, "tagStr", arg);
                        return -1;
                    }

                    static PyObject *t_Tag_get__valid(t_Tag *self, void *data)
                    {
                        jboolean value;
                        OBJ_CALL(value = self->object.isValid());
                        Py_RETURN_BOOL(value);
                    }
                    static int t_Tag_set__valid(t_Tag *self, PyObject *arg, void *data)
                    {
                        {
                            jboolean value;
                            if (!parseArg(arg, "Z", &value))
                            {
                                INT_CALL(self->object.setValid(value));
                                return 0;
                            }
                        }
                        PyErr_SetArgsError((PyObject *) self, "valid", arg);
                        return -1;
                    }
                }
            }
        }
    }
}
#include <jni.h>
#include "JCCEnv.h"
#include "is/iclt/icenlp/core/iceparser/Case_AP.h"
#include "java/io/IOException.h"
#include "java/io/Reader.h"
#include "java/io/Writer.h"
#include "java/lang/Class.h"
#include "java/io/InputStream.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace is {
    namespace iclt {
        namespace icenlp {
            namespace core {
                namespace iceparser {

                    ::java::lang::Class *Case_AP::class$ = NULL;
                    jmethodID *Case_AP::mids$ = NULL;
                    jint Case_AP::YYEOF = (jint) 0;
                    jint Case_AP::YYINITIAL = (jint) 0;

                    jclass Case_AP::initializeClass()
                    {
                        if (!class$)
                        {

                            jclass cls = (jclass) env->findClass("is/iclt/icenlp/core/iceparser/Case_AP");

                            mids$ = new jmethodID[max_mid];
                            mids$[mid_init$_cf2e3c10] = env->getMethodID(cls, "<init>", "(Ljava/io/Reader;)V");
                            mids$[mid_init$_be2e4f90] = env->getMethodID(cls, "<init>", "(Ljava/io/InputStream;)V");
                            mids$[mid_main_4dd4540c] = env->getStaticMethodID(cls, "main", "([Ljava/lang/String;)V");
                            mids$[mid_parse_5bcd5850] = env->getMethodID(cls, "parse", "(Ljava/io/Writer;)V");
                            mids$[mid_yybegin_39c7bd3c] = env->getMethodID(cls, "yybegin", "(I)V");
                            mids$[mid_yycharat_39c7bd29] = env->getMethodID(cls, "yycharat", "(I)C");
                            mids$[mid_yyclose_54c6a166] = env->getMethodID(cls, "yyclose", "()V");
                            mids$[mid_yylength_54c6a179] = env->getMethodID(cls, "yylength", "()I");
                            mids$[mid_yylex_54c6a179] = env->getMethodID(cls, "yylex", "()I");
                            mids$[mid_yypushback_39c7bd3c] = env->getMethodID(cls, "yypushback", "(I)V");
                            mids$[mid_yyreset_cf2e3c10] = env->getMethodID(cls, "yyreset", "(Ljava/io/Reader;)V");
                            mids$[mid_yystate_54c6a179] = env->getMethodID(cls, "yystate", "()I");
                            mids$[mid_yytext_14c7b5c5] = env->getMethodID(cls, "yytext", "()Ljava/lang/String;");

                            class$ = (::java::lang::Class *) new JObject(cls);
                            cls = (jclass) class$->this$;

                            YYEOF = env->getStaticIntField(cls, "YYEOF");
                            YYINITIAL = env->getStaticIntField(cls, "YYINITIAL");
                        }
                        return (jclass) class$->this$;
                    }

                    Case_AP::Case_AP(const ::java::io::Reader & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_cf2e3c10, a0.this$)) {}

                    Case_AP::Case_AP(const ::java::io::InputStream & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_be2e4f90, a0.this$)) {}

                    void Case_AP::main(const JArray< ::java::lang::String > & a0)
                    {
                        jclass cls = initializeClass();
                        env->callStaticVoidMethod(cls, mids$[mid_main_4dd4540c], a0.this$);
                    }

                    void Case_AP::parse(const ::java::io::Writer & a0) const
                    {
                        env->callVoidMethod(this$, mids$[mid_parse_5bcd5850], a0.this$);
                    }

                    void Case_AP::yybegin(jint a0) const
                    {
                        env->callVoidMethod(this$, mids$[mid_yybegin_39c7bd3c], a0);
                    }

                    jchar Case_AP::yycharat(jint a0) const
                    {
                        return env->callCharMethod(this$, mids$[mid_yycharat_39c7bd29], a0);
                    }

                    void Case_AP::yyclose() const
                    {
                        env->callVoidMethod(this$, mids$[mid_yyclose_54c6a166]);
                    }

                    jint Case_AP::yylength() const
                    {
                        return env->callIntMethod(this$, mids$[mid_yylength_54c6a179]);
                    }

                    jint Case_AP::yylex() const
                    {
                        return env->callIntMethod(this$, mids$[mid_yylex_54c6a179]);
                    }

                    void Case_AP::yypushback(jint a0) const
                    {
                        env->callVoidMethod(this$, mids$[mid_yypushback_39c7bd3c], a0);
                    }

                    void Case_AP::yyreset(const ::java::io::Reader & a0) const
                    {
                        env->callVoidMethod(this$, mids$[mid_yyreset_cf2e3c10], a0.this$);
                    }

                    jint Case_AP::yystate() const
                    {
                        return env->callIntMethod(this$, mids$[mid_yystate_54c6a179]);
                    }

                    ::java::lang::String Case_AP::yytext() const
                    {
                        return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_yytext_14c7b5c5]));
                    }
                }
            }
        }
    }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace is {
    namespace iclt {
        namespace icenlp {
            namespace core {
                namespace iceparser {
                    static PyObject *t_Case_AP_cast_(PyTypeObject *type, PyObject *arg);
                    static PyObject *t_Case_AP_instance_(PyTypeObject *type, PyObject *arg);
                    static int t_Case_AP_init_(t_Case_AP *self, PyObject *args, PyObject *kwds);
                    static PyObject *t_Case_AP_main(PyTypeObject *type, PyObject *arg);
                    static PyObject *t_Case_AP_parse(t_Case_AP *self, PyObject *arg);
                    static PyObject *t_Case_AP_yybegin(t_Case_AP *self, PyObject *arg);
                    static PyObject *t_Case_AP_yycharat(t_Case_AP *self, PyObject *arg);
                    static PyObject *t_Case_AP_yyclose(t_Case_AP *self);
                    static PyObject *t_Case_AP_yylength(t_Case_AP *self);
                    static PyObject *t_Case_AP_yylex(t_Case_AP *self);
                    static PyObject *t_Case_AP_yypushback(t_Case_AP *self, PyObject *arg);
                    static PyObject *t_Case_AP_yyreset(t_Case_AP *self, PyObject *arg);
                    static PyObject *t_Case_AP_yystate(t_Case_AP *self);
                    static PyObject *t_Case_AP_yytext(t_Case_AP *self);

                    static PyMethodDef t_Case_AP__methods_[] = {
                        DECLARE_METHOD(t_Case_AP, cast_, METH_O | METH_CLASS),
                        DECLARE_METHOD(t_Case_AP, instance_, METH_O | METH_CLASS),
                        DECLARE_METHOD(t_Case_AP, main, METH_O | METH_CLASS),
                        DECLARE_METHOD(t_Case_AP, parse, METH_O),
                        DECLARE_METHOD(t_Case_AP, yybegin, METH_O),
                        DECLARE_METHOD(t_Case_AP, yycharat, METH_O),
                        DECLARE_METHOD(t_Case_AP, yyclose, METH_NOARGS),
                        DECLARE_METHOD(t_Case_AP, yylength, METH_NOARGS),
                        DECLARE_METHOD(t_Case_AP, yylex, METH_NOARGS),
                        DECLARE_METHOD(t_Case_AP, yypushback, METH_O),
                        DECLARE_METHOD(t_Case_AP, yyreset, METH_O),
                        DECLARE_METHOD(t_Case_AP, yystate, METH_NOARGS),
                        DECLARE_METHOD(t_Case_AP, yytext, METH_NOARGS),
                        { NULL, NULL, 0, NULL }
                    };

                    DECLARE_TYPE(Case_AP, t_Case_AP, ::java::lang::Object, Case_AP, t_Case_AP_init_, 0, 0, 0, 0, 0);

                    void t_Case_AP::install(PyObject *module)
                    {
                        installType(&PY_TYPE(Case_AP), module, "Case_AP", 0);
                    }

                    void t_Case_AP::initialize(PyObject *module)
                    {
                        PyDict_SetItemString(PY_TYPE(Case_AP).tp_dict, "class_", make_descriptor(Case_AP::initializeClass, 1));
                        PyDict_SetItemString(PY_TYPE(Case_AP).tp_dict, "wrapfn_", make_descriptor(t_Case_AP::wrap_jobject));
                        PyDict_SetItemString(PY_TYPE(Case_AP).tp_dict, "boxfn_", make_descriptor(boxObject));
                        Case_AP::initializeClass();
                        PyDict_SetItemString(PY_TYPE(Case_AP).tp_dict, "YYEOF", make_descriptor(Case_AP::YYEOF));
                        PyDict_SetItemString(PY_TYPE(Case_AP).tp_dict, "YYINITIAL", make_descriptor(Case_AP::YYINITIAL));
                    }

                    static PyObject *t_Case_AP_cast_(PyTypeObject *type, PyObject *arg)
                    {
                        if (!(arg = castCheck(arg, Case_AP::initializeClass, 1)))
                            return NULL;
                        return t_Case_AP::wrap_Object(Case_AP(((t_Case_AP *) arg)->object.this$));
                    }
                    static PyObject *t_Case_AP_instance_(PyTypeObject *type, PyObject *arg)
                    {
                        if (!castCheck(arg, Case_AP::initializeClass, 0))
                            Py_RETURN_FALSE;
                        Py_RETURN_TRUE;
                    }

                    static int t_Case_AP_init_(t_Case_AP *self, PyObject *args, PyObject *kwds)
                    {
                        switch (PyTuple_GET_SIZE(args)) {
                          case 1:
                            {
                                ::java::io::Reader a0((jobject) NULL);
                                Case_AP object((jobject) NULL);

                                if (!parseArgs(args, "k", ::java::io::Reader::initializeClass, &a0))
                                {
                                    INT_CALL(object = Case_AP(a0));
                                    self->object = object;
                                    break;
                                }
                            }
                            {
                                ::java::io::InputStream a0((jobject) NULL);
                                Case_AP object((jobject) NULL);

                                if (!parseArgs(args, "k", ::java::io::InputStream::initializeClass, &a0))
                                {
                                    INT_CALL(object = Case_AP(a0));
                                    self->object = object;
                                    break;
                                }
                            }
                          default:
                            PyErr_SetArgsError((PyObject *) self, "__init__", args);
                            return -1;
                        }

                        return 0;
                    }

                    static PyObject *t_Case_AP_main(PyTypeObject *type, PyObject *arg)
                    {
                        JArray< ::java::lang::String > a0((jobject) NULL);

                        if (!parseArg(arg, "[s", &a0))
                        {
                            OBJ_CALL(::is::iclt::icenlp::core::iceparser::Case_AP::main(a0));
                            Py_RETURN_NONE;
                        }

                        PyErr_SetArgsError(type, "main", arg);
                        return NULL;
                    }

                    static PyObject *t_Case_AP_parse(t_Case_AP *self, PyObject *arg)
                    {
                        ::java::io::Writer a0((jobject) NULL);

                        if (!parseArg(arg, "k", ::java::io::Writer::initializeClass, &a0))
                        {
                            OBJ_CALL(self->object.parse(a0));
                            Py_RETURN_NONE;
                        }

                        PyErr_SetArgsError((PyObject *) self, "parse", arg);
                        return NULL;
                    }

                    static PyObject *t_Case_AP_yybegin(t_Case_AP *self, PyObject *arg)
                    {
                        jint a0;

                        if (!parseArg(arg, "I", &a0))
                        {
                            OBJ_CALL(self->object.yybegin(a0));
                            Py_RETURN_NONE;
                        }

                        PyErr_SetArgsError((PyObject *) self, "yybegin", arg);
                        return NULL;
                    }

                    static PyObject *t_Case_AP_yycharat(t_Case_AP *self, PyObject *arg)
                    {
                        jint a0;
                        jchar result;

                        if (!parseArg(arg, "I", &a0))
                        {
                            OBJ_CALL(result = self->object.yycharat(a0));
                            return PyUnicode_FromUnicode((Py_UNICODE *) &result, 1);
                        }

                        PyErr_SetArgsError((PyObject *) self, "yycharat", arg);
                        return NULL;
                    }

                    static PyObject *t_Case_AP_yyclose(t_Case_AP *self)
                    {
                        OBJ_CALL(self->object.yyclose());
                        Py_RETURN_NONE;
                    }

                    static PyObject *t_Case_AP_yylength(t_Case_AP *self)
                    {
                        jint result;
                        OBJ_CALL(result = self->object.yylength());
                        return PyInt_FromLong((long) result);
                    }

                    static PyObject *t_Case_AP_yylex(t_Case_AP *self)
                    {
                        jint result;
                        OBJ_CALL(result = self->object.yylex());
                        return PyInt_FromLong((long) result);
                    }

                    static PyObject *t_Case_AP_yypushback(t_Case_AP *self, PyObject *arg)
                    {
                        jint a0;

                        if (!parseArg(arg, "I", &a0))
                        {
                            OBJ_CALL(self->object.yypushback(a0));
                            Py_RETURN_NONE;
                        }

                        PyErr_SetArgsError((PyObject *) self, "yypushback", arg);
                        return NULL;
                    }

                    static PyObject *t_Case_AP_yyreset(t_Case_AP *self, PyObject *arg)
                    {
                        ::java::io::Reader a0((jobject) NULL);

                        if (!parseArg(arg, "k", ::java::io::Reader::initializeClass, &a0))
                        {
                            OBJ_CALL(self->object.yyreset(a0));
                            Py_RETURN_NONE;
                        }

                        PyErr_SetArgsError((PyObject *) self, "yyreset", arg);
                        return NULL;
                    }

                    static PyObject *t_Case_AP_yystate(t_Case_AP *self)
                    {
                        jint result;
                        OBJ_CALL(result = self->object.yystate());
                        return PyInt_FromLong((long) result);
                    }

                    static PyObject *t_Case_AP_yytext(t_Case_AP *self)
                    {
                        ::java::lang::String result((jobject) NULL);
                        OBJ_CALL(result = self->object.yytext());
                        return j2p(result);
                    }
                }
            }
        }
    }
}
#include <jni.h>
#include "JCCEnv.h"
#include "is/iclt/icenlp/core/formald/tags/TagFormat.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace is {
    namespace iclt {
        namespace icenlp {
            namespace core {
                namespace formald {
                    namespace tags {

                        ::java::lang::Class *TagFormat::class$ = NULL;
                        jmethodID *TagFormat::mids$ = NULL;
                        TagFormat *TagFormat::ICE1 = NULL;
                        TagFormat *TagFormat::ICE2 = NULL;
                        TagFormat *TagFormat::XML = NULL;

                        jclass TagFormat::initializeClass()
                        {
                            if (!class$)
                            {

                                jclass cls = (jclass) env->findClass("is/iclt/icenlp/core/formald/tags/TagFormat");

                                mids$ = new jmethodID[max_mid];
                                mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                                mids$[mid_getDefault_f7326a91] = env->getStaticMethodID(cls, "getDefault", "()Lis/iclt/icenlp/core/formald/tags/TagFormat;");

                                class$ = (::java::lang::Class *) new JObject(cls);
                                cls = (jclass) class$->this$;

                                ICE1 = new TagFormat(env->getStaticObjectField(cls, "ICE1", "Lis/iclt/icenlp/core/formald/tags/TagFormat;"));
                                ICE2 = new TagFormat(env->getStaticObjectField(cls, "ICE2", "Lis/iclt/icenlp/core/formald/tags/TagFormat;"));
                                XML = new TagFormat(env->getStaticObjectField(cls, "XML", "Lis/iclt/icenlp/core/formald/tags/TagFormat;"));
                            }
                            return (jclass) class$->this$;
                        }

                        TagFormat::TagFormat() : ::is::iclt::icenlp::core::formald::Format(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

                        TagFormat TagFormat::getDefault()
                        {
                            jclass cls = initializeClass();
                            return TagFormat(env->callStaticObjectMethod(cls, mids$[mid_getDefault_f7326a91]));
                        }
                    }
                }
            }
        }
    }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace is {
    namespace iclt {
        namespace icenlp {
            namespace core {
                namespace formald {
                    namespace tags {
                        static PyObject *t_TagFormat_cast_(PyTypeObject *type, PyObject *arg);
                        static PyObject *t_TagFormat_instance_(PyTypeObject *type, PyObject *arg);
                        static int t_TagFormat_init_(t_TagFormat *self, PyObject *args, PyObject *kwds);
                        static PyObject *t_TagFormat_getDefault(PyTypeObject *type);
                        static PyObject *t_TagFormat_get__default(t_TagFormat *self, void *data);
                        static PyGetSetDef t_TagFormat__fields_[] = {
                            DECLARE_GET_FIELD(t_TagFormat, default),
                            { NULL, NULL, NULL, NULL, NULL }
                        };

                        static PyMethodDef t_TagFormat__methods_[] = {
                            DECLARE_METHOD(t_TagFormat, cast_, METH_O | METH_CLASS),
                            DECLARE_METHOD(t_TagFormat, instance_, METH_O | METH_CLASS),
                            DECLARE_METHOD(t_TagFormat, getDefault, METH_NOARGS | METH_CLASS),
                            { NULL, NULL, 0, NULL }
                        };

                        DECLARE_TYPE(TagFormat, t_TagFormat, ::is::iclt::icenlp::core::formald::Format, TagFormat, t_TagFormat_init_, 0, 0, t_TagFormat__fields_, 0, 0);

                        void t_TagFormat::install(PyObject *module)
                        {
                            installType(&PY_TYPE(TagFormat), module, "TagFormat", 0);
                        }

                        void t_TagFormat::initialize(PyObject *module)
                        {
                            PyDict_SetItemString(PY_TYPE(TagFormat).tp_dict, "class_", make_descriptor(TagFormat::initializeClass, 1));
                            PyDict_SetItemString(PY_TYPE(TagFormat).tp_dict, "wrapfn_", make_descriptor(t_TagFormat::wrap_jobject));
                            PyDict_SetItemString(PY_TYPE(TagFormat).tp_dict, "boxfn_", make_descriptor(boxObject));
                            TagFormat::initializeClass();
                            PyDict_SetItemString(PY_TYPE(TagFormat).tp_dict, "ICE1", make_descriptor(t_TagFormat::wrap_Object(*TagFormat::ICE1)));
                            PyDict_SetItemString(PY_TYPE(TagFormat).tp_dict, "ICE2", make_descriptor(t_TagFormat::wrap_Object(*TagFormat::ICE2)));
                            PyDict_SetItemString(PY_TYPE(TagFormat).tp_dict, "XML", make_descriptor(t_TagFormat::wrap_Object(*TagFormat::XML)));
                        }

                        static PyObject *t_TagFormat_cast_(PyTypeObject *type, PyObject *arg)
                        {
                            if (!(arg = castCheck(arg, TagFormat::initializeClass, 1)))
                                return NULL;
                            return t_TagFormat::wrap_Object(TagFormat(((t_TagFormat *) arg)->object.this$));
                        }
                        static PyObject *t_TagFormat_instance_(PyTypeObject *type, PyObject *arg)
                        {
                            if (!castCheck(arg, TagFormat::initializeClass, 0))
                                Py_RETURN_FALSE;
                            Py_RETURN_TRUE;
                        }

                        static int t_TagFormat_init_(t_TagFormat *self, PyObject *args, PyObject *kwds)
                        {
                            TagFormat object((jobject) NULL);

                            INT_CALL(object = TagFormat());
                            self->object = object;

                            return 0;
                        }

                        static PyObject *t_TagFormat_getDefault(PyTypeObject *type)
                        {
                            TagFormat result((jobject) NULL);
                            OBJ_CALL(result = ::is::iclt::icenlp::core::formald::tags::TagFormat::getDefault());
                            return t_TagFormat::wrap_Object(result);
                        }

                        static PyObject *t_TagFormat_get__default(t_TagFormat *self, void *data)
                        {
                            TagFormat value((jobject) NULL);
                            OBJ_CALL(value = self->object.getDefault());
                            return t_TagFormat::wrap_Object(value);
                        }
                    }
                }
            }
        }
    }
}
#include <jni.h>
#include "JCCEnv.h"
#include "is/iclt/icenlp/core/iceparser/Func_OBJ.h"
#include "java/io/IOException.h"
#include "java/io/Reader.h"
#include "java/io/Writer.h"
#include "java/lang/Class.h"
#include "java/io/InputStream.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace is {
    namespace iclt {
        namespace icenlp {
            namespace core {
                namespace iceparser {

                    ::java::lang::Class *Func_OBJ::class$ = NULL;
                    jmethodID *Func_OBJ::mids$ = NULL;
                    jint Func_OBJ::YYEOF = (jint) 0;
                    jint Func_OBJ::YYINITIAL = (jint) 0;

                    jclass Func_OBJ::initializeClass()
                    {
                        if (!class$)
                        {

                            jclass cls = (jclass) env->findClass("is/iclt/icenlp/core/iceparser/Func_OBJ");

                            mids$ = new jmethodID[max_mid];
                            mids$[mid_init$_cf2e3c10] = env->getMethodID(cls, "<init>", "(Ljava/io/Reader;)V");
                            mids$[mid_init$_be2e4f90] = env->getMethodID(cls, "<init>", "(Ljava/io/InputStream;)V");
                            mids$[mid_main_4dd4540c] = env->getStaticMethodID(cls, "main", "([Ljava/lang/String;)V");
                            mids$[mid_parse_5bcd5850] = env->getMethodID(cls, "parse", "(Ljava/io/Writer;)V");
                            mids$[mid_yybegin_39c7bd3c] = env->getMethodID(cls, "yybegin", "(I)V");
                            mids$[mid_yycharat_39c7bd29] = env->getMethodID(cls, "yycharat", "(I)C");
                            mids$[mid_yyclose_54c6a166] = env->getMethodID(cls, "yyclose", "()V");
                            mids$[mid_yylength_54c6a179] = env->getMethodID(cls, "yylength", "()I");
                            mids$[mid_yylex_54c6a179] = env->getMethodID(cls, "yylex", "()I");
                            mids$[mid_yypushback_39c7bd3c] = env->getMethodID(cls, "yypushback", "(I)V");
                            mids$[mid_yyreset_cf2e3c10] = env->getMethodID(cls, "yyreset", "(Ljava/io/Reader;)V");
                            mids$[mid_yystate_54c6a179] = env->getMethodID(cls, "yystate", "()I");
                            mids$[mid_yytext_14c7b5c5] = env->getMethodID(cls, "yytext", "()Ljava/lang/String;");

                            class$ = (::java::lang::Class *) new JObject(cls);
                            cls = (jclass) class$->this$;

                            YYEOF = env->getStaticIntField(cls, "YYEOF");
                            YYINITIAL = env->getStaticIntField(cls, "YYINITIAL");
                        }
                        return (jclass) class$->this$;
                    }

                    Func_OBJ::Func_OBJ(const ::java::io::Reader & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_cf2e3c10, a0.this$)) {}

                    Func_OBJ::Func_OBJ(const ::java::io::InputStream & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_be2e4f90, a0.this$)) {}

                    void Func_OBJ::main(const JArray< ::java::lang::String > & a0)
                    {
                        jclass cls = initializeClass();
                        env->callStaticVoidMethod(cls, mids$[mid_main_4dd4540c], a0.this$);
                    }

                    void Func_OBJ::parse(const ::java::io::Writer & a0) const
                    {
                        env->callVoidMethod(this$, mids$[mid_parse_5bcd5850], a0.this$);
                    }

                    void Func_OBJ::yybegin(jint a0) const
                    {
                        env->callVoidMethod(this$, mids$[mid_yybegin_39c7bd3c], a0);
                    }

                    jchar Func_OBJ::yycharat(jint a0) const
                    {
                        return env->callCharMethod(this$, mids$[mid_yycharat_39c7bd29], a0);
                    }

                    void Func_OBJ::yyclose() const
                    {
                        env->callVoidMethod(this$, mids$[mid_yyclose_54c6a166]);
                    }

                    jint Func_OBJ::yylength() const
                    {
                        return env->callIntMethod(this$, mids$[mid_yylength_54c6a179]);
                    }

                    jint Func_OBJ::yylex() const
                    {
                        return env->callIntMethod(this$, mids$[mid_yylex_54c6a179]);
                    }

                    void Func_OBJ::yypushback(jint a0) const
                    {
                        env->callVoidMethod(this$, mids$[mid_yypushback_39c7bd3c], a0);
                    }

                    void Func_OBJ::yyreset(const ::java::io::Reader & a0) const
                    {
                        env->callVoidMethod(this$, mids$[mid_yyreset_cf2e3c10], a0.this$);
                    }

                    jint Func_OBJ::yystate() const
                    {
                        return env->callIntMethod(this$, mids$[mid_yystate_54c6a179]);
                    }

                    ::java::lang::String Func_OBJ::yytext() const
                    {
                        return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_yytext_14c7b5c5]));
                    }
                }
            }
        }
    }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace is {
    namespace iclt {
        namespace icenlp {
            namespace core {
                namespace iceparser {
                    static PyObject *t_Func_OBJ_cast_(PyTypeObject *type, PyObject *arg);
                    static PyObject *t_Func_OBJ_instance_(PyTypeObject *type, PyObject *arg);
                    static int t_Func_OBJ_init_(t_Func_OBJ *self, PyObject *args, PyObject *kwds);
                    static PyObject *t_Func_OBJ_main(PyTypeObject *type, PyObject *arg);
                    static PyObject *t_Func_OBJ_parse(t_Func_OBJ *self, PyObject *arg);
                    static PyObject *t_Func_OBJ_yybegin(t_Func_OBJ *self, PyObject *arg);
                    static PyObject *t_Func_OBJ_yycharat(t_Func_OBJ *self, PyObject *arg);
                    static PyObject *t_Func_OBJ_yyclose(t_Func_OBJ *self);
                    static PyObject *t_Func_OBJ_yylength(t_Func_OBJ *self);
                    static PyObject *t_Func_OBJ_yylex(t_Func_OBJ *self);
                    static PyObject *t_Func_OBJ_yypushback(t_Func_OBJ *self, PyObject *arg);
                    static PyObject *t_Func_OBJ_yyreset(t_Func_OBJ *self, PyObject *arg);
                    static PyObject *t_Func_OBJ_yystate(t_Func_OBJ *self);
                    static PyObject *t_Func_OBJ_yytext(t_Func_OBJ *self);

                    static PyMethodDef t_Func_OBJ__methods_[] = {
                        DECLARE_METHOD(t_Func_OBJ, cast_, METH_O | METH_CLASS),
                        DECLARE_METHOD(t_Func_OBJ, instance_, METH_O | METH_CLASS),
                        DECLARE_METHOD(t_Func_OBJ, main, METH_O | METH_CLASS),
                        DECLARE_METHOD(t_Func_OBJ, parse, METH_O),
                        DECLARE_METHOD(t_Func_OBJ, yybegin, METH_O),
                        DECLARE_METHOD(t_Func_OBJ, yycharat, METH_O),
                        DECLARE_METHOD(t_Func_OBJ, yyclose, METH_NOARGS),
                        DECLARE_METHOD(t_Func_OBJ, yylength, METH_NOARGS),
                        DECLARE_METHOD(t_Func_OBJ, yylex, METH_NOARGS),
                        DECLARE_METHOD(t_Func_OBJ, yypushback, METH_O),
                        DECLARE_METHOD(t_Func_OBJ, yyreset, METH_O),
                        DECLARE_METHOD(t_Func_OBJ, yystate, METH_NOARGS),
                        DECLARE_METHOD(t_Func_OBJ, yytext, METH_NOARGS),
                        { NULL, NULL, 0, NULL }
                    };

                    DECLARE_TYPE(Func_OBJ, t_Func_OBJ, ::java::lang::Object, Func_OBJ, t_Func_OBJ_init_, 0, 0, 0, 0, 0);

                    void t_Func_OBJ::install(PyObject *module)
                    {
                        installType(&PY_TYPE(Func_OBJ), module, "Func_OBJ", 0);
                    }

                    void t_Func_OBJ::initialize(PyObject *module)
                    {
                        PyDict_SetItemString(PY_TYPE(Func_OBJ).tp_dict, "class_", make_descriptor(Func_OBJ::initializeClass, 1));
                        PyDict_SetItemString(PY_TYPE(Func_OBJ).tp_dict, "wrapfn_", make_descriptor(t_Func_OBJ::wrap_jobject));
                        PyDict_SetItemString(PY_TYPE(Func_OBJ).tp_dict, "boxfn_", make_descriptor(boxObject));
                        Func_OBJ::initializeClass();
                        PyDict_SetItemString(PY_TYPE(Func_OBJ).tp_dict, "YYEOF", make_descriptor(Func_OBJ::YYEOF));
                        PyDict_SetItemString(PY_TYPE(Func_OBJ).tp_dict, "YYINITIAL", make_descriptor(Func_OBJ::YYINITIAL));
                    }

                    static PyObject *t_Func_OBJ_cast_(PyTypeObject *type, PyObject *arg)
                    {
                        if (!(arg = castCheck(arg, Func_OBJ::initializeClass, 1)))
                            return NULL;
                        return t_Func_OBJ::wrap_Object(Func_OBJ(((t_Func_OBJ *) arg)->object.this$));
                    }
                    static PyObject *t_Func_OBJ_instance_(PyTypeObject *type, PyObject *arg)
                    {
                        if (!castCheck(arg, Func_OBJ::initializeClass, 0))
                            Py_RETURN_FALSE;
                        Py_RETURN_TRUE;
                    }

                    static int t_Func_OBJ_init_(t_Func_OBJ *self, PyObject *args, PyObject *kwds)
                    {
                        switch (PyTuple_GET_SIZE(args)) {
                          case 1:
                            {
                                ::java::io::Reader a0((jobject) NULL);
                                Func_OBJ object((jobject) NULL);

                                if (!parseArgs(args, "k", ::java::io::Reader::initializeClass, &a0))
                                {
                                    INT_CALL(object = Func_OBJ(a0));
                                    self->object = object;
                                    break;
                                }
                            }
                            {
                                ::java::io::InputStream a0((jobject) NULL);
                                Func_OBJ object((jobject) NULL);

                                if (!parseArgs(args, "k", ::java::io::InputStream::initializeClass, &a0))
                                {
                                    INT_CALL(object = Func_OBJ(a0));
                                    self->object = object;
                                    break;
                                }
                            }
                          default:
                            PyErr_SetArgsError((PyObject *) self, "__init__", args);
                            return -1;
                        }

                        return 0;
                    }

                    static PyObject *t_Func_OBJ_main(PyTypeObject *type, PyObject *arg)
                    {
                        JArray< ::java::lang::String > a0((jobject) NULL);

                        if (!parseArg(arg, "[s", &a0))
                        {
                            OBJ_CALL(::is::iclt::icenlp::core::iceparser::Func_OBJ::main(a0));
                            Py_RETURN_NONE;
                        }

                        PyErr_SetArgsError(type, "main", arg);
                        return NULL;
                    }

                    static PyObject *t_Func_OBJ_parse(t_Func_OBJ *self, PyObject *arg)
                    {
                        ::java::io::Writer a0((jobject) NULL);

                        if (!parseArg(arg, "k", ::java::io::Writer::initializeClass, &a0))
                        {
                            OBJ_CALL(self->object.parse(a0));
                            Py_RETURN_NONE;
                        }

                        PyErr_SetArgsError((PyObject *) self, "parse", arg);
                        return NULL;
                    }

                    static PyObject *t_Func_OBJ_yybegin(t_Func_OBJ *self, PyObject *arg)
                    {
                        jint a0;

                        if (!parseArg(arg, "I", &a0))
                        {
                            OBJ_CALL(self->object.yybegin(a0));
                            Py_RETURN_NONE;
                        }

                        PyErr_SetArgsError((PyObject *) self, "yybegin", arg);
                        return NULL;
                    }

                    static PyObject *t_Func_OBJ_yycharat(t_Func_OBJ *self, PyObject *arg)
                    {
                        jint a0;
                        jchar result;

                        if (!parseArg(arg, "I", &a0))
                        {
                            OBJ_CALL(result = self->object.yycharat(a0));
                            return PyUnicode_FromUnicode((Py_UNICODE *) &result, 1);
                        }

                        PyErr_SetArgsError((PyObject *) self, "yycharat", arg);
                        return NULL;
                    }

                    static PyObject *t_Func_OBJ_yyclose(t_Func_OBJ *self)
                    {
                        OBJ_CALL(self->object.yyclose());
                        Py_RETURN_NONE;
                    }

                    static PyObject *t_Func_OBJ_yylength(t_Func_OBJ *self)
                    {
                        jint result;
                        OBJ_CALL(result = self->object.yylength());
                        return PyInt_FromLong((long) result);
                    }

                    static PyObject *t_Func_OBJ_yylex(t_Func_OBJ *self)
                    {
                        jint result;
                        OBJ_CALL(result = self->object.yylex());
                        return PyInt_FromLong((long) result);
                    }

                    static PyObject *t_Func_OBJ_yypushback(t_Func_OBJ *self, PyObject *arg)
                    {
                        jint a0;

                        if (!parseArg(arg, "I", &a0))
                        {
                            OBJ_CALL(self->object.yypushback(a0));
                            Py_RETURN_NONE;
                        }

                        PyErr_SetArgsError((PyObject *) self, "yypushback", arg);
                        return NULL;
                    }

                    static PyObject *t_Func_OBJ_yyreset(t_Func_OBJ *self, PyObject *arg)
                    {
                        ::java::io::Reader a0((jobject) NULL);

                        if (!parseArg(arg, "k", ::java::io::Reader::initializeClass, &a0))
                        {
                            OBJ_CALL(self->object.yyreset(a0));
                            Py_RETURN_NONE;
                        }

                        PyErr_SetArgsError((PyObject *) self, "yyreset", arg);
                        return NULL;
                    }

                    static PyObject *t_Func_OBJ_yystate(t_Func_OBJ *self)
                    {
                        jint result;
                        OBJ_CALL(result = self->object.yystate());
                        return PyInt_FromLong((long) result);
                    }

                    static PyObject *t_Func_OBJ_yytext(t_Func_OBJ *self)
                    {
                        ::java::lang::String result((jobject) NULL);
                        OBJ_CALL(result = self->object.yytext());
                        return j2p(result);
                    }
                }
            }
        }
    }
}
#include <jni.h>
#include "JCCEnv.h"
#include "is/iclt/icenlp/core/tokenizer/SrxSegmentizer.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "java/util/List.h"
#include "JArray.h"

namespace is {
    namespace iclt {
        namespace icenlp {
            namespace core {
                namespace tokenizer {

                    ::java::lang::Class *SrxSegmentizer::class$ = NULL;
                    jmethodID *SrxSegmentizer::mids$ = NULL;

                    jclass SrxSegmentizer::initializeClass()
                    {
                        if (!class$)
                        {

                            jclass cls = (jclass) env->findClass("is/iclt/icenlp/core/tokenizer/SrxSegmentizer");

                            mids$ = new jmethodID[max_mid];
                            mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
                            mids$[mid_getInstance_5a565ae2] = env->getStaticMethodID(cls, "getInstance", "()Lis/iclt/icenlp/core/tokenizer/SrxSegmentizer;");
                            mids$[mid_main_4dd4540c] = env->getStaticMethodID(cls, "main", "([Ljava/lang/String;)V");
                            mids$[mid_newInstance_5a565ae2] = env->getStaticMethodID(cls, "newInstance", "()Lis/iclt/icenlp/core/tokenizer/SrxSegmentizer;");
                            mids$[mid_runStdin_54c6a166] = env->getMethodID(cls, "runStdin", "()V");
                            mids$[mid_runTextFiles_4a264742] = env->getMethodID(cls, "runTextFiles", "(Ljava/lang/String;Ljava/lang/String;)V");
                            mids$[mid_sentencePerLine_97a5258f] = env->getMethodID(cls, "sentencePerLine", "(Ljava/lang/String;)Ljava/lang/String;");
                            mids$[mid_setSingleLineBreaksMarksParagraph_bb0c767f] = env->getMethodID(cls, "setSingleLineBreaksMarksParagraph", "(Z)V");
                            mids$[mid_singleLineBreaksMarksPara_54c6a16a] = env->getMethodID(cls, "singleLineBreaksMarksPara", "()Z");
                            mids$[mid_terminate_54c6a166] = env->getStaticMethodID(cls, "terminate", "()V");
                            mids$[mid_tokenize_0feb8f08] = env->getMethodID(cls, "tokenize", "(Ljava/lang/String;)Ljava/util/List;");
                            mids$[mid_finalize_54c6a166] = env->getMethodID(cls, "finalize", "()V");

                            class$ = (::java::lang::Class *) new JObject(cls);
                        }
                        return (jclass) class$->this$;
                    }

                    SrxSegmentizer::SrxSegmentizer(const ::java::lang::String & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}

                    SrxSegmentizer SrxSegmentizer::getInstance()
                    {
                        jclass cls = initializeClass();
                        return SrxSegmentizer(env->callStaticObjectMethod(cls, mids$[mid_getInstance_5a565ae2]));
                    }

                    void SrxSegmentizer::main(const JArray< ::java::lang::String > & a0)
                    {
                        jclass cls = initializeClass();
                        env->callStaticVoidMethod(cls, mids$[mid_main_4dd4540c], a0.this$);
                    }

                    SrxSegmentizer SrxSegmentizer::newInstance()
                    {
                        jclass cls = initializeClass();
                        return SrxSegmentizer(env->callStaticObjectMethod(cls, mids$[mid_newInstance_5a565ae2]));
                    }

                    void SrxSegmentizer::runStdin() const
                    {
                        env->callVoidMethod(this$, mids$[mid_runStdin_54c6a166]);
                    }

                    void SrxSegmentizer::runTextFiles(const ::java::lang::String & a0, const ::java::lang::String & a1) const
                    {
                        env->callVoidMethod(this$, mids$[mid_runTextFiles_4a264742], a0.this$, a1.this$);
                    }

                    ::java::lang::String SrxSegmentizer::sentencePerLine(const ::java::lang::String & a0) const
                    {
                        return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_sentencePerLine_97a5258f], a0.this$));
                    }

                    void SrxSegmentizer::setSingleLineBreaksMarksParagraph(jboolean a0) const
                    {
                        env->callVoidMethod(this$, mids$[mid_setSingleLineBreaksMarksParagraph_bb0c767f], a0);
                    }

                    jboolean SrxSegmentizer::singleLineBreaksMarksPara() const
                    {
                        return env->callBooleanMethod(this$, mids$[mid_singleLineBreaksMarksPara_54c6a16a]);
                    }

                    void SrxSegmentizer::terminate()
                    {
                        jclass cls = initializeClass();
                        env->callStaticVoidMethod(cls, mids$[mid_terminate_54c6a166]);
                    }

                    ::java::util::List SrxSegmentizer::tokenize(const ::java::lang::String & a0) const
                    {
                        return ::java::util::List(env->callObjectMethod(this$, mids$[mid_tokenize_0feb8f08], a0.this$));
                    }
                }
            }
        }
    }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace is {
    namespace iclt {
        namespace icenlp {
            namespace core {
                namespace tokenizer {
                    static PyObject *t_SrxSegmentizer_cast_(PyTypeObject *type, PyObject *arg);
                    static PyObject *t_SrxSegmentizer_instance_(PyTypeObject *type, PyObject *arg);
                    static int t_SrxSegmentizer_init_(t_SrxSegmentizer *self, PyObject *args, PyObject *kwds);
                    static PyObject *t_SrxSegmentizer_getInstance(PyTypeObject *type);
                    static PyObject *t_SrxSegmentizer_main(PyTypeObject *type, PyObject *arg);
                    static PyObject *t_SrxSegmentizer_newInstance(PyTypeObject *type);
                    static PyObject *t_SrxSegmentizer_runStdin(t_SrxSegmentizer *self);
                    static PyObject *t_SrxSegmentizer_runTextFiles(t_SrxSegmentizer *self, PyObject *args);
                    static PyObject *t_SrxSegmentizer_sentencePerLine(t_SrxSegmentizer *self, PyObject *arg);
                    static PyObject *t_SrxSegmentizer_setSingleLineBreaksMarksParagraph(t_SrxSegmentizer *self, PyObject *arg);
                    static PyObject *t_SrxSegmentizer_singleLineBreaksMarksPara(t_SrxSegmentizer *self);
                    static PyObject *t_SrxSegmentizer_terminate(PyTypeObject *type);
                    static PyObject *t_SrxSegmentizer_tokenize(t_SrxSegmentizer *self, PyObject *arg);
                    static PyObject *t_SrxSegmentizer_get__instance(t_SrxSegmentizer *self, void *data);
                    static int t_SrxSegmentizer_set__singleLineBreaksMarksParagraph(t_SrxSegmentizer *self, PyObject *arg, void *data);
                    static PyGetSetDef t_SrxSegmentizer__fields_[] = {
                        DECLARE_GET_FIELD(t_SrxSegmentizer, instance),
                        DECLARE_SET_FIELD(t_SrxSegmentizer, singleLineBreaksMarksParagraph),
                        { NULL, NULL, NULL, NULL, NULL }
                    };

                    static PyMethodDef t_SrxSegmentizer__methods_[] = {
                        DECLARE_METHOD(t_SrxSegmentizer, cast_, METH_O | METH_CLASS),
                        DECLARE_METHOD(t_SrxSegmentizer, instance_, METH_O | METH_CLASS),
                        DECLARE_METHOD(t_SrxSegmentizer, getInstance, METH_NOARGS | METH_CLASS),
                        DECLARE_METHOD(t_SrxSegmentizer, main, METH_O | METH_CLASS),
                        DECLARE_METHOD(t_SrxSegmentizer, newInstance, METH_NOARGS | METH_CLASS),
                        DECLARE_METHOD(t_SrxSegmentizer, runStdin, METH_NOARGS),
                        DECLARE_METHOD(t_SrxSegmentizer, runTextFiles, METH_VARARGS),
                        DECLARE_METHOD(t_SrxSegmentizer, sentencePerLine, METH_O),
                        DECLARE_METHOD(t_SrxSegmentizer, setSingleLineBreaksMarksParagraph, METH_O),
                        DECLARE_METHOD(t_SrxSegmentizer, singleLineBreaksMarksPara, METH_NOARGS),
                        DECLARE_METHOD(t_SrxSegmentizer, terminate, METH_NOARGS | METH_CLASS),
                        DECLARE_METHOD(t_SrxSegmentizer, tokenize, METH_O),
                        { NULL, NULL, 0, NULL }
                    };

                    DECLARE_TYPE(SrxSegmentizer, t_SrxSegmentizer, ::java::lang::Object, SrxSegmentizer, t_SrxSegmentizer_init_, 0, 0, t_SrxSegmentizer__fields_, 0, 0);

                    void t_SrxSegmentizer::install(PyObject *module)
                    {
                        installType(&PY_TYPE(SrxSegmentizer), module, "SrxSegmentizer", 0);
                    }

                    void t_SrxSegmentizer::initialize(PyObject *module)
                    {
                        PyDict_SetItemString(PY_TYPE(SrxSegmentizer).tp_dict, "class_", make_descriptor(SrxSegmentizer::initializeClass, 1));
                        PyDict_SetItemString(PY_TYPE(SrxSegmentizer).tp_dict, "wrapfn_", make_descriptor(t_SrxSegmentizer::wrap_jobject));
                        PyDict_SetItemString(PY_TYPE(SrxSegmentizer).tp_dict, "boxfn_", make_descriptor(boxObject));
                    }

                    static PyObject *t_SrxSegmentizer_cast_(PyTypeObject *type, PyObject *arg)
                    {
                        if (!(arg = castCheck(arg, SrxSegmentizer::initializeClass, 1)))
                            return NULL;
                        return t_SrxSegmentizer::wrap_Object(SrxSegmentizer(((t_SrxSegmentizer *) arg)->object.this$));
                    }
                    static PyObject *t_SrxSegmentizer_instance_(PyTypeObject *type, PyObject *arg)
                    {
                        if (!castCheck(arg, SrxSegmentizer::initializeClass, 0))
                            Py_RETURN_FALSE;
                        Py_RETURN_TRUE;
                    }

                    static int t_SrxSegmentizer_init_(t_SrxSegmentizer *self, PyObject *args, PyObject *kwds)
                    {
                        ::java::lang::String a0((jobject) NULL);
                        SrxSegmentizer object((jobject) NULL);

                        if (!parseArgs(args, "s", &a0))
                        {
                            INT_CALL(object = SrxSegmentizer(a0));
                            self->object = object;
                        }
                        else
                        {
                            PyErr_SetArgsError((PyObject *) self, "__init__", args);
                            return -1;
                        }

                        return 0;
                    }

                    static PyObject *t_SrxSegmentizer_getInstance(PyTypeObject *type)
                    {
                        SrxSegmentizer result((jobject) NULL);
                        OBJ_CALL(result = ::is::iclt::icenlp::core::tokenizer::SrxSegmentizer::getInstance());
                        return t_SrxSegmentizer::wrap_Object(result);
                    }

                    static PyObject *t_SrxSegmentizer_main(PyTypeObject *type, PyObject *arg)
                    {
                        JArray< ::java::lang::String > a0((jobject) NULL);

                        if (!parseArg(arg, "[s", &a0))
                        {
                            OBJ_CALL(::is::iclt::icenlp::core::tokenizer::SrxSegmentizer::main(a0));
                            Py_RETURN_NONE;
                        }

                        PyErr_SetArgsError(type, "main", arg);
                        return NULL;
                    }

                    static PyObject *t_SrxSegmentizer_newInstance(PyTypeObject *type)
                    {
                        SrxSegmentizer result((jobject) NULL);
                        OBJ_CALL(result = ::is::iclt::icenlp::core::tokenizer::SrxSegmentizer::newInstance());
                        return t_SrxSegmentizer::wrap_Object(result);
                    }

                    static PyObject *t_SrxSegmentizer_runStdin(t_SrxSegmentizer *self)
                    {
                        OBJ_CALL(self->object.runStdin());
                        Py_RETURN_NONE;
                    }

                    static PyObject *t_SrxSegmentizer_runTextFiles(t_SrxSegmentizer *self, PyObject *args)
                    {
                        ::java::lang::String a0((jobject) NULL);
                        ::java::lang::String a1((jobject) NULL);

                        if (!parseArgs(args, "ss", &a0, &a1))
                        {
                            OBJ_CALL(self->object.runTextFiles(a0, a1));
                            Py_RETURN_NONE;
                        }

                        PyErr_SetArgsError((PyObject *) self, "runTextFiles", args);
                        return NULL;
                    }

                    static PyObject *t_SrxSegmentizer_sentencePerLine(t_SrxSegmentizer *self, PyObject *arg)
                    {
                        ::java::lang::String a0((jobject) NULL);
                        ::java::lang::String result((jobject) NULL);

                        if (!parseArg(arg, "s", &a0))
                        {
                            OBJ_CALL(result = self->object.sentencePerLine(a0));
                            return j2p(result);
                        }

                        PyErr_SetArgsError((PyObject *) self, "sentencePerLine", arg);
                        return NULL;
                    }

                    static PyObject *t_SrxSegmentizer_setSingleLineBreaksMarksParagraph(t_SrxSegmentizer *self, PyObject *arg)
                    {
                        jboolean a0;

                        if (!parseArg(arg, "Z", &a0))
                        {
                            OBJ_CALL(self->object.setSingleLineBreaksMarksParagraph(a0));
                            Py_RETURN_NONE;
                        }

                        PyErr_SetArgsError((PyObject *) self, "setSingleLineBreaksMarksParagraph", arg);
                        return NULL;
                    }

                    static PyObject *t_SrxSegmentizer_singleLineBreaksMarksPara(t_SrxSegmentizer *self)
                    {
                        jboolean result;
                        OBJ_CALL(result = self->object.singleLineBreaksMarksPara());
                        Py_RETURN_BOOL(result);
                    }

                    static PyObject *t_SrxSegmentizer_terminate(PyTypeObject *type)
                    {
                        OBJ_CALL(::is::iclt::icenlp::core::tokenizer::SrxSegmentizer::terminate());
                        Py_RETURN_NONE;
                    }

                    static PyObject *t_SrxSegmentizer_tokenize(t_SrxSegmentizer *self, PyObject *arg)
                    {
                        ::java::lang::String a0((jobject) NULL);
                        ::java::util::List result((jobject) NULL);

                        if (!parseArg(arg, "s", &a0))
                        {
                            OBJ_CALL(result = self->object.tokenize(a0));
                            return ::java::util::t_List::wrap_Object(result, &::java::lang::PY_TYPE(String));
                        }

                        PyErr_SetArgsError((PyObject *) self, "tokenize", arg);
                        return NULL;
                    }

                    static PyObject *t_SrxSegmentizer_get__instance(t_SrxSegmentizer *self, void *data)
                    {
                        SrxSegmentizer value((jobject) NULL);
                        OBJ_CALL(value = self->object.getInstance());
                        return t_SrxSegmentizer::wrap_Object(value);
                    }

                    static int t_SrxSegmentizer_set__singleLineBreaksMarksParagraph(t_SrxSegmentizer *self, PyObject *arg, void *data)
                    {
                        {
                            jboolean value;
                            if (!parseArg(arg, "Z", &value))
                            {
                                INT_CALL(self->object.setSingleLineBreaksMarksParagraph(value));
                                return 0;
                            }
                        }
                        PyErr_SetArgsError((PyObject *) self, "singleLineBreaksMarksParagraph", arg);
                        return -1;
                    }
                }
            }
        }
    }
}
#include <jni.h>
#include "JCCEnv.h"
#include "is/iclt/icenlp/core/formald/tagsets/CustomTagset.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "java/io/InputStream.h"
#include "JArray.h"

namespace is {
    namespace iclt {
        namespace icenlp {
            namespace core {
                namespace formald {
                    namespace tagsets {

                        ::java::lang::Class *CustomTagset::class$ = NULL;
                        jmethodID *CustomTagset::mids$ = NULL;

                        jclass CustomTagset::initializeClass()
                        {
                            if (!class$)
                            {

                                jclass cls = (jclass) env->findClass("is/iclt/icenlp/core/formald/tagsets/CustomTagset");

                                mids$ = new jmethodID[max_mid];
                                mids$[mid_getStandardTag_97a5258f] = env->getMethodID(cls, "getStandardTag", "(Ljava/lang/String;)Ljava/lang/String;");
                                mids$[mid_getTag_97a5258f] = env->getMethodID(cls, "getTag", "(Ljava/lang/String;)Ljava/lang/String;");
                                mids$[mid_newInstance_67bafd3c] = env->getStaticMethodID(cls, "newInstance", "(Ljava/lang/String;)Lis/iclt/icenlp/core/formald/tagsets/Tagset;");
                                mids$[mid_newInstance_0452f6bc] = env->getStaticMethodID(cls, "newInstance", "(Ljava/io/InputStream;)Lis/iclt/icenlp/core/formald/tagsets/Tagset;");

                                class$ = (::java::lang::Class *) new JObject(cls);
                            }
                            return (jclass) class$->this$;
                        }

                        ::java::lang::String CustomTagset::getStandardTag(const ::java::lang::String & a0) const
                        {
                            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getStandardTag_97a5258f], a0.this$));
                        }

                        ::java::lang::String CustomTagset::getTag(const ::java::lang::String & a0) const
                        {
                            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getTag_97a5258f], a0.this$));
                        }

                        ::is::iclt::icenlp::core::formald::tagsets::Tagset CustomTagset::newInstance(const ::java::lang::String & a0)
                        {
                            jclass cls = initializeClass();
                            return ::is::iclt::icenlp::core::formald::tagsets::Tagset(env->callStaticObjectMethod(cls, mids$[mid_newInstance_67bafd3c], a0.this$));
                        }

                        ::is::iclt::icenlp::core::formald::tagsets::Tagset CustomTagset::newInstance(const ::java::io::InputStream & a0)
                        {
                            jclass cls = initializeClass();
                            return ::is::iclt::icenlp::core::formald::tagsets::Tagset(env->callStaticObjectMethod(cls, mids$[mid_newInstance_0452f6bc], a0.this$));
                        }
                    }
                }
            }
        }
    }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace is {
    namespace iclt {
        namespace icenlp {
            namespace core {
                namespace formald {
                    namespace tagsets {
                        static PyObject *t_CustomTagset_cast_(PyTypeObject *type, PyObject *arg);
                        static PyObject *t_CustomTagset_instance_(PyTypeObject *type, PyObject *arg);
                        static PyObject *t_CustomTagset_getStandardTag(t_CustomTagset *self, PyObject *args);
                        static PyObject *t_CustomTagset_getTag(t_CustomTagset *self, PyObject *args);
                        static PyObject *t_CustomTagset_newInstance(PyTypeObject *type, PyObject *args);

                        static PyMethodDef t_CustomTagset__methods_[] = {
                            DECLARE_METHOD(t_CustomTagset, cast_, METH_O | METH_CLASS),
                            DECLARE_METHOD(t_CustomTagset, instance_, METH_O | METH_CLASS),
                            DECLARE_METHOD(t_CustomTagset, getStandardTag, METH_VARARGS),
                            DECLARE_METHOD(t_CustomTagset, getTag, METH_VARARGS),
                            DECLARE_METHOD(t_CustomTagset, newInstance, METH_VARARGS | METH_CLASS),
                            { NULL, NULL, 0, NULL }
                        };

                        DECLARE_TYPE(CustomTagset, t_CustomTagset, ::is::iclt::icenlp::core::formald::tagsets::Tagset, CustomTagset, abstract_init, 0, 0, 0, 0, 0);

                        void t_CustomTagset::install(PyObject *module)
                        {
                            installType(&PY_TYPE(CustomTagset), module, "CustomTagset", 0);
                        }

                        void t_CustomTagset::initialize(PyObject *module)
                        {
                            PyDict_SetItemString(PY_TYPE(CustomTagset).tp_dict, "class_", make_descriptor(CustomTagset::initializeClass, 1));
                            PyDict_SetItemString(PY_TYPE(CustomTagset).tp_dict, "wrapfn_", make_descriptor(t_CustomTagset::wrap_jobject));
                            PyDict_SetItemString(PY_TYPE(CustomTagset).tp_dict, "boxfn_", make_descriptor(boxObject));
                        }

                        static PyObject *t_CustomTagset_cast_(PyTypeObject *type, PyObject *arg)
                        {
                            if (!(arg = castCheck(arg, CustomTagset::initializeClass, 1)))
                                return NULL;
                            return t_CustomTagset::wrap_Object(CustomTagset(((t_CustomTagset *) arg)->object.this$));
                        }
                        static PyObject *t_CustomTagset_instance_(PyTypeObject *type, PyObject *arg)
                        {
                            if (!castCheck(arg, CustomTagset::initializeClass, 0))
                                Py_RETURN_FALSE;
                            Py_RETURN_TRUE;
                        }

                        static PyObject *t_CustomTagset_getStandardTag(t_CustomTagset *self, PyObject *args)
                        {
                            ::java::lang::String a0((jobject) NULL);
                            ::java::lang::String result((jobject) NULL);

                            if (!parseArgs(args, "s", &a0))
                            {
                                OBJ_CALL(result = self->object.getStandardTag(a0));
                                return j2p(result);
                            }

                            return callSuper(&PY_TYPE(CustomTagset), (PyObject *) self, "getStandardTag", args, 2);
                        }

                        static PyObject *t_CustomTagset_getTag(t_CustomTagset *self, PyObject *args)
                        {
                            ::java::lang::String a0((jobject) NULL);
                            ::java::lang::String result((jobject) NULL);

                            if (!parseArgs(args, "s", &a0))
                            {
                                OBJ_CALL(result = self->object.getTag(a0));
                                return j2p(result);
                            }

                            return callSuper(&PY_TYPE(CustomTagset), (PyObject *) self, "getTag", args, 2);
                        }

                        static PyObject *t_CustomTagset_newInstance(PyTypeObject *type, PyObject *args)
                        {
                            switch (PyTuple_GET_SIZE(args)) {
                              case 1:
                                {
                                    ::java::lang::String a0((jobject) NULL);
                                    ::is::iclt::icenlp::core::formald::tagsets::Tagset result((jobject) NULL);

                                    if (!parseArgs(args, "s", &a0))
                                    {
                                        OBJ_CALL(result = ::is::iclt::icenlp::core::formald::tagsets::CustomTagset::newInstance(a0));
                                        return ::is::iclt::icenlp::core::formald::tagsets::t_Tagset::wrap_Object(result);
                                    }
                                }
                                {
                                    ::java::io::InputStream a0((jobject) NULL);
                                    ::is::iclt::icenlp::core::formald::tagsets::Tagset result((jobject) NULL);

                                    if (!parseArgs(args, "k", ::java::io::InputStream::initializeClass, &a0))
                                    {
                                        OBJ_CALL(result = ::is::iclt::icenlp::core::formald::tagsets::CustomTagset::newInstance(a0));
                                        return ::is::iclt::icenlp::core::formald::tagsets::t_Tagset::wrap_Object(result);
                                    }
                                }
                            }

                            PyErr_SetArgsError(type, "newInstance", args);
                            return NULL;
                        }
                    }
                }
            }
        }
    }
}
#include <jni.h>
#include "JCCEnv.h"
#include "is/iclt/icenlp/core/iceparser/StringSearch.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace is {
    namespace iclt {
        namespace icenlp {
            namespace core {
                namespace iceparser {

                    ::java::lang::Class *StringSearch::class$ = NULL;
                    jmethodID *StringSearch::mids$ = NULL;
                    ::java::lang::String *StringSearch::firstString = NULL;
                    ::java::lang::String *StringSearch::nextString = NULL;

                    jclass StringSearch::initializeClass()
                    {
                        if (!class$)
                        {

                            jclass cls = (jclass) env->findClass("is/iclt/icenlp/core/iceparser/StringSearch");

                            mids$ = new jmethodID[max_mid];
                            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                            mids$[mid_splitString_71a6a0cc] = env->getStaticMethodID(cls, "splitString", "(Ljava/lang/String;Ljava/lang/String;ZI)I");
                            mids$[mid_splitString2_9c11957b] = env->getStaticMethodID(cls, "splitString2", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)I");

                            class$ = (::java::lang::Class *) new JObject(cls);
                            cls = (jclass) class$->this$;

                            firstString = new ::java::lang::String(env->getStaticObjectField(cls, "firstString", "Ljava/lang/String;"));
                            nextString = new ::java::lang::String(env->getStaticObjectField(cls, "nextString", "Ljava/lang/String;"));
                        }
                        return (jclass) class$->this$;
                    }

                    StringSearch::StringSearch() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

                    jint StringSearch::splitString(const ::java::lang::String & a0, const ::java::lang::String & a1, jboolean a2, jint a3)
                    {
                        jclass cls = initializeClass();
                        return env->callStaticIntMethod(cls, mids$[mid_splitString_71a6a0cc], a0.this$, a1.this$, a2, a3);
                    }

                    jint StringSearch::splitString2(const ::java::lang::String & a0, const ::java::lang::String & a1, const ::java::lang::String & a2)
                    {
                        jclass cls = initializeClass();
                        return env->callStaticIntMethod(cls, mids$[mid_splitString2_9c11957b], a0.this$, a1.this$, a2.this$);
                    }
                }
            }
        }
    }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace is {
    namespace iclt {
        namespace icenlp {
            namespace core {
                namespace iceparser {
                    static PyObject *t_StringSearch_cast_(PyTypeObject *type, PyObject *arg);
                    static PyObject *t_StringSearch_instance_(PyTypeObject *type, PyObject *arg);
                    static int t_StringSearch_init_(t_StringSearch *self, PyObject *args, PyObject *kwds);
                    static PyObject *t_StringSearch_splitString(PyTypeObject *type, PyObject *args);
                    static PyObject *t_StringSearch_splitString2(PyTypeObject *type, PyObject *args);

                    static PyMethodDef t_StringSearch__methods_[] = {
                        DECLARE_METHOD(t_StringSearch, cast_, METH_O | METH_CLASS),
                        DECLARE_METHOD(t_StringSearch, instance_, METH_O | METH_CLASS),
                        DECLARE_METHOD(t_StringSearch, splitString, METH_VARARGS | METH_CLASS),
                        DECLARE_METHOD(t_StringSearch, splitString2, METH_VARARGS | METH_CLASS),
                        { NULL, NULL, 0, NULL }
                    };

                    DECLARE_TYPE(StringSearch, t_StringSearch, ::java::lang::Object, StringSearch, t_StringSearch_init_, 0, 0, 0, 0, 0);

                    void t_StringSearch::install(PyObject *module)
                    {
                        installType(&PY_TYPE(StringSearch), module, "StringSearch", 0);
                    }

                    void t_StringSearch::initialize(PyObject *module)
                    {
                        PyDict_SetItemString(PY_TYPE(StringSearch).tp_dict, "class_", make_descriptor(StringSearch::initializeClass, 1));
                        PyDict_SetItemString(PY_TYPE(StringSearch).tp_dict, "wrapfn_", make_descriptor(t_StringSearch::wrap_jobject));
                        PyDict_SetItemString(PY_TYPE(StringSearch).tp_dict, "boxfn_", make_descriptor(boxObject));
                        StringSearch::initializeClass();
                        PyDict_SetItemString(PY_TYPE(StringSearch).tp_dict, "firstString", make_descriptor(j2p(*StringSearch::firstString)));
                        PyDict_SetItemString(PY_TYPE(StringSearch).tp_dict, "nextString", make_descriptor(j2p(*StringSearch::nextString)));
                    }

                    static PyObject *t_StringSearch_cast_(PyTypeObject *type, PyObject *arg)
                    {
                        if (!(arg = castCheck(arg, StringSearch::initializeClass, 1)))
                            return NULL;
                        return t_StringSearch::wrap_Object(StringSearch(((t_StringSearch *) arg)->object.this$));
                    }
                    static PyObject *t_StringSearch_instance_(PyTypeObject *type, PyObject *arg)
                    {
                        if (!castCheck(arg, StringSearch::initializeClass, 0))
                            Py_RETURN_FALSE;
                        Py_RETURN_TRUE;
                    }

                    static int t_StringSearch_init_(t_StringSearch *self, PyObject *args, PyObject *kwds)
                    {
                        StringSearch object((jobject) NULL);

                        INT_CALL(object = StringSearch());
                        self->object = object;

                        return 0;
                    }

                    static PyObject *t_StringSearch_splitString(PyTypeObject *type, PyObject *args)
                    {
                        ::java::lang::String a0((jobject) NULL);
                        ::java::lang::String a1((jobject) NULL);
                        jboolean a2;
                        jint a3;
                        jint result;

                        if (!parseArgs(args, "ssZI", &a0, &a1, &a2, &a3))
                        {
                            OBJ_CALL(result = ::is::iclt::icenlp::core::iceparser::StringSearch::splitString(a0, a1, a2, a3));
                            return PyInt_FromLong((long) result);
                        }

                        PyErr_SetArgsError(type, "splitString", args);
                        return NULL;
                    }

                    static PyObject *t_StringSearch_splitString2(PyTypeObject *type, PyObject *args)
                    {
                        ::java::lang::String a0((jobject) NULL);
                        ::java::lang::String a1((jobject) NULL);
                        ::java::lang::String a2((jobject) NULL);
                        jint result;

                        if (!parseArgs(args, "sss", &a0, &a1, &a2))
                        {
                            OBJ_CALL(result = ::is::iclt::icenlp::core::iceparser::StringSearch::splitString2(a0, a1, a2));
                            return PyInt_FromLong((long) result);
                        }

                        PyErr_SetArgsError(type, "splitString2", args);
                        return NULL;
                    }
                }
            }
        }
    }
}
#include <jni.h>
#include "JCCEnv.h"
#include "is/iclt/icenlp/core/icetagger/IceTaggerLexicons.h"
#include "java/io/IOException.h"
#include "is/iclt/icenlp/core/icetagger/IceTaggerResources.h"
#include "java/lang/NullPointerException.h"
#include "java/lang/Class.h"
#include "java/io/InputStream.h"
#include "is/iclt/icenlp/core/utils/Idioms.h"
#include "java/lang/String.h"
#include "is/iclt/icenlp/core/utils/Lexicon.h"
#include "is/iclt/icenlp/core/icemorphy/IceMorphyLexicons.h"
#include "JArray.h"

namespace is {
    namespace iclt {
        namespace icenlp {
            namespace core {
                namespace icetagger {

                    ::java::lang::Class *IceTaggerLexicons::class$ = NULL;
                    jmethodID *IceTaggerLexicons::mids$ = NULL;
                    jfieldID *IceTaggerLexicons::fids$ = NULL;
                    ::java::lang::String *IceTaggerLexicons::idiomsDictionary = NULL;
                    ::java::lang::String *IceTaggerLexicons::verbAdverbDictionary = NULL;
                    ::java::lang::String *IceTaggerLexicons::verbObjDictionary = NULL;
                    ::java::lang::String *IceTaggerLexicons::verbPrepDictionary = NULL;

                    jclass IceTaggerLexicons::initializeClass()
                    {
                        if (!class$)
                        {

                            jclass cls = (jclass) env->findClass("is/iclt/icenlp/core/icetagger/IceTaggerLexicons");

                            mids$ = new jmethodID[max_mid];
                            mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
                            mids$[mid_init$_ed492aad] = env->getMethodID(cls, "<init>", "(Lis/iclt/icenlp/core/icetagger/IceTaggerResources;)V");
                            mids$[mid_init$_e879ad94] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V");
                            mids$[mid_init$_d5b020e4] = env->getMethodID(cls, "<init>", "(Ljava/io/InputStream;Ljava/io/InputStream;Ljava/io/InputStream;Ljava/io/InputStream;Ljava/io/InputStream;Ljava/io/InputStream;Ljava/io/InputStream;Ljava/io/InputStream;Ljava/io/InputStream;Ljava/io/InputStream;Ljava/io/InputStream;)V");

                            fids$ = new jfieldID[max_fid];
                            fids$[fid_dictPathTagger] = env->getFieldID(cls, "dictPathTagger", "Ljava/lang/String;");
                            fids$[fid_idioms] = env->getFieldID(cls, "idioms", "Lis/iclt/icenlp/core/utils/Idioms;");
                            fids$[fid_morphyLexicons] = env->getFieldID(cls, "morphyLexicons", "Lis/iclt/icenlp/core/icemorphy/IceMorphyLexicons;");
                            fids$[fid_verbAdverb] = env->getFieldID(cls, "verbAdverb", "Lis/iclt/icenlp/core/utils/Lexicon;");
                            fids$[fid_verbObj] = env->getFieldID(cls, "verbObj", "Lis/iclt/icenlp/core/utils/Lexicon;");
                            fids$[fid_verbPrep] = env->getFieldID(cls, "verbPrep", "Lis/iclt/icenlp/core/utils/Lexicon;");

                            class$ = (::java::lang::Class *) new JObject(cls);
                            cls = (jclass) class$->this$;

                            idiomsDictionary = new ::java::lang::String(env->getStaticObjectField(cls, "idiomsDictionary", "Ljava/lang/String;"));
                            verbAdverbDictionary = new ::java::lang::String(env->getStaticObjectField(cls, "verbAdverbDictionary", "Ljava/lang/String;"));
                            verbObjDictionary = new ::java::lang::String(env->getStaticObjectField(cls, "verbObjDictionary", "Ljava/lang/String;"));
                            verbPrepDictionary = new ::java::lang::String(env->getStaticObjectField(cls, "verbPrepDictionary", "Ljava/lang/String;"));
                        }
                        return (jclass) class$->this$;
                    }

                    IceTaggerLexicons::IceTaggerLexicons(const ::java::lang::String & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}

                    IceTaggerLexicons::IceTaggerLexicons(const ::is::iclt::icenlp::core::icetagger::IceTaggerResources & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_ed492aad, a0.this$)) {}

                    IceTaggerLexicons::IceTaggerLexicons(const ::java::lang::String & a0, const ::java::lang::String & a1, const ::java::lang::String & a2, const ::java::lang::String & a3, const ::java::lang::String & a4, const ::java::lang::String & a5, const ::java::lang::String & a6, const ::java::lang::String & a7, const ::java::lang::String & a8, const ::java::lang::String & a9, const ::java::lang::String & a10) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_e879ad94, a0.this$, a1.this$, a2.this$, a3.this$, a4.this$, a5.this$, a6.this$, a7.this$, a8.this$, a9.this$, a10.this$)) {}

                    IceTaggerLexicons::IceTaggerLexicons(const ::java::io::InputStream & a0, const ::java::io::InputStream & a1, const ::java::io::InputStream & a2, const ::java::io::InputStream & a3, const ::java::io::InputStream & a4, const ::java::io::InputStream & a5, const ::java::io::InputStream & a6, const ::java::io::InputStream & a7, const ::java::io::InputStream & a8, const ::java::io::InputStream & a9, const ::java::io::InputStream & a10) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_d5b020e4, a0.this$, a1.this$, a2.this$, a3.this$, a4.this$, a5.this$, a6.this$, a7.this$, a8.this$, a9.this$, a10.this$)) {}

                    ::java::lang::String IceTaggerLexicons::_get_dictPathTagger() const
                    {
                        return ::java::lang::String(env->getObjectField(this$, fids$[fid_dictPathTagger]));
                    }

                    void IceTaggerLexicons::_set_dictPathTagger(const ::java::lang::String & a0) const
                    {
                        env->setObjectField(this$, fids$[fid_dictPathTagger], a0.this$);
                    }

                    ::is::iclt::icenlp::core::utils::Idioms IceTaggerLexicons::_get_idioms() const
                    {
                        return ::is::iclt::icenlp::core::utils::Idioms(env->getObjectField(this$, fids$[fid_idioms]));
                    }

                    void IceTaggerLexicons::_set_idioms(const ::is::iclt::icenlp::core::utils::Idioms & a0) const
                    {
                        env->setObjectField(this$, fids$[fid_idioms], a0.this$);
                    }

                    ::is::iclt::icenlp::core::icemorphy::IceMorphyLexicons IceTaggerLexicons::_get_morphyLexicons() const
                    {
                        return ::is::iclt::icenlp::core::icemorphy::IceMorphyLexicons(env->getObjectField(this$, fids$[fid_morphyLexicons]));
                    }

                    void IceTaggerLexicons::_set_morphyLexicons(const ::is::iclt::icenlp::core::icemorphy::IceMorphyLexicons & a0) const
                    {
                        env->setObjectField(this$, fids$[fid_morphyLexicons], a0.this$);
                    }

                    ::is::iclt::icenlp::core::utils::Lexicon IceTaggerLexicons::_get_verbAdverb() const
                    {
                        return ::is::iclt::icenlp::core::utils::Lexicon(env->getObjectField(this$, fids$[fid_verbAdverb]));
                    }

                    void IceTaggerLexicons::_set_verbAdverb(const ::is::iclt::icenlp::core::utils::Lexicon & a0) const
                    {
                        env->setObjectField(this$, fids$[fid_verbAdverb], a0.this$);
                    }

                    ::is::iclt::icenlp::core::utils::Lexicon IceTaggerLexicons::_get_verbObj() const
                    {
                        return ::is::iclt::icenlp::core::utils::Lexicon(env->getObjectField(this$, fids$[fid_verbObj]));
                    }

                    void IceTaggerLexicons::_set_verbObj(const ::is::iclt::icenlp::core::utils::Lexicon & a0) const
                    {
                        env->setObjectField(this$, fids$[fid_verbObj], a0.this$);
                    }

                    ::is::iclt::icenlp::core::utils::Lexicon IceTaggerLexicons::_get_verbPrep() const
                    {
                        return ::is::iclt::icenlp::core::utils::Lexicon(env->getObjectField(this$, fids$[fid_verbPrep]));
                    }

                    void IceTaggerLexicons::_set_verbPrep(const ::is::iclt::icenlp::core::utils::Lexicon & a0) const
                    {
                        env->setObjectField(this$, fids$[fid_verbPrep], a0.this$);
                    }
                }
            }
        }
    }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace is {
    namespace iclt {
        namespace icenlp {
            namespace core {
                namespace icetagger {
                    static PyObject *t_IceTaggerLexicons_cast_(PyTypeObject *type, PyObject *arg);
                    static PyObject *t_IceTaggerLexicons_instance_(PyTypeObject *type, PyObject *arg);
                    static int t_IceTaggerLexicons_init_(t_IceTaggerLexicons *self, PyObject *args, PyObject *kwds);
                    static PyObject *t_IceTaggerLexicons_get__dictPathTagger(t_IceTaggerLexicons *self, void *data);
                    static int t_IceTaggerLexicons_set__dictPathTagger(t_IceTaggerLexicons *self, PyObject *arg, void *data);
                    static PyObject *t_IceTaggerLexicons_get__idioms(t_IceTaggerLexicons *self, void *data);
                    static int t_IceTaggerLexicons_set__idioms(t_IceTaggerLexicons *self, PyObject *arg, void *data);
                    static PyObject *t_IceTaggerLexicons_get__morphyLexicons(t_IceTaggerLexicons *self, void *data);
                    static int t_IceTaggerLexicons_set__morphyLexicons(t_IceTaggerLexicons *self, PyObject *arg, void *data);
                    static PyObject *t_IceTaggerLexicons_get__verbAdverb(t_IceTaggerLexicons *self, void *data);
                    static int t_IceTaggerLexicons_set__verbAdverb(t_IceTaggerLexicons *self, PyObject *arg, void *data);
                    static PyObject *t_IceTaggerLexicons_get__verbObj(t_IceTaggerLexicons *self, void *data);
                    static int t_IceTaggerLexicons_set__verbObj(t_IceTaggerLexicons *self, PyObject *arg, void *data);
                    static PyObject *t_IceTaggerLexicons_get__verbPrep(t_IceTaggerLexicons *self, void *data);
                    static int t_IceTaggerLexicons_set__verbPrep(t_IceTaggerLexicons *self, PyObject *arg, void *data);

                    static PyGetSetDef t_IceTaggerLexicons__fields_[] = {
                        DECLARE_GETSET_FIELD(t_IceTaggerLexicons, dictPathTagger),
                        DECLARE_GETSET_FIELD(t_IceTaggerLexicons, idioms),
                        DECLARE_GETSET_FIELD(t_IceTaggerLexicons, morphyLexicons),
                        DECLARE_GETSET_FIELD(t_IceTaggerLexicons, verbAdverb),
                        DECLARE_GETSET_FIELD(t_IceTaggerLexicons, verbObj),
                        DECLARE_GETSET_FIELD(t_IceTaggerLexicons, verbPrep),
                        { NULL, NULL, NULL, NULL, NULL }
                    };

                    static PyMethodDef t_IceTaggerLexicons__methods_[] = {
                        DECLARE_METHOD(t_IceTaggerLexicons, cast_, METH_O | METH_CLASS),
                        DECLARE_METHOD(t_IceTaggerLexicons, instance_, METH_O | METH_CLASS),
                        { NULL, NULL, 0, NULL }
                    };

                    DECLARE_TYPE(IceTaggerLexicons, t_IceTaggerLexicons, ::java::lang::Object, IceTaggerLexicons, t_IceTaggerLexicons_init_, 0, 0, t_IceTaggerLexicons__fields_, 0, 0);

                    void t_IceTaggerLexicons::install(PyObject *module)
                    {
                        installType(&PY_TYPE(IceTaggerLexicons), module, "IceTaggerLexicons", 0);
                    }

                    void t_IceTaggerLexicons::initialize(PyObject *module)
                    {
                        PyDict_SetItemString(PY_TYPE(IceTaggerLexicons).tp_dict, "class_", make_descriptor(IceTaggerLexicons::initializeClass, 1));
                        PyDict_SetItemString(PY_TYPE(IceTaggerLexicons).tp_dict, "wrapfn_", make_descriptor(t_IceTaggerLexicons::wrap_jobject));
                        PyDict_SetItemString(PY_TYPE(IceTaggerLexicons).tp_dict, "boxfn_", make_descriptor(boxObject));
                        IceTaggerLexicons::initializeClass();
                        PyDict_SetItemString(PY_TYPE(IceTaggerLexicons).tp_dict, "idiomsDictionary", make_descriptor(j2p(*IceTaggerLexicons::idiomsDictionary)));
                        PyDict_SetItemString(PY_TYPE(IceTaggerLexicons).tp_dict, "verbAdverbDictionary", make_descriptor(j2p(*IceTaggerLexicons::verbAdverbDictionary)));
                        PyDict_SetItemString(PY_TYPE(IceTaggerLexicons).tp_dict, "verbObjDictionary", make_descriptor(j2p(*IceTaggerLexicons::verbObjDictionary)));
                        PyDict_SetItemString(PY_TYPE(IceTaggerLexicons).tp_dict, "verbPrepDictionary", make_descriptor(j2p(*IceTaggerLexicons::verbPrepDictionary)));
                    }

                    static PyObject *t_IceTaggerLexicons_cast_(PyTypeObject *type, PyObject *arg)
                    {
                        if (!(arg = castCheck(arg, IceTaggerLexicons::initializeClass, 1)))
                            return NULL;
                        return t_IceTaggerLexicons::wrap_Object(IceTaggerLexicons(((t_IceTaggerLexicons *) arg)->object.this$));
                    }
                    static PyObject *t_IceTaggerLexicons_instance_(PyTypeObject *type, PyObject *arg)
                    {
                        if (!castCheck(arg, IceTaggerLexicons::initializeClass, 0))
                            Py_RETURN_FALSE;
                        Py_RETURN_TRUE;
                    }

                    static int t_IceTaggerLexicons_init_(t_IceTaggerLexicons *self, PyObject *args, PyObject *kwds)
                    {
                        switch (PyTuple_GET_SIZE(args)) {
                          case 1:
                            {
                                ::java::lang::String a0((jobject) NULL);
                                IceTaggerLexicons object((jobject) NULL);

                                if (!parseArgs(args, "s", &a0))
                                {
                                    INT_CALL(object = IceTaggerLexicons(a0));
                                    self->object = object;
                                    break;
                                }
                            }
                            {
                                ::is::iclt::icenlp::core::icetagger::IceTaggerResources a0((jobject) NULL);
                                IceTaggerLexicons object((jobject) NULL);

                                if (!parseArgs(args, "k", ::is::iclt::icenlp::core::icetagger::IceTaggerResources::initializeClass, &a0))
                                {
                                    INT_CALL(object = IceTaggerLexicons(a0));
                                    self->object = object;
                                    break;
                                }
                            }
                            goto err;
                          case 11:
                            {
                                ::java::lang::String a0((jobject) NULL);
                                ::java::lang::String a1((jobject) NULL);
                                ::java::lang::String a2((jobject) NULL);
                                ::java::lang::String a3((jobject) NULL);
                                ::java::lang::String a4((jobject) NULL);
                                ::java::lang::String a5((jobject) NULL);
                                ::java::lang::String a6((jobject) NULL);
                                ::java::lang::String a7((jobject) NULL);
                                ::java::lang::String a8((jobject) NULL);
                                ::java::lang::String a9((jobject) NULL);
                                ::java::lang::String a10((jobject) NULL);
                                IceTaggerLexicons object((jobject) NULL);

                                if (!parseArgs(args, "sssssssssss", &a0, &a1, &a2, &a3, &a4, &a5, &a6, &a7, &a8, &a9, &a10))
                                {
                                    INT_CALL(object = IceTaggerLexicons(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10));
                                    self->object = object;
                                    break;
                                }
                            }
                            {
                                ::java::io::InputStream a0((jobject) NULL);
                                ::java::io::InputStream a1((jobject) NULL);
                                ::java::io::InputStream a2((jobject) NULL);
                                ::java::io::InputStream a3((jobject) NULL);
                                ::java::io::InputStream a4((jobject) NULL);
                                ::java::io::InputStream a5((jobject) NULL);
                                ::java::io::InputStream a6((jobject) NULL);
                                ::java::io::InputStream a7((jobject) NULL);
                                ::java::io::InputStream a8((jobject) NULL);
                                ::java::io::InputStream a9((jobject) NULL);
                                ::java::io::InputStream a10((jobject) NULL);
                                IceTaggerLexicons object((jobject) NULL);

                                if (!parseArgs(args, "kkkkkkkkkkk", ::java::io::InputStream::initializeClass, ::java::io::InputStream::initializeClass, ::java::io::InputStream::initializeClass, ::java::io::InputStream::initializeClass, ::java::io::InputStream::initializeClass, ::java::io::InputStream::initializeClass, ::java::io::InputStream::initializeClass, ::java::io::InputStream::initializeClass, ::java::io::InputStream::initializeClass, ::java::io::InputStream::initializeClass, ::java::io::InputStream::initializeClass, &a0, &a1, &a2, &a3, &a4, &a5, &a6, &a7, &a8, &a9, &a10))
                                {
                                    INT_CALL(object = IceTaggerLexicons(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10));
                                    self->object = object;
                                    break;
                                }
                            }
                          default:
                          err:
                            PyErr_SetArgsError((PyObject *) self, "__init__", args);
                            return -1;
                        }

                        return 0;
                    }

                    static PyObject *t_IceTaggerLexicons_get__dictPathTagger(t_IceTaggerLexicons *self, void *data)
                    {
                        ::java::lang::String value((jobject) NULL);
                        OBJ_CALL(value = self->object._get_dictPathTagger());
                        return j2p(value);
                    }
                    static int t_IceTaggerLexicons_set__dictPathTagger(t_IceTaggerLexicons *self, PyObject *arg, void *data)
                    {
                        ::java::lang::String value((jobject) NULL);
                        if (!parseArg(arg, "s", &value))
                        {
                            INT_CALL(self->object._set_dictPathTagger(value));
                            return 0;
                        }
                        PyErr_SetArgsError((PyObject *) self, "dictPathTagger", arg);
                        return -1;
                    }

                    static PyObject *t_IceTaggerLexicons_get__idioms(t_IceTaggerLexicons *self, void *data)
                    {
                        ::is::iclt::icenlp::core::utils::Idioms value((jobject) NULL);
                        OBJ_CALL(value = self->object._get_idioms());
                        return ::is::iclt::icenlp::core::utils::t_Idioms::wrap_Object(value);
                    }
                    static int t_IceTaggerLexicons_set__idioms(t_IceTaggerLexicons *self, PyObject *arg, void *data)
                    {
                        ::is::iclt::icenlp::core::utils::Idioms value((jobject) NULL);
                        if (!parseArg(arg, "k", ::is::iclt::icenlp::core::utils::Idioms::initializeClass, &value))
                        {
                            INT_CALL(self->object._set_idioms(value));
                            return 0;
                        }
                        PyErr_SetArgsError((PyObject *) self, "idioms", arg);
                        return -1;
                    }

                    static PyObject *t_IceTaggerLexicons_get__morphyLexicons(t_IceTaggerLexicons *self, void *data)
                    {
                        ::is::iclt::icenlp::core::icemorphy::IceMorphyLexicons value((jobject) NULL);
                        OBJ_CALL(value = self->object._get_morphyLexicons());
                        return ::is::iclt::icenlp::core::icemorphy::t_IceMorphyLexicons::wrap_Object(value);
                    }
                    static int t_IceTaggerLexicons_set__morphyLexicons(t_IceTaggerLexicons *self, PyObject *arg, void *data)
                    {
                        ::is::iclt::icenlp::core::icemorphy::IceMorphyLexicons value((jobject) NULL);
                        if (!parseArg(arg, "k", ::is::iclt::icenlp::core::icemorphy::IceMorphyLexicons::initializeClass, &value))
                        {
                            INT_CALL(self->object._set_morphyLexicons(value));
                            return 0;
                        }
                        PyErr_SetArgsError((PyObject *) self, "morphyLexicons", arg);
                        return -1;
                    }

                    static PyObject *t_IceTaggerLexicons_get__verbAdverb(t_IceTaggerLexicons *self, void *data)
                    {
                        ::is::iclt::icenlp::core::utils::Lexicon value((jobject) NULL);
                        OBJ_CALL(value = self->object._get_verbAdverb());
                        return ::is::iclt::icenlp::core::utils::t_Lexicon::wrap_Object(value);
                    }
                    static int t_IceTaggerLexicons_set__verbAdverb(t_IceTaggerLexicons *self, PyObject *arg, void *data)
                    {
                        ::is::iclt::icenlp::core::utils::Lexicon value((jobject) NULL);
                        if (!parseArg(arg, "k", ::is::iclt::icenlp::core::utils::Lexicon::initializeClass, &value))
                        {
                            INT_CALL(self->object._set_verbAdverb(value));
                            return 0;
                        }
                        PyErr_SetArgsError((PyObject *) self, "verbAdverb", arg);
                        return -1;
                    }

                    static PyObject *t_IceTaggerLexicons_get__verbObj(t_IceTaggerLexicons *self, void *data)
                    {
                        ::is::iclt::icenlp::core::utils::Lexicon value((jobject) NULL);
                        OBJ_CALL(value = self->object._get_verbObj());
                        return ::is::iclt::icenlp::core::utils::t_Lexicon::wrap_Object(value);
                    }
                    static int t_IceTaggerLexicons_set__verbObj(t_IceTaggerLexicons *self, PyObject *arg, void *data)
                    {
                        ::is::iclt::icenlp::core::utils::Lexicon value((jobject) NULL);
                        if (!parseArg(arg, "k", ::is::iclt::icenlp::core::utils::Lexicon::initializeClass, &value))
                        {
                            INT_CALL(self->object._set_verbObj(value));
                            return 0;
                        }
                        PyErr_SetArgsError((PyObject *) self, "verbObj", arg);
                        return -1;
                    }

                    static PyObject *t_IceTaggerLexicons_get__verbPrep(t_IceTaggerLexicons *self, void *data)
                    {
                        ::is::iclt::icenlp::core::utils::Lexicon value((jobject) NULL);
                        OBJ_CALL(value = self->object._get_verbPrep());
                        return ::is::iclt::icenlp::core::utils::t_Lexicon::wrap_Object(value);
                    }
                    static int t_IceTaggerLexicons_set__verbPrep(t_IceTaggerLexicons *self, PyObject *arg, void *data)
                    {
                        ::is::iclt::icenlp::core::utils::Lexicon value((jobject) NULL);
                        if (!parseArg(arg, "k", ::is::iclt::icenlp::core::utils::Lexicon::initializeClass, &value))
                        {
                            INT_CALL(self->object._set_verbPrep(value));
                            return 0;
                        }
                        PyErr_SetArgsError((PyObject *) self, "verbPrep", arg);
                        return -1;
                    }
                }
            }
        }
    }
}
#include <jni.h>
#include "JCCEnv.h"
#include "is/iclt/icenlp/core/tokenizer/Sentence.h"
#include "java/util/ArrayList.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "is/iclt/icenlp/core/tokenizer/Token.h"
#include "JArray.h"

namespace is {
    namespace iclt {
        namespace icenlp {
            namespace core {
                namespace tokenizer {

                    ::java::lang::Class *Sentence::class$ = NULL;
                    jmethodID *Sentence::mids$ = NULL;

                    jclass Sentence::initializeClass()
                    {
                        if (!class$)
                        {

                            jclass cls = (jclass) env->findClass("is/iclt/icenlp/core/tokenizer/Sentence");

                            mids$ = new jmethodID[max_mid];
                            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                            mids$[mid_init$_b3f662f9] = env->getMethodID(cls, "<init>", "(Ljava/util/ArrayList;)V");
                            mids$[mid_add_eae64d83] = env->getMethodID(cls, "add", "(Lis/iclt/icenlp/core/tokenizer/Token;)V");
                            mids$[mid_getTokens_21eb51b0] = env->getMethodID(cls, "getTokens", "()Ljava/util/ArrayList;");
                            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
                            mids$[mid_toStringNewline_445a175e] = env->getMethodID(cls, "toStringNewline", "(Z)Ljava/lang/String;");

                            class$ = (::java::lang::Class *) new JObject(cls);
                        }
                        return (jclass) class$->this$;
                    }

                    Sentence::Sentence() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

                    Sentence::Sentence(const ::java::util::ArrayList & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_b3f662f9, a0.this$)) {}

                    void Sentence::add(const ::is::iclt::icenlp::core::tokenizer::Token & a0) const
                    {
                        env->callVoidMethod(this$, mids$[mid_add_eae64d83], a0.this$);
                    }

                    ::java::util::ArrayList Sentence::getTokens() const
                    {
                        return ::java::util::ArrayList(env->callObjectMethod(this$, mids$[mid_getTokens_21eb51b0]));
                    }

                    ::java::lang::String Sentence::toString() const
                    {
                        return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
                    }

                    ::java::lang::String Sentence::toStringNewline(jboolean a0) const
                    {
                        return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toStringNewline_445a175e], a0));
                    }
                }
            }
        }
    }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace is {
    namespace iclt {
        namespace icenlp {
            namespace core {
                namespace tokenizer {
                    static PyObject *t_Sentence_cast_(PyTypeObject *type, PyObject *arg);
                    static PyObject *t_Sentence_instance_(PyTypeObject *type, PyObject *arg);
                    static int t_Sentence_init_(t_Sentence *self, PyObject *args, PyObject *kwds);
                    static PyObject *t_Sentence_add(t_Sentence *self, PyObject *arg);
                    static PyObject *t_Sentence_getTokens(t_Sentence *self);
                    static PyObject *t_Sentence_toString(t_Sentence *self, PyObject *args);
                    static PyObject *t_Sentence_toStringNewline(t_Sentence *self, PyObject *arg);
                    static PyObject *t_Sentence_get__tokens(t_Sentence *self, void *data);
                    static PyGetSetDef t_Sentence__fields_[] = {
                        DECLARE_GET_FIELD(t_Sentence, tokens),
                        { NULL, NULL, NULL, NULL, NULL }
                    };

                    static PyMethodDef t_Sentence__methods_[] = {
                        DECLARE_METHOD(t_Sentence, cast_, METH_O | METH_CLASS),
                        DECLARE_METHOD(t_Sentence, instance_, METH_O | METH_CLASS),
                        DECLARE_METHOD(t_Sentence, add, METH_O),
                        DECLARE_METHOD(t_Sentence, getTokens, METH_NOARGS),
                        DECLARE_METHOD(t_Sentence, toString, METH_VARARGS),
                        DECLARE_METHOD(t_Sentence, toStringNewline, METH_O),
                        { NULL, NULL, 0, NULL }
                    };

                    DECLARE_TYPE(Sentence, t_Sentence, ::java::lang::Object, Sentence, t_Sentence_init_, 0, 0, t_Sentence__fields_, 0, 0);

                    void t_Sentence::install(PyObject *module)
                    {
                        installType(&PY_TYPE(Sentence), module, "Sentence", 0);
                    }

                    void t_Sentence::initialize(PyObject *module)
                    {
                        PyDict_SetItemString(PY_TYPE(Sentence).tp_dict, "class_", make_descriptor(Sentence::initializeClass, 1));
                        PyDict_SetItemString(PY_TYPE(Sentence).tp_dict, "wrapfn_", make_descriptor(t_Sentence::wrap_jobject));
                        PyDict_SetItemString(PY_TYPE(Sentence).tp_dict, "boxfn_", make_descriptor(boxObject));
                    }

                    static PyObject *t_Sentence_cast_(PyTypeObject *type, PyObject *arg)
                    {
                        if (!(arg = castCheck(arg, Sentence::initializeClass, 1)))
                            return NULL;
                        return t_Sentence::wrap_Object(Sentence(((t_Sentence *) arg)->object.this$));
                    }
                    static PyObject *t_Sentence_instance_(PyTypeObject *type, PyObject *arg)
                    {
                        if (!castCheck(arg, Sentence::initializeClass, 0))
                            Py_RETURN_FALSE;
                        Py_RETURN_TRUE;
                    }

                    static int t_Sentence_init_(t_Sentence *self, PyObject *args, PyObject *kwds)
                    {
                        switch (PyTuple_GET_SIZE(args)) {
                          case 0:
                            {
                                Sentence object((jobject) NULL);

                                INT_CALL(object = Sentence());
                                self->object = object;
                                break;
                            }
                            goto err;
                          case 1:
                            {
                                ::java::util::ArrayList a0((jobject) NULL);
                                PyTypeObject **p0;
                                Sentence object((jobject) NULL);

                                if (!parseArgs(args, "K", ::java::util::ArrayList::initializeClass, &a0, &p0, ::java::util::t_ArrayList::parameters_))
                                {
                                    INT_CALL(object = Sentence(a0));
                                    self->object = object;
                                    break;
                                }
                            }
                          default:
                          err:
                            PyErr_SetArgsError((PyObject *) self, "__init__", args);
                            return -1;
                        }

                        return 0;
                    }

                    static PyObject *t_Sentence_add(t_Sentence *self, PyObject *arg)
                    {
                        ::is::iclt::icenlp::core::tokenizer::Token a0((jobject) NULL);

                        if (!parseArg(arg, "k", ::is::iclt::icenlp::core::tokenizer::Token::initializeClass, &a0))
                        {
                            OBJ_CALL(self->object.add(a0));
                            Py_RETURN_NONE;
                        }

                        PyErr_SetArgsError((PyObject *) self, "add", arg);
                        return NULL;
                    }

                    static PyObject *t_Sentence_getTokens(t_Sentence *self)
                    {
                        ::java::util::ArrayList result((jobject) NULL);
                        OBJ_CALL(result = self->object.getTokens());
                        return ::java::util::t_ArrayList::wrap_Object(result, &::is::iclt::icenlp::core::tokenizer::PY_TYPE(Token));
                    }

                    static PyObject *t_Sentence_toString(t_Sentence *self, PyObject *args)
                    {
                        ::java::lang::String result((jobject) NULL);

                        if (!parseArgs(args, ""))
                        {
                            OBJ_CALL(result = self->object.toString());
                            return j2p(result);
                        }

                        return callSuper(&PY_TYPE(Sentence), (PyObject *) self, "toString", args, 2);
                    }

                    static PyObject *t_Sentence_toStringNewline(t_Sentence *self, PyObject *arg)
                    {
                        jboolean a0;
                        ::java::lang::String result((jobject) NULL);

                        if (!parseArg(arg, "Z", &a0))
                        {
                            OBJ_CALL(result = self->object.toStringNewline(a0));
                            return j2p(result);
                        }

                        PyErr_SetArgsError((PyObject *) self, "toStringNewline", arg);
                        return NULL;
                    }

                    static PyObject *t_Sentence_get__tokens(t_Sentence *self, void *data)
                    {
                        ::java::util::ArrayList value((jobject) NULL);
                        OBJ_CALL(value = self->object.getTokens());
                        return ::java::util::t_ArrayList::wrap_Object(value);
                    }
                }
            }
        }
    }
}
#include <jni.h>
#include "JCCEnv.h"
#include "is/iclt/icenlp/core/tokenizer/IceTokenTags$Condition.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace is {
    namespace iclt {
        namespace icenlp {
            namespace core {
                namespace tokenizer {

                    ::java::lang::Class *IceTokenTags$Condition::class$ = NULL;
                    jmethodID *IceTokenTags$Condition::mids$ = NULL;
                    IceTokenTags$Condition *IceTokenTags$Condition::condAdjComp = NULL;
                    IceTokenTags$Condition *IceTokenTags$Condition::condAdjIndeclineable = NULL;
                    IceTokenTags$Condition *IceTokenTags$Condition::condAdjPositive = NULL;
                    IceTokenTags$Condition *IceTokenTags$Condition::condAdjStrong = NULL;
                    IceTokenTags$Condition *IceTokenTags$Condition::condAdjSuper = NULL;
                    IceTokenTags$Condition *IceTokenTags$Condition::condAdjWeak = NULL;
                    IceTokenTags$Condition *IceTokenTags$Condition::condAdverbComp = NULL;
                    IceTokenTags$Condition *IceTokenTags$Condition::condAdverbSuper = NULL;
                    IceTokenTags$Condition *IceTokenTags$Condition::condArticle = NULL;
                    IceTokenTags$Condition *IceTokenTags$Condition::condCase = NULL;
                    IceTokenTags$Condition *IceTokenTags$Condition::condHasGender = NULL;
                    IceTokenTags$Condition *IceTokenTags$Condition::condOrdinal = NULL;
                    IceTokenTags$Condition *IceTokenTags$Condition::condPronoun = NULL;
                    IceTokenTags$Condition *IceTokenTags$Condition::condProperNoun = NULL;
                    IceTokenTags$Condition *IceTokenTags$Condition::condVerbActive = NULL;
                    IceTokenTags$Condition *IceTokenTags$Condition::condVerbAny = NULL;
                    IceTokenTags$Condition *IceTokenTags$Condition::condVerbAux = NULL;
                    IceTokenTags$Condition *IceTokenTags$Condition::condVerbBe = NULL;
                    IceTokenTags$Condition *IceTokenTags$Condition::condVerbCaseMark = NULL;
                    IceTokenTags$Condition *IceTokenTags$Condition::condVerbImperative = NULL;
                    IceTokenTags$Condition *IceTokenTags$Condition::condVerbIndicative = NULL;
                    IceTokenTags$Condition *IceTokenTags$Condition::condVerbInf = NULL;
                    IceTokenTags$Condition *IceTokenTags$Condition::condVerbMiddle = NULL;
                    IceTokenTags$Condition *IceTokenTags$Condition::condVerbPresentPart = NULL;
                    IceTokenTags$Condition *IceTokenTags$Condition::condVerbSpecialAux = NULL;
                    IceTokenTags$Condition *IceTokenTags$Condition::condVerbSpecialInf = NULL;
                    IceTokenTags$Condition *IceTokenTags$Condition::condVerbSubjunctive = NULL;
                    IceTokenTags$Condition *IceTokenTags$Condition::condVerbSupine = NULL;
                    IceTokenTags$Condition *IceTokenTags$Condition::condWordClass = NULL;

                    jclass IceTokenTags$Condition::initializeClass()
                    {
                        if (!class$)
                        {

                            jclass cls = (jclass) env->findClass("is/iclt/icenlp/core/tokenizer/IceTokenTags$Condition");

                            mids$ = new jmethodID[max_mid];
                            mids$[mid_valueOf_9469d4f0] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;)Lis/iclt/icenlp/core/tokenizer/IceTokenTags$Condition;");
                            mids$[mid_values_cf495cd2] = env->getStaticMethodID(cls, "values", "()[Lis/iclt/icenlp/core/tokenizer/IceTokenTags$Condition;");

                            class$ = (::java::lang::Class *) new JObject(cls);
                            cls = (jclass) class$->this$;

                            condAdjComp = new IceTokenTags$Condition(env->getStaticObjectField(cls, "condAdjComp", "Lis/iclt/icenlp/core/tokenizer/IceTokenTags$Condition;"));
                            condAdjIndeclineable = new IceTokenTags$Condition(env->getStaticObjectField(cls, "condAdjIndeclineable", "Lis/iclt/icenlp/core/tokenizer/IceTokenTags$Condition;"));
                            condAdjPositive = new IceTokenTags$Condition(env->getStaticObjectField(cls, "condAdjPositive", "Lis/iclt/icenlp/core/tokenizer/IceTokenTags$Condition;"));
                            condAdjStrong = new IceTokenTags$Condition(env->getStaticObjectField(cls, "condAdjStrong", "Lis/iclt/icenlp/core/tokenizer/IceTokenTags$Condition;"));
                            condAdjSuper = new IceTokenTags$Condition(env->getStaticObjectField(cls, "condAdjSuper", "Lis/iclt/icenlp/core/tokenizer/IceTokenTags$Condition;"));
                            condAdjWeak = new IceTokenTags$Condition(env->getStaticObjectField(cls, "condAdjWeak", "Lis/iclt/icenlp/core/tokenizer/IceTokenTags$Condition;"));
                            condAdverbComp = new IceTokenTags$Condition(env->getStaticObjectField(cls, "condAdverbComp", "Lis/iclt/icenlp/core/tokenizer/IceTokenTags$Condition;"));
                            condAdverbSuper = new IceTokenTags$Condition(env->getStaticObjectField(cls, "condAdverbSuper", "Lis/iclt/icenlp/core/tokenizer/IceTokenTags$Condition;"));
                            condArticle = new IceTokenTags$Condition(env->getStaticObjectField(cls, "condArticle", "Lis/iclt/icenlp/core/tokenizer/IceTokenTags$Condition;"));
                            condCase = new IceTokenTags$Condition(env->getStaticObjectField(cls, "condCase", "Lis/iclt/icenlp/core/tokenizer/IceTokenTags$Condition;"));
                            condHasGender = new IceTokenTags$Condition(env->getStaticObjectField(cls, "condHasGender", "Lis/iclt/icenlp/core/tokenizer/IceTokenTags$Condition;"));
                            condOrdinal = new IceTokenTags$Condition(env->getStaticObjectField(cls, "condOrdinal", "Lis/iclt/icenlp/core/tokenizer/IceTokenTags$Condition;"));
                            condPronoun = new IceTokenTags$Condition(env->getStaticObjectField(cls, "condPronoun", "Lis/iclt/icenlp/core/tokenizer/IceTokenTags$Condition;"));
                            condProperNoun = new IceTokenTags$Condition(env->getStaticObjectField(cls, "condProperNoun", "Lis/iclt/icenlp/core/tokenizer/IceTokenTags$Condition;"));
                            condVerbActive = new IceTokenTags$Condition(env->getStaticObjectField(cls, "condVerbActive", "Lis/iclt/icenlp/core/tokenizer/IceTokenTags$Condition;"));
                            condVerbAny = new IceTokenTags$Condition(env->getStaticObjectField(cls, "condVerbAny", "Lis/iclt/icenlp/core/tokenizer/IceTokenTags$Condition;"));
                            condVerbAux = new IceTokenTags$Condition(env->getStaticObjectField(cls, "condVerbAux", "Lis/iclt/icenlp/core/tokenizer/IceTokenTags$Condition;"));
                            condVerbBe = new IceTokenTags$Condition(env->getStaticObjectField(cls, "condVerbBe", "Lis/iclt/icenlp/core/tokenizer/IceTokenTags$Condition;"));
                            condVerbCaseMark = new IceTokenTags$Condition(env->getStaticObjectField(cls, "condVerbCaseMark", "Lis/iclt/icenlp/core/tokenizer/IceTokenTags$Condition;"));
                            condVerbImperative = new IceTokenTags$Condition(env->getStaticObjectField(cls, "condVerbImperative", "Lis/iclt/icenlp/core/tokenizer/IceTokenTags$Condition;"));
                            condVerbIndicative = new IceTokenTags$Condition(env->getStaticObjectField(cls, "condVerbIndicative", "Lis/iclt/icenlp/core/tokenizer/IceTokenTags$Condition;"));
                            condVerbInf = new IceTokenTags$Condition(env->getStaticObjectField(cls, "condVerbInf", "Lis/iclt/icenlp/core/tokenizer/IceTokenTags$Condition;"));
                            condVerbMiddle = new IceTokenTags$Condition(env->getStaticObjectField(cls, "condVerbMiddle", "Lis/iclt/icenlp/core/tokenizer/IceTokenTags$Condition;"));
                            condVerbPresentPart = new IceTokenTags$Condition(env->getStaticObjectField(cls, "condVerbPresentPart", "Lis/iclt/icenlp/core/tokenizer/IceTokenTags$Condition;"));
                            condVerbSpecialAux = new IceTokenTags$Condition(env->getStaticObjectField(cls, "condVerbSpecialAux", "Lis/iclt/icenlp/core/tokenizer/IceTokenTags$Condition;"));
                            condVerbSpecialInf = new IceTokenTags$Condition(env->getStaticObjectField(cls, "condVerbSpecialInf", "Lis/iclt/icenlp/core/tokenizer/IceTokenTags$Condition;"));
                            condVerbSubjunctive = new IceTokenTags$Condition(env->getStaticObjectField(cls, "condVerbSubjunctive", "Lis/iclt/icenlp/core/tokenizer/IceTokenTags$Condition;"));
                            condVerbSupine = new IceTokenTags$Condition(env->getStaticObjectField(cls, "condVerbSupine", "Lis/iclt/icenlp/core/tokenizer/IceTokenTags$Condition;"));
                            condWordClass = new IceTokenTags$Condition(env->getStaticObjectField(cls, "condWordClass", "Lis/iclt/icenlp/core/tokenizer/IceTokenTags$Condition;"));
                        }
                        return (jclass) class$->this$;
                    }

                    IceTokenTags$Condition IceTokenTags$Condition::valueOf(const ::java::lang::String & a0)
                    {
                        jclass cls = initializeClass();
                        return IceTokenTags$Condition(env->callStaticObjectMethod(cls, mids$[mid_valueOf_9469d4f0], a0.this$));
                    }

                    JArray< IceTokenTags$Condition > IceTokenTags$Condition::values()
                    {
                        jclass cls = initializeClass();
                        return JArray< IceTokenTags$Condition >(env->callStaticObjectMethod(cls, mids$[mid_values_cf495cd2]));
                    }
                }
            }
        }
    }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace is {
    namespace iclt {
        namespace icenlp {
            namespace core {
                namespace tokenizer {
                    static PyObject *t_IceTokenTags$Condition_cast_(PyTypeObject *type, PyObject *arg);
                    static PyObject *t_IceTokenTags$Condition_instance_(PyTypeObject *type, PyObject *arg);
                    static PyObject *t_IceTokenTags$Condition_valueOf(PyTypeObject *type, PyObject *args);
                    static PyObject *t_IceTokenTags$Condition_values(PyTypeObject *type);

                    static PyMethodDef t_IceTokenTags$Condition__methods_[] = {
                        DECLARE_METHOD(t_IceTokenTags$Condition, cast_, METH_O | METH_CLASS),
                        DECLARE_METHOD(t_IceTokenTags$Condition, instance_, METH_O | METH_CLASS),
                        DECLARE_METHOD(t_IceTokenTags$Condition, valueOf, METH_VARARGS | METH_CLASS),
                        DECLARE_METHOD(t_IceTokenTags$Condition, values, METH_NOARGS | METH_CLASS),
                        { NULL, NULL, 0, NULL }
                    };

                    DECLARE_TYPE(IceTokenTags$Condition, t_IceTokenTags$Condition, ::java::lang::Enum, IceTokenTags$Condition, abstract_init, 0, 0, 0, 0, 0);

                    void t_IceTokenTags$Condition::install(PyObject *module)
                    {
                        installType(&PY_TYPE(IceTokenTags$Condition), module, "IceTokenTags$Condition", 0);
                    }

                    void t_IceTokenTags$Condition::initialize(PyObject *module)
                    {
                        PyDict_SetItemString(PY_TYPE(IceTokenTags$Condition).tp_dict, "class_", make_descriptor(IceTokenTags$Condition::initializeClass, 1));
                        PyDict_SetItemString(PY_TYPE(IceTokenTags$Condition).tp_dict, "wrapfn_", make_descriptor(t_IceTokenTags$Condition::wrap_jobject));
                        PyDict_SetItemString(PY_TYPE(IceTokenTags$Condition).tp_dict, "boxfn_", make_descriptor(boxObject));
                        IceTokenTags$Condition::initializeClass();
                        PyDict_SetItemString(PY_TYPE(IceTokenTags$Condition).tp_dict, "condAdjComp", make_descriptor(t_IceTokenTags$Condition::wrap_Object(*IceTokenTags$Condition::condAdjComp)));
                        PyDict_SetItemString(PY_TYPE(IceTokenTags$Condition).tp_dict, "condAdjIndeclineable", make_descriptor(t_IceTokenTags$Condition::wrap_Object(*IceTokenTags$Condition::condAdjIndeclineable)));
                        PyDict_SetItemString(PY_TYPE(IceTokenTags$Condition).tp_dict, "condAdjPositive", make_descriptor(t_IceTokenTags$Condition::wrap_Object(*IceTokenTags$Condition::condAdjPositive)));
                        PyDict_SetItemString(PY_TYPE(IceTokenTags$Condition).tp_dict, "condAdjStrong", make_descriptor(t_IceTokenTags$Condition::wrap_Object(*IceTokenTags$Condition::condAdjStrong)));
                        PyDict_SetItemString(PY_TYPE(IceTokenTags$Condition).tp_dict, "condAdjSuper", make_descriptor(t_IceTokenTags$Condition::wrap_Object(*IceTokenTags$Condition::condAdjSuper)));
                        PyDict_SetItemString(PY_TYPE(IceTokenTags$Condition).tp_dict, "condAdjWeak", make_descriptor(t_IceTokenTags$Condition::wrap_Object(*IceTokenTags$Condition::condAdjWeak)));
                        PyDict_SetItemString(PY_TYPE(IceTokenTags$Condition).tp_dict, "condAdverbComp", make_descriptor(t_IceTokenTags$Condition::wrap_Object(*IceTokenTags$Condition::condAdverbComp)));
                        PyDict_SetItemString(PY_TYPE(IceTokenTags$Condition).tp_dict, "condAdverbSuper", make_descriptor(t_IceTokenTags$Condition::wrap_Object(*IceTokenTags$Condition::condAdverbSuper)));
                        PyDict_SetItemString(PY_TYPE(IceTokenTags$Condition).tp_dict, "condArticle", make_descriptor(t_IceTokenTags$Condition::wrap_Object(*IceTokenTags$Condition::condArticle)));
                        PyDict_SetItemString(PY_TYPE(IceTokenTags$Condition).tp_dict, "condCase", make_descriptor(t_IceTokenTags$Condition::wrap_Object(*IceTokenTags$Condition::condCase)));
                        PyDict_SetItemString(PY_TYPE(IceTokenTags$Condition).tp_dict, "condHasGender", make_descriptor(t_IceTokenTags$Condition::wrap_Object(*IceTokenTags$Condition::condHasGender)));
                        PyDict_SetItemString(PY_TYPE(IceTokenTags$Condition).tp_dict, "condOrdinal", make_descriptor(t_IceTokenTags$Condition::wrap_Object(*IceTokenTags$Condition::condOrdinal)));
                        PyDict_SetItemString(PY_TYPE(IceTokenTags$Condition).tp_dict, "condPronoun", make_descriptor(t_IceTokenTags$Condition::wrap_Object(*IceTokenTags$Condition::condPronoun)));
                        PyDict_SetItemString(PY_TYPE(IceTokenTags$Condition).tp_dict, "condProperNoun", make_descriptor(t_IceTokenTags$Condition::wrap_Object(*IceTokenTags$Condition::condProperNoun)));
                        PyDict_SetItemString(PY_TYPE(IceTokenTags$Condition).tp_dict, "condVerbActive", make_descriptor(t_IceTokenTags$Condition::wrap_Object(*IceTokenTags$Condition::condVerbActive)));
                        PyDict_SetItemString(PY_TYPE(IceTokenTags$Condition).tp_dict, "condVerbAny", make_descriptor(t_IceTokenTags$Condition::wrap_Object(*IceTokenTags$Condition::condVerbAny)));
                        PyDict_SetItemString(PY_TYPE(IceTokenTags$Condition).tp_dict, "condVerbAux", make_descriptor(t_IceTokenTags$Condition::wrap_Object(*IceTokenTags$Condition::condVerbAux)));
                        PyDict_SetItemString(PY_TYPE(IceTokenTags$Condition).tp_dict, "condVerbBe", make_descriptor(t_IceTokenTags$Condition::wrap_Object(*IceTokenTags$Condition::condVerbBe)));
                        PyDict_SetItemString(PY_TYPE(IceTokenTags$Condition).tp_dict, "condVerbCaseMark", make_descriptor(t_IceTokenTags$Condition::wrap_Object(*IceTokenTags$Condition::condVerbCaseMark)));
                        PyDict_SetItemString(PY_TYPE(IceTokenTags$Condition).tp_dict, "condVerbImperative", make_descriptor(t_IceTokenTags$Condition::wrap_Object(*IceTokenTags$Condition::condVerbImperative)));
                        PyDict_SetItemString(PY_TYPE(IceTokenTags$Condition).tp_dict, "condVerbIndicative", make_descriptor(t_IceTokenTags$Condition::wrap_Object(*IceTokenTags$Condition::condVerbIndicative)));
                        PyDict_SetItemString(PY_TYPE(IceTokenTags$Condition).tp_dict, "condVerbInf", make_descriptor(t_IceTokenTags$Condition::wrap_Object(*IceTokenTags$Condition::condVerbInf)));
                        PyDict_SetItemString(PY_TYPE(IceTokenTags$Condition).tp_dict, "condVerbMiddle", make_descriptor(t_IceTokenTags$Condition::wrap_Object(*IceTokenTags$Condition::condVerbMiddle)));
                        PyDict_SetItemString(PY_TYPE(IceTokenTags$Condition).tp_dict, "condVerbPresentPart", make_descriptor(t_IceTokenTags$Condition::wrap_Object(*IceTokenTags$Condition::condVerbPresentPart)));
                        PyDict_SetItemString(PY_TYPE(IceTokenTags$Condition).tp_dict, "condVerbSpecialAux", make_descriptor(t_IceTokenTags$Condition::wrap_Object(*IceTokenTags$Condition::condVerbSpecialAux)));
                        PyDict_SetItemString(PY_TYPE(IceTokenTags$Condition).tp_dict, "condVerbSpecialInf", make_descriptor(t_IceTokenTags$Condition::wrap_Object(*IceTokenTags$Condition::condVerbSpecialInf)));
                        PyDict_SetItemString(PY_TYPE(IceTokenTags$Condition).tp_dict, "condVerbSubjunctive", make_descriptor(t_IceTokenTags$Condition::wrap_Object(*IceTokenTags$Condition::condVerbSubjunctive)));
                        PyDict_SetItemString(PY_TYPE(IceTokenTags$Condition).tp_dict, "condVerbSupine", make_descriptor(t_IceTokenTags$Condition::wrap_Object(*IceTokenTags$Condition::condVerbSupine)));
                        PyDict_SetItemString(PY_TYPE(IceTokenTags$Condition).tp_dict, "condWordClass", make_descriptor(t_IceTokenTags$Condition::wrap_Object(*IceTokenTags$Condition::condWordClass)));
                    }

                    static PyObject *t_IceTokenTags$Condition_cast_(PyTypeObject *type, PyObject *arg)
                    {
                        if (!(arg = castCheck(arg, IceTokenTags$Condition::initializeClass, 1)))
                            return NULL;
                        return t_IceTokenTags$Condition::wrap_Object(IceTokenTags$Condition(((t_IceTokenTags$Condition *) arg)->object.this$));
                    }
                    static PyObject *t_IceTokenTags$Condition_instance_(PyTypeObject *type, PyObject *arg)
                    {
                        if (!castCheck(arg, IceTokenTags$Condition::initializeClass, 0))
                            Py_RETURN_FALSE;
                        Py_RETURN_TRUE;
                    }

                    static PyObject *t_IceTokenTags$Condition_valueOf(PyTypeObject *type, PyObject *args)
                    {
                        ::java::lang::String a0((jobject) NULL);
                        IceTokenTags$Condition result((jobject) NULL);

                        if (!parseArgs(args, "s", &a0))
                        {
                            OBJ_CALL(result = ::is::iclt::icenlp::core::tokenizer::IceTokenTags$Condition::valueOf(a0));
                            return t_IceTokenTags$Condition::wrap_Object(result);
                        }

                        return callSuper(type, "valueOf", args, 2);
                    }

                    static PyObject *t_IceTokenTags$Condition_values(PyTypeObject *type)
                    {
                        JArray< IceTokenTags$Condition > result((jobject) NULL);
                        OBJ_CALL(result = ::is::iclt::icenlp::core::tokenizer::IceTokenTags$Condition::values());
                        return JArray<jobject>(result.this$).wrap(t_IceTokenTags$Condition::wrap_jobject);
                    }
                }
            }
        }
    }
}
#include <jni.h>
#include "JCCEnv.h"
#include "is/iclt/icenlp/core/iceparser/Func_OBJ3.h"
#include "java/io/IOException.h"
#include "java/io/Reader.h"
#include "java/io/Writer.h"
#include "java/lang/Class.h"
#include "java/io/InputStream.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace is {
    namespace iclt {
        namespace icenlp {
            namespace core {
                namespace iceparser {

                    ::java::lang::Class *Func_OBJ3::class$ = NULL;
                    jmethodID *Func_OBJ3::mids$ = NULL;
                    jint Func_OBJ3::YYEOF = (jint) 0;
                    jint Func_OBJ3::YYINITIAL = (jint) 0;

                    jclass Func_OBJ3::initializeClass()
                    {
                        if (!class$)
                        {

                            jclass cls = (jclass) env->findClass("is/iclt/icenlp/core/iceparser/Func_OBJ3");

                            mids$ = new jmethodID[max_mid];
                            mids$[mid_init$_cf2e3c10] = env->getMethodID(cls, "<init>", "(Ljava/io/Reader;)V");
                            mids$[mid_init$_be2e4f90] = env->getMethodID(cls, "<init>", "(Ljava/io/InputStream;)V");
                            mids$[mid_main_4dd4540c] = env->getStaticMethodID(cls, "main", "([Ljava/lang/String;)V");
                            mids$[mid_parse_5bcd5850] = env->getMethodID(cls, "parse", "(Ljava/io/Writer;)V");
                            mids$[mid_yybegin_39c7bd3c] = env->getMethodID(cls, "yybegin", "(I)V");
                            mids$[mid_yycharat_39c7bd29] = env->getMethodID(cls, "yycharat", "(I)C");
                            mids$[mid_yyclose_54c6a166] = env->getMethodID(cls, "yyclose", "()V");
                            mids$[mid_yylength_54c6a179] = env->getMethodID(cls, "yylength", "()I");
                            mids$[mid_yylex_54c6a179] = env->getMethodID(cls, "yylex", "()I");
                            mids$[mid_yypushback_39c7bd3c] = env->getMethodID(cls, "yypushback", "(I)V");
                            mids$[mid_yyreset_cf2e3c10] = env->getMethodID(cls, "yyreset", "(Ljava/io/Reader;)V");
                            mids$[mid_yystate_54c6a179] = env->getMethodID(cls, "yystate", "()I");
                            mids$[mid_yytext_14c7b5c5] = env->getMethodID(cls, "yytext", "()Ljava/lang/String;");

                            class$ = (::java::lang::Class *) new JObject(cls);
                            cls = (jclass) class$->this$;

                            YYEOF = env->getStaticIntField(cls, "YYEOF");
                            YYINITIAL = env->getStaticIntField(cls, "YYINITIAL");
                        }
                        return (jclass) class$->this$;
                    }

                    Func_OBJ3::Func_OBJ3(const ::java::io::Reader & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_cf2e3c10, a0.this$)) {}

                    Func_OBJ3::Func_OBJ3(const ::java::io::InputStream & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_be2e4f90, a0.this$)) {}

                    void Func_OBJ3::main(const JArray< ::java::lang::String > & a0)
                    {
                        jclass cls = initializeClass();
                        env->callStaticVoidMethod(cls, mids$[mid_main_4dd4540c], a0.this$);
                    }

                    void Func_OBJ3::parse(const ::java::io::Writer & a0) const
                    {
                        env->callVoidMethod(this$, mids$[mid_parse_5bcd5850], a0.this$);
                    }

                    void Func_OBJ3::yybegin(jint a0) const
                    {
                        env->callVoidMethod(this$, mids$[mid_yybegin_39c7bd3c], a0);
                    }

                    jchar Func_OBJ3::yycharat(jint a0) const
                    {
                        return env->callCharMethod(this$, mids$[mid_yycharat_39c7bd29], a0);
                    }

                    void Func_OBJ3::yyclose() const
                    {
                        env->callVoidMethod(this$, mids$[mid_yyclose_54c6a166]);
                    }

                    jint Func_OBJ3::yylength() const
                    {
                        return env->callIntMethod(this$, mids$[mid_yylength_54c6a179]);
                    }

                    jint Func_OBJ3::yylex() const
                    {
                        return env->callIntMethod(this$, mids$[mid_yylex_54c6a179]);
                    }

                    void Func_OBJ3::yypushback(jint a0) const
                    {
                        env->callVoidMethod(this$, mids$[mid_yypushback_39c7bd3c], a0);
                    }

                    void Func_OBJ3::yyreset(const ::java::io::Reader & a0) const
                    {
                        env->callVoidMethod(this$, mids$[mid_yyreset_cf2e3c10], a0.this$);
                    }

                    jint Func_OBJ3::yystate() const
                    {
                        return env->callIntMethod(this$, mids$[mid_yystate_54c6a179]);
                    }

                    ::java::lang::String Func_OBJ3::yytext() const
                    {
                        return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_yytext_14c7b5c5]));
                    }
                }
            }
        }
    }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace is {
    namespace iclt {
        namespace icenlp {
            namespace core {
                namespace iceparser {
                    static PyObject *t_Func_OBJ3_cast_(PyTypeObject *type, PyObject *arg);
                    static PyObject *t_Func_OBJ3_instance_(PyTypeObject *type, PyObject *arg);
                    static int t_Func_OBJ3_init_(t_Func_OBJ3 *self, PyObject *args, PyObject *kwds);
                    static PyObject *t_Func_OBJ3_main(PyTypeObject *type, PyObject *arg);
                    static PyObject *t_Func_OBJ3_parse(t_Func_OBJ3 *self, PyObject *arg);
                    static PyObject *t_Func_OBJ3_yybegin(t_Func_OBJ3 *self, PyObject *arg);
                    static PyObject *t_Func_OBJ3_yycharat(t_Func_OBJ3 *self, PyObject *arg);
                    static PyObject *t_Func_OBJ3_yyclose(t_Func_OBJ3 *self);
                    static PyObject *t_Func_OBJ3_yylength(t_Func_OBJ3 *self);
                    static PyObject *t_Func_OBJ3_yylex(t_Func_OBJ3 *self);
                    static PyObject *t_Func_OBJ3_yypushback(t_Func_OBJ3 *self, PyObject *arg);
                    static PyObject *t_Func_OBJ3_yyreset(t_Func_OBJ3 *self, PyObject *arg);
                    static PyObject *t_Func_OBJ3_yystate(t_Func_OBJ3 *self);
                    static PyObject *t_Func_OBJ3_yytext(t_Func_OBJ3 *self);

                    static PyMethodDef t_Func_OBJ3__methods_[] = {
                        DECLARE_METHOD(t_Func_OBJ3, cast_, METH_O | METH_CLASS),
                        DECLARE_METHOD(t_Func_OBJ3, instance_, METH_O | METH_CLASS),
                        DECLARE_METHOD(t_Func_OBJ3, main, METH_O | METH_CLASS),
                        DECLARE_METHOD(t_Func_OBJ3, parse, METH_O),
                        DECLARE_METHOD(t_Func_OBJ3, yybegin, METH_O),
                        DECLARE_METHOD(t_Func_OBJ3, yycharat, METH_O),
                        DECLARE_METHOD(t_Func_OBJ3, yyclose, METH_NOARGS),
                        DECLARE_METHOD(t_Func_OBJ3, yylength, METH_NOARGS),
                        DECLARE_METHOD(t_Func_OBJ3, yylex, METH_NOARGS),
                        DECLARE_METHOD(t_Func_OBJ3, yypushback, METH_O),
                        DECLARE_METHOD(t_Func_OBJ3, yyreset, METH_O),
                        DECLARE_METHOD(t_Func_OBJ3, yystate, METH_NOARGS),
                        DECLARE_METHOD(t_Func_OBJ3, yytext, METH_NOARGS),
                        { NULL, NULL, 0, NULL }
                    };

                    DECLARE_TYPE(Func_OBJ3, t_Func_OBJ3, ::java::lang::Object, Func_OBJ3, t_Func_OBJ3_init_, 0, 0, 0, 0, 0);

                    void t_Func_OBJ3::install(PyObject *module)
                    {
                        installType(&PY_TYPE(Func_OBJ3), module, "Func_OBJ3", 0);
                    }

                    void t_Func_OBJ3::initialize(PyObject *module)
                    {
                        PyDict_SetItemString(PY_TYPE(Func_OBJ3).tp_dict, "class_", make_descriptor(Func_OBJ3::initializeClass, 1));
                        PyDict_SetItemString(PY_TYPE(Func_OBJ3).tp_dict, "wrapfn_", make_descriptor(t_Func_OBJ3::wrap_jobject));
                        PyDict_SetItemString(PY_TYPE(Func_OBJ3).tp_dict, "boxfn_", make_descriptor(boxObject));
                        Func_OBJ3::initializeClass();
                        PyDict_SetItemString(PY_TYPE(Func_OBJ3).tp_dict, "YYEOF", make_descriptor(Func_OBJ3::YYEOF));
                        PyDict_SetItemString(PY_TYPE(Func_OBJ3).tp_dict, "YYINITIAL", make_descriptor(Func_OBJ3::YYINITIAL));
                    }

                    static PyObject *t_Func_OBJ3_cast_(PyTypeObject *type, PyObject *arg)
                    {
                        if (!(arg = castCheck(arg, Func_OBJ3::initializeClass, 1)))
                            return NULL;
                        return t_Func_OBJ3::wrap_Object(Func_OBJ3(((t_Func_OBJ3 *) arg)->object.this$));
                    }
                    static PyObject *t_Func_OBJ3_instance_(PyTypeObject *type, PyObject *arg)
                    {
                        if (!castCheck(arg, Func_OBJ3::initializeClass, 0))
                            Py_RETURN_FALSE;
                        Py_RETURN_TRUE;
                    }

                    static int t_Func_OBJ3_init_(t_Func_OBJ3 *self, PyObject *args, PyObject *kwds)
                    {
                        switch (PyTuple_GET_SIZE(args)) {
                          case 1:
                            {
                                ::java::io::Reader a0((jobject) NULL);
                                Func_OBJ3 object((jobject) NULL);

                                if (!parseArgs(args, "k", ::java::io::Reader::initializeClass, &a0))
                                {
                                    INT_CALL(object = Func_OBJ3(a0));
                                    self->object = object;
                                    break;
                                }
                            }
                            {
                                ::java::io::InputStream a0((jobject) NULL);
                                Func_OBJ3 object((jobject) NULL);

                                if (!parseArgs(args, "k", ::java::io::InputStream::initializeClass, &a0))
                                {
                                    INT_CALL(object = Func_OBJ3(a0));
                                    self->object = object;
                                    break;
                                }
                            }
                          default:
                            PyErr_SetArgsError((PyObject *) self, "__init__", args);
                            return -1;
                        }

                        return 0;
                    }

                    static PyObject *t_Func_OBJ3_main(PyTypeObject *type, PyObject *arg)
                    {
                        JArray< ::java::lang::String > a0((jobject) NULL);

                        if (!parseArg(arg, "[s", &a0))
                        {
                            OBJ_CALL(::is::iclt::icenlp::core::iceparser::Func_OBJ3::main(a0));
                            Py_RETURN_NONE;
                        }

                        PyErr_SetArgsError(type, "main", arg);
                        return NULL;
                    }

                    static PyObject *t_Func_OBJ3_parse(t_Func_OBJ3 *self, PyObject *arg)
                    {
                        ::java::io::Writer a0((jobject) NULL);

                        if (!parseArg(arg, "k", ::java::io::Writer::initializeClass, &a0))
                        {
                            OBJ_CALL(self->object.parse(a0));
                            Py_RETURN_NONE;
                        }

                        PyErr_SetArgsError((PyObject *) self, "parse", arg);
                        return NULL;
                    }

                    static PyObject *t_Func_OBJ3_yybegin(t_Func_OBJ3 *self, PyObject *arg)
                    {
                        jint a0;

                        if (!parseArg(arg, "I", &a0))
                        {
                            OBJ_CALL(self->object.yybegin(a0));
                            Py_RETURN_NONE;
                        }

                        PyErr_SetArgsError((PyObject *) self, "yybegin", arg);
                        return NULL;
                    }

                    static PyObject *t_Func_OBJ3_yycharat(t_Func_OBJ3 *self, PyObject *arg)
                    {
                        jint a0;
                        jchar result;

                        if (!parseArg(arg, "I", &a0))
                        {
                            OBJ_CALL(result = self->object.yycharat(a0));
                            return PyUnicode_FromUnicode((Py_UNICODE *) &result, 1);
                        }

                        PyErr_SetArgsError((PyObject *) self, "yycharat", arg);
                        return NULL;
                    }

                    static PyObject *t_Func_OBJ3_yyclose(t_Func_OBJ3 *self)
                    {
                        OBJ_CALL(self->object.yyclose());
                        Py_RETURN_NONE;
                    }

                    static PyObject *t_Func_OBJ3_yylength(t_Func_OBJ3 *self)
                    {
                        jint result;
                        OBJ_CALL(result = self->object.yylength());
                        return PyInt_FromLong((long) result);
                    }

                    static PyObject *t_Func_OBJ3_yylex(t_Func_OBJ3 *self)
                    {
                        jint result;
                        OBJ_CALL(result = self->object.yylex());
                        return PyInt_FromLong((long) result);
                    }

                    static PyObject *t_Func_OBJ3_yypushback(t_Func_OBJ3 *self, PyObject *arg)
                    {
                        jint a0;

                        if (!parseArg(arg, "I", &a0))
                        {
                            OBJ_CALL(self->object.yypushback(a0));
                            Py_RETURN_NONE;
                        }

                        PyErr_SetArgsError((PyObject *) self, "yypushback", arg);
                        return NULL;
                    }

                    static PyObject *t_Func_OBJ3_yyreset(t_Func_OBJ3 *self, PyObject *arg)
                    {
                        ::java::io::Reader a0((jobject) NULL);

                        if (!parseArg(arg, "k", ::java::io::Reader::initializeClass, &a0))
                        {
                            OBJ_CALL(self->object.yyreset(a0));
                            Py_RETURN_NONE;
                        }

                        PyErr_SetArgsError((PyObject *) self, "yyreset", arg);
                        return NULL;
                    }

                    static PyObject *t_Func_OBJ3_yystate(t_Func_OBJ3 *self)
                    {
                        jint result;
                        OBJ_CALL(result = self->object.yystate());
                        return PyInt_FromLong((long) result);
                    }

                    static PyObject *t_Func_OBJ3_yytext(t_Func_OBJ3 *self)
                    {
                        ::java::lang::String result((jobject) NULL);
                        OBJ_CALL(result = self->object.yytext());
                        return j2p(result);
                    }
                }
            }
        }
    }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/lang/String.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/Comparable.h"
#include "java/util/Comparator.h"
#include "java/io/UnsupportedEncodingException.h"
#include "java/io/Serializable.h"
#include "java/lang/Class.h"
#include "java/lang/StringBuffer.h"
#include "java/lang/CharSequence.h"
#include "java/util/Locale.h"
#include "JArray.h"

namespace java {
    namespace lang {

        ::java::lang::Class *String::class$ = NULL;
        jmethodID *String::mids$ = NULL;
        ::java::util::Comparator *String::CASE_INSENSITIVE_ORDER = NULL;

        jclass String::initializeClass()
        {
            if (!class$)
            {

                jclass cls = (jclass) env->findClass("java/lang/String");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                mids$[mid_init$_700e23d6] = env->getMethodID(cls, "<init>", "([C)V");
                mids$[mid_init$_49b4f12b] = env->getMethodID(cls, "<init>", "([B)V");
                mids$[mid_init$_44634788] = env->getMethodID(cls, "<init>", "(Ljava/lang/StringBuffer;)V");
                mids$[mid_init$_9f94ae34] = env->getMethodID(cls, "<init>", "(Ljava/lang/StringBuilder;)V");
                mids$[mid_init$_b8354c43] = env->getMethodID(cls, "<init>", "([BI)V");
                mids$[mid_init$_1a0c6fd5] = env->getMethodID(cls, "<init>", "([BLjava/lang/String;)V");
                mids$[mid_init$_6f0bb356] = env->getMethodID(cls, "<init>", "([CII)V");
                mids$[mid_init$_3e1ea22c] = env->getMethodID(cls, "<init>", "([III)V");
                mids$[mid_init$_86f4435f] = env->getMethodID(cls, "<init>", "([BII)V");
                mids$[mid_init$_96a25f0b] = env->getMethodID(cls, "<init>", "([BIII)V");
                mids$[mid_init$_5ab96441] = env->getMethodID(cls, "<init>", "([BIILjava/lang/String;)V");
                mids$[mid_charAt_39c7bd29] = env->getMethodID(cls, "charAt", "(I)C");
                mids$[mid_codePointAt_39c7bd23] = env->getMethodID(cls, "codePointAt", "(I)I");
                mids$[mid_codePointBefore_39c7bd23] = env->getMethodID(cls, "codePointBefore", "(I)I");
                mids$[mid_codePointCount_d8d154b9] = env->getMethodID(cls, "codePointCount", "(II)I");
                mids$[mid_compareTo_290588f1] = env->getMethodID(cls, "compareTo", "(Ljava/lang/Object;)I");
                mids$[mid_compareTo_5fdc3f57] = env->getMethodID(cls, "compareTo", "(Ljava/lang/String;)I");
                mids$[mid_compareToIgnoreCase_5fdc3f57] = env->getMethodID(cls, "compareToIgnoreCase", "(Ljava/lang/String;)I");
                mids$[mid_concat_97a5258f] = env->getMethodID(cls, "concat", "(Ljava/lang/String;)Ljava/lang/String;");
                mids$[mid_contains_a8afc646] = env->getMethodID(cls, "contains", "(Ljava/lang/CharSequence;)Z");
                mids$[mid_contentEquals_a8afc646] = env->getMethodID(cls, "contentEquals", "(Ljava/lang/CharSequence;)Z");
                mids$[mid_contentEquals_44634784] = env->getMethodID(cls, "contentEquals", "(Ljava/lang/StringBuffer;)Z");
                mids$[mid_copyValueOf_c783d655] = env->getStaticMethodID(cls, "copyValueOf", "([C)Ljava/lang/String;");
                mids$[mid_copyValueOf_ddb60785] = env->getStaticMethodID(cls, "copyValueOf", "([CII)Ljava/lang/String;");
                mids$[mid_endsWith_5fdc3f44] = env->getMethodID(cls, "endsWith", "(Ljava/lang/String;)Z");
                mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
                mids$[mid_equalsIgnoreCase_5fdc3f44] = env->getMethodID(cls, "equalsIgnoreCase", "(Ljava/lang/String;)Z");
                mids$[mid_format_0fb26e3b] = env->getStaticMethodID(cls, "format", "(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;");
                mids$[mid_format_84ed7d06] = env->getStaticMethodID(cls, "format", "(Ljava/util/Locale;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;");
                mids$[mid_getBytes_dab10e7e] = env->getMethodID(cls, "getBytes", "()[B");
                mids$[mid_getBytes_94a731a4] = env->getMethodID(cls, "getBytes", "(Ljava/lang/String;)[B");
                mids$[mid_getBytes_fdf97d27] = env->getMethodID(cls, "getBytes", "(II[BI)V");
                mids$[mid_getChars_06518f84] = env->getMethodID(cls, "getChars", "(II[CI)V");
                mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
                mids$[mid_indexOf_39c7bd23] = env->getMethodID(cls, "indexOf", "(I)I");
                mids$[mid_indexOf_5fdc3f57] = env->getMethodID(cls, "indexOf", "(Ljava/lang/String;)I");
                mids$[mid_indexOf_6e53ccd9] = env->getMethodID(cls, "indexOf", "(Ljava/lang/String;I)I");
                mids$[mid_indexOf_d8d154b9] = env->getMethodID(cls, "indexOf", "(II)I");
                mids$[mid_intern_14c7b5c5] = env->getMethodID(cls, "intern", "()Ljava/lang/String;");
                mids$[mid_isEmpty_54c6a16a] = env->getMethodID(cls, "isEmpty", "()Z");
                mids$[mid_lastIndexOf_39c7bd23] = env->getMethodID(cls, "lastIndexOf", "(I)I");
                mids$[mid_lastIndexOf_5fdc3f57] = env->getMethodID(cls, "lastIndexOf", "(Ljava/lang/String;)I");
                mids$[mid_lastIndexOf_d8d154b9] = env->getMethodID(cls, "lastIndexOf", "(II)I");
                mids$[mid_lastIndexOf_6e53ccd9] = env->getMethodID(cls, "lastIndexOf", "(Ljava/lang/String;I)I");
                mids$[mid_length_54c6a179] = env->getMethodID(cls, "length", "()I");
                mids$[mid_matches_5fdc3f44] = env->getMethodID(cls, "matches", "(Ljava/lang/String;)Z");
                mids$[mid_offsetByCodePoints_d8d154b9] = env->getMethodID(cls, "offsetByCodePoints", "(II)I");
                mids$[mid_regionMatches_344d8cb6] = env->getMethodID(cls, "regionMatches", "(ILjava/lang/String;II)Z");
                mids$[mid_regionMatches_35f2560d] = env->getMethodID(cls, "regionMatches", "(ZILjava/lang/String;II)Z");
                mids$[mid_replace_f1c62e0d] = env->getMethodID(cls, "replace", "(CC)Ljava/lang/String;");
                mids$[mid_replace_103b702d] = env->getMethodID(cls, "replace", "(Ljava/lang/CharSequence;Ljava/lang/CharSequence;)Ljava/lang/String;");
                mids$[mid_replaceAll_aacea7e9] = env->getMethodID(cls, "replaceAll", "(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;");
                mids$[mid_replaceFirst_aacea7e9] = env->getMethodID(cls, "replaceFirst", "(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;");
                mids$[mid_split_1f6a174f] = env->getMethodID(cls, "split", "(Ljava/lang/String;)[Ljava/lang/String;");
                mids$[mid_split_3384fe85] = env->getMethodID(cls, "split", "(Ljava/lang/String;I)[Ljava/lang/String;");
                mids$[mid_startsWith_5fdc3f44] = env->getMethodID(cls, "startsWith", "(Ljava/lang/String;)Z");
                mids$[mid_startsWith_6e53ccca] = env->getMethodID(cls, "startsWith", "(Ljava/lang/String;I)Z");
                mids$[mid_subSequence_f88dfd57] = env->getMethodID(cls, "subSequence", "(II)Ljava/lang/CharSequence;");
                mids$[mid_substring_141401b3] = env->getMethodID(cls, "substring", "(I)Ljava/lang/String;");
                mids$[mid_substring_f9118fe5] = env->getMethodID(cls, "substring", "(II)Ljava/lang/String;");
                mids$[mid_toCharArray_dab10e7f] = env->getMethodID(cls, "toCharArray", "()[C");
                mids$[mid_toLowerCase_14c7b5c5] = env->getMethodID(cls, "toLowerCase", "()Ljava/lang/String;");
                mids$[mid_toLowerCase_c0fb304e] = env->getMethodID(cls, "toLowerCase", "(Ljava/util/Locale;)Ljava/lang/String;");
                mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
                mids$[mid_toUpperCase_14c7b5c5] = env->getMethodID(cls, "toUpperCase", "()Ljava/lang/String;");
                mids$[mid_toUpperCase_c0fb304e] = env->getMethodID(cls, "toUpperCase", "(Ljava/util/Locale;)Ljava/lang/String;");
                mids$[mid_trim_14c7b5c5] = env->getMethodID(cls, "trim", "()Ljava/lang/String;");
                mids$[mid_valueOf_445a175e] = env->getStaticMethodID(cls, "valueOf", "(Z)Ljava/lang/String;");
                mids$[mid_valueOf_c9db4eed] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/Object;)Ljava/lang/String;");
                mids$[mid_valueOf_5ded254a] = env->getStaticMethodID(cls, "valueOf", "(F)Ljava/lang/String;");
                mids$[mid_valueOf_1b4624f8] = env->getStaticMethodID(cls, "valueOf", "(D)Ljava/lang/String;");
                mids$[mid_valueOf_141401b3] = env->getStaticMethodID(cls, "valueOf", "(I)Ljava/lang/String;");
                mids$[mid_valueOf_c783d655] = env->getStaticMethodID(cls, "valueOf", "([C)Ljava/lang/String;");
                mids$[mid_valueOf_7611a535] = env->getStaticMethodID(cls, "valueOf", "(C)Ljava/lang/String;");
                mids$[mid_valueOf_3e02f30e] = env->getStaticMethodID(cls, "valueOf", "(J)Ljava/lang/String;");
                mids$[mid_valueOf_ddb60785] = env->getStaticMethodID(cls, "valueOf", "([CII)Ljava/lang/String;");

                class$ = (::java::lang::Class *) new JObject(cls);
                cls = (jclass) class$->this$;

                CASE_INSENSITIVE_ORDER = new ::java::util::Comparator(env->getStaticObjectField(cls, "CASE_INSENSITIVE_ORDER", "Ljava/util/Comparator;"));
            }
            return (jclass) class$->this$;
        }

        String::String() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        String::String(const JArray< jchar > & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_700e23d6, a0.this$)) {}

        String::String(const JArray< jbyte > & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_49b4f12b, a0.this$)) {}

        String::String(const ::java::lang::StringBuffer & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_44634788, a0.this$)) {}

        String::String(const ::java::lang::StringBuilder & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_9f94ae34, a0.this$)) {}

        String::String(const JArray< jbyte > & a0, jint a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_b8354c43, a0.this$, a1)) {}

        String::String(const JArray< jbyte > & a0, const String & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_1a0c6fd5, a0.this$, a1.this$)) {}

        String::String(const JArray< jchar > & a0, jint a1, jint a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_6f0bb356, a0.this$, a1, a2)) {}

        String::String(const JArray< jint > & a0, jint a1, jint a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_3e1ea22c, a0.this$, a1, a2)) {}

        String::String(const JArray< jbyte > & a0, jint a1, jint a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_86f4435f, a0.this$, a1, a2)) {}

        String::String(const JArray< jbyte > & a0, jint a1, jint a2, jint a3) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_96a25f0b, a0.this$, a1, a2, a3)) {}

        String::String(const JArray< jbyte > & a0, jint a1, jint a2, const String & a3) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_5ab96441, a0.this$, a1, a2, a3.this$)) {}

        jchar String::charAt(jint a0) const
        {
            return env->callCharMethod(this$, mids$[mid_charAt_39c7bd29], a0);
        }

        jint String::codePointAt(jint a0) const
        {
            return env->callIntMethod(this$, mids$[mid_codePointAt_39c7bd23], a0);
        }

        jint String::codePointBefore(jint a0) const
        {
            return env->callIntMethod(this$, mids$[mid_codePointBefore_39c7bd23], a0);
        }

        jint String::codePointCount(jint a0, jint a1) const
        {
            return env->callIntMethod(this$, mids$[mid_codePointCount_d8d154b9], a0, a1);
        }

        jint String::compareTo(const ::java::lang::Object & a0) const
        {
            return env->callIntMethod(this$, mids$[mid_compareTo_290588f1], a0.this$);
        }

        jint String::compareTo(const String & a0) const
        {
            return env->callIntMethod(this$, mids$[mid_compareTo_5fdc3f57], a0.this$);
        }

        jint String::compareToIgnoreCase(const String & a0) const
        {
            return env->callIntMethod(this$, mids$[mid_compareToIgnoreCase_5fdc3f57], a0.this$);
        }

        String String::concat(const String & a0) const
        {
            return String(env->callObjectMethod(this$, mids$[mid_concat_97a5258f], a0.this$));
        }

        jboolean String::contains(const ::java::lang::CharSequence & a0) const
        {
            return env->callBooleanMethod(this$, mids$[mid_contains_a8afc646], a0.this$);
        }

        jboolean String::contentEquals(const ::java::lang::CharSequence & a0) const
        {
            return env->callBooleanMethod(this$, mids$[mid_contentEquals_a8afc646], a0.this$);
        }

        jboolean String::contentEquals(const ::java::lang::StringBuffer & a0) const
        {
            return env->callBooleanMethod(this$, mids$[mid_contentEquals_44634784], a0.this$);
        }

        String String::copyValueOf(const JArray< jchar > & a0)
        {
            jclass cls = initializeClass();
            return String(env->callStaticObjectMethod(cls, mids$[mid_copyValueOf_c783d655], a0.this$));
        }

        String String::copyValueOf(const JArray< jchar > & a0, jint a1, jint a2)
        {
            jclass cls = initializeClass();
            return String(env->callStaticObjectMethod(cls, mids$[mid_copyValueOf_ddb60785], a0.this$, a1, a2));
        }

        jboolean String::endsWith(const String & a0) const
        {
            return env->callBooleanMethod(this$, mids$[mid_endsWith_5fdc3f44], a0.this$);
        }

        jboolean String::equals(const ::java::lang::Object & a0) const
        {
            return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        jboolean String::equalsIgnoreCase(const String & a0) const
        {
            return env->callBooleanMethod(this$, mids$[mid_equalsIgnoreCase_5fdc3f44], a0.this$);
        }

        String String::format(const String & a0, const JArray< ::java::lang::Object > & a1)
        {
            jclass cls = initializeClass();
            return String(env->callStaticObjectMethod(cls, mids$[mid_format_0fb26e3b], a0.this$, a1.this$));
        }

        String String::format(const ::java::util::Locale & a0, const String & a1, const JArray< ::java::lang::Object > & a2)
        {
            jclass cls = initializeClass();
            return String(env->callStaticObjectMethod(cls, mids$[mid_format_84ed7d06], a0.this$, a1.this$, a2.this$));
        }

        JArray< jbyte > String::getBytes() const
        {
            return JArray< jbyte >(env->callObjectMethod(this$, mids$[mid_getBytes_dab10e7e]));
        }

        JArray< jbyte > String::getBytes(const String & a0) const
        {
            return JArray< jbyte >(env->callObjectMethod(this$, mids$[mid_getBytes_94a731a4], a0.this$));
        }

        void String::getBytes(jint a0, jint a1, const JArray< jbyte > & a2, jint a3) const
        {
            env->callVoidMethod(this$, mids$[mid_getBytes_fdf97d27], a0, a1, a2.this$, a3);
        }

        void String::getChars(jint a0, jint a1, const JArray< jchar > & a2, jint a3) const
        {
            env->callVoidMethod(this$, mids$[mid_getChars_06518f84], a0, a1, a2.this$, a3);
        }

        jint String::hashCode() const
        {
            return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        jint String::indexOf(jint a0) const
        {
            return env->callIntMethod(this$, mids$[mid_indexOf_39c7bd23], a0);
        }

        jint String::indexOf(const String & a0) const
        {
            return env->callIntMethod(this$, mids$[mid_indexOf_5fdc3f57], a0.this$);
        }

        jint String::indexOf(const String & a0, jint a1) const
        {
            return env->callIntMethod(this$, mids$[mid_indexOf_6e53ccd9], a0.this$, a1);
        }

        jint String::indexOf(jint a0, jint a1) const
        {
            return env->callIntMethod(this$, mids$[mid_indexOf_d8d154b9], a0, a1);
        }

        String String::intern() const
        {
            return String(env->callObjectMethod(this$, mids$[mid_intern_14c7b5c5]));
        }

        jboolean String::isEmpty() const
        {
            return env->callBooleanMethod(this$, mids$[mid_isEmpty_54c6a16a]);
        }

        jint String::lastIndexOf(jint a0) const
        {
            return env->callIntMethod(this$, mids$[mid_lastIndexOf_39c7bd23], a0);
        }

        jint String::lastIndexOf(const String & a0) const
        {
            return env->callIntMethod(this$, mids$[mid_lastIndexOf_5fdc3f57], a0.this$);
        }

        jint String::lastIndexOf(jint a0, jint a1) const
        {
            return env->callIntMethod(this$, mids$[mid_lastIndexOf_d8d154b9], a0, a1);
        }

        jint String::lastIndexOf(const String & a0, jint a1) const
        {
            return env->callIntMethod(this$, mids$[mid_lastIndexOf_6e53ccd9], a0.this$, a1);
        }

        jint String::length() const
        {
            return env->callIntMethod(this$, mids$[mid_length_54c6a179]);
        }

        jboolean String::matches(const String & a0) const
        {
            return env->callBooleanMethod(this$, mids$[mid_matches_5fdc3f44], a0.this$);
        }

        jint String::offsetByCodePoints(jint a0, jint a1) const
        {
            return env->callIntMethod(this$, mids$[mid_offsetByCodePoints_d8d154b9], a0, a1);
        }

        jboolean String::regionMatches(jint a0, const String & a1, jint a2, jint a3) const
        {
            return env->callBooleanMethod(this$, mids$[mid_regionMatches_344d8cb6], a0, a1.this$, a2, a3);
        }

        jboolean String::regionMatches(jboolean a0, jint a1, const String & a2, jint a3, jint a4) const
        {
            return env->callBooleanMethod(this$, mids$[mid_regionMatches_35f2560d], a0, a1, a2.this$, a3, a4);
        }

        String String::replace(jchar a0, jchar a1) const
        {
            return String(env->callObjectMethod(this$, mids$[mid_replace_f1c62e0d], a0, a1));
        }

        String String::replace(const ::java::lang::CharSequence & a0, const ::java::lang::CharSequence & a1) const
        {
            return String(env->callObjectMethod(this$, mids$[mid_replace_103b702d], a0.this$, a1.this$));
        }

        String String::replaceAll(const String & a0, const String & a1) const
        {
            return String(env->callObjectMethod(this$, mids$[mid_replaceAll_aacea7e9], a0.this$, a1.this$));
        }

        String String::replaceFirst(const String & a0, const String & a1) const
        {
            return String(env->callObjectMethod(this$, mids$[mid_replaceFirst_aacea7e9], a0.this$, a1.this$));
        }

        JArray< String > String::split(const String & a0) const
        {
            return JArray< String >(env->callObjectMethod(this$, mids$[mid_split_1f6a174f], a0.this$));
        }

        JArray< String > String::split(const String & a0, jint a1) const
        {
            return JArray< String >(env->callObjectMethod(this$, mids$[mid_split_3384fe85], a0.this$, a1));
        }

        jboolean String::startsWith(const String & a0) const
        {
            return env->callBooleanMethod(this$, mids$[mid_startsWith_5fdc3f44], a0.this$);
        }

        jboolean String::startsWith(const String & a0, jint a1) const
        {
            return env->callBooleanMethod(this$, mids$[mid_startsWith_6e53ccca], a0.this$, a1);
        }

        ::java::lang::CharSequence String::subSequence(jint a0, jint a1) const
        {
            return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_subSequence_f88dfd57], a0, a1));
        }

        String String::substring(jint a0) const
        {
            return String(env->callObjectMethod(this$, mids$[mid_substring_141401b3], a0));
        }

        String String::substring(jint a0, jint a1) const
        {
            return String(env->callObjectMethod(this$, mids$[mid_substring_f9118fe5], a0, a1));
        }

        JArray< jchar > String::toCharArray() const
        {
            return JArray< jchar >(env->callObjectMethod(this$, mids$[mid_toCharArray_dab10e7f]));
        }

        String String::toLowerCase() const
        {
            return String(env->callObjectMethod(this$, mids$[mid_toLowerCase_14c7b5c5]));
        }

        String String::toLowerCase(const ::java::util::Locale & a0) const
        {
            return String(env->callObjectMethod(this$, mids$[mid_toLowerCase_c0fb304e], a0.this$));
        }

        String String::toString() const
        {
            return String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }

        String String::toUpperCase() const
        {
            return String(env->callObjectMethod(this$, mids$[mid_toUpperCase_14c7b5c5]));
        }

        String String::toUpperCase(const ::java::util::Locale & a0) const
        {
            return String(env->callObjectMethod(this$, mids$[mid_toUpperCase_c0fb304e], a0.this$));
        }

        String String::trim() const
        {
            return String(env->callObjectMethod(this$, mids$[mid_trim_14c7b5c5]));
        }

        String String::valueOf(jboolean a0)
        {
            jclass cls = initializeClass();
            return String(env->callStaticObjectMethod(cls, mids$[mid_valueOf_445a175e], a0));
        }

        String String::valueOf(const ::java::lang::Object & a0)
        {
            jclass cls = initializeClass();
            return String(env->callStaticObjectMethod(cls, mids$[mid_valueOf_c9db4eed], a0.this$));
        }

        String String::valueOf(jfloat a0)
        {
            jclass cls = initializeClass();
            return String(env->callStaticObjectMethod(cls, mids$[mid_valueOf_5ded254a], a0));
        }

        String String::valueOf(jdouble a0)
        {
            jclass cls = initializeClass();
            return String(env->callStaticObjectMethod(cls, mids$[mid_valueOf_1b4624f8], a0));
        }

        String String::valueOf(jint a0)
        {
            jclass cls = initializeClass();
            return String(env->callStaticObjectMethod(cls, mids$[mid_valueOf_141401b3], a0));
        }

        String String::valueOf(const JArray< jchar > & a0)
        {
            jclass cls = initializeClass();
            return String(env->callStaticObjectMethod(cls, mids$[mid_valueOf_c783d655], a0.this$));
        }

        String String::valueOf(jchar a0)
        {
            jclass cls = initializeClass();
            return String(env->callStaticObjectMethod(cls, mids$[mid_valueOf_7611a535], a0));
        }

        String String::valueOf(jlong a0)
        {
            jclass cls = initializeClass();
            return String(env->callStaticObjectMethod(cls, mids$[mid_valueOf_3e02f30e], a0));
        }

        String String::valueOf(const JArray< jchar > & a0, jint a1, jint a2)
        {
            jclass cls = initializeClass();
            return String(env->callStaticObjectMethod(cls, mids$[mid_valueOf_ddb60785], a0.this$, a1, a2));
        }
    }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
    namespace lang {
        static PyObject *t_String_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_String_instance_(PyTypeObject *type, PyObject *arg);
        static int t_String_init_(t_String *self, PyObject *args, PyObject *kwds);
        static PyObject *t_String_charAt(t_String *self, PyObject *arg);
        static PyObject *t_String_codePointAt(t_String *self, PyObject *arg);
        static PyObject *t_String_codePointBefore(t_String *self, PyObject *arg);
        static PyObject *t_String_codePointCount(t_String *self, PyObject *args);
        static PyObject *t_String_compareTo(t_String *self, PyObject *args);
        static PyObject *t_String_compareToIgnoreCase(t_String *self, PyObject *arg);
        static PyObject *t_String_concat(t_String *self, PyObject *arg);
        static PyObject *t_String_contains(t_String *self, PyObject *arg);
        static PyObject *t_String_contentEquals(t_String *self, PyObject *args);
        static PyObject *t_String_copyValueOf(PyTypeObject *type, PyObject *args);
        static PyObject *t_String_endsWith(t_String *self, PyObject *arg);
        static PyObject *t_String_equals(t_String *self, PyObject *args);
        static PyObject *t_String_equalsIgnoreCase(t_String *self, PyObject *arg);
        static PyObject *t_String_format(PyTypeObject *type, PyObject *args);
        static PyObject *t_String_getBytes(t_String *self, PyObject *args);
        static PyObject *t_String_getChars(t_String *self, PyObject *args);
        static PyObject *t_String_hashCode(t_String *self, PyObject *args);
        static PyObject *t_String_indexOf(t_String *self, PyObject *args);
        static PyObject *t_String_intern(t_String *self);
        static PyObject *t_String_isEmpty(t_String *self);
        static PyObject *t_String_lastIndexOf(t_String *self, PyObject *args);
        static PyObject *t_String_length(t_String *self);
        static PyObject *t_String_matches(t_String *self, PyObject *arg);
        static PyObject *t_String_offsetByCodePoints(t_String *self, PyObject *args);
        static PyObject *t_String_regionMatches(t_String *self, PyObject *args);
        static PyObject *t_String_replace(t_String *self, PyObject *args);
        static PyObject *t_String_replaceAll(t_String *self, PyObject *args);
        static PyObject *t_String_replaceFirst(t_String *self, PyObject *args);
        static PyObject *t_String_split(t_String *self, PyObject *args);
        static PyObject *t_String_startsWith(t_String *self, PyObject *args);
        static PyObject *t_String_subSequence(t_String *self, PyObject *args);
        static PyObject *t_String_substring(t_String *self, PyObject *args);
        static PyObject *t_String_toCharArray(t_String *self);
        static PyObject *t_String_toLowerCase(t_String *self, PyObject *args);
        static PyObject *t_String_toString(t_String *self, PyObject *args);
        static PyObject *t_String_toUpperCase(t_String *self, PyObject *args);
        static PyObject *t_String_trim(t_String *self);
        static PyObject *t_String_valueOf(PyTypeObject *type, PyObject *args);
        static PyObject *t_String_get__bytes(t_String *self, void *data);
        static PyObject *t_String_get__empty(t_String *self, void *data);
        static PyGetSetDef t_String__fields_[] = {
            DECLARE_GET_FIELD(t_String, bytes),
            DECLARE_GET_FIELD(t_String, empty),
            { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_String__methods_[] = {
            DECLARE_METHOD(t_String, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_String, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_String, charAt, METH_O),
            DECLARE_METHOD(t_String, codePointAt, METH_O),
            DECLARE_METHOD(t_String, codePointBefore, METH_O),
            DECLARE_METHOD(t_String, codePointCount, METH_VARARGS),
            DECLARE_METHOD(t_String, compareTo, METH_VARARGS),
            DECLARE_METHOD(t_String, compareToIgnoreCase, METH_O),
            DECLARE_METHOD(t_String, concat, METH_O),
            DECLARE_METHOD(t_String, contains, METH_O),
            DECLARE_METHOD(t_String, contentEquals, METH_VARARGS),
            DECLARE_METHOD(t_String, copyValueOf, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_String, endsWith, METH_O),
            DECLARE_METHOD(t_String, equals, METH_VARARGS),
            DECLARE_METHOD(t_String, equalsIgnoreCase, METH_O),
            DECLARE_METHOD(t_String, format, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_String, getBytes, METH_VARARGS),
            DECLARE_METHOD(t_String, getChars, METH_VARARGS),
            DECLARE_METHOD(t_String, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_String, indexOf, METH_VARARGS),
            DECLARE_METHOD(t_String, intern, METH_NOARGS),
            DECLARE_METHOD(t_String, isEmpty, METH_NOARGS),
            DECLARE_METHOD(t_String, lastIndexOf, METH_VARARGS),
            DECLARE_METHOD(t_String, length, METH_NOARGS),
            DECLARE_METHOD(t_String, matches, METH_O),
            DECLARE_METHOD(t_String, offsetByCodePoints, METH_VARARGS),
            DECLARE_METHOD(t_String, regionMatches, METH_VARARGS),
            DECLARE_METHOD(t_String, replace, METH_VARARGS),
            DECLARE_METHOD(t_String, replaceAll, METH_VARARGS),
            DECLARE_METHOD(t_String, replaceFirst, METH_VARARGS),
            DECLARE_METHOD(t_String, split, METH_VARARGS),
            DECLARE_METHOD(t_String, startsWith, METH_VARARGS),
            DECLARE_METHOD(t_String, subSequence, METH_VARARGS),
            DECLARE_METHOD(t_String, substring, METH_VARARGS),
            DECLARE_METHOD(t_String, toCharArray, METH_NOARGS),
            DECLARE_METHOD(t_String, toLowerCase, METH_VARARGS),
            DECLARE_METHOD(t_String, toString, METH_VARARGS),
            DECLARE_METHOD(t_String, toUpperCase, METH_VARARGS),
            DECLARE_METHOD(t_String, trim, METH_NOARGS),
            DECLARE_METHOD(t_String, valueOf, METH_VARARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(String, t_String, ::java::lang::Object, String, t_String_init_, 0, 0, t_String__fields_, 0, 0);

        void t_String::install(PyObject *module)
        {
            installType(&PY_TYPE(String), module, "String", 0);
        }

        void t_String::initialize(PyObject *module)
        {
            PyDict_SetItemString(PY_TYPE(String).tp_dict, "class_", make_descriptor(String::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(String).tp_dict, "wrapfn_", make_descriptor(unboxString));
            PyDict_SetItemString(PY_TYPE(String).tp_dict, "boxfn_", make_descriptor(boxString));
            String::initializeClass();
            PyDict_SetItemString(PY_TYPE(String).tp_dict, "CASE_INSENSITIVE_ORDER", make_descriptor(::java::util::t_Comparator::wrap_Object(*String::CASE_INSENSITIVE_ORDER)));
        }

        static PyObject *t_String_cast_(PyTypeObject *type, PyObject *arg)
        {
            if (!(arg = castCheck(arg, String::initializeClass, 1)))
                return NULL;
            return t_String::wrap_Object(String(((t_String *) arg)->object.this$));
        }
        static PyObject *t_String_instance_(PyTypeObject *type, PyObject *arg)
        {
            if (!castCheck(arg, String::initializeClass, 0))
                Py_RETURN_FALSE;
            Py_RETURN_TRUE;
        }

        static int t_String_init_(t_String *self, PyObject *args, PyObject *kwds)
        {
            switch (PyTuple_GET_SIZE(args)) {
              case 0:
                {
                    String object((jobject) NULL);

                    INT_CALL(object = String());
                    self->object = object;
                    break;
                }
                goto err;
              case 1:
                {
                    JArray< jchar > a0((jobject) NULL);
                    String object((jobject) NULL);

                    if (!parseArgs(args, "[C", &a0))
                    {
                        INT_CALL(object = String(a0));
                        self->object = object;
                        break;
                    }
                }
                {
                    JArray< jbyte > a0((jobject) NULL);
                    String object((jobject) NULL);

                    if (!parseArgs(args, "[B", &a0))
                    {
                        INT_CALL(object = String(a0));
                        self->object = object;
                        break;
                    }
                }
                {
                    ::java::lang::StringBuffer a0((jobject) NULL);
                    String object((jobject) NULL);

                    if (!parseArgs(args, "k", ::java::lang::StringBuffer::initializeClass, &a0))
                    {
                        INT_CALL(object = String(a0));
                        self->object = object;
                        break;
                    }
                }
                {
                    ::java::lang::StringBuilder a0((jobject) NULL);
                    String object((jobject) NULL);

                    if (!parseArgs(args, "k", ::java::lang::StringBuilder::initializeClass, &a0))
                    {
                        INT_CALL(object = String(a0));
                        self->object = object;
                        break;
                    }
                }
                goto err;
              case 2:
                {
                    JArray< jbyte > a0((jobject) NULL);
                    jint a1;
                    String object((jobject) NULL);

                    if (!parseArgs(args, "[BI", &a0, &a1))
                    {
                        INT_CALL(object = String(a0, a1));
                        self->object = object;
                        break;
                    }
                }
                {
                    JArray< jbyte > a0((jobject) NULL);
                    String a1((jobject) NULL);
                    String object((jobject) NULL);

                    if (!parseArgs(args, "[Bs", &a0, &a1))
                    {
                        INT_CALL(object = String(a0, a1));
                        self->object = object;
                        break;
                    }
                }
                goto err;
              case 3:
                {
                    JArray< jchar > a0((jobject) NULL);
                    jint a1;
                    jint a2;
                    String object((jobject) NULL);

                    if (!parseArgs(args, "[CII", &a0, &a1, &a2))
                    {
                        INT_CALL(object = String(a0, a1, a2));
                        self->object = object;
                        break;
                    }
                }
                {
                    JArray< jint > a0((jobject) NULL);
                    jint a1;
                    jint a2;
                    String object((jobject) NULL);

                    if (!parseArgs(args, "[III", &a0, &a1, &a2))
                    {
                        INT_CALL(object = String(a0, a1, a2));
                        self->object = object;
                        break;
                    }
                }
                {
                    JArray< jbyte > a0((jobject) NULL);
                    jint a1;
                    jint a2;
                    String object((jobject) NULL);

                    if (!parseArgs(args, "[BII", &a0, &a1, &a2))
                    {
                        INT_CALL(object = String(a0, a1, a2));
                        self->object = object;
                        break;
                    }
                }
                goto err;
              case 4:
                {
                    JArray< jbyte > a0((jobject) NULL);
                    jint a1;
                    jint a2;
                    jint a3;
                    String object((jobject) NULL);

                    if (!parseArgs(args, "[BIII", &a0, &a1, &a2, &a3))
                    {
                        INT_CALL(object = String(a0, a1, a2, a3));
                        self->object = object;
                        break;
                    }
                }
                {
                    JArray< jbyte > a0((jobject) NULL);
                    jint a1;
                    jint a2;
                    String a3((jobject) NULL);
                    String object((jobject) NULL);

                    if (!parseArgs(args, "[BIIs", &a0, &a1, &a2, &a3))
                    {
                        INT_CALL(object = String(a0, a1, a2, a3));
                        self->object = object;
                        break;
                    }
                }
              default:
              err:
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
            }

            return 0;
        }

        static PyObject *t_String_charAt(t_String *self, PyObject *arg)
        {
            jint a0;
            jchar result;

            if (!parseArg(arg, "I", &a0))
            {
                OBJ_CALL(result = self->object.charAt(a0));
                return PyUnicode_FromUnicode((Py_UNICODE *) &result, 1);
            }

            PyErr_SetArgsError((PyObject *) self, "charAt", arg);
            return NULL;
        }

        static PyObject *t_String_codePointAt(t_String *self, PyObject *arg)
        {
            jint a0;
            jint result;

            if (!parseArg(arg, "I", &a0))
            {
                OBJ_CALL(result = self->object.codePointAt(a0));
                return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "codePointAt", arg);
            return NULL;
        }

        static PyObject *t_String_codePointBefore(t_String *self, PyObject *arg)
        {
            jint a0;
            jint result;

            if (!parseArg(arg, "I", &a0))
            {
                OBJ_CALL(result = self->object.codePointBefore(a0));
                return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "codePointBefore", arg);
            return NULL;
        }

        static PyObject *t_String_codePointCount(t_String *self, PyObject *args)
        {
            jint a0;
            jint a1;
            jint result;

            if (!parseArgs(args, "II", &a0, &a1))
            {
                OBJ_CALL(result = self->object.codePointCount(a0, a1));
                return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "codePointCount", args);
            return NULL;
        }

        static PyObject *t_String_compareTo(t_String *self, PyObject *args)
        {
            switch (PyTuple_GET_SIZE(args)) {
              case 1:
                {
                    ::java::lang::Object a0((jobject) NULL);
                    jint result;

                    if (!parseArgs(args, "o", &a0))
                    {
                        OBJ_CALL(result = self->object.compareTo(a0));
                        return PyInt_FromLong((long) result);
                    }
                }
                {
                    String a0((jobject) NULL);
                    jint result;

                    if (!parseArgs(args, "s", &a0))
                    {
                        OBJ_CALL(result = self->object.compareTo(a0));
                        return PyInt_FromLong((long) result);
                    }
                }
            }

            PyErr_SetArgsError((PyObject *) self, "compareTo", args);
            return NULL;
        }

        static PyObject *t_String_compareToIgnoreCase(t_String *self, PyObject *arg)
        {
            String a0((jobject) NULL);
            jint result;

            if (!parseArg(arg, "s", &a0))
            {
                OBJ_CALL(result = self->object.compareToIgnoreCase(a0));
                return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "compareToIgnoreCase", arg);
            return NULL;
        }

        static PyObject *t_String_concat(t_String *self, PyObject *arg)
        {
            String a0((jobject) NULL);
            String result((jobject) NULL);

            if (!parseArg(arg, "s", &a0))
            {
                OBJ_CALL(result = self->object.concat(a0));
                return j2p(result);
            }

            PyErr_SetArgsError((PyObject *) self, "concat", arg);
            return NULL;
        }

        static PyObject *t_String_contains(t_String *self, PyObject *arg)
        {
            ::java::lang::CharSequence a0((jobject) NULL);
            jboolean result;

            if (!parseArg(arg, "O", &::java::lang::PY_TYPE(CharSequence), &a0))
            {
                OBJ_CALL(result = self->object.contains(a0));
                Py_RETURN_BOOL(result);
            }

            PyErr_SetArgsError((PyObject *) self, "contains", arg);
            return NULL;
        }

        static PyObject *t_String_contentEquals(t_String *self, PyObject *args)
        {
            switch (PyTuple_GET_SIZE(args)) {
              case 1:
                {
                    ::java::lang::CharSequence a0((jobject) NULL);
                    jboolean result;

                    if (!parseArgs(args, "O", &::java::lang::PY_TYPE(CharSequence), &a0))
                    {
                        OBJ_CALL(result = self->object.contentEquals(a0));
                        Py_RETURN_BOOL(result);
                    }
                }
                {
                    ::java::lang::StringBuffer a0((jobject) NULL);
                    jboolean result;

                    if (!parseArgs(args, "k", ::java::lang::StringBuffer::initializeClass, &a0))
                    {
                        OBJ_CALL(result = self->object.contentEquals(a0));
                        Py_RETURN_BOOL(result);
                    }
                }
            }

            PyErr_SetArgsError((PyObject *) self, "contentEquals", args);
            return NULL;
        }

        static PyObject *t_String_copyValueOf(PyTypeObject *type, PyObject *args)
        {
            switch (PyTuple_GET_SIZE(args)) {
              case 1:
                {
                    JArray< jchar > a0((jobject) NULL);
                    String result((jobject) NULL);

                    if (!parseArgs(args, "[C", &a0))
                    {
                        OBJ_CALL(result = ::java::lang::String::copyValueOf(a0));
                        return j2p(result);
                    }
                }
                break;
              case 3:
                {
                    JArray< jchar > a0((jobject) NULL);
                    jint a1;
                    jint a2;
                    String result((jobject) NULL);

                    if (!parseArgs(args, "[CII", &a0, &a1, &a2))
                    {
                        OBJ_CALL(result = ::java::lang::String::copyValueOf(a0, a1, a2));
                        return j2p(result);
                    }
                }
            }

            PyErr_SetArgsError(type, "copyValueOf", args);
            return NULL;
        }

        static PyObject *t_String_endsWith(t_String *self, PyObject *arg)
        {
            String a0((jobject) NULL);
            jboolean result;

            if (!parseArg(arg, "s", &a0))
            {
                OBJ_CALL(result = self->object.endsWith(a0));
                Py_RETURN_BOOL(result);
            }

            PyErr_SetArgsError((PyObject *) self, "endsWith", arg);
            return NULL;
        }

        static PyObject *t_String_equals(t_String *self, PyObject *args)
        {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
                OBJ_CALL(result = self->object.equals(a0));
                Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(String), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_String_equalsIgnoreCase(t_String *self, PyObject *arg)
        {
            String a0((jobject) NULL);
            jboolean result;

            if (!parseArg(arg, "s", &a0))
            {
                OBJ_CALL(result = self->object.equalsIgnoreCase(a0));
                Py_RETURN_BOOL(result);
            }

            PyErr_SetArgsError((PyObject *) self, "equalsIgnoreCase", arg);
            return NULL;
        }

        static PyObject *t_String_format(PyTypeObject *type, PyObject *args)
        {
            switch (PyTuple_GET_SIZE(args)) {
              case 2:
                {
                    String a0((jobject) NULL);
                    JArray< ::java::lang::Object > a1((jobject) NULL);
                    String result((jobject) NULL);

                    if (!parseArgs(args, "s[o", &a0, &a1))
                    {
                        OBJ_CALL(result = ::java::lang::String::format(a0, a1));
                        return j2p(result);
                    }
                }
                break;
              case 3:
                {
                    ::java::util::Locale a0((jobject) NULL);
                    String a1((jobject) NULL);
                    JArray< ::java::lang::Object > a2((jobject) NULL);
                    String result((jobject) NULL);

                    if (!parseArgs(args, "ks[o", ::java::util::Locale::initializeClass, &a0, &a1, &a2))
                    {
                        OBJ_CALL(result = ::java::lang::String::format(a0, a1, a2));
                        return j2p(result);
                    }
                }
            }

            PyErr_SetArgsError(type, "format", args);
            return NULL;
        }

        static PyObject *t_String_getBytes(t_String *self, PyObject *args)
        {
            switch (PyTuple_GET_SIZE(args)) {
              case 0:
                {
                    JArray< jbyte > result((jobject) NULL);
                    OBJ_CALL(result = self->object.getBytes());
                    return result.wrap();
                }
                break;
              case 1:
                {
                    String a0((jobject) NULL);
                    JArray< jbyte > result((jobject) NULL);

                    if (!parseArgs(args, "s", &a0))
                    {
                        OBJ_CALL(result = self->object.getBytes(a0));
                        return result.wrap();
                    }
                }
                break;
              case 4:
                {
                    jint a0;
                    jint a1;
                    JArray< jbyte > a2((jobject) NULL);
                    jint a3;

                    if (!parseArgs(args, "II[BI", &a0, &a1, &a2, &a3))
                    {
                        OBJ_CALL(self->object.getBytes(a0, a1, a2, a3));
                        Py_RETURN_NONE;
                    }
                }
            }

            PyErr_SetArgsError((PyObject *) self, "getBytes", args);
            return NULL;
        }

        static PyObject *t_String_getChars(t_String *self, PyObject *args)
        {
            jint a0;
            jint a1;
            JArray< jchar > a2((jobject) NULL);
            jint a3;

            if (!parseArgs(args, "II[CI", &a0, &a1, &a2, &a3))
            {
                OBJ_CALL(self->object.getChars(a0, a1, a2, a3));
                Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "getChars", args);
            return NULL;
        }

        static PyObject *t_String_hashCode(t_String *self, PyObject *args)
        {
            jint result;

            if (!parseArgs(args, ""))
            {
                OBJ_CALL(result = self->object.hashCode());
                return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(String), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_String_indexOf(t_String *self, PyObject *args)
        {
            switch (PyTuple_GET_SIZE(args)) {
              case 1:
                {
                    jint a0;
                    jint result;

                    if (!parseArgs(args, "I", &a0))
                    {
                        OBJ_CALL(result = self->object.indexOf(a0));
                        return PyInt_FromLong((long) result);
                    }
                }
                {
                    String a0((jobject) NULL);
                    jint result;

                    if (!parseArgs(args, "s", &a0))
                    {
                        OBJ_CALL(result = self->object.indexOf(a0));
                        return PyInt_FromLong((long) result);
                    }
                }
                break;
              case 2:
                {
                    String a0((jobject) NULL);
                    jint a1;
                    jint result;

                    if (!parseArgs(args, "sI", &a0, &a1))
                    {
                        OBJ_CALL(result = self->object.indexOf(a0, a1));
                        return PyInt_FromLong((long) result);
                    }
                }
                {
                    jint a0;
                    jint a1;
                    jint result;

                    if (!parseArgs(args, "II", &a0, &a1))
                    {
                        OBJ_CALL(result = self->object.indexOf(a0, a1));
                        return PyInt_FromLong((long) result);
                    }
                }
            }

            PyErr_SetArgsError((PyObject *) self, "indexOf", args);
            return NULL;
        }

        static PyObject *t_String_intern(t_String *self)
        {
            String result((jobject) NULL);
            OBJ_CALL(result = self->object.intern());
            return j2p(result);
        }

        static PyObject *t_String_isEmpty(t_String *self)
        {
            jboolean result;
            OBJ_CALL(result = self->object.isEmpty());
            Py_RETURN_BOOL(result);
        }

        static PyObject *t_String_lastIndexOf(t_String *self, PyObject *args)
        {
            switch (PyTuple_GET_SIZE(args)) {
              case 1:
                {
                    jint a0;
                    jint result;

                    if (!parseArgs(args, "I", &a0))
                    {
                        OBJ_CALL(result = self->object.lastIndexOf(a0));
                        return PyInt_FromLong((long) result);
                    }
                }
                {
                    String a0((jobject) NULL);
                    jint result;

                    if (!parseArgs(args, "s", &a0))
                    {
                        OBJ_CALL(result = self->object.lastIndexOf(a0));
                        return PyInt_FromLong((long) result);
                    }
                }
                break;
              case 2:
                {
                    jint a0;
                    jint a1;
                    jint result;

                    if (!parseArgs(args, "II", &a0, &a1))
                    {
                        OBJ_CALL(result = self->object.lastIndexOf(a0, a1));
                        return PyInt_FromLong((long) result);
                    }
                }
                {
                    String a0((jobject) NULL);
                    jint a1;
                    jint result;

                    if (!parseArgs(args, "sI", &a0, &a1))
                    {
                        OBJ_CALL(result = self->object.lastIndexOf(a0, a1));
                        return PyInt_FromLong((long) result);
                    }
                }
            }

            PyErr_SetArgsError((PyObject *) self, "lastIndexOf", args);
            return NULL;
        }

        static PyObject *t_String_length(t_String *self)
        {
            jint result;
            OBJ_CALL(result = self->object.length());
            return PyInt_FromLong((long) result);
        }

        static PyObject *t_String_matches(t_String *self, PyObject *arg)
        {
            String a0((jobject) NULL);
            jboolean result;

            if (!parseArg(arg, "s", &a0))
            {
                OBJ_CALL(result = self->object.matches(a0));
                Py_RETURN_BOOL(result);
            }

            PyErr_SetArgsError((PyObject *) self, "matches", arg);
            return NULL;
        }

        static PyObject *t_String_offsetByCodePoints(t_String *self, PyObject *args)
        {
            jint a0;
            jint a1;
            jint result;

            if (!parseArgs(args, "II", &a0, &a1))
            {
                OBJ_CALL(result = self->object.offsetByCodePoints(a0, a1));
                return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "offsetByCodePoints", args);
            return NULL;
        }

        static PyObject *t_String_regionMatches(t_String *self, PyObject *args)
        {
            switch (PyTuple_GET_SIZE(args)) {
              case 4:
                {
                    jint a0;
                    String a1((jobject) NULL);
                    jint a2;
                    jint a3;
                    jboolean result;

                    if (!parseArgs(args, "IsII", &a0, &a1, &a2, &a3))
                    {
                        OBJ_CALL(result = self->object.regionMatches(a0, a1, a2, a3));
                        Py_RETURN_BOOL(result);
                    }
                }
                break;
              case 5:
                {
                    jboolean a0;
                    jint a1;
                    String a2((jobject) NULL);
                    jint a3;
                    jint a4;
                    jboolean result;

                    if (!parseArgs(args, "ZIsII", &a0, &a1, &a2, &a3, &a4))
                    {
                        OBJ_CALL(result = self->object.regionMatches(a0, a1, a2, a3, a4));
                        Py_RETURN_BOOL(result);
                    }
                }
            }

            PyErr_SetArgsError((PyObject *) self, "regionMatches", args);
            return NULL;
        }

        static PyObject *t_String_replace(t_String *self, PyObject *args)
        {
            switch (PyTuple_GET_SIZE(args)) {
              case 2:
                {
                    jchar a0;
                    jchar a1;
                    String result((jobject) NULL);

                    if (!parseArgs(args, "CC", &a0, &a1))
                    {
                        OBJ_CALL(result = self->object.replace(a0, a1));
                        return j2p(result);
                    }
                }
                {
                    ::java::lang::CharSequence a0((jobject) NULL);
                    ::java::lang::CharSequence a1((jobject) NULL);
                    String result((jobject) NULL);

                    if (!parseArgs(args, "OO", &::java::lang::PY_TYPE(CharSequence), &::java::lang::PY_TYPE(CharSequence), &a0, &a1))
                    {
                        OBJ_CALL(result = self->object.replace(a0, a1));
                        return j2p(result);
                    }
                }
            }

            PyErr_SetArgsError((PyObject *) self, "replace", args);
            return NULL;
        }

        static PyObject *t_String_replaceAll(t_String *self, PyObject *args)
        {
            String a0((jobject) NULL);
            String a1((jobject) NULL);
            String result((jobject) NULL);

            if (!parseArgs(args, "ss", &a0, &a1))
            {
                OBJ_CALL(result = self->object.replaceAll(a0, a1));
                return j2p(result);
            }

            PyErr_SetArgsError((PyObject *) self, "replaceAll", args);
            return NULL;
        }

        static PyObject *t_String_replaceFirst(t_String *self, PyObject *args)
        {
            String a0((jobject) NULL);
            String a1((jobject) NULL);
            String result((jobject) NULL);

            if (!parseArgs(args, "ss", &a0, &a1))
            {
                OBJ_CALL(result = self->object.replaceFirst(a0, a1));
                return j2p(result);
            }

            PyErr_SetArgsError((PyObject *) self, "replaceFirst", args);
            return NULL;
        }

        static PyObject *t_String_split(t_String *self, PyObject *args)
        {
            switch (PyTuple_GET_SIZE(args)) {
              case 1:
                {
                    String a0((jobject) NULL);
                    JArray< String > result((jobject) NULL);

                    if (!parseArgs(args, "s", &a0))
                    {
                        OBJ_CALL(result = self->object.split(a0));
                        return JArray<jstring>(result.this$).wrap();
                    }
                }
                break;
              case 2:
                {
                    String a0((jobject) NULL);
                    jint a1;
                    JArray< String > result((jobject) NULL);

                    if (!parseArgs(args, "sI", &a0, &a1))
                    {
                        OBJ_CALL(result = self->object.split(a0, a1));
                        return JArray<jstring>(result.this$).wrap();
                    }
                }
            }

            PyErr_SetArgsError((PyObject *) self, "split", args);
            return NULL;
        }

        static PyObject *t_String_startsWith(t_String *self, PyObject *args)
        {
            switch (PyTuple_GET_SIZE(args)) {
              case 1:
                {
                    String a0((jobject) NULL);
                    jboolean result;

                    if (!parseArgs(args, "s", &a0))
                    {
                        OBJ_CALL(result = self->object.startsWith(a0));
                        Py_RETURN_BOOL(result);
                    }
                }
                break;
              case 2:
                {
                    String a0((jobject) NULL);
                    jint a1;
                    jboolean result;

                    if (!parseArgs(args, "sI", &a0, &a1))
                    {
                        OBJ_CALL(result = self->object.startsWith(a0, a1));
                        Py_RETURN_BOOL(result);
                    }
                }
            }

            PyErr_SetArgsError((PyObject *) self, "startsWith", args);
            return NULL;
        }

        static PyObject *t_String_subSequence(t_String *self, PyObject *args)
        {
            jint a0;
            jint a1;
            ::java::lang::CharSequence result((jobject) NULL);

            if (!parseArgs(args, "II", &a0, &a1))
            {
                OBJ_CALL(result = self->object.subSequence(a0, a1));
                return ::java::lang::t_CharSequence::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "subSequence", args);
            return NULL;
        }

        static PyObject *t_String_substring(t_String *self, PyObject *args)
        {
            switch (PyTuple_GET_SIZE(args)) {
              case 1:
                {
                    jint a0;
                    String result((jobject) NULL);

                    if (!parseArgs(args, "I", &a0))
                    {
                        OBJ_CALL(result = self->object.substring(a0));
                        return j2p(result);
                    }
                }
                break;
              case 2:
                {
                    jint a0;
                    jint a1;
                    String result((jobject) NULL);

                    if (!parseArgs(args, "II", &a0, &a1))
                    {
                        OBJ_CALL(result = self->object.substring(a0, a1));
                        return j2p(result);
                    }
                }
            }

            PyErr_SetArgsError((PyObject *) self, "substring", args);
            return NULL;
        }

        static PyObject *t_String_toCharArray(t_String *self)
        {
            JArray< jchar > result((jobject) NULL);
            OBJ_CALL(result = self->object.toCharArray());
            return result.wrap();
        }

        static PyObject *t_String_toLowerCase(t_String *self, PyObject *args)
        {
            switch (PyTuple_GET_SIZE(args)) {
              case 0:
                {
                    String result((jobject) NULL);
                    OBJ_CALL(result = self->object.toLowerCase());
                    return j2p(result);
                }
                break;
              case 1:
                {
                    ::java::util::Locale a0((jobject) NULL);
                    String result((jobject) NULL);

                    if (!parseArgs(args, "k", ::java::util::Locale::initializeClass, &a0))
                    {
                        OBJ_CALL(result = self->object.toLowerCase(a0));
                        return j2p(result);
                    }
                }
            }

            PyErr_SetArgsError((PyObject *) self, "toLowerCase", args);
            return NULL;
        }

        static PyObject *t_String_toString(t_String *self, PyObject *args)
        {
            String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
                OBJ_CALL(result = self->object.toString());
                return j2p(result);
            }

            return callSuper(&PY_TYPE(String), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_String_toUpperCase(t_String *self, PyObject *args)
        {
            switch (PyTuple_GET_SIZE(args)) {
              case 0:
                {
                    String result((jobject) NULL);
                    OBJ_CALL(result = self->object.toUpperCase());
                    return j2p(result);
                }
                break;
              case 1:
                {
                    ::java::util::Locale a0((jobject) NULL);
                    String result((jobject) NULL);

                    if (!parseArgs(args, "k", ::java::util::Locale::initializeClass, &a0))
                    {
                        OBJ_CALL(result = self->object.toUpperCase(a0));
                        return j2p(result);
                    }
                }
            }

            PyErr_SetArgsError((PyObject *) self, "toUpperCase", args);
            return NULL;
        }

        static PyObject *t_String_trim(t_String *self)
        {
            String result((jobject) NULL);
            OBJ_CALL(result = self->object.trim());
            return j2p(result);
        }

        static PyObject *t_String_valueOf(PyTypeObject *type, PyObject *args)
        {
            switch (PyTuple_GET_SIZE(args)) {
              case 1:
                {
                    jboolean a0;
                    String result((jobject) NULL);

                    if (!parseArgs(args, "Z", &a0))
                    {
                        OBJ_CALL(result = ::java::lang::String::valueOf(a0));
                        return j2p(result);
                    }
                }
                {
                    ::java::lang::Object a0((jobject) NULL);
                    String result((jobject) NULL);

                    if (!parseArgs(args, "o", &a0))
                    {
                        OBJ_CALL(result = ::java::lang::String::valueOf(a0));
                        return j2p(result);
                    }
                }
                {
                    jfloat a0;
                    String result((jobject) NULL);

                    if (!parseArgs(args, "F", &a0))
                    {
                        OBJ_CALL(result = ::java::lang::String::valueOf(a0));
                        return j2p(result);
                    }
                }
                {
                    jdouble a0;
                    String result((jobject) NULL);

                    if (!parseArgs(args, "D", &a0))
                    {
                        OBJ_CALL(result = ::java::lang::String::valueOf(a0));
                        return j2p(result);
                    }
                }
                {
                    jint a0;
                    String result((jobject) NULL);

                    if (!parseArgs(args, "I", &a0))
                    {
                        OBJ_CALL(result = ::java::lang::String::valueOf(a0));
                        return j2p(result);
                    }
                }
                {
                    JArray< jchar > a0((jobject) NULL);
                    String result((jobject) NULL);

                    if (!parseArgs(args, "[C", &a0))
                    {
                        OBJ_CALL(result = ::java::lang::String::valueOf(a0));
                        return j2p(result);
                    }
                }
                {
                    jchar a0;
                    String result((jobject) NULL);

                    if (!parseArgs(args, "C", &a0))
                    {
                        OBJ_CALL(result = ::java::lang::String::valueOf(a0));
                        return j2p(result);
                    }
                }
                {
                    jlong a0;
                    String result((jobject) NULL);

                    if (!parseArgs(args, "J", &a0))
                    {
                        OBJ_CALL(result = ::java::lang::String::valueOf(a0));
                        return j2p(result);
                    }
                }
                break;
              case 3:
                {
                    JArray< jchar > a0((jobject) NULL);
                    jint a1;
                    jint a2;
                    String result((jobject) NULL);

                    if (!parseArgs(args, "[CII", &a0, &a1, &a2))
                    {
                        OBJ_CALL(result = ::java::lang::String::valueOf(a0, a1, a2));
                        return j2p(result);
                    }
                }
            }

            PyErr_SetArgsError(type, "valueOf", args);
            return NULL;
        }

        static PyObject *t_String_get__bytes(t_String *self, void *data)
        {
            JArray< jbyte > value((jobject) NULL);
            OBJ_CALL(value = self->object.getBytes());
            return value.wrap();
        }

        static PyObject *t_String_get__empty(t_String *self, void *data)
        {
            jboolean value;
            OBJ_CALL(value = self->object.isEmpty());
            Py_RETURN_BOOL(value);
        }
    }
}
#include <jni.h>
#include "JCCEnv.h"
#include "is/iclt/icenlp/core/utils/Trie.h"
#include "java/io/IOException.h"
#include "java/lang/NullPointerException.h"
#include "java/lang/Class.h"
#include "java/io/InputStream.h"
#include "is/iclt/icenlp/core/utils/TrieNode.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace is {
    namespace iclt {
        namespace icenlp {
            namespace core {
                namespace utils {

                    ::java::lang::Class *Trie::class$ = NULL;
                    jmethodID *Trie::mids$ = NULL;
                    jchar Trie::dummyLabel = (jchar) 0;

                    jclass Trie::initializeClass()
                    {
                        if (!class$)
                        {

                            jclass cls = (jclass) env->findClass("is/iclt/icenlp/core/utils/Trie");

                            mids$ = new jmethodID[max_mid];
                            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                            mids$[mid_init$_f3691645] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Z)V");
                            mids$[mid_init$_3d3c1009] = env->getMethodID(cls, "<init>", "(Ljava/io/InputStream;Z)V");
                            mids$[mid_find_0954911e] = env->getMethodID(cls, "find", "(Ljava/lang/String;)Lis/iclt/icenlp/core/utils/TrieNode;");
                            mids$[mid_getKeyFound_14c7b5c5] = env->getMethodID(cls, "getKeyFound", "()Ljava/lang/String;");
                            mids$[mid_getValueFound_14c7b5c5] = env->getMethodID(cls, "getValueFound", "()Ljava/lang/String;");
                            mids$[mid_insert_0954911e] = env->getMethodID(cls, "insert", "(Ljava/lang/String;)Lis/iclt/icenlp/core/utils/TrieNode;");
                            mids$[mid_insert_33295de4] = env->getMethodID(cls, "insert", "(Ljava/lang/String;Ljava/lang/String;)Lis/iclt/icenlp/core/utils/TrieNode;");
                            mids$[mid_insertKeyValue_33295de4] = env->getMethodID(cls, "insertKeyValue", "(Ljava/lang/String;Ljava/lang/String;)Lis/iclt/icenlp/core/utils/TrieNode;");
                            mids$[mid_lookup_edaaade4] = env->getMethodID(cls, "lookup", "(Ljava/lang/String;Z)Ljava/lang/String;");
                            mids$[mid_lookupSuffix_f536a869] = env->getMethodID(cls, "lookupSuffix", "(Ljava/lang/String;ZI)Z");
                            mids$[mid_numCharacters_54c6a179] = env->getMethodID(cls, "numCharacters", "()I");
                            mids$[mid_numStrings_54c6a179] = env->getMethodID(cls, "numStrings", "()I");
                            mids$[mid_print_54c6a166] = env->getMethodID(cls, "print", "()V");

                            class$ = (::java::lang::Class *) new JObject(cls);
                            cls = (jclass) class$->this$;

                            dummyLabel = env->getStaticCharField(cls, "dummyLabel");
                        }
                        return (jclass) class$->this$;
                    }

                    Trie::Trie() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

                    Trie::Trie(const ::java::lang::String & a0, jboolean a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f3691645, a0.this$, a1)) {}

                    Trie::Trie(const ::java::io::InputStream & a0, jboolean a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_3d3c1009, a0.this$, a1)) {}

                    ::is::iclt::icenlp::core::utils::TrieNode Trie::find(const ::java::lang::String & a0) const
                    {
                        return ::is::iclt::icenlp::core::utils::TrieNode(env->callObjectMethod(this$, mids$[mid_find_0954911e], a0.this$));
                    }

                    ::java::lang::String Trie::getKeyFound() const
                    {
                        return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getKeyFound_14c7b5c5]));
                    }

                    ::java::lang::String Trie::getValueFound() const
                    {
                        return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getValueFound_14c7b5c5]));
                    }

                    ::is::iclt::icenlp::core::utils::TrieNode Trie::insert(const ::java::lang::String & a0) const
                    {
                        return ::is::iclt::icenlp::core::utils::TrieNode(env->callObjectMethod(this$, mids$[mid_insert_0954911e], a0.this$));
                    }

                    ::is::iclt::icenlp::core::utils::TrieNode Trie::insert(const ::java::lang::String & a0, const ::java::lang::String & a1) const
                    {
                        return ::is::iclt::icenlp::core::utils::TrieNode(env->callObjectMethod(this$, mids$[mid_insert_33295de4], a0.this$, a1.this$));
                    }

                    ::is::iclt::icenlp::core::utils::TrieNode Trie::insertKeyValue(const ::java::lang::String & a0, const ::java::lang::String & a1) const
                    {
                        return ::is::iclt::icenlp::core::utils::TrieNode(env->callObjectMethod(this$, mids$[mid_insertKeyValue_33295de4], a0.this$, a1.this$));
                    }

                    ::java::lang::String Trie::lookup(const ::java::lang::String & a0, jboolean a1) const
                    {
                        return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_lookup_edaaade4], a0.this$, a1));
                    }

                    jboolean Trie::lookupSuffix(const ::java::lang::String & a0, jboolean a1, jint a2) const
                    {
                        return env->callBooleanMethod(this$, mids$[mid_lookupSuffix_f536a869], a0.this$, a1, a2);
                    }

                    jint Trie::numCharacters() const
                    {
                        return env->callIntMethod(this$, mids$[mid_numCharacters_54c6a179]);
                    }

                    jint Trie::numStrings() const
                    {
                        return env->callIntMethod(this$, mids$[mid_numStrings_54c6a179]);
                    }

                    void Trie::print() const
                    {
                        env->callVoidMethod(this$, mids$[mid_print_54c6a166]);
                    }
                }
            }
        }
    }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace is {
    namespace iclt {
        namespace icenlp {
            namespace core {
                namespace utils {
                    static PyObject *t_Trie_cast_(PyTypeObject *type, PyObject *arg);
                    static PyObject *t_Trie_instance_(PyTypeObject *type, PyObject *arg);
                    static int t_Trie_init_(t_Trie *self, PyObject *args, PyObject *kwds);
                    static PyObject *t_Trie_find(t_Trie *self, PyObject *arg);
                    static PyObject *t_Trie_getKeyFound(t_Trie *self);
                    static PyObject *t_Trie_getValueFound(t_Trie *self);
                    static PyObject *t_Trie_insert(t_Trie *self, PyObject *args);
                    static PyObject *t_Trie_insertKeyValue(t_Trie *self, PyObject *args);
                    static PyObject *t_Trie_lookup(t_Trie *self, PyObject *args);
                    static PyObject *t_Trie_lookupSuffix(t_Trie *self, PyObject *args);
                    static PyObject *t_Trie_numCharacters(t_Trie *self);
                    static PyObject *t_Trie_numStrings(t_Trie *self);
                    static PyObject *t_Trie_print(t_Trie *self);
                    static PyObject *t_Trie_get__keyFound(t_Trie *self, void *data);
                    static PyObject *t_Trie_get__valueFound(t_Trie *self, void *data);
                    static PyGetSetDef t_Trie__fields_[] = {
                        DECLARE_GET_FIELD(t_Trie, keyFound),
                        DECLARE_GET_FIELD(t_Trie, valueFound),
                        { NULL, NULL, NULL, NULL, NULL }
                    };

                    static PyMethodDef t_Trie__methods_[] = {
                        DECLARE_METHOD(t_Trie, cast_, METH_O | METH_CLASS),
                        DECLARE_METHOD(t_Trie, instance_, METH_O | METH_CLASS),
                        DECLARE_METHOD(t_Trie, find, METH_O),
                        DECLARE_METHOD(t_Trie, getKeyFound, METH_NOARGS),
                        DECLARE_METHOD(t_Trie, getValueFound, METH_NOARGS),
                        DECLARE_METHOD(t_Trie, insert, METH_VARARGS),
                        DECLARE_METHOD(t_Trie, insertKeyValue, METH_VARARGS),
                        DECLARE_METHOD(t_Trie, lookup, METH_VARARGS),
                        DECLARE_METHOD(t_Trie, lookupSuffix, METH_VARARGS),
                        DECLARE_METHOD(t_Trie, numCharacters, METH_NOARGS),
                        DECLARE_METHOD(t_Trie, numStrings, METH_NOARGS),
                        DECLARE_METHOD(t_Trie, print, METH_NOARGS),
                        { NULL, NULL, 0, NULL }
                    };

                    DECLARE_TYPE(Trie, t_Trie, ::java::lang::Object, Trie, t_Trie_init_, 0, 0, t_Trie__fields_, 0, 0);

                    void t_Trie::install(PyObject *module)
                    {
                        installType(&PY_TYPE(Trie), module, "Trie", 0);
                    }

                    void t_Trie::initialize(PyObject *module)
                    {
                        PyDict_SetItemString(PY_TYPE(Trie).tp_dict, "class_", make_descriptor(Trie::initializeClass, 1));
                        PyDict_SetItemString(PY_TYPE(Trie).tp_dict, "wrapfn_", make_descriptor(t_Trie::wrap_jobject));
                        PyDict_SetItemString(PY_TYPE(Trie).tp_dict, "boxfn_", make_descriptor(boxObject));
                        Trie::initializeClass();
                        PyDict_SetItemString(PY_TYPE(Trie).tp_dict, "dummyLabel", make_descriptor(Trie::dummyLabel));
                    }

                    static PyObject *t_Trie_cast_(PyTypeObject *type, PyObject *arg)
                    {
                        if (!(arg = castCheck(arg, Trie::initializeClass, 1)))
                            return NULL;
                        return t_Trie::wrap_Object(Trie(((t_Trie *) arg)->object.this$));
                    }
                    static PyObject *t_Trie_instance_(PyTypeObject *type, PyObject *arg)
                    {
                        if (!castCheck(arg, Trie::initializeClass, 0))
                            Py_RETURN_FALSE;
                        Py_RETURN_TRUE;
                    }

                    static int t_Trie_init_(t_Trie *self, PyObject *args, PyObject *kwds)
                    {
                        switch (PyTuple_GET_SIZE(args)) {
                          case 0:
                            {
                                Trie object((jobject) NULL);

                                INT_CALL(object = Trie());
                                self->object = object;
                                break;
                            }
                            goto err;
                          case 2:
                            {
                                ::java::lang::String a0((jobject) NULL);
                                jboolean a1;
                                Trie object((jobject) NULL);

                                if (!parseArgs(args, "sZ", &a0, &a1))
                                {
                                    INT_CALL(object = Trie(a0, a1));
                                    self->object = object;
                                    break;
                                }
                            }
                            {
                                ::java::io::InputStream a0((jobject) NULL);
                                jboolean a1;
                                Trie object((jobject) NULL);

                                if (!parseArgs(args, "kZ", ::java::io::InputStream::initializeClass, &a0, &a1))
                                {
                                    INT_CALL(object = Trie(a0, a1));
                                    self->object = object;
                                    break;
                                }
                            }
                          default:
                          err:
                            PyErr_SetArgsError((PyObject *) self, "__init__", args);
                            return -1;
                        }

                        return 0;
                    }

                    static PyObject *t_Trie_find(t_Trie *self, PyObject *arg)
                    {
                        ::java::lang::String a0((jobject) NULL);
                        ::is::iclt::icenlp::core::utils::TrieNode result((jobject) NULL);

                        if (!parseArg(arg, "s", &a0))
                        {
                            OBJ_CALL(result = self->object.find(a0));
                            return ::is::iclt::icenlp::core::utils::t_TrieNode::wrap_Object(result);
                        }

                        PyErr_SetArgsError((PyObject *) self, "find", arg);
                        return NULL;
                    }

                    static PyObject *t_Trie_getKeyFound(t_Trie *self)
                    {
                        ::java::lang::String result((jobject) NULL);
                        OBJ_CALL(result = self->object.getKeyFound());
                        return j2p(result);
                    }

                    static PyObject *t_Trie_getValueFound(t_Trie *self)
                    {
                        ::java::lang::String result((jobject) NULL);
                        OBJ_CALL(result = self->object.getValueFound());
                        return j2p(result);
                    }

                    static PyObject *t_Trie_insert(t_Trie *self, PyObject *args)
                    {
                        switch (PyTuple_GET_SIZE(args)) {
                          case 1:
                            {
                                ::java::lang::String a0((jobject) NULL);
                                ::is::iclt::icenlp::core::utils::TrieNode result((jobject) NULL);

                                if (!parseArgs(args, "s", &a0))
                                {
                                    OBJ_CALL(result = self->object.insert(a0));
                                    return ::is::iclt::icenlp::core::utils::t_TrieNode::wrap_Object(result);
                                }
                            }
                            break;
                          case 2:
                            {
                                ::java::lang::String a0((jobject) NULL);
                                ::java::lang::String a1((jobject) NULL);
                                ::is::iclt::icenlp::core::utils::TrieNode result((jobject) NULL);

                                if (!parseArgs(args, "ss", &a0, &a1))
                                {
                                    OBJ_CALL(result = self->object.insert(a0, a1));
                                    return ::is::iclt::icenlp::core::utils::t_TrieNode::wrap_Object(result);
                                }
                            }
                        }

                        PyErr_SetArgsError((PyObject *) self, "insert", args);
                        return NULL;
                    }

                    static PyObject *t_Trie_insertKeyValue(t_Trie *self, PyObject *args)
                    {
                        ::java::lang::String a0((jobject) NULL);
                        ::java::lang::String a1((jobject) NULL);
                        ::is::iclt::icenlp::core::utils::TrieNode result((jobject) NULL);

                        if (!parseArgs(args, "ss", &a0, &a1))
                        {
                            OBJ_CALL(result = self->object.insertKeyValue(a0, a1));
                            return ::is::iclt::icenlp::core::utils::t_TrieNode::wrap_Object(result);
                        }

                        PyErr_SetArgsError((PyObject *) self, "insertKeyValue", args);
                        return NULL;
                    }

                    static PyObject *t_Trie_lookup(t_Trie *self, PyObject *args)
                    {
                        ::java::lang::String a0((jobject) NULL);
                        jboolean a1;
                        ::java::lang::String result((jobject) NULL);

                        if (!parseArgs(args, "sZ", &a0, &a1))
                        {
                            OBJ_CALL(result = self->object.lookup(a0, a1));
                            return j2p(result);
                        }

                        PyErr_SetArgsError((PyObject *) self, "lookup", args);
                        return NULL;
                    }

                    static PyObject *t_Trie_lookupSuffix(t_Trie *self, PyObject *args)
                    {
                        ::java::lang::String a0((jobject) NULL);
                        jboolean a1;
                        jint a2;
                        jboolean result;

                        if (!parseArgs(args, "sZI", &a0, &a1, &a2))
                        {
                            OBJ_CALL(result = self->object.lookupSuffix(a0, a1, a2));
                            Py_RETURN_BOOL(result);
                        }

                        PyErr_SetArgsError((PyObject *) self, "lookupSuffix", args);
                        return NULL;
                    }

                    static PyObject *t_Trie_numCharacters(t_Trie *self)
                    {
                        jint result;
                        OBJ_CALL(result = self->object.numCharacters());
                        return PyInt_FromLong((long) result);
                    }

                    static PyObject *t_Trie_numStrings(t_Trie *self)
                    {
                        jint result;
                        OBJ_CALL(result = self->object.numStrings());
                        return PyInt_FromLong((long) result);
                    }

                    static PyObject *t_Trie_print(t_Trie *self)
                    {
                        OBJ_CALL(self->object.print());
                        Py_RETURN_NONE;
                    }

                    static PyObject *t_Trie_get__keyFound(t_Trie *self, void *data)
                    {
                        ::java::lang::String value((jobject) NULL);
                        OBJ_CALL(value = self->object.getKeyFound());
                        return j2p(value);
                    }

                    static PyObject *t_Trie_get__valueFound(t_Trie *self, void *data)
                    {
                        ::java::lang::String value((jobject) NULL);
                        OBJ_CALL(value = self->object.getValueFound());
                        return j2p(value);
                    }
                }
            }
        }
    }
}
#include <jni.h>
#include "JCCEnv.h"
#include "is/iclt/icenlp/facade/TokenizerFacade.h"
#include "java/io/IOException.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "is/iclt/icenlp/core/utils/Lexicon.h"
#include "is/iclt/icenlp/core/tokenizer/Sentences.h"
#include "JArray.h"

namespace is {
    namespace iclt {
        namespace icenlp {
            namespace facade {

                ::java::lang::Class *TokenizerFacade::class$ = NULL;
                jmethodID *TokenizerFacade::mids$ = NULL;

                jclass TokenizerFacade::initializeClass()
                {
                    if (!class$)
                    {

                        jclass cls = (jclass) env->findClass("is/iclt/icenlp/facade/TokenizerFacade");

                        mids$ = new jmethodID[max_mid];
                        mids$[mid_init$_244a19ea] = env->getMethodID(cls, "<init>", "(Lis/iclt/icenlp/core/utils/Lexicon;I)V");
                        mids$[mid_tokenize_6359824b] = env->getMethodID(cls, "tokenize", "(Ljava/lang/String;)Lis/iclt/icenlp/core/tokenizer/Sentences;");

                        class$ = (::java::lang::Class *) new JObject(cls);
                    }
                    return (jclass) class$->this$;
                }

                TokenizerFacade::TokenizerFacade(const ::is::iclt::icenlp::core::utils::Lexicon & a0, jint a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_244a19ea, a0.this$, a1)) {}

                ::is::iclt::icenlp::core::tokenizer::Sentences TokenizerFacade::tokenize(const ::java::lang::String & a0) const
                {
                    return ::is::iclt::icenlp::core::tokenizer::Sentences(env->callObjectMethod(this$, mids$[mid_tokenize_6359824b], a0.this$));
                }
            }
        }
    }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace is {
    namespace iclt {
        namespace icenlp {
            namespace facade {
                static PyObject *t_TokenizerFacade_cast_(PyTypeObject *type, PyObject *arg);
                static PyObject *t_TokenizerFacade_instance_(PyTypeObject *type, PyObject *arg);
                static int t_TokenizerFacade_init_(t_TokenizerFacade *self, PyObject *args, PyObject *kwds);
                static PyObject *t_TokenizerFacade_tokenize(t_TokenizerFacade *self, PyObject *arg);

                static PyMethodDef t_TokenizerFacade__methods_[] = {
                    DECLARE_METHOD(t_TokenizerFacade, cast_, METH_O | METH_CLASS),
                    DECLARE_METHOD(t_TokenizerFacade, instance_, METH_O | METH_CLASS),
                    DECLARE_METHOD(t_TokenizerFacade, tokenize, METH_O),
                    { NULL, NULL, 0, NULL }
                };

                DECLARE_TYPE(TokenizerFacade, t_TokenizerFacade, ::java::lang::Object, TokenizerFacade, t_TokenizerFacade_init_, 0, 0, 0, 0, 0);

                void t_TokenizerFacade::install(PyObject *module)
                {
                    installType(&PY_TYPE(TokenizerFacade), module, "TokenizerFacade", 0);
                }

                void t_TokenizerFacade::initialize(PyObject *module)
                {
                    PyDict_SetItemString(PY_TYPE(TokenizerFacade).tp_dict, "class_", make_descriptor(TokenizerFacade::initializeClass, 1));
                    PyDict_SetItemString(PY_TYPE(TokenizerFacade).tp_dict, "wrapfn_", make_descriptor(t_TokenizerFacade::wrap_jobject));
                    PyDict_SetItemString(PY_TYPE(TokenizerFacade).tp_dict, "boxfn_", make_descriptor(boxObject));
                }

                static PyObject *t_TokenizerFacade_cast_(PyTypeObject *type, PyObject *arg)
                {
                    if (!(arg = castCheck(arg, TokenizerFacade::initializeClass, 1)))
                        return NULL;
                    return t_TokenizerFacade::wrap_Object(TokenizerFacade(((t_TokenizerFacade *) arg)->object.this$));
                }
                static PyObject *t_TokenizerFacade_instance_(PyTypeObject *type, PyObject *arg)
                {
                    if (!castCheck(arg, TokenizerFacade::initializeClass, 0))
                        Py_RETURN_FALSE;
                    Py_RETURN_TRUE;
                }

                static int t_TokenizerFacade_init_(t_TokenizerFacade *self, PyObject *args, PyObject *kwds)
                {
                    ::is::iclt::icenlp::core::utils::Lexicon a0((jobject) NULL);
                    jint a1;
                    TokenizerFacade object((jobject) NULL);

                    if (!parseArgs(args, "kI", ::is::iclt::icenlp::core::utils::Lexicon::initializeClass, &a0, &a1))
                    {
                        INT_CALL(object = TokenizerFacade(a0, a1));
                        self->object = object;
                    }
                    else
                    {
                        PyErr_SetArgsError((PyObject *) self, "__init__", args);
                        return -1;
                    }

                    return 0;
                }

                static PyObject *t_TokenizerFacade_tokenize(t_TokenizerFacade *self, PyObject *arg)
                {
                    ::java::lang::String a0((jobject) NULL);
                    ::is::iclt::icenlp::core::tokenizer::Sentences result((jobject) NULL);

                    if (!parseArg(arg, "s", &a0))
                    {
                        OBJ_CALL(result = self->object.tokenize(a0));
                        return ::is::iclt::icenlp::core::tokenizer::t_Sentences::wrap_Object(result);
                    }

                    PyErr_SetArgsError((PyObject *) self, "tokenize", arg);
                    return NULL;
                }
            }
        }
    }
}
#include <jni.h>
#include "JCCEnv.h"
#include "is/iclt/icenlp/runner/RunTokenizer.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace is {
    namespace iclt {
        namespace icenlp {
            namespace runner {

                ::java::lang::Class *RunTokenizer::class$ = NULL;
                jmethodID *RunTokenizer::mids$ = NULL;

                jclass RunTokenizer::initializeClass()
                {
                    if (!class$)
                    {

                        jclass cls = (jclass) env->findClass("is/iclt/icenlp/runner/RunTokenizer");

                        mids$ = new jmethodID[max_mid];
                        mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                        mids$[mid_main_4dd4540c] = env->getStaticMethodID(cls, "main", "([Ljava/lang/String;)V");

                        class$ = (::java::lang::Class *) new JObject(cls);
                    }
                    return (jclass) class$->this$;
                }

                RunTokenizer::RunTokenizer() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

                void RunTokenizer::main(const JArray< ::java::lang::String > & a0)
                {
                    jclass cls = initializeClass();
                    env->callStaticVoidMethod(cls, mids$[mid_main_4dd4540c], a0.this$);
                }
            }
        }
    }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace is {
    namespace iclt {
        namespace icenlp {
            namespace runner {
                static PyObject *t_RunTokenizer_cast_(PyTypeObject *type, PyObject *arg);
                static PyObject *t_RunTokenizer_instance_(PyTypeObject *type, PyObject *arg);
                static int t_RunTokenizer_init_(t_RunTokenizer *self, PyObject *args, PyObject *kwds);
                static PyObject *t_RunTokenizer_main(PyTypeObject *type, PyObject *arg);

                static PyMethodDef t_RunTokenizer__methods_[] = {
                    DECLARE_METHOD(t_RunTokenizer, cast_, METH_O | METH_CLASS),
                    DECLARE_METHOD(t_RunTokenizer, instance_, METH_O | METH_CLASS),
                    DECLARE_METHOD(t_RunTokenizer, main, METH_O | METH_CLASS),
                    { NULL, NULL, 0, NULL }
                };

                DECLARE_TYPE(RunTokenizer, t_RunTokenizer, ::java::lang::Object, RunTokenizer, t_RunTokenizer_init_, 0, 0, 0, 0, 0);

                void t_RunTokenizer::install(PyObject *module)
                {
                    installType(&PY_TYPE(RunTokenizer), module, "RunTokenizer", 0);
                }

                void t_RunTokenizer::initialize(PyObject *module)
                {
                    PyDict_SetItemString(PY_TYPE(RunTokenizer).tp_dict, "class_", make_descriptor(RunTokenizer::initializeClass, 1));
                    PyDict_SetItemString(PY_TYPE(RunTokenizer).tp_dict, "wrapfn_", make_descriptor(t_RunTokenizer::wrap_jobject));
                    PyDict_SetItemString(PY_TYPE(RunTokenizer).tp_dict, "boxfn_", make_descriptor(boxObject));
                }

                static PyObject *t_RunTokenizer_cast_(PyTypeObject *type, PyObject *arg)
                {
                    if (!(arg = castCheck(arg, RunTokenizer::initializeClass, 1)))
                        return NULL;
                    return t_RunTokenizer::wrap_Object(RunTokenizer(((t_RunTokenizer *) arg)->object.this$));
                }
                static PyObject *t_RunTokenizer_instance_(PyTypeObject *type, PyObject *arg)
                {
                    if (!castCheck(arg, RunTokenizer::initializeClass, 0))
                        Py_RETURN_FALSE;
                    Py_RETURN_TRUE;
                }

                static int t_RunTokenizer_init_(t_RunTokenizer *self, PyObject *args, PyObject *kwds)
                {
                    RunTokenizer object((jobject) NULL);

                    INT_CALL(object = RunTokenizer());
                    self->object = object;

                    return 0;
                }

                static PyObject *t_RunTokenizer_main(PyTypeObject *type, PyObject *arg)
                {
                    JArray< ::java::lang::String > a0((jobject) NULL);

                    if (!parseArg(arg, "[s", &a0))
                    {
                        OBJ_CALL(::is::iclt::icenlp::runner::RunTokenizer::main(a0));
                        Py_RETURN_NONE;
                    }

                    PyErr_SetArgsError(type, "main", arg);
                    return NULL;
                }
            }
        }
    }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/io/Writer.h"
#include "java/io/IOException.h"
#include "java/lang/CharSequence.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "java/io/Closeable.h"
#include "java/io/Flushable.h"
#include "java/lang/Appendable.h"
#include "JArray.h"

namespace java {
    namespace io {

        ::java::lang::Class *Writer::class$ = NULL;
        jmethodID *Writer::mids$ = NULL;

        jclass Writer::initializeClass()
        {
            if (!class$)
            {

                jclass cls = (jclass) env->findClass("java/io/Writer");

                mids$ = new jmethodID[max_mid];
                mids$[mid_append_368f1679] = env->getMethodID(cls, "append", "(C)Ljava/io/Writer;");
                mids$[mid_append_31d2f801] = env->getMethodID(cls, "append", "(Ljava/lang/CharSequence;)Ljava/io/Writer;");
                mids$[mid_append_b3d4aa31] = env->getMethodID(cls, "append", "(Ljava/lang/CharSequence;II)Ljava/io/Writer;");
                mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
                mids$[mid_flush_54c6a166] = env->getMethodID(cls, "flush", "()V");
                mids$[mid_write_5fdc3f48] = env->getMethodID(cls, "write", "(Ljava/lang/String;)V");
                mids$[mid_write_700e23d6] = env->getMethodID(cls, "write", "([C)V");
                mids$[mid_write_39c7bd3c] = env->getMethodID(cls, "write", "(I)V");
                mids$[mid_write_555f322c] = env->getMethodID(cls, "write", "(Ljava/lang/String;II)V");
                mids$[mid_write_6f0bb356] = env->getMethodID(cls, "write", "([CII)V");

                class$ = (::java::lang::Class *) new JObject(cls);
            }
            return (jclass) class$->this$;
        }

        Writer Writer::append(jchar a0) const
        {
            return Writer(env->callObjectMethod(this$, mids$[mid_append_368f1679], a0));
        }

        Writer Writer::append(const ::java::lang::CharSequence & a0) const
        {
            return Writer(env->callObjectMethod(this$, mids$[mid_append_31d2f801], a0.this$));
        }

        Writer Writer::append(const ::java::lang::CharSequence & a0, jint a1, jint a2) const
        {
            return Writer(env->callObjectMethod(this$, mids$[mid_append_b3d4aa31], a0.this$, a1, a2));
        }

        void Writer::close() const
        {
            env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
        }

        void Writer::flush() const
        {
            env->callVoidMethod(this$, mids$[mid_flush_54c6a166]);
        }

        void Writer::write(const ::java::lang::String & a0) const
        {
            env->callVoidMethod(this$, mids$[mid_write_5fdc3f48], a0.this$);
        }

        void Writer::write(const JArray< jchar > & a0) const
        {
            env->callVoidMethod(this$, mids$[mid_write_700e23d6], a0.this$);
        }

        void Writer::write(jint a0) const
        {
            env->callVoidMethod(this$, mids$[mid_write_39c7bd3c], a0);
        }

        void Writer::write(const ::java::lang::String & a0, jint a1, jint a2) const
        {
            env->callVoidMethod(this$, mids$[mid_write_555f322c], a0.this$, a1, a2);
        }

        void Writer::write(const JArray< jchar > & a0, jint a1, jint a2) const
        {
            env->callVoidMethod(this$, mids$[mid_write_6f0bb356], a0.this$, a1, a2);
        }
    }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
    namespace io {
        static PyObject *t_Writer_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Writer_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Writer_append(t_Writer *self, PyObject *args);
        static PyObject *t_Writer_close(t_Writer *self);
        static PyObject *t_Writer_flush(t_Writer *self);
        static PyObject *t_Writer_write(t_Writer *self, PyObject *args);

        static PyMethodDef t_Writer__methods_[] = {
            DECLARE_METHOD(t_Writer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Writer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Writer, append, METH_VARARGS),
            DECLARE_METHOD(t_Writer, close, METH_NOARGS),
            DECLARE_METHOD(t_Writer, flush, METH_NOARGS),
            DECLARE_METHOD(t_Writer, write, METH_VARARGS),
            { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(Writer, t_Writer, ::java::lang::Object, Writer, abstract_init, 0, 0, 0, 0, 0);

        void t_Writer::install(PyObject *module)
        {
            installType(&PY_TYPE(Writer), module, "Writer", 0);
        }

        void t_Writer::initialize(PyObject *module)
        {
            PyDict_SetItemString(PY_TYPE(Writer).tp_dict, "class_", make_descriptor(Writer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Writer).tp_dict, "wrapfn_", make_descriptor(t_Writer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Writer).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_Writer_cast_(PyTypeObject *type, PyObject *arg)
        {
            if (!(arg = castCheck(arg, Writer::initializeClass, 1)))
                return NULL;
            return t_Writer::wrap_Object(Writer(((t_Writer *) arg)->object.this$));
        }
        static PyObject *t_Writer_instance_(PyTypeObject *type, PyObject *arg)
        {
            if (!castCheck(arg, Writer::initializeClass, 0))
                Py_RETURN_FALSE;
            Py_RETURN_TRUE;
        }

        static PyObject *t_Writer_append(t_Writer *self, PyObject *args)
        {
            switch (PyTuple_GET_SIZE(args)) {
              case 1:
                {
                    jchar a0;
                    Writer result((jobject) NULL);

                    if (!parseArgs(args, "C", &a0))
                    {
                        OBJ_CALL(result = self->object.append(a0));
                        return t_Writer::wrap_Object(result);
                    }
                }
                {
                    ::java::lang::CharSequence a0((jobject) NULL);
                    Writer result((jobject) NULL);

                    if (!parseArgs(args, "O", &::java::lang::PY_TYPE(CharSequence), &a0))
                    {
                        OBJ_CALL(result = self->object.append(a0));
                        return t_Writer::wrap_Object(result);
                    }
                }
                break;
              case 3:
                {
                    ::java::lang::CharSequence a0((jobject) NULL);
                    jint a1;
                    jint a2;
                    Writer result((jobject) NULL);

                    if (!parseArgs(args, "OII", &::java::lang::PY_TYPE(CharSequence), &a0, &a1, &a2))
                    {
                        OBJ_CALL(result = self->object.append(a0, a1, a2));
                        return t_Writer::wrap_Object(result);
                    }
                }
            }

            PyErr_SetArgsError((PyObject *) self, "append", args);
            return NULL;
        }

        static PyObject *t_Writer_close(t_Writer *self)
        {
            OBJ_CALL(self->object.close());
            Py_RETURN_NONE;
        }

        static PyObject *t_Writer_flush(t_Writer *self)
        {
            OBJ_CALL(self->object.flush());
            Py_RETURN_NONE;
        }

        static PyObject *t_Writer_write(t_Writer *self, PyObject *args)
        {
            switch (PyTuple_GET_SIZE(args)) {
              case 1:
                {
                    ::java::lang::String a0((jobject) NULL);

                    if (!parseArgs(args, "s", &a0))
                    {
                        OBJ_CALL(self->object.write(a0));
                        Py_RETURN_NONE;
                    }
                }
                {
                    JArray< jchar > a0((jobject) NULL);

                    if (!parseArgs(args, "[C", &a0))
                    {
                        OBJ_CALL(self->object.write(a0));
                        Py_RETURN_NONE;
                    }
                }
                {
                    jint a0;

                    if (!parseArgs(args, "I", &a0))
                    {
                        OBJ_CALL(self->object.write(a0));
                        Py_RETURN_NONE;
                    }
                }
                break;
              case 3:
                {
                    ::java::lang::String a0((jobject) NULL);
                    jint a1;
                    jint a2;

                    if (!parseArgs(args, "sII", &a0, &a1, &a2))
                    {
                        OBJ_CALL(self->object.write(a0, a1, a2));
                        Py_RETURN_NONE;
                    }
                }
                {
                    JArray< jchar > a0((jobject) NULL);
                    jint a1;
                    jint a2;

                    if (!parseArgs(args, "[CII", &a0, &a1, &a2))
                    {
                        OBJ_CALL(self->object.write(a0, a1, a2));
                        Py_RETURN_NONE;
                    }
                }
            }

            PyErr_SetArgsError((PyObject *) self, "write", args);
            return NULL;
        }
    }
}
#include <jni.h>
#include "JCCEnv.h"
#include "is/iclt/icenlp/core/formald/tags/TaggedSentence.h"
#include "is/iclt/icenlp/core/formald/tags/TaggedText.h"
#include "java/lang/Class.h"
#include "is/iclt/icenlp/core/formald/tags/TaggedToken.h"
#include "java/util/List.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace is {
    namespace iclt {
        namespace icenlp {
            namespace core {
                namespace formald {
                    namespace tags {

                        ::java::lang::Class *TaggedSentence::class$ = NULL;
                        jmethodID *TaggedSentence::mids$ = NULL;

                        jclass TaggedSentence::initializeClass()
                        {
                            if (!class$)
                            {

                                jclass cls = (jclass) env->findClass("is/iclt/icenlp/core/formald/tags/TaggedSentence");

                                mids$ = new jmethodID[max_mid];
                                mids$[mid_addToken_7aca71b8] = env->getMethodID(cls, "addToken", "(Lis/iclt/icenlp/core/formald/tags/TaggedToken;)V");
                                mids$[mid_createToken_8558cb03] = env->getMethodID(cls, "createToken", "(Ljava/lang/String;)Lis/iclt/icenlp/core/formald/tags/TaggedToken;");
                                mids$[mid_createToken_67d3d71d] = env->getMethodID(cls, "createToken", "(Ljava/lang/String;Ljava/lang/String;)Lis/iclt/icenlp/core/formald/tags/TaggedToken;");
                                mids$[mid_createToken_d4e92d27] = env->getMethodID(cls, "createToken", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Lis/iclt/icenlp/core/formald/tags/TaggedToken;");
                                mids$[mid_getParentText_db88959a] = env->getMethodID(cls, "getParentText", "()Lis/iclt/icenlp/core/formald/tags/TaggedText;");
                                mids$[mid_getToken_7b9bf097] = env->getMethodID(cls, "getToken", "(I)Lis/iclt/icenlp/core/formald/tags/TaggedToken;");
                                mids$[mid_getTokenCount_54c6a179] = env->getMethodID(cls, "getTokenCount", "()I");
                                mids$[mid_getTokens_87851566] = env->getMethodID(cls, "getTokens", "()Ljava/util/List;");

                                class$ = (::java::lang::Class *) new JObject(cls);
                            }
                            return (jclass) class$->this$;
                        }

                        void TaggedSentence::addToken(const ::is::iclt::icenlp::core::formald::tags::TaggedToken & a0) const
                        {
                            env->callVoidMethod(this$, mids$[mid_addToken_7aca71b8], a0.this$);
                        }

                        ::is::iclt::icenlp::core::formald::tags::TaggedToken TaggedSentence::createToken(const ::java::lang::String & a0) const
                        {
                            return ::is::iclt::icenlp::core::formald::tags::TaggedToken(env->callObjectMethod(this$, mids$[mid_createToken_8558cb03], a0.this$));
                        }

                        ::is::iclt::icenlp::core::formald::tags::TaggedToken TaggedSentence::createToken(const ::java::lang::String & a0, const ::java::lang::String & a1) const
                        {
                            return ::is::iclt::icenlp::core::formald::tags::TaggedToken(env->callObjectMethod(this$, mids$[mid_createToken_67d3d71d], a0.this$, a1.this$));
                        }

                        ::is::iclt::icenlp::core::formald::tags::TaggedToken TaggedSentence::createToken(const ::java::lang::String & a0, const ::java::lang::String & a1, const ::java::lang::String & a2) const
                        {
                            return ::is::iclt::icenlp::core::formald::tags::TaggedToken(env->callObjectMethod(this$, mids$[mid_createToken_d4e92d27], a0.this$, a1.this$, a2.this$));
                        }

                        ::is::iclt::icenlp::core::formald::tags::TaggedText TaggedSentence::getParentText() const
                        {
                            return ::is::iclt::icenlp::core::formald::tags::TaggedText(env->callObjectMethod(this$, mids$[mid_getParentText_db88959a]));
                        }

                        ::is::iclt::icenlp::core::formald::tags::TaggedToken TaggedSentence::getToken(jint a0) const
                        {
                            return ::is::iclt::icenlp::core::formald::tags::TaggedToken(env->callObjectMethod(this$, mids$[mid_getToken_7b9bf097], a0));
                        }

                        jint TaggedSentence::getTokenCount() const
                        {
                            return env->callIntMethod(this$, mids$[mid_getTokenCount_54c6a179]);
                        }

                        ::java::util::List TaggedSentence::getTokens() const
                        {
                            return ::java::util::List(env->callObjectMethod(this$, mids$[mid_getTokens_87851566]));
                        }
                    }
                }
            }
        }
    }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace is {
    namespace iclt {
        namespace icenlp {
            namespace core {
                namespace formald {
                    namespace tags {
                        static PyObject *t_TaggedSentence_cast_(PyTypeObject *type, PyObject *arg);
                        static PyObject *t_TaggedSentence_instance_(PyTypeObject *type, PyObject *arg);
                        static PyObject *t_TaggedSentence_addToken(t_TaggedSentence *self, PyObject *arg);
                        static PyObject *t_TaggedSentence_createToken(t_TaggedSentence *self, PyObject *args);
                        static PyObject *t_TaggedSentence_getParentText(t_TaggedSentence *self);
                        static PyObject *t_TaggedSentence_getToken(t_TaggedSentence *self, PyObject *arg);
                        static PyObject *t_TaggedSentence_getTokenCount(t_TaggedSentence *self);
                        static PyObject *t_TaggedSentence_getTokens(t_TaggedSentence *self);
                        static PyObject *t_TaggedSentence_get__parentText(t_TaggedSentence *self, void *data);
                        static PyObject *t_TaggedSentence_get__tokenCount(t_TaggedSentence *self, void *data);
                        static PyObject *t_TaggedSentence_get__tokens(t_TaggedSentence *self, void *data);
                        static PyGetSetDef t_TaggedSentence__fields_[] = {
                            DECLARE_GET_FIELD(t_TaggedSentence, parentText),
                            DECLARE_GET_FIELD(t_TaggedSentence, tokenCount),
                            DECLARE_GET_FIELD(t_TaggedSentence, tokens),
                            { NULL, NULL, NULL, NULL, NULL }
                        };

                        static PyMethodDef t_TaggedSentence__methods_[] = {
                            DECLARE_METHOD(t_TaggedSentence, cast_, METH_O | METH_CLASS),
                            DECLARE_METHOD(t_TaggedSentence, instance_, METH_O | METH_CLASS),
                            DECLARE_METHOD(t_TaggedSentence, addToken, METH_O),
                            DECLARE_METHOD(t_TaggedSentence, createToken, METH_VARARGS),
                            DECLARE_METHOD(t_TaggedSentence, getParentText, METH_NOARGS),
                            DECLARE_METHOD(t_TaggedSentence, getToken, METH_O),
                            DECLARE_METHOD(t_TaggedSentence, getTokenCount, METH_NOARGS),
                            DECLARE_METHOD(t_TaggedSentence, getTokens, METH_NOARGS),
                            { NULL, NULL, 0, NULL }
                        };

                        DECLARE_TYPE(TaggedSentence, t_TaggedSentence, ::java::lang::Object, TaggedSentence, abstract_init, 0, 0, t_TaggedSentence__fields_, 0, 0);

                        void t_TaggedSentence::install(PyObject *module)
                        {
                            installType(&PY_TYPE(TaggedSentence), module, "TaggedSentence", 0);
                        }

                        void t_TaggedSentence::initialize(PyObject *module)
                        {
                            PyDict_SetItemString(PY_TYPE(TaggedSentence).tp_dict, "class_", make_descriptor(TaggedSentence::initializeClass, 1));
                            PyDict_SetItemString(PY_TYPE(TaggedSentence).tp_dict, "wrapfn_", make_descriptor(t_TaggedSentence::wrap_jobject));
                            PyDict_SetItemString(PY_TYPE(TaggedSentence).tp_dict, "boxfn_", make_descriptor(boxObject));
                        }

                        static PyObject *t_TaggedSentence_cast_(PyTypeObject *type, PyObject *arg)
                        {
                            if (!(arg = castCheck(arg, TaggedSentence::initializeClass, 1)))
                                return NULL;
                            return t_TaggedSentence::wrap_Object(TaggedSentence(((t_TaggedSentence *) arg)->object.this$));
                        }
                        static PyObject *t_TaggedSentence_instance_(PyTypeObject *type, PyObject *arg)
                        {
                            if (!castCheck(arg, TaggedSentence::initializeClass, 0))
                                Py_RETURN_FALSE;
                            Py_RETURN_TRUE;
                        }

                        static PyObject *t_TaggedSentence_addToken(t_TaggedSentence *self, PyObject *arg)
                        {
                            ::is::iclt::icenlp::core::formald::tags::TaggedToken a0((jobject) NULL);

                            if (!parseArg(arg, "k", ::is::iclt::icenlp::core::formald::tags::TaggedToken::initializeClass, &a0))
                            {
                                OBJ_CALL(self->object.addToken(a0));
                                Py_RETURN_NONE;
                            }

                            PyErr_SetArgsError((PyObject *) self, "addToken", arg);
                            return NULL;
                        }

                        static PyObject *t_TaggedSentence_createToken(t_TaggedSentence *self, PyObject *args)
                        {
                            switch (PyTuple_GET_SIZE(args)) {
                              case 1:
                                {
                                    ::java::lang::String a0((jobject) NULL);
                                    ::is::iclt::icenlp::core::formald::tags::TaggedToken result((jobject) NULL);

                                    if (!parseArgs(args, "s", &a0))
                                    {
                                        OBJ_CALL(result = self->object.createToken(a0));
                                        return ::is::iclt::icenlp::core::formald::tags::t_TaggedToken::wrap_Object(result);
                                    }
                                }
                                break;
                              case 2:
                                {
                                    ::java::lang::String a0((jobject) NULL);
                                    ::java::lang::String a1((jobject) NULL);
                                    ::is::iclt::icenlp::core::formald::tags::TaggedToken result((jobject) NULL);

                                    if (!parseArgs(args, "ss", &a0, &a1))
                                    {
                                        OBJ_CALL(result = self->object.createToken(a0, a1));
                                        return ::is::iclt::icenlp::core::formald::tags::t_TaggedToken::wrap_Object(result);
                                    }
                                }
                                break;
                              case 3:
                                {
                                    ::java::lang::String a0((jobject) NULL);
                                    ::java::lang::String a1((jobject) NULL);
                                    ::java::lang::String a2((jobject) NULL);
                                    ::is::iclt::icenlp::core::formald::tags::TaggedToken result((jobject) NULL);

                                    if (!parseArgs(args, "sss", &a0, &a1, &a2))
                                    {
                                        OBJ_CALL(result = self->object.createToken(a0, a1, a2));
                                        return ::is::iclt::icenlp::core::formald::tags::t_TaggedToken::wrap_Object(result);
                                    }
                                }
                            }

                            PyErr_SetArgsError((PyObject *) self, "createToken", args);
                            return NULL;
                        }

                        static PyObject *t_TaggedSentence_getParentText(t_TaggedSentence *self)
                        {
                            ::is::iclt::icenlp::core::formald::tags::TaggedText result((jobject) NULL);
                            OBJ_CALL(result = self->object.getParentText());
                            return ::is::iclt::icenlp::core::formald::tags::t_TaggedText::wrap_Object(result);
                        }

                        static PyObject *t_TaggedSentence_getToken(t_TaggedSentence *self, PyObject *arg)
                        {
                            jint a0;
                            ::is::iclt::icenlp::core::formald::tags::TaggedToken result((jobject) NULL);

                            if (!parseArg(arg, "I", &a0))
                            {
                                OBJ_CALL(result = self->object.getToken(a0));
                                return ::is::iclt::icenlp::core::formald::tags::t_TaggedToken::wrap_Object(result);
                            }

                            PyErr_SetArgsError((PyObject *) self, "getToken", arg);
                            return NULL;
                        }

                        static PyObject *t_TaggedSentence_getTokenCount(t_TaggedSentence *self)
                        {
                            jint result;
                            OBJ_CALL(result = self->object.getTokenCount());
                            return PyInt_FromLong((long) result);
                        }

                        static PyObject *t_TaggedSentence_getTokens(t_TaggedSentence *self)
                        {
                            ::java::util::List result((jobject) NULL);
                            OBJ_CALL(result = self->object.getTokens());
                            return ::java::util::t_List::wrap_Object(result, &::is::iclt::icenlp::core::formald::tags::PY_TYPE(TaggedToken));
                        }

                        static PyObject *t_TaggedSentence_get__parentText(t_TaggedSentence *self, void *data)
                        {
                            ::is::iclt::icenlp::core::formald::tags::TaggedText value((jobject) NULL);
                            OBJ_CALL(value = self->object.getParentText());
                            return ::is::iclt::icenlp::core::formald::tags::t_TaggedText::wrap_Object(value);
                        }

                        static PyObject *t_TaggedSentence_get__tokenCount(t_TaggedSentence *self, void *data)
                        {
                            jint value;
                            OBJ_CALL(value = self->object.getTokenCount());
                            return PyInt_FromLong((long) value);
                        }

                        static PyObject *t_TaggedSentence_get__tokens(t_TaggedSentence *self, void *data)
                        {
                            ::java::util::List value((jobject) NULL);
                            OBJ_CALL(value = self->object.getTokens());
                            return ::java::util::t_List::wrap_Object(value);
                        }
                    }
                }
            }
        }
    }
}
#include <jni.h>
#include "JCCEnv.h"
#include "is/iclt/icenlp/core/icemorphy/IceMorphy.h"
#include "java/util/ArrayList.h"
#include "is/iclt/icenlp/core/utils/Lexicon.h"
#include "is/iclt/icenlp/core/utils/IceLog.h"
#include "is/iclt/icenlp/core/utils/WordList.h"
#include "is/iclt/icenlp/core/utils/IceTag$WordClass.h"
#include "java/lang/Class.h"
#include "is/iclt/icenlp/core/icetagger/IceFrequency.h"
#include "is/iclt/icenlp/core/tokenizer/IceTokenTags.h"
#include "java/lang/String.h"
#include "is/iclt/icenlp/core/utils/Trie.h"
#include "JArray.h"

namespace is {
    namespace iclt {
        namespace icenlp {
            namespace core {
                namespace icemorphy {

                    ::java::lang::Class *IceMorphy::class$ = NULL;
                    jmethodID *IceMorphy::mids$ = NULL;

                    jclass IceMorphy::initializeClass()
                    {
                        if (!class$)
                        {

                            jclass cls = (jclass) env->findClass("is/iclt/icenlp/core/icemorphy/IceMorphy");

                            mids$ = new jmethodID[max_mid];
                            mids$[mid_init$_e0806810] = env->getMethodID(cls, "<init>", "(Lis/iclt/icenlp/core/utils/Lexicon;Lis/iclt/icenlp/core/utils/Lexicon;Lis/iclt/icenlp/core/utils/Trie;Lis/iclt/icenlp/core/utils/Trie;Lis/iclt/icenlp/core/utils/Trie;Lis/iclt/icenlp/core/utils/WordList;Lis/iclt/icenlp/core/icetagger/IceFrequency;Lis/iclt/icenlp/core/utils/IceLog;)V");
                            mids$[mid_addPrefix_9ee1b518] = env->getMethodID(cls, "addPrefix", "(Lis/iclt/icenlp/core/tokenizer/IceTokenTags;)Z");
                            mids$[mid_analyzeProperNoun_171fb4bd] = env->getMethodID(cls, "analyzeProperNoun", "(Lis/iclt/icenlp/core/tokenizer/IceTokenTags;Z)Z");
                            mids$[mid_compoundAnalysisPrefix_9ee1b518] = env->getMethodID(cls, "compoundAnalysisPrefix", "(Lis/iclt/icenlp/core/tokenizer/IceTokenTags;)Z");
                            mids$[mid_compoundAnalysisSuffix_171fb4bd] = env->getMethodID(cls, "compoundAnalysisSuffix", "(Lis/iclt/icenlp/core/tokenizer/IceTokenTags;Z)Z");
                            mids$[mid_compoundVerbAnalysis_9ee1b518] = env->getMethodID(cls, "compoundVerbAnalysis", "(Lis/iclt/icenlp/core/tokenizer/IceTokenTags;)Z");
                            mids$[mid_dictionaryLookup_edaaade4] = env->getMethodID(cls, "dictionaryLookup", "(Ljava/lang/String;Z)Ljava/lang/String;");
                            mids$[mid_dictionaryTokenLookup_171fb4b1] = env->getMethodID(cls, "dictionaryTokenLookup", "(Lis/iclt/icenlp/core/tokenizer/IceTokenTags;Z)V");
                            mids$[mid_endingAnalysis_1ba6ff83] = env->getMethodID(cls, "endingAnalysis", "(Lis/iclt/icenlp/core/tokenizer/IceTokenTags;Lis/iclt/icenlp/core/utils/IceTag$WordClass;Z)Z");
                            mids$[mid_endingAnalysisProper_9ee1b518] = env->getMethodID(cls, "endingAnalysisProper", "(Lis/iclt/icenlp/core/tokenizer/IceTokenTags;)Z");
                            mids$[mid_foreignAnalysis_9ee1b518] = env->getMethodID(cls, "foreignAnalysis", "(Lis/iclt/icenlp/core/tokenizer/IceTokenTags;)Z");
                            mids$[mid_generateMissingTags_9ee1b514] = env->getMethodID(cls, "generateMissingTags", "(Lis/iclt/icenlp/core/tokenizer/IceTokenTags;)V");
                            mids$[mid_isForeignLexeme_5fdc3f44] = env->getMethodID(cls, "isForeignLexeme", "(Ljava/lang/String;)Z");
                            mids$[mid_maxFrequency_e57c73cb] = env->getMethodID(cls, "maxFrequency", "(Lis/iclt/icenlp/core/tokenizer/IceTokenTags;)Ljava/lang/String;");
                            mids$[mid_morphoAnalysis_54c6a166] = env->getMethodID(cls, "morphoAnalysis", "()V");
                            mids$[mid_morphoAnalysisSuffix_171fb4bd] = env->getMethodID(cls, "morphoAnalysisSuffix", "(Lis/iclt/icenlp/core/tokenizer/IceTokenTags;Z)Z");
                            mids$[mid_morphoAnalysisToken_281ca356] = env->getMethodID(cls, "morphoAnalysisToken", "(Lis/iclt/icenlp/core/tokenizer/IceTokenTags;Lis/iclt/icenlp/core/tokenizer/IceTokenTags;)Z");
                            mids$[mid_numberAnalysis_9ee1b518] = env->getMethodID(cls, "numberAnalysis", "(Lis/iclt/icenlp/core/tokenizer/IceTokenTags;)Z");
                            mids$[mid_setTokens_b3f662f9] = env->getMethodID(cls, "setTokens", "(Ljava/util/ArrayList;)V");
                            mids$[mid_verbAnalysis_281ca356] = env->getMethodID(cls, "verbAnalysis", "(Lis/iclt/icenlp/core/tokenizer/IceTokenTags;Lis/iclt/icenlp/core/tokenizer/IceTokenTags;)Z");
                            mids$[mid_verbFiniteAnalysis_9ee1b518] = env->getMethodID(cls, "verbFiniteAnalysis", "(Lis/iclt/icenlp/core/tokenizer/IceTokenTags;)Z");
                            mids$[mid_verbInfinitiveAnalysis_9ee1b518] = env->getMethodID(cls, "verbInfinitiveAnalysis", "(Lis/iclt/icenlp/core/tokenizer/IceTokenTags;)Z");
                            mids$[mid_verbInfinitiveOrPresentParticpleOnly_281ca356] = env->getMethodID(cls, "verbInfinitiveOrPresentParticpleOnly", "(Lis/iclt/icenlp/core/tokenizer/IceTokenTags;Lis/iclt/icenlp/core/tokenizer/IceTokenTags;)Z");
                            mids$[mid_verbPastParticipleAnalysis_9ee1b518] = env->getMethodID(cls, "verbPastParticipleAnalysis", "(Lis/iclt/icenlp/core/tokenizer/IceTokenTags;)Z");

                            class$ = (::java::lang::Class *) new JObject(cls);
                        }
                        return (jclass) class$->this$;
                    }

                    IceMorphy::IceMorphy(const ::is::iclt::icenlp::core::utils::Lexicon & a0, const ::is::iclt::icenlp::core::utils::Lexicon & a1, const ::is::iclt::icenlp::core::utils::Trie & a2, const ::is::iclt::icenlp::core::utils::Trie & a3, const ::is::iclt::icenlp::core::utils::Trie & a4, const ::is::iclt::icenlp::core::utils::WordList & a5, const ::is::iclt::icenlp::core::icetagger::IceFrequency & a6, const ::is::iclt::icenlp::core::utils::IceLog & a7) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_e0806810, a0.this$, a1.this$, a2.this$, a3.this$, a4.this$, a5.this$, a6.this$, a7.this$)) {}

                    jboolean IceMorphy::addPrefix(const ::is::iclt::icenlp::core::tokenizer::IceTokenTags & a0) const
                    {
                        return env->callBooleanMethod(this$, mids$[mid_addPrefix_9ee1b518], a0.this$);
                    }

                    jboolean IceMorphy::analyzeProperNoun(const ::is::iclt::icenlp::core::tokenizer::IceTokenTags & a0, jboolean a1) const
                    {
                        return env->callBooleanMethod(this$, mids$[mid_analyzeProperNoun_171fb4bd], a0.this$, a1);
                    }

                    jboolean IceMorphy::compoundAnalysisPrefix(const ::is::iclt::icenlp::core::tokenizer::IceTokenTags & a0) const
                    {
                        return env->callBooleanMethod(this$, mids$[mid_compoundAnalysisPrefix_9ee1b518], a0.this$);
                    }

                    jboolean IceMorphy::compoundAnalysisSuffix(const ::is::iclt::icenlp::core::tokenizer::IceTokenTags & a0, jboolean a1) const
                    {
                        return env->callBooleanMethod(this$, mids$[mid_compoundAnalysisSuffix_171fb4bd], a0.this$, a1);
                    }

                    jboolean IceMorphy::compoundVerbAnalysis(const ::is::iclt::icenlp::core::tokenizer::IceTokenTags & a0) const
                    {
                        return env->callBooleanMethod(this$, mids$[mid_compoundVerbAnalysis_9ee1b518], a0.this$);
                    }

                    ::java::lang::String IceMorphy::dictionaryLookup(const ::java::lang::String & a0, jboolean a1) const
                    {
                        return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_dictionaryLookup_edaaade4], a0.this$, a1));
                    }

                    void IceMorphy::dictionaryTokenLookup(const ::is::iclt::icenlp::core::tokenizer::IceTokenTags & a0, jboolean a1) const
                    {
                        env->callVoidMethod(this$, mids$[mid_dictionaryTokenLookup_171fb4b1], a0.this$, a1);
                    }

                    jboolean IceMorphy::endingAnalysis(const ::is::iclt::icenlp::core::tokenizer::IceTokenTags & a0, const ::is::iclt::icenlp::core::utils::IceTag$WordClass & a1, jboolean a2) const
                    {
                        return env->callBooleanMethod(this$, mids$[mid_endingAnalysis_1ba6ff83], a0.this$, a1.this$, a2);
                    }

                    jboolean IceMorphy::endingAnalysisProper(const ::is::iclt::icenlp::core::tokenizer::IceTokenTags & a0) const
                    {
                        return env->callBooleanMethod(this$, mids$[mid_endingAnalysisProper_9ee1b518], a0.this$);
                    }

                    jboolean IceMorphy::foreignAnalysis(const ::is::iclt::icenlp::core::tokenizer::IceTokenTags & a0) const
                    {
                        return env->callBooleanMethod(this$, mids$[mid_foreignAnalysis_9ee1b518], a0.this$);
                    }

                    void IceMorphy::generateMissingTags(const ::is::iclt::icenlp::core::tokenizer::IceTokenTags & a0) const
                    {
                        env->callVoidMethod(this$, mids$[mid_generateMissingTags_9ee1b514], a0.this$);
                    }

                    jboolean IceMorphy::isForeignLexeme(const ::java::lang::String & a0) const
                    {
                        return env->callBooleanMethod(this$, mids$[mid_isForeignLexeme_5fdc3f44], a0.this$);
                    }

                    ::java::lang::String IceMorphy::maxFrequency(const ::is::iclt::icenlp::core::tokenizer::IceTokenTags & a0) const
                    {
                        return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_maxFrequency_e57c73cb], a0.this$));
                    }

                    void IceMorphy::morphoAnalysis() const
                    {
                        env->callVoidMethod(this$, mids$[mid_morphoAnalysis_54c6a166]);
                    }

                    jboolean IceMorphy::morphoAnalysisSuffix(const ::is::iclt::icenlp::core::tokenizer::IceTokenTags & a0, jboolean a1) const
                    {
                        return env->callBooleanMethod(this$, mids$[mid_morphoAnalysisSuffix_171fb4bd], a0.this$, a1);
                    }

                    jboolean IceMorphy::morphoAnalysisToken(const ::is::iclt::icenlp::core::tokenizer::IceTokenTags & a0, const ::is::iclt::icenlp::core::tokenizer::IceTokenTags & a1) const
                    {
                        return env->callBooleanMethod(this$, mids$[mid_morphoAnalysisToken_281ca356], a0.this$, a1.this$);
                    }

                    jboolean IceMorphy::numberAnalysis(const ::is::iclt::icenlp::core::tokenizer::IceTokenTags & a0) const
                    {
                        return env->callBooleanMethod(this$, mids$[mid_numberAnalysis_9ee1b518], a0.this$);
                    }

                    void IceMorphy::setTokens(const ::java::util::ArrayList & a0) const
                    {
                        env->callVoidMethod(this$, mids$[mid_setTokens_b3f662f9], a0.this$);
                    }

                    jboolean IceMorphy::verbAnalysis(const ::is::iclt::icenlp::core::tokenizer::IceTokenTags & a0, const ::is::iclt::icenlp::core::tokenizer::IceTokenTags & a1) const
                    {
                        return env->callBooleanMethod(this$, mids$[mid_verbAnalysis_281ca356], a0.this$, a1.this$);
                    }

                    jboolean IceMorphy::verbFiniteAnalysis(const ::is::iclt::icenlp::core::tokenizer::IceTokenTags & a0) const
                    {
                        return env->callBooleanMethod(this$, mids$[mid_verbFiniteAnalysis_9ee1b518], a0.this$);
                    }

                    jboolean IceMorphy::verbInfinitiveAnalysis(const ::is::iclt::icenlp::core::tokenizer::IceTokenTags & a0) const
                    {
                        return env->callBooleanMethod(this$, mids$[mid_verbInfinitiveAnalysis_9ee1b518], a0.this$);
                    }

                    jboolean IceMorphy::verbInfinitiveOrPresentParticpleOnly(const ::is::iclt::icenlp::core::tokenizer::IceTokenTags & a0, const ::is::iclt::icenlp::core::tokenizer::IceTokenTags & a1) const
                    {
                        return env->callBooleanMethod(this$, mids$[mid_verbInfinitiveOrPresentParticpleOnly_281ca356], a0.this$, a1.this$);
                    }

                    jboolean IceMorphy::verbPastParticipleAnalysis(const ::is::iclt::icenlp::core::tokenizer::IceTokenTags & a0) const
                    {
                        return env->callBooleanMethod(this$, mids$[mid_verbPastParticipleAnalysis_9ee1b518], a0.this$);
                    }
                }
            }
        }
    }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "is/iclt/icenlp/core/icemorphy/IceMorphy$MorphoClass.h"

namespace is {
    namespace iclt {
        namespace icenlp {
            namespace core {
                namespace icemorphy {
                    static PyObject *t_IceMorphy_cast_(PyTypeObject *type, PyObject *arg);
                    static PyObject *t_IceMorphy_instance_(PyTypeObject *type, PyObject *arg);
                    static int t_IceMorphy_init_(t_IceMorphy *self, PyObject *args, PyObject *kwds);
                    static PyObject *t_IceMorphy_addPrefix(t_IceMorphy *self, PyObject *arg);
                    static PyObject *t_IceMorphy_analyzeProperNoun(t_IceMorphy *self, PyObject *args);
                    static PyObject *t_IceMorphy_compoundAnalysisPrefix(t_IceMorphy *self, PyObject *arg);
                    static PyObject *t_IceMorphy_compoundAnalysisSuffix(t_IceMorphy *self, PyObject *args);
                    static PyObject *t_IceMorphy_compoundVerbAnalysis(t_IceMorphy *self, PyObject *arg);
                    static PyObject *t_IceMorphy_dictionaryLookup(t_IceMorphy *self, PyObject *args);
                    static PyObject *t_IceMorphy_dictionaryTokenLookup(t_IceMorphy *self, PyObject *args);
                    static PyObject *t_IceMorphy_endingAnalysis(t_IceMorphy *self, PyObject *args);
                    static PyObject *t_IceMorphy_endingAnalysisProper(t_IceMorphy *self, PyObject *arg);
                    static PyObject *t_IceMorphy_foreignAnalysis(t_IceMorphy *self, PyObject *arg);
                    static PyObject *t_IceMorphy_generateMissingTags(t_IceMorphy *self, PyObject *arg);
                    static PyObject *t_IceMorphy_isForeignLexeme(t_IceMorphy *self, PyObject *arg);
                    static PyObject *t_IceMorphy_maxFrequency(t_IceMorphy *self, PyObject *arg);
                    static PyObject *t_IceMorphy_morphoAnalysis(t_IceMorphy *self);
                    static PyObject *t_IceMorphy_morphoAnalysisSuffix(t_IceMorphy *self, PyObject *args);
                    static PyObject *t_IceMorphy_morphoAnalysisToken(t_IceMorphy *self, PyObject *args);
                    static PyObject *t_IceMorphy_numberAnalysis(t_IceMorphy *self, PyObject *arg);
                    static PyObject *t_IceMorphy_setTokens(t_IceMorphy *self, PyObject *arg);
                    static PyObject *t_IceMorphy_verbAnalysis(t_IceMorphy *self, PyObject *args);
                    static PyObject *t_IceMorphy_verbFiniteAnalysis(t_IceMorphy *self, PyObject *arg);
                    static PyObject *t_IceMorphy_verbInfinitiveAnalysis(t_IceMorphy *self, PyObject *arg);
                    static PyObject *t_IceMorphy_verbInfinitiveOrPresentParticpleOnly(t_IceMorphy *self, PyObject *args);
                    static PyObject *t_IceMorphy_verbPastParticipleAnalysis(t_IceMorphy *self, PyObject *arg);
                    static int t_IceMorphy_set__tokens(t_IceMorphy *self, PyObject *arg, void *data);
                    static PyGetSetDef t_IceMorphy__fields_[] = {
                        DECLARE_SET_FIELD(t_IceMorphy, tokens),
                        { NULL, NULL, NULL, NULL, NULL }
                    };

                    static PyMethodDef t_IceMorphy__methods_[] = {
                        DECLARE_METHOD(t_IceMorphy, cast_, METH_O | METH_CLASS),
                        DECLARE_METHOD(t_IceMorphy, instance_, METH_O | METH_CLASS),
                        DECLARE_METHOD(t_IceMorphy, addPrefix, METH_O),
                        DECLARE_METHOD(t_IceMorphy, analyzeProperNoun, METH_VARARGS),
                        DECLARE_METHOD(t_IceMorphy, compoundAnalysisPrefix, METH_O),
                        DECLARE_METHOD(t_IceMorphy, compoundAnalysisSuffix, METH_VARARGS),
                        DECLARE_METHOD(t_IceMorphy, compoundVerbAnalysis, METH_O),
                        DECLARE_METHOD(t_IceMorphy, dictionaryLookup, METH_VARARGS),
                        DECLARE_METHOD(t_IceMorphy, dictionaryTokenLookup, METH_VARARGS),
                        DECLARE_METHOD(t_IceMorphy, endingAnalysis, METH_VARARGS),
                        DECLARE_METHOD(t_IceMorphy, endingAnalysisProper, METH_O),
                        DECLARE_METHOD(t_IceMorphy, foreignAnalysis, METH_O),
                        DECLARE_METHOD(t_IceMorphy, generateMissingTags, METH_O),
                        DECLARE_METHOD(t_IceMorphy, isForeignLexeme, METH_O),
                        DECLARE_METHOD(t_IceMorphy, maxFrequency, METH_O),
                        DECLARE_METHOD(t_IceMorphy, morphoAnalysis, METH_NOARGS),
                        DECLARE_METHOD(t_IceMorphy, morphoAnalysisSuffix, METH_VARARGS),
                        DECLARE_METHOD(t_IceMorphy, morphoAnalysisToken, METH_VARARGS),
                        DECLARE_METHOD(t_IceMorphy, numberAnalysis, METH_O),
                        DECLARE_METHOD(t_IceMorphy, setTokens, METH_O),
                        DECLARE_METHOD(t_IceMorphy, verbAnalysis, METH_VARARGS),
                        DECLARE_METHOD(t_IceMorphy, verbFiniteAnalysis, METH_O),
                        DECLARE_METHOD(t_IceMorphy, verbInfinitiveAnalysis, METH_O),
                        DECLARE_METHOD(t_IceMorphy, verbInfinitiveOrPresentParticpleOnly, METH_VARARGS),
                        DECLARE_METHOD(t_IceMorphy, verbPastParticipleAnalysis, METH_O),
                        { NULL, NULL, 0, NULL }
                    };

                    DECLARE_TYPE(IceMorphy, t_IceMorphy, ::java::lang::Object, IceMorphy, t_IceMorphy_init_, 0, 0, t_IceMorphy__fields_, 0, 0);

                    void t_IceMorphy::install(PyObject *module)
                    {
                        installType(&PY_TYPE(IceMorphy), module, "IceMorphy", 0);
                        PyDict_SetItemString(PY_TYPE(IceMorphy).tp_dict, "MorphoClass", make_descriptor(&PY_TYPE(IceMorphy$MorphoClass)));
                    }

                    void t_IceMorphy::initialize(PyObject *module)
                    {
                        PyDict_SetItemString(PY_TYPE(IceMorphy).tp_dict, "class_", make_descriptor(IceMorphy::initializeClass, 1));
                        PyDict_SetItemString(PY_TYPE(IceMorphy).tp_dict, "wrapfn_", make_descriptor(t_IceMorphy::wrap_jobject));
                        PyDict_SetItemString(PY_TYPE(IceMorphy).tp_dict, "boxfn_", make_descriptor(boxObject));
                    }

                    static PyObject *t_IceMorphy_cast_(PyTypeObject *type, PyObject *arg)
                    {
                        if (!(arg = castCheck(arg, IceMorphy::initializeClass, 1)))
                            return NULL;
                        return t_IceMorphy::wrap_Object(IceMorphy(((t_IceMorphy *) arg)->object.this$));
                    }
                    static PyObject *t_IceMorphy_instance_(PyTypeObject *type, PyObject *arg)
                    {
                        if (!castCheck(arg, IceMorphy::initializeClass, 0))
                            Py_RETURN_FALSE;
                        Py_RETURN_TRUE;
                    }

                    static int t_IceMorphy_init_(t_IceMorphy *self, PyObject *args, PyObject *kwds)
                    {
                        ::is::iclt::icenlp::core::utils::Lexicon a0((jobject) NULL);
                        ::is::iclt::icenlp::core::utils::Lexicon a1((jobject) NULL);
                        ::is::iclt::icenlp::core::utils::Trie a2((jobject) NULL);
                        ::is::iclt::icenlp::core::utils::Trie a3((jobject) NULL);
                        ::is::iclt::icenlp::core::utils::Trie a4((jobject) NULL);
                        ::is::iclt::icenlp::core::utils::WordList a5((jobject) NULL);
                        ::is::iclt::icenlp::core::icetagger::IceFrequency a6((jobject) NULL);
                        ::is::iclt::icenlp::core::utils::IceLog a7((jobject) NULL);
                        IceMorphy object((jobject) NULL);

                        if (!parseArgs(args, "kkkkkkkk", ::is::iclt::icenlp::core::utils::Lexicon::initializeClass, ::is::iclt::icenlp::core::utils::Lexicon::initializeClass, ::is::iclt::icenlp::core::utils::Trie::initializeClass, ::is::iclt::icenlp::core::utils::Trie::initializeClass, ::is::iclt::icenlp::core::utils::Trie::initializeClass, ::is::iclt::icenlp::core::utils::WordList::initializeClass, ::is::iclt::icenlp::core::icetagger::IceFrequency::initializeClass, ::is::iclt::icenlp::core::utils::IceLog::initializeClass, &a0, &a1, &a2, &a3, &a4, &a5, &a6, &a7))
                        {
                            INT_CALL(object = IceMorphy(a0, a1, a2, a3, a4, a5, a6, a7));
                            self->object = object;
                        }
                        else
                        {
                            PyErr_SetArgsError((PyObject *) self, "__init__", args);
                            return -1;
                        }

                        return 0;
                    }

                    static PyObject *t_IceMorphy_addPrefix(t_IceMorphy *self, PyObject *arg)
                    {
                        ::is::iclt::icenlp::core::tokenizer::IceTokenTags a0((jobject) NULL);
                        jboolean result;

                        if (!parseArg(arg, "k", ::is::iclt::icenlp::core::tokenizer::IceTokenTags::initializeClass, &a0))
                        {
                            OBJ_CALL(result = self->object.addPrefix(a0));
                            Py_RETURN_BOOL(result);
                        }

                        PyErr_SetArgsError((PyObject *) self, "addPrefix", arg);
                        return NULL;
                    }

                    static PyObject *t_IceMorphy_analyzeProperNoun(t_IceMorphy *self, PyObject *args)
                    {
                        ::is::iclt::icenlp::core::tokenizer::IceTokenTags a0((jobject) NULL);
                        jboolean a1;
                        jboolean result;

                        if (!parseArgs(args, "kZ", ::is::iclt::icenlp::core::tokenizer::IceTokenTags::initializeClass, &a0, &a1))
                        {
                            OBJ_CALL(result = self->object.analyzeProperNoun(a0, a1));
                            Py_RETURN_BOOL(result);
                        }

                        PyErr_SetArgsError((PyObject *) self, "analyzeProperNoun", args);
                        return NULL;
                    }

                    static PyObject *t_IceMorphy_compoundAnalysisPrefix(t_IceMorphy *self, PyObject *arg)
                    {
                        ::is::iclt::icenlp::core::tokenizer::IceTokenTags a0((jobject) NULL);
                        jboolean result;

                        if (!parseArg(arg, "k", ::is::iclt::icenlp::core::tokenizer::IceTokenTags::initializeClass, &a0))
                        {
                            OBJ_CALL(result = self->object.compoundAnalysisPrefix(a0));
                            Py_RETURN_BOOL(result);
                        }

                        PyErr_SetArgsError((PyObject *) self, "compoundAnalysisPrefix", arg);
                        return NULL;
                    }

                    static PyObject *t_IceMorphy_compoundAnalysisSuffix(t_IceMorphy *self, PyObject *args)
                    {
                        ::is::iclt::icenlp::core::tokenizer::IceTokenTags a0((jobject) NULL);
                        jboolean a1;
                        jboolean result;

                        if (!parseArgs(args, "kZ", ::is::iclt::icenlp::core::tokenizer::IceTokenTags::initializeClass, &a0, &a1))
                        {
                            OBJ_CALL(result = self->object.compoundAnalysisSuffix(a0, a1));
                            Py_RETURN_BOOL(result);
                        }

                        PyErr_SetArgsError((PyObject *) self, "compoundAnalysisSuffix", args);
                        return NULL;
                    }

                    static PyObject *t_IceMorphy_compoundVerbAnalysis(t_IceMorphy *self, PyObject *arg)
                    {
                        ::is::iclt::icenlp::core::tokenizer::IceTokenTags a0((jobject) NULL);
                        jboolean result;

                        if (!parseArg(arg, "k", ::is::iclt::icenlp::core::tokenizer::IceTokenTags::initializeClass, &a0))
                        {
                            OBJ_CALL(result = self->object.compoundVerbAnalysis(a0));
                            Py_RETURN_BOOL(result);
                        }

                        PyErr_SetArgsError((PyObject *) self, "compoundVerbAnalysis", arg);
                        return NULL;
                    }

                    static PyObject *t_IceMorphy_dictionaryLookup(t_IceMorphy *self, PyObject *args)
                    {
                        ::java::lang::String a0((jobject) NULL);
                        jboolean a1;
                        ::java::lang::String result((jobject) NULL);

                        if (!parseArgs(args, "sZ", &a0, &a1))
                        {
                            OBJ_CALL(result = self->object.dictionaryLookup(a0, a1));
                            return j2p(result);
                        }

                        PyErr_SetArgsError((PyObject *) self, "dictionaryLookup", args);
                        return NULL;
                    }

                    static PyObject *t_IceMorphy_dictionaryTokenLookup(t_IceMorphy *self, PyObject *args)
                    {
                        ::is::iclt::icenlp::core::tokenizer::IceTokenTags a0((jobject) NULL);
                        jboolean a1;

                        if (!parseArgs(args, "kZ", ::is::iclt::icenlp::core::tokenizer::IceTokenTags::initializeClass, &a0, &a1))
                        {
                            OBJ_CALL(self->object.dictionaryTokenLookup(a0, a1));
                            Py_RETURN_NONE;
                        }

                        PyErr_SetArgsError((PyObject *) self, "dictionaryTokenLookup", args);
                        return NULL;
                    }

                    static PyObject *t_IceMorphy_endingAnalysis(t_IceMorphy *self, PyObject *args)
                    {
                        ::is::iclt::icenlp::core::tokenizer::IceTokenTags a0((jobject) NULL);
                        ::is::iclt::icenlp::core::utils::IceTag$WordClass a1((jobject) NULL);
                        jboolean a2;
                        jboolean result;

                        if (!parseArgs(args, "kkZ", ::is::iclt::icenlp::core::tokenizer::IceTokenTags::initializeClass, ::is::iclt::icenlp::core::utils::IceTag$WordClass::initializeClass, &a0, &a1, &a2))
                        {
                            OBJ_CALL(result = self->object.endingAnalysis(a0, a1, a2));
                            Py_RETURN_BOOL(result);
                        }

                        PyErr_SetArgsError((PyObject *) self, "endingAnalysis", args);
                        return NULL;
                    }

                    static PyObject *t_IceMorphy_endingAnalysisProper(t_IceMorphy *self, PyObject *arg)
                    {
                        ::is::iclt::icenlp::core::tokenizer::IceTokenTags a0((jobject) NULL);
                        jboolean result;

                        if (!parseArg(arg, "k", ::is::iclt::icenlp::core::tokenizer::IceTokenTags::initializeClass, &a0))
                        {
                            OBJ_CALL(result = self->object.endingAnalysisProper(a0));
                            Py_RETURN_BOOL(result);
                        }

                        PyErr_SetArgsError((PyObject *) self, "endingAnalysisProper", arg);
                        return NULL;
                    }

                    static PyObject *t_IceMorphy_foreignAnalysis(t_IceMorphy *self, PyObject *arg)
                    {
                        ::is::iclt::icenlp::core::tokenizer::IceTokenTags a0((jobject) NULL);
                        jboolean result;

                        if (!parseArg(arg, "k", ::is::iclt::icenlp::core::tokenizer::IceTokenTags::initializeClass, &a0))
                        {
                            OBJ_CALL(result = self->object.foreignAnalysis(a0));
                            Py_RETURN_BOOL(result);
                        }

                        PyErr_SetArgsError((PyObject *) self, "foreignAnalysis", arg);
                        return NULL;
                    }

                    static PyObject *t_IceMorphy_generateMissingTags(t_IceMorphy *self, PyObject *arg)
                    {
                        ::is::iclt::icenlp::core::tokenizer::IceTokenTags a0((jobject) NULL);

                        if (!parseArg(arg, "k", ::is::iclt::icenlp::core::tokenizer::IceTokenTags::initializeClass, &a0))
                        {
                            OBJ_CALL(self->object.generateMissingTags(a0));
                            Py_RETURN_NONE;
                        }

                        PyErr_SetArgsError((PyObject *) self, "generateMissingTags", arg);
                        return NULL;
                    }

                    static PyObject *t_IceMorphy_isForeignLexeme(t_IceMorphy *self, PyObject *arg)
                    {
                        ::java::lang::String a0((jobject) NULL);
                        jboolean result;

                        if (!parseArg(arg, "s", &a0))
                        {
                            OBJ_CALL(result = self->object.isForeignLexeme(a0));
                            Py_RETURN_BOOL(result);
                        }

                        PyErr_SetArgsError((PyObject *) self, "isForeignLexeme", arg);
                        return NULL;
                    }

                    static PyObject *t_IceMorphy_maxFrequency(t_IceMorphy *self, PyObject *arg)
                    {
                        ::is::iclt::icenlp::core::tokenizer::IceTokenTags a0((jobject) NULL);
                        ::java::lang::String result((jobject) NULL);

                        if (!parseArg(arg, "k", ::is::iclt::icenlp::core::tokenizer::IceTokenTags::initializeClass, &a0))
                        {
                            OBJ_CALL(result = self->object.maxFrequency(a0));
                            return j2p(result);
                        }

                        PyErr_SetArgsError((PyObject *) self, "maxFrequency", arg);
                        return NULL;
                    }

                    static PyObject *t_IceMorphy_morphoAnalysis(t_IceMorphy *self)
                    {
                        OBJ_CALL(self->object.morphoAnalysis());
                        Py_RETURN_NONE;
                    }

                    static PyObject *t_IceMorphy_morphoAnalysisSuffix(t_IceMorphy *self, PyObject *args)
                    {
                        ::is::iclt::icenlp::core::tokenizer::IceTokenTags a0((jobject) NULL);
                        jboolean a1;
                        jboolean result;

                        if (!parseArgs(args, "kZ", ::is::iclt::icenlp::core::tokenizer::IceTokenTags::initializeClass, &a0, &a1))
                        {
                            OBJ_CALL(result = self->object.morphoAnalysisSuffix(a0, a1));
                            Py_RETURN_BOOL(result);
                        }

                        PyErr_SetArgsError((PyObject *) self, "morphoAnalysisSuffix", args);
                        return NULL;
                    }

                    static PyObject *t_IceMorphy_morphoAnalysisToken(t_IceMorphy *self, PyObject *args)
                    {
                        ::is::iclt::icenlp::core::tokenizer::IceTokenTags a0((jobject) NULL);
                        ::is::iclt::icenlp::core::tokenizer::IceTokenTags a1((jobject) NULL);
                        jboolean result;

                        if (!parseArgs(args, "kk", ::is::iclt::icenlp::core::tokenizer::IceTokenTags::initializeClass, ::is::iclt::icenlp::core::tokenizer::IceTokenTags::initializeClass, &a0, &a1))
                        {
                            OBJ_CALL(result = self->object.morphoAnalysisToken(a0, a1));
                            Py_RETURN_BOOL(result);
                        }

                        PyErr_SetArgsError((PyObject *) self, "morphoAnalysisToken", args);
                        return NULL;
                    }

                    static PyObject *t_IceMorphy_numberAnalysis(t_IceMorphy *self, PyObject *arg)
                    {
                        ::is::iclt::icenlp::core::tokenizer::IceTokenTags a0((jobject) NULL);
                        jboolean result;

                        if (!parseArg(arg, "k", ::is::iclt::icenlp::core::tokenizer::IceTokenTags::initializeClass, &a0))
                        {
                            OBJ_CALL(result = self->object.numberAnalysis(a0));
                            Py_RETURN_BOOL(result);
                        }

                        PyErr_SetArgsError((PyObject *) self, "numberAnalysis", arg);
                        return NULL;
                    }

                    static PyObject *t_IceMorphy_setTokens(t_IceMorphy *self, PyObject *arg)
                    {
                        ::java::util::ArrayList a0((jobject) NULL);
                        PyTypeObject **p0;

                        if (!parseArg(arg, "K", ::java::util::ArrayList::initializeClass, &a0, &p0, ::java::util::t_ArrayList::parameters_))
                        {
                            OBJ_CALL(self->object.setTokens(a0));
                            Py_RETURN_NONE;
                        }

                        PyErr_SetArgsError((PyObject *) self, "setTokens", arg);
                        return NULL;
                    }

                    static PyObject *t_IceMorphy_verbAnalysis(t_IceMorphy *self, PyObject *args)
                    {
                        ::is::iclt::icenlp::core::tokenizer::IceTokenTags a0((jobject) NULL);
                        ::is::iclt::icenlp::core::tokenizer::IceTokenTags a1((jobject) NULL);
                        jboolean result;

                        if (!parseArgs(args, "kk", ::is::iclt::icenlp::core::tokenizer::IceTokenTags::initializeClass, ::is::iclt::icenlp::core::tokenizer::IceTokenTags::initializeClass, &a0, &a1))
                        {
                            OBJ_CALL(result = self->object.verbAnalysis(a0, a1));
                            Py_RETURN_BOOL(result);
                        }

                        PyErr_SetArgsError((PyObject *) self, "verbAnalysis", args);
                        return NULL;
                    }

                    static PyObject *t_IceMorphy_verbFiniteAnalysis(t_IceMorphy *self, PyObject *arg)
                    {
                        ::is::iclt::icenlp::core::tokenizer::IceTokenTags a0((jobject) NULL);
                        jboolean result;

                        if (!parseArg(arg, "k", ::is::iclt::icenlp::core::tokenizer::IceTokenTags::initializeClass, &a0))
                        {
                            OBJ_CALL(result = self->object.verbFiniteAnalysis(a0));
                            Py_RETURN_BOOL(result);
                        }

                        PyErr_SetArgsError((PyObject *) self, "verbFiniteAnalysis", arg);
                        return NULL;
                    }

                    static PyObject *t_IceMorphy_verbInfinitiveAnalysis(t_IceMorphy *self, PyObject *arg)
                    {
                        ::is::iclt::icenlp::core::tokenizer::IceTokenTags a0((jobject) NULL);
                        jboolean result;

                        if (!parseArg(arg, "k", ::is::iclt::icenlp::core::tokenizer::IceTokenTags::initializeClass, &a0))
                        {
                            OBJ_CALL(result = self->object.verbInfinitiveAnalysis(a0));
                            Py_RETURN_BOOL(result);
                        }

                        PyErr_SetArgsError((PyObject *) self, "verbInfinitiveAnalysis", arg);
                        return NULL;
                    }

                    static PyObject *t_IceMorphy_verbInfinitiveOrPresentParticpleOnly(t_IceMorphy *self, PyObject *args)
                    {
                        ::is::iclt::icenlp::core::tokenizer::IceTokenTags a0((jobject) NULL);
                        ::is::iclt::icenlp::core::tokenizer::IceTokenTags a1((jobject) NULL);
                        jboolean result;

                        if (!parseArgs(args, "kk", ::is::iclt::icenlp::core::tokenizer::IceTokenTags::initializeClass, ::is::iclt::icenlp::core::tokenizer::IceTokenTags::initializeClass, &a0, &a1))
                        {
                            OBJ_CALL(result = self->object.verbInfinitiveOrPresentParticpleOnly(a0, a1));
                            Py_RETURN_BOOL(result);
                        }

                        PyErr_SetArgsError((PyObject *) self, "verbInfinitiveOrPresentParticpleOnly", args);
                        return NULL;
                    }

                    static PyObject *t_IceMorphy_verbPastParticipleAnalysis(t_IceMorphy *self, PyObject *arg)
                    {
                        ::is::iclt::icenlp::core::tokenizer::IceTokenTags a0((jobject) NULL);
                        jboolean result;

                        if (!parseArg(arg, "k", ::is::iclt::icenlp::core::tokenizer::IceTokenTags::initializeClass, &a0))
                        {
                            OBJ_CALL(result = self->object.verbPastParticipleAnalysis(a0));
                            Py_RETURN_BOOL(result);
                        }

                        PyErr_SetArgsError((PyObject *) self, "verbPastParticipleAnalysis", arg);
                        return NULL;
                    }

                    static int t_IceMorphy_set__tokens(t_IceMorphy *self, PyObject *arg, void *data)
                    {
                        {
                            ::java::util::ArrayList value((jobject) NULL);
                            if (!parseArg(arg, "k", ::java::util::ArrayList::initializeClass, &value))
                            {
                                INT_CALL(self->object.setTokens(value));
                                return 0;
                            }
                        }
                        PyErr_SetArgsError((PyObject *) self, "tokens", arg);
                        return -1;
                    }
                }
            }
        }
    }
}
#include <jni.h>
#include "JCCEnv.h"
#include "is/iclt/icenlp/core/utils/IceTag$WordClass.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace is {
    namespace iclt {
        namespace icenlp {
            namespace core {
                namespace utils {

                    ::java::lang::Class *IceTag$WordClass::class$ = NULL;
                    jmethodID *IceTag$WordClass::mids$ = NULL;
                    IceTag$WordClass *IceTag$WordClass::wcAdj = NULL;
                    IceTag$WordClass *IceTag$WordClass::wcAdverb = NULL;
                    IceTag$WordClass *IceTag$WordClass::wcArticle = NULL;
                    IceTag$WordClass *IceTag$WordClass::wcConj = NULL;
                    IceTag$WordClass *IceTag$WordClass::wcConjRel = NULL;
                    IceTag$WordClass *IceTag$WordClass::wcDemPronoun = NULL;
                    IceTag$WordClass *IceTag$WordClass::wcExcl = NULL;
                    IceTag$WordClass *IceTag$WordClass::wcForeign = NULL;
                    IceTag$WordClass *IceTag$WordClass::wcIndefPronoun = NULL;
                    IceTag$WordClass *IceTag$WordClass::wcInf = NULL;
                    IceTag$WordClass *IceTag$WordClass::wcIntPronoun = NULL;
                    IceTag$WordClass *IceTag$WordClass::wcNoun = NULL;
                    IceTag$WordClass *IceTag$WordClass::wcNumeral = NULL;
                    IceTag$WordClass *IceTag$WordClass::wcPersPronoun = NULL;
                    IceTag$WordClass *IceTag$WordClass::wcPossPronoun = NULL;
                    IceTag$WordClass *IceTag$WordClass::wcPrep = NULL;
                    IceTag$WordClass *IceTag$WordClass::wcPronoun = NULL;
                    IceTag$WordClass *IceTag$WordClass::wcProperNoun = NULL;
                    IceTag$WordClass *IceTag$WordClass::wcPunct = NULL;
                    IceTag$WordClass *IceTag$WordClass::wcReflPronoun = NULL;
                    IceTag$WordClass *IceTag$WordClass::wcRelativePronoun = NULL;
                    IceTag$WordClass *IceTag$WordClass::wcUndef = NULL;
                    IceTag$WordClass *IceTag$WordClass::wcVerb = NULL;
                    IceTag$WordClass *IceTag$WordClass::wcVerbInf = NULL;
                    IceTag$WordClass *IceTag$WordClass::wcVerbPastPart = NULL;

                    jclass IceTag$WordClass::initializeClass()
                    {
                        if (!class$)
                        {

                            jclass cls = (jclass) env->findClass("is/iclt/icenlp/core/utils/IceTag$WordClass");

                            mids$ = new jmethodID[max_mid];
                            mids$[mid_valueOf_0c08f7cb] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;)Lis/iclt/icenlp/core/utils/IceTag$WordClass;");
                            mids$[mid_values_6cfe09b9] = env->getStaticMethodID(cls, "values", "()[Lis/iclt/icenlp/core/utils/IceTag$WordClass;");

                            class$ = (::java::lang::Class *) new JObject(cls);
                            cls = (jclass) class$->this$;

                            wcAdj = new IceTag$WordClass(env->getStaticObjectField(cls, "wcAdj", "Lis/iclt/icenlp/core/utils/IceTag$WordClass;"));
                            wcAdverb = new IceTag$WordClass(env->getStaticObjectField(cls, "wcAdverb", "Lis/iclt/icenlp/core/utils/IceTag$WordClass;"));
                            wcArticle = new IceTag$WordClass(env->getStaticObjectField(cls, "wcArticle", "Lis/iclt/icenlp/core/utils/IceTag$WordClass;"));
                            wcConj = new IceTag$WordClass(env->getStaticObjectField(cls, "wcConj", "Lis/iclt/icenlp/core/utils/IceTag$WordClass;"));
                            wcConjRel = new IceTag$WordClass(env->getStaticObjectField(cls, "wcConjRel", "Lis/iclt/icenlp/core/utils/IceTag$WordClass;"));
                            wcDemPronoun = new IceTag$WordClass(env->getStaticObjectField(cls, "wcDemPronoun", "Lis/iclt/icenlp/core/utils/IceTag$WordClass;"));
                            wcExcl = new IceTag$WordClass(env->getStaticObjectField(cls, "wcExcl", "Lis/iclt/icenlp/core/utils/IceTag$WordClass;"));
                            wcForeign = new IceTag$WordClass(env->getStaticObjectField(cls, "wcForeign", "Lis/iclt/icenlp/core/utils/IceTag$WordClass;"));
                            wcIndefPronoun = new IceTag$WordClass(env->getStaticObjectField(cls, "wcIndefPronoun", "Lis/iclt/icenlp/core/utils/IceTag$WordClass;"));
                            wcInf = new IceTag$WordClass(env->getStaticObjectField(cls, "wcInf", "Lis/iclt/icenlp/core/utils/IceTag$WordClass;"));
                            wcIntPronoun = new IceTag$WordClass(env->getStaticObjectField(cls, "wcIntPronoun", "Lis/iclt/icenlp/core/utils/IceTag$WordClass;"));
                            wcNoun = new IceTag$WordClass(env->getStaticObjectField(cls, "wcNoun", "Lis/iclt/icenlp/core/utils/IceTag$WordClass;"));
                            wcNumeral = new IceTag$WordClass(env->getStaticObjectField(cls, "wcNumeral", "Lis/iclt/icenlp/core/utils/IceTag$WordClass;"));
                            wcPersPronoun = new IceTag$WordClass(env->getStaticObjectField(cls, "wcPersPronoun", "Lis/iclt/icenlp/core/utils/IceTag$WordClass;"));
                            wcPossPronoun = new IceTag$WordClass(env->getStaticObjectField(cls, "wcPossPronoun", "Lis/iclt/icenlp/core/utils/IceTag$WordClass;"));
                            wcPrep = new IceTag$WordClass(env->getStaticObjectField(cls, "wcPrep", "Lis/iclt/icenlp/core/utils/IceTag$WordClass;"));
                            wcPronoun = new IceTag$WordClass(env->getStaticObjectField(cls, "wcPronoun", "Lis/iclt/icenlp/core/utils/IceTag$WordClass;"));
                            wcProperNoun = new IceTag$WordClass(env->getStaticObjectField(cls, "wcProperNoun", "Lis/iclt/icenlp/core/utils/IceTag$WordClass;"));
                            wcPunct = new IceTag$WordClass(env->getStaticObjectField(cls, "wcPunct", "Lis/iclt/icenlp/core/utils/IceTag$WordClass;"));
                            wcReflPronoun = new IceTag$WordClass(env->getStaticObjectField(cls, "wcReflPronoun", "Lis/iclt/icenlp/core/utils/IceTag$WordClass;"));
                            wcRelativePronoun = new IceTag$WordClass(env->getStaticObjectField(cls, "wcRelativePronoun", "Lis/iclt/icenlp/core/utils/IceTag$WordClass;"));
                            wcUndef = new IceTag$WordClass(env->getStaticObjectField(cls, "wcUndef", "Lis/iclt/icenlp/core/utils/IceTag$WordClass;"));
                            wcVerb = new IceTag$WordClass(env->getStaticObjectField(cls, "wcVerb", "Lis/iclt/icenlp/core/utils/IceTag$WordClass;"));
                            wcVerbInf = new IceTag$WordClass(env->getStaticObjectField(cls, "wcVerbInf", "Lis/iclt/icenlp/core/utils/IceTag$WordClass;"));
                            wcVerbPastPart = new IceTag$WordClass(env->getStaticObjectField(cls, "wcVerbPastPart", "Lis/iclt/icenlp/core/utils/IceTag$WordClass;"));
                        }
                        return (jclass) class$->this$;
                    }

                    IceTag$WordClass IceTag$WordClass::valueOf(const ::java::lang::String & a0)
                    {
                        jclass cls = initializeClass();
                        return IceTag$WordClass(env->callStaticObjectMethod(cls, mids$[mid_valueOf_0c08f7cb], a0.this$));
                    }

                    JArray< IceTag$WordClass > IceTag$WordClass::values()
                    {
                        jclass cls = initializeClass();
                        return JArray< IceTag$WordClass >(env->callStaticObjectMethod(cls, mids$[mid_values_6cfe09b9]));
                    }
                }
            }
        }
    }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace is {
    namespace iclt {
        namespace icenlp {
            namespace core {
                namespace utils {
                    static PyObject *t_IceTag$WordClass_cast_(PyTypeObject *type, PyObject *arg);
                    static PyObject *t_IceTag$WordClass_instance_(PyTypeObject *type, PyObject *arg);
                    static PyObject *t_IceTag$WordClass_valueOf(PyTypeObject *type, PyObject *args);
                    static PyObject *t_IceTag$WordClass_values(PyTypeObject *type);

                    static PyMethodDef t_IceTag$WordClass__methods_[] = {
                        DECLARE_METHOD(t_IceTag$WordClass, cast_, METH_O | METH_CLASS),
                        DECLARE_METHOD(t_IceTag$WordClass, instance_, METH_O | METH_CLASS),
                        DECLARE_METHOD(t_IceTag$WordClass, valueOf, METH_VARARGS | METH_CLASS),
                        DECLARE_METHOD(t_IceTag$WordClass, values, METH_NOARGS | METH_CLASS),
                        { NULL, NULL, 0, NULL }
                    };

                    DECLARE_TYPE(IceTag$WordClass, t_IceTag$WordClass, ::java::lang::Enum, IceTag$WordClass, abstract_init, 0, 0, 0, 0, 0);

                    void t_IceTag$WordClass::install(PyObject *module)
                    {
                        installType(&PY_TYPE(IceTag$WordClass), module, "IceTag$WordClass", 0);
                    }

                    void t_IceTag$WordClass::initialize(PyObject *module)
                    {
                        PyDict_SetItemString(PY_TYPE(IceTag$WordClass).tp_dict, "class_", make_descriptor(IceTag$WordClass::initializeClass, 1));
                        PyDict_SetItemString(PY_TYPE(IceTag$WordClass).tp_dict, "wrapfn_", make_descriptor(t_IceTag$WordClass::wrap_jobject));
                        PyDict_SetItemString(PY_TYPE(IceTag$WordClass).tp_dict, "boxfn_", make_descriptor(boxObject));
                        IceTag$WordClass::initializeClass();
                        PyDict_SetItemString(PY_TYPE(IceTag$WordClass).tp_dict, "wcAdj", make_descriptor(t_IceTag$WordClass::wrap_Object(*IceTag$WordClass::wcAdj)));
                        PyDict_SetItemString(PY_TYPE(IceTag$WordClass).tp_dict, "wcAdverb", make_descriptor(t_IceTag$WordClass::wrap_Object(*IceTag$WordClass::wcAdverb)));
                        PyDict_SetItemString(PY_TYPE(IceTag$WordClass).tp_dict, "wcArticle", make_descriptor(t_IceTag$WordClass::wrap_Object(*IceTag$WordClass::wcArticle)));
                        PyDict_SetItemString(PY_TYPE(IceTag$WordClass).tp_dict, "wcConj", make_descriptor(t_IceTag$WordClass::wrap_Object(*IceTag$WordClass::wcConj)));
                        PyDict_SetItemString(PY_TYPE(IceTag$WordClass).tp_dict, "wcConjRel", make_descriptor(t_IceTag$WordClass::wrap_Object(*IceTag$WordClass::wcConjRel)));
                        PyDict_SetItemString(PY_TYPE(IceTag$WordClass).tp_dict, "wcDemPronoun", make_descriptor(t_IceTag$WordClass::wrap_Object(*IceTag$WordClass::wcDemPronoun)));
                        PyDict_SetItemString(PY_TYPE(IceTag$WordClass).tp_dict, "wcExcl", make_descriptor(t_IceTag$WordClass::wrap_Object(*IceTag$WordClass::wcExcl)));
                        PyDict_SetItemString(PY_TYPE(IceTag$WordClass).tp_dict, "wcForeign", make_descriptor(t_IceTag$WordClass::wrap_Object(*IceTag$WordClass::wcForeign)));
                        PyDict_SetItemString(PY_TYPE(IceTag$WordClass).tp_dict, "wcIndefPronoun", make_descriptor(t_IceTag$WordClass::wrap_Object(*IceTag$WordClass::wcIndefPronoun)));
                        PyDict_SetItemString(PY_TYPE(IceTag$WordClass).tp_dict, "wcInf", make_descriptor(t_IceTag$WordClass::wrap_Object(*IceTag$WordClass::wcInf)));
                        PyDict_SetItemString(PY_TYPE(IceTag$WordClass).tp_dict, "wcIntPronoun", make_descriptor(t_IceTag$WordClass::wrap_Object(*IceTag$WordClass::wcIntPronoun)));
                        PyDict_SetItemString(PY_TYPE(IceTag$WordClass).tp_dict, "wcNoun", make_descriptor(t_IceTag$WordClass::wrap_Object(*IceTag$WordClass::wcNoun)));
                        PyDict_SetItemString(PY_TYPE(IceTag$WordClass).tp_dict, "wcNumeral", make_descriptor(t_IceTag$WordClass::wrap_Object(*IceTag$WordClass::wcNumeral)));
                        PyDict_SetItemString(PY_TYPE(IceTag$WordClass).tp_dict, "wcPersPronoun", make_descriptor(t_IceTag$WordClass::wrap_Object(*IceTag$WordClass::wcPersPronoun)));
                        PyDict_SetItemString(PY_TYPE(IceTag$WordClass).tp_dict, "wcPossPronoun", make_descriptor(t_IceTag$WordClass::wrap_Object(*IceTag$WordClass::wcPossPronoun)));
                        PyDict_SetItemString(PY_TYPE(IceTag$WordClass).tp_dict, "wcPrep", make_descriptor(t_IceTag$WordClass::wrap_Object(*IceTag$WordClass::wcPrep)));
                        PyDict_SetItemString(PY_TYPE(IceTag$WordClass).tp_dict, "wcPronoun", make_descriptor(t_IceTag$WordClass::wrap_Object(*IceTag$WordClass::wcPronoun)));
                        PyDict_SetItemString(PY_TYPE(IceTag$WordClass).tp_dict, "wcProperNoun", make_descriptor(t_IceTag$WordClass::wrap_Object(*IceTag$WordClass::wcProperNoun)));
                        PyDict_SetItemString(PY_TYPE(IceTag$WordClass).tp_dict, "wcPunct", make_descriptor(t_IceTag$WordClass::wrap_Object(*IceTag$WordClass::wcPunct)));
                        PyDict_SetItemString(PY_TYPE(IceTag$WordClass).tp_dict, "wcReflPronoun", make_descriptor(t_IceTag$WordClass::wrap_Object(*IceTag$WordClass::wcReflPronoun)));
                        PyDict_SetItemString(PY_TYPE(IceTag$WordClass).tp_dict, "wcRelativePronoun", make_descriptor(t_IceTag$WordClass::wrap_Object(*IceTag$WordClass::wcRelativePronoun)));
                        PyDict_SetItemString(PY_TYPE(IceTag$WordClass).tp_dict, "wcUndef", make_descriptor(t_IceTag$WordClass::wrap_Object(*IceTag$WordClass::wcUndef)));
                        PyDict_SetItemString(PY_TYPE(IceTag$WordClass).tp_dict, "wcVerb", make_descriptor(t_IceTag$WordClass::wrap_Object(*IceTag$WordClass::wcVerb)));
                        PyDict_SetItemString(PY_TYPE(IceTag$WordClass).tp_dict, "wcVerbInf", make_descriptor(t_IceTag$WordClass::wrap_Object(*IceTag$WordClass::wcVerbInf)));
                        PyDict_SetItemString(PY_TYPE(IceTag$WordClass).tp_dict, "wcVerbPastPart", make_descriptor(t_IceTag$WordClass::wrap_Object(*IceTag$WordClass::wcVerbPastPart)));
                    }

                    static PyObject *t_IceTag$WordClass_cast_(PyTypeObject *type, PyObject *arg)
                    {
                        if (!(arg = castCheck(arg, IceTag$WordClass::initializeClass, 1)))
                            return NULL;
                        return t_IceTag$WordClass::wrap_Object(IceTag$WordClass(((t_IceTag$WordClass *) arg)->object.this$));
                    }
                    static PyObject *t_IceTag$WordClass_instance_(PyTypeObject *type, PyObject *arg)
                    {
                        if (!castCheck(arg, IceTag$WordClass::initializeClass, 0))
                            Py_RETURN_FALSE;
                        Py_RETURN_TRUE;
                    }

                    static PyObject *t_IceTag$WordClass_valueOf(PyTypeObject *type, PyObject *args)
                    {
                        ::java::lang::String a0((jobject) NULL);
                        IceTag$WordClass result((jobject) NULL);

                        if (!parseArgs(args, "s", &a0))
                        {
                            OBJ_CALL(result = ::is::iclt::icenlp::core::utils::IceTag$WordClass::valueOf(a0));
                            return t_IceTag$WordClass::wrap_Object(result);
                        }

                        return callSuper(type, "valueOf", args, 2);
                    }

                    static PyObject *t_IceTag$WordClass_values(PyTypeObject *type)
                    {
                        JArray< IceTag$WordClass > result((jobject) NULL);
                        OBJ_CALL(result = ::is::iclt::icenlp::core::utils::IceTag$WordClass::values());
                        return JArray<jobject>(result.this$).wrap(t_IceTag$WordClass::wrap_jobject);
                    }
                }
            }
        }
    }
}
#include <jni.h>
#include "JCCEnv.h"
#include "is/iclt/icenlp/facade/IceNLPTest.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace is {
    namespace iclt {
        namespace icenlp {
            namespace facade {

                ::java::lang::Class *IceNLPTest::class$ = NULL;
                jmethodID *IceNLPTest::mids$ = NULL;

                jclass IceNLPTest::initializeClass()
                {
                    if (!class$)
                    {

                        jclass cls = (jclass) env->findClass("is/iclt/icenlp/facade/IceNLPTest");

                        mids$ = new jmethodID[max_mid];
                        mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                        mids$[mid_main_4dd4540c] = env->getStaticMethodID(cls, "main", "([Ljava/lang/String;)V");

                        class$ = (::java::lang::Class *) new JObject(cls);
                    }
                    return (jclass) class$->this$;
                }

                IceNLPTest::IceNLPTest() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

                void IceNLPTest::main(const JArray< ::java::lang::String > & a0)
                {
                    jclass cls = initializeClass();
                    env->callStaticVoidMethod(cls, mids$[mid_main_4dd4540c], a0.this$);
                }
            }
        }
    }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace is {
    namespace iclt {
        namespace icenlp {
            namespace facade {
                static PyObject *t_IceNLPTest_cast_(PyTypeObject *type, PyObject *arg);
                static PyObject *t_IceNLPTest_instance_(PyTypeObject *type, PyObject *arg);
                static int t_IceNLPTest_init_(t_IceNLPTest *self, PyObject *args, PyObject *kwds);
                static PyObject *t_IceNLPTest_main(PyTypeObject *type, PyObject *arg);

                static PyMethodDef t_IceNLPTest__methods_[] = {
                    DECLARE_METHOD(t_IceNLPTest, cast_, METH_O | METH_CLASS),
                    DECLARE_METHOD(t_IceNLPTest, instance_, METH_O | METH_CLASS),
                    DECLARE_METHOD(t_IceNLPTest, main, METH_O | METH_CLASS),
                    { NULL, NULL, 0, NULL }
                };

                DECLARE_TYPE(IceNLPTest, t_IceNLPTest, ::java::lang::Object, IceNLPTest, t_IceNLPTest_init_, 0, 0, 0, 0, 0);

                void t_IceNLPTest::install(PyObject *module)
                {
                    installType(&PY_TYPE(IceNLPTest), module, "IceNLPTest", 0);
                }

                void t_IceNLPTest::initialize(PyObject *module)
                {
                    PyDict_SetItemString(PY_TYPE(IceNLPTest).tp_dict, "class_", make_descriptor(IceNLPTest::initializeClass, 1));
                    PyDict_SetItemString(PY_TYPE(IceNLPTest).tp_dict, "wrapfn_", make_descriptor(t_IceNLPTest::wrap_jobject));
                    PyDict_SetItemString(PY_TYPE(IceNLPTest).tp_dict, "boxfn_", make_descriptor(boxObject));
                }

                static PyObject *t_IceNLPTest_cast_(PyTypeObject *type, PyObject *arg)
                {
                    if (!(arg = castCheck(arg, IceNLPTest::initializeClass, 1)))
                        return NULL;
                    return t_IceNLPTest::wrap_Object(IceNLPTest(((t_IceNLPTest *) arg)->object.this$));
                }
                static PyObject *t_IceNLPTest_instance_(PyTypeObject *type, PyObject *arg)
                {
                    if (!castCheck(arg, IceNLPTest::initializeClass, 0))
                        Py_RETURN_FALSE;
                    Py_RETURN_TRUE;
                }

                static int t_IceNLPTest_init_(t_IceNLPTest *self, PyObject *args, PyObject *kwds)
                {
                    IceNLPTest object((jobject) NULL);

                    INT_CALL(object = IceNLPTest());
                    self->object = object;

                    return 0;
                }

                static PyObject *t_IceNLPTest_main(PyTypeObject *type, PyObject *arg)
                {
                    JArray< ::java::lang::String > a0((jobject) NULL);

                    if (!parseArg(arg, "[s", &a0))
                    {
                        OBJ_CALL(::is::iclt::icenlp::facade::IceNLPTest::main(a0));
                        Py_RETURN_NONE;
                    }

                    PyErr_SetArgsError(type, "main", arg);
                    return NULL;
                }
            }
        }
    }
}
#include <jni.h>
#include "JCCEnv.h"
#include "is/iclt/icenlp/core/tokenizer/Token.h"
#include "is/iclt/icenlp/core/tokenizer/Token$TokenCode.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "is/iclt/icenlp/core/tokenizer/Token$MWECode.h"
#include "JArray.h"

namespace is {
    namespace iclt {
        namespace icenlp {
            namespace core {
                namespace tokenizer {

                    ::java::lang::Class *Token::class$ = NULL;
                    jmethodID *Token::mids$ = NULL;
                    jfieldID *Token::fids$ = NULL;

                    jclass Token::initializeClass()
                    {
                        if (!class$)
                        {

                            jclass cls = (jclass) env->findClass("is/iclt/icenlp/core/tokenizer/Token");

                            mids$ = new jmethodID[max_mid];
                            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                            mids$[mid_init$_7f9b69a7] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Lis/iclt/icenlp/core/tokenizer/Token$TokenCode;)V");
                            mids$[mid_isEOS_54c6a16a] = env->getMethodID(cls, "isEOS", "()Z");
                            mids$[mid_isMultiWord_54c6a16a] = env->getMethodID(cls, "isMultiWord", "()Z");
                            mids$[mid_isPunctuation_54c6a16a] = env->getMethodID(cls, "isPunctuation", "()Z");
                            mids$[mid_isQuote_54c6a16a] = env->getMethodID(cls, "isQuote", "()Z");
                            mids$[mid_isUnknown_54c6a16a] = env->getMethodID(cls, "isUnknown", "()Z");
                            mids$[mid_splitLexeme_1f6a174f] = env->getMethodID(cls, "splitLexeme", "(Ljava/lang/String;)[Ljava/lang/String;");
                            mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
                            mids$[mid_toStringWithCode_14c7b5c5] = env->getMethodID(cls, "toStringWithCode", "()Ljava/lang/String;");

                            fids$ = new jfieldID[max_fid];
                            fids$[fid_lexeme] = env->getFieldID(cls, "lexeme", "Ljava/lang/String;");
                            fids$[fid_mweCode] = env->getFieldID(cls, "mweCode", "Lis/iclt/icenlp/core/tokenizer/Token$MWECode;");
                            fids$[fid_tokenCode] = env->getFieldID(cls, "tokenCode", "Lis/iclt/icenlp/core/tokenizer/Token$TokenCode;");

                            class$ = (::java::lang::Class *) new JObject(cls);
                        }
                        return (jclass) class$->this$;
                    }

                    Token::Token() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

                    Token::Token(const ::java::lang::String & a0, const ::is::iclt::icenlp::core::tokenizer::Token$TokenCode & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_7f9b69a7, a0.this$, a1.this$)) {}

                    jboolean Token::isEOS() const
                    {
                        return env->callBooleanMethod(this$, mids$[mid_isEOS_54c6a16a]);
                    }

                    jboolean Token::isMultiWord() const
                    {
                        return env->callBooleanMethod(this$, mids$[mid_isMultiWord_54c6a16a]);
                    }

                    jboolean Token::isPunctuation() const
                    {
                        return env->callBooleanMethod(this$, mids$[mid_isPunctuation_54c6a16a]);
                    }

                    jboolean Token::isQuote() const
                    {
                        return env->callBooleanMethod(this$, mids$[mid_isQuote_54c6a16a]);
                    }

                    jboolean Token::isUnknown() const
                    {
                        return env->callBooleanMethod(this$, mids$[mid_isUnknown_54c6a16a]);
                    }

                    JArray< ::java::lang::String > Token::splitLexeme(const ::java::lang::String & a0) const
                    {
                        return JArray< ::java::lang::String >(env->callObjectMethod(this$, mids$[mid_splitLexeme_1f6a174f], a0.this$));
                    }

                    ::java::lang::String Token::toString() const
                    {
                        return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
                    }

                    ::java::lang::String Token::toStringWithCode() const
                    {
                        return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toStringWithCode_14c7b5c5]));
                    }

                    ::java::lang::String Token::_get_lexeme() const
                    {
                        return ::java::lang::String(env->getObjectField(this$, fids$[fid_lexeme]));
                    }

                    void Token::_set_lexeme(const ::java::lang::String & a0) const
                    {
                        env->setObjectField(this$, fids$[fid_lexeme], a0.this$);
                    }

                    ::is::iclt::icenlp::core::tokenizer::Token$MWECode Token::_get_mweCode() const
                    {
                        return ::is::iclt::icenlp::core::tokenizer::Token$MWECode(env->getObjectField(this$, fids$[fid_mweCode]));
                    }

                    void Token::_set_mweCode(const ::is::iclt::icenlp::core::tokenizer::Token$MWECode & a0) const
                    {
                        env->setObjectField(this$, fids$[fid_mweCode], a0.this$);
                    }

                    ::is::iclt::icenlp::core::tokenizer::Token$TokenCode Token::_get_tokenCode() const
                    {
                        return ::is::iclt::icenlp::core::tokenizer::Token$TokenCode(env->getObjectField(this$, fids$[fid_tokenCode]));
                    }

                    void Token::_set_tokenCode(const ::is::iclt::icenlp::core::tokenizer::Token$TokenCode & a0) const
                    {
                        env->setObjectField(this$, fids$[fid_tokenCode], a0.this$);
                    }
                }
            }
        }
    }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace is {
    namespace iclt {
        namespace icenlp {
            namespace core {
                namespace tokenizer {
                    static PyObject *t_Token_cast_(PyTypeObject *type, PyObject *arg);
                    static PyObject *t_Token_instance_(PyTypeObject *type, PyObject *arg);
                    static int t_Token_init_(t_Token *self, PyObject *args, PyObject *kwds);
                    static PyObject *t_Token_isEOS(t_Token *self);
                    static PyObject *t_Token_isMultiWord(t_Token *self);
                    static PyObject *t_Token_isPunctuation(t_Token *self);
                    static PyObject *t_Token_isQuote(t_Token *self);
                    static PyObject *t_Token_isUnknown(t_Token *self);
                    static PyObject *t_Token_splitLexeme(t_Token *self, PyObject *arg);
                    static PyObject *t_Token_toString(t_Token *self, PyObject *args);
                    static PyObject *t_Token_toStringWithCode(t_Token *self);
                    static PyObject *t_Token_get__lexeme(t_Token *self, void *data);
                    static int t_Token_set__lexeme(t_Token *self, PyObject *arg, void *data);
                    static PyObject *t_Token_get__mweCode(t_Token *self, void *data);
                    static int t_Token_set__mweCode(t_Token *self, PyObject *arg, void *data);
                    static PyObject *t_Token_get__tokenCode(t_Token *self, void *data);
                    static int t_Token_set__tokenCode(t_Token *self, PyObject *arg, void *data);

                    static PyObject *t_Token_get__eOS(t_Token *self, void *data);
                    static PyObject *t_Token_get__multiWord(t_Token *self, void *data);
                    static PyObject *t_Token_get__punctuation(t_Token *self, void *data);
                    static PyObject *t_Token_get__quote(t_Token *self, void *data);
                    static PyObject *t_Token_get__unknown(t_Token *self, void *data);
                    static PyGetSetDef t_Token__fields_[] = {
                        DECLARE_GETSET_FIELD(t_Token, lexeme),
                        DECLARE_GETSET_FIELD(t_Token, mweCode),
                        DECLARE_GETSET_FIELD(t_Token, tokenCode),
                        DECLARE_GET_FIELD(t_Token, eOS),
                        DECLARE_GET_FIELD(t_Token, multiWord),
                        DECLARE_GET_FIELD(t_Token, punctuation),
                        DECLARE_GET_FIELD(t_Token, quote),
                        DECLARE_GET_FIELD(t_Token, unknown),
                        { NULL, NULL, NULL, NULL, NULL }
                    };

                    static PyMethodDef t_Token__methods_[] = {
                        DECLARE_METHOD(t_Token, cast_, METH_O | METH_CLASS),
                        DECLARE_METHOD(t_Token, instance_, METH_O | METH_CLASS),
                        DECLARE_METHOD(t_Token, isEOS, METH_NOARGS),
                        DECLARE_METHOD(t_Token, isMultiWord, METH_NOARGS),
                        DECLARE_METHOD(t_Token, isPunctuation, METH_NOARGS),
                        DECLARE_METHOD(t_Token, isQuote, METH_NOARGS),
                        DECLARE_METHOD(t_Token, isUnknown, METH_NOARGS),
                        DECLARE_METHOD(t_Token, splitLexeme, METH_O),
                        DECLARE_METHOD(t_Token, toString, METH_VARARGS),
                        DECLARE_METHOD(t_Token, toStringWithCode, METH_NOARGS),
                        { NULL, NULL, 0, NULL }
                    };

                    DECLARE_TYPE(Token, t_Token, ::java::lang::Object, Token, t_Token_init_, 0, 0, t_Token__fields_, 0, 0);

                    void t_Token::install(PyObject *module)
                    {
                        installType(&PY_TYPE(Token), module, "Token", 0);
                        PyDict_SetItemString(PY_TYPE(Token).tp_dict, "MWECode", make_descriptor(&PY_TYPE(Token$MWECode)));
                        PyDict_SetItemString(PY_TYPE(Token).tp_dict, "TokenCode", make_descriptor(&PY_TYPE(Token$TokenCode)));
                    }

                    void t_Token::initialize(PyObject *module)
                    {
                        PyDict_SetItemString(PY_TYPE(Token).tp_dict, "class_", make_descriptor(Token::initializeClass, 1));
                        PyDict_SetItemString(PY_TYPE(Token).tp_dict, "wrapfn_", make_descriptor(t_Token::wrap_jobject));
                        PyDict_SetItemString(PY_TYPE(Token).tp_dict, "boxfn_", make_descriptor(boxObject));
                    }

                    static PyObject *t_Token_cast_(PyTypeObject *type, PyObject *arg)
                    {
                        if (!(arg = castCheck(arg, Token::initializeClass, 1)))
                            return NULL;
                        return t_Token::wrap_Object(Token(((t_Token *) arg)->object.this$));
                    }
                    static PyObject *t_Token_instance_(PyTypeObject *type, PyObject *arg)
                    {
                        if (!castCheck(arg, Token::initializeClass, 0))
                            Py_RETURN_FALSE;
                        Py_RETURN_TRUE;
                    }

                    static int t_Token_init_(t_Token *self, PyObject *args, PyObject *kwds)
                    {
                        switch (PyTuple_GET_SIZE(args)) {
                          case 0:
                            {
                                Token object((jobject) NULL);

                                INT_CALL(object = Token());
                                self->object = object;
                                break;
                            }
                            goto err;
                          case 2:
                            {
                                ::java::lang::String a0((jobject) NULL);
                                ::is::iclt::icenlp::core::tokenizer::Token$TokenCode a1((jobject) NULL);
                                Token object((jobject) NULL);

                                if (!parseArgs(args, "sk", ::is::iclt::icenlp::core::tokenizer::Token$TokenCode::initializeClass, &a0, &a1))
                                {
                                    INT_CALL(object = Token(a0, a1));
                                    self->object = object;
                                    break;
                                }
                            }
                          default:
                          err:
                            PyErr_SetArgsError((PyObject *) self, "__init__", args);
                            return -1;
                        }

                        return 0;
                    }

                    static PyObject *t_Token_isEOS(t_Token *self)
                    {
                        jboolean result;
                        OBJ_CALL(result = self->object.isEOS());
                        Py_RETURN_BOOL(result);
                    }

                    static PyObject *t_Token_isMultiWord(t_Token *self)
                    {
                        jboolean result;
                        OBJ_CALL(result = self->object.isMultiWord());
                        Py_RETURN_BOOL(result);
                    }

                    static PyObject *t_Token_isPunctuation(t_Token *self)
                    {
                        jboolean result;
                        OBJ_CALL(result = self->object.isPunctuation());
                        Py_RETURN_BOOL(result);
                    }

                    static PyObject *t_Token_isQuote(t_Token *self)
                    {
                        jboolean result;
                        OBJ_CALL(result = self->object.isQuote());
                        Py_RETURN_BOOL(result);
                    }

                    static PyObject *t_Token_isUnknown(t_Token *self)
                    {
                        jboolean result;
                        OBJ_CALL(result = self->object.isUnknown());
                        Py_RETURN_BOOL(result);
                    }

                    static PyObject *t_Token_splitLexeme(t_Token *self, PyObject *arg)
                    {
                        ::java::lang::String a0((jobject) NULL);
                        JArray< ::java::lang::String > result((jobject) NULL);

                        if (!parseArg(arg, "s", &a0))
                        {
                            OBJ_CALL(result = self->object.splitLexeme(a0));
                            return JArray<jstring>(result.this$).wrap();
                        }

                        PyErr_SetArgsError((PyObject *) self, "splitLexeme", arg);
                        return NULL;
                    }

                    static PyObject *t_Token_toString(t_Token *self, PyObject *args)
                    {
                        ::java::lang::String result((jobject) NULL);

                        if (!parseArgs(args, ""))
                        {
                            OBJ_CALL(result = self->object.toString());
                            return j2p(result);
                        }

                        return callSuper(&PY_TYPE(Token), (PyObject *) self, "toString", args, 2);
                    }

                    static PyObject *t_Token_toStringWithCode(t_Token *self)
                    {
                        ::java::lang::String result((jobject) NULL);
                        OBJ_CALL(result = self->object.toStringWithCode());
                        return j2p(result);
                    }

                    static PyObject *t_Token_get__lexeme(t_Token *self, void *data)
                    {
                        ::java::lang::String value((jobject) NULL);
                        OBJ_CALL(value = self->object._get_lexeme());
                        return j2p(value);
                    }
                    static int t_Token_set__lexeme(t_Token *self, PyObject *arg, void *data)
                    {
                        ::java::lang::String value((jobject) NULL);
                        if (!parseArg(arg, "s", &value))
                        {
                            INT_CALL(self->object._set_lexeme(value));
                            return 0;
                        }
                        PyErr_SetArgsError((PyObject *) self, "lexeme", arg);
                        return -1;
                    }

                    static PyObject *t_Token_get__mweCode(t_Token *self, void *data)
                    {
                        ::is::iclt::icenlp::core::tokenizer::Token$MWECode value((jobject) NULL);
                        OBJ_CALL(value = self->object._get_mweCode());
                        return ::is::iclt::icenlp::core::tokenizer::t_Token$MWECode::wrap_Object(value);
                    }
                    static int t_Token_set__mweCode(t_Token *self, PyObject *arg, void *data)
                    {
                        ::is::iclt::icenlp::core::tokenizer::Token$MWECode value((jobject) NULL);
                        if (!parseArg(arg, "k", ::is::iclt::icenlp::core::tokenizer::Token$MWECode::initializeClass, &value))
                        {
                            INT_CALL(self->object._set_mweCode(value));
                            return 0;
                        }
                        PyErr_SetArgsError((PyObject *) self, "mweCode", arg);
                        return -1;
                    }

                    static PyObject *t_Token_get__tokenCode(t_Token *self, void *data)
                    {
                        ::is::iclt::icenlp::core::tokenizer::Token$TokenCode value((jobject) NULL);
                        OBJ_CALL(value = self->object._get_tokenCode());
                        return ::is::iclt::icenlp::core::tokenizer::t_Token$TokenCode::wrap_Object(value);
                    }
                    static int t_Token_set__tokenCode(t_Token *self, PyObject *arg, void *data)
                    {
                        ::is::iclt::icenlp::core::tokenizer::Token$TokenCode value((jobject) NULL);
                        if (!parseArg(arg, "k", ::is::iclt::icenlp::core::tokenizer::Token$TokenCode::initializeClass, &value))
                        {
                            INT_CALL(self->object._set_tokenCode(value));
                            return 0;
                        }
                        PyErr_SetArgsError((PyObject *) self, "tokenCode", arg);
                        return -1;
                    }

                    static PyObject *t_Token_get__eOS(t_Token *self, void *data)
                    {
                        jboolean value;
                        OBJ_CALL(value = self->object.isEOS());
                        Py_RETURN_BOOL(value);
                    }

                    static PyObject *t_Token_get__multiWord(t_Token *self, void *data)
                    {
                        jboolean value;
                        OBJ_CALL(value = self->object.isMultiWord());
                        Py_RETURN_BOOL(value);
                    }

                    static PyObject *t_Token_get__punctuation(t_Token *self, void *data)
                    {
                        jboolean value;
                        OBJ_CALL(value = self->object.isPunctuation());
                        Py_RETURN_BOOL(value);
                    }

                    static PyObject *t_Token_get__quote(t_Token *self, void *data)
                    {
                        jboolean value;
                        OBJ_CALL(value = self->object.isQuote());
                        Py_RETURN_BOOL(value);
                    }

                    static PyObject *t_Token_get__unknown(t_Token *self, void *data)
                    {
                        jboolean value;
                        OBJ_CALL(value = self->object.isUnknown());
                        Py_RETURN_BOOL(value);
                    }
                }
            }
        }
    }
}
#include <jni.h>
#include "JCCEnv.h"
#include "is/iclt/icenlp/core/tritagger/TriTagger.h"
#include "java/util/ArrayList.h"
#include "is/iclt/icenlp/core/icemorphy/IceMorphy.h"
#include "is/iclt/icenlp/core/tritagger/Ngrams.h"
#include "is/iclt/icenlp/core/utils/Idioms.h"
#include "is/iclt/icenlp/core/tritagger/FreqLexicon.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace is {
    namespace iclt {
        namespace icenlp {
            namespace core {
                namespace tritagger {

                    ::java::lang::Class *TriTagger::class$ = NULL;
                    jmethodID *TriTagger::mids$ = NULL;
                    jint TriTagger::bigrams = (jint) 0;
                    jint TriTagger::sentenceStartLowerCase = (jint) 0;
                    jint TriTagger::sentenceStartUpperCase = (jint) 0;
                    jint TriTagger::trigrams = (jint) 0;

                    jclass TriTagger::initializeClass()
                    {
                        if (!class$)
                        {

                            jclass cls = (jclass) env->findClass("is/iclt/icenlp/core/tritagger/TriTagger");

                            mids$ = new jmethodID[max_mid];
                            mids$[mid_init$_dd583aec] = env->getMethodID(cls, "<init>", "(IILis/iclt/icenlp/core/tritagger/Ngrams;Lis/iclt/icenlp/core/tritagger/FreqLexicon;Lis/iclt/icenlp/core/tritagger/FreqLexicon;Lis/iclt/icenlp/core/utils/Idioms;Lis/iclt/icenlp/core/icemorphy/IceMorphy;)V");
                            mids$[mid_getNumAmbiguousTokens_54c6a179] = env->getMethodID(cls, "getNumAmbiguousTokens", "()I");
                            mids$[mid_getTotalTags_54c6a179] = env->getMethodID(cls, "getTotalTags", "()I");
                            mids$[mid_getTotalTagsAmbiguous_54c6a179] = env->getMethodID(cls, "getTotalTagsAmbiguous", "()I");
                            mids$[mid_setNgram_39c7bd3c] = env->getMethodID(cls, "setNgram", "(I)V");
                            mids$[mid_tagTokens_0a109d06] = env->getMethodID(cls, "tagTokens", "(Ljava/util/ArrayList;Z)V");

                            class$ = (::java::lang::Class *) new JObject(cls);
                            cls = (jclass) class$->this$;

                            bigrams = env->getStaticIntField(cls, "bigrams");
                            sentenceStartLowerCase = env->getStaticIntField(cls, "sentenceStartLowerCase");
                            sentenceStartUpperCase = env->getStaticIntField(cls, "sentenceStartUpperCase");
                            trigrams = env->getStaticIntField(cls, "trigrams");
                        }
                        return (jclass) class$->this$;
                    }

                    TriTagger::TriTagger(jint a0, jint a1, const ::is::iclt::icenlp::core::tritagger::Ngrams & a2, const ::is::iclt::icenlp::core::tritagger::FreqLexicon & a3, const ::is::iclt::icenlp::core::tritagger::FreqLexicon & a4, const ::is::iclt::icenlp::core::utils::Idioms & a5, const ::is::iclt::icenlp::core::icemorphy::IceMorphy & a6) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_dd583aec, a0, a1, a2.this$, a3.this$, a4.this$, a5.this$, a6.this$)) {}

                    jint TriTagger::getNumAmbiguousTokens() const
                    {
                        return env->callIntMethod(this$, mids$[mid_getNumAmbiguousTokens_54c6a179]);
                    }

                    jint TriTagger::getTotalTags() const
                    {
                        return env->callIntMethod(this$, mids$[mid_getTotalTags_54c6a179]);
                    }

                    jint TriTagger::getTotalTagsAmbiguous() const
                    {
                        return env->callIntMethod(this$, mids$[mid_getTotalTagsAmbiguous_54c6a179]);
                    }

                    void TriTagger::setNgram(jint a0) const
                    {
                        env->callVoidMethod(this$, mids$[mid_setNgram_39c7bd3c], a0);
                    }

                    void TriTagger::tagTokens(const ::java::util::ArrayList & a0, jboolean a1) const
                    {
                        env->callVoidMethod(this$, mids$[mid_tagTokens_0a109d06], a0.this$, a1);
                    }
                }
            }
        }
    }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace is {
    namespace iclt {
        namespace icenlp {
            namespace core {
                namespace tritagger {
                    static PyObject *t_TriTagger_cast_(PyTypeObject *type, PyObject *arg);
                    static PyObject *t_TriTagger_instance_(PyTypeObject *type, PyObject *arg);
                    static int t_TriTagger_init_(t_TriTagger *self, PyObject *args, PyObject *kwds);
                    static PyObject *t_TriTagger_getNumAmbiguousTokens(t_TriTagger *self);
                    static PyObject *t_TriTagger_getTotalTags(t_TriTagger *self);
                    static PyObject *t_TriTagger_getTotalTagsAmbiguous(t_TriTagger *self);
                    static PyObject *t_TriTagger_setNgram(t_TriTagger *self, PyObject *arg);
                    static PyObject *t_TriTagger_tagTokens(t_TriTagger *self, PyObject *args);
                    static int t_TriTagger_set__ngram(t_TriTagger *self, PyObject *arg, void *data);
                    static PyObject *t_TriTagger_get__numAmbiguousTokens(t_TriTagger *self, void *data);
                    static PyObject *t_TriTagger_get__totalTags(t_TriTagger *self, void *data);
                    static PyObject *t_TriTagger_get__totalTagsAmbiguous(t_TriTagger *self, void *data);
                    static PyGetSetDef t_TriTagger__fields_[] = {
                        DECLARE_SET_FIELD(t_TriTagger, ngram),
                        DECLARE_GET_FIELD(t_TriTagger, numAmbiguousTokens),
                        DECLARE_GET_FIELD(t_TriTagger, totalTags),
                        DECLARE_GET_FIELD(t_TriTagger, totalTagsAmbiguous),
                        { NULL, NULL, NULL, NULL, NULL }
                    };

                    static PyMethodDef t_TriTagger__methods_[] = {
                        DECLARE_METHOD(t_TriTagger, cast_, METH_O | METH_CLASS),
                        DECLARE_METHOD(t_TriTagger, instance_, METH_O | METH_CLASS),
                        DECLARE_METHOD(t_TriTagger, getNumAmbiguousTokens, METH_NOARGS),
                        DECLARE_METHOD(t_TriTagger, getTotalTags, METH_NOARGS),
                        DECLARE_METHOD(t_TriTagger, getTotalTagsAmbiguous, METH_NOARGS),
                        DECLARE_METHOD(t_TriTagger, setNgram, METH_O),
                        DECLARE_METHOD(t_TriTagger, tagTokens, METH_VARARGS),
                        { NULL, NULL, 0, NULL }
                    };

                    DECLARE_TYPE(TriTagger, t_TriTagger, ::java::lang::Object, TriTagger, t_TriTagger_init_, 0, 0, t_TriTagger__fields_, 0, 0);

                    void t_TriTagger::install(PyObject *module)
                    {
                        installType(&PY_TYPE(TriTagger), module, "TriTagger", 0);
                    }

                    void t_TriTagger::initialize(PyObject *module)
                    {
                        PyDict_SetItemString(PY_TYPE(TriTagger).tp_dict, "class_", make_descriptor(TriTagger::initializeClass, 1));
                        PyDict_SetItemString(PY_TYPE(TriTagger).tp_dict, "wrapfn_", make_descriptor(t_TriTagger::wrap_jobject));
                        PyDict_SetItemString(PY_TYPE(TriTagger).tp_dict, "boxfn_", make_descriptor(boxObject));
                        TriTagger::initializeClass();
                        PyDict_SetItemString(PY_TYPE(TriTagger).tp_dict, "bigrams", make_descriptor(TriTagger::bigrams));
                        PyDict_SetItemString(PY_TYPE(TriTagger).tp_dict, "sentenceStartLowerCase", make_descriptor(TriTagger::sentenceStartLowerCase));
                        PyDict_SetItemString(PY_TYPE(TriTagger).tp_dict, "sentenceStartUpperCase", make_descriptor(TriTagger::sentenceStartUpperCase));
                        PyDict_SetItemString(PY_TYPE(TriTagger).tp_dict, "trigrams", make_descriptor(TriTagger::trigrams));
                    }

                    static PyObject *t_TriTagger_cast_(PyTypeObject *type, PyObject *arg)
                    {
                        if (!(arg = castCheck(arg, TriTagger::initializeClass, 1)))
                            return NULL;
                        return t_TriTagger::wrap_Object(TriTagger(((t_TriTagger *) arg)->object.this$));
                    }
                    static PyObject *t_TriTagger_instance_(PyTypeObject *type, PyObject *arg)
                    {
                        if (!castCheck(arg, TriTagger::initializeClass, 0))
                            Py_RETURN_FALSE;
                        Py_RETURN_TRUE;
                    }

                    static int t_TriTagger_init_(t_TriTagger *self, PyObject *args, PyObject *kwds)
                    {
                        jint a0;
                        jint a1;
                        ::is::iclt::icenlp::core::tritagger::Ngrams a2((jobject) NULL);
                        ::is::iclt::icenlp::core::tritagger::FreqLexicon a3((jobject) NULL);
                        ::is::iclt::icenlp::core::tritagger::FreqLexicon a4((jobject) NULL);
                        ::is::iclt::icenlp::core::utils::Idioms a5((jobject) NULL);
                        ::is::iclt::icenlp::core::icemorphy::IceMorphy a6((jobject) NULL);
                        TriTagger object((jobject) NULL);

                        if (!parseArgs(args, "IIkkkkk", ::is::iclt::icenlp::core::tritagger::Ngrams::initializeClass, ::is::iclt::icenlp::core::tritagger::FreqLexicon::initializeClass, ::is::iclt::icenlp::core::tritagger::FreqLexicon::initializeClass, ::is::iclt::icenlp::core::utils::Idioms::initializeClass, ::is::iclt::icenlp::core::icemorphy::IceMorphy::initializeClass, &a0, &a1, &a2, &a3, &a4, &a5, &a6))
                        {
                            INT_CALL(object = TriTagger(a0, a1, a2, a3, a4, a5, a6));
                            self->object = object;
                        }
                        else
                        {
                            PyErr_SetArgsError((PyObject *) self, "__init__", args);
                            return -1;
                        }

                        return 0;
                    }

                    static PyObject *t_TriTagger_getNumAmbiguousTokens(t_TriTagger *self)
                    {
                        jint result;
                        OBJ_CALL(result = self->object.getNumAmbiguousTokens());
                        return PyInt_FromLong((long) result);
                    }

                    static PyObject *t_TriTagger_getTotalTags(t_TriTagger *self)
                    {
                        jint result;
                        OBJ_CALL(result = self->object.getTotalTags());
                        return PyInt_FromLong((long) result);
                    }

                    static PyObject *t_TriTagger_getTotalTagsAmbiguous(t_TriTagger *self)
                    {
                        jint result;
                        OBJ_CALL(result = self->object.getTotalTagsAmbiguous());
                        return PyInt_FromLong((long) result);
                    }

                    static PyObject *t_TriTagger_setNgram(t_TriTagger *self, PyObject *arg)
                    {
                        jint a0;

                        if (!parseArg(arg, "I", &a0))
                        {
                            OBJ_CALL(self->object.setNgram(a0));
                            Py_RETURN_NONE;
                        }

                        PyErr_SetArgsError((PyObject *) self, "setNgram", arg);
                        return NULL;
                    }

                    static PyObject *t_TriTagger_tagTokens(t_TriTagger *self, PyObject *args)
                    {
                        ::java::util::ArrayList a0((jobject) NULL);
                        PyTypeObject **p0;
                        jboolean a1;

                        if (!parseArgs(args, "KZ", ::java::util::ArrayList::initializeClass, &a0, &p0, ::java::util::t_ArrayList::parameters_, &a1))
                        {
                            OBJ_CALL(self->object.tagTokens(a0, a1));
                            Py_RETURN_NONE;
                        }

                        PyErr_SetArgsError((PyObject *) self, "tagTokens", args);
                        return NULL;
                    }

                    static int t_TriTagger_set__ngram(t_TriTagger *self, PyObject *arg, void *data)
                    {
                        {
                            jint value;
                            if (!parseArg(arg, "I", &value))
                            {
                                INT_CALL(self->object.setNgram(value));
                                return 0;
                            }
                        }
                        PyErr_SetArgsError((PyObject *) self, "ngram", arg);
                        return -1;
                    }

                    static PyObject *t_TriTagger_get__numAmbiguousTokens(t_TriTagger *self, void *data)
                    {
                        jint value;
                        OBJ_CALL(value = self->object.getNumAmbiguousTokens());
                        return PyInt_FromLong((long) value);
                    }

                    static PyObject *t_TriTagger_get__totalTags(t_TriTagger *self, void *data)
                    {
                        jint value;
                        OBJ_CALL(value = self->object.getTotalTags());
                        return PyInt_FromLong((long) value);
                    }

                    static PyObject *t_TriTagger_get__totalTagsAmbiguous(t_TriTagger *self, void *data)
                    {
                        jint value;
                        OBJ_CALL(value = self->object.getTotalTagsAmbiguous());
                        return PyInt_FromLong((long) value);
                    }
                }
            }
        }
    }
}
#include <jni.h>
#include "JCCEnv.h"
#include "is/iclt/icenlp/core/iceparser/Phrase_AdvP.h"
#include "java/io/IOException.h"
#include "java/io/Reader.h"
#include "java/io/Writer.h"
#include "java/lang/Class.h"
#include "java/io/InputStream.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace is {
    namespace iclt {
        namespace icenlp {
            namespace core {
                namespace iceparser {

                    ::java::lang::Class *Phrase_AdvP::class$ = NULL;
                    jmethodID *Phrase_AdvP::mids$ = NULL;
                    jint Phrase_AdvP::YYEOF = (jint) 0;
                    jint Phrase_AdvP::YYINITIAL = (jint) 0;

                    jclass Phrase_AdvP::initializeClass()
                    {
                        if (!class$)
                        {

                            jclass cls = (jclass) env->findClass("is/iclt/icenlp/core/iceparser/Phrase_AdvP");

                            mids$ = new jmethodID[max_mid];
                            mids$[mid_init$_cf2e3c10] = env->getMethodID(cls, "<init>", "(Ljava/io/Reader;)V");
                            mids$[mid_init$_be2e4f90] = env->getMethodID(cls, "<init>", "(Ljava/io/InputStream;)V");
                            mids$[mid_main_4dd4540c] = env->getStaticMethodID(cls, "main", "([Ljava/lang/String;)V");
                            mids$[mid_parse_5bcd5850] = env->getMethodID(cls, "parse", "(Ljava/io/Writer;)V");
                            mids$[mid_yybegin_39c7bd3c] = env->getMethodID(cls, "yybegin", "(I)V");
                            mids$[mid_yycharat_39c7bd29] = env->getMethodID(cls, "yycharat", "(I)C");
                            mids$[mid_yyclose_54c6a166] = env->getMethodID(cls, "yyclose", "()V");
                            mids$[mid_yylength_54c6a179] = env->getMethodID(cls, "yylength", "()I");
                            mids$[mid_yylex_54c6a179] = env->getMethodID(cls, "yylex", "()I");
                            mids$[mid_yypushback_39c7bd3c] = env->getMethodID(cls, "yypushback", "(I)V");
                            mids$[mid_yyreset_cf2e3c10] = env->getMethodID(cls, "yyreset", "(Ljava/io/Reader;)V");
                            mids$[mid_yystate_54c6a179] = env->getMethodID(cls, "yystate", "()I");
                            mids$[mid_yytext_14c7b5c5] = env->getMethodID(cls, "yytext", "()Ljava/lang/String;");

                            class$ = (::java::lang::Class *) new JObject(cls);
                            cls = (jclass) class$->this$;

                            YYEOF = env->getStaticIntField(cls, "YYEOF");
                            YYINITIAL = env->getStaticIntField(cls, "YYINITIAL");
                        }
                        return (jclass) class$->this$;
                    }

                    Phrase_AdvP::Phrase_AdvP(const ::java::io::Reader & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_cf2e3c10, a0.this$)) {}

                    Phrase_AdvP::Phrase_AdvP(const ::java::io::InputStream & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_be2e4f90, a0.this$)) {}

                    void Phrase_AdvP::main(const JArray< ::java::lang::String > & a0)
                    {
                        jclass cls = initializeClass();
                        env->callStaticVoidMethod(cls, mids$[mid_main_4dd4540c], a0.this$);
                    }

                    void Phrase_AdvP::parse(const ::java::io::Writer & a0) const
                    {
                        env->callVoidMethod(this$, mids$[mid_parse_5bcd5850], a0.this$);
                    }

                    void Phrase_AdvP::yybegin(jint a0) const
                    {
                        env->callVoidMethod(this$, mids$[mid_yybegin_39c7bd3c], a0);
                    }

                    jchar Phrase_AdvP::yycharat(jint a0) const
                    {
                        return env->callCharMethod(this$, mids$[mid_yycharat_39c7bd29], a0);
                    }

                    void Phrase_AdvP::yyclose() const
                    {
                        env->callVoidMethod(this$, mids$[mid_yyclose_54c6a166]);
                    }

                    jint Phrase_AdvP::yylength() const
                    {
                        return env->callIntMethod(this$, mids$[mid_yylength_54c6a179]);
                    }

                    jint Phrase_AdvP::yylex() const
                    {
                        return env->callIntMethod(this$, mids$[mid_yylex_54c6a179]);
                    }

                    void Phrase_AdvP::yypushback(jint a0) const
                    {
                        env->callVoidMethod(this$, mids$[mid_yypushback_39c7bd3c], a0);
                    }

                    void Phrase_AdvP::yyreset(const ::java::io::Reader & a0) const
                    {
                        env->callVoidMethod(this$, mids$[mid_yyreset_cf2e3c10], a0.this$);
                    }

                    jint Phrase_AdvP::yystate() const
                    {
                        return env->callIntMethod(this$, mids$[mid_yystate_54c6a179]);
                    }

                    ::java::lang::String Phrase_AdvP::yytext() const
                    {
                        return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_yytext_14c7b5c5]));
                    }
                }
            }
        }
    }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace is {
    namespace iclt {
        namespace icenlp {
            namespace core {
                namespace iceparser {
                    static PyObject *t_Phrase_AdvP_cast_(PyTypeObject *type, PyObject *arg);
                    static PyObject *t_Phrase_AdvP_instance_(PyTypeObject *type, PyObject *arg);
                    static int t_Phrase_AdvP_init_(t_Phrase_AdvP *self, PyObject *args, PyObject *kwds);
                    static PyObject *t_Phrase_AdvP_main(PyTypeObject *type, PyObject *arg);
                    static PyObject *t_Phrase_AdvP_parse(t_Phrase_AdvP *self, PyObject *arg);
                    static PyObject *t_Phrase_AdvP_yybegin(t_Phrase_AdvP *self, PyObject *arg);
                    static PyObject *t_Phrase_AdvP_yycharat(t_Phrase_AdvP *self, PyObject *arg);
                    static PyObject *t_Phrase_AdvP_yyclose(t_Phrase_AdvP *self);
                    static PyObject *t_Phrase_AdvP_yylength(t_Phrase_AdvP *self);
                    static PyObject *t_Phrase_AdvP_yylex(t_Phrase_AdvP *self);
                    static PyObject *t_Phrase_AdvP_yypushback(t_Phrase_AdvP *self, PyObject *arg);
                    static PyObject *t_Phrase_AdvP_yyreset(t_Phrase_AdvP *self, PyObject *arg);
                    static PyObject *t_Phrase_AdvP_yystate(t_Phrase_AdvP *self);
                    static PyObject *t_Phrase_AdvP_yytext(t_Phrase_AdvP *self);

                    static PyMethodDef t_Phrase_AdvP__methods_[] = {
                        DECLARE_METHOD(t_Phrase_AdvP, cast_, METH_O | METH_CLASS),
                        DECLARE_METHOD(t_Phrase_AdvP, instance_, METH_O | METH_CLASS),
                        DECLARE_METHOD(t_Phrase_AdvP, main, METH_O | METH_CLASS),
                        DECLARE_METHOD(t_Phrase_AdvP, parse, METH_O),
                        DECLARE_METHOD(t_Phrase_AdvP, yybegin, METH_O),
                        DECLARE_METHOD(t_Phrase_AdvP, yycharat, METH_O),
                        DECLARE_METHOD(t_Phrase_AdvP, yyclose, METH_NOARGS),
                        DECLARE_METHOD(t_Phrase_AdvP, yylength, METH_NOARGS),
                        DECLARE_METHOD(t_Phrase_AdvP, yylex, METH_NOARGS),
                        DECLARE_METHOD(t_Phrase_AdvP, yypushback, METH_O),
                        DECLARE_METHOD(t_Phrase_AdvP, yyreset, METH_O),
                        DECLARE_METHOD(t_Phrase_AdvP, yystate, METH_NOARGS),
                        DECLARE_METHOD(t_Phrase_AdvP, yytext, METH_NOARGS),
                        { NULL, NULL, 0, NULL }
                    };

                    DECLARE_TYPE(Phrase_AdvP, t_Phrase_AdvP, ::java::lang::Object, Phrase_AdvP, t_Phrase_AdvP_init_, 0, 0, 0, 0, 0);

                    void t_Phrase_AdvP::install(PyObject *module)
                    {
                        installType(&PY_TYPE(Phrase_AdvP), module, "Phrase_AdvP", 0);
                    }

                    void t_Phrase_AdvP::initialize(PyObject *module)
                    {
                        PyDict_SetItemString(PY_TYPE(Phrase_AdvP).tp_dict, "class_", make_descriptor(Phrase_AdvP::initializeClass, 1));
                        PyDict_SetItemString(PY_TYPE(Phrase_AdvP).tp_dict, "wrapfn_", make_descriptor(t_Phrase_AdvP::wrap_jobject));
                        PyDict_SetItemString(PY_TYPE(Phrase_AdvP).tp_dict, "boxfn_", make_descriptor(boxObject));
                        Phrase_AdvP::initializeClass();
                        PyDict_SetItemString(PY_TYPE(Phrase_AdvP).tp_dict, "YYEOF", make_descriptor(Phrase_AdvP::YYEOF));
                        PyDict_SetItemString(PY_TYPE(Phrase_AdvP).tp_dict, "YYINITIAL", make_descriptor(Phrase_AdvP::YYINITIAL));
                    }

                    static PyObject *t_Phrase_AdvP_cast_(PyTypeObject *type, PyObject *arg)
                    {
                        if (!(arg = castCheck(arg, Phrase_AdvP::initializeClass, 1)))
                            return NULL;
                        return t_Phrase_AdvP::wrap_Object(Phrase_AdvP(((t_Phrase_AdvP *) arg)->object.this$));
                    }
                    static PyObject *t_Phrase_AdvP_instance_(PyTypeObject *type, PyObject *arg)
                    {
                        if (!castCheck(arg, Phrase_AdvP::initializeClass, 0))
                            Py_RETURN_FALSE;
                        Py_RETURN_TRUE;
                    }

                    static int t_Phrase_AdvP_init_(t_Phrase_AdvP *self, PyObject *args, PyObject *kwds)
                    {
                        switch (PyTuple_GET_SIZE(args)) {
                          case 1:
                            {
                                ::java::io::Reader a0((jobject) NULL);
                                Phrase_AdvP object((jobject) NULL);

                                if (!parseArgs(args, "k", ::java::io::Reader::initializeClass, &a0))
                                {
                                    INT_CALL(object = Phrase_AdvP(a0));
                                    self->object = object;
                                    break;
                                }
                            }
                            {
                                ::java::io::InputStream a0((jobject) NULL);
                                Phrase_AdvP object((jobject) NULL);

                                if (!parseArgs(args, "k", ::java::io::InputStream::initializeClass, &a0))
                                {
                                    INT_CALL(object = Phrase_AdvP(a0));
                                    self->object = object;
                                    break;
                                }
                            }
                          default:
                            PyErr_SetArgsError((PyObject *) self, "__init__", args);
                            return -1;
                        }

                        return 0;
                    }

                    static PyObject *t_Phrase_AdvP_main(PyTypeObject *type, PyObject *arg)
                    {
                        JArray< ::java::lang::String > a0((jobject) NULL);

                        if (!parseArg(arg, "[s", &a0))
                        {
                            OBJ_CALL(::is::iclt::icenlp::core::iceparser::Phrase_AdvP::main(a0));
                            Py_RETURN_NONE;
                        }

                        PyErr_SetArgsError(type, "main", arg);
                        return NULL;
                    }

                    static PyObject *t_Phrase_AdvP_parse(t_Phrase_AdvP *self, PyObject *arg)
                    {
                        ::java::io::Writer a0((jobject) NULL);

                        if (!parseArg(arg, "k", ::java::io::Writer::initializeClass, &a0))
                        {
                            OBJ_CALL(self->object.parse(a0));
                            Py_RETURN_NONE;
                        }

                        PyErr_SetArgsError((PyObject *) self, "parse", arg);
                        return NULL;
                    }

                    static PyObject *t_Phrase_AdvP_yybegin(t_Phrase_AdvP *self, PyObject *arg)
                    {
                        jint a0;

                        if (!parseArg(arg, "I", &a0))
                        {
                            OBJ_CALL(self->object.yybegin(a0));
                            Py_RETURN_NONE;
                        }

                        PyErr_SetArgsError((PyObject *) self, "yybegin", arg);
                        return NULL;
                    }

                    static PyObject *t_Phrase_AdvP_yycharat(t_Phrase_AdvP *self, PyObject *arg)
                    {
                        jint a0;
                        jchar result;

                        if (!parseArg(arg, "I", &a0))
                        {
                            OBJ_CALL(result = self->object.yycharat(a0));
                            return PyUnicode_FromUnicode((Py_UNICODE *) &result, 1);
                        }

                        PyErr_SetArgsError((PyObject *) self, "yycharat", arg);
                        return NULL;
                    }

                    static PyObject *t_Phrase_AdvP_yyclose(t_Phrase_AdvP *self)
                    {
                        OBJ_CALL(self->object.yyclose());
                        Py_RETURN_NONE;
                    }

                    static PyObject *t_Phrase_AdvP_yylength(t_Phrase_AdvP *self)
                    {
                        jint result;
                        OBJ_CALL(result = self->object.yylength());
                        return PyInt_FromLong((long) result);
                    }

                    static PyObject *t_Phrase_AdvP_yylex(t_Phrase_AdvP *self)
                    {
                        jint result;
                        OBJ_CALL(result = self->object.yylex());
                        return PyInt_FromLong((long) result);
                    }

                    static PyObject *t_Phrase_AdvP_yypushback(t_Phrase_AdvP *self, PyObject *arg)
                    {
                        jint a0;

                        if (!parseArg(arg, "I", &a0))
                        {
                            OBJ_CALL(self->object.yypushback(a0));
                            Py_RETURN_NONE;
                        }

                        PyErr_SetArgsError((PyObject *) self, "yypushback", arg);
                        return NULL;
                    }

                    static PyObject *t_Phrase_AdvP_yyreset(t_Phrase_AdvP *self, PyObject *arg)
                    {
                        ::java::io::Reader a0((jobject) NULL);

                        if (!parseArg(arg, "k", ::java::io::Reader::initializeClass, &a0))
                        {
                            OBJ_CALL(self->object.yyreset(a0));
                            Py_RETURN_NONE;
                        }

                        PyErr_SetArgsError((PyObject *) self, "yyreset", arg);
                        return NULL;
                    }

                    static PyObject *t_Phrase_AdvP_yystate(t_Phrase_AdvP *self)
                    {
                        jint result;
                        OBJ_CALL(result = self->object.yystate());
                        return PyInt_FromLong((long) result);
                    }

                    static PyObject *t_Phrase_AdvP_yytext(t_Phrase_AdvP *self)
                    {
                        ::java::lang::String result((jobject) NULL);
                        OBJ_CALL(result = self->object.yytext());
                        return j2p(result);
                    }
                }
            }
        }
    }
}
#include <jni.h>
#include "JCCEnv.h"
#include "is/iclt/icenlp/core/iceparser/Func_COMP.h"
#include "java/io/IOException.h"
#include "java/io/Reader.h"
#include "java/io/Writer.h"
#include "java/lang/Class.h"
#include "java/io/InputStream.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace is {
    namespace iclt {
        namespace icenlp {
            namespace core {
                namespace iceparser {

                    ::java::lang::Class *Func_COMP::class$ = NULL;
                    jmethodID *Func_COMP::mids$ = NULL;
                    jint Func_COMP::YYEOF = (jint) 0;
                    jint Func_COMP::YYINITIAL = (jint) 0;

                    jclass Func_COMP::initializeClass()
                    {
                        if (!class$)
                        {

                            jclass cls = (jclass) env->findClass("is/iclt/icenlp/core/iceparser/Func_COMP");

                            mids$ = new jmethodID[max_mid];
                            mids$[mid_init$_cf2e3c10] = env->getMethodID(cls, "<init>", "(Ljava/io/Reader;)V");
                            mids$[mid_init$_be2e4f90] = env->getMethodID(cls, "<init>", "(Ljava/io/InputStream;)V");
                            mids$[mid_main_4dd4540c] = env->getStaticMethodID(cls, "main", "([Ljava/lang/String;)V");
                            mids$[mid_parse_5bcd5850] = env->getMethodID(cls, "parse", "(Ljava/io/Writer;)V");
                            mids$[mid_yybegin_39c7bd3c] = env->getMethodID(cls, "yybegin", "(I)V");
                            mids$[mid_yycharat_39c7bd29] = env->getMethodID(cls, "yycharat", "(I)C");
                            mids$[mid_yyclose_54c6a166] = env->getMethodID(cls, "yyclose", "()V");
                            mids$[mid_yylength_54c6a179] = env->getMethodID(cls, "yylength", "()I");
                            mids$[mid_yylex_54c6a179] = env->getMethodID(cls, "yylex", "()I");
                            mids$[mid_yypushback_39c7bd3c] = env->getMethodID(cls, "yypushback", "(I)V");
                            mids$[mid_yyreset_cf2e3c10] = env->getMethodID(cls, "yyreset", "(Ljava/io/Reader;)V");
                            mids$[mid_yystate_54c6a179] = env->getMethodID(cls, "yystate", "()I");
                            mids$[mid_yytext_14c7b5c5] = env->getMethodID(cls, "yytext", "()Ljava/lang/String;");

                            class$ = (::java::lang::Class *) new JObject(cls);
                            cls = (jclass) class$->this$;

                            YYEOF = env->getStaticIntField(cls, "YYEOF");
                            YYINITIAL = env->getStaticIntField(cls, "YYINITIAL");
                        }
                        return (jclass) class$->this$;
                    }

                    Func_COMP::Func_COMP(const ::java::io::Reader & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_cf2e3c10, a0.this$)) {}

                    Func_COMP::Func_COMP(const ::java::io::InputStream & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_be2e4f90, a0.this$)) {}

                    void Func_COMP::main(const JArray< ::java::lang::String > & a0)
                    {
                        jclass cls = initializeClass();
                        env->callStaticVoidMethod(cls, mids$[mid_main_4dd4540c], a0.this$);
                    }

                    void Func_COMP::parse(const ::java::io::Writer & a0) const
                    {
                        env->callVoidMethod(this$, mids$[mid_parse_5bcd5850], a0.this$);
                    }

                    void Func_COMP::yybegin(jint a0) const
                    {
                        env->callVoidMethod(this$, mids$[mid_yybegin_39c7bd3c], a0);
                    }

                    jchar Func_COMP::yycharat(jint a0) const
                    {
                        return env->callCharMethod(this$, mids$[mid_yycharat_39c7bd29], a0);
                    }

                    void Func_COMP::yyclose() const
                    {
                        env->callVoidMethod(this$, mids$[mid_yyclose_54c6a166]);
                    }

                    jint Func_COMP::yylength() const
                    {
                        return env->callIntMethod(this$, mids$[mid_yylength_54c6a179]);
                    }

                    jint Func_COMP::yylex() const
                    {
                        return env->callIntMethod(this$, mids$[mid_yylex_54c6a179]);
                    }

                    void Func_COMP::yypushback(jint a0) const
                    {
                        env->callVoidMethod(this$, mids$[mid_yypushback_39c7bd3c], a0);
                    }

                    void Func_COMP::yyreset(const ::java::io::Reader & a0) const
                    {
                        env->callVoidMethod(this$, mids$[mid_yyreset_cf2e3c10], a0.this$);
                    }

                    jint Func_COMP::yystate() const
                    {
                        return env->callIntMethod(this$, mids$[mid_yystate_54c6a179]);
                    }

                    ::java::lang::String Func_COMP::yytext() const
                    {
                        return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_yytext_14c7b5c5]));
                    }
                }
            }
        }
    }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace is {
    namespace iclt {
        namespace icenlp {
            namespace core {
                namespace iceparser {
                    static PyObject *t_Func_COMP_cast_(PyTypeObject *type, PyObject *arg);
                    static PyObject *t_Func_COMP_instance_(PyTypeObject *type, PyObject *arg);
                    static int t_Func_COMP_init_(t_Func_COMP *self, PyObject *args, PyObject *kwds);
                    static PyObject *t_Func_COMP_main(PyTypeObject *type, PyObject *arg);
                    static PyObject *t_Func_COMP_parse(t_Func_COMP *self, PyObject *arg);
                    static PyObject *t_Func_COMP_yybegin(t_Func_COMP *self, PyObject *arg);
                    static PyObject *t_Func_COMP_yycharat(t_Func_COMP *self, PyObject *arg);
                    static PyObject *t_Func_COMP_yyclose(t_Func_COMP *self);
                    static PyObject *t_Func_COMP_yylength(t_Func_COMP *self);
                    static PyObject *t_Func_COMP_yylex(t_Func_COMP *self);
                    static PyObject *t_Func_COMP_yypushback(t_Func_COMP *self, PyObject *arg);
                    static PyObject *t_Func_COMP_yyreset(t_Func_COMP *self, PyObject *arg);
                    static PyObject *t_Func_COMP_yystate(t_Func_COMP *self);
                    static PyObject *t_Func_COMP_yytext(t_Func_COMP *self);

                    static PyMethodDef t_Func_COMP__methods_[] = {
                        DECLARE_METHOD(t_Func_COMP, cast_, METH_O | METH_CLASS),
                        DECLARE_METHOD(t_Func_COMP, instance_, METH_O | METH_CLASS),
                        DECLARE_METHOD(t_Func_COMP, main, METH_O | METH_CLASS),
                        DECLARE_METHOD(t_Func_COMP, parse, METH_O),
                        DECLARE_METHOD(t_Func_COMP, yybegin, METH_O),
                        DECLARE_METHOD(t_Func_COMP, yycharat, METH_O),
                        DECLARE_METHOD(t_Func_COMP, yyclose, METH_NOARGS),
                        DECLARE_METHOD(t_Func_COMP, yylength, METH_NOARGS),
                        DECLARE_METHOD(t_Func_COMP, yylex, METH_NOARGS),
                        DECLARE_METHOD(t_Func_COMP, yypushback, METH_O),
                        DECLARE_METHOD(t_Func_COMP, yyreset, METH_O),
                        DECLARE_METHOD(t_Func_COMP, yystate, METH_NOARGS),
                        DECLARE_METHOD(t_Func_COMP, yytext, METH_NOARGS),
                        { NULL, NULL, 0, NULL }
                    };

                    DECLARE_TYPE(Func_COMP, t_Func_COMP, ::java::lang::Object, Func_COMP, t_Func_COMP_init_, 0, 0, 0, 0, 0);

                    void t_Func_COMP::install(PyObject *module)
                    {
                        installType(&PY_TYPE(Func_COMP), module, "Func_COMP", 0);
                    }

                    void t_Func_COMP::initialize(PyObject *module)
                    {
                        PyDict_SetItemString(PY_TYPE(Func_COMP).tp_dict, "class_", make_descriptor(Func_COMP::initializeClass, 1));
                        PyDict_SetItemString(PY_TYPE(Func_COMP).tp_dict, "wrapfn_", make_descriptor(t_Func_COMP::wrap_jobject));
                        PyDict_SetItemString(PY_TYPE(Func_COMP).tp_dict, "boxfn_", make_descriptor(boxObject));
                        Func_COMP::initializeClass();
                        PyDict_SetItemString(PY_TYPE(Func_COMP).tp_dict, "YYEOF", make_descriptor(Func_COMP::YYEOF));
                        PyDict_SetItemString(PY_TYPE(Func_COMP).tp_dict, "YYINITIAL", make_descriptor(Func_COMP::YYINITIAL));
                    }

                    static PyObject *t_Func_COMP_cast_(PyTypeObject *type, PyObject *arg)
                    {
                        if (!(arg = castCheck(arg, Func_COMP::initializeClass, 1)))
                            return NULL;
                        return t_Func_COMP::wrap_Object(Func_COMP(((t_Func_COMP *) arg)->object.this$));
                    }
                    static PyObject *t_Func_COMP_instance_(PyTypeObject *type, PyObject *arg)
                    {
                        if (!castCheck(arg, Func_COMP::initializeClass, 0))
                            Py_RETURN_FALSE;
                        Py_RETURN_TRUE;
                    }

                    static int t_Func_COMP_init_(t_Func_COMP *self, PyObject *args, PyObject *kwds)
                    {
                        switch (PyTuple_GET_SIZE(args)) {
                          case 1:
                            {
                                ::java::io::Reader a0((jobject) NULL);
                                Func_COMP object((jobject) NULL);

                                if (!parseArgs(args, "k", ::java::io::Reader::initializeClass, &a0))
                                {
                                    INT_CALL(object = Func_COMP(a0));
                                    self->object = object;
                                    break;
                                }
                            }
                            {
                                ::java::io::InputStream a0((jobject) NULL);
                                Func_COMP object((jobject) NULL);

                                if (!parseArgs(args, "k", ::java::io::InputStream::initializeClass, &a0))
                                {
                                    INT_CALL(object = Func_COMP(a0));
                                    self->object = object;
                                    break;
                                }
                            }
                          default:
                            PyErr_SetArgsError((PyObject *) self, "__init__", args);
                            return -1;
                        }

                        return 0;
                    }

                    static PyObject *t_Func_COMP_main(PyTypeObject *type, PyObject *arg)
                    {
                        JArray< ::java::lang::String > a0((jobject) NULL);

                        if (!parseArg(arg, "[s", &a0))
                        {
                            OBJ_CALL(::is::iclt::icenlp::core::iceparser::Func_COMP::main(a0));
                            Py_RETURN_NONE;
                        }

                        PyErr_SetArgsError(type, "main", arg);
                        return NULL;
                    }

                    static PyObject *t_Func_COMP_parse(t_Func_COMP *self, PyObject *arg)
                    {
                        ::java::io::Writer a0((jobject) NULL);

                        if (!parseArg(arg, "k", ::java::io::Writer::initializeClass, &a0))
                        {
                            OBJ_CALL(self->object.parse(a0));
                            Py_RETURN_NONE;
                        }

                        PyErr_SetArgsError((PyObject *) self, "parse", arg);
                        return NULL;
                    }

                    static PyObject *t_Func_COMP_yybegin(t_Func_COMP *self, PyObject *arg)
                    {
                        jint a0;

                        if (!parseArg(arg, "I", &a0))
                        {
                            OBJ_CALL(self->object.yybegin(a0));
                            Py_RETURN_NONE;
                        }

                        PyErr_SetArgsError((PyObject *) self, "yybegin", arg);
                        return NULL;
                    }

                    static PyObject *t_Func_COMP_yycharat(t_Func_COMP *self, PyObject *arg)
                    {
                        jint a0;
                        jchar result;

                        if (!parseArg(arg, "I", &a0))
                        {
                            OBJ_CALL(result = self->object.yycharat(a0));
                            return PyUnicode_FromUnicode((Py_UNICODE *) &result, 1);
                        }

                        PyErr_SetArgsError((PyObject *) self, "yycharat", arg);
                        return NULL;
                    }

                    static PyObject *t_Func_COMP_yyclose(t_Func_COMP *self)
                    {
                        OBJ_CALL(self->object.yyclose());
                        Py_RETURN_NONE;
                    }

                    static PyObject *t_Func_COMP_yylength(t_Func_COMP *self)
                    {
                        jint result;
                        OBJ_CALL(result = self->object.yylength());
                        return PyInt_FromLong((long) result);
                    }

                    static PyObject *t_Func_COMP_yylex(t_Func_COMP *self)
                    {
                        jint result;
                        OBJ_CALL(result = self->object.yylex());
                        return PyInt_FromLong((long) result);
                    }

                    static PyObject *t_Func_COMP_yypushback(t_Func_COMP *self, PyObject *arg)
                    {
                        jint a0;

                        if (!parseArg(arg, "I", &a0))
                        {
                            OBJ_CALL(self->object.yypushback(a0));
                            Py_RETURN_NONE;
                        }

                        PyErr_SetArgsError((PyObject *) self, "yypushback", arg);
                        return NULL;
                    }

                    static PyObject *t_Func_COMP_yyreset(t_Func_COMP *self, PyObject *arg)
                    {
                        ::java::io::Reader a0((jobject) NULL);

                        if (!parseArg(arg, "k", ::java::io::Reader::initializeClass, &a0))
                        {
                            OBJ_CALL(self->object.yyreset(a0));
                            Py_RETURN_NONE;
                        }

                        PyErr_SetArgsError((PyObject *) self, "yyreset", arg);
                        return NULL;
                    }

                    static PyObject *t_Func_COMP_yystate(t_Func_COMP *self)
                    {
                        jint result;
                        OBJ_CALL(result = self->object.yystate());
                        return PyInt_FromLong((long) result);
                    }

                    static PyObject *t_Func_COMP_yytext(t_Func_COMP *self)
                    {
                        ::java::lang::String result((jobject) NULL);
                        OBJ_CALL(result = self->object.yytext());
                        return j2p(result);
                    }
                }
            }
        }
    }
}
#include <jni.h>
#include "JCCEnv.h"
#include "is/iclt/icenlp/facade/IceNLP.h"
#include "java/lang/String.h"
#include "java/lang/Class.h"
#include "is/iclt/icenlp/core/formald/tags/TaggedText.h"
#include "JArray.h"

namespace is {
    namespace iclt {
        namespace icenlp {
            namespace facade {

                ::java::lang::Class *IceNLP::class$ = NULL;
                jmethodID *IceNLP::mids$ = NULL;

                jclass IceNLP::initializeClass()
                {
                    if (!class$)
                    {

                        jclass cls = (jclass) env->findClass("is/iclt/icenlp/facade/IceNLP");

                        mids$ = new jmethodID[max_mid];
                        mids$[mid_analyze_97a5258f] = env->getMethodID(cls, "analyze", "(Ljava/lang/String;)Ljava/lang/String;");
                        mids$[mid_getInstance_3c763880] = env->getStaticMethodID(cls, "getInstance", "()Lis/iclt/icenlp/facade/IceNLP;");
                        mids$[mid_newInstance_3c763880] = env->getStaticMethodID(cls, "newInstance", "()Lis/iclt/icenlp/facade/IceNLP;");
                        mids$[mid_parseLines_97a5258f] = env->getMethodID(cls, "parseLines", "(Ljava/lang/String;)Ljava/lang/String;");
                        mids$[mid_srxSegmentize_97a5258f] = env->getMethodID(cls, "srxSegmentize", "(Ljava/lang/String;)Ljava/lang/String;");
                        mids$[mid_tagAndLemmatizeLines_cb9f349c] = env->getMethodID(cls, "tagAndLemmatizeLines", "(Ljava/lang/String;)Lis/iclt/icenlp/core/formald/tags/TaggedText;");
                        mids$[mid_tagAndLemmatizeText_cb9f349c] = env->getMethodID(cls, "tagAndLemmatizeText", "(Ljava/lang/String;)Lis/iclt/icenlp/core/formald/tags/TaggedText;");
                        mids$[mid_tagAndParseLines_97a5258f] = env->getMethodID(cls, "tagAndParseLines", "(Ljava/lang/String;)Ljava/lang/String;");
                        mids$[mid_tagAndParseText_97a5258f] = env->getMethodID(cls, "tagAndParseText", "(Ljava/lang/String;)Ljava/lang/String;");
                        mids$[mid_tagLines_cb9f349c] = env->getMethodID(cls, "tagLines", "(Ljava/lang/String;)Lis/iclt/icenlp/core/formald/tags/TaggedText;");
                        mids$[mid_tagText_cb9f349c] = env->getMethodID(cls, "tagText", "(Ljava/lang/String;)Lis/iclt/icenlp/core/formald/tags/TaggedText;");
                        mids$[mid_terminate_54c6a166] = env->getStaticMethodID(cls, "terminate", "()V");
                        mids$[mid_tokenize_97a5258f] = env->getMethodID(cls, "tokenize", "(Ljava/lang/String;)Ljava/lang/String;");

                        class$ = (::java::lang::Class *) new JObject(cls);
                    }
                    return (jclass) class$->this$;
                }

                ::java::lang::String IceNLP::analyze(const ::java::lang::String & a0) const
                {
                    return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_analyze_97a5258f], a0.this$));
                }

                IceNLP IceNLP::getInstance()
                {
                    jclass cls = initializeClass();
                    return IceNLP(env->callStaticObjectMethod(cls, mids$[mid_getInstance_3c763880]));
                }

                IceNLP IceNLP::newInstance()
                {
                    jclass cls = initializeClass();
                    return IceNLP(env->callStaticObjectMethod(cls, mids$[mid_newInstance_3c763880]));
                }

                ::java::lang::String IceNLP::parseLines(const ::java::lang::String & a0) const
                {
                    return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_parseLines_97a5258f], a0.this$));
                }

                ::java::lang::String IceNLP::srxSegmentize(const ::java::lang::String & a0) const
                {
                    return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_srxSegmentize_97a5258f], a0.this$));
                }

                ::is::iclt::icenlp::core::formald::tags::TaggedText IceNLP::tagAndLemmatizeLines(const ::java::lang::String & a0) const
                {
                    return ::is::iclt::icenlp::core::formald::tags::TaggedText(env->callObjectMethod(this$, mids$[mid_tagAndLemmatizeLines_cb9f349c], a0.this$));
                }

                ::is::iclt::icenlp::core::formald::tags::TaggedText IceNLP::tagAndLemmatizeText(const ::java::lang::String & a0) const
                {
                    return ::is::iclt::icenlp::core::formald::tags::TaggedText(env->callObjectMethod(this$, mids$[mid_tagAndLemmatizeText_cb9f349c], a0.this$));
                }

                ::java::lang::String IceNLP::tagAndParseLines(const ::java::lang::String & a0) const
                {
                    return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_tagAndParseLines_97a5258f], a0.this$));
                }

                ::java::lang::String IceNLP::tagAndParseText(const ::java::lang::String & a0) const
                {
                    return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_tagAndParseText_97a5258f], a0.this$));
                }

                ::is::iclt::icenlp::core::formald::tags::TaggedText IceNLP::tagLines(const ::java::lang::String & a0) const
                {
                    return ::is::iclt::icenlp::core::formald::tags::TaggedText(env->callObjectMethod(this$, mids$[mid_tagLines_cb9f349c], a0.this$));
                }

                ::is::iclt::icenlp::core::formald::tags::TaggedText IceNLP::tagText(const ::java::lang::String & a0) const
                {
                    return ::is::iclt::icenlp::core::formald::tags::TaggedText(env->callObjectMethod(this$, mids$[mid_tagText_cb9f349c], a0.this$));
                }

                void IceNLP::terminate()
                {
                    jclass cls = initializeClass();
                    env->callStaticVoidMethod(cls, mids$[mid_terminate_54c6a166]);
                }

                ::java::lang::String IceNLP::tokenize(const ::java::lang::String & a0) const
                {
                    return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_tokenize_97a5258f], a0.this$));
                }
            }
        }
    }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace is {
    namespace iclt {
        namespace icenlp {
            namespace facade {
                static PyObject *t_IceNLP_cast_(PyTypeObject *type, PyObject *arg);
                static PyObject *t_IceNLP_instance_(PyTypeObject *type, PyObject *arg);
                static PyObject *t_IceNLP_analyze(t_IceNLP *self, PyObject *arg);
                static PyObject *t_IceNLP_getInstance(PyTypeObject *type);
                static PyObject *t_IceNLP_newInstance(PyTypeObject *type);
                static PyObject *t_IceNLP_parseLines(t_IceNLP *self, PyObject *arg);
                static PyObject *t_IceNLP_srxSegmentize(t_IceNLP *self, PyObject *arg);
                static PyObject *t_IceNLP_tagAndLemmatizeLines(t_IceNLP *self, PyObject *arg);
                static PyObject *t_IceNLP_tagAndLemmatizeText(t_IceNLP *self, PyObject *arg);
                static PyObject *t_IceNLP_tagAndParseLines(t_IceNLP *self, PyObject *arg);
                static PyObject *t_IceNLP_tagAndParseText(t_IceNLP *self, PyObject *arg);
                static PyObject *t_IceNLP_tagLines(t_IceNLP *self, PyObject *arg);
                static PyObject *t_IceNLP_tagText(t_IceNLP *self, PyObject *arg);
                static PyObject *t_IceNLP_terminate(PyTypeObject *type);
                static PyObject *t_IceNLP_tokenize(t_IceNLP *self, PyObject *arg);
                static PyObject *t_IceNLP_get__instance(t_IceNLP *self, void *data);
                static PyGetSetDef t_IceNLP__fields_[] = {
                    DECLARE_GET_FIELD(t_IceNLP, instance),
                    { NULL, NULL, NULL, NULL, NULL }
                };

                static PyMethodDef t_IceNLP__methods_[] = {
                    DECLARE_METHOD(t_IceNLP, cast_, METH_O | METH_CLASS),
                    DECLARE_METHOD(t_IceNLP, instance_, METH_O | METH_CLASS),
                    DECLARE_METHOD(t_IceNLP, analyze, METH_O),
                    DECLARE_METHOD(t_IceNLP, getInstance, METH_NOARGS | METH_CLASS),
                    DECLARE_METHOD(t_IceNLP, newInstance, METH_NOARGS | METH_CLASS),
                    DECLARE_METHOD(t_IceNLP, parseLines, METH_O),
                    DECLARE_METHOD(t_IceNLP, srxSegmentize, METH_O),
                    DECLARE_METHOD(t_IceNLP, tagAndLemmatizeLines, METH_O),
                    DECLARE_METHOD(t_IceNLP, tagAndLemmatizeText, METH_O),
                    DECLARE_METHOD(t_IceNLP, tagAndParseLines, METH_O),
                    DECLARE_METHOD(t_IceNLP, tagAndParseText, METH_O),
                    DECLARE_METHOD(t_IceNLP, tagLines, METH_O),
                    DECLARE_METHOD(t_IceNLP, tagText, METH_O),
                    DECLARE_METHOD(t_IceNLP, terminate, METH_NOARGS | METH_CLASS),
                    DECLARE_METHOD(t_IceNLP, tokenize, METH_O),
                    { NULL, NULL, 0, NULL }
                };

                DECLARE_TYPE(IceNLP, t_IceNLP, ::java::lang::Object, IceNLP, abstract_init, 0, 0, t_IceNLP__fields_, 0, 0);

                void t_IceNLP::install(PyObject *module)
                {
                    installType(&PY_TYPE(IceNLP), module, "IceNLP", 0);
                }

                void t_IceNLP::initialize(PyObject *module)
                {
                    PyDict_SetItemString(PY_TYPE(IceNLP).tp_dict, "class_", make_descriptor(IceNLP::initializeClass, 1));
                    PyDict_SetItemString(PY_TYPE(IceNLP).tp_dict, "wrapfn_", make_descriptor(t_IceNLP::wrap_jobject));
                    PyDict_SetItemString(PY_TYPE(IceNLP).tp_dict, "boxfn_", make_descriptor(boxObject));
                }

                static PyObject *t_IceNLP_cast_(PyTypeObject *type, PyObject *arg)
                {
                    if (!(arg = castCheck(arg, IceNLP::initializeClass, 1)))
                        return NULL;
                    return t_IceNLP::wrap_Object(IceNLP(((t_IceNLP *) arg)->object.this$));
                }
                static PyObject *t_IceNLP_instance_(PyTypeObject *type, PyObject *arg)
                {
                    if (!castCheck(arg, IceNLP::initializeClass, 0))
                        Py_RETURN_FALSE;
                    Py_RETURN_TRUE;
                }

                static PyObject *t_IceNLP_analyze(t_IceNLP *self, PyObject *arg)
                {
                    ::java::lang::String a0((jobject) NULL);
                    ::java::lang::String result((jobject) NULL);

                    if (!parseArg(arg, "s", &a0))
                    {
                        OBJ_CALL(result = self->object.analyze(a0));
                        return j2p(result);
                    }

                    PyErr_SetArgsError((PyObject *) self, "analyze", arg);
                    return NULL;
                }

                static PyObject *t_IceNLP_getInstance(PyTypeObject *type)
                {
                    IceNLP result((jobject) NULL);
                    OBJ_CALL(result = ::is::iclt::icenlp::facade::IceNLP::getInstance());
                    return t_IceNLP::wrap_Object(result);
                }

                static PyObject *t_IceNLP_newInstance(PyTypeObject *type)
                {
                    IceNLP result((jobject) NULL);
                    OBJ_CALL(result = ::is::iclt::icenlp::facade::IceNLP::newInstance());
                    return t_IceNLP::wrap_Object(result);
                }

                static PyObject *t_IceNLP_parseLines(t_IceNLP *self, PyObject *arg)
                {
                    ::java::lang::String a0((jobject) NULL);
                    ::java::lang::String result((jobject) NULL);

                    if (!parseArg(arg, "s", &a0))
                    {
                        OBJ_CALL(result = self->object.parseLines(a0));
                        return j2p(result);
                    }

                    PyErr_SetArgsError((PyObject *) self, "parseLines", arg);
                    return NULL;
                }

                static PyObject *t_IceNLP_srxSegmentize(t_IceNLP *self, PyObject *arg)
                {
                    ::java::lang::String a0((jobject) NULL);
                    ::java::lang::String result((jobject) NULL);

                    if (!parseArg(arg, "s", &a0))
                    {
                        OBJ_CALL(result = self->object.srxSegmentize(a0));
                        return j2p(result);
                    }

                    PyErr_SetArgsError((PyObject *) self, "srxSegmentize", arg);
                    return NULL;
                }

                static PyObject *t_IceNLP_tagAndLemmatizeLines(t_IceNLP *self, PyObject *arg)
                {
                    ::java::lang::String a0((jobject) NULL);
                    ::is::iclt::icenlp::core::formald::tags::TaggedText result((jobject) NULL);

                    if (!parseArg(arg, "s", &a0))
                    {
                        OBJ_CALL(result = self->object.tagAndLemmatizeLines(a0));
                        return ::is::iclt::icenlp::core::formald::tags::t_TaggedText::wrap_Object(result);
                    }

                    PyErr_SetArgsError((PyObject *) self, "tagAndLemmatizeLines", arg);
                    return NULL;
                }

                static PyObject *t_IceNLP_tagAndLemmatizeText(t_IceNLP *self, PyObject *arg)
                {
                    ::java::lang::String a0((jobject) NULL);
                    ::is::iclt::icenlp::core::formald::tags::TaggedText result((jobject) NULL);

                    if (!parseArg(arg, "s", &a0))
                    {
                        OBJ_CALL(result = self->object.tagAndLemmatizeText(a0));
                        return ::is::iclt::icenlp::core::formald::tags::t_TaggedText::wrap_Object(result);
                    }

                    PyErr_SetArgsError((PyObject *) self, "tagAndLemmatizeText", arg);
                    return NULL;
                }

                static PyObject *t_IceNLP_tagAndParseLines(t_IceNLP *self, PyObject *arg)
                {
                    ::java::lang::String a0((jobject) NULL);
                    ::java::lang::String result((jobject) NULL);

                    if (!parseArg(arg, "s", &a0))
                    {
                        OBJ_CALL(result = self->object.tagAndParseLines(a0));
                        return j2p(result);
                    }

                    PyErr_SetArgsError((PyObject *) self, "tagAndParseLines", arg);
                    return NULL;
                }

                static PyObject *t_IceNLP_tagAndParseText(t_IceNLP *self, PyObject *arg)
                {
                    ::java::lang::String a0((jobject) NULL);
                    ::java::lang::String result((jobject) NULL);

                    if (!parseArg(arg, "s", &a0))
                    {
                        OBJ_CALL(result = self->object.tagAndParseText(a0));
                        return j2p(result);
                    }

                    PyErr_SetArgsError((PyObject *) self, "tagAndParseText", arg);
                    return NULL;
                }

                static PyObject *t_IceNLP_tagLines(t_IceNLP *self, PyObject *arg)
                {
                    ::java::lang::String a0((jobject) NULL);
                    ::is::iclt::icenlp::core::formald::tags::TaggedText result((jobject) NULL);

                    if (!parseArg(arg, "s", &a0))
                    {
                        OBJ_CALL(result = self->object.tagLines(a0));
                        return ::is::iclt::icenlp::core::formald::tags::t_TaggedText::wrap_Object(result);
                    }

                    PyErr_SetArgsError((PyObject *) self, "tagLines", arg);
                    return NULL;
                }

                static PyObject *t_IceNLP_tagText(t_IceNLP *self, PyObject *arg)
                {
                    ::java::lang::String a0((jobject) NULL);
                    ::is::iclt::icenlp::core::formald::tags::TaggedText result((jobject) NULL);

                    if (!parseArg(arg, "s", &a0))
                    {
                        OBJ_CALL(result = self->object.tagText(a0));
                        return ::is::iclt::icenlp::core::formald::tags::t_TaggedText::wrap_Object(result);
                    }

                    PyErr_SetArgsError((PyObject *) self, "tagText", arg);
                    return NULL;
                }

                static PyObject *t_IceNLP_terminate(PyTypeObject *type)
                {
                    OBJ_CALL(::is::iclt::icenlp::facade::IceNLP::terminate());
                    Py_RETURN_NONE;
                }

                static PyObject *t_IceNLP_tokenize(t_IceNLP *self, PyObject *arg)
                {
                    ::java::lang::String a0((jobject) NULL);
                    ::java::lang::String result((jobject) NULL);

                    if (!parseArg(arg, "s", &a0))
                    {
                        OBJ_CALL(result = self->object.tokenize(a0));
                        return j2p(result);
                    }

                    PyErr_SetArgsError((PyObject *) self, "tokenize", arg);
                    return NULL;
                }

                static PyObject *t_IceNLP_get__instance(t_IceNLP *self, void *data)
                {
                    IceNLP value((jobject) NULL);
                    OBJ_CALL(value = self->object.getInstance());
                    return t_IceNLP::wrap_Object(value);
                }
            }
        }
    }
}
#include <jni.h>
#include "JCCEnv.h"
#include "is/iclt/icenlp/runner/TagAndParse.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "is/iclt/icenlp/core/tokenizer/Sentences.h"
#include "JArray.h"

namespace is {
    namespace iclt {
        namespace icenlp {
            namespace runner {

                ::java::lang::Class *TagAndParse::class$ = NULL;
                jmethodID *TagAndParse::mids$ = NULL;

                jclass TagAndParse::initializeClass()
                {
                    if (!class$)
                    {

                        jclass cls = (jclass) env->findClass("is/iclt/icenlp/runner/TagAndParse");

                        mids$ = new jmethodID[max_mid];
                        mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                        mids$[mid_init$_bb0c767f] = env->getMethodID(cls, "<init>", "(Z)V");
                        mids$[mid_main_4dd4540c] = env->getStaticMethodID(cls, "main", "([Ljava/lang/String;)V");
                        mids$[mid_tagText_6359824b] = env->getMethodID(cls, "tagText", "(Ljava/lang/String;)Lis/iclt/icenlp/core/tokenizer/Sentences;");

                        class$ = (::java::lang::Class *) new JObject(cls);
                    }
                    return (jclass) class$->this$;
                }

                TagAndParse::TagAndParse() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

                TagAndParse::TagAndParse(jboolean a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_bb0c767f, a0)) {}

                void TagAndParse::main(const JArray< ::java::lang::String > & a0)
                {
                    jclass cls = initializeClass();
                    env->callStaticVoidMethod(cls, mids$[mid_main_4dd4540c], a0.this$);
                }

                ::is::iclt::icenlp::core::tokenizer::Sentences TagAndParse::tagText(const ::java::lang::String & a0) const
                {
                    return ::is::iclt::icenlp::core::tokenizer::Sentences(env->callObjectMethod(this$, mids$[mid_tagText_6359824b], a0.this$));
                }
            }
        }
    }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace is {
    namespace iclt {
        namespace icenlp {
            namespace runner {
                static PyObject *t_TagAndParse_cast_(PyTypeObject *type, PyObject *arg);
                static PyObject *t_TagAndParse_instance_(PyTypeObject *type, PyObject *arg);
                static int t_TagAndParse_init_(t_TagAndParse *self, PyObject *args, PyObject *kwds);
                static PyObject *t_TagAndParse_main(PyTypeObject *type, PyObject *arg);
                static PyObject *t_TagAndParse_tagText(t_TagAndParse *self, PyObject *arg);

                static PyMethodDef t_TagAndParse__methods_[] = {
                    DECLARE_METHOD(t_TagAndParse, cast_, METH_O | METH_CLASS),
                    DECLARE_METHOD(t_TagAndParse, instance_, METH_O | METH_CLASS),
                    DECLARE_METHOD(t_TagAndParse, main, METH_O | METH_CLASS),
                    DECLARE_METHOD(t_TagAndParse, tagText, METH_O),
                    { NULL, NULL, 0, NULL }
                };

                DECLARE_TYPE(TagAndParse, t_TagAndParse, ::java::lang::Object, TagAndParse, t_TagAndParse_init_, 0, 0, 0, 0, 0);

                void t_TagAndParse::install(PyObject *module)
                {
                    installType(&PY_TYPE(TagAndParse), module, "TagAndParse", 0);
                }

                void t_TagAndParse::initialize(PyObject *module)
                {
                    PyDict_SetItemString(PY_TYPE(TagAndParse).tp_dict, "class_", make_descriptor(TagAndParse::initializeClass, 1));
                    PyDict_SetItemString(PY_TYPE(TagAndParse).tp_dict, "wrapfn_", make_descriptor(t_TagAndParse::wrap_jobject));
                    PyDict_SetItemString(PY_TYPE(TagAndParse).tp_dict, "boxfn_", make_descriptor(boxObject));
                }

                static PyObject *t_TagAndParse_cast_(PyTypeObject *type, PyObject *arg)
                {
                    if (!(arg = castCheck(arg, TagAndParse::initializeClass, 1)))
                        return NULL;
                    return t_TagAndParse::wrap_Object(TagAndParse(((t_TagAndParse *) arg)->object.this$));
                }
                static PyObject *t_TagAndParse_instance_(PyTypeObject *type, PyObject *arg)
                {
                    if (!castCheck(arg, TagAndParse::initializeClass, 0))
                        Py_RETURN_FALSE;
                    Py_RETURN_TRUE;
                }

                static int t_TagAndParse_init_(t_TagAndParse *self, PyObject *args, PyObject *kwds)
                {
                    switch (PyTuple_GET_SIZE(args)) {
                      case 0:
                        {
                            TagAndParse object((jobject) NULL);

                            INT_CALL(object = TagAndParse());
                            self->object = object;
                            break;
                        }
                        goto err;
                      case 1:
                        {
                            jboolean a0;
                            TagAndParse object((jobject) NULL);

                            if (!parseArgs(args, "Z", &a0))
                            {
                                INT_CALL(object = TagAndParse(a0));
                                self->object = object;
                                break;
                            }
                        }
                      default:
                      err:
                        PyErr_SetArgsError((PyObject *) self, "__init__", args);
                        return -1;
                    }

                    return 0;
                }

                static PyObject *t_TagAndParse_main(PyTypeObject *type, PyObject *arg)
                {
                    JArray< ::java::lang::String > a0((jobject) NULL);

                    if (!parseArg(arg, "[s", &a0))
                    {
                        OBJ_CALL(::is::iclt::icenlp::runner::TagAndParse::main(a0));
                        Py_RETURN_NONE;
                    }

                    PyErr_SetArgsError(type, "main", arg);
                    return NULL;
                }

                static PyObject *t_TagAndParse_tagText(t_TagAndParse *self, PyObject *arg)
                {
                    ::java::lang::String a0((jobject) NULL);
                    ::is::iclt::icenlp::core::tokenizer::Sentences result((jobject) NULL);

                    if (!parseArg(arg, "s", &a0))
                    {
                        OBJ_CALL(result = self->object.tagText(a0));
                        return ::is::iclt::icenlp::core::tokenizer::t_Sentences::wrap_Object(result);
                    }

                    PyErr_SetArgsError((PyObject *) self, "tagText", arg);
                    return NULL;
                }
            }
        }
    }
}
#include <jni.h>
#include "JCCEnv.h"
#include "is/iclt/icenlp/core/iceparser/Phrase_MWEP1.h"
#include "java/io/IOException.h"
#include "java/io/Reader.h"
#include "java/io/Writer.h"
#include "java/lang/Class.h"
#include "java/io/InputStream.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace is {
    namespace iclt {
        namespace icenlp {
            namespace core {
                namespace iceparser {

                    ::java::lang::Class *Phrase_MWEP1::class$ = NULL;
                    jmethodID *Phrase_MWEP1::mids$ = NULL;
                    jint Phrase_MWEP1::YYEOF = (jint) 0;
                    jint Phrase_MWEP1::YYINITIAL = (jint) 0;

                    jclass Phrase_MWEP1::initializeClass()
                    {
                        if (!class$)
                        {

                            jclass cls = (jclass) env->findClass("is/iclt/icenlp/core/iceparser/Phrase_MWEP1");

                            mids$ = new jmethodID[max_mid];
                            mids$[mid_init$_cf2e3c10] = env->getMethodID(cls, "<init>", "(Ljava/io/Reader;)V");
                            mids$[mid_init$_be2e4f90] = env->getMethodID(cls, "<init>", "(Ljava/io/InputStream;)V");
                            mids$[mid_main_4dd4540c] = env->getStaticMethodID(cls, "main", "([Ljava/lang/String;)V");
                            mids$[mid_parse_5bcd5850] = env->getMethodID(cls, "parse", "(Ljava/io/Writer;)V");
                            mids$[mid_yybegin_39c7bd3c] = env->getMethodID(cls, "yybegin", "(I)V");
                            mids$[mid_yycharat_39c7bd29] = env->getMethodID(cls, "yycharat", "(I)C");
                            mids$[mid_yyclose_54c6a166] = env->getMethodID(cls, "yyclose", "()V");
                            mids$[mid_yylength_54c6a179] = env->getMethodID(cls, "yylength", "()I");
                            mids$[mid_yylex_54c6a179] = env->getMethodID(cls, "yylex", "()I");
                            mids$[mid_yypushback_39c7bd3c] = env->getMethodID(cls, "yypushback", "(I)V");
                            mids$[mid_yyreset_cf2e3c10] = env->getMethodID(cls, "yyreset", "(Ljava/io/Reader;)V");
                            mids$[mid_yystate_54c6a179] = env->getMethodID(cls, "yystate", "()I");
                            mids$[mid_yytext_14c7b5c5] = env->getMethodID(cls, "yytext", "()Ljava/lang/String;");

                            class$ = (::java::lang::Class *) new JObject(cls);
                            cls = (jclass) class$->this$;

                            YYEOF = env->getStaticIntField(cls, "YYEOF");
                            YYINITIAL = env->getStaticIntField(cls, "YYINITIAL");
                        }
                        return (jclass) class$->this$;
                    }

                    Phrase_MWEP1::Phrase_MWEP1(const ::java::io::Reader & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_cf2e3c10, a0.this$)) {}

                    Phrase_MWEP1::Phrase_MWEP1(const ::java::io::InputStream & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_be2e4f90, a0.this$)) {}

                    void Phrase_MWEP1::main(const JArray< ::java::lang::String > & a0)
                    {
                        jclass cls = initializeClass();
                        env->callStaticVoidMethod(cls, mids$[mid_main_4dd4540c], a0.this$);
                    }

                    void Phrase_MWEP1::parse(const ::java::io::Writer & a0) const
                    {
                        env->callVoidMethod(this$, mids$[mid_parse_5bcd5850], a0.this$);
                    }

                    void Phrase_MWEP1::yybegin(jint a0) const
                    {
                        env->callVoidMethod(this$, mids$[mid_yybegin_39c7bd3c], a0);
                    }

                    jchar Phrase_MWEP1::yycharat(jint a0) const
                    {
                        return env->callCharMethod(this$, mids$[mid_yycharat_39c7bd29], a0);
                    }

                    void Phrase_MWEP1::yyclose() const
                    {
                        env->callVoidMethod(this$, mids$[mid_yyclose_54c6a166]);
                    }

                    jint Phrase_MWEP1::yylength() const
                    {
                        return env->callIntMethod(this$, mids$[mid_yylength_54c6a179]);
                    }

                    jint Phrase_MWEP1::yylex() const
                    {
                        return env->callIntMethod(this$, mids$[mid_yylex_54c6a179]);
                    }

                    void Phrase_MWEP1::yypushback(jint a0) const
                    {
                        env->callVoidMethod(this$, mids$[mid_yypushback_39c7bd3c], a0);
                    }

                    void Phrase_MWEP1::yyreset(const ::java::io::Reader & a0) const
                    {
                        env->callVoidMethod(this$, mids$[mid_yyreset_cf2e3c10], a0.this$);
                    }

                    jint Phrase_MWEP1::yystate() const
                    {
                        return env->callIntMethod(this$, mids$[mid_yystate_54c6a179]);
                    }

                    ::java::lang::String Phrase_MWEP1::yytext() const
                    {
                        return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_yytext_14c7b5c5]));
                    }
                }
            }
        }
    }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace is {
    namespace iclt {
        namespace icenlp {
            namespace core {
                namespace iceparser {
                    static PyObject *t_Phrase_MWEP1_cast_(PyTypeObject *type, PyObject *arg);
                    static PyObject *t_Phrase_MWEP1_instance_(PyTypeObject *type, PyObject *arg);
                    static int t_Phrase_MWEP1_init_(t_Phrase_MWEP1 *self, PyObject *args, PyObject *kwds);
                    static PyObject *t_Phrase_MWEP1_main(PyTypeObject *type, PyObject *arg);
                    static PyObject *t_Phrase_MWEP1_parse(t_Phrase_MWEP1 *self, PyObject *arg);
                    static PyObject *t_Phrase_MWEP1_yybegin(t_Phrase_MWEP1 *self, PyObject *arg);
                    static PyObject *t_Phrase_MWEP1_yycharat(t_Phrase_MWEP1 *self, PyObject *arg);
                    static PyObject *t_Phrase_MWEP1_yyclose(t_Phrase_MWEP1 *self);
                    static PyObject *t_Phrase_MWEP1_yylength(t_Phrase_MWEP1 *self);
                    static PyObject *t_Phrase_MWEP1_yylex(t_Phrase_MWEP1 *self);
                    static PyObject *t_Phrase_MWEP1_yypushback(t_Phrase_MWEP1 *self, PyObject *arg);
                    static PyObject *t_Phrase_MWEP1_yyreset(t_Phrase_MWEP1 *self, PyObject *arg);
                    static PyObject *t_Phrase_MWEP1_yystate(t_Phrase_MWEP1 *self);
                    static PyObject *t_Phrase_MWEP1_yytext(t_Phrase_MWEP1 *self);

                    static PyMethodDef t_Phrase_MWEP1__methods_[] = {
                        DECLARE_METHOD(t_Phrase_MWEP1, cast_, METH_O | METH_CLASS),
                        DECLARE_METHOD(t_Phrase_MWEP1, instance_, METH_O | METH_CLASS),
                        DECLARE_METHOD(t_Phrase_MWEP1, main, METH_O | METH_CLASS),
                        DECLARE_METHOD(t_Phrase_MWEP1, parse, METH_O),
                        DECLARE_METHOD(t_Phrase_MWEP1, yybegin, METH_O),
                        DECLARE_METHOD(t_Phrase_MWEP1, yycharat, METH_O),
                        DECLARE_METHOD(t_Phrase_MWEP1, yyclose, METH_NOARGS),
                        DECLARE_METHOD(t_Phrase_MWEP1, yylength, METH_NOARGS),
                        DECLARE_METHOD(t_Phrase_MWEP1, yylex, METH_NOARGS),
                        DECLARE_METHOD(t_Phrase_MWEP1, yypushback, METH_O),
                        DECLARE_METHOD(t_Phrase_MWEP1, yyreset, METH_O),
                        DECLARE_METHOD(t_Phrase_MWEP1, yystate, METH_NOARGS),
                        DECLARE_METHOD(t_Phrase_MWEP1, yytext, METH_NOARGS),
                        { NULL, NULL, 0, NULL }
                    };

                    DECLARE_TYPE(Phrase_MWEP1, t_Phrase_MWEP1, ::java::lang::Object, Phrase_MWEP1, t_Phrase_MWEP1_init_, 0, 0, 0, 0, 0);

                    void t_Phrase_MWEP1::install(PyObject *module)
                    {
                        installType(&PY_TYPE(Phrase_MWEP1), module, "Phrase_MWEP1", 0);
                    }

                    void t_Phrase_MWEP1::initialize(PyObject *module)
                    {
                        PyDict_SetItemString(PY_TYPE(Phrase_MWEP1).tp_dict, "class_", make_descriptor(Phrase_MWEP1::initializeClass, 1));
                        PyDict_SetItemString(PY_TYPE(Phrase_MWEP1).tp_dict, "wrapfn_", make_descriptor(t_Phrase_MWEP1::wrap_jobject));
                        PyDict_SetItemString(PY_TYPE(Phrase_MWEP1).tp_dict, "boxfn_", make_descriptor(boxObject));
                        Phrase_MWEP1::initializeClass();
                        PyDict_SetItemString(PY_TYPE(Phrase_MWEP1).tp_dict, "YYEOF", make_descriptor(Phrase_MWEP1::YYEOF));
                        PyDict_SetItemString(PY_TYPE(Phrase_MWEP1).tp_dict, "YYINITIAL", make_descriptor(Phrase_MWEP1::YYINITIAL));
                    }

                    static PyObject *t_Phrase_MWEP1_cast_(PyTypeObject *type, PyObject *arg)
                    {
                        if (!(arg = castCheck(arg, Phrase_MWEP1::initializeClass, 1)))
                            return NULL;
                        return t_Phrase_MWEP1::wrap_Object(Phrase_MWEP1(((t_Phrase_MWEP1 *) arg)->object.this$));
                    }
                    static PyObject *t_Phrase_MWEP1_instance_(PyTypeObject *type, PyObject *arg)
                    {
                        if (!castCheck(arg, Phrase_MWEP1::initializeClass, 0))
                            Py_RETURN_FALSE;
                        Py_RETURN_TRUE;
                    }

                    static int t_Phrase_MWEP1_init_(t_Phrase_MWEP1 *self, PyObject *args, PyObject *kwds)
                    {
                        switch (PyTuple_GET_SIZE(args)) {
                          case 1:
                            {
                                ::java::io::Reader a0((jobject) NULL);
                                Phrase_MWEP1 object((jobject) NULL);

                                if (!parseArgs(args, "k", ::java::io::Reader::initializeClass, &a0))
                                {
                                    INT_CALL(object = Phrase_MWEP1(a0));
                                    self->object = object;
                                    break;
                                }
                            }
                            {
                                ::java::io::InputStream a0((jobject) NULL);
                                Phrase_MWEP1 object((jobject) NULL);

                                if (!parseArgs(args, "k", ::java::io::InputStream::initializeClass, &a0))
                                {
                                    INT_CALL(object = Phrase_MWEP1(a0));
                                    self->object = object;
                                    break;
                                }
                            }
                          default:
                            PyErr_SetArgsError((PyObject *) self, "__init__", args);
                            return -1;
                        }

                        return 0;
                    }

                    static PyObject *t_Phrase_MWEP1_main(PyTypeObject *type, PyObject *arg)
                    {
                        JArray< ::java::lang::String > a0((jobject) NULL);

                        if (!parseArg(arg, "[s", &a0))
                        {
                            OBJ_CALL(::is::iclt::icenlp::core::iceparser::Phrase_MWEP1::main(a0));
                            Py_RETURN_NONE;
                        }

                        PyErr_SetArgsError(type, "main", arg);
                        return NULL;
                    }

                    static PyObject *t_Phrase_MWEP1_parse(t_Phrase_MWEP1 *self, PyObject *arg)
                    {
                        ::java::io::Writer a0((jobject) NULL);

                        if (!parseArg(arg, "k", ::java::io::Writer::initializeClass, &a0))
                        {
                            OBJ_CALL(self->object.parse(a0));
                            Py_RETURN_NONE;
                        }

                        PyErr_SetArgsError((PyObject *) self, "parse", arg);
                        return NULL;
                    }

                    static PyObject *t_Phrase_MWEP1_yybegin(t_Phrase_MWEP1 *self, PyObject *arg)
                    {
                        jint a0;

                        if (!parseArg(arg, "I", &a0))
                        {
                            OBJ_CALL(self->object.yybegin(a0));
                            Py_RETURN_NONE;
                        }

                        PyErr_SetArgsError((PyObject *) self, "yybegin", arg);
                        return NULL;
                    }

                    static PyObject *t_Phrase_MWEP1_yycharat(t_Phrase_MWEP1 *self, PyObject *arg)
                    {
                        jint a0;
                        jchar result;

                        if (!parseArg(arg, "I", &a0))
                        {
                            OBJ_CALL(result = self->object.yycharat(a0));
                            return PyUnicode_FromUnicode((Py_UNICODE *) &result, 1);
                        }

                        PyErr_SetArgsError((PyObject *) self, "yycharat", arg);
                        return NULL;
                    }

                    static PyObject *t_Phrase_MWEP1_yyclose(t_Phrase_MWEP1 *self)
                    {
                        OBJ_CALL(self->object.yyclose());
                        Py_RETURN_NONE;
                    }

                    static PyObject *t_Phrase_MWEP1_yylength(t_Phrase_MWEP1 *self)
                    {
                        jint result;
                        OBJ_CALL(result = self->object.yylength());
                        return PyInt_FromLong((long) result);
                    }

                    static PyObject *t_Phrase_MWEP1_yylex(t_Phrase_MWEP1 *self)
                    {
                        jint result;
                        OBJ_CALL(result = self->object.yylex());
                        return PyInt_FromLong((long) result);
                    }

                    static PyObject *t_Phrase_MWEP1_yypushback(t_Phrase_MWEP1 *self, PyObject *arg)
                    {
                        jint a0;

                        if (!parseArg(arg, "I", &a0))
                        {
                            OBJ_CALL(self->object.yypushback(a0));
                            Py_RETURN_NONE;
                        }

                        PyErr_SetArgsError((PyObject *) self, "yypushback", arg);
                        return NULL;
                    }

                    static PyObject *t_Phrase_MWEP1_yyreset(t_Phrase_MWEP1 *self, PyObject *arg)
                    {
                        ::java::io::Reader a0((jobject) NULL);

                        if (!parseArg(arg, "k", ::java::io::Reader::initializeClass, &a0))
                        {
                            OBJ_CALL(self->object.yyreset(a0));
                            Py_RETURN_NONE;
                        }

                        PyErr_SetArgsError((PyObject *) self, "yyreset", arg);
                        return NULL;
                    }

                    static PyObject *t_Phrase_MWEP1_yystate(t_Phrase_MWEP1 *self)
                    {
                        jint result;
                        OBJ_CALL(result = self->object.yystate());
                        return PyInt_FromLong((long) result);
                    }

                    static PyObject *t_Phrase_MWEP1_yytext(t_Phrase_MWEP1 *self)
                    {
                        ::java::lang::String result((jobject) NULL);
                        OBJ_CALL(result = self->object.yytext());
                        return j2p(result);
                    }
                }
            }
        }
    }
}
#include <jni.h>
#include "JCCEnv.h"
#include "is/iclt/icenlp/core/iceparser/Phrase_AP.h"
#include "java/io/IOException.h"
#include "java/io/Reader.h"
#include "java/io/Writer.h"
#include "java/lang/Class.h"
#include "java/io/InputStream.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace is {
    namespace iclt {
        namespace icenlp {
            namespace core {
                namespace iceparser {

                    ::java::lang::Class *Phrase_AP::class$ = NULL;
                    jmethodID *Phrase_AP::mids$ = NULL;
                    jint Phrase_AP::YYEOF = (jint) 0;
                    jint Phrase_AP::YYINITIAL = (jint) 0;

                    jclass Phrase_AP::initializeClass()
                    {
                        if (!class$)
                        {

                            jclass cls = (jclass) env->findClass("is/iclt/icenlp/core/iceparser/Phrase_AP");

                            mids$ = new jmethodID[max_mid];
                            mids$[mid_init$_cf2e3c10] = env->getMethodID(cls, "<init>", "(Ljava/io/Reader;)V");
                            mids$[mid_init$_be2e4f90] = env->getMethodID(cls, "<init>", "(Ljava/io/InputStream;)V");
                            mids$[mid_main_4dd4540c] = env->getStaticMethodID(cls, "main", "([Ljava/lang/String;)V");
                            mids$[mid_parse_5bcd5850] = env->getMethodID(cls, "parse", "(Ljava/io/Writer;)V");
                            mids$[mid_yybegin_39c7bd3c] = env->getMethodID(cls, "yybegin", "(I)V");
                            mids$[mid_yycharat_39c7bd29] = env->getMethodID(cls, "yycharat", "(I)C");
                            mids$[mid_yyclose_54c6a166] = env->getMethodID(cls, "yyclose", "()V");
                            mids$[mid_yylength_54c6a179] = env->getMethodID(cls, "yylength", "()I");
                            mids$[mid_yylex_54c6a179] = env->getMethodID(cls, "yylex", "()I");
                            mids$[mid_yypushback_39c7bd3c] = env->getMethodID(cls, "yypushback", "(I)V");
                            mids$[mid_yyreset_cf2e3c10] = env->getMethodID(cls, "yyreset", "(Ljava/io/Reader;)V");
                            mids$[mid_yystate_54c6a179] = env->getMethodID(cls, "yystate", "()I");
                            mids$[mid_yytext_14c7b5c5] = env->getMethodID(cls, "yytext", "()Ljava/lang/String;");

                            class$ = (::java::lang::Class *) new JObject(cls);
                            cls = (jclass) class$->this$;

                            YYEOF = env->getStaticIntField(cls, "YYEOF");
                            YYINITIAL = env->getStaticIntField(cls, "YYINITIAL");
                        }
                        return (jclass) class$->this$;
                    }

                    Phrase_AP::Phrase_AP(const ::java::io::Reader & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_cf2e3c10, a0.this$)) {}

                    Phrase_AP::Phrase_AP(const ::java::io::InputStream & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_be2e4f90, a0.this$)) {}

                    void Phrase_AP::main(const JArray< ::java::lang::String > & a0)
                    {
                        jclass cls = initializeClass();
                        env->callStaticVoidMethod(cls, mids$[mid_main_4dd4540c], a0.this$);
                    }

                    void Phrase_AP::parse(const ::java::io::Writer & a0) const
                    {
                        env->callVoidMethod(this$, mids$[mid_parse_5bcd5850], a0.this$);
                    }

                    void Phrase_AP::yybegin(jint a0) const
                    {
                        env->callVoidMethod(this$, mids$[mid_yybegin_39c7bd3c], a0);
                    }

                    jchar Phrase_AP::yycharat(jint a0) const
                    {
                        return env->callCharMethod(this$, mids$[mid_yycharat_39c7bd29], a0);
                    }

                    void Phrase_AP::yyclose() const
                    {
                        env->callVoidMethod(this$, mids$[mid_yyclose_54c6a166]);
                    }

                    jint Phrase_AP::yylength() const
                    {
                        return env->callIntMethod(this$, mids$[mid_yylength_54c6a179]);
                    }

                    jint Phrase_AP::yylex() const
                    {
                        return env->callIntMethod(this$, mids$[mid_yylex_54c6a179]);
                    }

                    void Phrase_AP::yypushback(jint a0) const
                    {
                        env->callVoidMethod(this$, mids$[mid_yypushback_39c7bd3c], a0);
                    }

                    void Phrase_AP::yyreset(const ::java::io::Reader & a0) const
                    {
                        env->callVoidMethod(this$, mids$[mid_yyreset_cf2e3c10], a0.this$);
                    }

                    jint Phrase_AP::yystate() const
                    {
                        return env->callIntMethod(this$, mids$[mid_yystate_54c6a179]);
                    }

                    ::java::lang::String Phrase_AP::yytext() const
                    {
                        return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_yytext_14c7b5c5]));
                    }
                }
            }
        }
    }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace is {
    namespace iclt {
        namespace icenlp {
            namespace core {
                namespace iceparser {
                    static PyObject *t_Phrase_AP_cast_(PyTypeObject *type, PyObject *arg);
                    static PyObject *t_Phrase_AP_instance_(PyTypeObject *type, PyObject *arg);
                    static int t_Phrase_AP_init_(t_Phrase_AP *self, PyObject *args, PyObject *kwds);
                    static PyObject *t_Phrase_AP_main(PyTypeObject *type, PyObject *arg);
                    static PyObject *t_Phrase_AP_parse(t_Phrase_AP *self, PyObject *arg);
                    static PyObject *t_Phrase_AP_yybegin(t_Phrase_AP *self, PyObject *arg);
                    static PyObject *t_Phrase_AP_yycharat(t_Phrase_AP *self, PyObject *arg);
                    static PyObject *t_Phrase_AP_yyclose(t_Phrase_AP *self);
                    static PyObject *t_Phrase_AP_yylength(t_Phrase_AP *self);
                    static PyObject *t_Phrase_AP_yylex(t_Phrase_AP *self);
                    static PyObject *t_Phrase_AP_yypushback(t_Phrase_AP *self, PyObject *arg);
                    static PyObject *t_Phrase_AP_yyreset(t_Phrase_AP *self, PyObject *arg);
                    static PyObject *t_Phrase_AP_yystate(t_Phrase_AP *self);
                    static PyObject *t_Phrase_AP_yytext(t_Phrase_AP *self);

                    static PyMethodDef t_Phrase_AP__methods_[] = {
                        DECLARE_METHOD(t_Phrase_AP, cast_, METH_O | METH_CLASS),
                        DECLARE_METHOD(t_Phrase_AP, instance_, METH_O | METH_CLASS),
                        DECLARE_METHOD(t_Phrase_AP, main, METH_O | METH_CLASS),
                        DECLARE_METHOD(t_Phrase_AP, parse, METH_O),
                        DECLARE_METHOD(t_Phrase_AP, yybegin, METH_O),
                        DECLARE_METHOD(t_Phrase_AP, yycharat, METH_O),
                        DECLARE_METHOD(t_Phrase_AP, yyclose, METH_NOARGS),
                        DECLARE_METHOD(t_Phrase_AP, yylength, METH_NOARGS),
                        DECLARE_METHOD(t_Phrase_AP, yylex, METH_NOARGS),
                        DECLARE_METHOD(t_Phrase_AP, yypushback, METH_O),
                        DECLARE_METHOD(t_Phrase_AP, yyreset, METH_O),
                        DECLARE_METHOD(t_Phrase_AP, yystate, METH_NOARGS),
                        DECLARE_METHOD(t_Phrase_AP, yytext, METH_NOARGS),
                        { NULL, NULL, 0, NULL }
                    };

                    DECLARE_TYPE(Phrase_AP, t_Phrase_AP, ::java::lang::Object, Phrase_AP, t_Phrase_AP_init_, 0, 0, 0, 0, 0);

                    void t_Phrase_AP::install(PyObject *module)
                    {
                        installType(&PY_TYPE(Phrase_AP), module, "Phrase_AP", 0);
                    }

                    void t_Phrase_AP::initialize(PyObject *module)
                    {
                        PyDict_SetItemString(PY_TYPE(Phrase_AP).tp_dict, "class_", make_descriptor(Phrase_AP::initializeClass, 1));
                        PyDict_SetItemString(PY_TYPE(Phrase_AP).tp_dict, "wrapfn_", make_descriptor(t_Phrase_AP::wrap_jobject));
                        PyDict_SetItemString(PY_TYPE(Phrase_AP).tp_dict, "boxfn_", make_descriptor(boxObject));
                        Phrase_AP::initializeClass();
                        PyDict_SetItemString(PY_TYPE(Phrase_AP).tp_dict, "YYEOF", make_descriptor(Phrase_AP::YYEOF));
                        PyDict_SetItemString(PY_TYPE(Phrase_AP).tp_dict, "YYINITIAL", make_descriptor(Phrase_AP::YYINITIAL));
                    }

                    static PyObject *t_Phrase_AP_cast_(PyTypeObject *type, PyObject *arg)
                    {
                        if (!(arg = castCheck(arg, Phrase_AP::initializeClass, 1)))
                            return NULL;
                        return t_Phrase_AP::wrap_Object(Phrase_AP(((t_Phrase_AP *) arg)->object.this$));
                    }
                    static PyObject *t_Phrase_AP_instance_(PyTypeObject *type, PyObject *arg)
                    {
                        if (!castCheck(arg, Phrase_AP::initializeClass, 0))
                            Py_RETURN_FALSE;
                        Py_RETURN_TRUE;
                    }

                    static int t_Phrase_AP_init_(t_Phrase_AP *self, PyObject *args, PyObject *kwds)
                    {
                        switch (PyTuple_GET_SIZE(args)) {
                          case 1:
                            {
                                ::java::io::Reader a0((jobject) NULL);
                                Phrase_AP object((jobject) NULL);

                                if (!parseArgs(args, "k", ::java::io::Reader::initializeClass, &a0))
                                {
                                    INT_CALL(object = Phrase_AP(a0));
                                    self->object = object;
                                    break;
                                }
                            }
                            {
                                ::java::io::InputStream a0((jobject) NULL);
                                Phrase_AP object((jobject) NULL);

                                if (!parseArgs(args, "k", ::java::io::InputStream::initializeClass, &a0))
                                {
                                    INT_CALL(object = Phrase_AP(a0));
                                    self->object = object;
                                    break;
                                }
                            }
                          default:
                            PyErr_SetArgsError((PyObject *) self, "__init__", args);
                            return -1;
                        }

                        return 0;
                    }

                    static PyObject *t_Phrase_AP_main(PyTypeObject *type, PyObject *arg)
                    {
                        JArray< ::java::lang::String > a0((jobject) NULL);

                        if (!parseArg(arg, "[s", &a0))
                        {
                            OBJ_CALL(::is::iclt::icenlp::core::iceparser::Phrase_AP::main(a0));
                            Py_RETURN_NONE;
                        }

                        PyErr_SetArgsError(type, "main", arg);
                        return NULL;
                    }

                    static PyObject *t_Phrase_AP_parse(t_Phrase_AP *self, PyObject *arg)
                    {
                        ::java::io::Writer a0((jobject) NULL);

                        if (!parseArg(arg, "k", ::java::io::Writer::initializeClass, &a0))
                        {
                            OBJ_CALL(self->object.parse(a0));
                            Py_RETURN_NONE;
                        }

                        PyErr_SetArgsError((PyObject *) self, "parse", arg);
                        return NULL;
                    }

                    static PyObject *t_Phrase_AP_yybegin(t_Phrase_AP *self, PyObject *arg)
                    {
                        jint a0;

                        if (!parseArg(arg, "I", &a0))
                        {
                            OBJ_CALL(self->object.yybegin(a0));
                            Py_RETURN_NONE;
                        }

                        PyErr_SetArgsError((PyObject *) self, "yybegin", arg);
                        return NULL;
                    }

                    static PyObject *t_Phrase_AP_yycharat(t_Phrase_AP *self, PyObject *arg)
                    {
                        jint a0;
                        jchar result;

                        if (!parseArg(arg, "I", &a0))
                        {
                            OBJ_CALL(result = self->object.yycharat(a0));
                            return PyUnicode_FromUnicode((Py_UNICODE *) &result, 1);
                        }

                        PyErr_SetArgsError((PyObject *) self, "yycharat", arg);
                        return NULL;
                    }

                    static PyObject *t_Phrase_AP_yyclose(t_Phrase_AP *self)
                    {
                        OBJ_CALL(self->object.yyclose());
                        Py_RETURN_NONE;
                    }

                    static PyObject *t_Phrase_AP_yylength(t_Phrase_AP *self)
                    {
                        jint result;
                        OBJ_CALL(result = self->object.yylength());
                        return PyInt_FromLong((long) result);
                    }

                    static PyObject *t_Phrase_AP_yylex(t_Phrase_AP *self)
                    {
                        jint result;
                        OBJ_CALL(result = self->object.yylex());
                        return PyInt_FromLong((long) result);
                    }

                    static PyObject *t_Phrase_AP_yypushback(t_Phrase_AP *self, PyObject *arg)
                    {
                        jint a0;

                        if (!parseArg(arg, "I", &a0))
                        {
                            OBJ_CALL(self->object.yypushback(a0));
                            Py_RETURN_NONE;
                        }

                        PyErr_SetArgsError((PyObject *) self, "yypushback", arg);
                        return NULL;
                    }

                    static PyObject *t_Phrase_AP_yyreset(t_Phrase_AP *self, PyObject *arg)
                    {
                        ::java::io::Reader a0((jobject) NULL);

                        if (!parseArg(arg, "k", ::java::io::Reader::initializeClass, &a0))
                        {
                            OBJ_CALL(self->object.yyreset(a0));
                            Py_RETURN_NONE;
                        }

                        PyErr_SetArgsError((PyObject *) self, "yyreset", arg);
                        return NULL;
                    }

                    static PyObject *t_Phrase_AP_yystate(t_Phrase_AP *self)
                    {
                        jint result;
                        OBJ_CALL(result = self->object.yystate());
                        return PyInt_FromLong((long) result);
                    }

                    static PyObject *t_Phrase_AP_yytext(t_Phrase_AP *self)
                    {
                        ::java::lang::String result((jobject) NULL);
                        OBJ_CALL(result = self->object.yytext());
                        return j2p(result);
                    }
                }
            }
        }
    }
}
#include <jni.h>
#include "JCCEnv.h"
#include "is/iclt/icenlp/core/icemorphy/MorphoRuleNounAdjective.h"
#include "is/iclt/icenlp/core/utils/IceTag$WordClass.h"
#include "is/iclt/icenlp/core/icemorphy/IceMorphy$MorphoClass.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace is {
    namespace iclt {
        namespace icenlp {
            namespace core {
                namespace icemorphy {

                    ::java::lang::Class *MorphoRuleNounAdjective::class$ = NULL;
                    jmethodID *MorphoRuleNounAdjective::mids$ = NULL;

                    jclass MorphoRuleNounAdjective::initializeClass()
                    {
                        if (!class$)
                        {

                            jclass cls = (jclass) env->findClass("is/iclt/icenlp/core/icemorphy/MorphoRuleNounAdjective");

                            mids$ = new jmethodID[max_mid];
                            mids$[mid_init$_a96b4742] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;ILis/iclt/icenlp/core/icemorphy/IceMorphy$MorphoClass;ZZZZCC)V");
                            mids$[mid_init$_ca3dbd90] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;ILis/iclt/icenlp/core/icemorphy/IceMorphy$MorphoClass;Lis/iclt/icenlp/core/utils/IceTag$WordClass;ZZZZCCC)V");
                            mids$[mid_init$_e7fdcd01] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;ILis/iclt/icenlp/core/icemorphy/IceMorphy$MorphoClass;Lis/iclt/icenlp/core/utils/IceTag$WordClass;ZZZZCCCZ)V");

                            class$ = (::java::lang::Class *) new JObject(cls);
                        }
                        return (jclass) class$->this$;
                    }

                    MorphoRuleNounAdjective::MorphoRuleNounAdjective(const ::java::lang::String & a0, jint a1, const ::is::iclt::icenlp::core::icemorphy::IceMorphy$MorphoClass & a2, jboolean a3, jboolean a4, jboolean a5, jboolean a6, jchar a7, jchar a8) : ::is::iclt::icenlp::core::icemorphy::MorphoRule(env->newObject(initializeClass, &mids$, mid_init$_a96b4742, a0.this$, a1, a2.this$, a3, a4, a5, a6, a7, a8)) {}

                    MorphoRuleNounAdjective::MorphoRuleNounAdjective(const ::java::lang::String & a0, jint a1, const ::is::iclt::icenlp::core::icemorphy::IceMorphy$MorphoClass & a2, const ::is::iclt::icenlp::core::utils::IceTag$WordClass & a3, jboolean a4, jboolean a5, jboolean a6, jboolean a7, jchar a8, jchar a9, jchar a10) : ::is::iclt::icenlp::core::icemorphy::MorphoRule(env->newObject(initializeClass, &mids$, mid_init$_ca3dbd90, a0.this$, a1, a2.this$, a3.this$, a4, a5, a6, a7, a8, a9, a10)) {}

                    MorphoRuleNounAdjective::MorphoRuleNounAdjective(const ::java::lang::String & a0, jint a1, const ::is::iclt::icenlp::core::icemorphy::IceMorphy$MorphoClass & a2, const ::is::iclt::icenlp::core::utils::IceTag$WordClass & a3, jboolean a4, jboolean a5, jboolean a6, jboolean a7, jchar a8, jchar a9, jchar a10, jboolean a11) : ::is::iclt::icenlp::core::icemorphy::MorphoRule(env->newObject(initializeClass, &mids$, mid_init$_e7fdcd01, a0.this$, a1, a2.this$, a3.this$, a4, a5, a6, a7, a8, a9, a10, a11)) {}
                }
            }
        }
    }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace is {
    namespace iclt {
        namespace icenlp {
            namespace core {
                namespace icemorphy {
                    static PyObject *t_MorphoRuleNounAdjective_cast_(PyTypeObject *type, PyObject *arg);
                    static PyObject *t_MorphoRuleNounAdjective_instance_(PyTypeObject *type, PyObject *arg);
                    static int t_MorphoRuleNounAdjective_init_(t_MorphoRuleNounAdjective *self, PyObject *args, PyObject *kwds);

                    static PyMethodDef t_MorphoRuleNounAdjective__methods_[] = {
                        DECLARE_METHOD(t_MorphoRuleNounAdjective, cast_, METH_O | METH_CLASS),
                        DECLARE_METHOD(t_MorphoRuleNounAdjective, instance_, METH_O | METH_CLASS),
                        { NULL, NULL, 0, NULL }
                    };

                    DECLARE_TYPE(MorphoRuleNounAdjective, t_MorphoRuleNounAdjective, ::is::iclt::icenlp::core::icemorphy::MorphoRule, MorphoRuleNounAdjective, t_MorphoRuleNounAdjective_init_, 0, 0, 0, 0, 0);

                    void t_MorphoRuleNounAdjective::install(PyObject *module)
                    {
                        installType(&PY_TYPE(MorphoRuleNounAdjective), module, "MorphoRuleNounAdjective", 0);
                    }

                    void t_MorphoRuleNounAdjective::initialize(PyObject *module)
                    {
                        PyDict_SetItemString(PY_TYPE(MorphoRuleNounAdjective).tp_dict, "class_", make_descriptor(MorphoRuleNounAdjective::initializeClass, 1));
                        PyDict_SetItemString(PY_TYPE(MorphoRuleNounAdjective).tp_dict, "wrapfn_", make_descriptor(t_MorphoRuleNounAdjective::wrap_jobject));
                        PyDict_SetItemString(PY_TYPE(MorphoRuleNounAdjective).tp_dict, "boxfn_", make_descriptor(boxObject));
                    }

                    static PyObject *t_MorphoRuleNounAdjective_cast_(PyTypeObject *type, PyObject *arg)
                    {
                        if (!(arg = castCheck(arg, MorphoRuleNounAdjective::initializeClass, 1)))
                            return NULL;
                        return t_MorphoRuleNounAdjective::wrap_Object(MorphoRuleNounAdjective(((t_MorphoRuleNounAdjective *) arg)->object.this$));
                    }
                    static PyObject *t_MorphoRuleNounAdjective_instance_(PyTypeObject *type, PyObject *arg)
                    {
                        if (!castCheck(arg, MorphoRuleNounAdjective::initializeClass, 0))
                            Py_RETURN_FALSE;
                        Py_RETURN_TRUE;
                    }

                    static int t_MorphoRuleNounAdjective_init_(t_MorphoRuleNounAdjective *self, PyObject *args, PyObject *kwds)
                    {
                        switch (PyTuple_GET_SIZE(args)) {
                          case 9:
                            {
                                ::java::lang::String a0((jobject) NULL);
                                jint a1;
                                ::is::iclt::icenlp::core::icemorphy::IceMorphy$MorphoClass a2((jobject) NULL);
                                jboolean a3;
                                jboolean a4;
                                jboolean a5;
                                jboolean a6;
                                jchar a7;
                                jchar a8;
                                MorphoRuleNounAdjective object((jobject) NULL);

                                if (!parseArgs(args, "sIkZZZZCC", ::is::iclt::icenlp::core::icemorphy::IceMorphy$MorphoClass::initializeClass, &a0, &a1, &a2, &a3, &a4, &a5, &a6, &a7, &a8))
                                {
                                    INT_CALL(object = MorphoRuleNounAdjective(a0, a1, a2, a3, a4, a5, a6, a7, a8));
                                    self->object = object;
                                    break;
                                }
                            }
                            goto err;
                          case 11:
                            {
                                ::java::lang::String a0((jobject) NULL);
                                jint a1;
                                ::is::iclt::icenlp::core::icemorphy::IceMorphy$MorphoClass a2((jobject) NULL);
                                ::is::iclt::icenlp::core::utils::IceTag$WordClass a3((jobject) NULL);
                                jboolean a4;
                                jboolean a5;
                                jboolean a6;
                                jboolean a7;
                                jchar a8;
                                jchar a9;
                                jchar a10;
                                MorphoRuleNounAdjective object((jobject) NULL);

                                if (!parseArgs(args, "sIkkZZZZCCC", ::is::iclt::icenlp::core::icemorphy::IceMorphy$MorphoClass::initializeClass, ::is::iclt::icenlp::core::utils::IceTag$WordClass::initializeClass, &a0, &a1, &a2, &a3, &a4, &a5, &a6, &a7, &a8, &a9, &a10))
                                {
                                    INT_CALL(object = MorphoRuleNounAdjective(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10));
                                    self->object = object;
                                    break;
                                }
                            }
                            goto err;
                          case 12:
                            {
                                ::java::lang::String a0((jobject) NULL);
                                jint a1;
                                ::is::iclt::icenlp::core::icemorphy::IceMorphy$MorphoClass a2((jobject) NULL);
                                ::is::iclt::icenlp::core::utils::IceTag$WordClass a3((jobject) NULL);
                                jboolean a4;
                                jboolean a5;
                                jboolean a6;
                                jboolean a7;
                                jchar a8;
                                jchar a9;
                                jchar a10;
                                jboolean a11;
                                MorphoRuleNounAdjective object((jobject) NULL);

                                if (!parseArgs(args, "sIkkZZZZCCCZ", ::is::iclt::icenlp::core::icemorphy::IceMorphy$MorphoClass::initializeClass, ::is::iclt::icenlp::core::utils::IceTag$WordClass::initializeClass, &a0, &a1, &a2, &a3, &a4, &a5, &a6, &a7, &a8, &a9, &a10, &a11))
                                {
                                    INT_CALL(object = MorphoRuleNounAdjective(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11));
                                    self->object = object;
                                    break;
                                }
                            }
                          default:
                          err:
                            PyErr_SetArgsError((PyObject *) self, "__init__", args);
                            return -1;
                        }

                        return 0;
                    }
                }
            }
        }
    }
}
#include <jni.h>
#include "JCCEnv.h"
#include "is/iclt/icenlp/runner/RunIceParser.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace is {
    namespace iclt {
        namespace icenlp {
            namespace runner {

                ::java::lang::Class *RunIceParser::class$ = NULL;
                jmethodID *RunIceParser::mids$ = NULL;

                jclass RunIceParser::initializeClass()
                {
                    if (!class$)
                    {

                        jclass cls = (jclass) env->findClass("is/iclt/icenlp/runner/RunIceParser");

                        mids$ = new jmethodID[max_mid];
                        mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                        mids$[mid_getParam_4dd4540c] = env->getMethodID(cls, "getParam", "([Ljava/lang/String;)V");
                        mids$[mid_main_4dd4540c] = env->getStaticMethodID(cls, "main", "([Ljava/lang/String;)V");

                        class$ = (::java::lang::Class *) new JObject(cls);
                    }
                    return (jclass) class$->this$;
                }

                RunIceParser::RunIceParser() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

                void RunIceParser::getParam(const JArray< ::java::lang::String > & a0) const
                {
                    env->callVoidMethod(this$, mids$[mid_getParam_4dd4540c], a0.this$);
                }

                void RunIceParser::main(const JArray< ::java::lang::String > & a0)
                {
                    jclass cls = initializeClass();
                    env->callStaticVoidMethod(cls, mids$[mid_main_4dd4540c], a0.this$);
                }
            }
        }
    }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace is {
    namespace iclt {
        namespace icenlp {
            namespace runner {
                static PyObject *t_RunIceParser_cast_(PyTypeObject *type, PyObject *arg);
                static PyObject *t_RunIceParser_instance_(PyTypeObject *type, PyObject *arg);
                static int t_RunIceParser_init_(t_RunIceParser *self, PyObject *args, PyObject *kwds);
                static PyObject *t_RunIceParser_getParam(t_RunIceParser *self, PyObject *arg);
                static PyObject *t_RunIceParser_main(PyTypeObject *type, PyObject *arg);

                static PyMethodDef t_RunIceParser__methods_[] = {
                    DECLARE_METHOD(t_RunIceParser, cast_, METH_O | METH_CLASS),
                    DECLARE_METHOD(t_RunIceParser, instance_, METH_O | METH_CLASS),
                    DECLARE_METHOD(t_RunIceParser, getParam, METH_O),
                    DECLARE_METHOD(t_RunIceParser, main, METH_O | METH_CLASS),
                    { NULL, NULL, 0, NULL }
                };

                DECLARE_TYPE(RunIceParser, t_RunIceParser, ::java::lang::Object, RunIceParser, t_RunIceParser_init_, 0, 0, 0, 0, 0);

                void t_RunIceParser::install(PyObject *module)
                {
                    installType(&PY_TYPE(RunIceParser), module, "RunIceParser", 0);
                }

                void t_RunIceParser::initialize(PyObject *module)
                {
                    PyDict_SetItemString(PY_TYPE(RunIceParser).tp_dict, "class_", make_descriptor(RunIceParser::initializeClass, 1));
                    PyDict_SetItemString(PY_TYPE(RunIceParser).tp_dict, "wrapfn_", make_descriptor(t_RunIceParser::wrap_jobject));
                    PyDict_SetItemString(PY_TYPE(RunIceParser).tp_dict, "boxfn_", make_descriptor(boxObject));
                }

                static PyObject *t_RunIceParser_cast_(PyTypeObject *type, PyObject *arg)
                {
                    if (!(arg = castCheck(arg, RunIceParser::initializeClass, 1)))
                        return NULL;
                    return t_RunIceParser::wrap_Object(RunIceParser(((t_RunIceParser *) arg)->object.this$));
                }
                static PyObject *t_RunIceParser_instance_(PyTypeObject *type, PyObject *arg)
                {
                    if (!castCheck(arg, RunIceParser::initializeClass, 0))
                        Py_RETURN_FALSE;
                    Py_RETURN_TRUE;
                }

                static int t_RunIceParser_init_(t_RunIceParser *self, PyObject *args, PyObject *kwds)
                {
                    RunIceParser object((jobject) NULL);

                    INT_CALL(object = RunIceParser());
                    self->object = object;

                    return 0;
                }

                static PyObject *t_RunIceParser_getParam(t_RunIceParser *self, PyObject *arg)
                {
                    JArray< ::java::lang::String > a0((jobject) NULL);

                    if (!parseArg(arg, "[s", &a0))
                    {
                        OBJ_CALL(self->object.getParam(a0));
                        Py_RETURN_NONE;
                    }

                    PyErr_SetArgsError((PyObject *) self, "getParam", arg);
                    return NULL;
                }

                static PyObject *t_RunIceParser_main(PyTypeObject *type, PyObject *arg)
                {
                    JArray< ::java::lang::String > a0((jobject) NULL);

                    if (!parseArg(arg, "[s", &a0))
                    {
                        OBJ_CALL(::is::iclt::icenlp::runner::RunIceParser::main(a0));
                        Py_RETURN_NONE;
                    }

                    PyErr_SetArgsError(type, "main", arg);
                    return NULL;
                }
            }
        }
    }
}
#include <jni.h>
#include "JCCEnv.h"
#include "is/iclt/icenlp/core/icetagger/IceTaggerOutputApertium.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "is/iclt/icenlp/core/tokenizer/IceTokenTags.h"
#include "JArray.h"

namespace is {
    namespace iclt {
        namespace icenlp {
            namespace core {
                namespace icetagger {

                    ::java::lang::Class *IceTaggerOutputApertium::class$ = NULL;
                    jmethodID *IceTaggerOutputApertium::mids$ = NULL;

                    jclass IceTaggerOutputApertium::initializeClass()
                    {
                        if (!class$)
                        {

                            jclass cls = (jclass) env->findClass("is/iclt/icenlp/core/icetagger/IceTaggerOutputApertium");

                            mids$ = new jmethodID[max_mid];
                            mids$[mid_init$_e0d3b7fb] = env->getMethodID(cls, "<init>", "(ILjava/lang/String;ZZLjava/lang/String;Z)V");
                            mids$[mid_buildOutput_12d5ebc7] = env->getMethodID(cls, "buildOutput", "(Lis/iclt/icenlp/core/tokenizer/IceTokenTags;II)Ljava/lang/String;");

                            class$ = (::java::lang::Class *) new JObject(cls);
                        }
                        return (jclass) class$->this$;
                    }

                    IceTaggerOutputApertium::IceTaggerOutputApertium(jint a0, const ::java::lang::String & a1, jboolean a2, jboolean a3, const ::java::lang::String & a4, jboolean a5) : ::is::iclt::icenlp::core::icetagger::IceTaggerOutput(env->newObject(initializeClass, &mids$, mid_init$_e0d3b7fb, a0, a1.this$, a2, a3, a4.this$, a5)) {}

                    ::java::lang::String IceTaggerOutputApertium::buildOutput(const ::is::iclt::icenlp::core::tokenizer::IceTokenTags & a0, jint a1, jint a2) const
                    {
                        return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_buildOutput_12d5ebc7], a0.this$, a1, a2));
                    }
                }
            }
        }
    }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace is {
    namespace iclt {
        namespace icenlp {
            namespace core {
                namespace icetagger {
                    static PyObject *t_IceTaggerOutputApertium_cast_(PyTypeObject *type, PyObject *arg);
                    static PyObject *t_IceTaggerOutputApertium_instance_(PyTypeObject *type, PyObject *arg);
                    static int t_IceTaggerOutputApertium_init_(t_IceTaggerOutputApertium *self, PyObject *args, PyObject *kwds);
                    static PyObject *t_IceTaggerOutputApertium_buildOutput(t_IceTaggerOutputApertium *self, PyObject *args);

                    static PyMethodDef t_IceTaggerOutputApertium__methods_[] = {
                        DECLARE_METHOD(t_IceTaggerOutputApertium, cast_, METH_O | METH_CLASS),
                        DECLARE_METHOD(t_IceTaggerOutputApertium, instance_, METH_O | METH_CLASS),
                        DECLARE_METHOD(t_IceTaggerOutputApertium, buildOutput, METH_VARARGS),
                        { NULL, NULL, 0, NULL }
                    };

                    DECLARE_TYPE(IceTaggerOutputApertium, t_IceTaggerOutputApertium, ::is::iclt::icenlp::core::icetagger::IceTaggerOutput, IceTaggerOutputApertium, t_IceTaggerOutputApertium_init_, 0, 0, 0, 0, 0);

                    void t_IceTaggerOutputApertium::install(PyObject *module)
                    {
                        installType(&PY_TYPE(IceTaggerOutputApertium), module, "IceTaggerOutputApertium", 0);
                    }

                    void t_IceTaggerOutputApertium::initialize(PyObject *module)
                    {
                        PyDict_SetItemString(PY_TYPE(IceTaggerOutputApertium).tp_dict, "class_", make_descriptor(IceTaggerOutputApertium::initializeClass, 1));
                        PyDict_SetItemString(PY_TYPE(IceTaggerOutputApertium).tp_dict, "wrapfn_", make_descriptor(t_IceTaggerOutputApertium::wrap_jobject));
                        PyDict_SetItemString(PY_TYPE(IceTaggerOutputApertium).tp_dict, "boxfn_", make_descriptor(boxObject));
                    }

                    static PyObject *t_IceTaggerOutputApertium_cast_(PyTypeObject *type, PyObject *arg)
                    {
                        if (!(arg = castCheck(arg, IceTaggerOutputApertium::initializeClass, 1)))
                            return NULL;
                        return t_IceTaggerOutputApertium::wrap_Object(IceTaggerOutputApertium(((t_IceTaggerOutputApertium *) arg)->object.this$));
                    }
                    static PyObject *t_IceTaggerOutputApertium_instance_(PyTypeObject *type, PyObject *arg)
                    {
                        if (!castCheck(arg, IceTaggerOutputApertium::initializeClass, 0))
                            Py_RETURN_FALSE;
                        Py_RETURN_TRUE;
                    }

                    static int t_IceTaggerOutputApertium_init_(t_IceTaggerOutputApertium *self, PyObject *args, PyObject *kwds)
                    {
                        jint a0;
                        ::java::lang::String a1((jobject) NULL);
                        jboolean a2;
                        jboolean a3;
                        ::java::lang::String a4((jobject) NULL);
                        jboolean a5;
                        IceTaggerOutputApertium object((jobject) NULL);

                        if (!parseArgs(args, "IsZZsZ", &a0, &a1, &a2, &a3, &a4, &a5))
                        {
                            INT_CALL(object = IceTaggerOutputApertium(a0, a1, a2, a3, a4, a5));
                            self->object = object;
                        }
                        else
                        {
                            PyErr_SetArgsError((PyObject *) self, "__init__", args);
                            return -1;
                        }

                        return 0;
                    }

                    static PyObject *t_IceTaggerOutputApertium_buildOutput(t_IceTaggerOutputApertium *self, PyObject *args)
                    {
                        ::is::iclt::icenlp::core::tokenizer::IceTokenTags a0((jobject) NULL);
                        jint a1;
                        jint a2;
                        ::java::lang::String result((jobject) NULL);

                        if (!parseArgs(args, "kII", ::is::iclt::icenlp::core::tokenizer::IceTokenTags::initializeClass, &a0, &a1, &a2))
                        {
                            OBJ_CALL(result = self->object.buildOutput(a0, a1, a2));
                            return j2p(result);
                        }

                        return callSuper(&PY_TYPE(IceTaggerOutputApertium), (PyObject *) self, "buildOutput", args, 2);
                    }
                }
            }
        }
    }
}
#include <jni.h>
#include "JCCEnv.h"
#include "is/iclt/icenlp/core/formald/FormatConverter.h"
#include "is/iclt/icenlp/core/formald/Format.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace is {
    namespace iclt {
        namespace icenlp {
            namespace core {
                namespace formald {

                    ::java::lang::Class *FormatConverter::class$ = NULL;
                    jmethodID *FormatConverter::mids$ = NULL;

                    jclass FormatConverter::initializeClass()
                    {
                        if (!class$)
                        {

                            jclass cls = (jclass) env->findClass("is/iclt/icenlp/core/formald/FormatConverter");

                            mids$ = new jmethodID[max_mid];
                            mids$[mid_init$_c7d69f16] = env->getMethodID(cls, "<init>", "(Lis/iclt/icenlp/core/formald/Format;Lis/iclt/icenlp/core/formald/Format;)V");
                            mids$[mid_convert_97a5258f] = env->getMethodID(cls, "convert", "(Ljava/lang/String;)Ljava/lang/String;");

                            class$ = (::java::lang::Class *) new JObject(cls);
                        }
                        return (jclass) class$->this$;
                    }

                    FormatConverter::FormatConverter(const ::is::iclt::icenlp::core::formald::Format & a0, const ::is::iclt::icenlp::core::formald::Format & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_c7d69f16, a0.this$, a1.this$)) {}

                    ::java::lang::String FormatConverter::convert(const ::java::lang::String & a0) const
                    {
                        return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_convert_97a5258f], a0.this$));
                    }
                }
            }
        }
    }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace is {
    namespace iclt {
        namespace icenlp {
            namespace core {
                namespace formald {
                    static PyObject *t_FormatConverter_cast_(PyTypeObject *type, PyObject *arg);
                    static PyObject *t_FormatConverter_instance_(PyTypeObject *type, PyObject *arg);
                    static int t_FormatConverter_init_(t_FormatConverter *self, PyObject *args, PyObject *kwds);
                    static PyObject *t_FormatConverter_convert(t_FormatConverter *self, PyObject *arg);

                    static PyMethodDef t_FormatConverter__methods_[] = {
                        DECLARE_METHOD(t_FormatConverter, cast_, METH_O | METH_CLASS),
                        DECLARE_METHOD(t_FormatConverter, instance_, METH_O | METH_CLASS),
                        DECLARE_METHOD(t_FormatConverter, convert, METH_O),
                        { NULL, NULL, 0, NULL }
                    };

                    DECLARE_TYPE(FormatConverter, t_FormatConverter, ::java::lang::Object, FormatConverter, t_FormatConverter_init_, 0, 0, 0, 0, 0);

                    void t_FormatConverter::install(PyObject *module)
                    {
                        installType(&PY_TYPE(FormatConverter), module, "FormatConverter", 0);
                    }

                    void t_FormatConverter::initialize(PyObject *module)
                    {
                        PyDict_SetItemString(PY_TYPE(FormatConverter).tp_dict, "class_", make_descriptor(FormatConverter::initializeClass, 1));
                        PyDict_SetItemString(PY_TYPE(FormatConverter).tp_dict, "wrapfn_", make_descriptor(t_FormatConverter::wrap_jobject));
                        PyDict_SetItemString(PY_TYPE(FormatConverter).tp_dict, "boxfn_", make_descriptor(boxObject));
                    }

                    static PyObject *t_FormatConverter_cast_(PyTypeObject *type, PyObject *arg)
                    {
                        if (!(arg = castCheck(arg, FormatConverter::initializeClass, 1)))
                            return NULL;
                        return t_FormatConverter::wrap_Object(FormatConverter(((t_FormatConverter *) arg)->object.this$));
                    }
                    static PyObject *t_FormatConverter_instance_(PyTypeObject *type, PyObject *arg)
                    {
                        if (!castCheck(arg, FormatConverter::initializeClass, 0))
                            Py_RETURN_FALSE;
                        Py_RETURN_TRUE;
                    }

                    static int t_FormatConverter_init_(t_FormatConverter *self, PyObject *args, PyObject *kwds)
                    {
                        ::is::iclt::icenlp::core::formald::Format a0((jobject) NULL);
                        ::is::iclt::icenlp::core::formald::Format a1((jobject) NULL);
                        FormatConverter object((jobject) NULL);

                        if (!parseArgs(args, "kk", ::is::iclt::icenlp::core::formald::Format::initializeClass, ::is::iclt::icenlp::core::formald::Format::initializeClass, &a0, &a1))
                        {
                            INT_CALL(object = FormatConverter(a0, a1));
                            self->object = object;
                        }
                        else
                        {
                            PyErr_SetArgsError((PyObject *) self, "__init__", args);
                            return -1;
                        }

                        return 0;
                    }

                    static PyObject *t_FormatConverter_convert(t_FormatConverter *self, PyObject *arg)
                    {
                        ::java::lang::String a0((jobject) NULL);
                        ::java::lang::String result((jobject) NULL);

                        if (!parseArg(arg, "s", &a0))
                        {
                            OBJ_CALL(result = self->object.convert(a0));
                            return j2p(result);
                        }

                        PyErr_SetArgsError((PyObject *) self, "convert", arg);
                        return NULL;
                    }
                }
            }
        }
    }
}
#include <jni.h>
#include "JCCEnv.h"
#include "is/iclt/icenlp/core/formald/Text.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace is {
    namespace iclt {
        namespace icenlp {
            namespace core {
                namespace formald {

                    ::java::lang::Class *Text::class$ = NULL;
                    jmethodID *Text::mids$ = NULL;

                    jclass Text::initializeClass()
                    {
                        if (!class$)
                        {

                            jclass cls = (jclass) env->findClass("is/iclt/icenlp/core/formald/Text");

                            class$ = (::java::lang::Class *) new JObject(cls);
                        }
                        return (jclass) class$->this$;
                    }
                }
            }
        }
    }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace is {
    namespace iclt {
        namespace icenlp {
            namespace core {
                namespace formald {
                    static PyObject *t_Text_cast_(PyTypeObject *type, PyObject *arg);
                    static PyObject *t_Text_instance_(PyTypeObject *type, PyObject *arg);

                    static PyMethodDef t_Text__methods_[] = {
                        DECLARE_METHOD(t_Text, cast_, METH_O | METH_CLASS),
                        DECLARE_METHOD(t_Text, instance_, METH_O | METH_CLASS),
                        { NULL, NULL, 0, NULL }
                    };

                    DECLARE_TYPE(Text, t_Text, ::java::lang::Object, Text, abstract_init, 0, 0, 0, 0, 0);

                    void t_Text::install(PyObject *module)
                    {
                        installType(&PY_TYPE(Text), module, "Text", 0);
                    }

                    void t_Text::initialize(PyObject *module)
                    {
                        PyDict_SetItemString(PY_TYPE(Text).tp_dict, "class_", make_descriptor(Text::initializeClass, 1));
                        PyDict_SetItemString(PY_TYPE(Text).tp_dict, "wrapfn_", make_descriptor(t_Text::wrap_jobject));
                        PyDict_SetItemString(PY_TYPE(Text).tp_dict, "boxfn_", make_descriptor(boxObject));
                    }

                    static PyObject *t_Text_cast_(PyTypeObject *type, PyObject *arg)
                    {
                        if (!(arg = castCheck(arg, Text::initializeClass, 1)))
                            return NULL;
                        return t_Text::wrap_Object(Text(((t_Text *) arg)->object.this$));
                    }
                    static PyObject *t_Text_instance_(PyTypeObject *type, PyObject *arg)
                    {
                        if (!castCheck(arg, Text::initializeClass, 0))
                            Py_RETURN_FALSE;
                        Py_RETURN_TRUE;
                    }
                }
            }
        }
    }
}
#include <jni.h>
#include "JCCEnv.h"
#include "is/iclt/icenlp/core/lemmald/LemmaRule.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace is {
    namespace iclt {
        namespace icenlp {
            namespace core {
                namespace lemmald {

                    ::java::lang::Class *LemmaRule::class$ = NULL;
                    jmethodID *LemmaRule::mids$ = NULL;

                    jclass LemmaRule::initializeClass()
                    {
                        if (!class$)
                        {

                            jclass cls = (jclass) env->findClass("is/iclt/icenlp/core/lemmald/LemmaRule");

                            mids$ = new jmethodID[max_mid];
                            mids$[mid_init$_6e53ccc6] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;I)V");
                            mids$[mid_applyTo_97a5258f] = env->getMethodID(cls, "applyTo", "(Ljava/lang/String;)Ljava/lang/String;");
                            mids$[mid_getMapping_14c7b5c5] = env->getMethodID(cls, "getMapping", "()Ljava/lang/String;");
                            mids$[mid_getMappingFrom_14c7b5c5] = env->getMethodID(cls, "getMappingFrom", "()Ljava/lang/String;");
                            mids$[mid_getMappingTo_14c7b5c5] = env->getMethodID(cls, "getMappingTo", "()Ljava/lang/String;");
                            mids$[mid_getSuccessRate_54c6a179] = env->getMethodID(cls, "getSuccessRate", "()I");
                            mids$[mid_setMapping_5fdc3f48] = env->getMethodID(cls, "setMapping", "(Ljava/lang/String;)V");
                            mids$[mid_setSuccessRate_39c7bd3c] = env->getMethodID(cls, "setSuccessRate", "(I)V");

                            class$ = (::java::lang::Class *) new JObject(cls);
                        }
                        return (jclass) class$->this$;
                    }

                    LemmaRule::LemmaRule(const ::java::lang::String & a0, jint a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_6e53ccc6, a0.this$, a1)) {}

                    ::java::lang::String LemmaRule::applyTo(const ::java::lang::String & a0) const
                    {
                        return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_applyTo_97a5258f], a0.this$));
                    }

                    ::java::lang::String LemmaRule::getMapping() const
                    {
                        return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getMapping_14c7b5c5]));
                    }

                    ::java::lang::String LemmaRule::getMappingFrom() const
                    {
                        return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getMappingFrom_14c7b5c5]));
                    }

                    ::java::lang::String LemmaRule::getMappingTo() const
                    {
                        return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getMappingTo_14c7b5c5]));
                    }

                    jint LemmaRule::getSuccessRate() const
                    {
                        return env->callIntMethod(this$, mids$[mid_getSuccessRate_54c6a179]);
                    }

                    void LemmaRule::setMapping(const ::java::lang::String & a0) const
                    {
                        env->callVoidMethod(this$, mids$[mid_setMapping_5fdc3f48], a0.this$);
                    }

                    void LemmaRule::setSuccessRate(jint a0) const
                    {
                        env->callVoidMethod(this$, mids$[mid_setSuccessRate_39c7bd3c], a0);
                    }
                }
            }
        }
    }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace is {
    namespace iclt {
        namespace icenlp {
            namespace core {
                namespace lemmald {
                    static PyObject *t_LemmaRule_cast_(PyTypeObject *type, PyObject *arg);
                    static PyObject *t_LemmaRule_instance_(PyTypeObject *type, PyObject *arg);
                    static int t_LemmaRule_init_(t_LemmaRule *self, PyObject *args, PyObject *kwds);
                    static PyObject *t_LemmaRule_applyTo(t_LemmaRule *self, PyObject *arg);
                    static PyObject *t_LemmaRule_getMapping(t_LemmaRule *self);
                    static PyObject *t_LemmaRule_getMappingFrom(t_LemmaRule *self);
                    static PyObject *t_LemmaRule_getMappingTo(t_LemmaRule *self);
                    static PyObject *t_LemmaRule_getSuccessRate(t_LemmaRule *self);
                    static PyObject *t_LemmaRule_setMapping(t_LemmaRule *self, PyObject *arg);
                    static PyObject *t_LemmaRule_setSuccessRate(t_LemmaRule *self, PyObject *arg);
                    static PyObject *t_LemmaRule_get__mapping(t_LemmaRule *self, void *data);
                    static int t_LemmaRule_set__mapping(t_LemmaRule *self, PyObject *arg, void *data);
                    static PyObject *t_LemmaRule_get__mappingFrom(t_LemmaRule *self, void *data);
                    static PyObject *t_LemmaRule_get__mappingTo(t_LemmaRule *self, void *data);
                    static PyObject *t_LemmaRule_get__successRate(t_LemmaRule *self, void *data);
                    static int t_LemmaRule_set__successRate(t_LemmaRule *self, PyObject *arg, void *data);
                    static PyGetSetDef t_LemmaRule__fields_[] = {
                        DECLARE_GETSET_FIELD(t_LemmaRule, mapping),
                        DECLARE_GET_FIELD(t_LemmaRule, mappingFrom),
                        DECLARE_GET_FIELD(t_LemmaRule, mappingTo),
                        DECLARE_GETSET_FIELD(t_LemmaRule, successRate),
                        { NULL, NULL, NULL, NULL, NULL }
                    };

                    static PyMethodDef t_LemmaRule__methods_[] = {
                        DECLARE_METHOD(t_LemmaRule, cast_, METH_O | METH_CLASS),
                        DECLARE_METHOD(t_LemmaRule, instance_, METH_O | METH_CLASS),
                        DECLARE_METHOD(t_LemmaRule, applyTo, METH_O),
                        DECLARE_METHOD(t_LemmaRule, getMapping, METH_NOARGS),
                        DECLARE_METHOD(t_LemmaRule, getMappingFrom, METH_NOARGS),
                        DECLARE_METHOD(t_LemmaRule, getMappingTo, METH_NOARGS),
                        DECLARE_METHOD(t_LemmaRule, getSuccessRate, METH_NOARGS),
                        DECLARE_METHOD(t_LemmaRule, setMapping, METH_O),
                        DECLARE_METHOD(t_LemmaRule, setSuccessRate, METH_O),
                        { NULL, NULL, 0, NULL }
                    };

                    DECLARE_TYPE(LemmaRule, t_LemmaRule, ::java::lang::Object, LemmaRule, t_LemmaRule_init_, 0, 0, t_LemmaRule__fields_, 0, 0);

                    void t_LemmaRule::install(PyObject *module)
                    {
                        installType(&PY_TYPE(LemmaRule), module, "LemmaRule", 0);
                    }

                    void t_LemmaRule::initialize(PyObject *module)
                    {
                        PyDict_SetItemString(PY_TYPE(LemmaRule).tp_dict, "class_", make_descriptor(LemmaRule::initializeClass, 1));
                        PyDict_SetItemString(PY_TYPE(LemmaRule).tp_dict, "wrapfn_", make_descriptor(t_LemmaRule::wrap_jobject));
                        PyDict_SetItemString(PY_TYPE(LemmaRule).tp_dict, "boxfn_", make_descriptor(boxObject));
                    }

                    static PyObject *t_LemmaRule_cast_(PyTypeObject *type, PyObject *arg)
                    {
                        if (!(arg = castCheck(arg, LemmaRule::initializeClass, 1)))
                            return NULL;
                        return t_LemmaRule::wrap_Object(LemmaRule(((t_LemmaRule *) arg)->object.this$));
                    }
                    static PyObject *t_LemmaRule_instance_(PyTypeObject *type, PyObject *arg)
                    {
                        if (!castCheck(arg, LemmaRule::initializeClass, 0))
                            Py_RETURN_FALSE;
                        Py_RETURN_TRUE;
                    }

                    static int t_LemmaRule_init_(t_LemmaRule *self, PyObject *args, PyObject *kwds)
                    {
                        ::java::lang::String a0((jobject) NULL);
                        jint a1;
                        LemmaRule object((jobject) NULL);

                        if (!parseArgs(args, "sI", &a0, &a1))
                        {
                            INT_CALL(object = LemmaRule(a0, a1));
                            self->object = object;
                        }
                        else
                        {
                            PyErr_SetArgsError((PyObject *) self, "__init__", args);
                            return -1;
                        }

                        return 0;
                    }

                    static PyObject *t_LemmaRule_applyTo(t_LemmaRule *self, PyObject *arg)
                    {
                        ::java::lang::String a0((jobject) NULL);
                        ::java::lang::String result((jobject) NULL);

                        if (!parseArg(arg, "s", &a0))
                        {
                            OBJ_CALL(result = self->object.applyTo(a0));
                            return j2p(result);
                        }

                        PyErr_SetArgsError((PyObject *) self, "applyTo", arg);
                        return NULL;
                    }

                    static PyObject *t_LemmaRule_getMapping(t_LemmaRule *self)
                    {
                        ::java::lang::String result((jobject) NULL);
                        OBJ_CALL(result = self->object.getMapping());
                        return j2p(result);
                    }

                    static PyObject *t_LemmaRule_getMappingFrom(t_LemmaRule *self)
                    {
                        ::java::lang::String result((jobject) NULL);
                        OBJ_CALL(result = self->object.getMappingFrom());
                        return j2p(result);
                    }

                    static PyObject *t_LemmaRule_getMappingTo(t_LemmaRule *self)
                    {
                        ::java::lang::String result((jobject) NULL);
                        OBJ_CALL(result = self->object.getMappingTo());
                        return j2p(result);
                    }

                    static PyObject *t_LemmaRule_getSuccessRate(t_LemmaRule *self)
                    {
                        jint result;
                        OBJ_CALL(result = self->object.getSuccessRate());
                        return PyInt_FromLong((long) result);
                    }

                    static PyObject *t_LemmaRule_setMapping(t_LemmaRule *self, PyObject *arg)
                    {
                        ::java::lang::String a0((jobject) NULL);

                        if (!parseArg(arg, "s", &a0))
                        {
                            OBJ_CALL(self->object.setMapping(a0));
                            Py_RETURN_NONE;
                        }

                        PyErr_SetArgsError((PyObject *) self, "setMapping", arg);
                        return NULL;
                    }

                    static PyObject *t_LemmaRule_setSuccessRate(t_LemmaRule *self, PyObject *arg)
                    {
                        jint a0;

                        if (!parseArg(arg, "I", &a0))
                        {
                            OBJ_CALL(self->object.setSuccessRate(a0));
                            Py_RETURN_NONE;
                        }

                        PyErr_SetArgsError((PyObject *) self, "setSuccessRate", arg);
                        return NULL;
                    }

                    static PyObject *t_LemmaRule_get__mapping(t_LemmaRule *self, void *data)
                    {
                        ::java::lang::String value((jobject) NULL);
                        OBJ_CALL(value = self->object.getMapping());
                        return j2p(value);
                    }
                    static int t_LemmaRule_set__mapping(t_LemmaRule *self, PyObject *arg, void *data)
                    {
                        {
                            ::java::lang::String value((jobject) NULL);
                            if (!parseArg(arg, "s", &value))
                            {
                                INT_CALL(self->object.setMapping(value));
                                return 0;
                            }
                        }
                        PyErr_SetArgsError((PyObject *) self, "mapping", arg);
                        return -1;
                    }

                    static PyObject *t_LemmaRule_get__mappingFrom(t_LemmaRule *self, void *data)
                    {
                        ::java::lang::String value((jobject) NULL);
                        OBJ_CALL(value = self->object.getMappingFrom());
                        return j2p(value);
                    }

                    static PyObject *t_LemmaRule_get__mappingTo(t_LemmaRule *self, void *data)
                    {
                        ::java::lang::String value((jobject) NULL);
                        OBJ_CALL(value = self->object.getMappingTo());
                        return j2p(value);
                    }

                    static PyObject *t_LemmaRule_get__successRate(t_LemmaRule *self, void *data)
                    {
                        jint value;
                        OBJ_CALL(value = self->object.getSuccessRate());
                        return PyInt_FromLong((long) value);
                    }
                    static int t_LemmaRule_set__successRate(t_LemmaRule *self, PyObject *arg, void *data)
                    {
                        {
                            jint value;
                            if (!parseArg(arg, "I", &value))
                            {
                                INT_CALL(self->object.setSuccessRate(value));
                                return 0;
                            }
                        }
                        PyErr_SetArgsError((PyObject *) self, "successRate", arg);
                        return -1;
                    }
                }
            }
        }
    }
}
#include <jni.h>
#include "JCCEnv.h"
#include "is/iclt/icenlp/core/tokenizer/IceTokenTags$SVOMark.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace is {
    namespace iclt {
        namespace icenlp {
            namespace core {
                namespace tokenizer {

                    ::java::lang::Class *IceTokenTags$SVOMark::class$ = NULL;
                    jmethodID *IceTokenTags$SVOMark::mids$ = NULL;
                    IceTokenTags$SVOMark *IceTokenTags$SVOMark::svoMainSubject = NULL;
                    IceTokenTags$SVOMark *IceTokenTags$SVOMark::svoMainVerb = NULL;
                    IceTokenTags$SVOMark *IceTokenTags$SVOMark::svoNone = NULL;
                    IceTokenTags$SVOMark *IceTokenTags$SVOMark::svoObject = NULL;
                    IceTokenTags$SVOMark *IceTokenTags$SVOMark::svoPrepPhrase = NULL;
                    IceTokenTags$SVOMark *IceTokenTags$SVOMark::svoSubject = NULL;
                    IceTokenTags$SVOMark *IceTokenTags$SVOMark::svoVerb = NULL;

                    jclass IceTokenTags$SVOMark::initializeClass()
                    {
                        if (!class$)
                        {

                            jclass cls = (jclass) env->findClass("is/iclt/icenlp/core/tokenizer/IceTokenTags$SVOMark");

                            mids$ = new jmethodID[max_mid];
                            mids$[mid_valueOf_92643338] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;)Lis/iclt/icenlp/core/tokenizer/IceTokenTags$SVOMark;");
                            mids$[mid_values_fe9190da] = env->getStaticMethodID(cls, "values", "()[Lis/iclt/icenlp/core/tokenizer/IceTokenTags$SVOMark;");

                            class$ = (::java::lang::Class *) new JObject(cls);
                            cls = (jclass) class$->this$;

                            svoMainSubject = new IceTokenTags$SVOMark(env->getStaticObjectField(cls, "svoMainSubject", "Lis/iclt/icenlp/core/tokenizer/IceTokenTags$SVOMark;"));
                            svoMainVerb = new IceTokenTags$SVOMark(env->getStaticObjectField(cls, "svoMainVerb", "Lis/iclt/icenlp/core/tokenizer/IceTokenTags$SVOMark;"));
                            svoNone = new IceTokenTags$SVOMark(env->getStaticObjectField(cls, "svoNone", "Lis/iclt/icenlp/core/tokenizer/IceTokenTags$SVOMark;"));
                            svoObject = new IceTokenTags$SVOMark(env->getStaticObjectField(cls, "svoObject", "Lis/iclt/icenlp/core/tokenizer/IceTokenTags$SVOMark;"));
                            svoPrepPhrase = new IceTokenTags$SVOMark(env->getStaticObjectField(cls, "svoPrepPhrase", "Lis/iclt/icenlp/core/tokenizer/IceTokenTags$SVOMark;"));
                            svoSubject = new IceTokenTags$SVOMark(env->getStaticObjectField(cls, "svoSubject", "Lis/iclt/icenlp/core/tokenizer/IceTokenTags$SVOMark;"));
                            svoVerb = new IceTokenTags$SVOMark(env->getStaticObjectField(cls, "svoVerb", "Lis/iclt/icenlp/core/tokenizer/IceTokenTags$SVOMark;"));
                        }
                        return (jclass) class$->this$;
                    }

                    IceTokenTags$SVOMark IceTokenTags$SVOMark::valueOf(const ::java::lang::String & a0)
                    {
                        jclass cls = initializeClass();
                        return IceTokenTags$SVOMark(env->callStaticObjectMethod(cls, mids$[mid_valueOf_92643338], a0.this$));
                    }

                    JArray< IceTokenTags$SVOMark > IceTokenTags$SVOMark::values()
                    {
                        jclass cls = initializeClass();
                        return JArray< IceTokenTags$SVOMark >(env->callStaticObjectMethod(cls, mids$[mid_values_fe9190da]));
                    }
                }
            }
        }
    }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace is {
    namespace iclt {
        namespace icenlp {
            namespace core {
                namespace tokenizer {
                    static PyObject *t_IceTokenTags$SVOMark_cast_(PyTypeObject *type, PyObject *arg);
                    static PyObject *t_IceTokenTags$SVOMark_instance_(PyTypeObject *type, PyObject *arg);
                    static PyObject *t_IceTokenTags$SVOMark_valueOf(PyTypeObject *type, PyObject *args);
                    static PyObject *t_IceTokenTags$SVOMark_values(PyTypeObject *type);

                    static PyMethodDef t_IceTokenTags$SVOMark__methods_[] = {
                        DECLARE_METHOD(t_IceTokenTags$SVOMark, cast_, METH_O | METH_CLASS),
                        DECLARE_METHOD(t_IceTokenTags$SVOMark, instance_, METH_O | METH_CLASS),
                        DECLARE_METHOD(t_IceTokenTags$SVOMark, valueOf, METH_VARARGS | METH_CLASS),
                        DECLARE_METHOD(t_IceTokenTags$SVOMark, values, METH_NOARGS | METH_CLASS),
                        { NULL, NULL, 0, NULL }
                    };

                    DECLARE_TYPE(IceTokenTags$SVOMark, t_IceTokenTags$SVOMark, ::java::lang::Enum, IceTokenTags$SVOMark, abstract_init, 0, 0, 0, 0, 0);

                    void t_IceTokenTags$SVOMark::install(PyObject *module)
                    {
                        installType(&PY_TYPE(IceTokenTags$SVOMark), module, "IceTokenTags$SVOMark", 0);
                    }

                    void t_IceTokenTags$SVOMark::initialize(PyObject *module)
                    {
                        PyDict_SetItemString(PY_TYPE(IceTokenTags$SVOMark).tp_dict, "class_", make_descriptor(IceTokenTags$SVOMark::initializeClass, 1));
                        PyDict_SetItemString(PY_TYPE(IceTokenTags$SVOMark).tp_dict, "wrapfn_", make_descriptor(t_IceTokenTags$SVOMark::wrap_jobject));
                        PyDict_SetItemString(PY_TYPE(IceTokenTags$SVOMark).tp_dict, "boxfn_", make_descriptor(boxObject));
                        IceTokenTags$SVOMark::initializeClass();
                        PyDict_SetItemString(PY_TYPE(IceTokenTags$SVOMark).tp_dict, "svoMainSubject", make_descriptor(t_IceTokenTags$SVOMark::wrap_Object(*IceTokenTags$SVOMark::svoMainSubject)));
                        PyDict_SetItemString(PY_TYPE(IceTokenTags$SVOMark).tp_dict, "svoMainVerb", make_descriptor(t_IceTokenTags$SVOMark::wrap_Object(*IceTokenTags$SVOMark::svoMainVerb)));
                        PyDict_SetItemString(PY_TYPE(IceTokenTags$SVOMark).tp_dict, "svoNone", make_descriptor(t_IceTokenTags$SVOMark::wrap_Object(*IceTokenTags$SVOMark::svoNone)));
                        PyDict_SetItemString(PY_TYPE(IceTokenTags$SVOMark).tp_dict, "svoObject", make_descriptor(t_IceTokenTags$SVOMark::wrap_Object(*IceTokenTags$SVOMark::svoObject)));
                        PyDict_SetItemString(PY_TYPE(IceTokenTags$SVOMark).tp_dict, "svoPrepPhrase", make_descriptor(t_IceTokenTags$SVOMark::wrap_Object(*IceTokenTags$SVOMark::svoPrepPhrase)));
                        PyDict_SetItemString(PY_TYPE(IceTokenTags$SVOMark).tp_dict, "svoSubject", make_descriptor(t_IceTokenTags$SVOMark::wrap_Object(*IceTokenTags$SVOMark::svoSubject)));
                        PyDict_SetItemString(PY_TYPE(IceTokenTags$SVOMark).tp_dict, "svoVerb", make_descriptor(t_IceTokenTags$SVOMark::wrap_Object(*IceTokenTags$SVOMark::svoVerb)));
                    }

                    static PyObject *t_IceTokenTags$SVOMark_cast_(PyTypeObject *type, PyObject *arg)
                    {
                        if (!(arg = castCheck(arg, IceTokenTags$SVOMark::initializeClass, 1)))
                            return NULL;
                        return t_IceTokenTags$SVOMark::wrap_Object(IceTokenTags$SVOMark(((t_IceTokenTags$SVOMark *) arg)->object.this$));
                    }
                    static PyObject *t_IceTokenTags$SVOMark_instance_(PyTypeObject *type, PyObject *arg)
                    {
                        if (!castCheck(arg, IceTokenTags$SVOMark::initializeClass, 0))
                            Py_RETURN_FALSE;
                        Py_RETURN_TRUE;
                    }

                    static PyObject *t_IceTokenTags$SVOMark_valueOf(PyTypeObject *type, PyObject *args)
                    {
                        ::java::lang::String a0((jobject) NULL);
                        IceTokenTags$SVOMark result((jobject) NULL);

                        if (!parseArgs(args, "s", &a0))
                        {
                            OBJ_CALL(result = ::is::iclt::icenlp::core::tokenizer::IceTokenTags$SVOMark::valueOf(a0));
                            return t_IceTokenTags$SVOMark::wrap_Object(result);
                        }

                        return callSuper(type, "valueOf", args, 2);
                    }

                    static PyObject *t_IceTokenTags$SVOMark_values(PyTypeObject *type)
                    {
                        JArray< IceTokenTags$SVOMark > result((jobject) NULL);
                        OBJ_CALL(result = ::is::iclt::icenlp::core::tokenizer::IceTokenTags$SVOMark::values());
                        return JArray<jobject>(result.this$).wrap(t_IceTokenTags$SVOMark::wrap_jobject);
                    }
                }
            }
        }
    }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/lang/Exception.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace java {
    namespace lang {

        ::java::lang::Class *Exception::class$ = NULL;
        jmethodID *Exception::mids$ = NULL;

        jclass Exception::initializeClass()
        {
            if (!class$)
            {

                jclass cls = (jclass) env->findClass("java/lang/Exception");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
                mids$[mid_init$_c5ec8ca4] = env->getMethodID(cls, "<init>", "(Ljava/lang/Throwable;)V");
                mids$[mid_init$_01646a2e] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Ljava/lang/Throwable;)V");

                class$ = (::java::lang::Class *) new JObject(cls);
            }
            return (jclass) class$->this$;
        }

        Exception::Exception() : ::java::lang::Throwable(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        Exception::Exception(const ::java::lang::String & a0) : ::java::lang::Throwable(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}

        Exception::Exception(const ::java::lang::Throwable & a0) : ::java::lang::Throwable(env->newObject(initializeClass, &mids$, mid_init$_c5ec8ca4, a0.this$)) {}

        Exception::Exception(const ::java::lang::String & a0, const ::java::lang::Throwable & a1) : ::java::lang::Throwable(env->newObject(initializeClass, &mids$, mid_init$_01646a2e, a0.this$, a1.this$)) {}
    }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
    namespace lang {
        static PyObject *t_Exception_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Exception_instance_(PyTypeObject *type, PyObject *arg);
        static int t_Exception_init_(t_Exception *self, PyObject *args, PyObject *kwds);

        static PyMethodDef t_Exception__methods_[] = {
            DECLARE_METHOD(t_Exception, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Exception, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(Exception, t_Exception, ::java::lang::Throwable, Exception, t_Exception_init_, 0, 0, 0, 0, 0);

        void t_Exception::install(PyObject *module)
        {
            installType(&PY_TYPE(Exception), module, "Exception", 0);
        }

        void t_Exception::initialize(PyObject *module)
        {
            PyDict_SetItemString(PY_TYPE(Exception).tp_dict, "class_", make_descriptor(Exception::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Exception).tp_dict, "wrapfn_", make_descriptor(t_Exception::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Exception).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_Exception_cast_(PyTypeObject *type, PyObject *arg)
        {
            if (!(arg = castCheck(arg, Exception::initializeClass, 1)))
                return NULL;
            return t_Exception::wrap_Object(Exception(((t_Exception *) arg)->object.this$));
        }
        static PyObject *t_Exception_instance_(PyTypeObject *type, PyObject *arg)
        {
            if (!castCheck(arg, Exception::initializeClass, 0))
                Py_RETURN_FALSE;
            Py_RETURN_TRUE;
        }

        static int t_Exception_init_(t_Exception *self, PyObject *args, PyObject *kwds)
        {
            switch (PyTuple_GET_SIZE(args)) {
              case 0:
                {
                    Exception object((jobject) NULL);

                    INT_CALL(object = Exception());
                    self->object = object;
                    break;
                }
                goto err;
              case 1:
                {
                    ::java::lang::String a0((jobject) NULL);
                    Exception object((jobject) NULL);

                    if (!parseArgs(args, "s", &a0))
                    {
                        INT_CALL(object = Exception(a0));
                        self->object = object;
                        break;
                    }
                }
                {
                    ::java::lang::Throwable a0((jobject) NULL);
                    Exception object((jobject) NULL);

                    if (!parseArgs(args, "k", ::java::lang::Throwable::initializeClass, &a0))
                    {
                        INT_CALL(object = Exception(a0));
                        self->object = object;
                        break;
                    }
                }
                goto err;
              case 2:
                {
                    ::java::lang::String a0((jobject) NULL);
                    ::java::lang::Throwable a1((jobject) NULL);
                    Exception object((jobject) NULL);

                    if (!parseArgs(args, "sk", ::java::lang::Throwable::initializeClass, &a0, &a1))
                    {
                        INT_CALL(object = Exception(a0, a1));
                        self->object = object;
                        break;
                    }
                }
              default:
              err:
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
            }

            return 0;
        }
    }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/Throwable.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace java {
    namespace lang {

        ::java::lang::Class *RuntimeException::class$ = NULL;
        jmethodID *RuntimeException::mids$ = NULL;

        jclass RuntimeException::initializeClass()
        {
            if (!class$)
            {

                jclass cls = (jclass) env->findClass("java/lang/RuntimeException");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
                mids$[mid_init$_c5ec8ca4] = env->getMethodID(cls, "<init>", "(Ljava/lang/Throwable;)V");
                mids$[mid_init$_01646a2e] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Ljava/lang/Throwable;)V");

                class$ = (::java::lang::Class *) new JObject(cls);
            }
            return (jclass) class$->this$;
        }

        RuntimeException::RuntimeException() : ::java::lang::Exception(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        RuntimeException::RuntimeException(const ::java::lang::String & a0) : ::java::lang::Exception(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}

        RuntimeException::RuntimeException(const ::java::lang::Throwable & a0) : ::java::lang::Exception(env->newObject(initializeClass, &mids$, mid_init$_c5ec8ca4, a0.this$)) {}

        RuntimeException::RuntimeException(const ::java::lang::String & a0, const ::java::lang::Throwable & a1) : ::java::lang::Exception(env->newObject(initializeClass, &mids$, mid_init$_01646a2e, a0.this$, a1.this$)) {}
    }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
    namespace lang {
        static PyObject *t_RuntimeException_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_RuntimeException_instance_(PyTypeObject *type, PyObject *arg);
        static int t_RuntimeException_init_(t_RuntimeException *self, PyObject *args, PyObject *kwds);

        static PyMethodDef t_RuntimeException__methods_[] = {
            DECLARE_METHOD(t_RuntimeException, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_RuntimeException, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(RuntimeException, t_RuntimeException, ::java::lang::Exception, RuntimeException, t_RuntimeException_init_, 0, 0, 0, 0, 0);

        void t_RuntimeException::install(PyObject *module)
        {
            installType(&PY_TYPE(RuntimeException), module, "RuntimeException", 0);
        }

        void t_RuntimeException::initialize(PyObject *module)
        {
            PyDict_SetItemString(PY_TYPE(RuntimeException).tp_dict, "class_", make_descriptor(RuntimeException::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(RuntimeException).tp_dict, "wrapfn_", make_descriptor(t_RuntimeException::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(RuntimeException).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_RuntimeException_cast_(PyTypeObject *type, PyObject *arg)
        {
            if (!(arg = castCheck(arg, RuntimeException::initializeClass, 1)))
                return NULL;
            return t_RuntimeException::wrap_Object(RuntimeException(((t_RuntimeException *) arg)->object.this$));
        }
        static PyObject *t_RuntimeException_instance_(PyTypeObject *type, PyObject *arg)
        {
            if (!castCheck(arg, RuntimeException::initializeClass, 0))
                Py_RETURN_FALSE;
            Py_RETURN_TRUE;
        }

        static int t_RuntimeException_init_(t_RuntimeException *self, PyObject *args, PyObject *kwds)
        {
            switch (PyTuple_GET_SIZE(args)) {
              case 0:
                {
                    RuntimeException object((jobject) NULL);

                    INT_CALL(object = RuntimeException());
                    self->object = object;
                    break;
                }
                goto err;
              case 1:
                {
                    ::java::lang::String a0((jobject) NULL);
                    RuntimeException object((jobject) NULL);

                    if (!parseArgs(args, "s", &a0))
                    {
                        INT_CALL(object = RuntimeException(a0));
                        self->object = object;
                        break;
                    }
                }
                {
                    ::java::lang::Throwable a0((jobject) NULL);
                    RuntimeException object((jobject) NULL);

                    if (!parseArgs(args, "k", ::java::lang::Throwable::initializeClass, &a0))
                    {
                        INT_CALL(object = RuntimeException(a0));
                        self->object = object;
                        break;
                    }
                }
                goto err;
              case 2:
                {
                    ::java::lang::String a0((jobject) NULL);
                    ::java::lang::Throwable a1((jobject) NULL);
                    RuntimeException object((jobject) NULL);

                    if (!parseArgs(args, "sk", ::java::lang::Throwable::initializeClass, &a0, &a1))
                    {
                        INT_CALL(object = RuntimeException(a0, a1));
                        self->object = object;
                        break;
                    }
                }
              default:
              err:
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
            }

            return 0;
        }
    }
}
#include <jni.h>
#include "JCCEnv.h"
#include "is/iclt/icenlp/core/iceparser/Phrase_PP.h"
#include "java/io/IOException.h"
#include "java/io/Reader.h"
#include "java/io/Writer.h"
#include "java/lang/Class.h"
#include "java/io/InputStream.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace is {
    namespace iclt {
        namespace icenlp {
            namespace core {
                namespace iceparser {

                    ::java::lang::Class *Phrase_PP::class$ = NULL;
                    jmethodID *Phrase_PP::mids$ = NULL;
                    jint Phrase_PP::YYEOF = (jint) 0;
                    jint Phrase_PP::YYINITIAL = (jint) 0;

                    jclass Phrase_PP::initializeClass()
                    {
                        if (!class$)
                        {

                            jclass cls = (jclass) env->findClass("is/iclt/icenlp/core/iceparser/Phrase_PP");

                            mids$ = new jmethodID[max_mid];
                            mids$[mid_init$_cf2e3c10] = env->getMethodID(cls, "<init>", "(Ljava/io/Reader;)V");
                            mids$[mid_init$_be2e4f90] = env->getMethodID(cls, "<init>", "(Ljava/io/InputStream;)V");
                            mids$[mid_main_4dd4540c] = env->getStaticMethodID(cls, "main", "([Ljava/lang/String;)V");
                            mids$[mid_parse_5bcd5850] = env->getMethodID(cls, "parse", "(Ljava/io/Writer;)V");
                            mids$[mid_yybegin_39c7bd3c] = env->getMethodID(cls, "yybegin", "(I)V");
                            mids$[mid_yycharat_39c7bd29] = env->getMethodID(cls, "yycharat", "(I)C");
                            mids$[mid_yyclose_54c6a166] = env->getMethodID(cls, "yyclose", "()V");
                            mids$[mid_yylength_54c6a179] = env->getMethodID(cls, "yylength", "()I");
                            mids$[mid_yylex_54c6a179] = env->getMethodID(cls, "yylex", "()I");
                            mids$[mid_yypushback_39c7bd3c] = env->getMethodID(cls, "yypushback", "(I)V");
                            mids$[mid_yyreset_cf2e3c10] = env->getMethodID(cls, "yyreset", "(Ljava/io/Reader;)V");
                            mids$[mid_yystate_54c6a179] = env->getMethodID(cls, "yystate", "()I");
                            mids$[mid_yytext_14c7b5c5] = env->getMethodID(cls, "yytext", "()Ljava/lang/String;");

                            class$ = (::java::lang::Class *) new JObject(cls);
                            cls = (jclass) class$->this$;

                            YYEOF = env->getStaticIntField(cls, "YYEOF");
                            YYINITIAL = env->getStaticIntField(cls, "YYINITIAL");
                        }
                        return (jclass) class$->this$;
                    }

                    Phrase_PP::Phrase_PP(const ::java::io::Reader & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_cf2e3c10, a0.this$)) {}

                    Phrase_PP::Phrase_PP(const ::java::io::InputStream & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_be2e4f90, a0.this$)) {}

                    void Phrase_PP::main(const JArray< ::java::lang::String > & a0)
                    {
                        jclass cls = initializeClass();
                        env->callStaticVoidMethod(cls, mids$[mid_main_4dd4540c], a0.this$);
                    }

                    void Phrase_PP::parse(const ::java::io::Writer & a0) const
                    {
                        env->callVoidMethod(this$, mids$[mid_parse_5bcd5850], a0.this$);
                    }

                    void Phrase_PP::yybegin(jint a0) const
                    {
                        env->callVoidMethod(this$, mids$[mid_yybegin_39c7bd3c], a0);
                    }

                    jchar Phrase_PP::yycharat(jint a0) const
                    {
                        return env->callCharMethod(this$, mids$[mid_yycharat_39c7bd29], a0);
                    }

                    void Phrase_PP::yyclose() const
                    {
                        env->callVoidMethod(this$, mids$[mid_yyclose_54c6a166]);
                    }

                    jint Phrase_PP::yylength() const
                    {
                        return env->callIntMethod(this$, mids$[mid_yylength_54c6a179]);
                    }

                    jint Phrase_PP::yylex() const
                    {
                        return env->callIntMethod(this$, mids$[mid_yylex_54c6a179]);
                    }

                    void Phrase_PP::yypushback(jint a0) const
                    {
                        env->callVoidMethod(this$, mids$[mid_yypushback_39c7bd3c], a0);
                    }

                    void Phrase_PP::yyreset(const ::java::io::Reader & a0) const
                    {
                        env->callVoidMethod(this$, mids$[mid_yyreset_cf2e3c10], a0.this$);
                    }

                    jint Phrase_PP::yystate() const
                    {
                        return env->callIntMethod(this$, mids$[mid_yystate_54c6a179]);
                    }

                    ::java::lang::String Phrase_PP::yytext() const
                    {
                        return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_yytext_14c7b5c5]));
                    }
                }
            }
        }
    }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace is {
    namespace iclt {
        namespace icenlp {
            namespace core {
                namespace iceparser {
                    static PyObject *t_Phrase_PP_cast_(PyTypeObject *type, PyObject *arg);
                    static PyObject *t_Phrase_PP_instance_(PyTypeObject *type, PyObject *arg);
                    static int t_Phrase_PP_init_(t_Phrase_PP *self, PyObject *args, PyObject *kwds);
                    static PyObject *t_Phrase_PP_main(PyTypeObject *type, PyObject *arg);
                    static PyObject *t_Phrase_PP_parse(t_Phrase_PP *self, PyObject *arg);
                    static PyObject *t_Phrase_PP_yybegin(t_Phrase_PP *self, PyObject *arg);
                    static PyObject *t_Phrase_PP_yycharat(t_Phrase_PP *self, PyObject *arg);
                    static PyObject *t_Phrase_PP_yyclose(t_Phrase_PP *self);
                    static PyObject *t_Phrase_PP_yylength(t_Phrase_PP *self);
                    static PyObject *t_Phrase_PP_yylex(t_Phrase_PP *self);
                    static PyObject *t_Phrase_PP_yypushback(t_Phrase_PP *self, PyObject *arg);
                    static PyObject *t_Phrase_PP_yyreset(t_Phrase_PP *self, PyObject *arg);
                    static PyObject *t_Phrase_PP_yystate(t_Phrase_PP *self);
                    static PyObject *t_Phrase_PP_yytext(t_Phrase_PP *self);

                    static PyMethodDef t_Phrase_PP__methods_[] = {
                        DECLARE_METHOD(t_Phrase_PP, cast_, METH_O | METH_CLASS),
                        DECLARE_METHOD(t_Phrase_PP, instance_, METH_O | METH_CLASS),
                        DECLARE_METHOD(t_Phrase_PP, main, METH_O | METH_CLASS),
                        DECLARE_METHOD(t_Phrase_PP, parse, METH_O),
                        DECLARE_METHOD(t_Phrase_PP, yybegin, METH_O),
                        DECLARE_METHOD(t_Phrase_PP, yycharat, METH_O),
                        DECLARE_METHOD(t_Phrase_PP, yyclose, METH_NOARGS),
                        DECLARE_METHOD(t_Phrase_PP, yylength, METH_NOARGS),
                        DECLARE_METHOD(t_Phrase_PP, yylex, METH_NOARGS),
                        DECLARE_METHOD(t_Phrase_PP, yypushback, METH_O),
                        DECLARE_METHOD(t_Phrase_PP, yyreset, METH_O),
                        DECLARE_METHOD(t_Phrase_PP, yystate, METH_NOARGS),
                        DECLARE_METHOD(t_Phrase_PP, yytext, METH_NOARGS),
                        { NULL, NULL, 0, NULL }
                    };

                    DECLARE_TYPE(Phrase_PP, t_Phrase_PP, ::java::lang::Object, Phrase_PP, t_Phrase_PP_init_, 0, 0, 0, 0, 0);

                    void t_Phrase_PP::install(PyObject *module)
                    {
                        installType(&PY_TYPE(Phrase_PP), module, "Phrase_PP", 0);
                    }

                    void t_Phrase_PP::initialize(PyObject *module)
                    {
                        PyDict_SetItemString(PY_TYPE(Phrase_PP).tp_dict, "class_", make_descriptor(Phrase_PP::initializeClass, 1));
                        PyDict_SetItemString(PY_TYPE(Phrase_PP).tp_dict, "wrapfn_", make_descriptor(t_Phrase_PP::wrap_jobject));
                        PyDict_SetItemString(PY_TYPE(Phrase_PP).tp_dict, "boxfn_", make_descriptor(boxObject));
                        Phrase_PP::initializeClass();
                        PyDict_SetItemString(PY_TYPE(Phrase_PP).tp_dict, "YYEOF", make_descriptor(Phrase_PP::YYEOF));
                        PyDict_SetItemString(PY_TYPE(Phrase_PP).tp_dict, "YYINITIAL", make_descriptor(Phrase_PP::YYINITIAL));
                    }

                    static PyObject *t_Phrase_PP_cast_(PyTypeObject *type, PyObject *arg)
                    {
                        if (!(arg = castCheck(arg, Phrase_PP::initializeClass, 1)))
                            return NULL;
                        return t_Phrase_PP::wrap_Object(Phrase_PP(((t_Phrase_PP *) arg)->object.this$));
                    }
                    static PyObject *t_Phrase_PP_instance_(PyTypeObject *type, PyObject *arg)
                    {
                        if (!castCheck(arg, Phrase_PP::initializeClass, 0))
                            Py_RETURN_FALSE;
                        Py_RETURN_TRUE;
                    }

                    static int t_Phrase_PP_init_(t_Phrase_PP *self, PyObject *args, PyObject *kwds)
                    {
                        switch (PyTuple_GET_SIZE(args)) {
                          case 1:
                            {
                                ::java::io::Reader a0((jobject) NULL);
                                Phrase_PP object((jobject) NULL);

                                if (!parseArgs(args, "k", ::java::io::Reader::initializeClass, &a0))
                                {
                                    INT_CALL(object = Phrase_PP(a0));
                                    self->object = object;
                                    break;
                                }
                            }
                            {
                                ::java::io::InputStream a0((jobject) NULL);
                                Phrase_PP object((jobject) NULL);

                                if (!parseArgs(args, "k", ::java::io::InputStream::initializeClass, &a0))
                                {
                                    INT_CALL(object = Phrase_PP(a0));
                                    self->object = object;
                                    break;
                                }
                            }
                          default:
                            PyErr_SetArgsError((PyObject *) self, "__init__", args);
                            return -1;
                        }

                        return 0;
                    }

                    static PyObject *t_Phrase_PP_main(PyTypeObject *type, PyObject *arg)
                    {
                        JArray< ::java::lang::String > a0((jobject) NULL);

                        if (!parseArg(arg, "[s", &a0))
                        {
                            OBJ_CALL(::is::iclt::icenlp::core::iceparser::Phrase_PP::main(a0));
                            Py_RETURN_NONE;
                        }

                        PyErr_SetArgsError(type, "main", arg);
                        return NULL;
                    }

                    static PyObject *t_Phrase_PP_parse(t_Phrase_PP *self, PyObject *arg)
                    {
                        ::java::io::Writer a0((jobject) NULL);

                        if (!parseArg(arg, "k", ::java::io::Writer::initializeClass, &a0))
                        {
                            OBJ_CALL(self->object.parse(a0));
                            Py_RETURN_NONE;
                        }

                        PyErr_SetArgsError((PyObject *) self, "parse", arg);
                        return NULL;
                    }

                    static PyObject *t_Phrase_PP_yybegin(t_Phrase_PP *self, PyObject *arg)
                    {
                        jint a0;

                        if (!parseArg(arg, "I", &a0))
                        {
                            OBJ_CALL(self->object.yybegin(a0));
                            Py_RETURN_NONE;
                        }

                        PyErr_SetArgsError((PyObject *) self, "yybegin", arg);
                        return NULL;
                    }

                    static PyObject *t_Phrase_PP_yycharat(t_Phrase_PP *self, PyObject *arg)
                    {
                        jint a0;
                        jchar result;

                        if (!parseArg(arg, "I", &a0))
                        {
                            OBJ_CALL(result = self->object.yycharat(a0));
                            return PyUnicode_FromUnicode((Py_UNICODE *) &result, 1);
                        }

                        PyErr_SetArgsError((PyObject *) self, "yycharat", arg);
                        return NULL;
                    }

                    static PyObject *t_Phrase_PP_yyclose(t_Phrase_PP *self)
                    {
                        OBJ_CALL(self->object.yyclose());
                        Py_RETURN_NONE;
                    }

                    static PyObject *t_Phrase_PP_yylength(t_Phrase_PP *self)
                    {
                        jint result;
                        OBJ_CALL(result = self->object.yylength());
                        return PyInt_FromLong((long) result);
                    }

                    static PyObject *t_Phrase_PP_yylex(t_Phrase_PP *self)
                    {
                        jint result;
                        OBJ_CALL(result = self->object.yylex());
                        return PyInt_FromLong((long) result);
                    }

                    static PyObject *t_Phrase_PP_yypushback(t_Phrase_PP *self, PyObject *arg)
                    {
                        jint a0;

                        if (!parseArg(arg, "I", &a0))
                        {
                            OBJ_CALL(self->object.yypushback(a0));
                            Py_RETURN_NONE;
                        }

                        PyErr_SetArgsError((PyObject *) self, "yypushback", arg);
                        return NULL;
                    }

                    static PyObject *t_Phrase_PP_yyreset(t_Phrase_PP *self, PyObject *arg)
                    {
                        ::java::io::Reader a0((jobject) NULL);

                        if (!parseArg(arg, "k", ::java::io::Reader::initializeClass, &a0))
                        {
                            OBJ_CALL(self->object.yyreset(a0));
                            Py_RETURN_NONE;
                        }

                        PyErr_SetArgsError((PyObject *) self, "yyreset", arg);
                        return NULL;
                    }

                    static PyObject *t_Phrase_PP_yystate(t_Phrase_PP *self)
                    {
                        jint result;
                        OBJ_CALL(result = self->object.yystate());
                        return PyInt_FromLong((long) result);
                    }

                    static PyObject *t_Phrase_PP_yytext(t_Phrase_PP *self)
                    {
                        ::java::lang::String result((jobject) NULL);
                        OBJ_CALL(result = self->object.yytext());
                        return j2p(result);
                    }
                }
            }
        }
    }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/lang/Long.h"
#include "java/lang/Comparable.h"
#include "java/lang/NumberFormatException.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "java/lang/Object.h"
#include "JArray.h"

namespace java {
    namespace lang {

        ::java::lang::Class *Long::class$ = NULL;
        jmethodID *Long::mids$ = NULL;
        jlong Long::MAX_VALUE = (jlong) 0;
        jlong Long::MIN_VALUE = (jlong) 0;
        jint Long::SIZE = (jint) 0;
        ::java::lang::Class *Long::TYPE = NULL;

        jclass Long::initializeClass()
        {
            if (!class$)
            {

                jclass cls = (jclass) env->findClass("java/lang/Long");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_0ee6df2f] = env->getMethodID(cls, "<init>", "(J)V");
                mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
                mids$[mid_bitCount_0ee6df30] = env->getStaticMethodID(cls, "bitCount", "(J)I");
                mids$[mid_byteValue_54c6a172] = env->getMethodID(cls, "byteValue", "()B");
                mids$[mid_compareTo_290588f1] = env->getMethodID(cls, "compareTo", "(Ljava/lang/Object;)I");
                mids$[mid_compareTo_da55802e] = env->getMethodID(cls, "compareTo", "(Ljava/lang/Long;)I");
                mids$[mid_decode_ee9f94be] = env->getStaticMethodID(cls, "decode", "(Ljava/lang/String;)Ljava/lang/Long;");
                mids$[mid_doubleValue_54c6a174] = env->getMethodID(cls, "doubleValue", "()D");
                mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
                mids$[mid_floatValue_54c6a176] = env->getMethodID(cls, "floatValue", "()F");
                mids$[mid_getLong_ee9f94be] = env->getStaticMethodID(cls, "getLong", "(Ljava/lang/String;)Ljava/lang/Long;");
                mids$[mid_getLong_9f081a1d] = env->getStaticMethodID(cls, "getLong", "(Ljava/lang/String;J)Ljava/lang/Long;");
                mids$[mid_getLong_9a12142f] = env->getStaticMethodID(cls, "getLong", "(Ljava/lang/String;Ljava/lang/Long;)Ljava/lang/Long;");
                mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
                mids$[mid_highestOneBit_0ee6df33] = env->getStaticMethodID(cls, "highestOneBit", "(J)J");
                mids$[mid_intValue_54c6a179] = env->getMethodID(cls, "intValue", "()I");
                mids$[mid_longValue_54c6a17a] = env->getMethodID(cls, "longValue", "()J");
                mids$[mid_lowestOneBit_0ee6df33] = env->getStaticMethodID(cls, "lowestOneBit", "(J)J");
                mids$[mid_numberOfLeadingZeros_0ee6df30] = env->getStaticMethodID(cls, "numberOfLeadingZeros", "(J)I");
                mids$[mid_numberOfTrailingZeros_0ee6df30] = env->getStaticMethodID(cls, "numberOfTrailingZeros", "(J)I");
                mids$[mid_parseLong_5fdc3f54] = env->getStaticMethodID(cls, "parseLong", "(Ljava/lang/String;)J");
                mids$[mid_parseLong_6e53ccda] = env->getStaticMethodID(cls, "parseLong", "(Ljava/lang/String;I)J");
                mids$[mid_reverse_0ee6df33] = env->getStaticMethodID(cls, "reverse", "(J)J");
                mids$[mid_reverseBytes_0ee6df33] = env->getStaticMethodID(cls, "reverseBytes", "(J)J");
                mids$[mid_rotateLeft_25d05c93] = env->getStaticMethodID(cls, "rotateLeft", "(JI)J");
                mids$[mid_rotateRight_25d05c93] = env->getStaticMethodID(cls, "rotateRight", "(JI)J");
                mids$[mid_shortValue_54c6a163] = env->getMethodID(cls, "shortValue", "()S");
                mids$[mid_signum_0ee6df30] = env->getStaticMethodID(cls, "signum", "(J)I");
                mids$[mid_toBinaryString_3e02f30e] = env->getStaticMethodID(cls, "toBinaryString", "(J)Ljava/lang/String;");
                mids$[mid_toHexString_3e02f30e] = env->getStaticMethodID(cls, "toHexString", "(J)Ljava/lang/String;");
                mids$[mid_toOctalString_3e02f30e] = env->getStaticMethodID(cls, "toOctalString", "(J)Ljava/lang/String;");
                mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
                mids$[mid_toString_3e02f30e] = env->getStaticMethodID(cls, "toString", "(J)Ljava/lang/String;");
                mids$[mid_toString_36a2b01a] = env->getStaticMethodID(cls, "toString", "(JI)Ljava/lang/String;");
                mids$[mid_valueOf_62a69723] = env->getStaticMethodID(cls, "valueOf", "(J)Ljava/lang/Long;");
                mids$[mid_valueOf_ee9f94be] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;)Ljava/lang/Long;");
                mids$[mid_valueOf_212f058c] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;I)Ljava/lang/Long;");

                class$ = (::java::lang::Class *) new JObject(cls);
                cls = (jclass) class$->this$;

                MAX_VALUE = env->getStaticLongField(cls, "MAX_VALUE");
                MIN_VALUE = env->getStaticLongField(cls, "MIN_VALUE");
                SIZE = env->getStaticIntField(cls, "SIZE");
                TYPE = new ::java::lang::Class(env->getStaticObjectField(cls, "TYPE", "Ljava/lang/Class;"));
            }
            return (jclass) class$->this$;
        }

        Long::Long(jlong a0) : ::java::lang::Number(env->newObject(initializeClass, &mids$, mid_init$_0ee6df2f, a0)) {}

        Long::Long(const ::java::lang::String & a0) : ::java::lang::Number(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}

        jint Long::bitCount(jlong a0)
        {
            jclass cls = initializeClass();
            return env->callStaticIntMethod(cls, mids$[mid_bitCount_0ee6df30], a0);
        }

        jbyte Long::byteValue() const
        {
            return env->callByteMethod(this$, mids$[mid_byteValue_54c6a172]);
        }

        jint Long::compareTo(const ::java::lang::Object & a0) const
        {
            return env->callIntMethod(this$, mids$[mid_compareTo_290588f1], a0.this$);
        }

        jint Long::compareTo(const Long & a0) const
        {
            return env->callIntMethod(this$, mids$[mid_compareTo_da55802e], a0.this$);
        }

        Long Long::decode(const ::java::lang::String & a0)
        {
            jclass cls = initializeClass();
            return Long(env->callStaticObjectMethod(cls, mids$[mid_decode_ee9f94be], a0.this$));
        }

        jdouble Long::doubleValue() const
        {
            return env->callDoubleMethod(this$, mids$[mid_doubleValue_54c6a174]);
        }

        jboolean Long::equals(const ::java::lang::Object & a0) const
        {
            return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        jfloat Long::floatValue() const
        {
            return env->callFloatMethod(this$, mids$[mid_floatValue_54c6a176]);
        }

        Long Long::getLong(const ::java::lang::String & a0)
        {
            jclass cls = initializeClass();
            return Long(env->callStaticObjectMethod(cls, mids$[mid_getLong_ee9f94be], a0.this$));
        }

        Long Long::getLong(const ::java::lang::String & a0, jlong a1)
        {
            jclass cls = initializeClass();
            return Long(env->callStaticObjectMethod(cls, mids$[mid_getLong_9f081a1d], a0.this$, a1));
        }

        Long Long::getLong(const ::java::lang::String & a0, const Long & a1)
        {
            jclass cls = initializeClass();
            return Long(env->callStaticObjectMethod(cls, mids$[mid_getLong_9a12142f], a0.this$, a1.this$));
        }

        jint Long::hashCode() const
        {
            return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        jlong Long::highestOneBit(jlong a0)
        {
            jclass cls = initializeClass();
            return env->callStaticLongMethod(cls, mids$[mid_highestOneBit_0ee6df33], a0);
        }

        jint Long::intValue() const
        {
            return env->callIntMethod(this$, mids$[mid_intValue_54c6a179]);
        }

        jlong Long::longValue() const
        {
            return env->callLongMethod(this$, mids$[mid_longValue_54c6a17a]);
        }

        jlong Long::lowestOneBit(jlong a0)
        {
            jclass cls = initializeClass();
            return env->callStaticLongMethod(cls, mids$[mid_lowestOneBit_0ee6df33], a0);
        }

        jint Long::numberOfLeadingZeros(jlong a0)
        {
            jclass cls = initializeClass();
            return env->callStaticIntMethod(cls, mids$[mid_numberOfLeadingZeros_0ee6df30], a0);
        }

        jint Long::numberOfTrailingZeros(jlong a0)
        {
            jclass cls = initializeClass();
            return env->callStaticIntMethod(cls, mids$[mid_numberOfTrailingZeros_0ee6df30], a0);
        }

        jlong Long::parseLong(const ::java::lang::String & a0)
        {
            jclass cls = initializeClass();
            return env->callStaticLongMethod(cls, mids$[mid_parseLong_5fdc3f54], a0.this$);
        }

        jlong Long::parseLong(const ::java::lang::String & a0, jint a1)
        {
            jclass cls = initializeClass();
            return env->callStaticLongMethod(cls, mids$[mid_parseLong_6e53ccda], a0.this$, a1);
        }

        jlong Long::reverse(jlong a0)
        {
            jclass cls = initializeClass();
            return env->callStaticLongMethod(cls, mids$[mid_reverse_0ee6df33], a0);
        }

        jlong Long::reverseBytes(jlong a0)
        {
            jclass cls = initializeClass();
            return env->callStaticLongMethod(cls, mids$[mid_reverseBytes_0ee6df33], a0);
        }

        jlong Long::rotateLeft(jlong a0, jint a1)
        {
            jclass cls = initializeClass();
            return env->callStaticLongMethod(cls, mids$[mid_rotateLeft_25d05c93], a0, a1);
        }

        jlong Long::rotateRight(jlong a0, jint a1)
        {
            jclass cls = initializeClass();
            return env->callStaticLongMethod(cls, mids$[mid_rotateRight_25d05c93], a0, a1);
        }

        jshort Long::shortValue() const
        {
            return env->callShortMethod(this$, mids$[mid_shortValue_54c6a163]);
        }

        jint Long::signum(jlong a0)
        {
            jclass cls = initializeClass();
            return env->callStaticIntMethod(cls, mids$[mid_signum_0ee6df30], a0);
        }

        ::java::lang::String Long::toBinaryString(jlong a0)
        {
            jclass cls = initializeClass();
            return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_toBinaryString_3e02f30e], a0));
        }

        ::java::lang::String Long::toHexString(jlong a0)
        {
            jclass cls = initializeClass();
            return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_toHexString_3e02f30e], a0));
        }

        ::java::lang::String Long::toOctalString(jlong a0)
        {
            jclass cls = initializeClass();
            return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_toOctalString_3e02f30e], a0));
        }

        ::java::lang::String Long::toString() const
        {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }

        ::java::lang::String Long::toString(jlong a0)
        {
            jclass cls = initializeClass();
            return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_toString_3e02f30e], a0));
        }

        ::java::lang::String Long::toString(jlong a0, jint a1)
        {
            jclass cls = initializeClass();
            return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_toString_36a2b01a], a0, a1));
        }

        Long Long::valueOf(jlong a0)
        {
            jclass cls = initializeClass();
            return Long(env->callStaticObjectMethod(cls, mids$[mid_valueOf_62a69723], a0));
        }

        Long Long::valueOf(const ::java::lang::String & a0)
        {
            jclass cls = initializeClass();
            return Long(env->callStaticObjectMethod(cls, mids$[mid_valueOf_ee9f94be], a0.this$));
        }

        Long Long::valueOf(const ::java::lang::String & a0, jint a1)
        {
            jclass cls = initializeClass();
            return Long(env->callStaticObjectMethod(cls, mids$[mid_valueOf_212f058c], a0.this$, a1));
        }
    }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
    namespace lang {
        static PyObject *t_Long_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Long_instance_(PyTypeObject *type, PyObject *arg);
        static int t_Long_init_(t_Long *self, PyObject *args, PyObject *kwds);
        static PyObject *t_Long_bitCount(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Long_byteValue(t_Long *self, PyObject *args);
        static PyObject *t_Long_compareTo(t_Long *self, PyObject *args);
        static PyObject *t_Long_decode(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Long_doubleValue(t_Long *self, PyObject *args);
        static PyObject *t_Long_equals(t_Long *self, PyObject *args);
        static PyObject *t_Long_floatValue(t_Long *self, PyObject *args);
        static PyObject *t_Long_getLong(PyTypeObject *type, PyObject *args);
        static PyObject *t_Long_hashCode(t_Long *self, PyObject *args);
        static PyObject *t_Long_highestOneBit(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Long_intValue(t_Long *self, PyObject *args);
        static PyObject *t_Long_longValue(t_Long *self, PyObject *args);
        static PyObject *t_Long_lowestOneBit(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Long_numberOfLeadingZeros(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Long_numberOfTrailingZeros(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Long_parseLong(PyTypeObject *type, PyObject *args);
        static PyObject *t_Long_reverse(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Long_reverseBytes(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Long_rotateLeft(PyTypeObject *type, PyObject *args);
        static PyObject *t_Long_rotateRight(PyTypeObject *type, PyObject *args);
        static PyObject *t_Long_shortValue(t_Long *self, PyObject *args);
        static PyObject *t_Long_signum(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Long_toBinaryString(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Long_toHexString(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Long_toOctalString(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Long_toString(t_Long *self, PyObject *args);
        static PyObject *t_Long_toString_(PyTypeObject *type, PyObject *args);
        static PyObject *t_Long_valueOf(PyTypeObject *type, PyObject *args);

        static PyMethodDef t_Long__methods_[] = {
            DECLARE_METHOD(t_Long, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Long, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Long, bitCount, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Long, byteValue, METH_VARARGS),
            DECLARE_METHOD(t_Long, compareTo, METH_VARARGS),
            DECLARE_METHOD(t_Long, decode, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Long, doubleValue, METH_VARARGS),
            DECLARE_METHOD(t_Long, equals, METH_VARARGS),
            DECLARE_METHOD(t_Long, floatValue, METH_VARARGS),
            DECLARE_METHOD(t_Long, getLong, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_Long, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_Long, highestOneBit, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Long, intValue, METH_VARARGS),
            DECLARE_METHOD(t_Long, longValue, METH_VARARGS),
            DECLARE_METHOD(t_Long, lowestOneBit, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Long, numberOfLeadingZeros, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Long, numberOfTrailingZeros, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Long, parseLong, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_Long, reverse, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Long, reverseBytes, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Long, rotateLeft, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_Long, rotateRight, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_Long, shortValue, METH_VARARGS),
            DECLARE_METHOD(t_Long, signum, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Long, toBinaryString, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Long, toHexString, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Long, toOctalString, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Long, toString, METH_VARARGS),
            DECLARE_METHOD(t_Long, toString_, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_Long, valueOf, METH_VARARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(Long, t_Long, ::java::lang::Number, Long, t_Long_init_, 0, 0, 0, 0, 0);

        void t_Long::install(PyObject *module)
        {
            installType(&PY_TYPE(Long), module, "Long", 0);
        }

        void t_Long::initialize(PyObject *module)
        {
            PyDict_SetItemString(PY_TYPE(Long).tp_dict, "class_", make_descriptor(Long::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Long).tp_dict, "wrapfn_", make_descriptor(unboxLong));
            PyDict_SetItemString(PY_TYPE(Long).tp_dict, "boxfn_", make_descriptor(boxLong));
            Long::initializeClass();
            PyDict_SetItemString(PY_TYPE(Long).tp_dict, "MAX_VALUE", make_descriptor(Long::MAX_VALUE));
            PyDict_SetItemString(PY_TYPE(Long).tp_dict, "MIN_VALUE", make_descriptor(Long::MIN_VALUE));
            PyDict_SetItemString(PY_TYPE(Long).tp_dict, "SIZE", make_descriptor(Long::SIZE));
            PyDict_SetItemString(PY_TYPE(Long).tp_dict, "TYPE", make_descriptor(::java::lang::t_Class::wrap_Object(*Long::TYPE)));
        }

        static PyObject *t_Long_cast_(PyTypeObject *type, PyObject *arg)
        {
            if (!(arg = castCheck(arg, Long::initializeClass, 1)))
                return NULL;
            return t_Long::wrap_Object(Long(((t_Long *) arg)->object.this$));
        }
        static PyObject *t_Long_instance_(PyTypeObject *type, PyObject *arg)
        {
            if (!castCheck(arg, Long::initializeClass, 0))
                Py_RETURN_FALSE;
            Py_RETURN_TRUE;
        }

        static int t_Long_init_(t_Long *self, PyObject *args, PyObject *kwds)
        {
            switch (PyTuple_GET_SIZE(args)) {
              case 1:
                {
                    jlong a0;
                    Long object((jobject) NULL);

                    if (!parseArgs(args, "J", &a0))
                    {
                        INT_CALL(object = Long(a0));
                        self->object = object;
                        break;
                    }
                }
                {
                    ::java::lang::String a0((jobject) NULL);
                    Long object((jobject) NULL);

                    if (!parseArgs(args, "s", &a0))
                    {
                        INT_CALL(object = Long(a0));
                        self->object = object;
                        break;
                    }
                }
              default:
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
            }

            return 0;
        }

        static PyObject *t_Long_bitCount(PyTypeObject *type, PyObject *arg)
        {
            jlong a0;
            jint result;

            if (!parseArg(arg, "J", &a0))
            {
                OBJ_CALL(result = ::java::lang::Long::bitCount(a0));
                return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError(type, "bitCount", arg);
            return NULL;
        }

        static PyObject *t_Long_byteValue(t_Long *self, PyObject *args)
        {
            jbyte result;

            if (!parseArgs(args, ""))
            {
                OBJ_CALL(result = self->object.byteValue());
                return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(Long), (PyObject *) self, "byteValue", args, 2);
        }

        static PyObject *t_Long_compareTo(t_Long *self, PyObject *args)
        {
            switch (PyTuple_GET_SIZE(args)) {
              case 1:
                {
                    ::java::lang::Object a0((jobject) NULL);
                    jint result;

                    if (!parseArgs(args, "o", &a0))
                    {
                        OBJ_CALL(result = self->object.compareTo(a0));
                        return PyInt_FromLong((long) result);
                    }
                }
                {
                    Long a0((jobject) NULL);
                    jint result;

                    if (!parseArgs(args, "O", &::java::lang::PY_TYPE(Long), &a0))
                    {
                        OBJ_CALL(result = self->object.compareTo(a0));
                        return PyInt_FromLong((long) result);
                    }
                }
            }

            PyErr_SetArgsError((PyObject *) self, "compareTo", args);
            return NULL;
        }

        static PyObject *t_Long_decode(PyTypeObject *type, PyObject *arg)
        {
            ::java::lang::String a0((jobject) NULL);
            Long result((jobject) NULL);

            if (!parseArg(arg, "s", &a0))
            {
                OBJ_CALL(result = ::java::lang::Long::decode(a0));
                return t_Long::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "decode", arg);
            return NULL;
        }

        static PyObject *t_Long_doubleValue(t_Long *self, PyObject *args)
        {
            jdouble result;

            if (!parseArgs(args, ""))
            {
                OBJ_CALL(result = self->object.doubleValue());
                return PyFloat_FromDouble((double) result);
            }

            return callSuper(&PY_TYPE(Long), (PyObject *) self, "doubleValue", args, 2);
        }

        static PyObject *t_Long_equals(t_Long *self, PyObject *args)
        {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
                OBJ_CALL(result = self->object.equals(a0));
                Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(Long), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_Long_floatValue(t_Long *self, PyObject *args)
        {
            jfloat result;

            if (!parseArgs(args, ""))
            {
                OBJ_CALL(result = self->object.floatValue());
                return PyFloat_FromDouble((double) result);
            }

            return callSuper(&PY_TYPE(Long), (PyObject *) self, "floatValue", args, 2);
        }

        static PyObject *t_Long_getLong(PyTypeObject *type, PyObject *args)
        {
            switch (PyTuple_GET_SIZE(args)) {
              case 1:
                {
                    ::java::lang::String a0((jobject) NULL);
                    Long result((jobject) NULL);

                    if (!parseArgs(args, "s", &a0))
                    {
                        OBJ_CALL(result = ::java::lang::Long::getLong(a0));
                        return t_Long::wrap_Object(result);
                    }
                }
                break;
              case 2:
                {
                    ::java::lang::String a0((jobject) NULL);
                    jlong a1;
                    Long result((jobject) NULL);

                    if (!parseArgs(args, "sJ", &a0, &a1))
                    {
                        OBJ_CALL(result = ::java::lang::Long::getLong(a0, a1));
                        return t_Long::wrap_Object(result);
                    }
                }
                {
                    ::java::lang::String a0((jobject) NULL);
                    Long a1((jobject) NULL);
                    Long result((jobject) NULL);

                    if (!parseArgs(args, "sO", &::java::lang::PY_TYPE(Long), &a0, &a1))
                    {
                        OBJ_CALL(result = ::java::lang::Long::getLong(a0, a1));
                        return t_Long::wrap_Object(result);
                    }
                }
            }

            PyErr_SetArgsError(type, "getLong", args);
            return NULL;
        }

        static PyObject *t_Long_hashCode(t_Long *self, PyObject *args)
        {
            jint result;

            if (!parseArgs(args, ""))
            {
                OBJ_CALL(result = self->object.hashCode());
                return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(Long), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_Long_highestOneBit(PyTypeObject *type, PyObject *arg)
        {
            jlong a0;
            jlong result;

            if (!parseArg(arg, "J", &a0))
            {
                OBJ_CALL(result = ::java::lang::Long::highestOneBit(a0));
                return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            PyErr_SetArgsError(type, "highestOneBit", arg);
            return NULL;
        }

        static PyObject *t_Long_intValue(t_Long *self, PyObject *args)
        {
            jint result;

            if (!parseArgs(args, ""))
            {
                OBJ_CALL(result = self->object.intValue());
                return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(Long), (PyObject *) self, "intValue", args, 2);
        }

        static PyObject *t_Long_longValue(t_Long *self, PyObject *args)
        {
            jlong result;

            if (!parseArgs(args, ""))
            {
                OBJ_CALL(result = self->object.longValue());
                return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            return callSuper(&PY_TYPE(Long), (PyObject *) self, "longValue", args, 2);
        }

        static PyObject *t_Long_lowestOneBit(PyTypeObject *type, PyObject *arg)
        {
            jlong a0;
            jlong result;

            if (!parseArg(arg, "J", &a0))
            {
                OBJ_CALL(result = ::java::lang::Long::lowestOneBit(a0));
                return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            PyErr_SetArgsError(type, "lowestOneBit", arg);
            return NULL;
        }

        static PyObject *t_Long_numberOfLeadingZeros(PyTypeObject *type, PyObject *arg)
        {
            jlong a0;
            jint result;

            if (!parseArg(arg, "J", &a0))
            {
                OBJ_CALL(result = ::java::lang::Long::numberOfLeadingZeros(a0));
                return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError(type, "numberOfLeadingZeros", arg);
            return NULL;
        }

        static PyObject *t_Long_numberOfTrailingZeros(PyTypeObject *type, PyObject *arg)
        {
            jlong a0;
            jint result;

            if (!parseArg(arg, "J", &a0))
            {
                OBJ_CALL(result = ::java::lang::Long::numberOfTrailingZeros(a0));
                return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError(type, "numberOfTrailingZeros", arg);
            return NULL;
        }

        static PyObject *t_Long_parseLong(PyTypeObject *type, PyObject *args)
        {
            switch (PyTuple_GET_SIZE(args)) {
              case 1:
                {
                    ::java::lang::String a0((jobject) NULL);
                    jlong result;

                    if (!parseArgs(args, "s", &a0))
                    {
                        OBJ_CALL(result = ::java::lang::Long::parseLong(a0));
                        return PyLong_FromLongLong((PY_LONG_LONG) result);
                    }
                }
                break;
              case 2:
                {
                    ::java::lang::String a0((jobject) NULL);
                    jint a1;
                    jlong result;

                    if (!parseArgs(args, "sI", &a0, &a1))
                    {
                        OBJ_CALL(result = ::java::lang::Long::parseLong(a0, a1));
                        return PyLong_FromLongLong((PY_LONG_LONG) result);
                    }
                }
            }

            PyErr_SetArgsError(type, "parseLong", args);
            return NULL;
        }

        static PyObject *t_Long_reverse(PyTypeObject *type, PyObject *arg)
        {
            jlong a0;
            jlong result;

            if (!parseArg(arg, "J", &a0))
            {
                OBJ_CALL(result = ::java::lang::Long::reverse(a0));
                return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            PyErr_SetArgsError(type, "reverse", arg);
            return NULL;
        }

        static PyObject *t_Long_reverseBytes(PyTypeObject *type, PyObject *arg)
        {
            jlong a0;
            jlong result;

            if (!parseArg(arg, "J", &a0))
            {
                OBJ_CALL(result = ::java::lang::Long::reverseBytes(a0));
                return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            PyErr_SetArgsError(type, "reverseBytes", arg);
            return NULL;
        }

        static PyObject *t_Long_rotateLeft(PyTypeObject *type, PyObject *args)
        {
            jlong a0;
            jint a1;
            jlong result;

            if (!parseArgs(args, "JI", &a0, &a1))
            {
                OBJ_CALL(result = ::java::lang::Long::rotateLeft(a0, a1));
                return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            PyErr_SetArgsError(type, "rotateLeft", args);
            return NULL;
        }

        static PyObject *t_Long_rotateRight(PyTypeObject *type, PyObject *args)
        {
            jlong a0;
            jint a1;
            jlong result;

            if (!parseArgs(args, "JI", &a0, &a1))
            {
                OBJ_CALL(result = ::java::lang::Long::rotateRight(a0, a1));
                return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            PyErr_SetArgsError(type, "rotateRight", args);
            return NULL;
        }

        static PyObject *t_Long_shortValue(t_Long *self, PyObject *args)
        {
            jshort result;

            if (!parseArgs(args, ""))
            {
                OBJ_CALL(result = self->object.shortValue());
                return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(Long), (PyObject *) self, "shortValue", args, 2);
        }

        static PyObject *t_Long_signum(PyTypeObject *type, PyObject *arg)
        {
            jlong a0;
            jint result;

            if (!parseArg(arg, "J", &a0))
            {
                OBJ_CALL(result = ::java::lang::Long::signum(a0));
                return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError(type, "signum", arg);
            return NULL;
        }

        static PyObject *t_Long_toBinaryString(PyTypeObject *type, PyObject *arg)
        {
            jlong a0;
            ::java::lang::String result((jobject) NULL);

            if (!parseArg(arg, "J", &a0))
            {
                OBJ_CALL(result = ::java::lang::Long::toBinaryString(a0));
                return j2p(result);
            }

            PyErr_SetArgsError(type, "toBinaryString", arg);
            return NULL;
        }

        static PyObject *t_Long_toHexString(PyTypeObject *type, PyObject *arg)
        {
            jlong a0;
            ::java::lang::String result((jobject) NULL);

            if (!parseArg(arg, "J", &a0))
            {
                OBJ_CALL(result = ::java::lang::Long::toHexString(a0));
                return j2p(result);
            }

            PyErr_SetArgsError(type, "toHexString", arg);
            return NULL;
        }

        static PyObject *t_Long_toOctalString(PyTypeObject *type, PyObject *arg)
        {
            jlong a0;
            ::java::lang::String result((jobject) NULL);

            if (!parseArg(arg, "J", &a0))
            {
                OBJ_CALL(result = ::java::lang::Long::toOctalString(a0));
                return j2p(result);
            }

            PyErr_SetArgsError(type, "toOctalString", arg);
            return NULL;
        }

        static PyObject *t_Long_toString(t_Long *self, PyObject *args)
        {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
                OBJ_CALL(result = self->object.toString());
                return j2p(result);
            }

            return callSuper(&PY_TYPE(Long), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_Long_toString_(PyTypeObject *type, PyObject *args)
        {
            switch (PyTuple_GET_SIZE(args)) {
              case 1:
                {
                    jlong a0;
                    ::java::lang::String result((jobject) NULL);

                    if (!parseArgs(args, "J", &a0))
                    {
                        OBJ_CALL(result = ::java::lang::Long::toString(a0));
                        return j2p(result);
                    }
                }
                break;
              case 2:
                {
                    jlong a0;
                    jint a1;
                    ::java::lang::String result((jobject) NULL);

                    if (!parseArgs(args, "JI", &a0, &a1))
                    {
                        OBJ_CALL(result = ::java::lang::Long::toString(a0, a1));
                        return j2p(result);
                    }
                }
            }

            PyErr_SetArgsError(type, "toString_", args);
            return NULL;
        }

        static PyObject *t_Long_valueOf(PyTypeObject *type, PyObject *args)
        {
            switch (PyTuple_GET_SIZE(args)) {
              case 1:
                {
                    jlong a0;
                    Long result((jobject) NULL);

                    if (!parseArgs(args, "J", &a0))
                    {
                        OBJ_CALL(result = ::java::lang::Long::valueOf(a0));
                        return t_Long::wrap_Object(result);
                    }
                }
                {
                    ::java::lang::String a0((jobject) NULL);
                    Long result((jobject) NULL);

                    if (!parseArgs(args, "s", &a0))
                    {
                        OBJ_CALL(result = ::java::lang::Long::valueOf(a0));
                        return t_Long::wrap_Object(result);
                    }
                }
                break;
              case 2:
                {
                    ::java::lang::String a0((jobject) NULL);
                    jint a1;
                    Long result((jobject) NULL);

                    if (!parseArgs(args, "sI", &a0, &a1))
                    {
                        OBJ_CALL(result = ::java::lang::Long::valueOf(a0, a1));
                        return t_Long::wrap_Object(result);
                    }
                }
            }

            PyErr_SetArgsError(type, "valueOf", args);
            return NULL;
        }
    }
}
#include <jni.h>
#include "JCCEnv.h"
#include "is/iclt/icenlp/core/icetagger/IceHeuristics.h"
#include "java/util/ArrayList.h"
#include "is/iclt/icenlp/core/utils/Lexicon.h"
#include "is/iclt/icenlp/core/utils/IceLog.h"
#include "java/lang/Class.h"
#include "is/iclt/icenlp/core/tokenizer/IceTokenTags$Match.h"
#include "java/lang/String.h"
#include "is/iclt/icenlp/core/tokenizer/IceTokenTags.h"
#include "JArray.h"

namespace is {
    namespace iclt {
        namespace icenlp {
            namespace core {
                namespace icetagger {

                    ::java::lang::Class *IceHeuristics::class$ = NULL;
                    jmethodID *IceHeuristics::mids$ = NULL;

                    jclass IceHeuristics::initializeClass()
                    {
                        if (!class$)
                        {

                            jclass cls = (jclass) env->findClass("is/iclt/icenlp/core/icetagger/IceHeuristics");

                            mids$ = new jmethodID[max_mid];
                            mids$[mid_init$_c386ef44] = env->getMethodID(cls, "<init>", "(Lis/iclt/icenlp/core/utils/IceLog;Lis/iclt/icenlp/core/utils/Lexicon;Lis/iclt/icenlp/core/utils/Lexicon;)V");
                            mids$[mid_ambiguateAdjectives_d8d154a6] = env->getMethodID(cls, "ambiguateAdjectives", "(II)V");
                            mids$[mid_checkCorrectPrep_d8d154a6] = env->getMethodID(cls, "checkCorrectPrep", "(II)V");
                            mids$[mid_checkEnumeration_54c6a166] = env->getMethodID(cls, "checkEnumeration", "()V");
                            mids$[mid_checkNominalAgreement_d8d154a6] = env->getMethodID(cls, "checkNominalAgreement", "(II)V");
                            mids$[mid_checkPrepAgreement_d8d154a6] = env->getMethodID(cls, "checkPrepAgreement", "(II)V");
                            mids$[mid_checkReflexives_54c6a166] = env->getMethodID(cls, "checkReflexives", "()V");
                            mids$[mid_checkSVO_d8d154a6] = env->getMethodID(cls, "checkSVO", "(II)V");
                            mids$[mid_checkSubjectObjectAgreement_d3236aa8] = env->getMethodID(cls, "checkSubjectObjectAgreement", "(III)Z");
                            mids$[mid_checkSubjunctive_54c6a166] = env->getMethodID(cls, "checkSubjunctive", "()V");
                            mids$[mid_forceAgreement_281ca35a] = env->getMethodID(cls, "forceAgreement", "(Lis/iclt/icenlp/core/tokenizer/IceTokenTags;Lis/iclt/icenlp/core/tokenizer/IceTokenTags;)V");
                            mids$[mid_getLastPluralSubject_265fd945] = env->getMethodID(cls, "getLastPluralSubject", "()Lis/iclt/icenlp/core/tokenizer/IceTokenTags;");
                            mids$[mid_match_6506aa73] = env->getMethodID(cls, "match", "(Lis/iclt/icenlp/core/tokenizer/IceTokenTags$Match;Lis/iclt/icenlp/core/tokenizer/IceTokenTags;Lis/iclt/icenlp/core/tokenizer/IceTokenTags;)Z");
                            mids$[mid_setTokens_b3f662f9] = env->getMethodID(cls, "setTokens", "(Ljava/util/ArrayList;)V");
                            mids$[mid_verbPrepLookup_9f352141] = env->getMethodID(cls, "verbPrepLookup", "(Lis/iclt/icenlp/core/tokenizer/IceTokenTags;Lis/iclt/icenlp/core/tokenizer/IceTokenTags;)Ljava/lang/String;");

                            class$ = (::java::lang::Class *) new JObject(cls);
                        }
                        return (jclass) class$->this$;
                    }

                    IceHeuristics::IceHeuristics(const ::is::iclt::icenlp::core::utils::IceLog & a0, const ::is::iclt::icenlp::core::utils::Lexicon & a1, const ::is::iclt::icenlp::core::utils::Lexicon & a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_c386ef44, a0.this$, a1.this$, a2.this$)) {}

                    void IceHeuristics::ambiguateAdjectives(jint a0, jint a1) const
                    {
                        env->callVoidMethod(this$, mids$[mid_ambiguateAdjectives_d8d154a6], a0, a1);
                    }

                    void IceHeuristics::checkCorrectPrep(jint a0, jint a1) const
                    {
                        env->callVoidMethod(this$, mids$[mid_checkCorrectPrep_d8d154a6], a0, a1);
                    }

                    void IceHeuristics::checkEnumeration() const
                    {
                        env->callVoidMethod(this$, mids$[mid_checkEnumeration_54c6a166]);
                    }

                    void IceHeuristics::checkNominalAgreement(jint a0, jint a1) const
                    {
                        env->callVoidMethod(this$, mids$[mid_checkNominalAgreement_d8d154a6], a0, a1);
                    }

                    void IceHeuristics::checkPrepAgreement(jint a0, jint a1) const
                    {
                        env->callVoidMethod(this$, mids$[mid_checkPrepAgreement_d8d154a6], a0, a1);
                    }

                    void IceHeuristics::checkReflexives() const
                    {
                        env->callVoidMethod(this$, mids$[mid_checkReflexives_54c6a166]);
                    }

                    void IceHeuristics::checkSVO(jint a0, jint a1) const
                    {
                        env->callVoidMethod(this$, mids$[mid_checkSVO_d8d154a6], a0, a1);
                    }

                    jboolean IceHeuristics::checkSubjectObjectAgreement(jint a0, jint a1, jint a2) const
                    {
                        return env->callBooleanMethod(this$, mids$[mid_checkSubjectObjectAgreement_d3236aa8], a0, a1, a2);
                    }

                    void IceHeuristics::checkSubjunctive() const
                    {
                        env->callVoidMethod(this$, mids$[mid_checkSubjunctive_54c6a166]);
                    }

                    void IceHeuristics::forceAgreement(const ::is::iclt::icenlp::core::tokenizer::IceTokenTags & a0, const ::is::iclt::icenlp::core::tokenizer::IceTokenTags & a1) const
                    {
                        env->callVoidMethod(this$, mids$[mid_forceAgreement_281ca35a], a0.this$, a1.this$);
                    }

                    ::is::iclt::icenlp::core::tokenizer::IceTokenTags IceHeuristics::getLastPluralSubject() const
                    {
                        return ::is::iclt::icenlp::core::tokenizer::IceTokenTags(env->callObjectMethod(this$, mids$[mid_getLastPluralSubject_265fd945]));
                    }

                    jboolean IceHeuristics::match(const ::is::iclt::icenlp::core::tokenizer::IceTokenTags$Match & a0, const ::is::iclt::icenlp::core::tokenizer::IceTokenTags & a1, const ::is::iclt::icenlp::core::tokenizer::IceTokenTags & a2) const
                    {
                        return env->callBooleanMethod(this$, mids$[mid_match_6506aa73], a0.this$, a1.this$, a2.this$);
                    }

                    void IceHeuristics::setTokens(const ::java::util::ArrayList & a0) const
                    {
                        env->callVoidMethod(this$, mids$[mid_setTokens_b3f662f9], a0.this$);
                    }

                    ::java::lang::String IceHeuristics::verbPrepLookup(const ::is::iclt::icenlp::core::tokenizer::IceTokenTags & a0, const ::is::iclt::icenlp::core::tokenizer::IceTokenTags & a1) const
                    {
                        return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_verbPrepLookup_9f352141], a0.this$, a1.this$));
                    }
                }
            }
        }
    }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace is {
    namespace iclt {
        namespace icenlp {
            namespace core {
                namespace icetagger {
                    static PyObject *t_IceHeuristics_cast_(PyTypeObject *type, PyObject *arg);
                    static PyObject *t_IceHeuristics_instance_(PyTypeObject *type, PyObject *arg);
                    static int t_IceHeuristics_init_(t_IceHeuristics *self, PyObject *args, PyObject *kwds);
                    static PyObject *t_IceHeuristics_ambiguateAdjectives(t_IceHeuristics *self, PyObject *args);
                    static PyObject *t_IceHeuristics_checkCorrectPrep(t_IceHeuristics *self, PyObject *args);
                    static PyObject *t_IceHeuristics_checkEnumeration(t_IceHeuristics *self);
                    static PyObject *t_IceHeuristics_checkNominalAgreement(t_IceHeuristics *self, PyObject *args);
                    static PyObject *t_IceHeuristics_checkPrepAgreement(t_IceHeuristics *self, PyObject *args);
                    static PyObject *t_IceHeuristics_checkReflexives(t_IceHeuristics *self);
                    static PyObject *t_IceHeuristics_checkSVO(t_IceHeuristics *self, PyObject *args);
                    static PyObject *t_IceHeuristics_checkSubjectObjectAgreement(t_IceHeuristics *self, PyObject *args);
                    static PyObject *t_IceHeuristics_checkSubjunctive(t_IceHeuristics *self);
                    static PyObject *t_IceHeuristics_forceAgreement(t_IceHeuristics *self, PyObject *args);
                    static PyObject *t_IceHeuristics_getLastPluralSubject(t_IceHeuristics *self);
                    static PyObject *t_IceHeuristics_match(t_IceHeuristics *self, PyObject *args);
                    static PyObject *t_IceHeuristics_setTokens(t_IceHeuristics *self, PyObject *arg);
                    static PyObject *t_IceHeuristics_verbPrepLookup(t_IceHeuristics *self, PyObject *args);
                    static PyObject *t_IceHeuristics_get__lastPluralSubject(t_IceHeuristics *self, void *data);
                    static int t_IceHeuristics_set__tokens(t_IceHeuristics *self, PyObject *arg, void *data);
                    static PyGetSetDef t_IceHeuristics__fields_[] = {
                        DECLARE_GET_FIELD(t_IceHeuristics, lastPluralSubject),
                        DECLARE_SET_FIELD(t_IceHeuristics, tokens),
                        { NULL, NULL, NULL, NULL, NULL }
                    };

                    static PyMethodDef t_IceHeuristics__methods_[] = {
                        DECLARE_METHOD(t_IceHeuristics, cast_, METH_O | METH_CLASS),
                        DECLARE_METHOD(t_IceHeuristics, instance_, METH_O | METH_CLASS),
                        DECLARE_METHOD(t_IceHeuristics, ambiguateAdjectives, METH_VARARGS),
                        DECLARE_METHOD(t_IceHeuristics, checkCorrectPrep, METH_VARARGS),
                        DECLARE_METHOD(t_IceHeuristics, checkEnumeration, METH_NOARGS),
                        DECLARE_METHOD(t_IceHeuristics, checkNominalAgreement, METH_VARARGS),
                        DECLARE_METHOD(t_IceHeuristics, checkPrepAgreement, METH_VARARGS),
                        DECLARE_METHOD(t_IceHeuristics, checkReflexives, METH_NOARGS),
                        DECLARE_METHOD(t_IceHeuristics, checkSVO, METH_VARARGS),
                        DECLARE_METHOD(t_IceHeuristics, checkSubjectObjectAgreement, METH_VARARGS),
                        DECLARE_METHOD(t_IceHeuristics, checkSubjunctive, METH_NOARGS),
                        DECLARE_METHOD(t_IceHeuristics, forceAgreement, METH_VARARGS),
                        DECLARE_METHOD(t_IceHeuristics, getLastPluralSubject, METH_NOARGS),
                        DECLARE_METHOD(t_IceHeuristics, match, METH_VARARGS),
                        DECLARE_METHOD(t_IceHeuristics, setTokens, METH_O),
                        DECLARE_METHOD(t_IceHeuristics, verbPrepLookup, METH_VARARGS),
                        { NULL, NULL, 0, NULL }
                    };

                    DECLARE_TYPE(IceHeuristics, t_IceHeuristics, ::java::lang::Object, IceHeuristics, t_IceHeuristics_init_, 0, 0, t_IceHeuristics__fields_, 0, 0);

                    void t_IceHeuristics::install(PyObject *module)
                    {
                        installType(&PY_TYPE(IceHeuristics), module, "IceHeuristics", 0);
                    }

                    void t_IceHeuristics::initialize(PyObject *module)
                    {
                        PyDict_SetItemString(PY_TYPE(IceHeuristics).tp_dict, "class_", make_descriptor(IceHeuristics::initializeClass, 1));
                        PyDict_SetItemString(PY_TYPE(IceHeuristics).tp_dict, "wrapfn_", make_descriptor(t_IceHeuristics::wrap_jobject));
                        PyDict_SetItemString(PY_TYPE(IceHeuristics).tp_dict, "boxfn_", make_descriptor(boxObject));
                    }

                    static PyObject *t_IceHeuristics_cast_(PyTypeObject *type, PyObject *arg)
                    {
                        if (!(arg = castCheck(arg, IceHeuristics::initializeClass, 1)))
                            return NULL;
                        return t_IceHeuristics::wrap_Object(IceHeuristics(((t_IceHeuristics *) arg)->object.this$));
                    }
                    static PyObject *t_IceHeuristics_instance_(PyTypeObject *type, PyObject *arg)
                    {
                        if (!castCheck(arg, IceHeuristics::initializeClass, 0))
                            Py_RETURN_FALSE;
                        Py_RETURN_TRUE;
                    }

                    static int t_IceHeuristics_init_(t_IceHeuristics *self, PyObject *args, PyObject *kwds)
                    {
                        ::is::iclt::icenlp::core::utils::IceLog a0((jobject) NULL);
                        ::is::iclt::icenlp::core::utils::Lexicon a1((jobject) NULL);
                        ::is::iclt::icenlp::core::utils::Lexicon a2((jobject) NULL);
                        IceHeuristics object((jobject) NULL);

                        if (!parseArgs(args, "kkk", ::is::iclt::icenlp::core::utils::IceLog::initializeClass, ::is::iclt::icenlp::core::utils::Lexicon::initializeClass, ::is::iclt::icenlp::core::utils::Lexicon::initializeClass, &a0, &a1, &a2))
                        {
                            INT_CALL(object = IceHeuristics(a0, a1, a2));
                            self->object = object;
                        }
                        else
                        {
                            PyErr_SetArgsError((PyObject *) self, "__init__", args);
                            return -1;
                        }

                        return 0;
                    }

                    static PyObject *t_IceHeuristics_ambiguateAdjectives(t_IceHeuristics *self, PyObject *args)
                    {
                        jint a0;
                        jint a1;

                        if (!parseArgs(args, "II", &a0, &a1))
                        {
                            OBJ_CALL(self->object.ambiguateAdjectives(a0, a1));
                            Py_RETURN_NONE;
                        }

                        PyErr_SetArgsError((PyObject *) self, "ambiguateAdjectives", args);
                        return NULL;
                    }

                    static PyObject *t_IceHeuristics_checkCorrectPrep(t_IceHeuristics *self, PyObject *args)
                    {
                        jint a0;
                        jint a1;

                        if (!parseArgs(args, "II", &a0, &a1))
                        {
                            OBJ_CALL(self->object.checkCorrectPrep(a0, a1));
                            Py_RETURN_NONE;
                        }

                        PyErr_SetArgsError((PyObject *) self, "checkCorrectPrep", args);
                        return NULL;
                    }

                    static PyObject *t_IceHeuristics_checkEnumeration(t_IceHeuristics *self)
                    {
                        OBJ_CALL(self->object.checkEnumeration());
                        Py_RETURN_NONE;
                    }

                    static PyObject *t_IceHeuristics_checkNominalAgreement(t_IceHeuristics *self, PyObject *args)
                    {
                        jint a0;
                        jint a1;

                        if (!parseArgs(args, "II", &a0, &a1))
                        {
                            OBJ_CALL(self->object.checkNominalAgreement(a0, a1));
                            Py_RETURN_NONE;
                        }

                        PyErr_SetArgsError((PyObject *) self, "checkNominalAgreement", args);
                        return NULL;
                    }

                    static PyObject *t_IceHeuristics_checkPrepAgreement(t_IceHeuristics *self, PyObject *args)
                    {
                        jint a0;
                        jint a1;

                        if (!parseArgs(args, "II", &a0, &a1))
                        {
                            OBJ_CALL(self->object.checkPrepAgreement(a0, a1));
                            Py_RETURN_NONE;
                        }

                        PyErr_SetArgsError((PyObject *) self, "checkPrepAgreement", args);
                        return NULL;
                    }

                    static PyObject *t_IceHeuristics_checkReflexives(t_IceHeuristics *self)
                    {
                        OBJ_CALL(self->object.checkReflexives());
                        Py_RETURN_NONE;
                    }

                    static PyObject *t_IceHeuristics_checkSVO(t_IceHeuristics *self, PyObject *args)
                    {
                        jint a0;
                        jint a1;

                        if (!parseArgs(args, "II", &a0, &a1))
                        {
                            OBJ_CALL(self->object.checkSVO(a0, a1));
                            Py_RETURN_NONE;
                        }

                        PyErr_SetArgsError((PyObject *) self, "checkSVO", args);
                        return NULL;
                    }

                    static PyObject *t_IceHeuristics_checkSubjectObjectAgreement(t_IceHeuristics *self, PyObject *args)
                    {
                        jint a0;
                        jint a1;
                        jint a2;
                        jboolean result;

                        if (!parseArgs(args, "III", &a0, &a1, &a2))
                        {
                            OBJ_CALL(result = self->object.checkSubjectObjectAgreement(a0, a1, a2));
                            Py_RETURN_BOOL(result);
                        }

                        PyErr_SetArgsError((PyObject *) self, "checkSubjectObjectAgreement", args);
                        return NULL;
                    }

                    static PyObject *t_IceHeuristics_checkSubjunctive(t_IceHeuristics *self)
                    {
                        OBJ_CALL(self->object.checkSubjunctive());
                        Py_RETURN_NONE;
                    }

                    static PyObject *t_IceHeuristics_forceAgreement(t_IceHeuristics *self, PyObject *args)
                    {
                        ::is::iclt::icenlp::core::tokenizer::IceTokenTags a0((jobject) NULL);
                        ::is::iclt::icenlp::core::tokenizer::IceTokenTags a1((jobject) NULL);

                        if (!parseArgs(args, "kk", ::is::iclt::icenlp::core::tokenizer::IceTokenTags::initializeClass, ::is::iclt::icenlp::core::tokenizer::IceTokenTags::initializeClass, &a0, &a1))
                        {
                            OBJ_CALL(self->object.forceAgreement(a0, a1));
                            Py_RETURN_NONE;
                        }

                        PyErr_SetArgsError((PyObject *) self, "forceAgreement", args);
                        return NULL;
                    }

                    static PyObject *t_IceHeuristics_getLastPluralSubject(t_IceHeuristics *self)
                    {
                        ::is::iclt::icenlp::core::tokenizer::IceTokenTags result((jobject) NULL);
                        OBJ_CALL(result = self->object.getLastPluralSubject());
                        return ::is::iclt::icenlp::core::tokenizer::t_IceTokenTags::wrap_Object(result);
                    }

                    static PyObject *t_IceHeuristics_match(t_IceHeuristics *self, PyObject *args)
                    {
                        ::is::iclt::icenlp::core::tokenizer::IceTokenTags$Match a0((jobject) NULL);
                        ::is::iclt::icenlp::core::tokenizer::IceTokenTags a1((jobject) NULL);
                        ::is::iclt::icenlp::core::tokenizer::IceTokenTags a2((jobject) NULL);
                        jboolean result;

                        if (!parseArgs(args, "kkk", ::is::iclt::icenlp::core::tokenizer::IceTokenTags$Match::initializeClass, ::is::iclt::icenlp::core::tokenizer::IceTokenTags::initializeClass, ::is::iclt::icenlp::core::tokenizer::IceTokenTags::initializeClass, &a0, &a1, &a2))
                        {
                            OBJ_CALL(result = self->object.match(a0, a1, a2));
                            Py_RETURN_BOOL(result);
                        }

                        PyErr_SetArgsError((PyObject *) self, "match", args);
                        return NULL;
                    }

                    static PyObject *t_IceHeuristics_setTokens(t_IceHeuristics *self, PyObject *arg)
                    {
                        ::java::util::ArrayList a0((jobject) NULL);
                        PyTypeObject **p0;

                        if (!parseArg(arg, "K", ::java::util::ArrayList::initializeClass, &a0, &p0, ::java::util::t_ArrayList::parameters_))
                        {
                            OBJ_CALL(self->object.setTokens(a0));
                            Py_RETURN_NONE;
                        }

                        PyErr_SetArgsError((PyObject *) self, "setTokens", arg);
                        return NULL;
                    }

                    static PyObject *t_IceHeuristics_verbPrepLookup(t_IceHeuristics *self, PyObject *args)
                    {
                        ::is::iclt::icenlp::core::tokenizer::IceTokenTags a0((jobject) NULL);
                        ::is::iclt::icenlp::core::tokenizer::IceTokenTags a1((jobject) NULL);
                        ::java::lang::String result((jobject) NULL);

                        if (!parseArgs(args, "kk", ::is::iclt::icenlp::core::tokenizer::IceTokenTags::initializeClass, ::is::iclt::icenlp::core::tokenizer::IceTokenTags::initializeClass, &a0, &a1))
                        {
                            OBJ_CALL(result = self->object.verbPrepLookup(a0, a1));
                            return j2p(result);
                        }

                        PyErr_SetArgsError((PyObject *) self, "verbPrepLookup", args);
                        return NULL;
                    }

                    static PyObject *t_IceHeuristics_get__lastPluralSubject(t_IceHeuristics *self, void *data)
                    {
                        ::is::iclt::icenlp::core::tokenizer::IceTokenTags value((jobject) NULL);
                        OBJ_CALL(value = self->object.getLastPluralSubject());
                        return ::is::iclt::icenlp::core::tokenizer::t_IceTokenTags::wrap_Object(value);
                    }

                    static int t_IceHeuristics_set__tokens(t_IceHeuristics *self, PyObject *arg, void *data)
                    {
                        {
                            ::java::util::ArrayList value((jobject) NULL);
                            if (!parseArg(arg, "k", ::java::util::ArrayList::initializeClass, &value))
                            {
                                INT_CALL(self->object.setTokens(value));
                                return 0;
                            }
                        }
                        PyErr_SetArgsError((PyObject *) self, "tokens", arg);
                        return -1;
                    }
                }
            }
        }
    }
}
#include <jni.h>
#include "JCCEnv.h"
#include "is/iclt/icenlp/core/icemorphy/MorphoRuleVerb$Mood.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace is {
    namespace iclt {
        namespace icenlp {
            namespace core {
                namespace icemorphy {

                    ::java::lang::Class *MorphoRuleVerb$Mood::class$ = NULL;
                    jmethodID *MorphoRuleVerb$Mood::mids$ = NULL;
                    MorphoRuleVerb$Mood *MorphoRuleVerb$Mood::Imperative = NULL;
                    MorphoRuleVerb$Mood *MorphoRuleVerb$Mood::Indicative = NULL;
                    MorphoRuleVerb$Mood *MorphoRuleVerb$Mood::IndicativeSubjunctive = NULL;
                    MorphoRuleVerb$Mood *MorphoRuleVerb$Mood::Infinitive = NULL;
                    MorphoRuleVerb$Mood *MorphoRuleVerb$Mood::Subjunctive = NULL;

                    jclass MorphoRuleVerb$Mood::initializeClass()
                    {
                        if (!class$)
                        {

                            jclass cls = (jclass) env->findClass("is/iclt/icenlp/core/icemorphy/MorphoRuleVerb$Mood");

                            mids$ = new jmethodID[max_mid];
                            mids$[mid_valueOf_e55c4a17] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;)Lis/iclt/icenlp/core/icemorphy/MorphoRuleVerb$Mood;");
                            mids$[mid_values_f92252f5] = env->getStaticMethodID(cls, "values", "()[Lis/iclt/icenlp/core/icemorphy/MorphoRuleVerb$Mood;");

                            class$ = (::java::lang::Class *) new JObject(cls);
                            cls = (jclass) class$->this$;

                            Imperative = new MorphoRuleVerb$Mood(env->getStaticObjectField(cls, "Imperative", "Lis/iclt/icenlp/core/icemorphy/MorphoRuleVerb$Mood;"));
                            Indicative = new MorphoRuleVerb$Mood(env->getStaticObjectField(cls, "Indicative", "Lis/iclt/icenlp/core/icemorphy/MorphoRuleVerb$Mood;"));
                            IndicativeSubjunctive = new MorphoRuleVerb$Mood(env->getStaticObjectField(cls, "IndicativeSubjunctive", "Lis/iclt/icenlp/core/icemorphy/MorphoRuleVerb$Mood;"));
                            Infinitive = new MorphoRuleVerb$Mood(env->getStaticObjectField(cls, "Infinitive", "Lis/iclt/icenlp/core/icemorphy/MorphoRuleVerb$Mood;"));
                            Subjunctive = new MorphoRuleVerb$Mood(env->getStaticObjectField(cls, "Subjunctive", "Lis/iclt/icenlp/core/icemorphy/MorphoRuleVerb$Mood;"));
                        }
                        return (jclass) class$->this$;
                    }

                    MorphoRuleVerb$Mood MorphoRuleVerb$Mood::valueOf(const ::java::lang::String & a0)
                    {
                        jclass cls = initializeClass();
                        return MorphoRuleVerb$Mood(env->callStaticObjectMethod(cls, mids$[mid_valueOf_e55c4a17], a0.this$));
                    }

                    JArray< MorphoRuleVerb$Mood > MorphoRuleVerb$Mood::values()
                    {
                        jclass cls = initializeClass();
                        return JArray< MorphoRuleVerb$Mood >(env->callStaticObjectMethod(cls, mids$[mid_values_f92252f5]));
                    }
                }
            }
        }
    }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace is {
    namespace iclt {
        namespace icenlp {
            namespace core {
                namespace icemorphy {
                    static PyObject *t_MorphoRuleVerb$Mood_cast_(PyTypeObject *type, PyObject *arg);
                    static PyObject *t_MorphoRuleVerb$Mood_instance_(PyTypeObject *type, PyObject *arg);
                    static PyObject *t_MorphoRuleVerb$Mood_valueOf(PyTypeObject *type, PyObject *args);
                    static PyObject *t_MorphoRuleVerb$Mood_values(PyTypeObject *type);

                    static PyMethodDef t_MorphoRuleVerb$Mood__methods_[] = {
                        DECLARE_METHOD(t_MorphoRuleVerb$Mood, cast_, METH_O | METH_CLASS),
                        DECLARE_METHOD(t_MorphoRuleVerb$Mood, instance_, METH_O | METH_CLASS),
                        DECLARE_METHOD(t_MorphoRuleVerb$Mood, valueOf, METH_VARARGS | METH_CLASS),
                        DECLARE_METHOD(t_MorphoRuleVerb$Mood, values, METH_NOARGS | METH_CLASS),
                        { NULL, NULL, 0, NULL }
                    };

                    DECLARE_TYPE(MorphoRuleVerb$Mood, t_MorphoRuleVerb$Mood, ::java::lang::Enum, MorphoRuleVerb$Mood, abstract_init, 0, 0, 0, 0, 0);

                    void t_MorphoRuleVerb$Mood::install(PyObject *module)
                    {
                        installType(&PY_TYPE(MorphoRuleVerb$Mood), module, "MorphoRuleVerb$Mood", 0);
                    }

                    void t_MorphoRuleVerb$Mood::initialize(PyObject *module)
                    {
                        PyDict_SetItemString(PY_TYPE(MorphoRuleVerb$Mood).tp_dict, "class_", make_descriptor(MorphoRuleVerb$Mood::initializeClass, 1));
                        PyDict_SetItemString(PY_TYPE(MorphoRuleVerb$Mood).tp_dict, "wrapfn_", make_descriptor(t_MorphoRuleVerb$Mood::wrap_jobject));
                        PyDict_SetItemString(PY_TYPE(MorphoRuleVerb$Mood).tp_dict, "boxfn_", make_descriptor(boxObject));
                        MorphoRuleVerb$Mood::initializeClass();
                        PyDict_SetItemString(PY_TYPE(MorphoRuleVerb$Mood).tp_dict, "Imperative", make_descriptor(t_MorphoRuleVerb$Mood::wrap_Object(*MorphoRuleVerb$Mood::Imperative)));
                        PyDict_SetItemString(PY_TYPE(MorphoRuleVerb$Mood).tp_dict, "Indicative", make_descriptor(t_MorphoRuleVerb$Mood::wrap_Object(*MorphoRuleVerb$Mood::Indicative)));
                        PyDict_SetItemString(PY_TYPE(MorphoRuleVerb$Mood).tp_dict, "IndicativeSubjunctive", make_descriptor(t_MorphoRuleVerb$Mood::wrap_Object(*MorphoRuleVerb$Mood::IndicativeSubjunctive)));
                        PyDict_SetItemString(PY_TYPE(MorphoRuleVerb$Mood).tp_dict, "Infinitive", make_descriptor(t_MorphoRuleVerb$Mood::wrap_Object(*MorphoRuleVerb$Mood::Infinitive)));
                        PyDict_SetItemString(PY_TYPE(MorphoRuleVerb$Mood).tp_dict, "Subjunctive", make_descriptor(t_MorphoRuleVerb$Mood::wrap_Object(*MorphoRuleVerb$Mood::Subjunctive)));
                    }

                    static PyObject *t_MorphoRuleVerb$Mood_cast_(PyTypeObject *type, PyObject *arg)
                    {
                        if (!(arg = castCheck(arg, MorphoRuleVerb$Mood::initializeClass, 1)))
                            return NULL;
                        return t_MorphoRuleVerb$Mood::wrap_Object(MorphoRuleVerb$Mood(((t_MorphoRuleVerb$Mood *) arg)->object.this$));
                    }
                    static PyObject *t_MorphoRuleVerb$Mood_instance_(PyTypeObject *type, PyObject *arg)
                    {
                        if (!castCheck(arg, MorphoRuleVerb$Mood::initializeClass, 0))
                            Py_RETURN_FALSE;
                        Py_RETURN_TRUE;
                    }

                    static PyObject *t_MorphoRuleVerb$Mood_valueOf(PyTypeObject *type, PyObject *args)
                    {
                        ::java::lang::String a0((jobject) NULL);
                        MorphoRuleVerb$Mood result((jobject) NULL);

                        if (!parseArgs(args, "s", &a0))
                        {
                            OBJ_CALL(result = ::is::iclt::icenlp::core::icemorphy::MorphoRuleVerb$Mood::valueOf(a0));
                            return t_MorphoRuleVerb$Mood::wrap_Object(result);
                        }

                        return callSuper(type, "valueOf", args, 2);
                    }

                    static PyObject *t_MorphoRuleVerb$Mood_values(PyTypeObject *type)
                    {
                        JArray< MorphoRuleVerb$Mood > result((jobject) NULL);
                        OBJ_CALL(result = ::is::iclt::icenlp::core::icemorphy::MorphoRuleVerb$Mood::values());
                        return JArray<jobject>(result.this$).wrap(t_MorphoRuleVerb$Mood::wrap_jobject);
                    }
                }
            }
        }
    }
}
#include <jni.h>
#include "JCCEnv.h"
#include "is/iclt/icenlp/core/iceparser/Phrase_Per_Line.h"
#include "java/io/IOException.h"
#include "java/io/Reader.h"
#include "java/io/Writer.h"
#include "java/lang/Class.h"
#include "java/io/InputStream.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace is {
    namespace iclt {
        namespace icenlp {
            namespace core {
                namespace iceparser {

                    ::java::lang::Class *Phrase_Per_Line::class$ = NULL;
                    jmethodID *Phrase_Per_Line::mids$ = NULL;
                    jint Phrase_Per_Line::FUNC = (jint) 0;
                    jint Phrase_Per_Line::PHRASE = (jint) 0;
                    jint Phrase_Per_Line::YYEOF = (jint) 0;
                    jint Phrase_Per_Line::YYINITIAL = (jint) 0;

                    jclass Phrase_Per_Line::initializeClass()
                    {
                        if (!class$)
                        {

                            jclass cls = (jclass) env->findClass("is/iclt/icenlp/core/iceparser/Phrase_Per_Line");

                            mids$ = new jmethodID[max_mid];
                            mids$[mid_init$_cf2e3c10] = env->getMethodID(cls, "<init>", "(Ljava/io/Reader;)V");
                            mids$[mid_init$_be2e4f90] = env->getMethodID(cls, "<init>", "(Ljava/io/InputStream;)V");
                            mids$[mid_main_4dd4540c] = env->getStaticMethodID(cls, "main", "([Ljava/lang/String;)V");
                            mids$[mid_parse_5bcd5850] = env->getMethodID(cls, "parse", "(Ljava/io/Writer;)V");
                            mids$[mid_yybegin_39c7bd3c] = env->getMethodID(cls, "yybegin", "(I)V");
                            mids$[mid_yycharat_39c7bd29] = env->getMethodID(cls, "yycharat", "(I)C");
                            mids$[mid_yyclose_54c6a166] = env->getMethodID(cls, "yyclose", "()V");
                            mids$[mid_yylength_54c6a179] = env->getMethodID(cls, "yylength", "()I");
                            mids$[mid_yylex_54c6a179] = env->getMethodID(cls, "yylex", "()I");
                            mids$[mid_yypushback_39c7bd3c] = env->getMethodID(cls, "yypushback", "(I)V");
                            mids$[mid_yyreset_cf2e3c10] = env->getMethodID(cls, "yyreset", "(Ljava/io/Reader;)V");
                            mids$[mid_yystate_54c6a179] = env->getMethodID(cls, "yystate", "()I");
                            mids$[mid_yytext_14c7b5c5] = env->getMethodID(cls, "yytext", "()Ljava/lang/String;");

                            class$ = (::java::lang::Class *) new JObject(cls);
                            cls = (jclass) class$->this$;

                            FUNC = env->getStaticIntField(cls, "FUNC");
                            PHRASE = env->getStaticIntField(cls, "PHRASE");
                            YYEOF = env->getStaticIntField(cls, "YYEOF");
                            YYINITIAL = env->getStaticIntField(cls, "YYINITIAL");
                        }
                        return (jclass) class$->this$;
                    }

                    Phrase_Per_Line::Phrase_Per_Line(const ::java::io::Reader & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_cf2e3c10, a0.this$)) {}

                    Phrase_Per_Line::Phrase_Per_Line(const ::java::io::InputStream & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_be2e4f90, a0.this$)) {}

                    void Phrase_Per_Line::main(const JArray< ::java::lang::String > & a0)
                    {
                        jclass cls = initializeClass();
                        env->callStaticVoidMethod(cls, mids$[mid_main_4dd4540c], a0.this$);
                    }

                    void Phrase_Per_Line::parse(const ::java::io::Writer & a0) const
                    {
                        env->callVoidMethod(this$, mids$[mid_parse_5bcd5850], a0.this$);
                    }

                    void Phrase_Per_Line::yybegin(jint a0) const
                    {
                        env->callVoidMethod(this$, mids$[mid_yybegin_39c7bd3c], a0);
                    }

                    jchar Phrase_Per_Line::yycharat(jint a0) const
                    {
                        return env->callCharMethod(this$, mids$[mid_yycharat_39c7bd29], a0);
                    }

                    void Phrase_Per_Line::yyclose() const
                    {
                        env->callVoidMethod(this$, mids$[mid_yyclose_54c6a166]);
                    }

                    jint Phrase_Per_Line::yylength() const
                    {
                        return env->callIntMethod(this$, mids$[mid_yylength_54c6a179]);
                    }

                    jint Phrase_Per_Line::yylex() const
                    {
                        return env->callIntMethod(this$, mids$[mid_yylex_54c6a179]);
                    }

                    void Phrase_Per_Line::yypushback(jint a0) const
                    {
                        env->callVoidMethod(this$, mids$[mid_yypushback_39c7bd3c], a0);
                    }

                    void Phrase_Per_Line::yyreset(const ::java::io::Reader & a0) const
                    {
                        env->callVoidMethod(this$, mids$[mid_yyreset_cf2e3c10], a0.this$);
                    }

                    jint Phrase_Per_Line::yystate() const
                    {
                        return env->callIntMethod(this$, mids$[mid_yystate_54c6a179]);
                    }

                    ::java::lang::String Phrase_Per_Line::yytext() const
                    {
                        return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_yytext_14c7b5c5]));
                    }
                }
            }
        }
    }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace is {
    namespace iclt {
        namespace icenlp {
            namespace core {
                namespace iceparser {
                    static PyObject *t_Phrase_Per_Line_cast_(PyTypeObject *type, PyObject *arg);
                    static PyObject *t_Phrase_Per_Line_instance_(PyTypeObject *type, PyObject *arg);
                    static int t_Phrase_Per_Line_init_(t_Phrase_Per_Line *self, PyObject *args, PyObject *kwds);
                    static PyObject *t_Phrase_Per_Line_main(PyTypeObject *type, PyObject *arg);
                    static PyObject *t_Phrase_Per_Line_parse(t_Phrase_Per_Line *self, PyObject *arg);
                    static PyObject *t_Phrase_Per_Line_yybegin(t_Phrase_Per_Line *self, PyObject *arg);
                    static PyObject *t_Phrase_Per_Line_yycharat(t_Phrase_Per_Line *self, PyObject *arg);
                    static PyObject *t_Phrase_Per_Line_yyclose(t_Phrase_Per_Line *self);
                    static PyObject *t_Phrase_Per_Line_yylength(t_Phrase_Per_Line *self);
                    static PyObject *t_Phrase_Per_Line_yylex(t_Phrase_Per_Line *self);
                    static PyObject *t_Phrase_Per_Line_yypushback(t_Phrase_Per_Line *self, PyObject *arg);
                    static PyObject *t_Phrase_Per_Line_yyreset(t_Phrase_Per_Line *self, PyObject *arg);
                    static PyObject *t_Phrase_Per_Line_yystate(t_Phrase_Per_Line *self);
                    static PyObject *t_Phrase_Per_Line_yytext(t_Phrase_Per_Line *self);

                    static PyMethodDef t_Phrase_Per_Line__methods_[] = {
                        DECLARE_METHOD(t_Phrase_Per_Line, cast_, METH_O | METH_CLASS),
                        DECLARE_METHOD(t_Phrase_Per_Line, instance_, METH_O | METH_CLASS),
                        DECLARE_METHOD(t_Phrase_Per_Line, main, METH_O | METH_CLASS),
                        DECLARE_METHOD(t_Phrase_Per_Line, parse, METH_O),
                        DECLARE_METHOD(t_Phrase_Per_Line, yybegin, METH_O),
                        DECLARE_METHOD(t_Phrase_Per_Line, yycharat, METH_O),
                        DECLARE_METHOD(t_Phrase_Per_Line, yyclose, METH_NOARGS),
                        DECLARE_METHOD(t_Phrase_Per_Line, yylength, METH_NOARGS),
                        DECLARE_METHOD(t_Phrase_Per_Line, yylex, METH_NOARGS),
                        DECLARE_METHOD(t_Phrase_Per_Line, yypushback, METH_O),
                        DECLARE_METHOD(t_Phrase_Per_Line, yyreset, METH_O),
                        DECLARE_METHOD(t_Phrase_Per_Line, yystate, METH_NOARGS),
                        DECLARE_METHOD(t_Phrase_Per_Line, yytext, METH_NOARGS),
                        { NULL, NULL, 0, NULL }
                    };

                    DECLARE_TYPE(Phrase_Per_Line, t_Phrase_Per_Line, ::java::lang::Object, Phrase_Per_Line, t_Phrase_Per_Line_init_, 0, 0, 0, 0, 0);

                    void t_Phrase_Per_Line::install(PyObject *module)
                    {
                        installType(&PY_TYPE(Phrase_Per_Line), module, "Phrase_Per_Line", 0);
                    }

                    void t_Phrase_Per_Line::initialize(PyObject *module)
                    {
                        PyDict_SetItemString(PY_TYPE(Phrase_Per_Line).tp_dict, "class_", make_descriptor(Phrase_Per_Line::initializeClass, 1));
                        PyDict_SetItemString(PY_TYPE(Phrase_Per_Line).tp_dict, "wrapfn_", make_descriptor(t_Phrase_Per_Line::wrap_jobject));
                        PyDict_SetItemString(PY_TYPE(Phrase_Per_Line).tp_dict, "boxfn_", make_descriptor(boxObject));
                        Phrase_Per_Line::initializeClass();
                        PyDict_SetItemString(PY_TYPE(Phrase_Per_Line).tp_dict, "FUNC", make_descriptor(Phrase_Per_Line::FUNC));
                        PyDict_SetItemString(PY_TYPE(Phrase_Per_Line).tp_dict, "PHRASE", make_descriptor(Phrase_Per_Line::PHRASE));
                        PyDict_SetItemString(PY_TYPE(Phrase_Per_Line).tp_dict, "YYEOF", make_descriptor(Phrase_Per_Line::YYEOF));
                        PyDict_SetItemString(PY_TYPE(Phrase_Per_Line).tp_dict, "YYINITIAL", make_descriptor(Phrase_Per_Line::YYINITIAL));
                    }

                    static PyObject *t_Phrase_Per_Line_cast_(PyTypeObject *type, PyObject *arg)
                    {
                        if (!(arg = castCheck(arg, Phrase_Per_Line::initializeClass, 1)))
                            return NULL;
                        return t_Phrase_Per_Line::wrap_Object(Phrase_Per_Line(((t_Phrase_Per_Line *) arg)->object.this$));
                    }
                    static PyObject *t_Phrase_Per_Line_instance_(PyTypeObject *type, PyObject *arg)
                    {
                        if (!castCheck(arg, Phrase_Per_Line::initializeClass, 0))
                            Py_RETURN_FALSE;
                        Py_RETURN_TRUE;
                    }

                    static int t_Phrase_Per_Line_init_(t_Phrase_Per_Line *self, PyObject *args, PyObject *kwds)
                    {
                        switch (PyTuple_GET_SIZE(args)) {
                          case 1:
                            {
                                ::java::io::Reader a0((jobject) NULL);
                                Phrase_Per_Line object((jobject) NULL);

                                if (!parseArgs(args, "k", ::java::io::Reader::initializeClass, &a0))
                                {
                                    INT_CALL(object = Phrase_Per_Line(a0));
                                    self->object = object;
                                    break;
                                }
                            }
                            {
                                ::java::io::InputStream a0((jobject) NULL);
                                Phrase_Per_Line object((jobject) NULL);

                                if (!parseArgs(args, "k", ::java::io::InputStream::initializeClass, &a0))
                                {
                                    INT_CALL(object = Phrase_Per_Line(a0));
                                    self->object = object;
                                    break;
                                }
                            }
                          default:
                            PyErr_SetArgsError((PyObject *) self, "__init__", args);
                            return -1;
                        }

                        return 0;
                    }

                    static PyObject *t_Phrase_Per_Line_main(PyTypeObject *type, PyObject *arg)
                    {
                        JArray< ::java::lang::String > a0((jobject) NULL);

                        if (!parseArg(arg, "[s", &a0))
                        {
                            OBJ_CALL(::is::iclt::icenlp::core::iceparser::Phrase_Per_Line::main(a0));
                            Py_RETURN_NONE;
                        }

                        PyErr_SetArgsError(type, "main", arg);
                        return NULL;
                    }

                    static PyObject *t_Phrase_Per_Line_parse(t_Phrase_Per_Line *self, PyObject *arg)
                    {
                        ::java::io::Writer a0((jobject) NULL);

                        if (!parseArg(arg, "k", ::java::io::Writer::initializeClass, &a0))
                        {
                            OBJ_CALL(self->object.parse(a0));
                            Py_RETURN_NONE;
                        }

                        PyErr_SetArgsError((PyObject *) self, "parse", arg);
                        return NULL;
                    }

                    static PyObject *t_Phrase_Per_Line_yybegin(t_Phrase_Per_Line *self, PyObject *arg)
                    {
                        jint a0;

                        if (!parseArg(arg, "I", &a0))
                        {
                            OBJ_CALL(self->object.yybegin(a0));
                            Py_RETURN_NONE;
                        }

                        PyErr_SetArgsError((PyObject *) self, "yybegin", arg);
                        return NULL;
                    }

                    static PyObject *t_Phrase_Per_Line_yycharat(t_Phrase_Per_Line *self, PyObject *arg)
                    {
                        jint a0;
                        jchar result;

                        if (!parseArg(arg, "I", &a0))
                        {
                            OBJ_CALL(result = self->object.yycharat(a0));
                            return PyUnicode_FromUnicode((Py_UNICODE *) &result, 1);
                        }

                        PyErr_SetArgsError((PyObject *) self, "yycharat", arg);
                        return NULL;
                    }

                    static PyObject *t_Phrase_Per_Line_yyclose(t_Phrase_Per_Line *self)
                    {
                        OBJ_CALL(self->object.yyclose());
                        Py_RETURN_NONE;
                    }

                    static PyObject *t_Phrase_Per_Line_yylength(t_Phrase_Per_Line *self)
                    {
                        jint result;
                        OBJ_CALL(result = self->object.yylength());
                        return PyInt_FromLong((long) result);
                    }

                    static PyObject *t_Phrase_Per_Line_yylex(t_Phrase_Per_Line *self)
                    {
                        jint result;
                        OBJ_CALL(result = self->object.yylex());
                        return PyInt_FromLong((long) result);
                    }

                    static PyObject *t_Phrase_Per_Line_yypushback(t_Phrase_Per_Line *self, PyObject *arg)
                    {
                        jint a0;

                        if (!parseArg(arg, "I", &a0))
                        {
                            OBJ_CALL(self->object.yypushback(a0));
                            Py_RETURN_NONE;
                        }

                        PyErr_SetArgsError((PyObject *) self, "yypushback", arg);
                        return NULL;
                    }

                    static PyObject *t_Phrase_Per_Line_yyreset(t_Phrase_Per_Line *self, PyObject *arg)
                    {
                        ::java::io::Reader a0((jobject) NULL);

                        if (!parseArg(arg, "k", ::java::io::Reader::initializeClass, &a0))
                        {
                            OBJ_CALL(self->object.yyreset(a0));
                            Py_RETURN_NONE;
                        }

                        PyErr_SetArgsError((PyObject *) self, "yyreset", arg);
                        return NULL;
                    }

                    static PyObject *t_Phrase_Per_Line_yystate(t_Phrase_Per_Line *self)
                    {
                        jint result;
                        OBJ_CALL(result = self->object.yystate());
                        return PyInt_FromLong((long) result);
                    }

                    static PyObject *t_Phrase_Per_Line_yytext(t_Phrase_Per_Line *self)
                    {
                        ::java::lang::String result((jobject) NULL);
                        OBJ_CALL(result = self->object.yytext());
                        return j2p(result);
                    }
                }
            }
        }
    }
}
#include <jni.h>
#include "JCCEnv.h"
#include "is/iclt/icenlp/core/formald/Format.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace is {
    namespace iclt {
        namespace icenlp {
            namespace core {
                namespace formald {

                    ::java::lang::Class *Format::class$ = NULL;
                    jmethodID *Format::mids$ = NULL;

                    jclass Format::initializeClass()
                    {
                        if (!class$)
                        {

                            jclass cls = (jclass) env->findClass("is/iclt/icenlp/core/formald/Format");

                            mids$ = new jmethodID[max_mid];
                            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                            mids$[mid_sampleData_14c7b5c5] = env->getMethodID(cls, "sampleData", "()Ljava/lang/String;");

                            class$ = (::java::lang::Class *) new JObject(cls);
                        }
                        return (jclass) class$->this$;
                    }

                    Format::Format() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

                    ::java::lang::String Format::sampleData() const
                    {
                        return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_sampleData_14c7b5c5]));
                    }
                }
            }
        }
    }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace is {
    namespace iclt {
        namespace icenlp {
            namespace core {
                namespace formald {
                    static PyObject *t_Format_cast_(PyTypeObject *type, PyObject *arg);
                    static PyObject *t_Format_instance_(PyTypeObject *type, PyObject *arg);
                    static int t_Format_init_(t_Format *self, PyObject *args, PyObject *kwds);
                    static PyObject *t_Format_sampleData(t_Format *self);

                    static PyMethodDef t_Format__methods_[] = {
                        DECLARE_METHOD(t_Format, cast_, METH_O | METH_CLASS),
                        DECLARE_METHOD(t_Format, instance_, METH_O | METH_CLASS),
                        DECLARE_METHOD(t_Format, sampleData, METH_NOARGS),
                        { NULL, NULL, 0, NULL }
                    };

                    DECLARE_TYPE(Format, t_Format, ::java::lang::Object, Format, t_Format_init_, 0, 0, 0, 0, 0);

                    void t_Format::install(PyObject *module)
                    {
                        installType(&PY_TYPE(Format), module, "Format", 0);
                    }

                    void t_Format::initialize(PyObject *module)
                    {
                        PyDict_SetItemString(PY_TYPE(Format).tp_dict, "class_", make_descriptor(Format::initializeClass, 1));
                        PyDict_SetItemString(PY_TYPE(Format).tp_dict, "wrapfn_", make_descriptor(t_Format::wrap_jobject));
                        PyDict_SetItemString(PY_TYPE(Format).tp_dict, "boxfn_", make_descriptor(boxObject));
                    }

                    static PyObject *t_Format_cast_(PyTypeObject *type, PyObject *arg)
                    {
                        if (!(arg = castCheck(arg, Format::initializeClass, 1)))
                            return NULL;
                        return t_Format::wrap_Object(Format(((t_Format *) arg)->object.this$));
                    }
                    static PyObject *t_Format_instance_(PyTypeObject *type, PyObject *arg)
                    {
                        if (!castCheck(arg, Format::initializeClass, 0))
                            Py_RETURN_FALSE;
                        Py_RETURN_TRUE;
                    }

                    static int t_Format_init_(t_Format *self, PyObject *args, PyObject *kwds)
                    {
                        Format object((jobject) NULL);

                        INT_CALL(object = Format());
                        self->object = object;

                        return 0;
                    }

                    static PyObject *t_Format_sampleData(t_Format *self)
                    {
                        ::java::lang::String result((jobject) NULL);
                        OBJ_CALL(result = self->object.sampleData());
                        return j2p(result);
                    }
                }
            }
        }
    }
}
#include <jni.h>
#include "JCCEnv.h"
#include "is/iclt/icenlp/core/icemorphy/IceMorphy$MorphoClass.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace is {
    namespace iclt {
        namespace icenlp {
            namespace core {
                namespace icemorphy {

                    ::java::lang::Class *IceMorphy$MorphoClass::class$ = NULL;
                    jmethodID *IceMorphy$MorphoClass::mids$ = NULL;
                    IceMorphy$MorphoClass *IceMorphy$MorphoClass::Adj1 = NULL;
                    IceMorphy$MorphoClass *IceMorphy$MorphoClass::Adj2 = NULL;
                    IceMorphy$MorphoClass *IceMorphy$MorphoClass::Adj3 = NULL;
                    IceMorphy$MorphoClass *IceMorphy$MorphoClass::Adj4 = NULL;
                    IceMorphy$MorphoClass *IceMorphy$MorphoClass::Adj5 = NULL;
                    IceMorphy$MorphoClass *IceMorphy$MorphoClass::None = NULL;
                    IceMorphy$MorphoClass *IceMorphy$MorphoClass::NounFeminine1 = NULL;
                    IceMorphy$MorphoClass *IceMorphy$MorphoClass::NounFeminine2 = NULL;
                    IceMorphy$MorphoClass *IceMorphy$MorphoClass::NounFeminine3 = NULL;
                    IceMorphy$MorphoClass *IceMorphy$MorphoClass::NounFeminine4 = NULL;
                    IceMorphy$MorphoClass *IceMorphy$MorphoClass::NounFeminine5 = NULL;
                    IceMorphy$MorphoClass *IceMorphy$MorphoClass::NounFeminine6 = NULL;
                    IceMorphy$MorphoClass *IceMorphy$MorphoClass::NounMasculine1 = NULL;
                    IceMorphy$MorphoClass *IceMorphy$MorphoClass::NounMasculine10 = NULL;
                    IceMorphy$MorphoClass *IceMorphy$MorphoClass::NounMasculine2 = NULL;
                    IceMorphy$MorphoClass *IceMorphy$MorphoClass::NounMasculine3 = NULL;
                    IceMorphy$MorphoClass *IceMorphy$MorphoClass::NounMasculine4 = NULL;
                    IceMorphy$MorphoClass *IceMorphy$MorphoClass::NounMasculine5 = NULL;
                    IceMorphy$MorphoClass *IceMorphy$MorphoClass::NounMasculine6 = NULL;
                    IceMorphy$MorphoClass *IceMorphy$MorphoClass::NounMasculine7 = NULL;
                    IceMorphy$MorphoClass *IceMorphy$MorphoClass::NounMasculine8 = NULL;
                    IceMorphy$MorphoClass *IceMorphy$MorphoClass::NounMasculine9 = NULL;
                    IceMorphy$MorphoClass *IceMorphy$MorphoClass::NounNeuter1 = NULL;
                    IceMorphy$MorphoClass *IceMorphy$MorphoClass::NounNeuter2 = NULL;
                    IceMorphy$MorphoClass *IceMorphy$MorphoClass::NounNeuter3 = NULL;
                    IceMorphy$MorphoClass *IceMorphy$MorphoClass::NounNeuter4 = NULL;
                    IceMorphy$MorphoClass *IceMorphy$MorphoClass::VerbActive1 = NULL;
                    IceMorphy$MorphoClass *IceMorphy$MorphoClass::VerbActive2 = NULL;
                    IceMorphy$MorphoClass *IceMorphy$MorphoClass::VerbActive3 = NULL;
                    IceMorphy$MorphoClass *IceMorphy$MorphoClass::VerbActive4 = NULL;
                    IceMorphy$MorphoClass *IceMorphy$MorphoClass::VerbActive5 = NULL;
                    IceMorphy$MorphoClass *IceMorphy$MorphoClass::VerbActive6 = NULL;
                    IceMorphy$MorphoClass *IceMorphy$MorphoClass::VerbMiddle1 = NULL;
                    IceMorphy$MorphoClass *IceMorphy$MorphoClass::VerbMiddle2 = NULL;

                    jclass IceMorphy$MorphoClass::initializeClass()
                    {
                        if (!class$)
                        {

                            jclass cls = (jclass) env->findClass("is/iclt/icenlp/core/icemorphy/IceMorphy$MorphoClass");

                            mids$ = new jmethodID[max_mid];
                            mids$[mid_valueOf_ebdab811] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;)Lis/iclt/icenlp/core/icemorphy/IceMorphy$MorphoClass;");
                            mids$[mid_values_a2c2c6c7] = env->getStaticMethodID(cls, "values", "()[Lis/iclt/icenlp/core/icemorphy/IceMorphy$MorphoClass;");

                            class$ = (::java::lang::Class *) new JObject(cls);
                            cls = (jclass) class$->this$;

                            Adj1 = new IceMorphy$MorphoClass(env->getStaticObjectField(cls, "Adj1", "Lis/iclt/icenlp/core/icemorphy/IceMorphy$MorphoClass;"));
                            Adj2 = new IceMorphy$MorphoClass(env->getStaticObjectField(cls, "Adj2", "Lis/iclt/icenlp/core/icemorphy/IceMorphy$MorphoClass;"));
                            Adj3 = new IceMorphy$MorphoClass(env->getStaticObjectField(cls, "Adj3", "Lis/iclt/icenlp/core/icemorphy/IceMorphy$MorphoClass;"));
                            Adj4 = new IceMorphy$MorphoClass(env->getStaticObjectField(cls, "Adj4", "Lis/iclt/icenlp/core/icemorphy/IceMorphy$MorphoClass;"));
                            Adj5 = new IceMorphy$MorphoClass(env->getStaticObjectField(cls, "Adj5", "Lis/iclt/icenlp/core/icemorphy/IceMorphy$MorphoClass;"));
                            None = new IceMorphy$MorphoClass(env->getStaticObjectField(cls, "None", "Lis/iclt/icenlp/core/icemorphy/IceMorphy$MorphoClass;"));
                            NounFeminine1 = new IceMorphy$MorphoClass(env->getStaticObjectField(cls, "NounFeminine1", "Lis/iclt/icenlp/core/icemorphy/IceMorphy$MorphoClass;"));
                            NounFeminine2 = new IceMorphy$MorphoClass(env->getStaticObjectField(cls, "NounFeminine2", "Lis/iclt/icenlp/core/icemorphy/IceMorphy$MorphoClass;"));
                            NounFeminine3 = new IceMorphy$MorphoClass(env->getStaticObjectField(cls, "NounFeminine3", "Lis/iclt/icenlp/core/icemorphy/IceMorphy$MorphoClass;"));
                            NounFeminine4 = new IceMorphy$MorphoClass(env->getStaticObjectField(cls, "NounFeminine4", "Lis/iclt/icenlp/core/icemorphy/IceMorphy$MorphoClass;"));
                            NounFeminine5 = new IceMorphy$MorphoClass(env->getStaticObjectField(cls, "NounFeminine5", "Lis/iclt/icenlp/core/icemorphy/IceMorphy$MorphoClass;"));
                            NounFeminine6 = new IceMorphy$MorphoClass(env->getStaticObjectField(cls, "NounFeminine6", "Lis/iclt/icenlp/core/icemorphy/IceMorphy$MorphoClass;"));
                            NounMasculine1 = new IceMorphy$MorphoClass(env->getStaticObjectField(cls, "NounMasculine1", "Lis/iclt/icenlp/core/icemorphy/IceMorphy$MorphoClass;"));
                            NounMasculine10 = new IceMorphy$MorphoClass(env->getStaticObjectField(cls, "NounMasculine10", "Lis/iclt/icenlp/core/icemorphy/IceMorphy$MorphoClass;"));
                            NounMasculine2 = new IceMorphy$MorphoClass(env->getStaticObjectField(cls, "NounMasculine2", "Lis/iclt/icenlp/core/icemorphy/IceMorphy$MorphoClass;"));
                            NounMasculine3 = new IceMorphy$MorphoClass(env->getStaticObjectField(cls, "NounMasculine3", "Lis/iclt/icenlp/core/icemorphy/IceMorphy$MorphoClass;"));
                            NounMasculine4 = new IceMorphy$MorphoClass(env->getStaticObjectField(cls, "NounMasculine4", "Lis/iclt/icenlp/core/icemorphy/IceMorphy$MorphoClass;"));
                            NounMasculine5 = new IceMorphy$MorphoClass(env->getStaticObjectField(cls, "NounMasculine5", "Lis/iclt/icenlp/core/icemorphy/IceMorphy$MorphoClass;"));
                            NounMasculine6 = new IceMorphy$MorphoClass(env->getStaticObjectField(cls, "NounMasculine6", "Lis/iclt/icenlp/core/icemorphy/IceMorphy$MorphoClass;"));
                            NounMasculine7 = new IceMorphy$MorphoClass(env->getStaticObjectField(cls, "NounMasculine7", "Lis/iclt/icenlp/core/icemorphy/IceMorphy$MorphoClass;"));
                            NounMasculine8 = new IceMorphy$MorphoClass(env->getStaticObjectField(cls, "NounMasculine8", "Lis/iclt/icenlp/core/icemorphy/IceMorphy$MorphoClass;"));
                            NounMasculine9 = new IceMorphy$MorphoClass(env->getStaticObjectField(cls, "NounMasculine9", "Lis/iclt/icenlp/core/icemorphy/IceMorphy$MorphoClass;"));
                            NounNeuter1 = new IceMorphy$MorphoClass(env->getStaticObjectField(cls, "NounNeuter1", "Lis/iclt/icenlp/core/icemorphy/IceMorphy$MorphoClass;"));
                            NounNeuter2 = new IceMorphy$MorphoClass(env->getStaticObjectField(cls, "NounNeuter2", "Lis/iclt/icenlp/core/icemorphy/IceMorphy$MorphoClass;"));
                            NounNeuter3 = new IceMorphy$MorphoClass(env->getStaticObjectField(cls, "NounNeuter3", "Lis/iclt/icenlp/core/icemorphy/IceMorphy$MorphoClass;"));
                            NounNeuter4 = new IceMorphy$MorphoClass(env->getStaticObjectField(cls, "NounNeuter4", "Lis/iclt/icenlp/core/icemorphy/IceMorphy$MorphoClass;"));
                            VerbActive1 = new IceMorphy$MorphoClass(env->getStaticObjectField(cls, "VerbActive1", "Lis/iclt/icenlp/core/icemorphy/IceMorphy$MorphoClass;"));
                            VerbActive2 = new IceMorphy$MorphoClass(env->getStaticObjectField(cls, "VerbActive2", "Lis/iclt/icenlp/core/icemorphy/IceMorphy$MorphoClass;"));
                            VerbActive3 = new IceMorphy$MorphoClass(env->getStaticObjectField(cls, "VerbActive3", "Lis/iclt/icenlp/core/icemorphy/IceMorphy$MorphoClass;"));
                            VerbActive4 = new IceMorphy$MorphoClass(env->getStaticObjectField(cls, "VerbActive4", "Lis/iclt/icenlp/core/icemorphy/IceMorphy$MorphoClass;"));
                            VerbActive5 = new IceMorphy$MorphoClass(env->getStaticObjectField(cls, "VerbActive5", "Lis/iclt/icenlp/core/icemorphy/IceMorphy$MorphoClass;"));
                            VerbActive6 = new IceMorphy$MorphoClass(env->getStaticObjectField(cls, "VerbActive6", "Lis/iclt/icenlp/core/icemorphy/IceMorphy$MorphoClass;"));
                            VerbMiddle1 = new IceMorphy$MorphoClass(env->getStaticObjectField(cls, "VerbMiddle1", "Lis/iclt/icenlp/core/icemorphy/IceMorphy$MorphoClass;"));
                            VerbMiddle2 = new IceMorphy$MorphoClass(env->getStaticObjectField(cls, "VerbMiddle2", "Lis/iclt/icenlp/core/icemorphy/IceMorphy$MorphoClass;"));
                        }
                        return (jclass) class$->this$;
                    }

                    IceMorphy$MorphoClass IceMorphy$MorphoClass::valueOf(const ::java::lang::String & a0)
                    {
                        jclass cls = initializeClass();
                        return IceMorphy$MorphoClass(env->callStaticObjectMethod(cls, mids$[mid_valueOf_ebdab811], a0.this$));
                    }

                    JArray< IceMorphy$MorphoClass > IceMorphy$MorphoClass::values()
                    {
                        jclass cls = initializeClass();
                        return JArray< IceMorphy$MorphoClass >(env->callStaticObjectMethod(cls, mids$[mid_values_a2c2c6c7]));
                    }
                }
            }
        }
    }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace is {
    namespace iclt {
        namespace icenlp {
            namespace core {
                namespace icemorphy {
                    static PyObject *t_IceMorphy$MorphoClass_cast_(PyTypeObject *type, PyObject *arg);
                    static PyObject *t_IceMorphy$MorphoClass_instance_(PyTypeObject *type, PyObject *arg);
                    static PyObject *t_IceMorphy$MorphoClass_valueOf(PyTypeObject *type, PyObject *args);
                    static PyObject *t_IceMorphy$MorphoClass_values(PyTypeObject *type);

                    static PyMethodDef t_IceMorphy$MorphoClass__methods_[] = {
                        DECLARE_METHOD(t_IceMorphy$MorphoClass, cast_, METH_O | METH_CLASS),
                        DECLARE_METHOD(t_IceMorphy$MorphoClass, instance_, METH_O | METH_CLASS),
                        DECLARE_METHOD(t_IceMorphy$MorphoClass, valueOf, METH_VARARGS | METH_CLASS),
                        DECLARE_METHOD(t_IceMorphy$MorphoClass, values, METH_NOARGS | METH_CLASS),
                        { NULL, NULL, 0, NULL }
                    };

                    DECLARE_TYPE(IceMorphy$MorphoClass, t_IceMorphy$MorphoClass, ::java::lang::Enum, IceMorphy$MorphoClass, abstract_init, 0, 0, 0, 0, 0);

                    void t_IceMorphy$MorphoClass::install(PyObject *module)
                    {
                        installType(&PY_TYPE(IceMorphy$MorphoClass), module, "IceMorphy$MorphoClass", 0);
                    }

                    void t_IceMorphy$MorphoClass::initialize(PyObject *module)
                    {
                        PyDict_SetItemString(PY_TYPE(IceMorphy$MorphoClass).tp_dict, "class_", make_descriptor(IceMorphy$MorphoClass::initializeClass, 1));
                        PyDict_SetItemString(PY_TYPE(IceMorphy$MorphoClass).tp_dict, "wrapfn_", make_descriptor(t_IceMorphy$MorphoClass::wrap_jobject));
                        PyDict_SetItemString(PY_TYPE(IceMorphy$MorphoClass).tp_dict, "boxfn_", make_descriptor(boxObject));
                        IceMorphy$MorphoClass::initializeClass();
                        PyDict_SetItemString(PY_TYPE(IceMorphy$MorphoClass).tp_dict, "Adj1", make_descriptor(t_IceMorphy$MorphoClass::wrap_Object(*IceMorphy$MorphoClass::Adj1)));
                        PyDict_SetItemString(PY_TYPE(IceMorphy$MorphoClass).tp_dict, "Adj2", make_descriptor(t_IceMorphy$MorphoClass::wrap_Object(*IceMorphy$MorphoClass::Adj2)));
                        PyDict_SetItemString(PY_TYPE(IceMorphy$MorphoClass).tp_dict, "Adj3", make_descriptor(t_IceMorphy$MorphoClass::wrap_Object(*IceMorphy$MorphoClass::Adj3)));
                        PyDict_SetItemString(PY_TYPE(IceMorphy$MorphoClass).tp_dict, "Adj4", make_descriptor(t_IceMorphy$MorphoClass::wrap_Object(*IceMorphy$MorphoClass::Adj4)));
                        PyDict_SetItemString(PY_TYPE(IceMorphy$MorphoClass).tp_dict, "Adj5", make_descriptor(t_IceMorphy$MorphoClass::wrap_Object(*IceMorphy$MorphoClass::Adj5)));
                        PyDict_SetItemString(PY_TYPE(IceMorphy$MorphoClass).tp_dict, "None", make_descriptor(t_IceMorphy$MorphoClass::wrap_Object(*IceMorphy$MorphoClass::None)));
                        PyDict_SetItemString(PY_TYPE(IceMorphy$MorphoClass).tp_dict, "NounFeminine1", make_descriptor(t_IceMorphy$MorphoClass::wrap_Object(*IceMorphy$MorphoClass::NounFeminine1)));
                        PyDict_SetItemString(PY_TYPE(IceMorphy$MorphoClass).tp_dict, "NounFeminine2", make_descriptor(t_IceMorphy$MorphoClass::wrap_Object(*IceMorphy$MorphoClass::NounFeminine2)));
                        PyDict_SetItemString(PY_TYPE(IceMorphy$MorphoClass).tp_dict, "NounFeminine3", make_descriptor(t_IceMorphy$MorphoClass::wrap_Object(*IceMorphy$MorphoClass::NounFeminine3)));
                        PyDict_SetItemString(PY_TYPE(IceMorphy$MorphoClass).tp_dict, "NounFeminine4", make_descriptor(t_IceMorphy$MorphoClass::wrap_Object(*IceMorphy$MorphoClass::NounFeminine4)));
                        PyDict_SetItemString(PY_TYPE(IceMorphy$MorphoClass).tp_dict, "NounFeminine5", make_descriptor(t_IceMorphy$MorphoClass::wrap_Object(*IceMorphy$MorphoClass::NounFeminine5)));
                        PyDict_SetItemString(PY_TYPE(IceMorphy$MorphoClass).tp_dict, "NounFeminine6", make_descriptor(t_IceMorphy$MorphoClass::wrap_Object(*IceMorphy$MorphoClass::NounFeminine6)));
                        PyDict_SetItemString(PY_TYPE(IceMorphy$MorphoClass).tp_dict, "NounMasculine1", make_descriptor(t_IceMorphy$MorphoClass::wrap_Object(*IceMorphy$MorphoClass::NounMasculine1)));
                        PyDict_SetItemString(PY_TYPE(IceMorphy$MorphoClass).tp_dict, "NounMasculine10", make_descriptor(t_IceMorphy$MorphoClass::wrap_Object(*IceMorphy$MorphoClass::NounMasculine10)));
                        PyDict_SetItemString(PY_TYPE(IceMorphy$MorphoClass).tp_dict, "NounMasculine2", make_descriptor(t_IceMorphy$MorphoClass::wrap_Object(*IceMorphy$MorphoClass::NounMasculine2)));
                        PyDict_SetItemString(PY_TYPE(IceMorphy$MorphoClass).tp_dict, "NounMasculine3", make_descriptor(t_IceMorphy$MorphoClass::wrap_Object(*IceMorphy$MorphoClass::NounMasculine3)));
                        PyDict_SetItemString(PY_TYPE(IceMorphy$MorphoClass).tp_dict, "NounMasculine4", make_descriptor(t_IceMorphy$MorphoClass::wrap_Object(*IceMorphy$MorphoClass::NounMasculine4)));
                        PyDict_SetItemString(PY_TYPE(IceMorphy$MorphoClass).tp_dict, "NounMasculine5", make_descriptor(t_IceMorphy$MorphoClass::wrap_Object(*IceMorphy$MorphoClass::NounMasculine5)));
                        PyDict_SetItemString(PY_TYPE(IceMorphy$MorphoClass).tp_dict, "NounMasculine6", make_descriptor(t_IceMorphy$MorphoClass::wrap_Object(*IceMorphy$MorphoClass::NounMasculine6)));
                        PyDict_SetItemString(PY_TYPE(IceMorphy$MorphoClass).tp_dict, "NounMasculine7", make_descriptor(t_IceMorphy$MorphoClass::wrap_Object(*IceMorphy$MorphoClass::NounMasculine7)));
                        PyDict_SetItemString(PY_TYPE(IceMorphy$MorphoClass).tp_dict, "NounMasculine8", make_descriptor(t_IceMorphy$MorphoClass::wrap_Object(*IceMorphy$MorphoClass::NounMasculine8)));
                        PyDict_SetItemString(PY_TYPE(IceMorphy$MorphoClass).tp_dict, "NounMasculine9", make_descriptor(t_IceMorphy$MorphoClass::wrap_Object(*IceMorphy$MorphoClass::NounMasculine9)));
                        PyDict_SetItemString(PY_TYPE(IceMorphy$MorphoClass).tp_dict, "NounNeuter1", make_descriptor(t_IceMorphy$MorphoClass::wrap_Object(*IceMorphy$MorphoClass::NounNeuter1)));
                        PyDict_SetItemString(PY_TYPE(IceMorphy$MorphoClass).tp_dict, "NounNeuter2", make_descriptor(t_IceMorphy$MorphoClass::wrap_Object(*IceMorphy$MorphoClass::NounNeuter2)));
                        PyDict_SetItemString(PY_TYPE(IceMorphy$MorphoClass).tp_dict, "NounNeuter3", make_descriptor(t_IceMorphy$MorphoClass::wrap_Object(*IceMorphy$MorphoClass::NounNeuter3)));
                        PyDict_SetItemString(PY_TYPE(IceMorphy$MorphoClass).tp_dict, "NounNeuter4", make_descriptor(t_IceMorphy$MorphoClass::wrap_Object(*IceMorphy$MorphoClass::NounNeuter4)));
                        PyDict_SetItemString(PY_TYPE(IceMorphy$MorphoClass).tp_dict, "VerbActive1", make_descriptor(t_IceMorphy$MorphoClass::wrap_Object(*IceMorphy$MorphoClass::VerbActive1)));
                        PyDict_SetItemString(PY_TYPE(IceMorphy$MorphoClass).tp_dict, "VerbActive2", make_descriptor(t_IceMorphy$MorphoClass::wrap_Object(*IceMorphy$MorphoClass::VerbActive2)));
                        PyDict_SetItemString(PY_TYPE(IceMorphy$MorphoClass).tp_dict, "VerbActive3", make_descriptor(t_IceMorphy$MorphoClass::wrap_Object(*IceMorphy$MorphoClass::VerbActive3)));
                        PyDict_SetItemString(PY_TYPE(IceMorphy$MorphoClass).tp_dict, "VerbActive4", make_descriptor(t_IceMorphy$MorphoClass::wrap_Object(*IceMorphy$MorphoClass::VerbActive4)));
                        PyDict_SetItemString(PY_TYPE(IceMorphy$MorphoClass).tp_dict, "VerbActive5", make_descriptor(t_IceMorphy$MorphoClass::wrap_Object(*IceMorphy$MorphoClass::VerbActive5)));
                        PyDict_SetItemString(PY_TYPE(IceMorphy$MorphoClass).tp_dict, "VerbActive6", make_descriptor(t_IceMorphy$MorphoClass::wrap_Object(*IceMorphy$MorphoClass::VerbActive6)));
                        PyDict_SetItemString(PY_TYPE(IceMorphy$MorphoClass).tp_dict, "VerbMiddle1", make_descriptor(t_IceMorphy$MorphoClass::wrap_Object(*IceMorphy$MorphoClass::VerbMiddle1)));
                        PyDict_SetItemString(PY_TYPE(IceMorphy$MorphoClass).tp_dict, "VerbMiddle2", make_descriptor(t_IceMorphy$MorphoClass::wrap_Object(*IceMorphy$MorphoClass::VerbMiddle2)));
                    }

                    static PyObject *t_IceMorphy$MorphoClass_cast_(PyTypeObject *type, PyObject *arg)
                    {
                        if (!(arg = castCheck(arg, IceMorphy$MorphoClass::initializeClass, 1)))
                            return NULL;
                        return t_IceMorphy$MorphoClass::wrap_Object(IceMorphy$MorphoClass(((t_IceMorphy$MorphoClass *) arg)->object.this$));
                    }
                    static PyObject *t_IceMorphy$MorphoClass_instance_(PyTypeObject *type, PyObject *arg)
                    {
                        if (!castCheck(arg, IceMorphy$MorphoClass::initializeClass, 0))
                            Py_RETURN_FALSE;
                        Py_RETURN_TRUE;
                    }

                    static PyObject *t_IceMorphy$MorphoClass_valueOf(PyTypeObject *type, PyObject *args)
                    {
                        ::java::lang::String a0((jobject) NULL);
                        IceMorphy$MorphoClass result((jobject) NULL);

                        if (!parseArgs(args, "s", &a0))
                        {
                            OBJ_CALL(result = ::is::iclt::icenlp::core::icemorphy::IceMorphy$MorphoClass::valueOf(a0));
                            return t_IceMorphy$MorphoClass::wrap_Object(result);
                        }

                        return callSuper(type, "valueOf", args, 2);
                    }

                    static PyObject *t_IceMorphy$MorphoClass_values(PyTypeObject *type)
                    {
                        JArray< IceMorphy$MorphoClass > result((jobject) NULL);
                        OBJ_CALL(result = ::is::iclt::icenlp::core::icemorphy::IceMorphy$MorphoClass::values());
                        return JArray<jobject>(result.this$).wrap(t_IceMorphy$MorphoClass::wrap_jobject);
                    }
                }
            }
        }
    }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/lang/Float.h"
#include "java/lang/Comparable.h"
#include "java/lang/NumberFormatException.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "java/lang/Object.h"
#include "JArray.h"

namespace java {
    namespace lang {

        ::java::lang::Class *Float::class$ = NULL;
        jmethodID *Float::mids$ = NULL;
        jint Float::MAX_EXPONENT = (jint) 0;
        jfloat Float::MAX_VALUE = (jfloat) 0;
        jint Float::MIN_EXPONENT = (jint) 0;
        jfloat Float::MIN_NORMAL = (jfloat) 0;
        jfloat Float::MIN_VALUE = (jfloat) 0;
        jfloat Float::NEGATIVE_INFINITY = (jfloat) 0;
        jfloat Float::NaN = (jfloat) 0;
        jfloat Float::POSITIVE_INFINITY = (jfloat) 0;
        jint Float::SIZE = (jint) 0;
        ::java::lang::Class *Float::TYPE = NULL;

        jclass Float::initializeClass()
        {
            if (!class$)
            {

                jclass cls = (jclass) env->findClass("java/lang/Float");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_06298cab] = env->getMethodID(cls, "<init>", "(F)V");
                mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
                mids$[mid_init$_5d1c7645] = env->getMethodID(cls, "<init>", "(D)V");
                mids$[mid_byteValue_54c6a172] = env->getMethodID(cls, "byteValue", "()B");
                mids$[mid_compare_f1b0c01b] = env->getStaticMethodID(cls, "compare", "(FF)I");
                mids$[mid_compareTo_290588f1] = env->getMethodID(cls, "compareTo", "(Ljava/lang/Object;)I");
                mids$[mid_compareTo_6b30eb75] = env->getMethodID(cls, "compareTo", "(Ljava/lang/Float;)I");
                mids$[mid_doubleValue_54c6a174] = env->getMethodID(cls, "doubleValue", "()D");
                mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
                mids$[mid_floatToIntBits_06298cb4] = env->getStaticMethodID(cls, "floatToIntBits", "(F)I");
                mids$[mid_floatToRawIntBits_06298cb4] = env->getStaticMethodID(cls, "floatToRawIntBits", "(F)I");
                mids$[mid_floatValue_54c6a176] = env->getMethodID(cls, "floatValue", "()F");
                mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
                mids$[mid_intBitsToFloat_39c7bd2c] = env->getStaticMethodID(cls, "intBitsToFloat", "(I)F");
                mids$[mid_intValue_54c6a179] = env->getMethodID(cls, "intValue", "()I");
                mids$[mid_isInfinite_54c6a16a] = env->getMethodID(cls, "isInfinite", "()Z");
                mids$[mid_isInfinite_06298ca7] = env->getStaticMethodID(cls, "isInfinite", "(F)Z");
                mids$[mid_isNaN_54c6a16a] = env->getMethodID(cls, "isNaN", "()Z");
                mids$[mid_isNaN_06298ca7] = env->getStaticMethodID(cls, "isNaN", "(F)Z");
                mids$[mid_longValue_54c6a17a] = env->getMethodID(cls, "longValue", "()J");
                mids$[mid_parseFloat_5fdc3f58] = env->getStaticMethodID(cls, "parseFloat", "(Ljava/lang/String;)F");
                mids$[mid_shortValue_54c6a163] = env->getMethodID(cls, "shortValue", "()S");
                mids$[mid_toHexString_5ded254a] = env->getStaticMethodID(cls, "toHexString", "(F)Ljava/lang/String;");
                mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
                mids$[mid_toString_5ded254a] = env->getStaticMethodID(cls, "toString", "(F)Ljava/lang/String;");
                mids$[mid_valueOf_685a245e] = env->getStaticMethodID(cls, "valueOf", "(F)Ljava/lang/Float;");
                mids$[mid_valueOf_b837041d] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;)Ljava/lang/Float;");

                class$ = (::java::lang::Class *) new JObject(cls);
                cls = (jclass) class$->this$;

                MAX_EXPONENT = env->getStaticIntField(cls, "MAX_EXPONENT");
                MAX_VALUE = env->getStaticFloatField(cls, "MAX_VALUE");
                MIN_EXPONENT = env->getStaticIntField(cls, "MIN_EXPONENT");
                MIN_NORMAL = env->getStaticFloatField(cls, "MIN_NORMAL");
                MIN_VALUE = env->getStaticFloatField(cls, "MIN_VALUE");
                NEGATIVE_INFINITY = env->getStaticFloatField(cls, "NEGATIVE_INFINITY");
                NaN = env->getStaticFloatField(cls, "NaN");
                POSITIVE_INFINITY = env->getStaticFloatField(cls, "POSITIVE_INFINITY");
                SIZE = env->getStaticIntField(cls, "SIZE");
                TYPE = new ::java::lang::Class(env->getStaticObjectField(cls, "TYPE", "Ljava/lang/Class;"));
            }
            return (jclass) class$->this$;
        }

        Float::Float(jfloat a0) : ::java::lang::Number(env->newObject(initializeClass, &mids$, mid_init$_06298cab, a0)) {}

        Float::Float(const ::java::lang::String & a0) : ::java::lang::Number(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}

        Float::Float(jdouble a0) : ::java::lang::Number(env->newObject(initializeClass, &mids$, mid_init$_5d1c7645, a0)) {}

        jbyte Float::byteValue() const
        {
            return env->callByteMethod(this$, mids$[mid_byteValue_54c6a172]);
        }

        jint Float::compare(jfloat a0, jfloat a1)
        {
            jclass cls = initializeClass();
            return env->callStaticIntMethod(cls, mids$[mid_compare_f1b0c01b], a0, a1);
        }

        jint Float::compareTo(const ::java::lang::Object & a0) const
        {
            return env->callIntMethod(this$, mids$[mid_compareTo_290588f1], a0.this$);
        }

        jint Float::compareTo(const Float & a0) const
        {
            return env->callIntMethod(this$, mids$[mid_compareTo_6b30eb75], a0.this$);
        }

        jdouble Float::doubleValue() const
        {
            return env->callDoubleMethod(this$, mids$[mid_doubleValue_54c6a174]);
        }

        jboolean Float::equals(const ::java::lang::Object & a0) const
        {
            return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        jint Float::floatToIntBits(jfloat a0)
        {
            jclass cls = initializeClass();
            return env->callStaticIntMethod(cls, mids$[mid_floatToIntBits_06298cb4], a0);
        }

        jint Float::floatToRawIntBits(jfloat a0)
        {
            jclass cls = initializeClass();
            return env->callStaticIntMethod(cls, mids$[mid_floatToRawIntBits_06298cb4], a0);
        }

        jfloat Float::floatValue() const
        {
            return env->callFloatMethod(this$, mids$[mid_floatValue_54c6a176]);
        }

        jint Float::hashCode() const
        {
            return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        jfloat Float::intBitsToFloat(jint a0)
        {
            jclass cls = initializeClass();
            return env->callStaticFloatMethod(cls, mids$[mid_intBitsToFloat_39c7bd2c], a0);
        }

        jint Float::intValue() const
        {
            return env->callIntMethod(this$, mids$[mid_intValue_54c6a179]);
        }

        jboolean Float::isInfinite() const
        {
            return env->callBooleanMethod(this$, mids$[mid_isInfinite_54c6a16a]);
        }

        jboolean Float::isInfinite(jfloat a0)
        {
            jclass cls = initializeClass();
            return env->callStaticBooleanMethod(cls, mids$[mid_isInfinite_06298ca7], a0);
        }

        jboolean Float::isNaN() const
        {
            return env->callBooleanMethod(this$, mids$[mid_isNaN_54c6a16a]);
        }

        jboolean Float::isNaN(jfloat a0)
        {
            jclass cls = initializeClass();
            return env->callStaticBooleanMethod(cls, mids$[mid_isNaN_06298ca7], a0);
        }

        jlong Float::longValue() const
        {
            return env->callLongMethod(this$, mids$[mid_longValue_54c6a17a]);
        }

        jfloat Float::parseFloat(const ::java::lang::String & a0)
        {
            jclass cls = initializeClass();
            return env->callStaticFloatMethod(cls, mids$[mid_parseFloat_5fdc3f58], a0.this$);
        }

        jshort Float::shortValue() const
        {
            return env->callShortMethod(this$, mids$[mid_shortValue_54c6a163]);
        }

        ::java::lang::String Float::toHexString(jfloat a0)
        {
            jclass cls = initializeClass();
            return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_toHexString_5ded254a], a0));
        }

        ::java::lang::String Float::toString() const
        {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }

        ::java::lang::String Float::toString(jfloat a0)
        {
            jclass cls = initializeClass();
            return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_toString_5ded254a], a0));
        }

        Float Float::valueOf(jfloat a0)
        {
            jclass cls = initializeClass();
            return Float(env->callStaticObjectMethod(cls, mids$[mid_valueOf_685a245e], a0));
        }

        Float Float::valueOf(const ::java::lang::String & a0)
        {
            jclass cls = initializeClass();
            return Float(env->callStaticObjectMethod(cls, mids$[mid_valueOf_b837041d], a0.this$));
        }
    }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
    namespace lang {
        static PyObject *t_Float_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Float_instance_(PyTypeObject *type, PyObject *arg);
        static int t_Float_init_(t_Float *self, PyObject *args, PyObject *kwds);
        static PyObject *t_Float_byteValue(t_Float *self, PyObject *args);
        static PyObject *t_Float_compare(PyTypeObject *type, PyObject *args);
        static PyObject *t_Float_compareTo(t_Float *self, PyObject *args);
        static PyObject *t_Float_doubleValue(t_Float *self, PyObject *args);
        static PyObject *t_Float_equals(t_Float *self, PyObject *args);
        static PyObject *t_Float_floatToIntBits(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Float_floatToRawIntBits(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Float_floatValue(t_Float *self, PyObject *args);
        static PyObject *t_Float_hashCode(t_Float *self, PyObject *args);
        static PyObject *t_Float_intBitsToFloat(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Float_intValue(t_Float *self, PyObject *args);
        static PyObject *t_Float_isInfinite(t_Float *self);
        static PyObject *t_Float_isInfinite_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Float_isNaN(t_Float *self);
        static PyObject *t_Float_isNaN_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Float_longValue(t_Float *self, PyObject *args);
        static PyObject *t_Float_parseFloat(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Float_shortValue(t_Float *self, PyObject *args);
        static PyObject *t_Float_toHexString(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Float_toString(t_Float *self, PyObject *args);
        static PyObject *t_Float_toString_(PyTypeObject *type, PyObject *args);
        static PyObject *t_Float_valueOf(PyTypeObject *type, PyObject *args);
        static PyObject *t_Float_get__infinite(t_Float *self, void *data);
        static PyObject *t_Float_get__naN(t_Float *self, void *data);
        static PyGetSetDef t_Float__fields_[] = {
            DECLARE_GET_FIELD(t_Float, infinite),
            DECLARE_GET_FIELD(t_Float, naN),
            { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_Float__methods_[] = {
            DECLARE_METHOD(t_Float, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Float, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Float, byteValue, METH_VARARGS),
            DECLARE_METHOD(t_Float, compare, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_Float, compareTo, METH_VARARGS),
            DECLARE_METHOD(t_Float, doubleValue, METH_VARARGS),
            DECLARE_METHOD(t_Float, equals, METH_VARARGS),
            DECLARE_METHOD(t_Float, floatToIntBits, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Float, floatToRawIntBits, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Float, floatValue, METH_VARARGS),
            DECLARE_METHOD(t_Float, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_Float, intBitsToFloat, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Float, intValue, METH_VARARGS),
            DECLARE_METHOD(t_Float, isInfinite, METH_NOARGS),
            DECLARE_METHOD(t_Float, isInfinite_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Float, isNaN, METH_NOARGS),
            DECLARE_METHOD(t_Float, isNaN_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Float, longValue, METH_VARARGS),
            DECLARE_METHOD(t_Float, parseFloat, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Float, shortValue, METH_VARARGS),
            DECLARE_METHOD(t_Float, toHexString, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Float, toString, METH_VARARGS),
            DECLARE_METHOD(t_Float, toString_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Float, valueOf, METH_VARARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(Float, t_Float, ::java::lang::Number, Float, t_Float_init_, 0, 0, t_Float__fields_, 0, 0);

        void t_Float::install(PyObject *module)
        {
            installType(&PY_TYPE(Float), module, "Float", 0);
        }

        void t_Float::initialize(PyObject *module)
        {
            PyDict_SetItemString(PY_TYPE(Float).tp_dict, "class_", make_descriptor(Float::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Float).tp_dict, "wrapfn_", make_descriptor(unboxFloat));
            PyDict_SetItemString(PY_TYPE(Float).tp_dict, "boxfn_", make_descriptor(boxFloat));
            Float::initializeClass();
            PyDict_SetItemString(PY_TYPE(Float).tp_dict, "MAX_EXPONENT", make_descriptor(Float::MAX_EXPONENT));
            PyDict_SetItemString(PY_TYPE(Float).tp_dict, "MAX_VALUE", make_descriptor(Float::MAX_VALUE));
            PyDict_SetItemString(PY_TYPE(Float).tp_dict, "MIN_EXPONENT", make_descriptor(Float::MIN_EXPONENT));
            PyDict_SetItemString(PY_TYPE(Float).tp_dict, "MIN_NORMAL", make_descriptor(Float::MIN_NORMAL));
            PyDict_SetItemString(PY_TYPE(Float).tp_dict, "MIN_VALUE", make_descriptor(Float::MIN_VALUE));
            PyDict_SetItemString(PY_TYPE(Float).tp_dict, "NEGATIVE_INFINITY", make_descriptor(Float::NEGATIVE_INFINITY));
            PyDict_SetItemString(PY_TYPE(Float).tp_dict, "NaN", make_descriptor(Float::NaN));
            PyDict_SetItemString(PY_TYPE(Float).tp_dict, "POSITIVE_INFINITY", make_descriptor(Float::POSITIVE_INFINITY));
            PyDict_SetItemString(PY_TYPE(Float).tp_dict, "SIZE", make_descriptor(Float::SIZE));
            PyDict_SetItemString(PY_TYPE(Float).tp_dict, "TYPE", make_descriptor(::java::lang::t_Class::wrap_Object(*Float::TYPE)));
        }

        static PyObject *t_Float_cast_(PyTypeObject *type, PyObject *arg)
        {
            if (!(arg = castCheck(arg, Float::initializeClass, 1)))
                return NULL;
            return t_Float::wrap_Object(Float(((t_Float *) arg)->object.this$));
        }
        static PyObject *t_Float_instance_(PyTypeObject *type, PyObject *arg)
        {
            if (!castCheck(arg, Float::initializeClass, 0))
                Py_RETURN_FALSE;
            Py_RETURN_TRUE;
        }

        static int t_Float_init_(t_Float *self, PyObject *args, PyObject *kwds)
        {
            switch (PyTuple_GET_SIZE(args)) {
              case 1:
                {
                    jfloat a0;
                    Float object((jobject) NULL);

                    if (!parseArgs(args, "F", &a0))
                    {
                        INT_CALL(object = Float(a0));
                        self->object = object;
                        break;
                    }
                }
                {
                    ::java::lang::String a0((jobject) NULL);
                    Float object((jobject) NULL);

                    if (!parseArgs(args, "s", &a0))
                    {
                        INT_CALL(object = Float(a0));
                        self->object = object;
                        break;
                    }
                }
                {
                    jdouble a0;
                    Float object((jobject) NULL);

                    if (!parseArgs(args, "D", &a0))
                    {
                        INT_CALL(object = Float(a0));
                        self->object = object;
                        break;
                    }
                }
              default:
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
            }

            return 0;
        }

        static PyObject *t_Float_byteValue(t_Float *self, PyObject *args)
        {
            jbyte result;

            if (!parseArgs(args, ""))
            {
                OBJ_CALL(result = self->object.byteValue());
                return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(Float), (PyObject *) self, "byteValue", args, 2);
        }

        static PyObject *t_Float_compare(PyTypeObject *type, PyObject *args)
        {
            jfloat a0;
            jfloat a1;
            jint result;

            if (!parseArgs(args, "FF", &a0, &a1))
            {
                OBJ_CALL(result = ::java::lang::Float::compare(a0, a1));
                return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError(type, "compare", args);
            return NULL;
        }

        static PyObject *t_Float_compareTo(t_Float *self, PyObject *args)
        {
            switch (PyTuple_GET_SIZE(args)) {
              case 1:
                {
                    ::java::lang::Object a0((jobject) NULL);
                    jint result;

                    if (!parseArgs(args, "o", &a0))
                    {
                        OBJ_CALL(result = self->object.compareTo(a0));
                        return PyInt_FromLong((long) result);
                    }
                }
                {
                    Float a0((jobject) NULL);
                    jint result;

                    if (!parseArgs(args, "O", &::java::lang::PY_TYPE(Float), &a0))
                    {
                        OBJ_CALL(result = self->object.compareTo(a0));
                        return PyInt_FromLong((long) result);
                    }
                }
            }

            PyErr_SetArgsError((PyObject *) self, "compareTo", args);
            return NULL;
        }

        static PyObject *t_Float_doubleValue(t_Float *self, PyObject *args)
        {
            jdouble result;

            if (!parseArgs(args, ""))
            {
                OBJ_CALL(result = self->object.doubleValue());
                return PyFloat_FromDouble((double) result);
            }

            return callSuper(&PY_TYPE(Float), (PyObject *) self, "doubleValue", args, 2);
        }

        static PyObject *t_Float_equals(t_Float *self, PyObject *args)
        {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
                OBJ_CALL(result = self->object.equals(a0));
                Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(Float), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_Float_floatToIntBits(PyTypeObject *type, PyObject *arg)
        {
            jfloat a0;
            jint result;

            if (!parseArg(arg, "F", &a0))
            {
                OBJ_CALL(result = ::java::lang::Float::floatToIntBits(a0));
                return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError(type, "floatToIntBits", arg);
            return NULL;
        }

        static PyObject *t_Float_floatToRawIntBits(PyTypeObject *type, PyObject *arg)
        {
            jfloat a0;
            jint result;

            if (!parseArg(arg, "F", &a0))
            {
                OBJ_CALL(result = ::java::lang::Float::floatToRawIntBits(a0));
                return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError(type, "floatToRawIntBits", arg);
            return NULL;
        }

        static PyObject *t_Float_floatValue(t_Float *self, PyObject *args)
        {
            jfloat result;

            if (!parseArgs(args, ""))
            {
                OBJ_CALL(result = self->object.floatValue());
                return PyFloat_FromDouble((double) result);
            }

            return callSuper(&PY_TYPE(Float), (PyObject *) self, "floatValue", args, 2);
        }

        static PyObject *t_Float_hashCode(t_Float *self, PyObject *args)
        {
            jint result;

            if (!parseArgs(args, ""))
            {
                OBJ_CALL(result = self->object.hashCode());
                return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(Float), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_Float_intBitsToFloat(PyTypeObject *type, PyObject *arg)
        {
            jint a0;
            jfloat result;

            if (!parseArg(arg, "I", &a0))
            {
                OBJ_CALL(result = ::java::lang::Float::intBitsToFloat(a0));
                return PyFloat_FromDouble((double) result);
            }

            PyErr_SetArgsError(type, "intBitsToFloat", arg);
            return NULL;
        }

        static PyObject *t_Float_intValue(t_Float *self, PyObject *args)
        {
            jint result;

            if (!parseArgs(args, ""))
            {
                OBJ_CALL(result = self->object.intValue());
                return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(Float), (PyObject *) self, "intValue", args, 2);
        }

        static PyObject *t_Float_isInfinite(t_Float *self)
        {
            jboolean result;
            OBJ_CALL(result = self->object.isInfinite());
            Py_RETURN_BOOL(result);
        }

        static PyObject *t_Float_isInfinite_(PyTypeObject *type, PyObject *arg)
        {
            jfloat a0;
            jboolean result;

            if (!parseArg(arg, "F", &a0))
            {
                OBJ_CALL(result = ::java::lang::Float::isInfinite(a0));
                Py_RETURN_BOOL(result);
            }

            PyErr_SetArgsError(type, "isInfinite_", arg);
            return NULL;
        }

        static PyObject *t_Float_isNaN(t_Float *self)
        {
            jboolean result;
            OBJ_CALL(result = self->object.isNaN());
            Py_RETURN_BOOL(result);
        }

        static PyObject *t_Float_isNaN_(PyTypeObject *type, PyObject *arg)
        {
            jfloat a0;
            jboolean result;

            if (!parseArg(arg, "F", &a0))
            {
                OBJ_CALL(result = ::java::lang::Float::isNaN(a0));
                Py_RETURN_BOOL(result);
            }

            PyErr_SetArgsError(type, "isNaN_", arg);
            return NULL;
        }

        static PyObject *t_Float_longValue(t_Float *self, PyObject *args)
        {
            jlong result;

            if (!parseArgs(args, ""))
            {
                OBJ_CALL(result = self->object.longValue());
                return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            return callSuper(&PY_TYPE(Float), (PyObject *) self, "longValue", args, 2);
        }

        static PyObject *t_Float_parseFloat(PyTypeObject *type, PyObject *arg)
        {
            ::java::lang::String a0((jobject) NULL);
            jfloat result;

            if (!parseArg(arg, "s", &a0))
            {
                OBJ_CALL(result = ::java::lang::Float::parseFloat(a0));
                return PyFloat_FromDouble((double) result);
            }

            PyErr_SetArgsError(type, "parseFloat", arg);
            return NULL;
        }

        static PyObject *t_Float_shortValue(t_Float *self, PyObject *args)
        {
            jshort result;

            if (!parseArgs(args, ""))
            {
                OBJ_CALL(result = self->object.shortValue());
                return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(Float), (PyObject *) self, "shortValue", args, 2);
        }

        static PyObject *t_Float_toHexString(PyTypeObject *type, PyObject *arg)
        {
            jfloat a0;
            ::java::lang::String result((jobject) NULL);

            if (!parseArg(arg, "F", &a0))
            {
                OBJ_CALL(result = ::java::lang::Float::toHexString(a0));
                return j2p(result);
            }

            PyErr_SetArgsError(type, "toHexString", arg);
            return NULL;
        }

        static PyObject *t_Float_toString(t_Float *self, PyObject *args)
        {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
                OBJ_CALL(result = self->object.toString());
                return j2p(result);
            }

            return callSuper(&PY_TYPE(Float), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_Float_toString_(PyTypeObject *type, PyObject *args)
        {
            jfloat a0;
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, "F", &a0))
            {
                OBJ_CALL(result = ::java::lang::Float::toString(a0));
                return j2p(result);
            }

            PyErr_SetArgsError(type, "toString_", args);
            return NULL;
        }

        static PyObject *t_Float_valueOf(PyTypeObject *type, PyObject *args)
        {
            switch (PyTuple_GET_SIZE(args)) {
              case 1:
                {
                    jfloat a0;
                    Float result((jobject) NULL);

                    if (!parseArgs(args, "F", &a0))
                    {
                        OBJ_CALL(result = ::java::lang::Float::valueOf(a0));
                        return t_Float::wrap_Object(result);
                    }
                }
                {
                    ::java::lang::String a0((jobject) NULL);
                    Float result((jobject) NULL);

                    if (!parseArgs(args, "s", &a0))
                    {
                        OBJ_CALL(result = ::java::lang::Float::valueOf(a0));
                        return t_Float::wrap_Object(result);
                    }
                }
            }

            PyErr_SetArgsError(type, "valueOf", args);
            return NULL;
        }

        static PyObject *t_Float_get__infinite(t_Float *self, void *data)
        {
            jboolean value;
            OBJ_CALL(value = self->object.isInfinite());
            Py_RETURN_BOOL(value);
        }

        static PyObject *t_Float_get__naN(t_Float *self, void *data)
        {
            jboolean value;
            OBJ_CALL(value = self->object.isNaN());
            Py_RETURN_BOOL(value);
        }
    }
}
#include <jni.h>
#include "JCCEnv.h"
#include "is/iclt/icenlp/core/utils/FileLister.h"
#include "java/io/File.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "java/util/List.h"
#include "JArray.h"

namespace is {
    namespace iclt {
        namespace icenlp {
            namespace core {
                namespace utils {

                    ::java::lang::Class *FileLister::class$ = NULL;
                    jmethodID *FileLister::mids$ = NULL;

                    jclass FileLister::initializeClass()
                    {
                        if (!class$)
                        {

                            jclass cls = (jclass) env->findClass("is/iclt/icenlp/core/utils/FileLister");

                            mids$ = new jmethodID[max_mid];
                            mids$[mid_create_dccf34f1] = env->getStaticMethodID(cls, "create", "(Ljava/io/File;)Ljava/util/List;");
                            mids$[mid_create_f9574bdf] = env->getStaticMethodID(cls, "create", "(Ljava/io/File;Ljava/lang/String;)Ljava/util/List;");
                            mids$[mid_getFiles_87851566] = env->getMethodID(cls, "getFiles", "()Ljava/util/List;");

                            class$ = (::java::lang::Class *) new JObject(cls);
                        }
                        return (jclass) class$->this$;
                    }

                    ::java::util::List FileLister::create(const ::java::io::File & a0)
                    {
                        jclass cls = initializeClass();
                        return ::java::util::List(env->callStaticObjectMethod(cls, mids$[mid_create_dccf34f1], a0.this$));
                    }

                    ::java::util::List FileLister::create(const ::java::io::File & a0, const ::java::lang::String & a1)
                    {
                        jclass cls = initializeClass();
                        return ::java::util::List(env->callStaticObjectMethod(cls, mids$[mid_create_f9574bdf], a0.this$, a1.this$));
                    }

                    ::java::util::List FileLister::getFiles() const
                    {
                        return ::java::util::List(env->callObjectMethod(this$, mids$[mid_getFiles_87851566]));
                    }
                }
            }
        }
    }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace is {
    namespace iclt {
        namespace icenlp {
            namespace core {
                namespace utils {
                    static PyObject *t_FileLister_cast_(PyTypeObject *type, PyObject *arg);
                    static PyObject *t_FileLister_instance_(PyTypeObject *type, PyObject *arg);
                    static PyObject *t_FileLister_create(PyTypeObject *type, PyObject *args);
                    static PyObject *t_FileLister_getFiles(t_FileLister *self);
                    static PyObject *t_FileLister_get__files(t_FileLister *self, void *data);
                    static PyGetSetDef t_FileLister__fields_[] = {
                        DECLARE_GET_FIELD(t_FileLister, files),
                        { NULL, NULL, NULL, NULL, NULL }
                    };

                    static PyMethodDef t_FileLister__methods_[] = {
                        DECLARE_METHOD(t_FileLister, cast_, METH_O | METH_CLASS),
                        DECLARE_METHOD(t_FileLister, instance_, METH_O | METH_CLASS),
                        DECLARE_METHOD(t_FileLister, create, METH_VARARGS | METH_CLASS),
                        DECLARE_METHOD(t_FileLister, getFiles, METH_NOARGS),
                        { NULL, NULL, 0, NULL }
                    };

                    DECLARE_TYPE(FileLister, t_FileLister, ::java::lang::Object, FileLister, abstract_init, 0, 0, t_FileLister__fields_, 0, 0);

                    void t_FileLister::install(PyObject *module)
                    {
                        installType(&PY_TYPE(FileLister), module, "FileLister", 0);
                    }

                    void t_FileLister::initialize(PyObject *module)
                    {
                        PyDict_SetItemString(PY_TYPE(FileLister).tp_dict, "class_", make_descriptor(FileLister::initializeClass, 1));
                        PyDict_SetItemString(PY_TYPE(FileLister).tp_dict, "wrapfn_", make_descriptor(t_FileLister::wrap_jobject));
                        PyDict_SetItemString(PY_TYPE(FileLister).tp_dict, "boxfn_", make_descriptor(boxObject));
                    }

                    static PyObject *t_FileLister_cast_(PyTypeObject *type, PyObject *arg)
                    {
                        if (!(arg = castCheck(arg, FileLister::initializeClass, 1)))
                            return NULL;
                        return t_FileLister::wrap_Object(FileLister(((t_FileLister *) arg)->object.this$));
                    }
                    static PyObject *t_FileLister_instance_(PyTypeObject *type, PyObject *arg)
                    {
                        if (!castCheck(arg, FileLister::initializeClass, 0))
                            Py_RETURN_FALSE;
                        Py_RETURN_TRUE;
                    }

                    static PyObject *t_FileLister_create(PyTypeObject *type, PyObject *args)
                    {
                        switch (PyTuple_GET_SIZE(args)) {
                          case 1:
                            {
                                ::java::io::File a0((jobject) NULL);
                                ::java::util::List result((jobject) NULL);

                                if (!parseArgs(args, "k", ::java::io::File::initializeClass, &a0))
                                {
                                    OBJ_CALL(result = ::is::iclt::icenlp::core::utils::FileLister::create(a0));
                                    return ::java::util::t_List::wrap_Object(result, &::java::io::PY_TYPE(File));
                                }
                            }
                            break;
                          case 2:
                            {
                                ::java::io::File a0((jobject) NULL);
                                ::java::lang::String a1((jobject) NULL);
                                ::java::util::List result((jobject) NULL);

                                if (!parseArgs(args, "ks", ::java::io::File::initializeClass, &a0, &a1))
                                {
                                    OBJ_CALL(result = ::is::iclt::icenlp::core::utils::FileLister::create(a0, a1));
                                    return ::java::util::t_List::wrap_Object(result, &::java::io::PY_TYPE(File));
                                }
                            }
                        }

                        PyErr_SetArgsError(type, "create", args);
                        return NULL;
                    }

                    static PyObject *t_FileLister_getFiles(t_FileLister *self)
                    {
                        ::java::util::List result((jobject) NULL);
                        OBJ_CALL(result = self->object.getFiles());
                        return ::java::util::t_List::wrap_Object(result, &::java::io::PY_TYPE(File));
                    }

                    static PyObject *t_FileLister_get__files(t_FileLister *self, void *data)
                    {
                        ::java::util::List value((jobject) NULL);
                        OBJ_CALL(value = self->object.getFiles());
                        return ::java::util::t_List::wrap_Object(value);
                    }
                }
            }
        }
    }
}
#include <jni.h>
#include "JCCEnv.h"
#include "is/iclt/icenlp/core/tokenizer/Segmentizer.h"
#include "java/io/IOException.h"
#include "java/io/BufferedReader.h"
#include "is/iclt/icenlp/core/utils/Lexicon.h"
#include "java/lang/NullPointerException.h"
#include "java/lang/Class.h"
#include "java/io/InputStream.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace is {
    namespace iclt {
        namespace icenlp {
            namespace core {
                namespace tokenizer {

                    ::java::lang::Class *Segmentizer::class$ = NULL;
                    jmethodID *Segmentizer::mids$ = NULL;
                    jint Segmentizer::otherDifferentFormat = (jint) 0;
                    jint Segmentizer::sentencePerLine = (jint) 0;
                    jint Segmentizer::tokenPerLine = (jint) 0;

                    jclass Segmentizer::initializeClass()
                    {
                        if (!class$)
                        {

                            jclass cls = (jclass) env->findClass("is/iclt/icenlp/core/tokenizer/Segmentizer");

                            mids$ = new jmethodID[max_mid];
                            mids$[mid_init$_be2e4f90] = env->getMethodID(cls, "<init>", "(Ljava/io/InputStream;)V");
                            mids$[mid_init$_4f633a30] = env->getMethodID(cls, "<init>", "(Lis/iclt/icenlp/core/utils/Lexicon;)V");
                            mids$[mid_init$_244a19ea] = env->getMethodID(cls, "<init>", "(Lis/iclt/icenlp/core/utils/Lexicon;I)V");
                            mids$[mid_init$_4a264742] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Ljava/lang/String;)V");
                            mids$[mid_init$_923b8828] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;ILjava/lang/String;)V");
                            mids$[mid_init$_54da3710] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;ILjava/io/InputStream;)V");
                            mids$[mid_init$_632ddaa0] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;ILis/iclt/icenlp/core/utils/Lexicon;)V");
                            mids$[mid_init$_63ea6fb1] = env->getMethodID(cls, "<init>", "(Ljava/io/BufferedReader;ILjava/lang/String;)V");
                            mids$[mid_init$_44d26aaf] = env->getMethodID(cls, "<init>", "(Ljava/io/BufferedReader;ILjava/io/InputStream;)V");
                            mids$[mid_init$_4e96167b] = env->getMethodID(cls, "<init>", "(Ljava/io/BufferedReader;ILis/iclt/icenlp/core/utils/Lexicon;)V");
                            mids$[mid_getNextSentence_14c7b5c5] = env->getMethodID(cls, "getNextSentence", "()Ljava/lang/String;");
                            mids$[mid_hasMoreSentences_54c6a16a] = env->getMethodID(cls, "hasMoreSentences", "()Z");
                            mids$[mid_interpretLineFormat_141401b3] = env->getStaticMethodID(cls, "interpretLineFormat", "(I)Ljava/lang/String;");
                            mids$[mid_segmentize_5fdc3f48] = env->getMethodID(cls, "segmentize", "(Ljava/lang/String;)V");

                            class$ = (::java::lang::Class *) new JObject(cls);
                            cls = (jclass) class$->this$;

                            otherDifferentFormat = env->getStaticIntField(cls, "otherDifferentFormat");
                            sentencePerLine = env->getStaticIntField(cls, "sentencePerLine");
                            tokenPerLine = env->getStaticIntField(cls, "tokenPerLine");
                        }
                        return (jclass) class$->this$;
                    }

                    Segmentizer::Segmentizer(const ::java::io::InputStream & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_be2e4f90, a0.this$)) {}

                    Segmentizer::Segmentizer(const ::is::iclt::icenlp::core::utils::Lexicon & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_4f633a30, a0.this$)) {}

                    Segmentizer::Segmentizer(const ::is::iclt::icenlp::core::utils::Lexicon & a0, jint a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_244a19ea, a0.this$, a1)) {}

                    Segmentizer::Segmentizer(const ::java::lang::String & a0, const ::java::lang::String & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_4a264742, a0.this$, a1.this$)) {}

                    Segmentizer::Segmentizer(const ::java::lang::String & a0, jint a1, const ::java::lang::String & a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_923b8828, a0.this$, a1, a2.this$)) {}

                    Segmentizer::Segmentizer(const ::java::lang::String & a0, jint a1, const ::java::io::InputStream & a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54da3710, a0.this$, a1, a2.this$)) {}

                    Segmentizer::Segmentizer(const ::java::lang::String & a0, jint a1, const ::is::iclt::icenlp::core::utils::Lexicon & a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_632ddaa0, a0.this$, a1, a2.this$)) {}

                    Segmentizer::Segmentizer(const ::java::io::BufferedReader & a0, jint a1, const ::java::lang::String & a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_63ea6fb1, a0.this$, a1, a2.this$)) {}

                    Segmentizer::Segmentizer(const ::java::io::BufferedReader & a0, jint a1, const ::java::io::InputStream & a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_44d26aaf, a0.this$, a1, a2.this$)) {}

                    Segmentizer::Segmentizer(const ::java::io::BufferedReader & a0, jint a1, const ::is::iclt::icenlp::core::utils::Lexicon & a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_4e96167b, a0.this$, a1, a2.this$)) {}

                    ::java::lang::String Segmentizer::getNextSentence() const
                    {
                        return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getNextSentence_14c7b5c5]));
                    }

                    jboolean Segmentizer::hasMoreSentences() const
                    {
                        return env->callBooleanMethod(this$, mids$[mid_hasMoreSentences_54c6a16a]);
                    }

                    ::java::lang::String Segmentizer::interpretLineFormat(jint a0)
                    {
                        jclass cls = initializeClass();
                        return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_interpretLineFormat_141401b3], a0));
                    }

                    void Segmentizer::segmentize(const ::java::lang::String & a0) const
                    {
                        env->callVoidMethod(this$, mids$[mid_segmentize_5fdc3f48], a0.this$);
                    }
                }
            }
        }
    }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace is {
    namespace iclt {
        namespace icenlp {
            namespace core {
                namespace tokenizer {
                    static PyObject *t_Segmentizer_cast_(PyTypeObject *type, PyObject *arg);
                    static PyObject *t_Segmentizer_instance_(PyTypeObject *type, PyObject *arg);
                    static int t_Segmentizer_init_(t_Segmentizer *self, PyObject *args, PyObject *kwds);
                    static PyObject *t_Segmentizer_getNextSentence(t_Segmentizer *self);
                    static PyObject *t_Segmentizer_hasMoreSentences(t_Segmentizer *self);
                    static PyObject *t_Segmentizer_interpretLineFormat(PyTypeObject *type, PyObject *arg);
                    static PyObject *t_Segmentizer_segmentize(t_Segmentizer *self, PyObject *arg);
                    static PyObject *t_Segmentizer_get__nextSentence(t_Segmentizer *self, void *data);
                    static PyGetSetDef t_Segmentizer__fields_[] = {
                        DECLARE_GET_FIELD(t_Segmentizer, nextSentence),
                        { NULL, NULL, NULL, NULL, NULL }
                    };

                    static PyMethodDef t_Segmentizer__methods_[] = {
                        DECLARE_METHOD(t_Segmentizer, cast_, METH_O | METH_CLASS),
                        DECLARE_METHOD(t_Segmentizer, instance_, METH_O | METH_CLASS),
                        DECLARE_METHOD(t_Segmentizer, getNextSentence, METH_NOARGS),
                        DECLARE_METHOD(t_Segmentizer, hasMoreSentences, METH_NOARGS),
                        DECLARE_METHOD(t_Segmentizer, interpretLineFormat, METH_O | METH_CLASS),
                        DECLARE_METHOD(t_Segmentizer, segmentize, METH_O),
                        { NULL, NULL, 0, NULL }
                    };

                    DECLARE_TYPE(Segmentizer, t_Segmentizer, ::java::lang::Object, Segmentizer, t_Segmentizer_init_, 0, 0, t_Segmentizer__fields_, 0, 0);

                    void t_Segmentizer::install(PyObject *module)
                    {
                        installType(&PY_TYPE(Segmentizer), module, "Segmentizer", 0);
                    }

                    void t_Segmentizer::initialize(PyObject *module)
                    {
                        PyDict_SetItemString(PY_TYPE(Segmentizer).tp_dict, "class_", make_descriptor(Segmentizer::initializeClass, 1));
                        PyDict_SetItemString(PY_TYPE(Segmentizer).tp_dict, "wrapfn_", make_descriptor(t_Segmentizer::wrap_jobject));
                        PyDict_SetItemString(PY_TYPE(Segmentizer).tp_dict, "boxfn_", make_descriptor(boxObject));
                        Segmentizer::initializeClass();
                        PyDict_SetItemString(PY_TYPE(Segmentizer).tp_dict, "otherDifferentFormat", make_descriptor(Segmentizer::otherDifferentFormat));
                        PyDict_SetItemString(PY_TYPE(Segmentizer).tp_dict, "sentencePerLine", make_descriptor(Segmentizer::sentencePerLine));
                        PyDict_SetItemString(PY_TYPE(Segmentizer).tp_dict, "tokenPerLine", make_descriptor(Segmentizer::tokenPerLine));
                    }

                    static PyObject *t_Segmentizer_cast_(PyTypeObject *type, PyObject *arg)
                    {
                        if (!(arg = castCheck(arg, Segmentizer::initializeClass, 1)))
                            return NULL;
                        return t_Segmentizer::wrap_Object(Segmentizer(((t_Segmentizer *) arg)->object.this$));
                    }
                    static PyObject *t_Segmentizer_instance_(PyTypeObject *type, PyObject *arg)
                    {
                        if (!castCheck(arg, Segmentizer::initializeClass, 0))
                            Py_RETURN_FALSE;
                        Py_RETURN_TRUE;
                    }

                    static int t_Segmentizer_init_(t_Segmentizer *self, PyObject *args, PyObject *kwds)
                    {
                        switch (PyTuple_GET_SIZE(args)) {
                          case 1:
                            {
                                ::java::io::InputStream a0((jobject) NULL);
                                Segmentizer object((jobject) NULL);

                                if (!parseArgs(args, "k", ::java::io::InputStream::initializeClass, &a0))
                                {
                                    INT_CALL(object = Segmentizer(a0));
                                    self->object = object;
                                    break;
                                }
                            }
                            {
                                ::is::iclt::icenlp::core::utils::Lexicon a0((jobject) NULL);
                                Segmentizer object((jobject) NULL);

                                if (!parseArgs(args, "k", ::is::iclt::icenlp::core::utils::Lexicon::initializeClass, &a0))
                                {
                                    INT_CALL(object = Segmentizer(a0));
                                    self->object = object;
                                    break;
                                }
                            }
                            goto err;
                          case 2:
                            {
                                ::is::iclt::icenlp::core::utils::Lexicon a0((jobject) NULL);
                                jint a1;
                                Segmentizer object((jobject) NULL);

                                if (!parseArgs(args, "kI", ::is::iclt::icenlp::core::utils::Lexicon::initializeClass, &a0, &a1))
                                {
                                    INT_CALL(object = Segmentizer(a0, a1));
                                    self->object = object;
                                    break;
                                }
                            }
                            {
                                ::java::lang::String a0((jobject) NULL);
                                ::java::lang::String a1((jobject) NULL);
                                Segmentizer object((jobject) NULL);

                                if (!parseArgs(args, "ss", &a0, &a1))
                                {
                                    INT_CALL(object = Segmentizer(a0, a1));
                                    self->object = object;
                                    break;
                                }
                            }
                            goto err;
                          case 3:
                            {
                                ::java::lang::String a0((jobject) NULL);
                                jint a1;
                                ::java::lang::String a2((jobject) NULL);
                                Segmentizer object((jobject) NULL);

                                if (!parseArgs(args, "sIs", &a0, &a1, &a2))
                                {
                                    INT_CALL(object = Segmentizer(a0, a1, a2));
                                    self->object = object;
                                    break;
                                }
                            }
                            {
                                ::java::lang::String a0((jobject) NULL);
                                jint a1;
                                ::java::io::InputStream a2((jobject) NULL);
                                Segmentizer object((jobject) NULL);

                                if (!parseArgs(args, "sIk", ::java::io::InputStream::initializeClass, &a0, &a1, &a2))
                                {
                                    INT_CALL(object = Segmentizer(a0, a1, a2));
                                    self->object = object;
                                    break;
                                }
                            }
                            {
                                ::java::lang::String a0((jobject) NULL);
                                jint a1;
                                ::is::iclt::icenlp::core::utils::Lexicon a2((jobject) NULL);
                                Segmentizer object((jobject) NULL);

                                if (!parseArgs(args, "sIk", ::is::iclt::icenlp::core::utils::Lexicon::initializeClass, &a0, &a1, &a2))
                                {
                                    INT_CALL(object = Segmentizer(a0, a1, a2));
                                    self->object = object;
                                    break;
                                }
                            }
                            {
                                ::java::io::BufferedReader a0((jobject) NULL);
                                jint a1;
                                ::java::lang::String a2((jobject) NULL);
                                Segmentizer object((jobject) NULL);

                                if (!parseArgs(args, "kIs", ::java::io::BufferedReader::initializeClass, &a0, &a1, &a2))
                                {
                                    INT_CALL(object = Segmentizer(a0, a1, a2));
                                    self->object = object;
                                    break;
                                }
                            }
                            {
                                ::java::io::BufferedReader a0((jobject) NULL);
                                jint a1;
                                ::java::io::InputStream a2((jobject) NULL);
                                Segmentizer object((jobject) NULL);

                                if (!parseArgs(args, "kIk", ::java::io::BufferedReader::initializeClass, ::java::io::InputStream::initializeClass, &a0, &a1, &a2))
                                {
                                    INT_CALL(object = Segmentizer(a0, a1, a2));
                                    self->object = object;
                                    break;
                                }
                            }
                            {
                                ::java::io::BufferedReader a0((jobject) NULL);
                                jint a1;
                                ::is::iclt::icenlp::core::utils::Lexicon a2((jobject) NULL);
                                Segmentizer object((jobject) NULL);

                                if (!parseArgs(args, "kIk", ::java::io::BufferedReader::initializeClass, ::is::iclt::icenlp::core::utils::Lexicon::initializeClass, &a0, &a1, &a2))
                                {
                                    INT_CALL(object = Segmentizer(a0, a1, a2));
                                    self->object = object;
                                    break;
                                }
                            }
                          default:
                          err:
                            PyErr_SetArgsError((PyObject *) self, "__init__", args);
                            return -1;
                        }

                        return 0;
                    }

                    static PyObject *t_Segmentizer_getNextSentence(t_Segmentizer *self)
                    {
                        ::java::lang::String result((jobject) NULL);
                        OBJ_CALL(result = self->object.getNextSentence());
                        return j2p(result);
                    }

                    static PyObject *t_Segmentizer_hasMoreSentences(t_Segmentizer *self)
                    {
                        jboolean result;
                        OBJ_CALL(result = self->object.hasMoreSentences());
                        Py_RETURN_BOOL(result);
                    }

                    static PyObject *t_Segmentizer_interpretLineFormat(PyTypeObject *type, PyObject *arg)
                    {
                        jint a0;
                        ::java::lang::String result((jobject) NULL);

                        if (!parseArg(arg, "I", &a0))
                        {
                            OBJ_CALL(result = ::is::iclt::icenlp::core::tokenizer::Segmentizer::interpretLineFormat(a0));
                            return j2p(result);
                        }

                        PyErr_SetArgsError(type, "interpretLineFormat", arg);
                        return NULL;
                    }

                    static PyObject *t_Segmentizer_segmentize(t_Segmentizer *self, PyObject *arg)
                    {
                        ::java::lang::String a0((jobject) NULL);

                        if (!parseArg(arg, "s", &a0))
                        {
                            OBJ_CALL(self->object.segmentize(a0));
                            Py_RETURN_NONE;
                        }

                        PyErr_SetArgsError((PyObject *) self, "segmentize", arg);
                        return NULL;
                    }

                    static PyObject *t_Segmentizer_get__nextSentence(t_Segmentizer *self, void *data)
                    {
                        ::java::lang::String value((jobject) NULL);
                        OBJ_CALL(value = self->object.getNextSentence());
                        return j2p(value);
                    }
                }
            }
        }
    }
}
#include <jni.h>
#include "JCCEnv.h"
#include "is/iclt/icenlp/core/icetagger/IceTaggerResources.h"
#include "java/lang/Class.h"
#include "java/io/InputStream.h"
#include "JArray.h"

namespace is {
    namespace iclt {
        namespace icenlp {
            namespace core {
                namespace icetagger {

                    ::java::lang::Class *IceTaggerResources::class$ = NULL;
                    jmethodID *IceTaggerResources::mids$ = NULL;
                    jfieldID *IceTaggerResources::fids$ = NULL;

                    jclass IceTaggerResources::initializeClass()
                    {
                        if (!class$)
                        {

                            jclass cls = (jclass) env->findClass("is/iclt/icenlp/core/icetagger/IceTaggerResources");

                            mids$ = new jmethodID[max_mid];
                            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");

                            fids$ = new jfieldID[max_fid];
                            fids$[fid_isDictionary] = env->getFieldID(cls, "isDictionary", "Ljava/io/InputStream;");
                            fids$[fid_isDictionaryBase] = env->getFieldID(cls, "isDictionaryBase", "Ljava/io/InputStream;");
                            fids$[fid_isEndings] = env->getFieldID(cls, "isEndings", "Ljava/io/InputStream;");
                            fids$[fid_isEndingsBase] = env->getFieldID(cls, "isEndingsBase", "Ljava/io/InputStream;");
                            fids$[fid_isEndingsProper] = env->getFieldID(cls, "isEndingsProper", "Ljava/io/InputStream;");
                            fids$[fid_isIdioms] = env->getFieldID(cls, "isIdioms", "Ljava/io/InputStream;");
                            fids$[fid_isPrefixes] = env->getFieldID(cls, "isPrefixes", "Ljava/io/InputStream;");
                            fids$[fid_isTagFrequency] = env->getFieldID(cls, "isTagFrequency", "Ljava/io/InputStream;");
                            fids$[fid_isTokenDict] = env->getFieldID(cls, "isTokenDict", "Ljava/io/InputStream;");
                            fids$[fid_isVerbAdverb] = env->getFieldID(cls, "isVerbAdverb", "Ljava/io/InputStream;");
                            fids$[fid_isVerbObj] = env->getFieldID(cls, "isVerbObj", "Ljava/io/InputStream;");
                            fids$[fid_isVerbPrep] = env->getFieldID(cls, "isVerbPrep", "Ljava/io/InputStream;");

                            class$ = (::java::lang::Class *) new JObject(cls);
                        }
                        return (jclass) class$->this$;
                    }

                    IceTaggerResources::IceTaggerResources() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

                    ::java::io::InputStream IceTaggerResources::_get_isDictionary() const
                    {
                        return ::java::io::InputStream(env->getObjectField(this$, fids$[fid_isDictionary]));
                    }

                    void IceTaggerResources::_set_isDictionary(const ::java::io::InputStream & a0) const
                    {
                        env->setObjectField(this$, fids$[fid_isDictionary], a0.this$);
                    }

                    ::java::io::InputStream IceTaggerResources::_get_isDictionaryBase() const
                    {
                        return ::java::io::InputStream(env->getObjectField(this$, fids$[fid_isDictionaryBase]));
                    }

                    void IceTaggerResources::_set_isDictionaryBase(const ::java::io::InputStream & a0) const
                    {
                        env->setObjectField(this$, fids$[fid_isDictionaryBase], a0.this$);
                    }

                    ::java::io::InputStream IceTaggerResources::_get_isEndings() const
                    {
                        return ::java::io::InputStream(env->getObjectField(this$, fids$[fid_isEndings]));
                    }

                    void IceTaggerResources::_set_isEndings(const ::java::io::InputStream & a0) const
                    {
                        env->setObjectField(this$, fids$[fid_isEndings], a0.this$);
                    }

                    ::java::io::InputStream IceTaggerResources::_get_isEndingsBase() const
                    {
                        return ::java::io::InputStream(env->getObjectField(this$, fids$[fid_isEndingsBase]));
                    }

                    void IceTaggerResources::_set_isEndingsBase(const ::java::io::InputStream & a0) const
                    {
                        env->setObjectField(this$, fids$[fid_isEndingsBase], a0.this$);
                    }

                    ::java::io::InputStream IceTaggerResources::_get_isEndingsProper() const
                    {
                        return ::java::io::InputStream(env->getObjectField(this$, fids$[fid_isEndingsProper]));
                    }

                    void IceTaggerResources::_set_isEndingsProper(const ::java::io::InputStream & a0) const
                    {
                        env->setObjectField(this$, fids$[fid_isEndingsProper], a0.this$);
                    }

                    ::java::io::InputStream IceTaggerResources::_get_isIdioms() const
                    {
                        return ::java::io::InputStream(env->getObjectField(this$, fids$[fid_isIdioms]));
                    }

                    void IceTaggerResources::_set_isIdioms(const ::java::io::InputStream & a0) const
                    {
                        env->setObjectField(this$, fids$[fid_isIdioms], a0.this$);
                    }

                    ::java::io::InputStream IceTaggerResources::_get_isPrefixes() const
                    {
                        return ::java::io::InputStream(env->getObjectField(this$, fids$[fid_isPrefixes]));
                    }

                    void IceTaggerResources::_set_isPrefixes(const ::java::io::InputStream & a0) const
                    {
                        env->setObjectField(this$, fids$[fid_isPrefixes], a0.this$);
                    }

                    ::java::io::InputStream IceTaggerResources::_get_isTagFrequency() const
                    {
                        return ::java::io::InputStream(env->getObjectField(this$, fids$[fid_isTagFrequency]));
                    }

                    void IceTaggerResources::_set_isTagFrequency(const ::java::io::InputStream & a0) const
                    {
                        env->setObjectField(this$, fids$[fid_isTagFrequency], a0.this$);
                    }

                    ::java::io::InputStream IceTaggerResources::_get_isTokenDict() const
                    {
                        return ::java::io::InputStream(env->getObjectField(this$, fids$[fid_isTokenDict]));
                    }

                    void IceTaggerResources::_set_isTokenDict(const ::java::io::InputStream & a0) const
                    {
                        env->setObjectField(this$, fids$[fid_isTokenDict], a0.this$);
                    }

                    ::java::io::InputStream IceTaggerResources::_get_isVerbAdverb() const
                    {
                        return ::java::io::InputStream(env->getObjectField(this$, fids$[fid_isVerbAdverb]));
                    }

                    void IceTaggerResources::_set_isVerbAdverb(const ::java::io::InputStream & a0) const
                    {
                        env->setObjectField(this$, fids$[fid_isVerbAdverb], a0.this$);
                    }

                    ::java::io::InputStream IceTaggerResources::_get_isVerbObj() const
                    {
                        return ::java::io::InputStream(env->getObjectField(this$, fids$[fid_isVerbObj]));
                    }

                    void IceTaggerResources::_set_isVerbObj(const ::java::io::InputStream & a0) const
                    {
                        env->setObjectField(this$, fids$[fid_isVerbObj], a0.this$);
                    }

                    ::java::io::InputStream IceTaggerResources::_get_isVerbPrep() const
                    {
                        return ::java::io::InputStream(env->getObjectField(this$, fids$[fid_isVerbPrep]));
                    }

                    void IceTaggerResources::_set_isVerbPrep(const ::java::io::InputStream & a0) const
                    {
                        env->setObjectField(this$, fids$[fid_isVerbPrep], a0.this$);
                    }
                }
            }
        }
    }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace is {
    namespace iclt {
        namespace icenlp {
            namespace core {
                namespace icetagger {
                    static PyObject *t_IceTaggerResources_cast_(PyTypeObject *type, PyObject *arg);
                    static PyObject *t_IceTaggerResources_instance_(PyTypeObject *type, PyObject *arg);
                    static int t_IceTaggerResources_init_(t_IceTaggerResources *self, PyObject *args, PyObject *kwds);
                    static PyObject *t_IceTaggerResources_get__isDictionary(t_IceTaggerResources *self, void *data);
                    static int t_IceTaggerResources_set__isDictionary(t_IceTaggerResources *self, PyObject *arg, void *data);
                    static PyObject *t_IceTaggerResources_get__isDictionaryBase(t_IceTaggerResources *self, void *data);
                    static int t_IceTaggerResources_set__isDictionaryBase(t_IceTaggerResources *self, PyObject *arg, void *data);
                    static PyObject *t_IceTaggerResources_get__isEndings(t_IceTaggerResources *self, void *data);
                    static int t_IceTaggerResources_set__isEndings(t_IceTaggerResources *self, PyObject *arg, void *data);
                    static PyObject *t_IceTaggerResources_get__isEndingsBase(t_IceTaggerResources *self, void *data);
                    static int t_IceTaggerResources_set__isEndingsBase(t_IceTaggerResources *self, PyObject *arg, void *data);
                    static PyObject *t_IceTaggerResources_get__isEndingsProper(t_IceTaggerResources *self, void *data);
                    static int t_IceTaggerResources_set__isEndingsProper(t_IceTaggerResources *self, PyObject *arg, void *data);
                    static PyObject *t_IceTaggerResources_get__isIdioms(t_IceTaggerResources *self, void *data);
                    static int t_IceTaggerResources_set__isIdioms(t_IceTaggerResources *self, PyObject *arg, void *data);
                    static PyObject *t_IceTaggerResources_get__isPrefixes(t_IceTaggerResources *self, void *data);
                    static int t_IceTaggerResources_set__isPrefixes(t_IceTaggerResources *self, PyObject *arg, void *data);
                    static PyObject *t_IceTaggerResources_get__isTagFrequency(t_IceTaggerResources *self, void *data);
                    static int t_IceTaggerResources_set__isTagFrequency(t_IceTaggerResources *self, PyObject *arg, void *data);
                    static PyObject *t_IceTaggerResources_get__isTokenDict(t_IceTaggerResources *self, void *data);
                    static int t_IceTaggerResources_set__isTokenDict(t_IceTaggerResources *self, PyObject *arg, void *data);
                    static PyObject *t_IceTaggerResources_get__isVerbAdverb(t_IceTaggerResources *self, void *data);
                    static int t_IceTaggerResources_set__isVerbAdverb(t_IceTaggerResources *self, PyObject *arg, void *data);
                    static PyObject *t_IceTaggerResources_get__isVerbObj(t_IceTaggerResources *self, void *data);
                    static int t_IceTaggerResources_set__isVerbObj(t_IceTaggerResources *self, PyObject *arg, void *data);
                    static PyObject *t_IceTaggerResources_get__isVerbPrep(t_IceTaggerResources *self, void *data);
                    static int t_IceTaggerResources_set__isVerbPrep(t_IceTaggerResources *self, PyObject *arg, void *data);

                    static PyGetSetDef t_IceTaggerResources__fields_[] = {
                        DECLARE_GETSET_FIELD(t_IceTaggerResources, isDictionary),
                        DECLARE_GETSET_FIELD(t_IceTaggerResources, isDictionaryBase),
                        DECLARE_GETSET_FIELD(t_IceTaggerResources, isEndings),
                        DECLARE_GETSET_FIELD(t_IceTaggerResources, isEndingsBase),
                        DECLARE_GETSET_FIELD(t_IceTaggerResources, isEndingsProper),
                        DECLARE_GETSET_FIELD(t_IceTaggerResources, isIdioms),
                        DECLARE_GETSET_FIELD(t_IceTaggerResources, isPrefixes),
                        DECLARE_GETSET_FIELD(t_IceTaggerResources, isTagFrequency),
                        DECLARE_GETSET_FIELD(t_IceTaggerResources, isTokenDict),
                        DECLARE_GETSET_FIELD(t_IceTaggerResources, isVerbAdverb),
                        DECLARE_GETSET_FIELD(t_IceTaggerResources, isVerbObj),
                        DECLARE_GETSET_FIELD(t_IceTaggerResources, isVerbPrep),
                        { NULL, NULL, NULL, NULL, NULL }
                    };

                    static PyMethodDef t_IceTaggerResources__methods_[] = {
                        DECLARE_METHOD(t_IceTaggerResources, cast_, METH_O | METH_CLASS),
                        DECLARE_METHOD(t_IceTaggerResources, instance_, METH_O | METH_CLASS),
                        { NULL, NULL, 0, NULL }
                    };

                    DECLARE_TYPE(IceTaggerResources, t_IceTaggerResources, ::java::lang::Object, IceTaggerResources, t_IceTaggerResources_init_, 0, 0, t_IceTaggerResources__fields_, 0, 0);

                    void t_IceTaggerResources::install(PyObject *module)
                    {
                        installType(&PY_TYPE(IceTaggerResources), module, "IceTaggerResources", 0);
                    }

                    void t_IceTaggerResources::initialize(PyObject *module)
                    {
                        PyDict_SetItemString(PY_TYPE(IceTaggerResources).tp_dict, "class_", make_descriptor(IceTaggerResources::initializeClass, 1));
                        PyDict_SetItemString(PY_TYPE(IceTaggerResources).tp_dict, "wrapfn_", make_descriptor(t_IceTaggerResources::wrap_jobject));
                        PyDict_SetItemString(PY_TYPE(IceTaggerResources).tp_dict, "boxfn_", make_descriptor(boxObject));
                    }

                    static PyObject *t_IceTaggerResources_cast_(PyTypeObject *type, PyObject *arg)
                    {
                        if (!(arg = castCheck(arg, IceTaggerResources::initializeClass, 1)))
                            return NULL;
                        return t_IceTaggerResources::wrap_Object(IceTaggerResources(((t_IceTaggerResources *) arg)->object.this$));
                    }
                    static PyObject *t_IceTaggerResources_instance_(PyTypeObject *type, PyObject *arg)
                    {
                        if (!castCheck(arg, IceTaggerResources::initializeClass, 0))
                            Py_RETURN_FALSE;
                        Py_RETURN_TRUE;
                    }

                    static int t_IceTaggerResources_init_(t_IceTaggerResources *self, PyObject *args, PyObject *kwds)
                    {
                        IceTaggerResources object((jobject) NULL);

                        INT_CALL(object = IceTaggerResources());
                        self->object = object;

                        return 0;
                    }

                    static PyObject *t_IceTaggerResources_get__isDictionary(t_IceTaggerResources *self, void *data)
                    {
                        ::java::io::InputStream value((jobject) NULL);
                        OBJ_CALL(value = self->object._get_isDictionary());
                        return ::java::io::t_InputStream::wrap_Object(value);
                    }
                    static int t_IceTaggerResources_set__isDictionary(t_IceTaggerResources *self, PyObject *arg, void *data)
                    {
                        ::java::io::InputStream value((jobject) NULL);
                        if (!parseArg(arg, "k", ::java::io::InputStream::initializeClass, &value))
                        {
                            INT_CALL(self->object._set_isDictionary(value));
                            return 0;
                        }
                        PyErr_SetArgsError((PyObject *) self, "isDictionary", arg);
                        return -1;
                    }

                    static PyObject *t_IceTaggerResources_get__isDictionaryBase(t_IceTaggerResources *self, void *data)
                    {
                        ::java::io::InputStream value((jobject) NULL);
                        OBJ_CALL(value = self->object._get_isDictionaryBase());
                        return ::java::io::t_InputStream::wrap_Object(value);
                    }
                    static int t_IceTaggerResources_set__isDictionaryBase(t_IceTaggerResources *self, PyObject *arg, void *data)
                    {
                        ::java::io::InputStream value((jobject) NULL);
                        if (!parseArg(arg, "k", ::java::io::InputStream::initializeClass, &value))
                        {
                            INT_CALL(self->object._set_isDictionaryBase(value));
                            return 0;
                        }
                        PyErr_SetArgsError((PyObject *) self, "isDictionaryBase", arg);
                        return -1;
                    }

                    static PyObject *t_IceTaggerResources_get__isEndings(t_IceTaggerResources *self, void *data)
                    {
                        ::java::io::InputStream value((jobject) NULL);
                        OBJ_CALL(value = self->object._get_isEndings());
                        return ::java::io::t_InputStream::wrap_Object(value);
                    }
                    static int t_IceTaggerResources_set__isEndings(t_IceTaggerResources *self, PyObject *arg, void *data)
                    {
                        ::java::io::InputStream value((jobject) NULL);
                        if (!parseArg(arg, "k", ::java::io::InputStream::initializeClass, &value))
                        {
                            INT_CALL(self->object._set_isEndings(value));
                            return 0;
                        }
                        PyErr_SetArgsError((PyObject *) self, "isEndings", arg);
                        return -1;
                    }

                    static PyObject *t_IceTaggerResources_get__isEndingsBase(t_IceTaggerResources *self, void *data)
                    {
                        ::java::io::InputStream value((jobject) NULL);
                        OBJ_CALL(value = self->object._get_isEndingsBase());
                        return ::java::io::t_InputStream::wrap_Object(value);
                    }
                    static int t_IceTaggerResources_set__isEndingsBase(t_IceTaggerResources *self, PyObject *arg, void *data)
                    {
                        ::java::io::InputStream value((jobject) NULL);
                        if (!parseArg(arg, "k", ::java::io::InputStream::initializeClass, &value))
                        {
                            INT_CALL(self->object._set_isEndingsBase(value));
                            return 0;
                        }
                        PyErr_SetArgsError((PyObject *) self, "isEndingsBase", arg);
                        return -1;
                    }

                    static PyObject *t_IceTaggerResources_get__isEndingsProper(t_IceTaggerResources *self, void *data)
                    {
                        ::java::io::InputStream value((jobject) NULL);
                        OBJ_CALL(value = self->object._get_isEndingsProper());
                        return ::java::io::t_InputStream::wrap_Object(value);
                    }
                    static int t_IceTaggerResources_set__isEndingsProper(t_IceTaggerResources *self, PyObject *arg, void *data)
                    {
                        ::java::io::InputStream value((jobject) NULL);
                        if (!parseArg(arg, "k", ::java::io::InputStream::initializeClass, &value))
                        {
                            INT_CALL(self->object._set_isEndingsProper(value));
                            return 0;
                        }
                        PyErr_SetArgsError((PyObject *) self, "isEndingsProper", arg);
                        return -1;
                    }

                    static PyObject *t_IceTaggerResources_get__isIdioms(t_IceTaggerResources *self, void *data)
                    {
                        ::java::io::InputStream value((jobject) NULL);
                        OBJ_CALL(value = self->object._get_isIdioms());
                        return ::java::io::t_InputStream::wrap_Object(value);
                    }
                    static int t_IceTaggerResources_set__isIdioms(t_IceTaggerResources *self, PyObject *arg, void *data)
                    {
                        ::java::io::InputStream value((jobject) NULL);
                        if (!parseArg(arg, "k", ::java::io::InputStream::initializeClass, &value))
                        {
                            INT_CALL(self->object._set_isIdioms(value));
                            return 0;
                        }
                        PyErr_SetArgsError((PyObject *) self, "isIdioms", arg);
                        return -1;
                    }

                    static PyObject *t_IceTaggerResources_get__isPrefixes(t_IceTaggerResources *self, void *data)
                    {
                        ::java::io::InputStream value((jobject) NULL);
                        OBJ_CALL(value = self->object._get_isPrefixes());
                        return ::java::io::t_InputStream::wrap_Object(value);
                    }
                    static int t_IceTaggerResources_set__isPrefixes(t_IceTaggerResources *self, PyObject *arg, void *data)
                    {
                        ::java::io::InputStream value((jobject) NULL);
                        if (!parseArg(arg, "k", ::java::io::InputStream::initializeClass, &value))
                        {
                            INT_CALL(self->object._set_isPrefixes(value));
                            return 0;
                        }
                        PyErr_SetArgsError((PyObject *) self, "isPrefixes", arg);
                        return -1;
                    }

                    static PyObject *t_IceTaggerResources_get__isTagFrequency(t_IceTaggerResources *self, void *data)
                    {
                        ::java::io::InputStream value((jobject) NULL);
                        OBJ_CALL(value = self->object._get_isTagFrequency());
                        return ::java::io::t_InputStream::wrap_Object(value);
                    }
                    static int t_IceTaggerResources_set__isTagFrequency(t_IceTaggerResources *self, PyObject *arg, void *data)
                    {
                        ::java::io::InputStream value((jobject) NULL);
                        if (!parseArg(arg, "k", ::java::io::InputStream::initializeClass, &value))
                        {
                            INT_CALL(self->object._set_isTagFrequency(value));
                            return 0;
                        }
                        PyErr_SetArgsError((PyObject *) self, "isTagFrequency", arg);
                        return -1;
                    }

                    static PyObject *t_IceTaggerResources_get__isTokenDict(t_IceTaggerResources *self, void *data)
                    {
                        ::java::io::InputStream value((jobject) NULL);
                        OBJ_CALL(value = self->object._get_isTokenDict());
                        return ::java::io::t_InputStream::wrap_Object(value);
                    }
                    static int t_IceTaggerResources_set__isTokenDict(t_IceTaggerResources *self, PyObject *arg, void *data)
                    {
                        ::java::io::InputStream value((jobject) NULL);
                        if (!parseArg(arg, "k", ::java::io::InputStream::initializeClass, &value))
                        {
                            INT_CALL(self->object._set_isTokenDict(value));
                            return 0;
                        }
                        PyErr_SetArgsError((PyObject *) self, "isTokenDict", arg);
                        return -1;
                    }

                    static PyObject *t_IceTaggerResources_get__isVerbAdverb(t_IceTaggerResources *self, void *data)
                    {
                        ::java::io::InputStream value((jobject) NULL);
                        OBJ_CALL(value = self->object._get_isVerbAdverb());
                        return ::java::io::t_InputStream::wrap_Object(value);
                    }
                    static int t_IceTaggerResources_set__isVerbAdverb(t_IceTaggerResources *self, PyObject *arg, void *data)
                    {
                        ::java::io::InputStream value((jobject) NULL);
                        if (!parseArg(arg, "k", ::java::io::InputStream::initializeClass, &value))
                        {
                            INT_CALL(self->object._set_isVerbAdverb(value));
                            return 0;
                        }
                        PyErr_SetArgsError((PyObject *) self, "isVerbAdverb", arg);
                        return -1;
                    }

                    static PyObject *t_IceTaggerResources_get__isVerbObj(t_IceTaggerResources *self, void *data)
                    {
                        ::java::io::InputStream value((jobject) NULL);
                        OBJ_CALL(value = self->object._get_isVerbObj());
                        return ::java::io::t_InputStream::wrap_Object(value);
                    }
                    static int t_IceTaggerResources_set__isVerbObj(t_IceTaggerResources *self, PyObject *arg, void *data)
                    {
                        ::java::io::InputStream value((jobject) NULL);
                        if (!parseArg(arg, "k", ::java::io::InputStream::initializeClass, &value))
                        {
                            INT_CALL(self->object._set_isVerbObj(value));
                            return 0;
                        }
                        PyErr_SetArgsError((PyObject *) self, "isVerbObj", arg);
                        return -1;
                    }

                    static PyObject *t_IceTaggerResources_get__isVerbPrep(t_IceTaggerResources *self, void *data)
                    {
                        ::java::io::InputStream value((jobject) NULL);
                        OBJ_CALL(value = self->object._get_isVerbPrep());
                        return ::java::io::t_InputStream::wrap_Object(value);
                    }
                    static int t_IceTaggerResources_set__isVerbPrep(t_IceTaggerResources *self, PyObject *arg, void *data)
                    {
                        ::java::io::InputStream value((jobject) NULL);
                        if (!parseArg(arg, "k", ::java::io::InputStream::initializeClass, &value))
                        {
                            INT_CALL(self->object._set_isVerbPrep(value));
                            return 0;
                        }
                        PyErr_SetArgsError((PyObject *) self, "isVerbPrep", arg);
                        return -1;
                    }
                }
            }
        }
    }
}
#include <jni.h>
#include "JCCEnv.h"
#include "is/iclt/icenlp/facade/IceTaggerFacade.h"
#include "is/iclt/icenlp/core/icetagger/IceTaggerLexicons.h"
#include "is/iclt/icenlp/core/utils/Lexicon.h"
#include "java/io/IOException.h"
#include "is/iclt/icenlp/core/tokenizer/Sentences.h"
#include "java/lang/Class.h"
#include "is/iclt/icenlp/core/tritagger/TriTaggerLexicons.h"
#include "java/lang/StringBuffer.h"
#include "is/iclt/icenlp/core/icetagger/IceTagger$HmmModelType.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace is {
    namespace iclt {
        namespace icenlp {
            namespace facade {

                ::java::lang::Class *IceTaggerFacade::class$ = NULL;
                jmethodID *IceTaggerFacade::mids$ = NULL;
                jfieldID *IceTaggerFacade::fids$ = NULL;

                jclass IceTaggerFacade::initializeClass()
                {
                    if (!class$)
                    {

                        jclass cls = (jclass) env->findClass("is/iclt/icenlp/facade/IceTaggerFacade");

                        mids$ = new jmethodID[max_mid];
                        mids$[mid_init$_50cf6b0f] = env->getMethodID(cls, "<init>", "(Lis/iclt/icenlp/core/icetagger/IceTagger$HmmModelType;)V");
                        mids$[mid_init$_6b7ed9f0] = env->getMethodID(cls, "<init>", "(Lis/iclt/icenlp/core/icetagger/IceTaggerLexicons;Lis/iclt/icenlp/core/utils/Lexicon;)V");
                        mids$[mid_init$_085c1b5d] = env->getMethodID(cls, "<init>", "(Lis/iclt/icenlp/core/icetagger/IceTaggerLexicons;Lis/iclt/icenlp/core/utils/Lexicon;Lis/iclt/icenlp/core/icetagger/IceTagger$HmmModelType;)V");
                        mids$[mid_init$_3de8f566] = env->getMethodID(cls, "<init>", "(Lis/iclt/icenlp/core/icetagger/IceTaggerLexicons;Lis/iclt/icenlp/core/utils/Lexicon;I)V");
                        mids$[mid_init$_82a27dcb] = env->getMethodID(cls, "<init>", "(Lis/iclt/icenlp/core/icetagger/IceTaggerLexicons;Lis/iclt/icenlp/core/utils/Lexicon;Lis/iclt/icenlp/core/utils/Lexicon;Z)V");
                        mids$[mid_createTriTagger_ad30c87a] = env->getMethodID(cls, "createTriTagger", "(Lis/iclt/icenlp/core/tritagger/TriTaggerLexicons;)V");
                        mids$[mid_setModelType_50cf6b0f] = env->getMethodID(cls, "setModelType", "(Lis/iclt/icenlp/core/icetagger/IceTagger$HmmModelType;)V");
                        mids$[mid_tag_6359824b] = env->getMethodID(cls, "tag", "(Ljava/lang/String;)Lis/iclt/icenlp/core/tokenizer/Sentences;");
                        mids$[mid_tagApertium_97a5258f] = env->getMethodID(cls, "tagApertium", "(Ljava/lang/String;)Ljava/lang/String;");
                        mids$[mid_tagSentence_2979b2bb] = env->getMethodID(cls, "tagSentence", "(Ljava/lang/String;)Ljava/lang/StringBuffer;");
                        mids$[mid_useTriTagger_bb0c767f] = env->getMethodID(cls, "useTriTagger", "(Z)V");

                        fids$ = new jfieldID[max_fid];
                        fids$[fid_modelPath] = env->getFieldID(cls, "modelPath", "Ljava/lang/String;");

                        class$ = (::java::lang::Class *) new JObject(cls);
                    }
                    return (jclass) class$->this$;
                }

                IceTaggerFacade::IceTaggerFacade(const ::is::iclt::icenlp::core::icetagger::IceTagger$HmmModelType & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_50cf6b0f, a0.this$)) {}

                IceTaggerFacade::IceTaggerFacade(const ::is::iclt::icenlp::core::icetagger::IceTaggerLexicons & a0, const ::is::iclt::icenlp::core::utils::Lexicon & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_6b7ed9f0, a0.this$, a1.this$)) {}

                IceTaggerFacade::IceTaggerFacade(const ::is::iclt::icenlp::core::icetagger::IceTaggerLexicons & a0, const ::is::iclt::icenlp::core::utils::Lexicon & a1, const ::is::iclt::icenlp::core::icetagger::IceTagger$HmmModelType & a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_085c1b5d, a0.this$, a1.this$, a2.this$)) {}

                IceTaggerFacade::IceTaggerFacade(const ::is::iclt::icenlp::core::icetagger::IceTaggerLexicons & a0, const ::is::iclt::icenlp::core::utils::Lexicon & a1, jint a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_3de8f566, a0.this$, a1.this$, a2)) {}

                IceTaggerFacade::IceTaggerFacade(const ::is::iclt::icenlp::core::icetagger::IceTaggerLexicons & a0, const ::is::iclt::icenlp::core::utils::Lexicon & a1, const ::is::iclt::icenlp::core::utils::Lexicon & a2, jboolean a3) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_82a27dcb, a0.this$, a1.this$, a2.this$, a3)) {}

                void IceTaggerFacade::createTriTagger(const ::is::iclt::icenlp::core::tritagger::TriTaggerLexicons & a0) const
                {
                    env->callVoidMethod(this$, mids$[mid_createTriTagger_ad30c87a], a0.this$);
                }

                void IceTaggerFacade::setModelType(const ::is::iclt::icenlp::core::icetagger::IceTagger$HmmModelType & a0) const
                {
                    env->callVoidMethod(this$, mids$[mid_setModelType_50cf6b0f], a0.this$);
                }

                ::is::iclt::icenlp::core::tokenizer::Sentences IceTaggerFacade::tag(const ::java::lang::String & a0) const
                {
                    return ::is::iclt::icenlp::core::tokenizer::Sentences(env->callObjectMethod(this$, mids$[mid_tag_6359824b], a0.this$));
                }

                ::java::lang::String IceTaggerFacade::tagApertium(const ::java::lang::String & a0) const
                {
                    return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_tagApertium_97a5258f], a0.this$));
                }

                ::java::lang::StringBuffer IceTaggerFacade::tagSentence(const ::java::lang::String & a0) const
                {
                    return ::java::lang::StringBuffer(env->callObjectMethod(this$, mids$[mid_tagSentence_2979b2bb], a0.this$));
                }

                void IceTaggerFacade::useTriTagger(jboolean a0) const
                {
                    env->callVoidMethod(this$, mids$[mid_useTriTagger_bb0c767f], a0);
                }

                ::java::lang::String IceTaggerFacade::_get_modelPath() const
                {
                    return ::java::lang::String(env->getObjectField(this$, fids$[fid_modelPath]));
                }

                void IceTaggerFacade::_set_modelPath(const ::java::lang::String & a0) const
                {
                    env->setObjectField(this$, fids$[fid_modelPath], a0.this$);
                }
            }
        }
    }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace is {
    namespace iclt {
        namespace icenlp {
            namespace facade {
                static PyObject *t_IceTaggerFacade_cast_(PyTypeObject *type, PyObject *arg);
                static PyObject *t_IceTaggerFacade_instance_(PyTypeObject *type, PyObject *arg);
                static int t_IceTaggerFacade_init_(t_IceTaggerFacade *self, PyObject *args, PyObject *kwds);
                static PyObject *t_IceTaggerFacade_createTriTagger(t_IceTaggerFacade *self, PyObject *arg);
                static PyObject *t_IceTaggerFacade_setModelType(t_IceTaggerFacade *self, PyObject *arg);
                static PyObject *t_IceTaggerFacade_tag(t_IceTaggerFacade *self, PyObject *arg);
                static PyObject *t_IceTaggerFacade_tagApertium(t_IceTaggerFacade *self, PyObject *arg);
                static PyObject *t_IceTaggerFacade_tagSentence(t_IceTaggerFacade *self, PyObject *arg);
                static PyObject *t_IceTaggerFacade_useTriTagger(t_IceTaggerFacade *self, PyObject *arg);
                static PyObject *t_IceTaggerFacade_get__modelPath(t_IceTaggerFacade *self, void *data);
                static int t_IceTaggerFacade_set__modelPath(t_IceTaggerFacade *self, PyObject *arg, void *data);

                static int t_IceTaggerFacade_set__modelType(t_IceTaggerFacade *self, PyObject *arg, void *data);
                static PyGetSetDef t_IceTaggerFacade__fields_[] = {
                    DECLARE_GETSET_FIELD(t_IceTaggerFacade, modelPath),
                    DECLARE_SET_FIELD(t_IceTaggerFacade, modelType),
                    { NULL, NULL, NULL, NULL, NULL }
                };

                static PyMethodDef t_IceTaggerFacade__methods_[] = {
                    DECLARE_METHOD(t_IceTaggerFacade, cast_, METH_O | METH_CLASS),
                    DECLARE_METHOD(t_IceTaggerFacade, instance_, METH_O | METH_CLASS),
                    DECLARE_METHOD(t_IceTaggerFacade, createTriTagger, METH_O),
                    DECLARE_METHOD(t_IceTaggerFacade, setModelType, METH_O),
                    DECLARE_METHOD(t_IceTaggerFacade, tag, METH_O),
                    DECLARE_METHOD(t_IceTaggerFacade, tagApertium, METH_O),
                    DECLARE_METHOD(t_IceTaggerFacade, tagSentence, METH_O),
                    DECLARE_METHOD(t_IceTaggerFacade, useTriTagger, METH_O),
                    { NULL, NULL, 0, NULL }
                };

                DECLARE_TYPE(IceTaggerFacade, t_IceTaggerFacade, ::java::lang::Object, IceTaggerFacade, t_IceTaggerFacade_init_, 0, 0, t_IceTaggerFacade__fields_, 0, 0);

                void t_IceTaggerFacade::install(PyObject *module)
                {
                    installType(&PY_TYPE(IceTaggerFacade), module, "IceTaggerFacade", 0);
                }

                void t_IceTaggerFacade::initialize(PyObject *module)
                {
                    PyDict_SetItemString(PY_TYPE(IceTaggerFacade).tp_dict, "class_", make_descriptor(IceTaggerFacade::initializeClass, 1));
                    PyDict_SetItemString(PY_TYPE(IceTaggerFacade).tp_dict, "wrapfn_", make_descriptor(t_IceTaggerFacade::wrap_jobject));
                    PyDict_SetItemString(PY_TYPE(IceTaggerFacade).tp_dict, "boxfn_", make_descriptor(boxObject));
                }

                static PyObject *t_IceTaggerFacade_cast_(PyTypeObject *type, PyObject *arg)
                {
                    if (!(arg = castCheck(arg, IceTaggerFacade::initializeClass, 1)))
                        return NULL;
                    return t_IceTaggerFacade::wrap_Object(IceTaggerFacade(((t_IceTaggerFacade *) arg)->object.this$));
                }
                static PyObject *t_IceTaggerFacade_instance_(PyTypeObject *type, PyObject *arg)
                {
                    if (!castCheck(arg, IceTaggerFacade::initializeClass, 0))
                        Py_RETURN_FALSE;
                    Py_RETURN_TRUE;
                }

                static int t_IceTaggerFacade_init_(t_IceTaggerFacade *self, PyObject *args, PyObject *kwds)
                {
                    switch (PyTuple_GET_SIZE(args)) {
                      case 1:
                        {
                            ::is::iclt::icenlp::core::icetagger::IceTagger$HmmModelType a0((jobject) NULL);
                            IceTaggerFacade object((jobject) NULL);

                            if (!parseArgs(args, "k", ::is::iclt::icenlp::core::icetagger::IceTagger$HmmModelType::initializeClass, &a0))
                            {
                                INT_CALL(object = IceTaggerFacade(a0));
                                self->object = object;
                                break;
                            }
                        }
                        goto err;
                      case 2:
                        {
                            ::is::iclt::icenlp::core::icetagger::IceTaggerLexicons a0((jobject) NULL);
                            ::is::iclt::icenlp::core::utils::Lexicon a1((jobject) NULL);
                            IceTaggerFacade object((jobject) NULL);

                            if (!parseArgs(args, "kk", ::is::iclt::icenlp::core::icetagger::IceTaggerLexicons::initializeClass, ::is::iclt::icenlp::core::utils::Lexicon::initializeClass, &a0, &a1))
                            {
                                INT_CALL(object = IceTaggerFacade(a0, a1));
                                self->object = object;
                                break;
                            }
                        }
                        goto err;
                      case 3:
                        {
                            ::is::iclt::icenlp::core::icetagger::IceTaggerLexicons a0((jobject) NULL);
                            ::is::iclt::icenlp::core::utils::Lexicon a1((jobject) NULL);
                            ::is::iclt::icenlp::core::icetagger::IceTagger$HmmModelType a2((jobject) NULL);
                            IceTaggerFacade object((jobject) NULL);

                            if (!parseArgs(args, "kkk", ::is::iclt::icenlp::core::icetagger::IceTaggerLexicons::initializeClass, ::is::iclt::icenlp::core::utils::Lexicon::initializeClass, ::is::iclt::icenlp::core::icetagger::IceTagger$HmmModelType::initializeClass, &a0, &a1, &a2))
                            {
                                INT_CALL(object = IceTaggerFacade(a0, a1, a2));
                                self->object = object;
                                break;
                            }
                        }
                        {
                            ::is::iclt::icenlp::core::icetagger::IceTaggerLexicons a0((jobject) NULL);
                            ::is::iclt::icenlp::core::utils::Lexicon a1((jobject) NULL);
                            jint a2;
                            IceTaggerFacade object((jobject) NULL);

                            if (!parseArgs(args, "kkI", ::is::iclt::icenlp::core::icetagger::IceTaggerLexicons::initializeClass, ::is::iclt::icenlp::core::utils::Lexicon::initializeClass, &a0, &a1, &a2))
                            {
                                INT_CALL(object = IceTaggerFacade(a0, a1, a2));
                                self->object = object;
                                break;
                            }
                        }
                        goto err;
                      case 4:
                        {
                            ::is::iclt::icenlp::core::icetagger::IceTaggerLexicons a0((jobject) NULL);
                            ::is::iclt::icenlp::core::utils::Lexicon a1((jobject) NULL);
                            ::is::iclt::icenlp::core::utils::Lexicon a2((jobject) NULL);
                            jboolean a3;
                            IceTaggerFacade object((jobject) NULL);

                            if (!parseArgs(args, "kkkZ", ::is::iclt::icenlp::core::icetagger::IceTaggerLexicons::initializeClass, ::is::iclt::icenlp::core::utils::Lexicon::initializeClass, ::is::iclt::icenlp::core::utils::Lexicon::initializeClass, &a0, &a1, &a2, &a3))
                            {
                                INT_CALL(object = IceTaggerFacade(a0, a1, a2, a3));
                                self->object = object;
                                break;
                            }
                        }
                      default:
                      err:
                        PyErr_SetArgsError((PyObject *) self, "__init__", args);
                        return -1;
                    }

                    return 0;
                }

                static PyObject *t_IceTaggerFacade_createTriTagger(t_IceTaggerFacade *self, PyObject *arg)
                {
                    ::is::iclt::icenlp::core::tritagger::TriTaggerLexicons a0((jobject) NULL);

                    if (!parseArg(arg, "k", ::is::iclt::icenlp::core::tritagger::TriTaggerLexicons::initializeClass, &a0))
                    {
                        OBJ_CALL(self->object.createTriTagger(a0));
                        Py_RETURN_NONE;
                    }

                    PyErr_SetArgsError((PyObject *) self, "createTriTagger", arg);
                    return NULL;
                }

                static PyObject *t_IceTaggerFacade_setModelType(t_IceTaggerFacade *self, PyObject *arg)
                {
                    ::is::iclt::icenlp::core::icetagger::IceTagger$HmmModelType a0((jobject) NULL);

                    if (!parseArg(arg, "k", ::is::iclt::icenlp::core::icetagger::IceTagger$HmmModelType::initializeClass, &a0))
                    {
                        OBJ_CALL(self->object.setModelType(a0));
                        Py_RETURN_NONE;
                    }

                    PyErr_SetArgsError((PyObject *) self, "setModelType", arg);
                    return NULL;
                }

                static PyObject *t_IceTaggerFacade_tag(t_IceTaggerFacade *self, PyObject *arg)
                {
                    ::java::lang::String a0((jobject) NULL);
                    ::is::iclt::icenlp::core::tokenizer::Sentences result((jobject) NULL);

                    if (!parseArg(arg, "s", &a0))
                    {
                        OBJ_CALL(result = self->object.tag(a0));
                        return ::is::iclt::icenlp::core::tokenizer::t_Sentences::wrap_Object(result);
                    }

                    PyErr_SetArgsError((PyObject *) self, "tag", arg);
                    return NULL;
                }

                static PyObject *t_IceTaggerFacade_tagApertium(t_IceTaggerFacade *self, PyObject *arg)
                {
                    ::java::lang::String a0((jobject) NULL);
                    ::java::lang::String result((jobject) NULL);

                    if (!parseArg(arg, "s", &a0))
                    {
                        OBJ_CALL(result = self->object.tagApertium(a0));
                        return j2p(result);
                    }

                    PyErr_SetArgsError((PyObject *) self, "tagApertium", arg);
                    return NULL;
                }

                static PyObject *t_IceTaggerFacade_tagSentence(t_IceTaggerFacade *self, PyObject *arg)
                {
                    ::java::lang::String a0((jobject) NULL);
                    ::java::lang::StringBuffer result((jobject) NULL);

                    if (!parseArg(arg, "s", &a0))
                    {
                        OBJ_CALL(result = self->object.tagSentence(a0));
                        return ::java::lang::t_StringBuffer::wrap_Object(result);
                    }

                    PyErr_SetArgsError((PyObject *) self, "tagSentence", arg);
                    return NULL;
                }

                static PyObject *t_IceTaggerFacade_useTriTagger(t_IceTaggerFacade *self, PyObject *arg)
                {
                    jboolean a0;

                    if (!parseArg(arg, "Z", &a0))
                    {
                        OBJ_CALL(self->object.useTriTagger(a0));
                        Py_RETURN_NONE;
                    }

                    PyErr_SetArgsError((PyObject *) self, "useTriTagger", arg);
                    return NULL;
                }

                static PyObject *t_IceTaggerFacade_get__modelPath(t_IceTaggerFacade *self, void *data)
                {
                    ::java::lang::String value((jobject) NULL);
                    OBJ_CALL(value = self->object._get_modelPath());
                    return j2p(value);
                }
                static int t_IceTaggerFacade_set__modelPath(t_IceTaggerFacade *self, PyObject *arg, void *data)
                {
                    ::java::lang::String value((jobject) NULL);
                    if (!parseArg(arg, "s", &value))
                    {
                        INT_CALL(self->object._set_modelPath(value));
                        return 0;
                    }
                    PyErr_SetArgsError((PyObject *) self, "modelPath", arg);
                    return -1;
                }

                static int t_IceTaggerFacade_set__modelType(t_IceTaggerFacade *self, PyObject *arg, void *data)
                {
                    {
                        ::is::iclt::icenlp::core::icetagger::IceTagger$HmmModelType value((jobject) NULL);
                        if (!parseArg(arg, "k", ::is::iclt::icenlp::core::icetagger::IceTagger$HmmModelType::initializeClass, &value))
                        {
                            INT_CALL(self->object.setModelType(value));
                            return 0;
                        }
                    }
                    PyErr_SetArgsError((PyObject *) self, "modelType", arg);
                    return -1;
                }
            }
        }
    }
}
#include <jni.h>
#include "JCCEnv.h"
#include "is/iclt/icenlp/core/iceNER/NameSearcher.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace is {
    namespace iclt {
        namespace icenlp {
            namespace core {
                namespace iceNER {

                    ::java::lang::Class *NameSearcher::class$ = NULL;
                    jmethodID *NameSearcher::mids$ = NULL;

                    jclass NameSearcher::initializeClass()
                    {
                        if (!class$)
                        {

                            jclass cls = (jclass) env->findClass("is/iclt/icenlp/core/iceNER/NameSearcher");

                            mids$ = new jmethodID[max_mid];
                            mids$[mid_init$_bb0c767f] = env->getMethodID(cls, "<init>", "(Z)V");
                            mids$[mid_init$_aa079ca4] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;ILjava/lang/String;ILjava/lang/String;)V");
                            mids$[mid_init$_b91b375c] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;ILjava/lang/String;ILjava/lang/String;Ljava/lang/String;I)V");
                            mids$[mid_cleanup_54c6a166] = env->getMethodID(cls, "cleanup", "()V");
                            mids$[mid_cleanupPersons_54c6a166] = env->getMethodID(cls, "cleanupPersons", "()V");
                            mids$[mid_completePartlyFoundNames_54c6a166] = env->getMethodID(cls, "completePartlyFoundNames", "()V");
                            mids$[mid_findCompanyByLocation_54c6a166] = env->getMethodID(cls, "findCompanyByLocation", "()V");
                            mids$[mid_findFromAction_54c6a166] = env->getMethodID(cls, "findFromAction", "()V");
                            mids$[mid_findFromCapitalLetters_54c6a166] = env->getMethodID(cls, "findFromCapitalLetters", "()V");
                            mids$[mid_findFromInitilas_54c6a166] = env->getMethodID(cls, "findFromInitilas", "()V");
                            mids$[mid_findFromRole_54c6a166] = env->getMethodID(cls, "findFromRole", "()V");
                            mids$[mid_findLocationsFromAdverb_54c6a166] = env->getMethodID(cls, "findLocationsFromAdverb", "()V");
                            mids$[mid_findPersonByAge_54c6a166] = env->getMethodID(cls, "findPersonByAge", "()V");
                            mids$[mid_findPersonFromLocation_54c6a166] = env->getMethodID(cls, "findPersonFromLocation", "()V");
                            mids$[mid_findPersonFromRole_54c6a166] = env->getMethodID(cls, "findPersonFromRole", "()V");
                            mids$[mid_fixCompanyLocation_54c6a166] = env->getMethodID(cls, "fixCompanyLocation", "()V");
                            mids$[mid_fixPersonNames_54c6a166] = env->getMethodID(cls, "fixPersonNames", "()V");
                            mids$[mid_getNameTag_97a5258f] = env->getMethodID(cls, "getNameTag", "(Ljava/lang/String;)Ljava/lang/String;");
                            mids$[mid_getRoleTag_97a5258f] = env->getMethodID(cls, "getRoleTag", "(Ljava/lang/String;)Ljava/lang/String;");
                            mids$[mid_indexNamedEntity_54c6a166] = env->getMethodID(cls, "indexNamedEntity", "()V");
                            mids$[mid_listAllIndexedNames_54c6a166] = env->getMethodID(cls, "listAllIndexedNames", "()V");
                            mids$[mid_loadNameHash_4a264742] = env->getMethodID(cls, "loadNameHash", "(Ljava/lang/String;Ljava/lang/String;)V");
                            mids$[mid_loadRoleHash_4a264742] = env->getMethodID(cls, "loadRoleHash", "(Ljava/lang/String;Ljava/lang/String;)V");
                            mids$[mid_loadScannerFile_6e53ccca] = env->getMethodID(cls, "loadScannerFile", "(Ljava/lang/String;I)Z");
                            mids$[mid_loadSearcher_aa079ca4] = env->getMethodID(cls, "loadSearcher", "(Ljava/lang/String;ILjava/lang/String;ILjava/lang/String;)V");
                            mids$[mid_loadSearcher_b91b375c] = env->getMethodID(cls, "loadSearcher", "(Ljava/lang/String;ILjava/lang/String;ILjava/lang/String;Ljava/lang/String;I)V");
                            mids$[mid_loadTaggedFile_6e53ccca] = env->getMethodID(cls, "loadTaggedFile", "(Ljava/lang/String;I)Z");
                            mids$[mid_looForPairs_54c6a166] = env->getMethodID(cls, "looForPairs", "()V");
                            mids$[mid_lookForAdjectiveInName_54c6a166] = env->getMethodID(cls, "lookForAdjectiveInName", "()V");
                            mids$[mid_lookForDifferentCases_54c6a166] = env->getMethodID(cls, "lookForDifferentCases", "()V");
                            mids$[mid_lookForListings_54c6a166] = env->getMethodID(cls, "lookForListings", "()V");
                            mids$[mid_lookForMissedCompanies_54c6a166] = env->getMethodID(cls, "lookForMissedCompanies", "()V");
                            mids$[mid_lookForNounInName_54c6a166] = env->getMethodID(cls, "lookForNounInName", "()V");
                            mids$[mid_lookForUnmatchedFromHash_54c6a166] = env->getMethodID(cls, "lookForUnmatchedFromHash", "()V");
                            mids$[mid_lookForUnmatchedFromRole_54c6a166] = env->getMethodID(cls, "lookForUnmatchedFromRole", "()V");
                            mids$[mid_markFromHash_bb0c767f] = env->getMethodID(cls, "markFromHash", "(Z)V");
                            mids$[mid_markMiscEntities_54c6a166] = env->getMethodID(cls, "markMiscEntities", "()V");
                            mids$[mid_nameHashcontains_5fdc3f44] = env->getMethodID(cls, "nameHashcontains", "(Ljava/lang/String;)Z");
                            mids$[mid_overwriteNameHash_4a264742] = env->getMethodID(cls, "overwriteNameHash", "(Ljava/lang/String;Ljava/lang/String;)V");
                            mids$[mid_printIndexList_54c6a166] = env->getMethodID(cls, "printIndexList", "()V");
                            mids$[mid_printMarkedText_54c6a166] = env->getMethodID(cls, "printMarkedText", "()V");
                            mids$[mid_printNameHash_54c6a166] = env->getMethodID(cls, "printNameHash", "()V");
                            mids$[mid_printRoleHash_54c6a166] = env->getMethodID(cls, "printRoleHash", "()V");
                            mids$[mid_roleHashContains_5fdc3f44] = env->getMethodID(cls, "roleHashContains", "(Ljava/lang/String;)Z");

                            class$ = (::java::lang::Class *) new JObject(cls);
                        }
                        return (jclass) class$->this$;
                    }

                    NameSearcher::NameSearcher(jboolean a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_bb0c767f, a0)) {}

                    NameSearcher::NameSearcher(const ::java::lang::String & a0, jint a1, const ::java::lang::String & a2, jint a3, const ::java::lang::String & a4) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_aa079ca4, a0.this$, a1, a2.this$, a3, a4.this$)) {}

                    NameSearcher::NameSearcher(const ::java::lang::String & a0, jint a1, const ::java::lang::String & a2, jint a3, const ::java::lang::String & a4, const ::java::lang::String & a5, jint a6) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_b91b375c, a0.this$, a1, a2.this$, a3, a4.this$, a5.this$, a6)) {}

                    void NameSearcher::cleanup() const
                    {
                        env->callVoidMethod(this$, mids$[mid_cleanup_54c6a166]);
                    }

                    void NameSearcher::cleanupPersons() const
                    {
                        env->callVoidMethod(this$, mids$[mid_cleanupPersons_54c6a166]);
                    }

                    void NameSearcher::completePartlyFoundNames() const
                    {
                        env->callVoidMethod(this$, mids$[mid_completePartlyFoundNames_54c6a166]);
                    }

                    void NameSearcher::findCompanyByLocation() const
                    {
                        env->callVoidMethod(this$, mids$[mid_findCompanyByLocation_54c6a166]);
                    }

                    void NameSearcher::findFromAction() const
                    {
                        env->callVoidMethod(this$, mids$[mid_findFromAction_54c6a166]);
                    }

                    void NameSearcher::findFromCapitalLetters() const
                    {
                        env->callVoidMethod(this$, mids$[mid_findFromCapitalLetters_54c6a166]);
                    }

                    void NameSearcher::findFromInitilas() const
                    {
                        env->callVoidMethod(this$, mids$[mid_findFromInitilas_54c6a166]);
                    }

                    void NameSearcher::findFromRole() const
                    {
                        env->callVoidMethod(this$, mids$[mid_findFromRole_54c6a166]);
                    }

                    void NameSearcher::findLocationsFromAdverb() const
                    {
                        env->callVoidMethod(this$, mids$[mid_findLocationsFromAdverb_54c6a166]);
                    }

                    void NameSearcher::findPersonByAge() const
                    {
                        env->callVoidMethod(this$, mids$[mid_findPersonByAge_54c6a166]);
                    }

                    void NameSearcher::findPersonFromLocation() const
                    {
                        env->callVoidMethod(this$, mids$[mid_findPersonFromLocation_54c6a166]);
                    }

                    void NameSearcher::findPersonFromRole() const
                    {
                        env->callVoidMethod(this$, mids$[mid_findPersonFromRole_54c6a166]);
                    }

                    void NameSearcher::fixCompanyLocation() const
                    {
                        env->callVoidMethod(this$, mids$[mid_fixCompanyLocation_54c6a166]);
                    }

                    void NameSearcher::fixPersonNames() const
                    {
                        env->callVoidMethod(this$, mids$[mid_fixPersonNames_54c6a166]);
                    }

                    ::java::lang::String NameSearcher::getNameTag(const ::java::lang::String & a0) const
                    {
                        return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getNameTag_97a5258f], a0.this$));
                    }

                    ::java::lang::String NameSearcher::getRoleTag(const ::java::lang::String & a0) const
                    {
                        return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getRoleTag_97a5258f], a0.this$));
                    }

                    void NameSearcher::indexNamedEntity() const
                    {
                        env->callVoidMethod(this$, mids$[mid_indexNamedEntity_54c6a166]);
                    }

                    void NameSearcher::listAllIndexedNames() const
                    {
                        env->callVoidMethod(this$, mids$[mid_listAllIndexedNames_54c6a166]);
                    }

                    void NameSearcher::loadNameHash(const ::java::lang::String & a0, const ::java::lang::String & a1) const
                    {
                        env->callVoidMethod(this$, mids$[mid_loadNameHash_4a264742], a0.this$, a1.this$);
                    }

                    void NameSearcher::loadRoleHash(const ::java::lang::String & a0, const ::java::lang::String & a1) const
                    {
                        env->callVoidMethod(this$, mids$[mid_loadRoleHash_4a264742], a0.this$, a1.this$);
                    }

                    jboolean NameSearcher::loadScannerFile(const ::java::lang::String & a0, jint a1) const
                    {
                        return env->callBooleanMethod(this$, mids$[mid_loadScannerFile_6e53ccca], a0.this$, a1);
                    }

                    void NameSearcher::loadSearcher(const ::java::lang::String & a0, jint a1, const ::java::lang::String & a2, jint a3, const ::java::lang::String & a4) const
                    {
                        env->callVoidMethod(this$, mids$[mid_loadSearcher_aa079ca4], a0.this$, a1, a2.this$, a3, a4.this$);
                    }

                    void NameSearcher::loadSearcher(const ::java::lang::String & a0, jint a1, const ::java::lang::String & a2, jint a3, const ::java::lang::String & a4, const ::java::lang::String & a5, jint a6) const
                    {
                        env->callVoidMethod(this$, mids$[mid_loadSearcher_b91b375c], a0.this$, a1, a2.this$, a3, a4.this$, a5.this$, a6);
                    }

                    jboolean NameSearcher::loadTaggedFile(const ::java::lang::String & a0, jint a1) const
                    {
                        return env->callBooleanMethod(this$, mids$[mid_loadTaggedFile_6e53ccca], a0.this$, a1);
                    }

                    void NameSearcher::looForPairs() const
                    {
                        env->callVoidMethod(this$, mids$[mid_looForPairs_54c6a166]);
                    }

                    void NameSearcher::lookForAdjectiveInName() const
                    {
                        env->callVoidMethod(this$, mids$[mid_lookForAdjectiveInName_54c6a166]);
                    }

                    void NameSearcher::lookForDifferentCases() const
                    {
                        env->callVoidMethod(this$, mids$[mid_lookForDifferentCases_54c6a166]);
                    }

                    void NameSearcher::lookForListings() const
                    {
                        env->callVoidMethod(this$, mids$[mid_lookForListings_54c6a166]);
                    }

                    void NameSearcher::lookForMissedCompanies() const
                    {
                        env->callVoidMethod(this$, mids$[mid_lookForMissedCompanies_54c6a166]);
                    }

                    void NameSearcher::lookForNounInName() const
                    {
                        env->callVoidMethod(this$, mids$[mid_lookForNounInName_54c6a166]);
                    }

                    void NameSearcher::lookForUnmatchedFromHash() const
                    {
                        env->callVoidMethod(this$, mids$[mid_lookForUnmatchedFromHash_54c6a166]);
                    }

                    void NameSearcher::lookForUnmatchedFromRole() const
                    {
                        env->callVoidMethod(this$, mids$[mid_lookForUnmatchedFromRole_54c6a166]);
                    }

                    void NameSearcher::markFromHash(jboolean a0) const
                    {
                        env->callVoidMethod(this$, mids$[mid_markFromHash_bb0c767f], a0);
                    }

                    void NameSearcher::markMiscEntities() const
                    {
                        env->callVoidMethod(this$, mids$[mid_markMiscEntities_54c6a166]);
                    }

                    jboolean NameSearcher::nameHashcontains(const ::java::lang::String & a0) const
                    {
                        return env->callBooleanMethod(this$, mids$[mid_nameHashcontains_5fdc3f44], a0.this$);
                    }

                    void NameSearcher::overwriteNameHash(const ::java::lang::String & a0, const ::java::lang::String & a1) const
                    {
                        env->callVoidMethod(this$, mids$[mid_overwriteNameHash_4a264742], a0.this$, a1.this$);
                    }

                    void NameSearcher::printIndexList() const
                    {
                        env->callVoidMethod(this$, mids$[mid_printIndexList_54c6a166]);
                    }

                    void NameSearcher::printMarkedText() const
                    {
                        env->callVoidMethod(this$, mids$[mid_printMarkedText_54c6a166]);
                    }

                    void NameSearcher::printNameHash() const
                    {
                        env->callVoidMethod(this$, mids$[mid_printNameHash_54c6a166]);
                    }

                    void NameSearcher::printRoleHash() const
                    {
                        env->callVoidMethod(this$, mids$[mid_printRoleHash_54c6a166]);
                    }

                    jboolean NameSearcher::roleHashContains(const ::java::lang::String & a0) const
                    {
                        return env->callBooleanMethod(this$, mids$[mid_roleHashContains_5fdc3f44], a0.this$);
                    }
                }
            }
        }
    }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"
#include "is/iclt/icenlp/core/iceNER/NameSearcher$Role.h"

namespace is {
    namespace iclt {
        namespace icenlp {
            namespace core {
                namespace iceNER {
                    static PyObject *t_NameSearcher_cast_(PyTypeObject *type, PyObject *arg);
                    static PyObject *t_NameSearcher_instance_(PyTypeObject *type, PyObject *arg);
                    static int t_NameSearcher_init_(t_NameSearcher *self, PyObject *args, PyObject *kwds);
                    static PyObject *t_NameSearcher_cleanup(t_NameSearcher *self);
                    static PyObject *t_NameSearcher_cleanupPersons(t_NameSearcher *self);
                    static PyObject *t_NameSearcher_completePartlyFoundNames(t_NameSearcher *self);
                    static PyObject *t_NameSearcher_findCompanyByLocation(t_NameSearcher *self);
                    static PyObject *t_NameSearcher_findFromAction(t_NameSearcher *self);
                    static PyObject *t_NameSearcher_findFromCapitalLetters(t_NameSearcher *self);
                    static PyObject *t_NameSearcher_findFromInitilas(t_NameSearcher *self);
                    static PyObject *t_NameSearcher_findFromRole(t_NameSearcher *self);
                    static PyObject *t_NameSearcher_findLocationsFromAdverb(t_NameSearcher *self);
                    static PyObject *t_NameSearcher_findPersonByAge(t_NameSearcher *self);
                    static PyObject *t_NameSearcher_findPersonFromLocation(t_NameSearcher *self);
                    static PyObject *t_NameSearcher_findPersonFromRole(t_NameSearcher *self);
                    static PyObject *t_NameSearcher_fixCompanyLocation(t_NameSearcher *self);
                    static PyObject *t_NameSearcher_fixPersonNames(t_NameSearcher *self);
                    static PyObject *t_NameSearcher_getNameTag(t_NameSearcher *self, PyObject *arg);
                    static PyObject *t_NameSearcher_getRoleTag(t_NameSearcher *self, PyObject *arg);
                    static PyObject *t_NameSearcher_indexNamedEntity(t_NameSearcher *self);
                    static PyObject *t_NameSearcher_listAllIndexedNames(t_NameSearcher *self);
                    static PyObject *t_NameSearcher_loadNameHash(t_NameSearcher *self, PyObject *args);
                    static PyObject *t_NameSearcher_loadRoleHash(t_NameSearcher *self, PyObject *args);
                    static PyObject *t_NameSearcher_loadScannerFile(t_NameSearcher *self, PyObject *args);
                    static PyObject *t_NameSearcher_loadSearcher(t_NameSearcher *self, PyObject *args);
                    static PyObject *t_NameSearcher_loadTaggedFile(t_NameSearcher *self, PyObject *args);
                    static PyObject *t_NameSearcher_looForPairs(t_NameSearcher *self);
                    static PyObject *t_NameSearcher_lookForAdjectiveInName(t_NameSearcher *self);
                    static PyObject *t_NameSearcher_lookForDifferentCases(t_NameSearcher *self);
                    static PyObject *t_NameSearcher_lookForListings(t_NameSearcher *self);
                    static PyObject *t_NameSearcher_lookForMissedCompanies(t_NameSearcher *self);
                    static PyObject *t_NameSearcher_lookForNounInName(t_NameSearcher *self);
                    static PyObject *t_NameSearcher_lookForUnmatchedFromHash(t_NameSearcher *self);
                    static PyObject *t_NameSearcher_lookForUnmatchedFromRole(t_NameSearcher *self);
                    static PyObject *t_NameSearcher_markFromHash(t_NameSearcher *self, PyObject *arg);
                    static PyObject *t_NameSearcher_markMiscEntities(t_NameSearcher *self);
                    static PyObject *t_NameSearcher_nameHashcontains(t_NameSearcher *self, PyObject *arg);
                    static PyObject *t_NameSearcher_overwriteNameHash(t_NameSearcher *self, PyObject *args);
                    static PyObject *t_NameSearcher_printIndexList(t_NameSearcher *self);
                    static PyObject *t_NameSearcher_printMarkedText(t_NameSearcher *self);
                    static PyObject *t_NameSearcher_printNameHash(t_NameSearcher *self);
                    static PyObject *t_NameSearcher_printRoleHash(t_NameSearcher *self);
                    static PyObject *t_NameSearcher_roleHashContains(t_NameSearcher *self, PyObject *arg);

                    static PyMethodDef t_NameSearcher__methods_[] = {
                        DECLARE_METHOD(t_NameSearcher, cast_, METH_O | METH_CLASS),
                        DECLARE_METHOD(t_NameSearcher, instance_, METH_O | METH_CLASS),
                        DECLARE_METHOD(t_NameSearcher, cleanup, METH_NOARGS),
                        DECLARE_METHOD(t_NameSearcher, cleanupPersons, METH_NOARGS),
                        DECLARE_METHOD(t_NameSearcher, completePartlyFoundNames, METH_NOARGS),
                        DECLARE_METHOD(t_NameSearcher, findCompanyByLocation, METH_NOARGS),
                        DECLARE_METHOD(t_NameSearcher, findFromAction, METH_NOARGS),
                        DECLARE_METHOD(t_NameSearcher, findFromCapitalLetters, METH_NOARGS),
                        DECLARE_METHOD(t_NameSearcher, findFromInitilas, METH_NOARGS),
                        DECLARE_METHOD(t_NameSearcher, findFromRole, METH_NOARGS),
                        DECLARE_METHOD(t_NameSearcher, findLocationsFromAdverb, METH_NOARGS),
                        DECLARE_METHOD(t_NameSearcher, findPersonByAge, METH_NOARGS),
                        DECLARE_METHOD(t_NameSearcher, findPersonFromLocation, METH_NOARGS),
                        DECLARE_METHOD(t_NameSearcher, findPersonFromRole, METH_NOARGS),
                        DECLARE_METHOD(t_NameSearcher, fixCompanyLocation, METH_NOARGS),
                        DECLARE_METHOD(t_NameSearcher, fixPersonNames, METH_NOARGS),
                        DECLARE_METHOD(t_NameSearcher, getNameTag, METH_O),
                        DECLARE_METHOD(t_NameSearcher, getRoleTag, METH_O),
                        DECLARE_METHOD(t_NameSearcher, indexNamedEntity, METH_NOARGS),
                        DECLARE_METHOD(t_NameSearcher, listAllIndexedNames, METH_NOARGS),
                        DECLARE_METHOD(t_NameSearcher, loadNameHash, METH_VARARGS),
                        DECLARE_METHOD(t_NameSearcher, loadRoleHash, METH_VARARGS),
                        DECLARE_METHOD(t_NameSearcher, loadScannerFile, METH_VARARGS),
                        DECLARE_METHOD(t_NameSearcher, loadSearcher, METH_VARARGS),
                        DECLARE_METHOD(t_NameSearcher, loadTaggedFile, METH_VARARGS),
                        DECLARE_METHOD(t_NameSearcher, looForPairs, METH_NOARGS),
                        DECLARE_METHOD(t_NameSearcher, lookForAdjectiveInName, METH_NOARGS),
                        DECLARE_METHOD(t_NameSearcher, lookForDifferentCases, METH_NOARGS),
                        DECLARE_METHOD(t_NameSearcher, lookForListings, METH_NOARGS),
                        DECLARE_METHOD(t_NameSearcher, lookForMissedCompanies, METH_NOARGS),
                        DECLARE_METHOD(t_NameSearcher, lookForNounInName, METH_NOARGS),
                        DECLARE_METHOD(t_NameSearcher, lookForUnmatchedFromHash, METH_NOARGS),
                        DECLARE_METHOD(t_NameSearcher, lookForUnmatchedFromRole, METH_NOARGS),
                        DECLARE_METHOD(t_NameSearcher, markFromHash, METH_O),
                        DECLARE_METHOD(t_NameSearcher, markMiscEntities, METH_NOARGS),
                        DECLARE_METHOD(t_NameSearcher, nameHashcontains, METH_O),
                        DECLARE_METHOD(t_NameSearcher, overwriteNameHash, METH_VARARGS),
                        DECLARE_METHOD(t_NameSearcher, printIndexList, METH_NOARGS),
                        DECLARE_METHOD(t_NameSearcher, printMarkedText, METH_NOARGS),
                        DECLARE_METHOD(t_NameSearcher, printNameHash, METH_NOARGS),
                        DECLARE_METHOD(t_NameSearcher, printRoleHash, METH_NOARGS),
                        DECLARE_METHOD(t_NameSearcher, roleHashContains, METH_O),
                        { NULL, NULL, 0, NULL }
                    };

                    DECLARE_TYPE(NameSearcher, t_NameSearcher, ::java::lang::Object, NameSearcher, t_NameSearcher_init_, 0, 0, 0, 0, 0);

                    void t_NameSearcher::install(PyObject *module)
                    {
                        installType(&PY_TYPE(NameSearcher), module, "NameSearcher", 0);
                        PyDict_SetItemString(PY_TYPE(NameSearcher).tp_dict, "Role", make_descriptor(&PY_TYPE(NameSearcher$Role)));
                    }

                    void t_NameSearcher::initialize(PyObject *module)
                    {
                        PyDict_SetItemString(PY_TYPE(NameSearcher).tp_dict, "class_", make_descriptor(NameSearcher::initializeClass, 1));
                        PyDict_SetItemString(PY_TYPE(NameSearcher).tp_dict, "wrapfn_", make_descriptor(t_NameSearcher::wrap_jobject));
                        PyDict_SetItemString(PY_TYPE(NameSearcher).tp_dict, "boxfn_", make_descriptor(boxObject));
                    }

                    static PyObject *t_NameSearcher_cast_(PyTypeObject *type, PyObject *arg)
                    {
                        if (!(arg = castCheck(arg, NameSearcher::initializeClass, 1)))
                            return NULL;
                        return t_NameSearcher::wrap_Object(NameSearcher(((t_NameSearcher *) arg)->object.this$));
                    }
                    static PyObject *t_NameSearcher_instance_(PyTypeObject *type, PyObject *arg)
                    {
                        if (!castCheck(arg, NameSearcher::initializeClass, 0))
                            Py_RETURN_FALSE;
                        Py_RETURN_TRUE;
                    }

                    static int t_NameSearcher_init_(t_NameSearcher *self, PyObject *args, PyObject *kwds)
                    {
                        switch (PyTuple_GET_SIZE(args)) {
                          case 1:
                            {
                                jboolean a0;
                                NameSearcher object((jobject) NULL);

                                if (!parseArgs(args, "Z", &a0))
                                {
                                    INT_CALL(object = NameSearcher(a0));
                                    self->object = object;
                                    break;
                                }
                            }
                            goto err;
                          case 5:
                            {
                                ::java::lang::String a0((jobject) NULL);
                                jint a1;
                                ::java::lang::String a2((jobject) NULL);
                                jint a3;
                                ::java::lang::String a4((jobject) NULL);
                                NameSearcher object((jobject) NULL);

                                if (!parseArgs(args, "sIsIs", &a0, &a1, &a2, &a3, &a4))
                                {
                                    INT_CALL(object = NameSearcher(a0, a1, a2, a3, a4));
                                    self->object = object;
                                    break;
                                }
                            }
                            goto err;
                          case 7:
                            {
                                ::java::lang::String a0((jobject) NULL);
                                jint a1;
                                ::java::lang::String a2((jobject) NULL);
                                jint a3;
                                ::java::lang::String a4((jobject) NULL);
                                ::java::lang::String a5((jobject) NULL);
                                jint a6;
                                NameSearcher object((jobject) NULL);

                                if (!parseArgs(args, "sIsIssI", &a0, &a1, &a2, &a3, &a4, &a5, &a6))
                                {
                                    INT_CALL(object = NameSearcher(a0, a1, a2, a3, a4, a5, a6));
                                    self->object = object;
                                    break;
                                }
                            }
                          default:
                          err:
                            PyErr_SetArgsError((PyObject *) self, "__init__", args);
                            return -1;
                        }

                        return 0;
                    }

                    static PyObject *t_NameSearcher_cleanup(t_NameSearcher *self)
                    {
                        OBJ_CALL(self->object.cleanup());
                        Py_RETURN_NONE;
                    }

                    static PyObject *t_NameSearcher_cleanupPersons(t_NameSearcher *self)
                    {
                        OBJ_CALL(self->object.cleanupPersons());
                        Py_RETURN_NONE;
                    }

                    static PyObject *t_NameSearcher_completePartlyFoundNames(t_NameSearcher *self)
                    {
                        OBJ_CALL(self->object.completePartlyFoundNames());
                        Py_RETURN_NONE;
                    }

                    static PyObject *t_NameSearcher_findCompanyByLocation(t_NameSearcher *self)
                    {
                        OBJ_CALL(self->object.findCompanyByLocation());
                        Py_RETURN_NONE;
                    }

                    static PyObject *t_NameSearcher_findFromAction(t_NameSearcher *self)
                    {
                        OBJ_CALL(self->object.findFromAction());
                        Py_RETURN_NONE;
                    }

                    static PyObject *t_NameSearcher_findFromCapitalLetters(t_NameSearcher *self)
                    {
                        OBJ_CALL(self->object.findFromCapitalLetters());
                        Py_RETURN_NONE;
                    }

                    static PyObject *t_NameSearcher_findFromInitilas(t_NameSearcher *self)
                    {
                        OBJ_CALL(self->object.findFromInitilas());
                        Py_RETURN_NONE;
                    }

                    static PyObject *t_NameSearcher_findFromRole(t_NameSearcher *self)
                    {
                        OBJ_CALL(self->object.findFromRole());
                        Py_RETURN_NONE;
                    }

                    static PyObject *t_NameSearcher_findLocationsFromAdverb(t_NameSearcher *self)
                    {
                        OBJ_CALL(self->object.findLocationsFromAdverb());
                        Py_RETURN_NONE;
                    }

                    static PyObject *t_NameSearcher_findPersonByAge(t_NameSearcher *self)
                    {
                        OBJ_CALL(self->object.findPersonByAge());
                        Py_RETURN_NONE;
                    }

                    static PyObject *t_NameSearcher_findPersonFromLocation(t_NameSearcher *self)
                    {
                        OBJ_CALL(self->object.findPersonFromLocation());
                        Py_RETURN_NONE;
                    }

                    static PyObject *t_NameSearcher_findPersonFromRole(t_NameSearcher *self)
                    {
                        OBJ_CALL(self->object.findPersonFromRole());
                        Py_RETURN_NONE;
                    }

                    static PyObject *t_NameSearcher_fixCompanyLocation(t_NameSearcher *self)
                    {
                        OBJ_CALL(self->object.fixCompanyLocation());
                        Py_RETURN_NONE;
                    }

                    static PyObject *t_NameSearcher_fixPersonNames(t_NameSearcher *self)
                    {
                        OBJ_CALL(self->object.fixPersonNames());
                        Py_RETURN_NONE;
                    }

                    static PyObject *t_NameSearcher_getNameTag(t_NameSearcher *self, PyObject *arg)
                    {
                        ::java::lang::String a0((jobject) NULL);
                        ::java::lang::String result((jobject) NULL);

                        if (!parseArg(arg, "s", &a0))
                        {
                            OBJ_CALL(result = self->object.getNameTag(a0));
                            return j2p(result);
                        }

                        PyErr_SetArgsError((PyObject *) self, "getNameTag", arg);
                        return NULL;
                    }

                    static PyObject *t_NameSearcher_getRoleTag(t_NameSearcher *self, PyObject *arg)
                    {
                        ::java::lang::String a0((jobject) NULL);
                        ::java::lang::String result((jobject) NULL);

                        if (!parseArg(arg, "s", &a0))
                        {
                            OBJ_CALL(result = self->object.getRoleTag(a0));
                            return j2p(result);
                        }

                        PyErr_SetArgsError((PyObject *) self, "getRoleTag", arg);
                        return NULL;
                    }

                    static PyObject *t_NameSearcher_indexNamedEntity(t_NameSearcher *self)
                    {
                        OBJ_CALL(self->object.indexNamedEntity());
                        Py_RETURN_NONE;
                    }

                    static PyObject *t_NameSearcher_listAllIndexedNames(t_NameSearcher *self)
                    {
                        OBJ_CALL(self->object.listAllIndexedNames());
                        Py_RETURN_NONE;
                    }

                    static PyObject *t_NameSearcher_loadNameHash(t_NameSearcher *self, PyObject *args)
                    {
                        ::java::lang::String a0((jobject) NULL);
                        ::java::lang::String a1((jobject) NULL);

                        if (!parseArgs(args, "ss", &a0, &a1))
                        {
                            OBJ_CALL(self->object.loadNameHash(a0, a1));
                            Py_RETURN_NONE;
                        }

                        PyErr_SetArgsError((PyObject *) self, "loadNameHash", args);
                        return NULL;
                    }

                    static PyObject *t_NameSearcher_loadRoleHash(t_NameSearcher *self, PyObject *args)
                    {
                        ::java::lang::String a0((jobject) NULL);
                        ::java::lang::String a1((jobject) NULL);

                        if (!parseArgs(args, "ss", &a0, &a1))
                        {
                            OBJ_CALL(self->object.loadRoleHash(a0, a1));
                            Py_RETURN_NONE;
                        }

                        PyErr_SetArgsError((PyObject *) self, "loadRoleHash", args);
                        return NULL;
                    }

                    static PyObject *t_NameSearcher_loadScannerFile(t_NameSearcher *self, PyObject *args)
                    {
                        ::java::lang::String a0((jobject) NULL);
                        jint a1;
                        jboolean result;

                        if (!parseArgs(args, "sI", &a0, &a1))
                        {
                            OBJ_CALL(result = self->object.loadScannerFile(a0, a1));
                            Py_RETURN_BOOL(result);
                        }

                        PyErr_SetArgsError((PyObject *) self, "loadScannerFile", args);
                        return NULL;
                    }

                    static PyObject *t_NameSearcher_loadSearcher(t_NameSearcher *self, PyObject *args)
                    {
                        switch (PyTuple_GET_SIZE(args)) {
                          case 5:
                            {
                                ::java::lang::String a0((jobject) NULL);
                                jint a1;
                                ::java::lang::String a2((jobject) NULL);
                                jint a3;
                                ::java::lang::String a4((jobject) NULL);

                                if (!parseArgs(args, "sIsIs", &a0, &a1, &a2, &a3, &a4))
                                {
                                    OBJ_CALL(self->object.loadSearcher(a0, a1, a2, a3, a4));
                                    Py_RETURN_NONE;
                                }
                            }
                            break;
                          case 7:
                            {
                                ::java::lang::String a0((jobject) NULL);
                                jint a1;
                                ::java::lang::String a2((jobject) NULL);
                                jint a3;
                                ::java::lang::String a4((jobject) NULL);
                                ::java::lang::String a5((jobject) NULL);
                                jint a6;

                                if (!parseArgs(args, "sIsIssI", &a0, &a1, &a2, &a3, &a4, &a5, &a6))
                                {
                                    OBJ_CALL(self->object.loadSearcher(a0, a1, a2, a3, a4, a5, a6));
                                    Py_RETURN_NONE;
                                }
                            }
                        }

                        PyErr_SetArgsError((PyObject *) self, "loadSearcher", args);
                        return NULL;
                    }

                    static PyObject *t_NameSearcher_loadTaggedFile(t_NameSearcher *self, PyObject *args)
                    {
                        ::java::lang::String a0((jobject) NULL);
                        jint a1;
                        jboolean result;

                        if (!parseArgs(args, "sI", &a0, &a1))
                        {
                            OBJ_CALL(result = self->object.loadTaggedFile(a0, a1));
                            Py_RETURN_BOOL(result);
                        }

                        PyErr_SetArgsError((PyObject *) self, "loadTaggedFile", args);
                        return NULL;
                    }

                    static PyObject *t_NameSearcher_looForPairs(t_NameSearcher *self)
                    {
                        OBJ_CALL(self->object.looForPairs());
                        Py_RETURN_NONE;
                    }

                    static PyObject *t_NameSearcher_lookForAdjectiveInName(t_NameSearcher *self)
                    {
                        OBJ_CALL(self->object.lookForAdjectiveInName());
                        Py_RETURN_NONE;
                    }

                    static PyObject *t_NameSearcher_lookForDifferentCases(t_NameSearcher *self)
                    {
                        OBJ_CALL(self->object.lookForDifferentCases());
                        Py_RETURN_NONE;
                    }

                    static PyObject *t_NameSearcher_lookForListings(t_NameSearcher *self)
                    {
                        OBJ_CALL(self->object.lookForListings());
                        Py_RETURN_NONE;
                    }

                    static PyObject *t_NameSearcher_lookForMissedCompanies(t_NameSearcher *self)
                    {
                        OBJ_CALL(self->object.lookForMissedCompanies());
                        Py_RETURN_NONE;
                    }

                    static PyObject *t_NameSearcher_lookForNounInName(t_NameSearcher *self)
                    {
                        OBJ_CALL(self->object.lookForNounInName());
                        Py_RETURN_NONE;
                    }

                    static PyObject *t_NameSearcher_lookForUnmatchedFromHash(t_NameSearcher *self)
                    {
                        OBJ_CALL(self->object.lookForUnmatchedFromHash());
                        Py_RETURN_NONE;
                    }

                    static PyObject *t_NameSearcher_lookForUnmatchedFromRole(t_NameSearcher *self)
                    {
                        OBJ_CALL(self->object.lookForUnmatchedFromRole());
                        Py_RETURN_NONE;
                    }

                    static PyObject *t_NameSearcher_markFromHash(t_NameSearcher *self, PyObject *arg)
                    {
                        jboolean a0;

                        if (!parseArg(arg, "Z", &a0))
                        {
                            OBJ_CALL(self->object.markFromHash(a0));
                            Py_RETURN_NONE;
                        }

                        PyErr_SetArgsError((PyObject *) self, "markFromHash", arg);
                        return NULL;
                    }

                    static PyObject *t_NameSearcher_markMiscEntities(t_NameSearcher *self)
                    {
                        OBJ_CALL(self->object.markMiscEntities());
                        Py_RETURN_NONE;
                    }

                    static PyObject *t_NameSearcher_nameHashcontains(t_NameSearcher *self, PyObject *arg)
                    {
                        ::java::lang::String a0((jobject) NULL);
                        jboolean result;

                        if (!parseArg(arg, "s", &a0))
                        {
                            OBJ_CALL(result = self->object.nameHashcontains(a0));
                            Py_RETURN_BOOL(result);
                        }

                        PyErr_SetArgsError((PyObject *) self, "nameHashcontains", arg);
                        return NULL;
                    }

                    static PyObject *t_NameSearcher_overwriteNameHash(t_NameSearcher *self, PyObject *args)
                    {
                        ::java::lang::String a0((jobject) NULL);
                        ::java::lang::String a1((jobject) NULL);

                        if (!parseArgs(args, "ss", &a0, &a1))
                        {
                            OBJ_CALL(self->object.overwriteNameHash(a0, a1));
                            Py_RETURN_NONE;
                        }

                        PyErr_SetArgsError((PyObject *) self, "overwriteNameHash", args);
                        return NULL;
                    }

                    static PyObject *t_NameSearcher_printIndexList(t_NameSearcher *self)
                    {
                        OBJ_CALL(self->object.printIndexList());
                        Py_RETURN_NONE;
                    }

                    static PyObject *t_NameSearcher_printMarkedText(t_NameSearcher *self)
                    {
                        OBJ_CALL(self->object.printMarkedText());
                        Py_RETURN_NONE;
                    }

                    static PyObject *t_NameSearcher_printNameHash(t_NameSearcher *self)
                    {
                        OBJ_CALL(self->object.printNameHash());
                        Py_RETURN_NONE;
                    }

                    static PyObject *t_NameSearcher_printRoleHash(t_NameSearcher *self)
                    {
                        OBJ_CALL(self->object.printRoleHash());
                        Py_RETURN_NONE;
                    }

                    static PyObject *t_NameSearcher_roleHashContains(t_NameSearcher *self, PyObject *arg)
                    {
                        ::java::lang::String a0((jobject) NULL);
                        jboolean result;

                        if (!parseArg(arg, "s", &a0))
                        {
                            OBJ_CALL(result = self->object.roleHashContains(a0));
                            Py_RETURN_BOOL(result);
                        }

                        PyErr_SetArgsError((PyObject *) self, "roleHashContains", arg);
                        return NULL;
                    }
                }
            }
        }
    }
}
#include <jni.h>
#include "JCCEnv.h"
#include "is/iclt/icenlp/core/tokenizer/Tokenizer.h"
#include "java/io/IOException.h"
#include "java/util/ArrayList.h"
#include "is/iclt/icenlp/core/utils/Lexicon.h"
#include "java/lang/NullPointerException.h"
#include "java/lang/Class.h"
#include "java/io/InputStream.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace is {
    namespace iclt {
        namespace icenlp {
            namespace core {
                namespace tokenizer {

                    ::java::lang::Class *Tokenizer::class$ = NULL;
                    jmethodID *Tokenizer::mids$ = NULL;
                    jfieldID *Tokenizer::fids$ = NULL;
                    jint Tokenizer::typeHmmTokenTags = (jint) 0;
                    jint Tokenizer::typeIceTokenTags = (jint) 0;
                    jint Tokenizer::typeToken = (jint) 0;
                    jint Tokenizer::typeTokenTags = (jint) 0;

                    jclass Tokenizer::initializeClass()
                    {
                        if (!class$)
                        {

                            jclass cls = (jclass) env->findClass("is/iclt/icenlp/core/tokenizer/Tokenizer");

                            mids$ = new jmethodID[max_mid];
                            mids$[mid_init$_b3a85a05] = env->getMethodID(cls, "<init>", "(IZ)V");
                            mids$[mid_init$_fc4c7e87] = env->getMethodID(cls, "<init>", "(IZLjava/lang/String;)V");
                            mids$[mid_init$_9653df11] = env->getMethodID(cls, "<init>", "(IZLjava/io/InputStream;)V");
                            mids$[mid_init$_875cc3e1] = env->getMethodID(cls, "<init>", "(IZLis/iclt/icenlp/core/utils/Lexicon;)V");
                            mids$[mid_combineMultiWords_39c7bd30] = env->getMethodID(cls, "combineMultiWords", "(I)Z");
                            mids$[mid_findMultiWords_bb0c767f] = env->getMethodID(cls, "findMultiWords", "(Z)V");
                            mids$[mid_initialize_b3a85a05] = env->getMethodID(cls, "initialize", "(IZ)V");
                            mids$[mid_nextToken_54c6a166] = env->getMethodID(cls, "nextToken", "()V");
                            mids$[mid_splitAbbreviations_54c6a166] = env->getMethodID(cls, "splitAbbreviations", "()V");
                            mids$[mid_tokenize_5fdc3f48] = env->getMethodID(cls, "tokenize", "(Ljava/lang/String;)V");
                            mids$[mid_tokenizeSplit_5fdc3f48] = env->getMethodID(cls, "tokenizeSplit", "(Ljava/lang/String;)V");

                            fids$ = new jfieldID[max_fid];
                            fids$[fid_tokens] = env->getFieldID(cls, "tokens", "Ljava/util/ArrayList;");

                            class$ = (::java::lang::Class *) new JObject(cls);
                            cls = (jclass) class$->this$;

                            typeHmmTokenTags = env->getStaticIntField(cls, "typeHmmTokenTags");
                            typeIceTokenTags = env->getStaticIntField(cls, "typeIceTokenTags");
                            typeToken = env->getStaticIntField(cls, "typeToken");
                            typeTokenTags = env->getStaticIntField(cls, "typeTokenTags");
                        }
                        return (jclass) class$->this$;
                    }

                    Tokenizer::Tokenizer(jint a0, jboolean a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_b3a85a05, a0, a1)) {}

                    Tokenizer::Tokenizer(jint a0, jboolean a1, const ::java::lang::String & a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_fc4c7e87, a0, a1, a2.this$)) {}

                    Tokenizer::Tokenizer(jint a0, jboolean a1, const ::java::io::InputStream & a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_9653df11, a0, a1, a2.this$)) {}

                    Tokenizer::Tokenizer(jint a0, jboolean a1, const ::is::iclt::icenlp::core::utils::Lexicon & a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_875cc3e1, a0, a1, a2.this$)) {}

                    jboolean Tokenizer::combineMultiWords(jint a0) const
                    {
                        return env->callBooleanMethod(this$, mids$[mid_combineMultiWords_39c7bd30], a0);
                    }

                    void Tokenizer::findMultiWords(jboolean a0) const
                    {
                        env->callVoidMethod(this$, mids$[mid_findMultiWords_bb0c767f], a0);
                    }

                    void Tokenizer::initialize(jint a0, jboolean a1) const
                    {
                        env->callVoidMethod(this$, mids$[mid_initialize_b3a85a05], a0, a1);
                    }

                    void Tokenizer::nextToken() const
                    {
                        env->callVoidMethod(this$, mids$[mid_nextToken_54c6a166]);
                    }

                    void Tokenizer::splitAbbreviations() const
                    {
                        env->callVoidMethod(this$, mids$[mid_splitAbbreviations_54c6a166]);
                    }

                    void Tokenizer::tokenize(const ::java::lang::String & a0) const
                    {
                        env->callVoidMethod(this$, mids$[mid_tokenize_5fdc3f48], a0.this$);
                    }

                    void Tokenizer::tokenizeSplit(const ::java::lang::String & a0) const
                    {
                        env->callVoidMethod(this$, mids$[mid_tokenizeSplit_5fdc3f48], a0.this$);
                    }

                    ::java::util::ArrayList Tokenizer::_get_tokens() const
                    {
                        return ::java::util::ArrayList(env->getObjectField(this$, fids$[fid_tokens]));
                    }

                    void Tokenizer::_set_tokens(const ::java::util::ArrayList & a0) const
                    {
                        env->setObjectField(this$, fids$[fid_tokens], a0.this$);
                    }
                }
            }
        }
    }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace is {
    namespace iclt {
        namespace icenlp {
            namespace core {
                namespace tokenizer {
                    static PyObject *t_Tokenizer_cast_(PyTypeObject *type, PyObject *arg);
                    static PyObject *t_Tokenizer_instance_(PyTypeObject *type, PyObject *arg);
                    static int t_Tokenizer_init_(t_Tokenizer *self, PyObject *args, PyObject *kwds);
                    static PyObject *t_Tokenizer_combineMultiWords(t_Tokenizer *self, PyObject *arg);
                    static PyObject *t_Tokenizer_findMultiWords(t_Tokenizer *self, PyObject *arg);
                    static PyObject *t_Tokenizer_initialize(t_Tokenizer *self, PyObject *args);
                    static PyObject *t_Tokenizer_nextToken(t_Tokenizer *self);
                    static PyObject *t_Tokenizer_splitAbbreviations(t_Tokenizer *self);
                    static PyObject *t_Tokenizer_tokenize(t_Tokenizer *self, PyObject *arg);
                    static PyObject *t_Tokenizer_tokenizeSplit(t_Tokenizer *self, PyObject *arg);
                    static PyObject *t_Tokenizer_get__tokens(t_Tokenizer *self, void *data);
                    static int t_Tokenizer_set__tokens(t_Tokenizer *self, PyObject *arg, void *data);

                    static PyGetSetDef t_Tokenizer__fields_[] = {
                        DECLARE_GETSET_FIELD(t_Tokenizer, tokens),
                        { NULL, NULL, NULL, NULL, NULL }
                    };

                    static PyMethodDef t_Tokenizer__methods_[] = {
                        DECLARE_METHOD(t_Tokenizer, cast_, METH_O | METH_CLASS),
                        DECLARE_METHOD(t_Tokenizer, instance_, METH_O | METH_CLASS),
                        DECLARE_METHOD(t_Tokenizer, combineMultiWords, METH_O),
                        DECLARE_METHOD(t_Tokenizer, findMultiWords, METH_O),
                        DECLARE_METHOD(t_Tokenizer, initialize, METH_VARARGS),
                        DECLARE_METHOD(t_Tokenizer, nextToken, METH_NOARGS),
                        DECLARE_METHOD(t_Tokenizer, splitAbbreviations, METH_NOARGS),
                        DECLARE_METHOD(t_Tokenizer, tokenize, METH_O),
                        DECLARE_METHOD(t_Tokenizer, tokenizeSplit, METH_O),
                        { NULL, NULL, 0, NULL }
                    };

                    DECLARE_TYPE(Tokenizer, t_Tokenizer, ::java::lang::Object, Tokenizer, t_Tokenizer_init_, 0, 0, t_Tokenizer__fields_, 0, 0);

                    void t_Tokenizer::install(PyObject *module)
                    {
                        installType(&PY_TYPE(Tokenizer), module, "Tokenizer", 0);
                    }

                    void t_Tokenizer::initialize(PyObject *module)
                    {
                        PyDict_SetItemString(PY_TYPE(Tokenizer).tp_dict, "class_", make_descriptor(Tokenizer::initializeClass, 1));
                        PyDict_SetItemString(PY_TYPE(Tokenizer).tp_dict, "wrapfn_", make_descriptor(t_Tokenizer::wrap_jobject));
                        PyDict_SetItemString(PY_TYPE(Tokenizer).tp_dict, "boxfn_", make_descriptor(boxObject));
                        Tokenizer::initializeClass();
                        PyDict_SetItemString(PY_TYPE(Tokenizer).tp_dict, "typeHmmTokenTags", make_descriptor(Tokenizer::typeHmmTokenTags));
                        PyDict_SetItemString(PY_TYPE(Tokenizer).tp_dict, "typeIceTokenTags", make_descriptor(Tokenizer::typeIceTokenTags));
                        PyDict_SetItemString(PY_TYPE(Tokenizer).tp_dict, "typeToken", make_descriptor(Tokenizer::typeToken));
                        PyDict_SetItemString(PY_TYPE(Tokenizer).tp_dict, "typeTokenTags", make_descriptor(Tokenizer::typeTokenTags));
                    }

                    static PyObject *t_Tokenizer_cast_(PyTypeObject *type, PyObject *arg)
                    {
                        if (!(arg = castCheck(arg, Tokenizer::initializeClass, 1)))
                            return NULL;
                        return t_Tokenizer::wrap_Object(Tokenizer(((t_Tokenizer *) arg)->object.this$));
                    }
                    static PyObject *t_Tokenizer_instance_(PyTypeObject *type, PyObject *arg)
                    {
                        if (!castCheck(arg, Tokenizer::initializeClass, 0))
                            Py_RETURN_FALSE;
                        Py_RETURN_TRUE;
                    }

                    static int t_Tokenizer_init_(t_Tokenizer *self, PyObject *args, PyObject *kwds)
                    {
                        switch (PyTuple_GET_SIZE(args)) {
                          case 2:
                            {
                                jint a0;
                                jboolean a1;
                                Tokenizer object((jobject) NULL);

                                if (!parseArgs(args, "IZ", &a0, &a1))
                                {
                                    INT_CALL(object = Tokenizer(a0, a1));
                                    self->object = object;
                                    break;
                                }
                            }
                            goto err;
                          case 3:
                            {
                                jint a0;
                                jboolean a1;
                                ::java::lang::String a2((jobject) NULL);
                                Tokenizer object((jobject) NULL);

                                if (!parseArgs(args, "IZs", &a0, &a1, &a2))
                                {
                                    INT_CALL(object = Tokenizer(a0, a1, a2));
                                    self->object = object;
                                    break;
                                }
                            }
                            {
                                jint a0;
                                jboolean a1;
                                ::java::io::InputStream a2((jobject) NULL);
                                Tokenizer object((jobject) NULL);

                                if (!parseArgs(args, "IZk", ::java::io::InputStream::initializeClass, &a0, &a1, &a2))
                                {
                                    INT_CALL(object = Tokenizer(a0, a1, a2));
                                    self->object = object;
                                    break;
                                }
                            }
                            {
                                jint a0;
                                jboolean a1;
                                ::is::iclt::icenlp::core::utils::Lexicon a2((jobject) NULL);
                                Tokenizer object((jobject) NULL);

                                if (!parseArgs(args, "IZk", ::is::iclt::icenlp::core::utils::Lexicon::initializeClass, &a0, &a1, &a2))
                                {
                                    INT_CALL(object = Tokenizer(a0, a1, a2));
                                    self->object = object;
                                    break;
                                }
                            }
                          default:
                          err:
                            PyErr_SetArgsError((PyObject *) self, "__init__", args);
                            return -1;
                        }

                        return 0;
                    }

                    static PyObject *t_Tokenizer_combineMultiWords(t_Tokenizer *self, PyObject *arg)
                    {
                        jint a0;
                        jboolean result;

                        if (!parseArg(arg, "I", &a0))
                        {
                            OBJ_CALL(result = self->object.combineMultiWords(a0));
                            Py_RETURN_BOOL(result);
                        }

                        PyErr_SetArgsError((PyObject *) self, "combineMultiWords", arg);
                        return NULL;
                    }

                    static PyObject *t_Tokenizer_findMultiWords(t_Tokenizer *self, PyObject *arg)
                    {
                        jboolean a0;

                        if (!parseArg(arg, "Z", &a0))
                        {
                            OBJ_CALL(self->object.findMultiWords(a0));
                            Py_RETURN_NONE;
                        }

                        PyErr_SetArgsError((PyObject *) self, "findMultiWords", arg);
                        return NULL;
                    }

                    static PyObject *t_Tokenizer_initialize(t_Tokenizer *self, PyObject *args)
                    {
                        jint a0;
                        jboolean a1;

                        if (!parseArgs(args, "IZ", &a0, &a1))
                        {
                            OBJ_CALL(self->object.initialize(a0, a1));
                            Py_RETURN_NONE;
                        }

                        PyErr_SetArgsError((PyObject *) self, "initialize", args);
                        return NULL;
                    }

                    static PyObject *t_Tokenizer_nextToken(t_Tokenizer *self)
                    {
                        OBJ_CALL(self->object.nextToken());
                        Py_RETURN_NONE;
                    }

                    static PyObject *t_Tokenizer_splitAbbreviations(t_Tokenizer *self)
                    {
                        OBJ_CALL(self->object.splitAbbreviations());
                        Py_RETURN_NONE;
                    }

                    static PyObject *t_Tokenizer_tokenize(t_Tokenizer *self, PyObject *arg)
                    {
                        ::java::lang::String a0((jobject) NULL);

                        if (!parseArg(arg, "s", &a0))
                        {
                            OBJ_CALL(self->object.tokenize(a0));
                            Py_RETURN_NONE;
                        }

                        PyErr_SetArgsError((PyObject *) self, "tokenize", arg);
                        return NULL;
                    }

                    static PyObject *t_Tokenizer_tokenizeSplit(t_Tokenizer *self, PyObject *arg)
                    {
                        ::java::lang::String a0((jobject) NULL);

                        if (!parseArg(arg, "s", &a0))
                        {
                            OBJ_CALL(self->object.tokenizeSplit(a0));
                            Py_RETURN_NONE;
                        }

                        PyErr_SetArgsError((PyObject *) self, "tokenizeSplit", arg);
                        return NULL;
                    }

                    static PyObject *t_Tokenizer_get__tokens(t_Tokenizer *self, void *data)
                    {
                        ::java::util::ArrayList value((jobject) NULL);
                        OBJ_CALL(value = self->object._get_tokens());
                        return ::java::util::t_ArrayList::wrap_Object(value);
                    }
                    static int t_Tokenizer_set__tokens(t_Tokenizer *self, PyObject *arg, void *data)
                    {
                        ::java::util::ArrayList value((jobject) NULL);
                        if (!parseArg(arg, "k", ::java::util::ArrayList::initializeClass, &value))
                        {
                            INT_CALL(self->object._set_tokens(value));
                            return 0;
                        }
                        PyErr_SetArgsError((PyObject *) self, "tokens", arg);
                        return -1;
                    }
                }
            }
        }
    }
}
#include <jni.h>
#include "JCCEnv.h"
#include "is/iclt/icenlp/core/utils/Idioms.h"
#include "java/io/IOException.h"
#include "java/util/ArrayList.h"
#include "java/lang/NullPointerException.h"
#include "java/lang/Class.h"
#include "java/io/InputStream.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace is {
    namespace iclt {
        namespace icenlp {
            namespace core {
                namespace utils {

                    ::java::lang::Class *Idioms::class$ = NULL;
                    jmethodID *Idioms::mids$ = NULL;

                    jclass Idioms::initializeClass()
                    {
                        if (!class$)
                        {

                            jclass cls = (jclass) env->findClass("is/iclt/icenlp/core/utils/Idioms");

                            mids$ = new jmethodID[max_mid];
                            mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
                            mids$[mid_init$_be2e4f90] = env->getMethodID(cls, "<init>", "(Ljava/io/InputStream;)V");
                            mids$[mid_findIdioms_b3f662f9] = env->getMethodID(cls, "findIdioms", "(Ljava/util/ArrayList;)V");

                            class$ = (::java::lang::Class *) new JObject(cls);
                        }
                        return (jclass) class$->this$;
                    }

                    Idioms::Idioms(const ::java::lang::String & a0) : ::is::iclt::icenlp::core::utils::Lexicon(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}

                    Idioms::Idioms(const ::java::io::InputStream & a0) : ::is::iclt::icenlp::core::utils::Lexicon(env->newObject(initializeClass, &mids$, mid_init$_be2e4f90, a0.this$)) {}

                    void Idioms::findIdioms(const ::java::util::ArrayList & a0) const
                    {
                        env->callVoidMethod(this$, mids$[mid_findIdioms_b3f662f9], a0.this$);
                    }
                }
            }
        }
    }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace is {
    namespace iclt {
        namespace icenlp {
            namespace core {
                namespace utils {
                    static PyObject *t_Idioms_cast_(PyTypeObject *type, PyObject *arg);
                    static PyObject *t_Idioms_instance_(PyTypeObject *type, PyObject *arg);
                    static int t_Idioms_init_(t_Idioms *self, PyObject *args, PyObject *kwds);
                    static PyObject *t_Idioms_findIdioms(t_Idioms *self, PyObject *arg);

                    static PyMethodDef t_Idioms__methods_[] = {
                        DECLARE_METHOD(t_Idioms, cast_, METH_O | METH_CLASS),
                        DECLARE_METHOD(t_Idioms, instance_, METH_O | METH_CLASS),
                        DECLARE_METHOD(t_Idioms, findIdioms, METH_O),
                        { NULL, NULL, 0, NULL }
                    };

                    DECLARE_TYPE(Idioms, t_Idioms, ::is::iclt::icenlp::core::utils::Lexicon, Idioms, t_Idioms_init_, 0, 0, 0, 0, 0);

                    void t_Idioms::install(PyObject *module)
                    {
                        installType(&PY_TYPE(Idioms), module, "Idioms", 0);
                    }

                    void t_Idioms::initialize(PyObject *module)
                    {
                        PyDict_SetItemString(PY_TYPE(Idioms).tp_dict, "class_", make_descriptor(Idioms::initializeClass, 1));
                        PyDict_SetItemString(PY_TYPE(Idioms).tp_dict, "wrapfn_", make_descriptor(t_Idioms::wrap_jobject));
                        PyDict_SetItemString(PY_TYPE(Idioms).tp_dict, "boxfn_", make_descriptor(boxObject));
                    }

                    static PyObject *t_Idioms_cast_(PyTypeObject *type, PyObject *arg)
                    {
                        if (!(arg = castCheck(arg, Idioms::initializeClass, 1)))
                            return NULL;
                        return t_Idioms::wrap_Object(Idioms(((t_Idioms *) arg)->object.this$));
                    }
                    static PyObject *t_Idioms_instance_(PyTypeObject *type, PyObject *arg)
                    {
                        if (!castCheck(arg, Idioms::initializeClass, 0))
                            Py_RETURN_FALSE;
                        Py_RETURN_TRUE;
                    }

                    static int t_Idioms_init_(t_Idioms *self, PyObject *args, PyObject *kwds)
                    {
                        switch (PyTuple_GET_SIZE(args)) {
                          case 1:
                            {
                                ::java::lang::String a0((jobject) NULL);
                                Idioms object((jobject) NULL);

                                if (!parseArgs(args, "s", &a0))
                                {
                                    INT_CALL(object = Idioms(a0));
                                    self->object = object;
                                    break;
                                }
                            }
                            {
                                ::java::io::InputStream a0((jobject) NULL);
                                Idioms object((jobject) NULL);

                                if (!parseArgs(args, "k", ::java::io::InputStream::initializeClass, &a0))
                                {
                                    INT_CALL(object = Idioms(a0));
                                    self->object = object;
                                    break;
                                }
                            }
                          default:
                            PyErr_SetArgsError((PyObject *) self, "__init__", args);
                            return -1;
                        }

                        return 0;
                    }

                    static PyObject *t_Idioms_findIdioms(t_Idioms *self, PyObject *arg)
                    {
                        ::java::util::ArrayList a0((jobject) NULL);
                        PyTypeObject **p0;

                        if (!parseArg(arg, "K", ::java::util::ArrayList::initializeClass, &a0, &p0, ::java::util::t_ArrayList::parameters_))
                        {
                            OBJ_CALL(self->object.findIdioms(a0));
                            Py_RETURN_NONE;
                        }

                        PyErr_SetArgsError((PyObject *) self, "findIdioms", arg);
                        return NULL;
                    }
                }
            }
        }
    }
}
#include <jni.h>
#include "JCCEnv.h"
#include "is/iclt/icenlp/core/iceparser/Preprocess.h"
#include "java/io/IOException.h"
#include "java/io/Reader.h"
#include "java/io/Writer.h"
#include "java/lang/Class.h"
#include "java/io/InputStream.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace is {
    namespace iclt {
        namespace icenlp {
            namespace core {
                namespace iceparser {

                    ::java::lang::Class *Preprocess::class$ = NULL;
                    jmethodID *Preprocess::mids$ = NULL;
                    jint Preprocess::YYEOF = (jint) 0;
                    jint Preprocess::YYINITIAL = (jint) 0;

                    jclass Preprocess::initializeClass()
                    {
                        if (!class$)
                        {

                            jclass cls = (jclass) env->findClass("is/iclt/icenlp/core/iceparser/Preprocess");

                            mids$ = new jmethodID[max_mid];
                            mids$[mid_init$_cf2e3c10] = env->getMethodID(cls, "<init>", "(Ljava/io/Reader;)V");
                            mids$[mid_init$_be2e4f90] = env->getMethodID(cls, "<init>", "(Ljava/io/InputStream;)V");
                            mids$[mid_main_4dd4540c] = env->getStaticMethodID(cls, "main", "([Ljava/lang/String;)V");
                            mids$[mid_parse_5bcd5850] = env->getMethodID(cls, "parse", "(Ljava/io/Writer;)V");
                            mids$[mid_yybegin_39c7bd3c] = env->getMethodID(cls, "yybegin", "(I)V");
                            mids$[mid_yycharat_39c7bd29] = env->getMethodID(cls, "yycharat", "(I)C");
                            mids$[mid_yyclose_54c6a166] = env->getMethodID(cls, "yyclose", "()V");
                            mids$[mid_yylength_54c6a179] = env->getMethodID(cls, "yylength", "()I");
                            mids$[mid_yylex_54c6a179] = env->getMethodID(cls, "yylex", "()I");
                            mids$[mid_yypushback_39c7bd3c] = env->getMethodID(cls, "yypushback", "(I)V");
                            mids$[mid_yyreset_cf2e3c10] = env->getMethodID(cls, "yyreset", "(Ljava/io/Reader;)V");
                            mids$[mid_yystate_54c6a179] = env->getMethodID(cls, "yystate", "()I");
                            mids$[mid_yytext_14c7b5c5] = env->getMethodID(cls, "yytext", "()Ljava/lang/String;");

                            class$ = (::java::lang::Class *) new JObject(cls);
                            cls = (jclass) class$->this$;

                            YYEOF = env->getStaticIntField(cls, "YYEOF");
                            YYINITIAL = env->getStaticIntField(cls, "YYINITIAL");
                        }
                        return (jclass) class$->this$;
                    }

                    Preprocess::Preprocess(const ::java::io::Reader & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_cf2e3c10, a0.this$)) {}

                    Preprocess::Preprocess(const ::java::io::InputStream & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_be2e4f90, a0.this$)) {}

                    void Preprocess::main(const JArray< ::java::lang::String > & a0)
                    {
                        jclass cls = initializeClass();
                        env->callStaticVoidMethod(cls, mids$[mid_main_4dd4540c], a0.this$);
                    }

                    void Preprocess::parse(const ::java::io::Writer & a0) const
                    {
                        env->callVoidMethod(this$, mids$[mid_parse_5bcd5850], a0.this$);
                    }

                    void Preprocess::yybegin(jint a0) const
                    {
                        env->callVoidMethod(this$, mids$[mid_yybegin_39c7bd3c], a0);
                    }

                    jchar Preprocess::yycharat(jint a0) const
                    {
                        return env->callCharMethod(this$, mids$[mid_yycharat_39c7bd29], a0);
                    }

                    void Preprocess::yyclose() const
                    {
                        env->callVoidMethod(this$, mids$[mid_yyclose_54c6a166]);
                    }

                    jint Preprocess::yylength() const
                    {
                        return env->callIntMethod(this$, mids$[mid_yylength_54c6a179]);
                    }

                    jint Preprocess::yylex() const
                    {
                        return env->callIntMethod(this$, mids$[mid_yylex_54c6a179]);
                    }

                    void Preprocess::yypushback(jint a0) const
                    {
                        env->callVoidMethod(this$, mids$[mid_yypushback_39c7bd3c], a0);
                    }

                    void Preprocess::yyreset(const ::java::io::Reader & a0) const
                    {
                        env->callVoidMethod(this$, mids$[mid_yyreset_cf2e3c10], a0.this$);
                    }

                    jint Preprocess::yystate() const
                    {
                        return env->callIntMethod(this$, mids$[mid_yystate_54c6a179]);
                    }

                    ::java::lang::String Preprocess::yytext() const
                    {
                        return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_yytext_14c7b5c5]));
                    }
                }
            }
        }
    }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace is {
    namespace iclt {
        namespace icenlp {
            namespace core {
                namespace iceparser {
                    static PyObject *t_Preprocess_cast_(PyTypeObject *type, PyObject *arg);
                    static PyObject *t_Preprocess_instance_(PyTypeObject *type, PyObject *arg);
                    static int t_Preprocess_init_(t_Preprocess *self, PyObject *args, PyObject *kwds);
                    static PyObject *t_Preprocess_main(PyTypeObject *type, PyObject *arg);
                    static PyObject *t_Preprocess_parse(t_Preprocess *self, PyObject *arg);
                    static PyObject *t_Preprocess_yybegin(t_Preprocess *self, PyObject *arg);
                    static PyObject *t_Preprocess_yycharat(t_Preprocess *self, PyObject *arg);
                    static PyObject *t_Preprocess_yyclose(t_Preprocess *self);
                    static PyObject *t_Preprocess_yylength(t_Preprocess *self);
                    static PyObject *t_Preprocess_yylex(t_Preprocess *self);
                    static PyObject *t_Preprocess_yypushback(t_Preprocess *self, PyObject *arg);
                    static PyObject *t_Preprocess_yyreset(t_Preprocess *self, PyObject *arg);
                    static PyObject *t_Preprocess_yystate(t_Preprocess *self);
                    static PyObject *t_Preprocess_yytext(t_Preprocess *self);

                    static PyMethodDef t_Preprocess__methods_[] = {
                        DECLARE_METHOD(t_Preprocess, cast_, METH_O | METH_CLASS),
                        DECLARE_METHOD(t_Preprocess, instance_, METH_O | METH_CLASS),
                        DECLARE_METHOD(t_Preprocess, main, METH_O | METH_CLASS),
                        DECLARE_METHOD(t_Preprocess, parse, METH_O),
                        DECLARE_METHOD(t_Preprocess, yybegin, METH_O),
                        DECLARE_METHOD(t_Preprocess, yycharat, METH_O),
                        DECLARE_METHOD(t_Preprocess, yyclose, METH_NOARGS),
                        DECLARE_METHOD(t_Preprocess, yylength, METH_NOARGS),
                        DECLARE_METHOD(t_Preprocess, yylex, METH_NOARGS),
                        DECLARE_METHOD(t_Preprocess, yypushback, METH_O),
                        DECLARE_METHOD(t_Preprocess, yyreset, METH_O),
                        DECLARE_METHOD(t_Preprocess, yystate, METH_NOARGS),
                        DECLARE_METHOD(t_Preprocess, yytext, METH_NOARGS),
                        { NULL, NULL, 0, NULL }
                    };

                    DECLARE_TYPE(Preprocess, t_Preprocess, ::java::lang::Object, Preprocess, t_Preprocess_init_, 0, 0, 0, 0, 0);

                    void t_Preprocess::install(PyObject *module)
                    {
                        installType(&PY_TYPE(Preprocess), module, "Preprocess", 0);
                    }

                    void t_Preprocess::initialize(PyObject *module)
                    {
                        PyDict_SetItemString(PY_TYPE(Preprocess).tp_dict, "class_", make_descriptor(Preprocess::initializeClass, 1));
                        PyDict_SetItemString(PY_TYPE(Preprocess).tp_dict, "wrapfn_", make_descriptor(t_Preprocess::wrap_jobject));
                        PyDict_SetItemString(PY_TYPE(Preprocess).tp_dict, "boxfn_", make_descriptor(boxObject));
                        Preprocess::initializeClass();
                        PyDict_SetItemString(PY_TYPE(Preprocess).tp_dict, "YYEOF", make_descriptor(Preprocess::YYEOF));
                        PyDict_SetItemString(PY_TYPE(Preprocess).tp_dict, "YYINITIAL", make_descriptor(Preprocess::YYINITIAL));
                    }

                    static PyObject *t_Preprocess_cast_(PyTypeObject *type, PyObject *arg)
                    {
                        if (!(arg = castCheck(arg, Preprocess::initializeClass, 1)))
                            return NULL;
                        return t_Preprocess::wrap_Object(Preprocess(((t_Preprocess *) arg)->object.this$));
                    }
                    static PyObject *t_Preprocess_instance_(PyTypeObject *type, PyObject *arg)
                    {
                        if (!castCheck(arg, Preprocess::initializeClass, 0))
                            Py_RETURN_FALSE;
                        Py_RETURN_TRUE;
                    }

                    static int t_Preprocess_init_(t_Preprocess *self, PyObject *args, PyObject *kwds)
                    {
                        switch (PyTuple_GET_SIZE(args)) {
                          case 1:
                            {
                                ::java::io::Reader a0((jobject) NULL);
                                Preprocess object((jobject) NULL);

                                if (!parseArgs(args, "k", ::java::io::Reader::initializeClass, &a0))
                                {
                                    INT_CALL(object = Preprocess(a0));
                                    self->object = object;
                                    break;
                                }
                            }
                            {
                                ::java::io::InputStream a0((jobject) NULL);
                                Preprocess object((jobject) NULL);

                                if (!parseArgs(args, "k", ::java::io::InputStream::initializeClass, &a0))
                                {
                                    INT_CALL(object = Preprocess(a0));
                                    self->object = object;
                                    break;
                                }
                            }
                          default:
                            PyErr_SetArgsError((PyObject *) self, "__init__", args);
                            return -1;
                        }

                        return 0;
                    }

                    static PyObject *t_Preprocess_main(PyTypeObject *type, PyObject *arg)
                    {
                        JArray< ::java::lang::String > a0((jobject) NULL);

                        if (!parseArg(arg, "[s", &a0))
                        {
                            OBJ_CALL(::is::iclt::icenlp::core::iceparser::Preprocess::main(a0));
                            Py_RETURN_NONE;
                        }

                        PyErr_SetArgsError(type, "main", arg);
                        return NULL;
                    }

                    static PyObject *t_Preprocess_parse(t_Preprocess *self, PyObject *arg)
                    {
                        ::java::io::Writer a0((jobject) NULL);

                        if (!parseArg(arg, "k", ::java::io::Writer::initializeClass, &a0))
                        {
                            OBJ_CALL(self->object.parse(a0));
                            Py_RETURN_NONE;
                        }

                        PyErr_SetArgsError((PyObject *) self, "parse", arg);
                        return NULL;
                    }

                    static PyObject *t_Preprocess_yybegin(t_Preprocess *self, PyObject *arg)
                    {
                        jint a0;

                        if (!parseArg(arg, "I", &a0))
                        {
                            OBJ_CALL(self->object.yybegin(a0));
                            Py_RETURN_NONE;
                        }

                        PyErr_SetArgsError((PyObject *) self, "yybegin", arg);
                        return NULL;
                    }

                    static PyObject *t_Preprocess_yycharat(t_Preprocess *self, PyObject *arg)
                    {
                        jint a0;
                        jchar result;

                        if (!parseArg(arg, "I", &a0))
                        {
                            OBJ_CALL(result = self->object.yycharat(a0));
                            return PyUnicode_FromUnicode((Py_UNICODE *) &result, 1);
                        }

                        PyErr_SetArgsError((PyObject *) self, "yycharat", arg);
                        return NULL;
                    }

                    static PyObject *t_Preprocess_yyclose(t_Preprocess *self)
                    {
                        OBJ_CALL(self->object.yyclose());
                        Py_RETURN_NONE;
                    }

                    static PyObject *t_Preprocess_yylength(t_Preprocess *self)
                    {
                        jint result;
                        OBJ_CALL(result = self->object.yylength());
                        return PyInt_FromLong((long) result);
                    }

                    static PyObject *t_Preprocess_yylex(t_Preprocess *self)
                    {
                        jint result;
                        OBJ_CALL(result = self->object.yylex());
                        return PyInt_FromLong((long) result);
                    }

                    static PyObject *t_Preprocess_yypushback(t_Preprocess *self, PyObject *arg)
                    {
                        jint a0;

                        if (!parseArg(arg, "I", &a0))
                        {
                            OBJ_CALL(self->object.yypushback(a0));
                            Py_RETURN_NONE;
                        }

                        PyErr_SetArgsError((PyObject *) self, "yypushback", arg);
                        return NULL;
                    }

                    static PyObject *t_Preprocess_yyreset(t_Preprocess *self, PyObject *arg)
                    {
                        ::java::io::Reader a0((jobject) NULL);

                        if (!parseArg(arg, "k", ::java::io::Reader::initializeClass, &a0))
                        {
                            OBJ_CALL(self->object.yyreset(a0));
                            Py_RETURN_NONE;
                        }

                        PyErr_SetArgsError((PyObject *) self, "yyreset", arg);
                        return NULL;
                    }

                    static PyObject *t_Preprocess_yystate(t_Preprocess *self)
                    {
                        jint result;
                        OBJ_CALL(result = self->object.yystate());
                        return PyInt_FromLong((long) result);
                    }

                    static PyObject *t_Preprocess_yytext(t_Preprocess *self)
                    {
                        ::java::lang::String result((jobject) NULL);
                        OBJ_CALL(result = self->object.yytext());
                        return j2p(result);
                    }
                }
            }
        }
    }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/lang/Double.h"
#include "java/lang/Comparable.h"
#include "java/lang/NumberFormatException.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "java/lang/Object.h"
#include "JArray.h"

namespace java {
    namespace lang {

        ::java::lang::Class *Double::class$ = NULL;
        jmethodID *Double::mids$ = NULL;
        jint Double::MAX_EXPONENT = (jint) 0;
        jdouble Double::MAX_VALUE = (jdouble) 0;
        jint Double::MIN_EXPONENT = (jint) 0;
        jdouble Double::MIN_NORMAL = (jdouble) 0;
        jdouble Double::MIN_VALUE = (jdouble) 0;
        jdouble Double::NEGATIVE_INFINITY = (jdouble) 0;
        jdouble Double::NaN = (jdouble) 0;
        jdouble Double::POSITIVE_INFINITY = (jdouble) 0;
        jint Double::SIZE = (jint) 0;
        ::java::lang::Class *Double::TYPE = NULL;

        jclass Double::initializeClass()
        {
            if (!class$)
            {

                jclass cls = (jclass) env->findClass("java/lang/Double");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_5d1c7645] = env->getMethodID(cls, "<init>", "(D)V");
                mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
                mids$[mid_byteValue_54c6a172] = env->getMethodID(cls, "byteValue", "()B");
                mids$[mid_compare_b1e28667] = env->getStaticMethodID(cls, "compare", "(DD)I");
                mids$[mid_compareTo_290588f1] = env->getMethodID(cls, "compareTo", "(Ljava/lang/Object;)I");
                mids$[mid_compareTo_8baed073] = env->getMethodID(cls, "compareTo", "(Ljava/lang/Double;)I");
                mids$[mid_doubleToLongBits_5d1c7659] = env->getStaticMethodID(cls, "doubleToLongBits", "(D)J");
                mids$[mid_doubleToRawLongBits_5d1c7659] = env->getStaticMethodID(cls, "doubleToRawLongBits", "(D)J");
                mids$[mid_doubleValue_54c6a174] = env->getMethodID(cls, "doubleValue", "()D");
                mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
                mids$[mid_floatValue_54c6a176] = env->getMethodID(cls, "floatValue", "()F");
                mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
                mids$[mid_intValue_54c6a179] = env->getMethodID(cls, "intValue", "()I");
                mids$[mid_isInfinite_54c6a16a] = env->getMethodID(cls, "isInfinite", "()Z");
                mids$[mid_isInfinite_5d1c7649] = env->getStaticMethodID(cls, "isInfinite", "(D)Z");
                mids$[mid_isNaN_54c6a16a] = env->getMethodID(cls, "isNaN", "()Z");
                mids$[mid_isNaN_5d1c7649] = env->getStaticMethodID(cls, "isNaN", "(D)Z");
                mids$[mid_longBitsToDouble_0ee6df3d] = env->getStaticMethodID(cls, "longBitsToDouble", "(J)D");
                mids$[mid_longValue_54c6a17a] = env->getMethodID(cls, "longValue", "()J");
                mids$[mid_parseDouble_5fdc3f5a] = env->getStaticMethodID(cls, "parseDouble", "(Ljava/lang/String;)D");
                mids$[mid_shortValue_54c6a163] = env->getMethodID(cls, "shortValue", "()S");
                mids$[mid_toHexString_1b4624f8] = env->getStaticMethodID(cls, "toHexString", "(D)Ljava/lang/String;");
                mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
                mids$[mid_toString_1b4624f8] = env->getStaticMethodID(cls, "toString", "(D)Ljava/lang/String;");
                mids$[mid_valueOf_ad1fcbf0] = env->getStaticMethodID(cls, "valueOf", "(D)Ljava/lang/Double;");
                mids$[mid_valueOf_16296787] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;)Ljava/lang/Double;");

                class$ = (::java::lang::Class *) new JObject(cls);
                cls = (jclass) class$->this$;

                MAX_EXPONENT = env->getStaticIntField(cls, "MAX_EXPONENT");
                MAX_VALUE = env->getStaticDoubleField(cls, "MAX_VALUE");
                MIN_EXPONENT = env->getStaticIntField(cls, "MIN_EXPONENT");
                MIN_NORMAL = env->getStaticDoubleField(cls, "MIN_NORMAL");
                MIN_VALUE = env->getStaticDoubleField(cls, "MIN_VALUE");
                NEGATIVE_INFINITY = env->getStaticDoubleField(cls, "NEGATIVE_INFINITY");
                NaN = env->getStaticDoubleField(cls, "NaN");
                POSITIVE_INFINITY = env->getStaticDoubleField(cls, "POSITIVE_INFINITY");
                SIZE = env->getStaticIntField(cls, "SIZE");
                TYPE = new ::java::lang::Class(env->getStaticObjectField(cls, "TYPE", "Ljava/lang/Class;"));
            }
            return (jclass) class$->this$;
        }

        Double::Double(jdouble a0) : ::java::lang::Number(env->newObject(initializeClass, &mids$, mid_init$_5d1c7645, a0)) {}

        Double::Double(const ::java::lang::String & a0) : ::java::lang::Number(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}

        jbyte Double::byteValue() const
        {
            return env->callByteMethod(this$, mids$[mid_byteValue_54c6a172]);
        }

        jint Double::compare(jdouble a0, jdouble a1)
        {
            jclass cls = initializeClass();
            return env->callStaticIntMethod(cls, mids$[mid_compare_b1e28667], a0, a1);
        }

        jint Double::compareTo(const ::java::lang::Object & a0) const
        {
            return env->callIntMethod(this$, mids$[mid_compareTo_290588f1], a0.this$);
        }

        jint Double::compareTo(const Double & a0) const
        {
            return env->callIntMethod(this$, mids$[mid_compareTo_8baed073], a0.this$);
        }

        jlong Double::doubleToLongBits(jdouble a0)
        {
            jclass cls = initializeClass();
            return env->callStaticLongMethod(cls, mids$[mid_doubleToLongBits_5d1c7659], a0);
        }

        jlong Double::doubleToRawLongBits(jdouble a0)
        {
            jclass cls = initializeClass();
            return env->callStaticLongMethod(cls, mids$[mid_doubleToRawLongBits_5d1c7659], a0);
        }

        jdouble Double::doubleValue() const
        {
            return env->callDoubleMethod(this$, mids$[mid_doubleValue_54c6a174]);
        }

        jboolean Double::equals(const ::java::lang::Object & a0) const
        {
            return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        jfloat Double::floatValue() const
        {
            return env->callFloatMethod(this$, mids$[mid_floatValue_54c6a176]);
        }

        jint Double::hashCode() const
        {
            return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        jint Double::intValue() const
        {
            return env->callIntMethod(this$, mids$[mid_intValue_54c6a179]);
        }

        jboolean Double::isInfinite() const
        {
            return env->callBooleanMethod(this$, mids$[mid_isInfinite_54c6a16a]);
        }

        jboolean Double::isInfinite(jdouble a0)
        {
            jclass cls = initializeClass();
            return env->callStaticBooleanMethod(cls, mids$[mid_isInfinite_5d1c7649], a0);
        }

        jboolean Double::isNaN() const
        {
            return env->callBooleanMethod(this$, mids$[mid_isNaN_54c6a16a]);
        }

        jboolean Double::isNaN(jdouble a0)
        {
            jclass cls = initializeClass();
            return env->callStaticBooleanMethod(cls, mids$[mid_isNaN_5d1c7649], a0);
        }

        jdouble Double::longBitsToDouble(jlong a0)
        {
            jclass cls = initializeClass();
            return env->callStaticDoubleMethod(cls, mids$[mid_longBitsToDouble_0ee6df3d], a0);
        }

        jlong Double::longValue() const
        {
            return env->callLongMethod(this$, mids$[mid_longValue_54c6a17a]);
        }

        jdouble Double::parseDouble(const ::java::lang::String & a0)
        {
            jclass cls = initializeClass();
            return env->callStaticDoubleMethod(cls, mids$[mid_parseDouble_5fdc3f5a], a0.this$);
        }

        jshort Double::shortValue() const
        {
            return env->callShortMethod(this$, mids$[mid_shortValue_54c6a163]);
        }

        ::java::lang::String Double::toHexString(jdouble a0)
        {
            jclass cls = initializeClass();
            return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_toHexString_1b4624f8], a0));
        }

        ::java::lang::String Double::toString() const
        {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }

        ::java::lang::String Double::toString(jdouble a0)
        {
            jclass cls = initializeClass();
            return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_toString_1b4624f8], a0));
        }

        Double Double::valueOf(jdouble a0)
        {
            jclass cls = initializeClass();
            return Double(env->callStaticObjectMethod(cls, mids$[mid_valueOf_ad1fcbf0], a0));
        }

        Double Double::valueOf(const ::java::lang::String & a0)
        {
            jclass cls = initializeClass();
            return Double(env->callStaticObjectMethod(cls, mids$[mid_valueOf_16296787], a0.this$));
        }
    }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
    namespace lang {
        static PyObject *t_Double_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Double_instance_(PyTypeObject *type, PyObject *arg);
        static int t_Double_init_(t_Double *self, PyObject *args, PyObject *kwds);
        static PyObject *t_Double_byteValue(t_Double *self, PyObject *args);
        static PyObject *t_Double_compare(PyTypeObject *type, PyObject *args);
        static PyObject *t_Double_compareTo(t_Double *self, PyObject *args);
        static PyObject *t_Double_doubleToLongBits(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Double_doubleToRawLongBits(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Double_doubleValue(t_Double *self, PyObject *args);
        static PyObject *t_Double_equals(t_Double *self, PyObject *args);
        static PyObject *t_Double_floatValue(t_Double *self, PyObject *args);
        static PyObject *t_Double_hashCode(t_Double *self, PyObject *args);
        static PyObject *t_Double_intValue(t_Double *self, PyObject *args);
        static PyObject *t_Double_isInfinite(t_Double *self);
        static PyObject *t_Double_isInfinite_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Double_isNaN(t_Double *self);
        static PyObject *t_Double_isNaN_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Double_longBitsToDouble(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Double_longValue(t_Double *self, PyObject *args);
        static PyObject *t_Double_parseDouble(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Double_shortValue(t_Double *self, PyObject *args);
        static PyObject *t_Double_toHexString(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Double_toString(t_Double *self, PyObject *args);
        static PyObject *t_Double_toString_(PyTypeObject *type, PyObject *args);
        static PyObject *t_Double_valueOf(PyTypeObject *type, PyObject *args);
        static PyObject *t_Double_get__infinite(t_Double *self, void *data);
        static PyObject *t_Double_get__naN(t_Double *self, void *data);
        static PyGetSetDef t_Double__fields_[] = {
            DECLARE_GET_FIELD(t_Double, infinite),
            DECLARE_GET_FIELD(t_Double, naN),
            { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_Double__methods_[] = {
            DECLARE_METHOD(t_Double, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Double, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Double, byteValue, METH_VARARGS),
            DECLARE_METHOD(t_Double, compare, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_Double, compareTo, METH_VARARGS),
            DECLARE_METHOD(t_Double, doubleToLongBits, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Double, doubleToRawLongBits, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Double, doubleValue, METH_VARARGS),
            DECLARE_METHOD(t_Double, equals, METH_VARARGS),
            DECLARE_METHOD(t_Double, floatValue, METH_VARARGS),
            DECLARE_METHOD(t_Double, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_Double, intValue, METH_VARARGS),
            DECLARE_METHOD(t_Double, isInfinite, METH_NOARGS),
            DECLARE_METHOD(t_Double, isInfinite_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Double, isNaN, METH_NOARGS),
            DECLARE_METHOD(t_Double, isNaN_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Double, longBitsToDouble, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Double, longValue, METH_VARARGS),
            DECLARE_METHOD(t_Double, parseDouble, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Double, shortValue, METH_VARARGS),
            DECLARE_METHOD(t_Double, toHexString, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Double, toString, METH_VARARGS),
            DECLARE_METHOD(t_Double, toString_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Double, valueOf, METH_VARARGS | METH_CLASS),
            { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(Double, t_Double, ::java::lang::Number, Double, t_Double_init_, 0, 0, t_Double__fields_, 0, 0);

        void t_Double::install(PyObject *module)
        {
            installType(&PY_TYPE(Double), module, "Double", 0);
        }

        void t_Double::initialize(PyObject *module)
        {
            PyDict_SetItemString(PY_TYPE(Double).tp_dict, "class_", make_descriptor(Double::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Double).tp_dict, "wrapfn_", make_descriptor(unboxDouble));
            PyDict_SetItemString(PY_TYPE(Double).tp_dict, "boxfn_", make_descriptor(boxDouble));
            Double::initializeClass();
            PyDict_SetItemString(PY_TYPE(Double).tp_dict, "MAX_EXPONENT", make_descriptor(Double::MAX_EXPONENT));
            PyDict_SetItemString(PY_TYPE(Double).tp_dict, "MAX_VALUE", make_descriptor(Double::MAX_VALUE));
            PyDict_SetItemString(PY_TYPE(Double).tp_dict, "MIN_EXPONENT", make_descriptor(Double::MIN_EXPONENT));
            PyDict_SetItemString(PY_TYPE(Double).tp_dict, "MIN_NORMAL", make_descriptor(Double::MIN_NORMAL));
            PyDict_SetItemString(PY_TYPE(Double).tp_dict, "MIN_VALUE", make_descriptor(Double::MIN_VALUE));
            PyDict_SetItemString(PY_TYPE(Double).tp_dict, "NEGATIVE_INFINITY", make_descriptor(Double::NEGATIVE_INFINITY));
            PyDict_SetItemString(PY_TYPE(Double).tp_dict, "NaN", make_descriptor(Double::NaN));
            PyDict_SetItemString(PY_TYPE(Double).tp_dict, "POSITIVE_INFINITY", make_descriptor(Double::POSITIVE_INFINITY));
            PyDict_SetItemString(PY_TYPE(Double).tp_dict, "SIZE", make_descriptor(Double::SIZE));
            PyDict_SetItemString(PY_TYPE(Double).tp_dict, "TYPE", make_descriptor(::java::lang::t_Class::wrap_Object(*Double::TYPE)));
        }

        static PyObject *t_Double_cast_(PyTypeObject *type, PyObject *arg)
        {
            if (!(arg = castCheck(arg, Double::initializeClass, 1)))
                return NULL;
            return t_Double::wrap_Object(Double(((t_Double *) arg)->object.this$));
        }
        static PyObject *t_Double_instance_(PyTypeObject *type, PyObject *arg)
        {
            if (!castCheck(arg, Double::initializeClass, 0))
                Py_RETURN_FALSE;
            Py_RETURN_TRUE;
        }

        static int t_Double_init_(t_Double *self, PyObject *args, PyObject *kwds)
        {
            switch (PyTuple_GET_SIZE(args)) {
              case 1:
                {
                    jdouble a0;
                    Double object((jobject) NULL);

                    if (!parseArgs(args, "D", &a0))
                    {
                        INT_CALL(object = Double(a0));
                        self->object = object;
                        break;
                    }
                }
                {
                    ::java::lang::String a0((jobject) NULL);
                    Double object((jobject) NULL);

                    if (!parseArgs(args, "s", &a0))
                    {
                        INT_CALL(object = Double(a0));
                        self->object = object;
                        break;
                    }
                }
              default:
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
            }

            return 0;
        }

        static PyObject *t_Double_byteValue(t_Double *self, PyObject *args)
        {
            jbyte result;

            if (!parseArgs(args, ""))
            {
                OBJ_CALL(result = self->object.byteValue());
                return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(Double), (PyObject *) self, "byteValue", args, 2);
        }

        static PyObject *t_Double_compare(PyTypeObject *type, PyObject *args)
        {
            jdouble a0;
            jdouble a1;
            jint result;

            if (!parseArgs(args, "DD", &a0, &a1))
            {
                OBJ_CALL(result = ::java::lang::Double::compare(a0, a1));
                return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError(type, "compare", args);
            return NULL;
        }

        static PyObject *t_Double_compareTo(t_Double *self, PyObject *args)
        {
            switch (PyTuple_GET_SIZE(args)) {
              case 1:
                {
                    ::java::lang::Object a0((jobject) NULL);
                    jint result;

                    if (!parseArgs(args, "o", &a0))
                    {
                        OBJ_CALL(result = self->object.compareTo(a0));
                        return PyInt_FromLong((long) result);
                    }
                }
                {
                    Double a0((jobject) NULL);
                    jint result;

                    if (!parseArgs(args, "O", &::java::lang::PY_TYPE(Double), &a0))
                    {
                        OBJ_CALL(result = self->object.compareTo(a0));
                        return PyInt_FromLong((long) result);
                    }
                }
            }

            PyErr_SetArgsError((PyObject *) self, "compareTo", args);
            return NULL;
        }

        static PyObject *t_Double_doubleToLongBits(PyTypeObject *type, PyObject *arg)
        {
            jdouble a0;
            jlong result;

            if (!parseArg(arg, "D", &a0))
            {
                OBJ_CALL(result = ::java::lang::Double::doubleToLongBits(a0));
                return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            PyErr_SetArgsError(type, "doubleToLongBits", arg);
            return NULL;
        }

        static PyObject *t_Double_doubleToRawLongBits(PyTypeObject *type, PyObject *arg)
        {
            jdouble a0;
            jlong result;

            if (!parseArg(arg, "D", &a0))
            {
                OBJ_CALL(result = ::java::lang::Double::doubleToRawLongBits(a0));
                return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            PyErr_SetArgsError(type, "doubleToRawLongBits", arg);
            return NULL;
        }

        static PyObject *t_Double_doubleValue(t_Double *self, PyObject *args)
        {
            jdouble result;

            if (!parseArgs(args, ""))
            {
                OBJ_CALL(result = self->object.doubleValue());
                return PyFloat_FromDouble((double) result);
            }

            return callSuper(&PY_TYPE(Double), (PyObject *) self, "doubleValue", args, 2);
        }

        static PyObject *t_Double_equals(t_Double *self, PyObject *args)
        {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
                OBJ_CALL(result = self->object.equals(a0));
                Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(Double), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_Double_floatValue(t_Double *self, PyObject *args)
        {
            jfloat result;

            if (!parseArgs(args, ""))
            {
                OBJ_CALL(result = self->object.floatValue());
                return PyFloat_FromDouble((double) result);
            }

            return callSuper(&PY_TYPE(Double), (PyObject *) self, "floatValue", args, 2);
        }

        static PyObject *t_Double_hashCode(t_Double *self, PyObject *args)
        {
            jint result;

            if (!parseArgs(args, ""))
            {
                OBJ_CALL(result = self->object.hashCode());
                return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(Double), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_Double_intValue(t_Double *self, PyObject *args)
        {
            jint result;

            if (!parseArgs(args, ""))
            {
                OBJ_CALL(result = self->object.intValue());
                return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(Double), (PyObject *) self, "intValue", args, 2);
        }

        static PyObject *t_Double_isInfinite(t_Double *self)
        {
            jboolean result;
            OBJ_CALL(result = self->object.isInfinite());
            Py_RETURN_BOOL(result);
        }

        static PyObject *t_Double_isInfinite_(PyTypeObject *type, PyObject *arg)
        {
            jdouble a0;
            jboolean result;

            if (!parseArg(arg, "D", &a0))
            {
                OBJ_CALL(result = ::java::lang::Double::isInfinite(a0));
                Py_RETURN_BOOL(result);
            }

            PyErr_SetArgsError(type, "isInfinite_", arg);
            return NULL;
        }

        static PyObject *t_Double_isNaN(t_Double *self)
        {
            jboolean result;
            OBJ_CALL(result = self->object.isNaN());
            Py_RETURN_BOOL(result);
        }

        static PyObject *t_Double_isNaN_(PyTypeObject *type, PyObject *arg)
        {
            jdouble a0;
            jboolean result;

            if (!parseArg(arg, "D", &a0))
            {
                OBJ_CALL(result = ::java::lang::Double::isNaN(a0));
                Py_RETURN_BOOL(result);
            }

            PyErr_SetArgsError(type, "isNaN_", arg);
            return NULL;
        }

        static PyObject *t_Double_longBitsToDouble(PyTypeObject *type, PyObject *arg)
        {
            jlong a0;
            jdouble result;

            if (!parseArg(arg, "J", &a0))
            {
                OBJ_CALL(result = ::java::lang::Double::longBitsToDouble(a0));
                return PyFloat_FromDouble((double) result);
            }

            PyErr_SetArgsError(type, "longBitsToDouble", arg);
            return NULL;
        }

        static PyObject *t_Double_longValue(t_Double *self, PyObject *args)
        {
            jlong result;

            if (!parseArgs(args, ""))
            {
                OBJ_CALL(result = self->object.longValue());
                return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            return callSuper(&PY_TYPE(Double), (PyObject *) self, "longValue", args, 2);
        }

        static PyObject *t_Double_parseDouble(PyTypeObject *type, PyObject *arg)
        {
            ::java::lang::String a0((jobject) NULL);
            jdouble result;

            if (!parseArg(arg, "s", &a0))
            {
                OBJ_CALL(result = ::java::lang::Double::parseDouble(a0));
                return PyFloat_FromDouble((double) result);
            }

            PyErr_SetArgsError(type, "parseDouble", arg);
            return NULL;
        }

        static PyObject *t_Double_shortValue(t_Double *self, PyObject *args)
        {
            jshort result;

            if (!parseArgs(args, ""))
            {
                OBJ_CALL(result = self->object.shortValue());
                return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(Double), (PyObject *) self, "shortValue", args, 2);
        }

        static PyObject *t_Double_toHexString(PyTypeObject *type, PyObject *arg)
        {
            jdouble a0;
            ::java::lang::String result((jobject) NULL);

            if (!parseArg(arg, "D", &a0))
            {
                OBJ_CALL(result = ::java::lang::Double::toHexString(a0));
                return j2p(result);
            }

            PyErr_SetArgsError(type, "toHexString", arg);
            return NULL;
        }

        static PyObject *t_Double_toString(t_Double *self, PyObject *args)
        {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
                OBJ_CALL(result = self->object.toString());
                return j2p(result);
            }

            return callSuper(&PY_TYPE(Double), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_Double_toString_(PyTypeObject *type, PyObject *args)
        {
            jdouble a0;
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, "D", &a0))
            {
                OBJ_CALL(result = ::java::lang::Double::toString(a0));
                return j2p(result);
            }

            PyErr_SetArgsError(type, "toString_", args);
            return NULL;
        }

        static PyObject *t_Double_valueOf(PyTypeObject *type, PyObject *args)
        {
            switch (PyTuple_GET_SIZE(args)) {
              case 1:
                {
                    jdouble a0;
                    Double result((jobject) NULL);

                    if (!parseArgs(args, "D", &a0))
                    {
                        OBJ_CALL(result = ::java::lang::Double::valueOf(a0));
                        return t_Double::wrap_Object(result);
                    }
                }
                {
                    ::java::lang::String a0((jobject) NULL);
                    Double result((jobject) NULL);

                    if (!parseArgs(args, "s", &a0))
                    {
                        OBJ_CALL(result = ::java::lang::Double::valueOf(a0));
                        return t_Double::wrap_Object(result);
                    }
                }
            }

            PyErr_SetArgsError(type, "valueOf", args);
            return NULL;
        }

        static PyObject *t_Double_get__infinite(t_Double *self, void *data)
        {
            jboolean value;
            OBJ_CALL(value = self->object.isInfinite());
            Py_RETURN_BOOL(value);
        }

        static PyObject *t_Double_get__naN(t_Double *self, void *data)
        {
            jboolean value;
            OBJ_CALL(value = self->object.isNaN());
            Py_RETURN_BOOL(value);
        }
    }
}
#include <jni.h>
#include "JCCEnv.h"
#include "is/iclt/icenlp/runner/RunTriTagger.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace is {
    namespace iclt {
        namespace icenlp {
            namespace runner {

                ::java::lang::Class *RunTriTagger::class$ = NULL;
                jmethodID *RunTriTagger::mids$ = NULL;

                jclass RunTriTagger::initializeClass()
                {
                    if (!class$)
                    {

                        jclass cls = (jclass) env->findClass("is/iclt/icenlp/runner/RunTriTagger");

                        mids$ = new jmethodID[max_mid];
                        mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                        mids$[mid_main_4dd4540c] = env->getStaticMethodID(cls, "main", "([Ljava/lang/String;)V");
                        mids$[mid_finish_aa83a4b3] = env->getMethodID(cls, "finish", "(Ljava/util/Date;)V");

                        class$ = (::java::lang::Class *) new JObject(cls);
                    }
                    return (jclass) class$->this$;
                }

                RunTriTagger::RunTriTagger() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

                void RunTriTagger::main(const JArray< ::java::lang::String > & a0)
                {
                    jclass cls = initializeClass();
                    env->callStaticVoidMethod(cls, mids$[mid_main_4dd4540c], a0.this$);
                }
            }
        }
    }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace is {
    namespace iclt {
        namespace icenlp {
            namespace runner {
                static PyObject *t_RunTriTagger_cast_(PyTypeObject *type, PyObject *arg);
                static PyObject *t_RunTriTagger_instance_(PyTypeObject *type, PyObject *arg);
                static int t_RunTriTagger_init_(t_RunTriTagger *self, PyObject *args, PyObject *kwds);
                static PyObject *t_RunTriTagger_main(PyTypeObject *type, PyObject *arg);

                static PyMethodDef t_RunTriTagger__methods_[] = {
                    DECLARE_METHOD(t_RunTriTagger, cast_, METH_O | METH_CLASS),
                    DECLARE_METHOD(t_RunTriTagger, instance_, METH_O | METH_CLASS),
                    DECLARE_METHOD(t_RunTriTagger, main, METH_O | METH_CLASS),
                    { NULL, NULL, 0, NULL }
                };

                DECLARE_TYPE(RunTriTagger, t_RunTriTagger, ::java::lang::Object, RunTriTagger, t_RunTriTagger_init_, 0, 0, 0, 0, 0);

                void t_RunTriTagger::install(PyObject *module)
                {
                    installType(&PY_TYPE(RunTriTagger), module, "RunTriTagger", 0);
                }

                void t_RunTriTagger::initialize(PyObject *module)
                {
                    PyDict_SetItemString(PY_TYPE(RunTriTagger).tp_dict, "class_", make_descriptor(RunTriTagger::initializeClass, 1));
                    PyDict_SetItemString(PY_TYPE(RunTriTagger).tp_dict, "wrapfn_", make_descriptor(t_RunTriTagger::wrap_jobject));
                    PyDict_SetItemString(PY_TYPE(RunTriTagger).tp_dict, "boxfn_", make_descriptor(boxObject));
                }

                static PyObject *t_RunTriTagger_cast_(PyTypeObject *type, PyObject *arg)
                {
                    if (!(arg = castCheck(arg, RunTriTagger::initializeClass, 1)))
                        return NULL;
                    return t_RunTriTagger::wrap_Object(RunTriTagger(((t_RunTriTagger *) arg)->object.this$));
                }
                static PyObject *t_RunTriTagger_instance_(PyTypeObject *type, PyObject *arg)
                {
                    if (!castCheck(arg, RunTriTagger::initializeClass, 0))
                        Py_RETURN_FALSE;
                    Py_RETURN_TRUE;
                }

                static int t_RunTriTagger_init_(t_RunTriTagger *self, PyObject *args, PyObject *kwds)
                {
                    RunTriTagger object((jobject) NULL);

                    INT_CALL(object = RunTriTagger());
                    self->object = object;

                    return 0;
                }

                static PyObject *t_RunTriTagger_main(PyTypeObject *type, PyObject *arg)
                {
                    JArray< ::java::lang::String > a0((jobject) NULL);

                    if (!parseArg(arg, "[s", &a0))
                    {
                        OBJ_CALL(::is::iclt::icenlp::runner::RunTriTagger::main(a0));
                        Py_RETURN_NONE;
                    }

                    PyErr_SetArgsError(type, "main", arg);
                    return NULL;
                }
            }
        }
    }
}
#include <jni.h>
#include "JCCEnv.h"
#include "is/iclt/icenlp/core/iceparser/Func_QUAL.h"
#include "java/io/IOException.h"
#include "java/io/Reader.h"
#include "java/io/Writer.h"
#include "java/lang/Class.h"
#include "java/io/InputStream.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace is {
    namespace iclt {
        namespace icenlp {
            namespace core {
                namespace iceparser {

                    ::java::lang::Class *Func_QUAL::class$ = NULL;
                    jmethodID *Func_QUAL::mids$ = NULL;
                    jint Func_QUAL::YYEOF = (jint) 0;
                    jint Func_QUAL::YYINITIAL = (jint) 0;

                    jclass Func_QUAL::initializeClass()
                    {
                        if (!class$)
                        {

                            jclass cls = (jclass) env->findClass("is/iclt/icenlp/core/iceparser/Func_QUAL");

                            mids$ = new jmethodID[max_mid];
                            mids$[mid_init$_cf2e3c10] = env->getMethodID(cls, "<init>", "(Ljava/io/Reader;)V");
                            mids$[mid_init$_be2e4f90] = env->getMethodID(cls, "<init>", "(Ljava/io/InputStream;)V");
                            mids$[mid_main_4dd4540c] = env->getStaticMethodID(cls, "main", "([Ljava/lang/String;)V");
                            mids$[mid_parse_5bcd5850] = env->getMethodID(cls, "parse", "(Ljava/io/Writer;)V");
                            mids$[mid_yybegin_39c7bd3c] = env->getMethodID(cls, "yybegin", "(I)V");
                            mids$[mid_yycharat_39c7bd29] = env->getMethodID(cls, "yycharat", "(I)C");
                            mids$[mid_yyclose_54c6a166] = env->getMethodID(cls, "yyclose", "()V");
                            mids$[mid_yylength_54c6a179] = env->getMethodID(cls, "yylength", "()I");
                            mids$[mid_yylex_54c6a179] = env->getMethodID(cls, "yylex", "()I");
                            mids$[mid_yypushback_39c7bd3c] = env->getMethodID(cls, "yypushback", "(I)V");
                            mids$[mid_yyreset_cf2e3c10] = env->getMethodID(cls, "yyreset", "(Ljava/io/Reader;)V");
                            mids$[mid_yystate_54c6a179] = env->getMethodID(cls, "yystate", "()I");
                            mids$[mid_yytext_14c7b5c5] = env->getMethodID(cls, "yytext", "()Ljava/lang/String;");

                            class$ = (::java::lang::Class *) new JObject(cls);
                            cls = (jclass) class$->this$;

                            YYEOF = env->getStaticIntField(cls, "YYEOF");
                            YYINITIAL = env->getStaticIntField(cls, "YYINITIAL");
                        }
                        return (jclass) class$->this$;
                    }

                    Func_QUAL::Func_QUAL(const ::java::io::Reader & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_cf2e3c10, a0.this$)) {}

                    Func_QUAL::Func_QUAL(const ::java::io::InputStream & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_be2e4f90, a0.this$)) {}

                    void Func_QUAL::main(const JArray< ::java::lang::String > & a0)
                    {
                        jclass cls = initializeClass();
                        env->callStaticVoidMethod(cls, mids$[mid_main_4dd4540c], a0.this$);
                    }

                    void Func_QUAL::parse(const ::java::io::Writer & a0) const
                    {
                        env->callVoidMethod(this$, mids$[mid_parse_5bcd5850], a0.this$);
                    }

                    void Func_QUAL::yybegin(jint a0) const
                    {
                        env->callVoidMethod(this$, mids$[mid_yybegin_39c7bd3c], a0);
                    }

                    jchar Func_QUAL::yycharat(jint a0) const
                    {
                        return env->callCharMethod(this$, mids$[mid_yycharat_39c7bd29], a0);
                    }

                    void Func_QUAL::yyclose() const
                    {
                        env->callVoidMethod(this$, mids$[mid_yyclose_54c6a166]);
                    }

                    jint Func_QUAL::yylength() const
                    {
                        return env->callIntMethod(this$, mids$[mid_yylength_54c6a179]);
                    }

                    jint Func_QUAL::yylex() const
                    {
                        return env->callIntMethod(this$, mids$[mid_yylex_54c6a179]);
                    }

                    void Func_QUAL::yypushback(jint a0) const
                    {
                        env->callVoidMethod(this$, mids$[mid_yypushback_39c7bd3c], a0);
                    }

                    void Func_QUAL::yyreset(const ::java::io::Reader & a0) const
                    {
                        env->callVoidMethod(this$, mids$[mid_yyreset_cf2e3c10], a0.this$);
                    }

                    jint Func_QUAL::yystate() const
                    {
                        return env->callIntMethod(this$, mids$[mid_yystate_54c6a179]);
                    }

                    ::java::lang::String Func_QUAL::yytext() const
                    {
                        return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_yytext_14c7b5c5]));
                    }
                }
            }
        }
    }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace is {
    namespace iclt {
        namespace icenlp {
            namespace core {
                namespace iceparser {
                    static PyObject *t_Func_QUAL_cast_(PyTypeObject *type, PyObject *arg);
                    static PyObject *t_Func_QUAL_instance_(PyTypeObject *type, PyObject *arg);
                    static int t_Func_QUAL_init_(t_Func_QUAL *self, PyObject *args, PyObject *kwds);
                    static PyObject *t_Func_QUAL_main(PyTypeObject *type, PyObject *arg);
                    static PyObject *t_Func_QUAL_parse(t_Func_QUAL *self, PyObject *arg);
                    static PyObject *t_Func_QUAL_yybegin(t_Func_QUAL *self, PyObject *arg);
                    static PyObject *t_Func_QUAL_yycharat(t_Func_QUAL *self, PyObject *arg);
                    static PyObject *t_Func_QUAL_yyclose(t_Func_QUAL *self);
                    static PyObject *t_Func_QUAL_yylength(t_Func_QUAL *self);
                    static PyObject *t_Func_QUAL_yylex(t_Func_QUAL *self);
                    static PyObject *t_Func_QUAL_yypushback(t_Func_QUAL *self, PyObject *arg);
                    static PyObject *t_Func_QUAL_yyreset(t_Func_QUAL *self, PyObject *arg);
                    static PyObject *t_Func_QUAL_yystate(t_Func_QUAL *self);
                    static PyObject *t_Func_QUAL_yytext(t_Func_QUAL *self);

                    static PyMethodDef t_Func_QUAL__methods_[] = {
                        DECLARE_METHOD(t_Func_QUAL, cast_, METH_O | METH_CLASS),
                        DECLARE_METHOD(t_Func_QUAL, instance_, METH_O | METH_CLASS),
                        DECLARE_METHOD(t_Func_QUAL, main, METH_O | METH_CLASS),
                        DECLARE_METHOD(t_Func_QUAL, parse, METH_O),
                        DECLARE_METHOD(t_Func_QUAL, yybegin, METH_O),
                        DECLARE_METHOD(t_Func_QUAL, yycharat, METH_O),
                        DECLARE_METHOD(t_Func_QUAL, yyclose, METH_NOARGS),
                        DECLARE_METHOD(t_Func_QUAL, yylength, METH_NOARGS),
                        DECLARE_METHOD(t_Func_QUAL, yylex, METH_NOARGS),
                        DECLARE_METHOD(t_Func_QUAL, yypushback, METH_O),
                        DECLARE_METHOD(t_Func_QUAL, yyreset, METH_O),
                        DECLARE_METHOD(t_Func_QUAL, yystate, METH_NOARGS),
                        DECLARE_METHOD(t_Func_QUAL, yytext, METH_NOARGS),
                        { NULL, NULL, 0, NULL }
                    };

                    DECLARE_TYPE(Func_QUAL, t_Func_QUAL, ::java::lang::Object, Func_QUAL, t_Func_QUAL_init_, 0, 0, 0, 0, 0);

                    void t_Func_QUAL::install(PyObject *module)
                    {
                        installType(&PY_TYPE(Func_QUAL), module, "Func_QUAL", 0);
                    }

                    void t_Func_QUAL::initialize(PyObject *module)
                    {
                        PyDict_SetItemString(PY_TYPE(Func_QUAL).tp_dict, "class_", make_descriptor(Func_QUAL::initializeClass, 1));
                        PyDict_SetItemString(PY_TYPE(Func_QUAL).tp_dict, "wrapfn_", make_descriptor(t_Func_QUAL::wrap_jobject));
                        PyDict_SetItemString(PY_TYPE(Func_QUAL).tp_dict, "boxfn_", make_descriptor(boxObject));
                        Func_QUAL::initializeClass();
                        PyDict_SetItemString(PY_TYPE(Func_QUAL).tp_dict, "YYEOF", make_descriptor(Func_QUAL::YYEOF));
                        PyDict_SetItemString(PY_TYPE(Func_QUAL).tp_dict, "YYINITIAL", make_descriptor(Func_QUAL::YYINITIAL));
                    }

                    static PyObject *t_Func_QUAL_cast_(PyTypeObject *type, PyObject *arg)
                    {
                        if (!(arg = castCheck(arg, Func_QUAL::initializeClass, 1)))
                            return NULL;
                        return t_Func_QUAL::wrap_Object(Func_QUAL(((t_Func_QUAL *) arg)->object.this$));
                    }
                    static PyObject *t_Func_QUAL_instance_(PyTypeObject *type, PyObject *arg)
                    {
                        if (!castCheck(arg, Func_QUAL::initializeClass, 0))
                            Py_RETURN_FALSE;
                        Py_RETURN_TRUE;
                    }

                    static int t_Func_QUAL_init_(t_Func_QUAL *self, PyObject *args, PyObject *kwds)
                    {
                        switch (PyTuple_GET_SIZE(args)) {
                          case 1:
                            {
                                ::java::io::Reader a0((jobject) NULL);
                                Func_QUAL object((jobject) NULL);

                                if (!parseArgs(args, "k", ::java::io::Reader::initializeClass, &a0))
                                {
                                    INT_CALL(object = Func_QUAL(a0));
                                    self->object = object;
                                    break;
                                }
                            }
                            {
                                ::java::io::InputStream a0((jobject) NULL);
                                Func_QUAL object((jobject) NULL);

                                if (!parseArgs(args, "k", ::java::io::InputStream::initializeClass, &a0))
                                {
                                    INT_CALL(object = Func_QUAL(a0));
                                    self->object = object;
                                    break;
                                }
                            }
                          default:
                            PyErr_SetArgsError((PyObject *) self, "__init__", args);
                            return -1;
                        }

                        return 0;
                    }

                    static PyObject *t_Func_QUAL_main(PyTypeObject *type, PyObject *arg)
                    {
                        JArray< ::java::lang::String > a0((jobject) NULL);

                        if (!parseArg(arg, "[s", &a0))
                        {
                            OBJ_CALL(::is::iclt::icenlp::core::iceparser::Func_QUAL::main(a0));
                            Py_RETURN_NONE;
                        }

                        PyErr_SetArgsError(type, "main", arg);
                        return NULL;
                    }

                    static PyObject *t_Func_QUAL_parse(t_Func_QUAL *self, PyObject *arg)
                    {
                        ::java::io::Writer a0((jobject) NULL);

                        if (!parseArg(arg, "k", ::java::io::Writer::initializeClass, &a0))
                        {
                            OBJ_CALL(self->object.parse(a0));
                            Py_RETURN_NONE;
                        }

                        PyErr_SetArgsError((PyObject *) self, "parse", arg);
                        return NULL;
                    }

                    static PyObject *t_Func_QUAL_yybegin(t_Func_QUAL *self, PyObject *arg)
                    {
                        jint a0;

                        if (!parseArg(arg, "I", &a0))
                        {
                            OBJ_CALL(self->object.yybegin(a0));
                            Py_RETURN_NONE;
                        }

                        PyErr_SetArgsError((PyObject *) self, "yybegin", arg);
                        return NULL;
                    }

                    static PyObject *t_Func_QUAL_yycharat(t_Func_QUAL *self, PyObject *arg)
                    {
                        jint a0;
                        jchar result;

                        if (!parseArg(arg, "I", &a0))
                        {
                            OBJ_CALL(result = self->object.yycharat(a0));
                            return PyUnicode_FromUnicode((Py_UNICODE *) &result, 1);
                        }

                        PyErr_SetArgsError((PyObject *) self, "yycharat", arg);
                        return NULL;
                    }

                    static PyObject *t_Func_QUAL_yyclose(t_Func_QUAL *self)
                    {
                        OBJ_CALL(self->object.yyclose());
                        Py_RETURN_NONE;
                    }

                    static PyObject *t_Func_QUAL_yylength(t_Func_QUAL *self)
                    {
                        jint result;
                        OBJ_CALL(result = self->object.yylength());
                        return PyInt_FromLong((long) result);
                    }

                    static PyObject *t_Func_QUAL_yylex(t_Func_QUAL *self)
                    {
                        jint result;
                        OBJ_CALL(result = self->object.yylex());
                        return PyInt_FromLong((long) result);
                    }

                    static PyObject *t_Func_QUAL_yypushback(t_Func_QUAL *self, PyObject *arg)
                    {
                        jint a0;

                        if (!parseArg(arg, "I", &a0))
                        {
                            OBJ_CALL(self->object.yypushback(a0));
                            Py_RETURN_NONE;
                        }

                        PyErr_SetArgsError((PyObject *) self, "yypushback", arg);
                        return NULL;
                    }

                    static PyObject *t_Func_QUAL_yyreset(t_Func_QUAL *self, PyObject *arg)
                    {
                        ::java::io::Reader a0((jobject) NULL);

                        if (!parseArg(arg, "k", ::java::io::Reader::initializeClass, &a0))
                        {
                            OBJ_CALL(self->object.yyreset(a0));
                            Py_RETURN_NONE;
                        }

                        PyErr_SetArgsError((PyObject *) self, "yyreset", arg);
                        return NULL;
                    }

                    static PyObject *t_Func_QUAL_yystate(t_Func_QUAL *self)
                    {
                        jint result;
                        OBJ_CALL(result = self->object.yystate());
                        return PyInt_FromLong((long) result);
                    }

                    static PyObject *t_Func_QUAL_yytext(t_Func_QUAL *self)
                    {
                        ::java::lang::String result((jobject) NULL);
                        OBJ_CALL(result = self->object.yytext());
                        return j2p(result);
                    }
                }
            }
        }
    }
}
#include <jni.h>
#include "JCCEnv.h"
#include "is/iclt/icenlp/core/icemorphy/MorphoRuleVerb$Voice.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace is {
    namespace iclt {
        namespace icenlp {
            namespace core {
                namespace icemorphy {

                    ::java::lang::Class *MorphoRuleVerb$Voice::class$ = NULL;
                    jmethodID *MorphoRuleVerb$Voice::mids$ = NULL;
                    MorphoRuleVerb$Voice *MorphoRuleVerb$Voice::Active = NULL;
                    MorphoRuleVerb$Voice *MorphoRuleVerb$Voice::Middle = NULL;

                    jclass MorphoRuleVerb$Voice::initializeClass()
                    {
                        if (!class$)
                        {

                            jclass cls = (jclass) env->findClass("is/iclt/icenlp/core/icemorphy/MorphoRuleVerb$Voice");

                            mids$ = new jmethodID[max_mid];
                            mids$[mid_valueOf_195d74f1] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;)Lis/iclt/icenlp/core/icemorphy/MorphoRuleVerb$Voice;");
                            mids$[mid_values_b2aa1e5f] = env->getStaticMethodID(cls, "values", "()[Lis/iclt/icenlp/core/icemorphy/MorphoRuleVerb$Voice;");

                            class$ = (::java::lang::Class *) new JObject(cls);
                            cls = (jclass) class$->this$;

                            Active = new MorphoRuleVerb$Voice(env->getStaticObjectField(cls, "Active", "Lis/iclt/icenlp/core/icemorphy/MorphoRuleVerb$Voice;"));
                            Middle = new MorphoRuleVerb$Voice(env->getStaticObjectField(cls, "Middle", "Lis/iclt/icenlp/core/icemorphy/MorphoRuleVerb$Voice;"));
                        }
                        return (jclass) class$->this$;
                    }

                    MorphoRuleVerb$Voice MorphoRuleVerb$Voice::valueOf(const ::java::lang::String & a0)
                    {
                        jclass cls = initializeClass();
                        return MorphoRuleVerb$Voice(env->callStaticObjectMethod(cls, mids$[mid_valueOf_195d74f1], a0.this$));
                    }

                    JArray< MorphoRuleVerb$Voice > MorphoRuleVerb$Voice::values()
                    {
                        jclass cls = initializeClass();
                        return JArray< MorphoRuleVerb$Voice >(env->callStaticObjectMethod(cls, mids$[mid_values_b2aa1e5f]));
                    }
                }
            }
        }
    }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace is {
    namespace iclt {
        namespace icenlp {
            namespace core {
                namespace icemorphy {
                    static PyObject *t_MorphoRuleVerb$Voice_cast_(PyTypeObject *type, PyObject *arg);
                    static PyObject *t_MorphoRuleVerb$Voice_instance_(PyTypeObject *type, PyObject *arg);
                    static PyObject *t_MorphoRuleVerb$Voice_valueOf(PyTypeObject *type, PyObject *args);
                    static PyObject *t_MorphoRuleVerb$Voice_values(PyTypeObject *type);

                    static PyMethodDef t_MorphoRuleVerb$Voice__methods_[] = {
                        DECLARE_METHOD(t_MorphoRuleVerb$Voice, cast_, METH_O | METH_CLASS),
                        DECLARE_METHOD(t_MorphoRuleVerb$Voice, instance_, METH_O | METH_CLASS),
                        DECLARE_METHOD(t_MorphoRuleVerb$Voice, valueOf, METH_VARARGS | METH_CLASS),
                        DECLARE_METHOD(t_MorphoRuleVerb$Voice, values, METH_NOARGS | METH_CLASS),
                        { NULL, NULL, 0, NULL }
                    };

                    DECLARE_TYPE(MorphoRuleVerb$Voice, t_MorphoRuleVerb$Voice, ::java::lang::Enum, MorphoRuleVerb$Voice, abstract_init, 0, 0, 0, 0, 0);

                    void t_MorphoRuleVerb$Voice::install(PyObject *module)
                    {
                        installType(&PY_TYPE(MorphoRuleVerb$Voice), module, "MorphoRuleVerb$Voice", 0);
                    }

                    void t_MorphoRuleVerb$Voice::initialize(PyObject *module)
                    {
                        PyDict_SetItemString(PY_TYPE(MorphoRuleVerb$Voice).tp_dict, "class_", make_descriptor(MorphoRuleVerb$Voice::initializeClass, 1));
                        PyDict_SetItemString(PY_TYPE(MorphoRuleVerb$Voice).tp_dict, "wrapfn_", make_descriptor(t_MorphoRuleVerb$Voice::wrap_jobject));
                        PyDict_SetItemString(PY_TYPE(MorphoRuleVerb$Voice).tp_dict, "boxfn_", make_descriptor(boxObject));
                        MorphoRuleVerb$Voice::initializeClass();
                        PyDict_SetItemString(PY_TYPE(MorphoRuleVerb$Voice).tp_dict, "Active", make_descriptor(t_MorphoRuleVerb$Voice::wrap_Object(*MorphoRuleVerb$Voice::Active)));
                        PyDict_SetItemString(PY_TYPE(MorphoRuleVerb$Voice).tp_dict, "Middle", make_descriptor(t_MorphoRuleVerb$Voice::wrap_Object(*MorphoRuleVerb$Voice::Middle)));
                    }

                    static PyObject *t_MorphoRuleVerb$Voice_cast_(PyTypeObject *type, PyObject *arg)
                    {
                        if (!(arg = castCheck(arg, MorphoRuleVerb$Voice::initializeClass, 1)))
                            return NULL;
                        return t_MorphoRuleVerb$Voice::wrap_Object(MorphoRuleVerb$Voice(((t_MorphoRuleVerb$Voice *) arg)->object.this$));
                    }
                    static PyObject *t_MorphoRuleVerb$Voice_instance_(PyTypeObject *type, PyObject *arg)
                    {
                        if (!castCheck(arg, MorphoRuleVerb$Voice::initializeClass, 0))
                            Py_RETURN_FALSE;
                        Py_RETURN_TRUE;
                    }

                    static PyObject *t_MorphoRuleVerb$Voice_valueOf(PyTypeObject *type, PyObject *args)
                    {
                        ::java::lang::String a0((jobject) NULL);
                        MorphoRuleVerb$Voice result((jobject) NULL);

                        if (!parseArgs(args, "s", &a0))
                        {
                            OBJ_CALL(result = ::is::iclt::icenlp::core::icemorphy::MorphoRuleVerb$Voice::valueOf(a0));
                            return t_MorphoRuleVerb$Voice::wrap_Object(result);
                        }

                        return callSuper(type, "valueOf", args, 2);
                    }

                    static PyObject *t_MorphoRuleVerb$Voice_values(PyTypeObject *type)
                    {
                        JArray< MorphoRuleVerb$Voice > result((jobject) NULL);
                        OBJ_CALL(result = ::is::iclt::icenlp::core::icemorphy::MorphoRuleVerb$Voice::values());
                        return JArray<jobject>(result.this$).wrap(t_MorphoRuleVerb$Voice::wrap_jobject);
                    }
                }
            }
        }
    }
}
#include <jni.h>
#include "JCCEnv.h"
#include "is/iclt/icenlp/core/iceparser/Func_SUBJ2.h"
#include "java/io/IOException.h"
#include "java/io/Reader.h"
#include "java/io/Writer.h"
#include "java/lang/Class.h"
#include "java/io/InputStream.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace is {
    namespace iclt {
        namespace icenlp {
            namespace core {
                namespace iceparser {

                    ::java::lang::Class *Func_SUBJ2::class$ = NULL;
                    jmethodID *Func_SUBJ2::mids$ = NULL;
                    jint Func_SUBJ2::YYEOF = (jint) 0;
                    jint Func_SUBJ2::YYINITIAL = (jint) 0;

                    jclass Func_SUBJ2::initializeClass()
                    {
                        if (!class$)
                        {

                            jclass cls = (jclass) env->findClass("is/iclt/icenlp/core/iceparser/Func_SUBJ2");

                            mids$ = new jmethodID[max_mid];
                            mids$[mid_init$_cf2e3c10] = env->getMethodID(cls, "<init>", "(Ljava/io/Reader;)V");
                            mids$[mid_init$_be2e4f90] = env->getMethodID(cls, "<init>", "(Ljava/io/InputStream;)V");
                            mids$[mid_main_4dd4540c] = env->getStaticMethodID(cls, "main", "([Ljava/lang/String;)V");
                            mids$[mid_parse_5bcd5850] = env->getMethodID(cls, "parse", "(Ljava/io/Writer;)V");
                            mids$[mid_yybegin_39c7bd3c] = env->getMethodID(cls, "yybegin", "(I)V");
                            mids$[mid_yycharat_39c7bd29] = env->getMethodID(cls, "yycharat", "(I)C");
                            mids$[mid_yyclose_54c6a166] = env->getMethodID(cls, "yyclose", "()V");
                            mids$[mid_yylength_54c6a179] = env->getMethodID(cls, "yylength", "()I");
                            mids$[mid_yylex_54c6a179] = env->getMethodID(cls, "yylex", "()I");
                            mids$[mid_yypushback_39c7bd3c] = env->getMethodID(cls, "yypushback", "(I)V");
                            mids$[mid_yyreset_cf2e3c10] = env->getMethodID(cls, "yyreset", "(Ljava/io/Reader;)V");
                            mids$[mid_yystate_54c6a179] = env->getMethodID(cls, "yystate", "()I");
                            mids$[mid_yytext_14c7b5c5] = env->getMethodID(cls, "yytext", "()Ljava/lang/String;");

                            class$ = (::java::lang::Class *) new JObject(cls);
                            cls = (jclass) class$->this$;

                            YYEOF = env->getStaticIntField(cls, "YYEOF");
                            YYINITIAL = env->getStaticIntField(cls, "YYINITIAL");
                        }
                        return (jclass) class$->this$;
                    }

                    Func_SUBJ2::Func_SUBJ2(const ::java::io::Reader & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_cf2e3c10, a0.this$)) {}

                    Func_SUBJ2::Func_SUBJ2(const ::java::io::InputStream & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_be2e4f90, a0.this$)) {}

                    void Func_SUBJ2::main(const JArray< ::java::lang::String > & a0)
                    {
                        jclass cls = initializeClass();
                        env->callStaticVoidMethod(cls, mids$[mid_main_4dd4540c], a0.this$);
                    }

                    void Func_SUBJ2::parse(const ::java::io::Writer & a0) const
                    {
                        env->callVoidMethod(this$, mids$[mid_parse_5bcd5850], a0.this$);
                    }

                    void Func_SUBJ2::yybegin(jint a0) const
                    {
                        env->callVoidMethod(this$, mids$[mid_yybegin_39c7bd3c], a0);
                    }

                    jchar Func_SUBJ2::yycharat(jint a0) const
                    {
                        return env->callCharMethod(this$, mids$[mid_yycharat_39c7bd29], a0);
                    }

                    void Func_SUBJ2::yyclose() const
                    {
                        env->callVoidMethod(this$, mids$[mid_yyclose_54c6a166]);
                    }

                    jint Func_SUBJ2::yylength() const
                    {
                        return env->callIntMethod(this$, mids$[mid_yylength_54c6a179]);
                    }

                    jint Func_SUBJ2::yylex() const
                    {
                        return env->callIntMethod(this$, mids$[mid_yylex_54c6a179]);
                    }

                    void Func_SUBJ2::yypushback(jint a0) const
                    {
                        env->callVoidMethod(this$, mids$[mid_yypushback_39c7bd3c], a0);
                    }

                    void Func_SUBJ2::yyreset(const ::java::io::Reader & a0) const
                    {
                        env->callVoidMethod(this$, mids$[mid_yyreset_cf2e3c10], a0.this$);
                    }

                    jint Func_SUBJ2::yystate() const
                    {
                        return env->callIntMethod(this$, mids$[mid_yystate_54c6a179]);
                    }

                    ::java::lang::String Func_SUBJ2::yytext() const
                    {
                        return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_yytext_14c7b5c5]));
                    }
                }
            }
        }
    }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace is {
    namespace iclt {
        namespace icenlp {
            namespace core {
                namespace iceparser {
                    static PyObject *t_Func_SUBJ2_cast_(PyTypeObject *type, PyObject *arg);
                    static PyObject *t_Func_SUBJ2_instance_(PyTypeObject *type, PyObject *arg);
                    static int t_Func_SUBJ2_init_(t_Func_SUBJ2 *self, PyObject *args, PyObject *kwds);
                    static PyObject *t_Func_SUBJ2_main(PyTypeObject *type, PyObject *arg);
                    static PyObject *t_Func_SUBJ2_parse(t_Func_SUBJ2 *self, PyObject *arg);
                    static PyObject *t_Func_SUBJ2_yybegin(t_Func_SUBJ2 *self, PyObject *arg);
                    static PyObject *t_Func_SUBJ2_yycharat(t_Func_SUBJ2 *self, PyObject *arg);
                    static PyObject *t_Func_SUBJ2_yyclose(t_Func_SUBJ2 *self);
                    static PyObject *t_Func_SUBJ2_yylength(t_Func_SUBJ2 *self);
                    static PyObject *t_Func_SUBJ2_yylex(t_Func_SUBJ2 *self);
                    static PyObject *t_Func_SUBJ2_yypushback(t_Func_SUBJ2 *self, PyObject *arg);
                    static PyObject *t_Func_SUBJ2_yyreset(t_Func_SUBJ2 *self, PyObject *arg);
                    static PyObject *t_Func_SUBJ2_yystate(t_Func_SUBJ2 *self);
                    static PyObject *t_Func_SUBJ2_yytext(t_Func_SUBJ2 *self);

                    static PyMethodDef t_Func_SUBJ2__methods_[] = {
                        DECLARE_METHOD(t_Func_SUBJ2, cast_, METH_O | METH_CLASS),
                        DECLARE_METHOD(t_Func_SUBJ2, instance_, METH_O | METH_CLASS),
                        DECLARE_METHOD(t_Func_SUBJ2, main, METH_O | METH_CLASS),
                        DECLARE_METHOD(t_Func_SUBJ2, parse, METH_O),
                        DECLARE_METHOD(t_Func_SUBJ2, yybegin, METH_O),
                        DECLARE_METHOD(t_Func_SUBJ2, yycharat, METH_O),
                        DECLARE_METHOD(t_Func_SUBJ2, yyclose, METH_NOARGS),
                        DECLARE_METHOD(t_Func_SUBJ2, yylength, METH_NOARGS),
                        DECLARE_METHOD(t_Func_SUBJ2, yylex, METH_NOARGS),
                        DECLARE_METHOD(t_Func_SUBJ2, yypushback, METH_O),
                        DECLARE_METHOD(t_Func_SUBJ2, yyreset, METH_O),
                        DECLARE_METHOD(t_Func_SUBJ2, yystate, METH_NOARGS),
                        DECLARE_METHOD(t_Func_SUBJ2, yytext, METH_NOARGS),
                        { NULL, NULL, 0, NULL }
                    };

                    DECLARE_TYPE(Func_SUBJ2, t_Func_SUBJ2, ::java::lang::Object, Func_SUBJ2, t_Func_SUBJ2_init_, 0, 0, 0, 0, 0);

                    void t_Func_SUBJ2::install(PyObject *module)
                    {
                        installType(&PY_TYPE(Func_SUBJ2), module, "Func_SUBJ2", 0);
                    }

                    void t_Func_SUBJ2::initialize(PyObject *module)
                    {
                        PyDict_SetItemString(PY_TYPE(Func_SUBJ2).tp_dict, "class_", make_descriptor(Func_SUBJ2::initializeClass, 1));
                        PyDict_SetItemString(PY_TYPE(Func_SUBJ2).tp_dict, "wrapfn_", make_descriptor(t_Func_SUBJ2::wrap_jobject));
                        PyDict_SetItemString(PY_TYPE(Func_SUBJ2).tp_dict, "boxfn_", make_descriptor(boxObject));
                        Func_SUBJ2::initializeClass();
                        PyDict_SetItemString(PY_TYPE(Func_SUBJ2).tp_dict, "YYEOF", make_descriptor(Func_SUBJ2::YYEOF));
                        PyDict_SetItemString(PY_TYPE(Func_SUBJ2).tp_dict, "YYINITIAL", make_descriptor(Func_SUBJ2::YYINITIAL));
                    }

                    static PyObject *t_Func_SUBJ2_cast_(PyTypeObject *type, PyObject *arg)
                    {
                        if (!(arg = castCheck(arg, Func_SUBJ2::initializeClass, 1)))
                            return NULL;
                        return t_Func_SUBJ2::wrap_Object(Func_SUBJ2(((t_Func_SUBJ2 *) arg)->object.this$));
                    }
                    static PyObject *t_Func_SUBJ2_instance_(PyTypeObject *type, PyObject *arg)
                    {
                        if (!castCheck(arg, Func_SUBJ2::initializeClass, 0))
                            Py_RETURN_FALSE;
                        Py_RETURN_TRUE;
                    }

                    static int t_Func_SUBJ2_init_(t_Func_SUBJ2 *self, PyObject *args, PyObject *kwds)
                    {
                        switch (PyTuple_GET_SIZE(args)) {
                          case 1:
                            {
                                ::java::io::Reader a0((jobject) NULL);
                                Func_SUBJ2 object((jobject) NULL);

                                if (!parseArgs(args, "k", ::java::io::Reader::initializeClass, &a0))
                                {
                                    INT_CALL(object = Func_SUBJ2(a0));
                                    self->object = object;
                                    break;
                                }
                            }
                            {
                                ::java::io::InputStream a0((jobject) NULL);
                                Func_SUBJ2 object((jobject) NULL);

                                if (!parseArgs(args, "k", ::java::io::InputStream::initializeClass, &a0))
                                {
                                    INT_CALL(object = Func_SUBJ2(a0));
                                    self->object = object;
                                    break;
                                }
                            }
                          default:
                            PyErr_SetArgsError((PyObject *) self, "__init__", args);
                            return -1;
                        }

                        return 0;
                    }

                    static PyObject *t_Func_SUBJ2_main(PyTypeObject *type, PyObject *arg)
                    {
                        JArray< ::java::lang::String > a0((jobject) NULL);

                        if (!parseArg(arg, "[s", &a0))
                        {
                            OBJ_CALL(::is::iclt::icenlp::core::iceparser::Func_SUBJ2::main(a0));
                            Py_RETURN_NONE;
                        }

                        PyErr_SetArgsError(type, "main", arg);
                        return NULL;
                    }

                    static PyObject *t_Func_SUBJ2_parse(t_Func_SUBJ2 *self, PyObject *arg)
                    {
                        ::java::io::Writer a0((jobject) NULL);

                        if (!parseArg(arg, "k", ::java::io::Writer::initializeClass, &a0))
                        {
                            OBJ_CALL(self->object.parse(a0));
                            Py_RETURN_NONE;
                        }

                        PyErr_SetArgsError((PyObject *) self, "parse", arg);
                        return NULL;
                    }

                    static PyObject *t_Func_SUBJ2_yybegin(t_Func_SUBJ2 *self, PyObject *arg)
                    {
                        jint a0;

                        if (!parseArg(arg, "I", &a0))
                        {
                            OBJ_CALL(self->object.yybegin(a0));
                            Py_RETURN_NONE;
                        }

                        PyErr_SetArgsError((PyObject *) self, "yybegin", arg);
                        return NULL;
                    }

                    static PyObject *t_Func_SUBJ2_yycharat(t_Func_SUBJ2 *self, PyObject *arg)
                    {
                        jint a0;
                        jchar result;

                        if (!parseArg(arg, "I", &a0))
                        {
                            OBJ_CALL(result = self->object.yycharat(a0));
                            return PyUnicode_FromUnicode((Py_UNICODE *) &result, 1);
                        }

                        PyErr_SetArgsError((PyObject *) self, "yycharat", arg);
                        return NULL;
                    }

                    static PyObject *t_Func_SUBJ2_yyclose(t_Func_SUBJ2 *self)
                    {
                        OBJ_CALL(self->object.yyclose());
                        Py_RETURN_NONE;
                    }

                    static PyObject *t_Func_SUBJ2_yylength(t_Func_SUBJ2 *self)
                    {
                        jint result;
                        OBJ_CALL(result = self->object.yylength());
                        return PyInt_FromLong((long) result);
                    }

                    static PyObject *t_Func_SUBJ2_yylex(t_Func_SUBJ2 *self)
                    {
                        jint result;
                        OBJ_CALL(result = self->object.yylex());
                        return PyInt_FromLong((long) result);
                    }

                    static PyObject *t_Func_SUBJ2_yypushback(t_Func_SUBJ2 *self, PyObject *arg)
                    {
                        jint a0;

                        if (!parseArg(arg, "I", &a0))
                        {
                            OBJ_CALL(self->object.yypushback(a0));
                            Py_RETURN_NONE;
                        }

                        PyErr_SetArgsError((PyObject *) self, "yypushback", arg);
                        return NULL;
                    }

                    static PyObject *t_Func_SUBJ2_yyreset(t_Func_SUBJ2 *self, PyObject *arg)
                    {
                        ::java::io::Reader a0((jobject) NULL);

                        if (!parseArg(arg, "k", ::java::io::Reader::initializeClass, &a0))
                        {
                            OBJ_CALL(self->object.yyreset(a0));
                            Py_RETURN_NONE;
                        }

                        PyErr_SetArgsError((PyObject *) self, "yyreset", arg);
                        return NULL;
                    }

                    static PyObject *t_Func_SUBJ2_yystate(t_Func_SUBJ2 *self)
                    {
                        jint result;
                        OBJ_CALL(result = self->object.yystate());
                        return PyInt_FromLong((long) result);
                    }

                    static PyObject *t_Func_SUBJ2_yytext(t_Func_SUBJ2 *self)
                    {
                        ::java::lang::String result((jobject) NULL);
                        OBJ_CALL(result = self->object.yytext());
                        return j2p(result);
                    }
                }
            }
        }
    }
}
#include <jni.h>
#include "JCCEnv.h"
#include "is/iclt/icenlp/core/icemorphy/MorphoRuleVerb.h"
#include "is/iclt/icenlp/core/icemorphy/MorphoRuleVerb$Mood.h"
#include "is/iclt/icenlp/core/icemorphy/IceMorphy$MorphoClass.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "is/iclt/icenlp/core/icemorphy/MorphoRuleVerb$Voice.h"
#include "JArray.h"

namespace is {
    namespace iclt {
        namespace icenlp {
            namespace core {
                namespace icemorphy {

                    ::java::lang::Class *MorphoRuleVerb::class$ = NULL;
                    jmethodID *MorphoRuleVerb::mids$ = NULL;

                    jclass MorphoRuleVerb::initializeClass()
                    {
                        if (!class$)
                        {

                            jclass cls = (jclass) env->findClass("is/iclt/icenlp/core/icemorphy/MorphoRuleVerb");

                            mids$ = new jmethodID[max_mid];
                            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                            mids$[mid_init$_7d3c0178] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;ILis/iclt/icenlp/core/icemorphy/IceMorphy$MorphoClass;Lis/iclt/icenlp/core/icemorphy/MorphoRuleVerb$Mood;Lis/iclt/icenlp/core/icemorphy/MorphoRuleVerb$Voice;C)V");

                            class$ = (::java::lang::Class *) new JObject(cls);
                        }
                        return (jclass) class$->this$;
                    }

                    MorphoRuleVerb::MorphoRuleVerb() : ::is::iclt::icenlp::core::icemorphy::MorphoRule(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

                    MorphoRuleVerb::MorphoRuleVerb(const ::java::lang::String & a0, jint a1, const ::is::iclt::icenlp::core::icemorphy::IceMorphy$MorphoClass & a2, const ::is::iclt::icenlp::core::icemorphy::MorphoRuleVerb$Mood & a3, const ::is::iclt::icenlp::core::icemorphy::MorphoRuleVerb$Voice & a4, jchar a5) : ::is::iclt::icenlp::core::icemorphy::MorphoRule(env->newObject(initializeClass, &mids$, mid_init$_7d3c0178, a0.this$, a1, a2.this$, a3.this$, a4.this$, a5)) {}
                }
            }
        }
    }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace is {
    namespace iclt {
        namespace icenlp {
            namespace core {
                namespace icemorphy {
                    static PyObject *t_MorphoRuleVerb_cast_(PyTypeObject *type, PyObject *arg);
                    static PyObject *t_MorphoRuleVerb_instance_(PyTypeObject *type, PyObject *arg);
                    static int t_MorphoRuleVerb_init_(t_MorphoRuleVerb *self, PyObject *args, PyObject *kwds);

                    static PyMethodDef t_MorphoRuleVerb__methods_[] = {
                        DECLARE_METHOD(t_MorphoRuleVerb, cast_, METH_O | METH_CLASS),
                        DECLARE_METHOD(t_MorphoRuleVerb, instance_, METH_O | METH_CLASS),
                        { NULL, NULL, 0, NULL }
                    };

                    DECLARE_TYPE(MorphoRuleVerb, t_MorphoRuleVerb, ::is::iclt::icenlp::core::icemorphy::MorphoRule, MorphoRuleVerb, t_MorphoRuleVerb_init_, 0, 0, 0, 0, 0);

                    void t_MorphoRuleVerb::install(PyObject *module)
                    {
                        installType(&PY_TYPE(MorphoRuleVerb), module, "MorphoRuleVerb", 0);
                        PyDict_SetItemString(PY_TYPE(MorphoRuleVerb).tp_dict, "Voice", make_descriptor(&PY_TYPE(MorphoRuleVerb$Voice)));
                        PyDict_SetItemString(PY_TYPE(MorphoRuleVerb).tp_dict, "Mood", make_descriptor(&PY_TYPE(MorphoRuleVerb$Mood)));
                    }

                    void t_MorphoRuleVerb::initialize(PyObject *module)
                    {
                        PyDict_SetItemString(PY_TYPE(MorphoRuleVerb).tp_dict, "class_", make_descriptor(MorphoRuleVerb::initializeClass, 1));
                        PyDict_SetItemString(PY_TYPE(MorphoRuleVerb).tp_dict, "wrapfn_", make_descriptor(t_MorphoRuleVerb::wrap_jobject));
                        PyDict_SetItemString(PY_TYPE(MorphoRuleVerb).tp_dict, "boxfn_", make_descriptor(boxObject));
                    }

                    static PyObject *t_MorphoRuleVerb_cast_(PyTypeObject *type, PyObject *arg)
                    {
                        if (!(arg = castCheck(arg, MorphoRuleVerb::initializeClass, 1)))
                            return NULL;
                        return t_MorphoRuleVerb::wrap_Object(MorphoRuleVerb(((t_MorphoRuleVerb *) arg)->object.this$));
                    }
                    static PyObject *t_MorphoRuleVerb_instance_(PyTypeObject *type, PyObject *arg)
                    {
                        if (!castCheck(arg, MorphoRuleVerb::initializeClass, 0))
                            Py_RETURN_FALSE;
                        Py_RETURN_TRUE;
                    }

                    static int t_MorphoRuleVerb_init_(t_MorphoRuleVerb *self, PyObject *args, PyObject *kwds)
                    {
                        switch (PyTuple_GET_SIZE(args)) {
                          case 0:
                            {
                                MorphoRuleVerb object((jobject) NULL);

                                INT_CALL(object = MorphoRuleVerb());
                                self->object = object;
                                break;
                            }
                            goto err;
                          case 6:
                            {
                                ::java::lang::String a0((jobject) NULL);
                                jint a1;
                                ::is::iclt::icenlp::core::icemorphy::IceMorphy$MorphoClass a2((jobject) NULL);
                                ::is::iclt::icenlp::core::icemorphy::MorphoRuleVerb$Mood a3((jobject) NULL);
                                ::is::iclt::icenlp::core::icemorphy::MorphoRuleVerb$Voice a4((jobject) NULL);
                                jchar a5;
                                MorphoRuleVerb object((jobject) NULL);

                                if (!parseArgs(args, "sIkkkC", ::is::iclt::icenlp::core::icemorphy::IceMorphy$MorphoClass::initializeClass, ::is::iclt::icenlp::core::icemorphy::MorphoRuleVerb$Mood::initializeClass, ::is::iclt::icenlp::core::icemorphy::MorphoRuleVerb$Voice::initializeClass, &a0, &a1, &a2, &a3, &a4, &a5))
                                {
                                    INT_CALL(object = MorphoRuleVerb(a0, a1, a2, a3, a4, a5));
                                    self->object = object;
                                    break;
                                }
                            }
                          default:
                          err:
                            PyErr_SetArgsError((PyObject *) self, "__init__", args);
                            return -1;
                        }

                        return 0;
                    }
                }
            }
        }
    }
}
#include <jni.h>
#include "JCCEnv.h"
#include "is/iclt/icenlp/core/utils/IceLog.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace is {
    namespace iclt {
        namespace icenlp {
            namespace core {
                namespace utils {

                    ::java::lang::Class *IceLog::class$ = NULL;
                    jmethodID *IceLog::mids$ = NULL;

                    jclass IceLog::initializeClass()
                    {
                        if (!class$)
                        {

                            jclass cls = (jclass) env->findClass("is/iclt/icenlp/core/utils/IceLog");

                            mids$ = new jmethodID[max_mid];
                            mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
                            mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
                            mids$[mid_log_5fdc3f48] = env->getMethodID(cls, "log", "(Ljava/lang/String;)V");

                            class$ = (::java::lang::Class *) new JObject(cls);
                        }
                        return (jclass) class$->this$;
                    }

                    IceLog::IceLog(const ::java::lang::String & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}

                    void IceLog::close() const
                    {
                        env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
                    }

                    void IceLog::log(const ::java::lang::String & a0) const
                    {
                        env->callVoidMethod(this$, mids$[mid_log_5fdc3f48], a0.this$);
                    }
                }
            }
        }
    }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace is {
    namespace iclt {
        namespace icenlp {
            namespace core {
                namespace utils {
                    static PyObject *t_IceLog_cast_(PyTypeObject *type, PyObject *arg);
                    static PyObject *t_IceLog_instance_(PyTypeObject *type, PyObject *arg);
                    static int t_IceLog_init_(t_IceLog *self, PyObject *args, PyObject *kwds);
                    static PyObject *t_IceLog_close(t_IceLog *self);
                    static PyObject *t_IceLog_log(t_IceLog *self, PyObject *arg);

                    static PyMethodDef t_IceLog__methods_[] = {
                        DECLARE_METHOD(t_IceLog, cast_, METH_O | METH_CLASS),
                        DECLARE_METHOD(t_IceLog, instance_, METH_O | METH_CLASS),
                        DECLARE_METHOD(t_IceLog, close, METH_NOARGS),
                        DECLARE_METHOD(t_IceLog, log, METH_O),
                        { NULL, NULL, 0, NULL }
                    };

                    DECLARE_TYPE(IceLog, t_IceLog, ::java::lang::Object, IceLog, t_IceLog_init_, 0, 0, 0, 0, 0);

                    void t_IceLog::install(PyObject *module)
                    {
                        installType(&PY_TYPE(IceLog), module, "IceLog", 0);
                    }

                    void t_IceLog::initialize(PyObject *module)
                    {
                        PyDict_SetItemString(PY_TYPE(IceLog).tp_dict, "class_", make_descriptor(IceLog::initializeClass, 1));
                        PyDict_SetItemString(PY_TYPE(IceLog).tp_dict, "wrapfn_", make_descriptor(t_IceLog::wrap_jobject));
                        PyDict_SetItemString(PY_TYPE(IceLog).tp_dict, "boxfn_", make_descriptor(boxObject));
                    }

                    static PyObject *t_IceLog_cast_(PyTypeObject *type, PyObject *arg)
                    {
                        if (!(arg = castCheck(arg, IceLog::initializeClass, 1)))
                            return NULL;
                        return t_IceLog::wrap_Object(IceLog(((t_IceLog *) arg)->object.this$));
                    }
                    static PyObject *t_IceLog_instance_(PyTypeObject *type, PyObject *arg)
                    {
                        if (!castCheck(arg, IceLog::initializeClass, 0))
                            Py_RETURN_FALSE;
                        Py_RETURN_TRUE;
                    }

                    static int t_IceLog_init_(t_IceLog *self, PyObject *args, PyObject *kwds)
                    {
                        ::java::lang::String a0((jobject) NULL);
                        IceLog object((jobject) NULL);

                        if (!parseArgs(args, "s", &a0))
                        {
                            INT_CALL(object = IceLog(a0));
                            self->object = object;
                        }
                        else
                        {
                            PyErr_SetArgsError((PyObject *) self, "__init__", args);
                            return -1;
                        }

                        return 0;
                    }

                    static PyObject *t_IceLog_close(t_IceLog *self)
                    {
                        OBJ_CALL(self->object.close());
                        Py_RETURN_NONE;
                    }

                    static PyObject *t_IceLog_log(t_IceLog *self, PyObject *arg)
                    {
                        ::java::lang::String a0((jobject) NULL);

                        if (!parseArg(arg, "s", &a0))
                        {
                            OBJ_CALL(self->object.log(a0));
                            Py_RETURN_NONE;
                        }

                        PyErr_SetArgsError((PyObject *) self, "log", arg);
                        return NULL;
                    }
                }
            }
        }
    }
}
#include <jni.h>
#include "JCCEnv.h"
#include "is/iclt/icenlp/core/icetagger/IceTagger.h"
#include "java/util/ArrayList.h"
#include "is/iclt/icenlp/core/utils/Lexicon.h"
#include "is/iclt/icenlp/core/utils/IceLog.h"
#include "is/iclt/icenlp/core/icemorphy/IceMorphy.h"
#include "java/lang/Class.h"
#include "is/iclt/icenlp/core/utils/Idioms.h"
#include "is/iclt/icenlp/core/tritagger/TriTagger.h"
#include "is/iclt/icenlp/core/icetagger/IceTagger$HmmModelType.h"
#include "java/lang/String.h"
#include "is/iclt/icenlp/core/tokenizer/IceTokenTags.h"
#include "JArray.h"

namespace is {
    namespace iclt {
        namespace icenlp {
            namespace core {
                namespace icetagger {

                    ::java::lang::Class *IceTagger::class$ = NULL;
                    jmethodID *IceTagger::mids$ = NULL;
                    jint IceTagger::sentenceStartLowerCase = (jint) 0;
                    jint IceTagger::sentenceStartUpperCase = (jint) 0;

                    jclass IceTagger::initializeClass()
                    {
                        if (!class$)
                        {

                            jclass cls = (jclass) env->findClass("is/iclt/icenlp/core/icetagger/IceTagger");

                            mids$ = new jmethodID[max_mid];
                            mids$[mid_init$_6e310e5b] = env->getMethodID(cls, "<init>", "(ILis/iclt/icenlp/core/utils/IceLog;Lis/iclt/icenlp/core/icemorphy/IceMorphy;Lis/iclt/icenlp/core/utils/Lexicon;Lis/iclt/icenlp/core/utils/Lexicon;Lis/iclt/icenlp/core/utils/Idioms;Lis/iclt/icenlp/core/utils/Lexicon;Lis/iclt/icenlp/core/utils/Lexicon;Lis/iclt/icenlp/core/utils/Lexicon;ZZLis/iclt/icenlp/core/tritagger/TriTagger;Lis/iclt/icenlp/core/icetagger/IceTagger$HmmModelType;)V");
                            mids$[mid_forceAgreement_281ca35a] = env->getMethodID(cls, "forceAgreement", "(Lis/iclt/icenlp/core/tokenizer/IceTokenTags;Lis/iclt/icenlp/core/tokenizer/IceTokenTags;)V");
                            mids$[mid_getEndWithHmmModel_54c6a16a] = env->getMethodID(cls, "getEndWithHmmModel", "()Z");
                            mids$[mid_getNumAmbiguousTokens_54c6a179] = env->getMethodID(cls, "getNumAmbiguousTokens", "()I");
                            mids$[mid_getStartWithHmmModel_54c6a16a] = env->getMethodID(cls, "getStartWithHmmModel", "()Z");
                            mids$[mid_getTagMaxFreq_e57c73cb] = env->getMethodID(cls, "getTagMaxFreq", "(Lis/iclt/icenlp/core/tokenizer/IceTokenTags;)Ljava/lang/String;");
                            mids$[mid_getTotalTags_54c6a179] = env->getMethodID(cls, "getTotalTags", "()I");
                            mids$[mid_getTotalTagsAmbiguous_54c6a179] = env->getMethodID(cls, "getTotalTagsAmbiguous", "()I");
                            mids$[mid_initStatistics_54c6a166] = env->getMethodID(cls, "initStatistics", "()V");
                            mids$[mid_setHmmModelType_50cf6b0f] = env->getMethodID(cls, "setHmmModelType", "(Lis/iclt/icenlp/core/icetagger/IceTagger$HmmModelType;)V");
                            mids$[mid_setTriTagger_ef785e23] = env->getMethodID(cls, "setTriTagger", "(Lis/iclt/icenlp/core/tritagger/TriTagger;)V");
                            mids$[mid_tagTokens_b3f662f9] = env->getMethodID(cls, "tagTokens", "(Ljava/util/ArrayList;)V");

                            class$ = (::java::lang::Class *) new JObject(cls);
                            cls = (jclass) class$->this$;

                            sentenceStartLowerCase = env->getStaticIntField(cls, "sentenceStartLowerCase");
                            sentenceStartUpperCase = env->getStaticIntField(cls, "sentenceStartUpperCase");
                        }
                        return (jclass) class$->this$;
                    }

                    IceTagger::IceTagger(jint a0, const ::is::iclt::icenlp::core::utils::IceLog & a1, const ::is::iclt::icenlp::core::icemorphy::IceMorphy & a2, const ::is::iclt::icenlp::core::utils::Lexicon & a3, const ::is::iclt::icenlp::core::utils::Lexicon & a4, const ::is::iclt::icenlp::core::utils::Idioms & a5, const ::is::iclt::icenlp::core::utils::Lexicon & a6, const ::is::iclt::icenlp::core::utils::Lexicon & a7, const ::is::iclt::icenlp::core::utils::Lexicon & a8, jboolean a9, jboolean a10, const ::is::iclt::icenlp::core::tritagger::TriTagger & a11, const ::is::iclt::icenlp::core::icetagger::IceTagger$HmmModelType & a12) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_6e310e5b, a0, a1.this$, a2.this$, a3.this$, a4.this$, a5.this$, a6.this$, a7.this$, a8.this$, a9, a10, a11.this$, a12.this$)) {}

                    void IceTagger::forceAgreement(const ::is::iclt::icenlp::core::tokenizer::IceTokenTags & a0, const ::is::iclt::icenlp::core::tokenizer::IceTokenTags & a1) const
                    {
                        env->callVoidMethod(this$, mids$[mid_forceAgreement_281ca35a], a0.this$, a1.this$);
                    }

                    jboolean IceTagger::getEndWithHmmModel() const
                    {
                        return env->callBooleanMethod(this$, mids$[mid_getEndWithHmmModel_54c6a16a]);
                    }

                    jint IceTagger::getNumAmbiguousTokens() const
                    {
                        return env->callIntMethod(this$, mids$[mid_getNumAmbiguousTokens_54c6a179]);
                    }

                    jboolean IceTagger::getStartWithHmmModel() const
                    {
                        return env->callBooleanMethod(this$, mids$[mid_getStartWithHmmModel_54c6a16a]);
                    }

                    ::java::lang::String IceTagger::getTagMaxFreq(const ::is::iclt::icenlp::core::tokenizer::IceTokenTags & a0) const
                    {
                        return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getTagMaxFreq_e57c73cb], a0.this$));
                    }

                    jint IceTagger::getTotalTags() const
                    {
                        return env->callIntMethod(this$, mids$[mid_getTotalTags_54c6a179]);
                    }

                    jint IceTagger::getTotalTagsAmbiguous() const
                    {
                        return env->callIntMethod(this$, mids$[mid_getTotalTagsAmbiguous_54c6a179]);
                    }

                    void IceTagger::initStatistics() const
                    {
                        env->callVoidMethod(this$, mids$[mid_initStatistics_54c6a166]);
                    }

                    void IceTagger::setHmmModelType(const ::is::iclt::icenlp::core::icetagger::IceTagger$HmmModelType & a0) const
                    {
                        env->callVoidMethod(this$, mids$[mid_setHmmModelType_50cf6b0f], a0.this$);
                    }

                    void IceTagger::setTriTagger(const ::is::iclt::icenlp::core::tritagger::TriTagger & a0) const
                    {
                        env->callVoidMethod(this$, mids$[mid_setTriTagger_ef785e23], a0.this$);
                    }

                    void IceTagger::tagTokens(const ::java::util::ArrayList & a0) const
                    {
                        env->callVoidMethod(this$, mids$[mid_tagTokens_b3f662f9], a0.this$);
                    }
                }
            }
        }
    }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace is {
    namespace iclt {
        namespace icenlp {
            namespace core {
                namespace icetagger {
                    static PyObject *t_IceTagger_cast_(PyTypeObject *type, PyObject *arg);
                    static PyObject *t_IceTagger_instance_(PyTypeObject *type, PyObject *arg);
                    static int t_IceTagger_init_(t_IceTagger *self, PyObject *args, PyObject *kwds);
                    static PyObject *t_IceTagger_forceAgreement(t_IceTagger *self, PyObject *args);
                    static PyObject *t_IceTagger_getEndWithHmmModel(t_IceTagger *self);
                    static PyObject *t_IceTagger_getNumAmbiguousTokens(t_IceTagger *self);
                    static PyObject *t_IceTagger_getStartWithHmmModel(t_IceTagger *self);
                    static PyObject *t_IceTagger_getTagMaxFreq(t_IceTagger *self, PyObject *arg);
                    static PyObject *t_IceTagger_getTotalTags(t_IceTagger *self);
                    static PyObject *t_IceTagger_getTotalTagsAmbiguous(t_IceTagger *self);
                    static PyObject *t_IceTagger_initStatistics(t_IceTagger *self);
                    static PyObject *t_IceTagger_setHmmModelType(t_IceTagger *self, PyObject *arg);
                    static PyObject *t_IceTagger_setTriTagger(t_IceTagger *self, PyObject *arg);
                    static PyObject *t_IceTagger_tagTokens(t_IceTagger *self, PyObject *arg);
                    static PyObject *t_IceTagger_get__endWithHmmModel(t_IceTagger *self, void *data);
                    static int t_IceTagger_set__hmmModelType(t_IceTagger *self, PyObject *arg, void *data);
                    static PyObject *t_IceTagger_get__numAmbiguousTokens(t_IceTagger *self, void *data);
                    static PyObject *t_IceTagger_get__startWithHmmModel(t_IceTagger *self, void *data);
                    static PyObject *t_IceTagger_get__totalTags(t_IceTagger *self, void *data);
                    static PyObject *t_IceTagger_get__totalTagsAmbiguous(t_IceTagger *self, void *data);
                    static int t_IceTagger_set__triTagger(t_IceTagger *self, PyObject *arg, void *data);
                    static PyGetSetDef t_IceTagger__fields_[] = {
                        DECLARE_GET_FIELD(t_IceTagger, endWithHmmModel),
                        DECLARE_SET_FIELD(t_IceTagger, hmmModelType),
                        DECLARE_GET_FIELD(t_IceTagger, numAmbiguousTokens),
                        DECLARE_GET_FIELD(t_IceTagger, startWithHmmModel),
                        DECLARE_GET_FIELD(t_IceTagger, totalTags),
                        DECLARE_GET_FIELD(t_IceTagger, totalTagsAmbiguous),
                        DECLARE_SET_FIELD(t_IceTagger, triTagger),
                        { NULL, NULL, NULL, NULL, NULL }
                    };

                    static PyMethodDef t_IceTagger__methods_[] = {
                        DECLARE_METHOD(t_IceTagger, cast_, METH_O | METH_CLASS),
                        DECLARE_METHOD(t_IceTagger, instance_, METH_O | METH_CLASS),
                        DECLARE_METHOD(t_IceTagger, forceAgreement, METH_VARARGS),
                        DECLARE_METHOD(t_IceTagger, getEndWithHmmModel, METH_NOARGS),
                        DECLARE_METHOD(t_IceTagger, getNumAmbiguousTokens, METH_NOARGS),
                        DECLARE_METHOD(t_IceTagger, getStartWithHmmModel, METH_NOARGS),
                        DECLARE_METHOD(t_IceTagger, getTagMaxFreq, METH_O),
                        DECLARE_METHOD(t_IceTagger, getTotalTags, METH_NOARGS),
                        DECLARE_METHOD(t_IceTagger, getTotalTagsAmbiguous, METH_NOARGS),
                        DECLARE_METHOD(t_IceTagger, initStatistics, METH_NOARGS),
                        DECLARE_METHOD(t_IceTagger, setHmmModelType, METH_O),
                        DECLARE_METHOD(t_IceTagger, setTriTagger, METH_O),
                        DECLARE_METHOD(t_IceTagger, tagTokens, METH_O),
                        { NULL, NULL, 0, NULL }
                    };

                    DECLARE_TYPE(IceTagger, t_IceTagger, ::java::lang::Object, IceTagger, t_IceTagger_init_, 0, 0, t_IceTagger__fields_, 0, 0);

                    void t_IceTagger::install(PyObject *module)
                    {
                        installType(&PY_TYPE(IceTagger), module, "IceTagger", 0);
                        PyDict_SetItemString(PY_TYPE(IceTagger).tp_dict, "HmmModelType", make_descriptor(&PY_TYPE(IceTagger$HmmModelType)));
                    }

                    void t_IceTagger::initialize(PyObject *module)
                    {
                        PyDict_SetItemString(PY_TYPE(IceTagger).tp_dict, "class_", make_descriptor(IceTagger::initializeClass, 1));
                        PyDict_SetItemString(PY_TYPE(IceTagger).tp_dict, "wrapfn_", make_descriptor(t_IceTagger::wrap_jobject));
                        PyDict_SetItemString(PY_TYPE(IceTagger).tp_dict, "boxfn_", make_descriptor(boxObject));
                        IceTagger::initializeClass();
                        PyDict_SetItemString(PY_TYPE(IceTagger).tp_dict, "sentenceStartLowerCase", make_descriptor(IceTagger::sentenceStartLowerCase));
                        PyDict_SetItemString(PY_TYPE(IceTagger).tp_dict, "sentenceStartUpperCase", make_descriptor(IceTagger::sentenceStartUpperCase));
                    }

                    static PyObject *t_IceTagger_cast_(PyTypeObject *type, PyObject *arg)
                    {
                        if (!(arg = castCheck(arg, IceTagger::initializeClass, 1)))
                            return NULL;
                        return t_IceTagger::wrap_Object(IceTagger(((t_IceTagger *) arg)->object.this$));
                    }
                    static PyObject *t_IceTagger_instance_(PyTypeObject *type, PyObject *arg)
                    {
                        if (!castCheck(arg, IceTagger::initializeClass, 0))
                            Py_RETURN_FALSE;
                        Py_RETURN_TRUE;
                    }

                    static int t_IceTagger_init_(t_IceTagger *self, PyObject *args, PyObject *kwds)
                    {
                        jint a0;
                        ::is::iclt::icenlp::core::utils::IceLog a1((jobject) NULL);
                        ::is::iclt::icenlp::core::icemorphy::IceMorphy a2((jobject) NULL);
                        ::is::iclt::icenlp::core::utils::Lexicon a3((jobject) NULL);
                        ::is::iclt::icenlp::core::utils::Lexicon a4((jobject) NULL);
                        ::is::iclt::icenlp::core::utils::Idioms a5((jobject) NULL);
                        ::is::iclt::icenlp::core::utils::Lexicon a6((jobject) NULL);
                        ::is::iclt::icenlp::core::utils::Lexicon a7((jobject) NULL);
                        ::is::iclt::icenlp::core::utils::Lexicon a8((jobject) NULL);
                        jboolean a9;
                        jboolean a10;
                        ::is::iclt::icenlp::core::tritagger::TriTagger a11((jobject) NULL);
                        ::is::iclt::icenlp::core::icetagger::IceTagger$HmmModelType a12((jobject) NULL);
                        IceTagger object((jobject) NULL);

                        if (!parseArgs(args, "IkkkkkkkkZZkk", ::is::iclt::icenlp::core::utils::IceLog::initializeClass, ::is::iclt::icenlp::core::icemorphy::IceMorphy::initializeClass, ::is::iclt::icenlp::core::utils::Lexicon::initializeClass, ::is::iclt::icenlp::core::utils::Lexicon::initializeClass, ::is::iclt::icenlp::core::utils::Idioms::initializeClass, ::is::iclt::icenlp::core::utils::Lexicon::initializeClass, ::is::iclt::icenlp::core::utils::Lexicon::initializeClass, ::is::iclt::icenlp::core::utils::Lexicon::initializeClass, ::is::iclt::icenlp::core::tritagger::TriTagger::initializeClass, ::is::iclt::icenlp::core::icetagger::IceTagger$HmmModelType::initializeClass, &a0, &a1, &a2, &a3, &a4, &a5, &a6, &a7, &a8, &a9, &a10, &a11, &a12))
                        {
                            INT_CALL(object = IceTagger(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12));
                            self->object = object;
                        }
                        else
                        {
                            PyErr_SetArgsError((PyObject *) self, "__init__", args);
                            return -1;
                        }

                        return 0;
                    }

                    static PyObject *t_IceTagger_forceAgreement(t_IceTagger *self, PyObject *args)
                    {
                        ::is::iclt::icenlp::core::tokenizer::IceTokenTags a0((jobject) NULL);
                        ::is::iclt::icenlp::core::tokenizer::IceTokenTags a1((jobject) NULL);

                        if (!parseArgs(args, "kk", ::is::iclt::icenlp::core::tokenizer::IceTokenTags::initializeClass, ::is::iclt::icenlp::core::tokenizer::IceTokenTags::initializeClass, &a0, &a1))
                        {
                            OBJ_CALL(self->object.forceAgreement(a0, a1));
                            Py_RETURN_NONE;
                        }

                        PyErr_SetArgsError((PyObject *) self, "forceAgreement", args);
                        return NULL;
                    }

                    static PyObject *t_IceTagger_getEndWithHmmModel(t_IceTagger *self)
                    {
                        jboolean result;
                        OBJ_CALL(result = self->object.getEndWithHmmModel());
                        Py_RETURN_BOOL(result);
                    }

                    static PyObject *t_IceTagger_getNumAmbiguousTokens(t_IceTagger *self)
                    {
                        jint result;
                        OBJ_CALL(result = self->object.getNumAmbiguousTokens());
                        return PyInt_FromLong((long) result);
                    }

                    static PyObject *t_IceTagger_getStartWithHmmModel(t_IceTagger *self)
                    {
                        jboolean result;
                        OBJ_CALL(result = self->object.getStartWithHmmModel());
                        Py_RETURN_BOOL(result);
                    }

                    static PyObject *t_IceTagger_getTagMaxFreq(t_IceTagger *self, PyObject *arg)
                    {
                        ::is::iclt::icenlp::core::tokenizer::IceTokenTags a0((jobject) NULL);
                        ::java::lang::String result((jobject) NULL);

                        if (!parseArg(arg, "k", ::is::iclt::icenlp::core::tokenizer::IceTokenTags::initializeClass, &a0))
                        {
                            OBJ_CALL(result = self->object.getTagMaxFreq(a0));
                            return j2p(result);
                        }

                        PyErr_SetArgsError((PyObject *) self, "getTagMaxFreq", arg);
                        return NULL;
                    }

                    static PyObject *t_IceTagger_getTotalTags(t_IceTagger *self)
                    {
                        jint result;
                        OBJ_CALL(result = self->object.getTotalTags());
                        return PyInt_FromLong((long) result);
                    }

                    static PyObject *t_IceTagger_getTotalTagsAmbiguous(t_IceTagger *self)
                    {
                        jint result;
                        OBJ_CALL(result = self->object.getTotalTagsAmbiguous());
                        return PyInt_FromLong((long) result);
                    }

                    static PyObject *t_IceTagger_initStatistics(t_IceTagger *self)
                    {
                        OBJ_CALL(self->object.initStatistics());
                        Py_RETURN_NONE;
                    }

                    static PyObject *t_IceTagger_setHmmModelType(t_IceTagger *self, PyObject *arg)
                    {
                        ::is::iclt::icenlp::core::icetagger::IceTagger$HmmModelType a0((jobject) NULL);

                        if (!parseArg(arg, "k", ::is::iclt::icenlp::core::icetagger::IceTagger$HmmModelType::initializeClass, &a0))
                        {
                            OBJ_CALL(self->object.setHmmModelType(a0));
                            Py_RETURN_NONE;
                        }

                        PyErr_SetArgsError((PyObject *) self, "setHmmModelType", arg);
                        return NULL;
                    }

                    static PyObject *t_IceTagger_setTriTagger(t_IceTagger *self, PyObject *arg)
                    {
                        ::is::iclt::icenlp::core::tritagger::TriTagger a0((jobject) NULL);

                        if (!parseArg(arg, "k", ::is::iclt::icenlp::core::tritagger::TriTagger::initializeClass, &a0))
                        {
                            OBJ_CALL(self->object.setTriTagger(a0));
                            Py_RETURN_NONE;
                        }

                        PyErr_SetArgsError((PyObject *) self, "setTriTagger", arg);
                        return NULL;
                    }

                    static PyObject *t_IceTagger_tagTokens(t_IceTagger *self, PyObject *arg)
                    {
                        ::java::util::ArrayList a0((jobject) NULL);
                        PyTypeObject **p0;

                        if (!parseArg(arg, "K", ::java::util::ArrayList::initializeClass, &a0, &p0, ::java::util::t_ArrayList::parameters_))
                        {
                            OBJ_CALL(self->object.tagTokens(a0));
                            Py_RETURN_NONE;
                        }

                        PyErr_SetArgsError((PyObject *) self, "tagTokens", arg);
                        return NULL;
                    }

                    static PyObject *t_IceTagger_get__endWithHmmModel(t_IceTagger *self, void *data)
                    {
                        jboolean value;
                        OBJ_CALL(value = self->object.getEndWithHmmModel());
                        Py_RETURN_BOOL(value);
                    }

                    static int t_IceTagger_set__hmmModelType(t_IceTagger *self, PyObject *arg, void *data)
                    {
                        {
                            ::is::iclt::icenlp::core::icetagger::IceTagger$HmmModelType value((jobject) NULL);
                            if (!parseArg(arg, "k", ::is::iclt::icenlp::core::icetagger::IceTagger$HmmModelType::initializeClass, &value))
                            {
                                INT_CALL(self->object.setHmmModelType(value));
                                return 0;
                            }
                        }
                        PyErr_SetArgsError((PyObject *) self, "hmmModelType", arg);
                        return -1;
                    }

                    static PyObject *t_IceTagger_get__numAmbiguousTokens(t_IceTagger *self, void *data)
                    {
                        jint value;
                        OBJ_CALL(value = self->object.getNumAmbiguousTokens());
                        return PyInt_FromLong((long) value);
                    }

                    static PyObject *t_IceTagger_get__startWithHmmModel(t_IceTagger *self, void *data)
                    {
                        jboolean value;
                        OBJ_CALL(value = self->object.getStartWithHmmModel());
                        Py_RETURN_BOOL(value);
                    }

                    static PyObject *t_IceTagger_get__totalTags(t_IceTagger *self, void *data)
                    {
                        jint value;
                        OBJ_CALL(value = self->object.getTotalTags());
                        return PyInt_FromLong((long) value);
                    }

                    static PyObject *t_IceTagger_get__totalTagsAmbiguous(t_IceTagger *self, void *data)
                    {
                        jint value;
                        OBJ_CALL(value = self->object.getTotalTagsAmbiguous());
                        return PyInt_FromLong((long) value);
                    }

                    static int t_IceTagger_set__triTagger(t_IceTagger *self, PyObject *arg, void *data)
                    {
                        {
                            ::is::iclt::icenlp::core::tritagger::TriTagger value((jobject) NULL);
                            if (!parseArg(arg, "k", ::is::iclt::icenlp::core::tritagger::TriTagger::initializeClass, &value))
                            {
                                INT_CALL(self->object.setTriTagger(value));
                                return 0;
                            }
                        }
                        PyErr_SetArgsError((PyObject *) self, "triTagger", arg);
                        return -1;
                    }
                }
            }
        }
    }
}
#include <jni.h>
#include "JCCEnv.h"
#include "is/iclt/icenlp/core/utils/WordList.h"
#include "java/io/IOException.h"
#include "java/util/ArrayList.h"
#include "java/lang/NullPointerException.h"
#include "java/lang/Class.h"
#include "java/io/InputStream.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace is {
    namespace iclt {
        namespace icenlp {
            namespace core {
                namespace utils {

                    ::java::lang::Class *WordList::class$ = NULL;
                    jmethodID *WordList::mids$ = NULL;

                    jclass WordList::initializeClass()
                    {
                        if (!class$)
                        {

                            jclass cls = (jclass) env->findClass("is/iclt/icenlp/core/utils/WordList");

                            mids$ = new jmethodID[max_mid];
                            mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
                            mids$[mid_init$_be2e4f90] = env->getMethodID(cls, "<init>", "(Ljava/io/InputStream;)V");
                            mids$[mid_getWords_21eb51b0] = env->getMethodID(cls, "getWords", "()Ljava/util/ArrayList;");

                            class$ = (::java::lang::Class *) new JObject(cls);
                        }
                        return (jclass) class$->this$;
                    }

                    WordList::WordList(const ::java::lang::String & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}

                    WordList::WordList(const ::java::io::InputStream & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_be2e4f90, a0.this$)) {}

                    ::java::util::ArrayList WordList::getWords() const
                    {
                        return ::java::util::ArrayList(env->callObjectMethod(this$, mids$[mid_getWords_21eb51b0]));
                    }
                }
            }
        }
    }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace is {
    namespace iclt {
        namespace icenlp {
            namespace core {
                namespace utils {
                    static PyObject *t_WordList_cast_(PyTypeObject *type, PyObject *arg);
                    static PyObject *t_WordList_instance_(PyTypeObject *type, PyObject *arg);
                    static int t_WordList_init_(t_WordList *self, PyObject *args, PyObject *kwds);
                    static PyObject *t_WordList_getWords(t_WordList *self);
                    static PyObject *t_WordList_get__words(t_WordList *self, void *data);
                    static PyGetSetDef t_WordList__fields_[] = {
                        DECLARE_GET_FIELD(t_WordList, words),
                        { NULL, NULL, NULL, NULL, NULL }
                    };

                    static PyMethodDef t_WordList__methods_[] = {
                        DECLARE_METHOD(t_WordList, cast_, METH_O | METH_CLASS),
                        DECLARE_METHOD(t_WordList, instance_, METH_O | METH_CLASS),
                        DECLARE_METHOD(t_WordList, getWords, METH_NOARGS),
                        { NULL, NULL, 0, NULL }
                    };

                    DECLARE_TYPE(WordList, t_WordList, ::java::lang::Object, WordList, t_WordList_init_, 0, 0, t_WordList__fields_, 0, 0);

                    void t_WordList::install(PyObject *module)
                    {
                        installType(&PY_TYPE(WordList), module, "WordList", 0);
                    }

                    void t_WordList::initialize(PyObject *module)
                    {
                        PyDict_SetItemString(PY_TYPE(WordList).tp_dict, "class_", make_descriptor(WordList::initializeClass, 1));
                        PyDict_SetItemString(PY_TYPE(WordList).tp_dict, "wrapfn_", make_descriptor(t_WordList::wrap_jobject));
                        PyDict_SetItemString(PY_TYPE(WordList).tp_dict, "boxfn_", make_descriptor(boxObject));
                    }

                    static PyObject *t_WordList_cast_(PyTypeObject *type, PyObject *arg)
                    {
                        if (!(arg = castCheck(arg, WordList::initializeClass, 1)))
                            return NULL;
                        return t_WordList::wrap_Object(WordList(((t_WordList *) arg)->object.this$));
                    }
                    static PyObject *t_WordList_instance_(PyTypeObject *type, PyObject *arg)
                    {
                        if (!castCheck(arg, WordList::initializeClass, 0))
                            Py_RETURN_FALSE;
                        Py_RETURN_TRUE;
                    }

                    static int t_WordList_init_(t_WordList *self, PyObject *args, PyObject *kwds)
                    {
                        switch (PyTuple_GET_SIZE(args)) {
                          case 1:
                            {
                                ::java::lang::String a0((jobject) NULL);
                                WordList object((jobject) NULL);

                                if (!parseArgs(args, "s", &a0))
                                {
                                    INT_CALL(object = WordList(a0));
                                    self->object = object;
                                    break;
                                }
                            }
                            {
                                ::java::io::InputStream a0((jobject) NULL);
                                WordList object((jobject) NULL);

                                if (!parseArgs(args, "k", ::java::io::InputStream::initializeClass, &a0))
                                {
                                    INT_CALL(object = WordList(a0));
                                    self->object = object;
                                    break;
                                }
                            }
                          default:
                            PyErr_SetArgsError((PyObject *) self, "__init__", args);
                            return -1;
                        }

                        return 0;
                    }

                    static PyObject *t_WordList_getWords(t_WordList *self)
                    {
                        ::java::util::ArrayList result((jobject) NULL);
                        OBJ_CALL(result = self->object.getWords());
                        return ::java::util::t_ArrayList::wrap_Object(result);
                    }

                    static PyObject *t_WordList_get__words(t_WordList *self, void *data)
                    {
                        ::java::util::ArrayList value((jobject) NULL);
                        OBJ_CALL(value = self->object.getWords());
                        return ::java::util::t_ArrayList::wrap_Object(value);
                    }
                }
            }
        }
    }
}
#include <jni.h>
#include "JCCEnv.h"
#include "is/iclt/icenlp/runner/RunIceMorphy.h"
#include "java/io/IOException.h"
#include "is/iclt/icenlp/core/icemorphy/IceMorphy.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace is {
    namespace iclt {
        namespace icenlp {
            namespace runner {

                ::java::lang::Class *RunIceMorphy::class$ = NULL;
                jmethodID *RunIceMorphy::mids$ = NULL;

                jclass RunIceMorphy::initializeClass()
                {
                    if (!class$)
                    {

                        jclass cls = (jclass) env->findClass("is/iclt/icenlp/runner/RunIceMorphy");

                        mids$ = new jmethodID[max_mid];
                        mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                        mids$[mid_generateMissingTags_de9b100f] = env->getMethodID(cls, "generateMissingTags", "(Ljava/lang/String;Ljava/lang/String;Lis/iclt/icenlp/core/icemorphy/IceMorphy;Ljava/lang/String;Ljava/lang/String;)V");
                        mids$[mid_main_4dd4540c] = env->getStaticMethodID(cls, "main", "([Ljava/lang/String;)V");

                        class$ = (::java::lang::Class *) new JObject(cls);
                    }
                    return (jclass) class$->this$;
                }

                RunIceMorphy::RunIceMorphy() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

                void RunIceMorphy::generateMissingTags(const ::java::lang::String & a0, const ::java::lang::String & a1, const ::is::iclt::icenlp::core::icemorphy::IceMorphy & a2, const ::java::lang::String & a3, const ::java::lang::String & a4) const
                {
                    env->callVoidMethod(this$, mids$[mid_generateMissingTags_de9b100f], a0.this$, a1.this$, a2.this$, a3.this$, a4.this$);
                }

                void RunIceMorphy::main(const JArray< ::java::lang::String > & a0)
                {
                    jclass cls = initializeClass();
                    env->callStaticVoidMethod(cls, mids$[mid_main_4dd4540c], a0.this$);
                }
            }
        }
    }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace is {
    namespace iclt {
        namespace icenlp {
            namespace runner {
                static PyObject *t_RunIceMorphy_cast_(PyTypeObject *type, PyObject *arg);
                static PyObject *t_RunIceMorphy_instance_(PyTypeObject *type, PyObject *arg);
                static int t_RunIceMorphy_init_(t_RunIceMorphy *self, PyObject *args, PyObject *kwds);
                static PyObject *t_RunIceMorphy_generateMissingTags(t_RunIceMorphy *self, PyObject *args);
                static PyObject *t_RunIceMorphy_main(PyTypeObject *type, PyObject *arg);

                static PyMethodDef t_RunIceMorphy__methods_[] = {
                    DECLARE_METHOD(t_RunIceMorphy, cast_, METH_O | METH_CLASS),
                    DECLARE_METHOD(t_RunIceMorphy, instance_, METH_O | METH_CLASS),
                    DECLARE_METHOD(t_RunIceMorphy, generateMissingTags, METH_VARARGS),
                    DECLARE_METHOD(t_RunIceMorphy, main, METH_O | METH_CLASS),
                    { NULL, NULL, 0, NULL }
                };

                DECLARE_TYPE(RunIceMorphy, t_RunIceMorphy, ::java::lang::Object, RunIceMorphy, t_RunIceMorphy_init_, 0, 0, 0, 0, 0);

                void t_RunIceMorphy::install(PyObject *module)
                {
                    installType(&PY_TYPE(RunIceMorphy), module, "RunIceMorphy", 0);
                }

                void t_RunIceMorphy::initialize(PyObject *module)
                {
                    PyDict_SetItemString(PY_TYPE(RunIceMorphy).tp_dict, "class_", make_descriptor(RunIceMorphy::initializeClass, 1));
                    PyDict_SetItemString(PY_TYPE(RunIceMorphy).tp_dict, "wrapfn_", make_descriptor(t_RunIceMorphy::wrap_jobject));
                    PyDict_SetItemString(PY_TYPE(RunIceMorphy).tp_dict, "boxfn_", make_descriptor(boxObject));
                }

                static PyObject *t_RunIceMorphy_cast_(PyTypeObject *type, PyObject *arg)
                {
                    if (!(arg = castCheck(arg, RunIceMorphy::initializeClass, 1)))
                        return NULL;
                    return t_RunIceMorphy::wrap_Object(RunIceMorphy(((t_RunIceMorphy *) arg)->object.this$));
                }
                static PyObject *t_RunIceMorphy_instance_(PyTypeObject *type, PyObject *arg)
                {
                    if (!castCheck(arg, RunIceMorphy::initializeClass, 0))
                        Py_RETURN_FALSE;
                    Py_RETURN_TRUE;
                }

                static int t_RunIceMorphy_init_(t_RunIceMorphy *self, PyObject *args, PyObject *kwds)
                {
                    RunIceMorphy object((jobject) NULL);

                    INT_CALL(object = RunIceMorphy());
                    self->object = object;

                    return 0;
                }

                static PyObject *t_RunIceMorphy_generateMissingTags(t_RunIceMorphy *self, PyObject *args)
                {
                    ::java::lang::String a0((jobject) NULL);
                    ::java::lang::String a1((jobject) NULL);
                    ::is::iclt::icenlp::core::icemorphy::IceMorphy a2((jobject) NULL);
                    ::java::lang::String a3((jobject) NULL);
                    ::java::lang::String a4((jobject) NULL);

                    if (!parseArgs(args, "sskss", ::is::iclt::icenlp::core::icemorphy::IceMorphy::initializeClass, &a0, &a1, &a2, &a3, &a4))
                    {
                        OBJ_CALL(self->object.generateMissingTags(a0, a1, a2, a3, a4));
                        Py_RETURN_NONE;
                    }

                    PyErr_SetArgsError((PyObject *) self, "generateMissingTags", args);
                    return NULL;
                }

                static PyObject *t_RunIceMorphy_main(PyTypeObject *type, PyObject *arg)
                {
                    JArray< ::java::lang::String > a0((jobject) NULL);

                    if (!parseArg(arg, "[s", &a0))
                    {
                        OBJ_CALL(::is::iclt::icenlp::runner::RunIceMorphy::main(a0));
                        Py_RETURN_NONE;
                    }

                    PyErr_SetArgsError(type, "main", arg);
                    return NULL;
                }
            }
        }
    }
}
#include <jni.h>
#include "JCCEnv.h"
#include "is/iclt/icenlp/core/icetagger/IceLocalRules.h"
#include "is/iclt/icenlp/core/utils/IceTag.h"
#include "java/lang/Class.h"
#include "is/iclt/icenlp/core/utils/IceLog.h"
#include "is/iclt/icenlp/core/tokenizer/IceTokenTags.h"
#include "JArray.h"

namespace is {
    namespace iclt {
        namespace icenlp {
            namespace core {
                namespace icetagger {

                    ::java::lang::Class *IceLocalRules::class$ = NULL;
                    jmethodID *IceLocalRules::mids$ = NULL;

                    jclass IceLocalRules::initializeClass()
                    {
                        if (!class$)
                        {

                            jclass cls = (jclass) env->findClass("is/iclt/icenlp/core/icetagger/IceLocalRules");

                            mids$ = new jmethodID[max_mid];
                            mids$[mid_init$_559a0ab8] = env->getMethodID(cls, "<init>", "(Lis/iclt/icenlp/core/utils/IceLog;)V");
                            mids$[mid_checkAdj_93a073e8] = env->getMethodID(cls, "checkAdj", "(Lis/iclt/icenlp/core/utils/IceTag;Lis/iclt/icenlp/core/tokenizer/IceTokenTags;Lis/iclt/icenlp/core/tokenizer/IceTokenTags;Lis/iclt/icenlp/core/tokenizer/IceTokenTags;Lis/iclt/icenlp/core/tokenizer/IceTokenTags;Lis/iclt/icenlp/core/tokenizer/IceTokenTags;)V");
                            mids$[mid_checkAdverb_93a073e8] = env->getMethodID(cls, "checkAdverb", "(Lis/iclt/icenlp/core/utils/IceTag;Lis/iclt/icenlp/core/tokenizer/IceTokenTags;Lis/iclt/icenlp/core/tokenizer/IceTokenTags;Lis/iclt/icenlp/core/tokenizer/IceTokenTags;Lis/iclt/icenlp/core/tokenizer/IceTokenTags;Lis/iclt/icenlp/core/tokenizer/IceTokenTags;)V");
                            mids$[mid_checkArticle_93a073e8] = env->getMethodID(cls, "checkArticle", "(Lis/iclt/icenlp/core/utils/IceTag;Lis/iclt/icenlp/core/tokenizer/IceTokenTags;Lis/iclt/icenlp/core/tokenizer/IceTokenTags;Lis/iclt/icenlp/core/tokenizer/IceTokenTags;Lis/iclt/icenlp/core/tokenizer/IceTokenTags;Lis/iclt/icenlp/core/tokenizer/IceTokenTags;)V");
                            mids$[mid_checkConjunction_93a073e8] = env->getMethodID(cls, "checkConjunction", "(Lis/iclt/icenlp/core/utils/IceTag;Lis/iclt/icenlp/core/tokenizer/IceTokenTags;Lis/iclt/icenlp/core/tokenizer/IceTokenTags;Lis/iclt/icenlp/core/tokenizer/IceTokenTags;Lis/iclt/icenlp/core/tokenizer/IceTokenTags;Lis/iclt/icenlp/core/tokenizer/IceTokenTags;)V");
                            mids$[mid_checkDemonstrativePronoun_93a073e8] = env->getMethodID(cls, "checkDemonstrativePronoun", "(Lis/iclt/icenlp/core/utils/IceTag;Lis/iclt/icenlp/core/tokenizer/IceTokenTags;Lis/iclt/icenlp/core/tokenizer/IceTokenTags;Lis/iclt/icenlp/core/tokenizer/IceTokenTags;Lis/iclt/icenlp/core/tokenizer/IceTokenTags;Lis/iclt/icenlp/core/tokenizer/IceTokenTags;)V");
                            mids$[mid_checkExclamation_93a073e8] = env->getMethodID(cls, "checkExclamation", "(Lis/iclt/icenlp/core/utils/IceTag;Lis/iclt/icenlp/core/tokenizer/IceTokenTags;Lis/iclt/icenlp/core/tokenizer/IceTokenTags;Lis/iclt/icenlp/core/tokenizer/IceTokenTags;Lis/iclt/icenlp/core/tokenizer/IceTokenTags;Lis/iclt/icenlp/core/tokenizer/IceTokenTags;)V");
                            mids$[mid_checkIndefinitePronoun_93a073e8] = env->getMethodID(cls, "checkIndefinitePronoun", "(Lis/iclt/icenlp/core/utils/IceTag;Lis/iclt/icenlp/core/tokenizer/IceTokenTags;Lis/iclt/icenlp/core/tokenizer/IceTokenTags;Lis/iclt/icenlp/core/tokenizer/IceTokenTags;Lis/iclt/icenlp/core/tokenizer/IceTokenTags;Lis/iclt/icenlp/core/tokenizer/IceTokenTags;)V");
                            mids$[mid_checkInfinitive_93a073e8] = env->getMethodID(cls, "checkInfinitive", "(Lis/iclt/icenlp/core/utils/IceTag;Lis/iclt/icenlp/core/tokenizer/IceTokenTags;Lis/iclt/icenlp/core/tokenizer/IceTokenTags;Lis/iclt/icenlp/core/tokenizer/IceTokenTags;Lis/iclt/icenlp/core/tokenizer/IceTokenTags;Lis/iclt/icenlp/core/tokenizer/IceTokenTags;)V");
                            mids$[mid_checkInterrogativePronoun_93a073e8] = env->getMethodID(cls, "checkInterrogativePronoun", "(Lis/iclt/icenlp/core/utils/IceTag;Lis/iclt/icenlp/core/tokenizer/IceTokenTags;Lis/iclt/icenlp/core/tokenizer/IceTokenTags;Lis/iclt/icenlp/core/tokenizer/IceTokenTags;Lis/iclt/icenlp/core/tokenizer/IceTokenTags;Lis/iclt/icenlp/core/tokenizer/IceTokenTags;)V");
                            mids$[mid_checkNoun_93a073e8] = env->getMethodID(cls, "checkNoun", "(Lis/iclt/icenlp/core/utils/IceTag;Lis/iclt/icenlp/core/tokenizer/IceTokenTags;Lis/iclt/icenlp/core/tokenizer/IceTokenTags;Lis/iclt/icenlp/core/tokenizer/IceTokenTags;Lis/iclt/icenlp/core/tokenizer/IceTokenTags;Lis/iclt/icenlp/core/tokenizer/IceTokenTags;)V");
                            mids$[mid_checkNumeral_93a073e8] = env->getMethodID(cls, "checkNumeral", "(Lis/iclt/icenlp/core/utils/IceTag;Lis/iclt/icenlp/core/tokenizer/IceTokenTags;Lis/iclt/icenlp/core/tokenizer/IceTokenTags;Lis/iclt/icenlp/core/tokenizer/IceTokenTags;Lis/iclt/icenlp/core/tokenizer/IceTokenTags;Lis/iclt/icenlp/core/tokenizer/IceTokenTags;)V");
                            mids$[mid_checkPersonalPronoun_93a073e8] = env->getMethodID(cls, "checkPersonalPronoun", "(Lis/iclt/icenlp/core/utils/IceTag;Lis/iclt/icenlp/core/tokenizer/IceTokenTags;Lis/iclt/icenlp/core/tokenizer/IceTokenTags;Lis/iclt/icenlp/core/tokenizer/IceTokenTags;Lis/iclt/icenlp/core/tokenizer/IceTokenTags;Lis/iclt/icenlp/core/tokenizer/IceTokenTags;)V");
                            mids$[mid_checkPossessivePronoun_93a073e8] = env->getMethodID(cls, "checkPossessivePronoun", "(Lis/iclt/icenlp/core/utils/IceTag;Lis/iclt/icenlp/core/tokenizer/IceTokenTags;Lis/iclt/icenlp/core/tokenizer/IceTokenTags;Lis/iclt/icenlp/core/tokenizer/IceTokenTags;Lis/iclt/icenlp/core/tokenizer/IceTokenTags;Lis/iclt/icenlp/core/tokenizer/IceTokenTags;)V");
                            mids$[mid_checkPreposition_93a073e8] = env->getMethodID(cls, "checkPreposition", "(Lis/iclt/icenlp/core/utils/IceTag;Lis/iclt/icenlp/core/tokenizer/IceTokenTags;Lis/iclt/icenlp/core/tokenizer/IceTokenTags;Lis/iclt/icenlp/core/tokenizer/IceTokenTags;Lis/iclt/icenlp/core/tokenizer/IceTokenTags;Lis/iclt/icenlp/core/tokenizer/IceTokenTags;)V");
                            mids$[mid_checkProperNoun_93a073e8] = env->getMethodID(cls, "checkProperNoun", "(Lis/iclt/icenlp/core/utils/IceTag;Lis/iclt/icenlp/core/tokenizer/IceTokenTags;Lis/iclt/icenlp/core/tokenizer/IceTokenTags;Lis/iclt/icenlp/core/tokenizer/IceTokenTags;Lis/iclt/icenlp/core/tokenizer/IceTokenTags;Lis/iclt/icenlp/core/tokenizer/IceTokenTags;)V");
                            mids$[mid_checkReflexivePronoun_93a073e8] = env->getMethodID(cls, "checkReflexivePronoun", "(Lis/iclt/icenlp/core/utils/IceTag;Lis/iclt/icenlp/core/tokenizer/IceTokenTags;Lis/iclt/icenlp/core/tokenizer/IceTokenTags;Lis/iclt/icenlp/core/tokenizer/IceTokenTags;Lis/iclt/icenlp/core/tokenizer/IceTokenTags;Lis/iclt/icenlp/core/tokenizer/IceTokenTags;)V");
                            mids$[mid_checkRelativeConjunction_93a073e8] = env->getMethodID(cls, "checkRelativeConjunction", "(Lis/iclt/icenlp/core/utils/IceTag;Lis/iclt/icenlp/core/tokenizer/IceTokenTags;Lis/iclt/icenlp/core/tokenizer/IceTokenTags;Lis/iclt/icenlp/core/tokenizer/IceTokenTags;Lis/iclt/icenlp/core/tokenizer/IceTokenTags;Lis/iclt/icenlp/core/tokenizer/IceTokenTags;)V");
                            mids$[mid_checkVerb_93a073e8] = env->getMethodID(cls, "checkVerb", "(Lis/iclt/icenlp/core/utils/IceTag;Lis/iclt/icenlp/core/tokenizer/IceTokenTags;Lis/iclt/icenlp/core/tokenizer/IceTokenTags;Lis/iclt/icenlp/core/tokenizer/IceTokenTags;Lis/iclt/icenlp/core/tokenizer/IceTokenTags;Lis/iclt/icenlp/core/tokenizer/IceTokenTags;)V");
                            mids$[mid_checkVerbInfinitive_93a073e8] = env->getMethodID(cls, "checkVerbInfinitive", "(Lis/iclt/icenlp/core/utils/IceTag;Lis/iclt/icenlp/core/tokenizer/IceTokenTags;Lis/iclt/icenlp/core/tokenizer/IceTokenTags;Lis/iclt/icenlp/core/tokenizer/IceTokenTags;Lis/iclt/icenlp/core/tokenizer/IceTokenTags;Lis/iclt/icenlp/core/tokenizer/IceTokenTags;)V");
                            mids$[mid_getDisambiguateFlag_54c6a16a] = env->getMethodID(cls, "getDisambiguateFlag", "()Z");
                            mids$[mid_setDisambiguateFlag_bb0c767f] = env->getMethodID(cls, "setDisambiguateFlag", "(Z)V");

                            class$ = (::java::lang::Class *) new JObject(cls);
                        }
                        return (jclass) class$->this$;
                    }

                    IceLocalRules::IceLocalRules(const ::is::iclt::icenlp::core::utils::IceLog & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_559a0ab8, a0.this$)) {}

                    void IceLocalRules::checkAdj(const ::is::iclt::icenlp::core::utils::IceTag & a0, const ::is::iclt::icenlp::core::tokenizer::IceTokenTags & a1, const ::is::iclt::icenlp::core::tokenizer::IceTokenTags & a2, const ::is::iclt::icenlp::core::tokenizer::IceTokenTags & a3, const ::is::iclt::icenlp::core::tokenizer::IceTokenTags & a4, const ::is::iclt::icenlp::core::tokenizer::IceTokenTags & a5) const
                    {
                        env->callVoidMethod(this$, mids$[mid_checkAdj_93a073e8], a0.this$, a1.this$, a2.this$, a3.this$, a4.this$, a5.this$);
                    }

                    void IceLocalRules::checkAdverb(const ::is::iclt::icenlp::core::utils::IceTag & a0, const ::is::iclt::icenlp::core::tokenizer::IceTokenTags & a1, const ::is::iclt::icenlp::core::tokenizer::IceTokenTags & a2, const ::is::iclt::icenlp::core::tokenizer::IceTokenTags & a3, const ::is::iclt::icenlp::core::tokenizer::IceTokenTags & a4, const ::is::iclt::icenlp::core::tokenizer::IceTokenTags & a5) const
                    {
                        env->callVoidMethod(this$, mids$[mid_checkAdverb_93a073e8], a0.this$, a1.this$, a2.this$, a3.this$, a4.this$, a5.this$);
                    }

                    void IceLocalRules::checkArticle(const ::is::iclt::icenlp::core::utils::IceTag & a0, const ::is::iclt::icenlp::core::tokenizer::IceTokenTags & a1, const ::is::iclt::icenlp::core::tokenizer::IceTokenTags & a2, const ::is::iclt::icenlp::core::tokenizer::IceTokenTags & a3, const ::is::iclt::icenlp::core::tokenizer::IceTokenTags & a4, const ::is::iclt::icenlp::core::tokenizer::IceTokenTags & a5) const
                    {
                        env->callVoidMethod(this$, mids$[mid_checkArticle_93a073e8], a0.this$, a1.this$, a2.this$, a3.this$, a4.this$, a5.this$);
                    }

                    void IceLocalRules::checkConjunction(const ::is::iclt::icenlp::core::utils::IceTag & a0, const ::is::iclt::icenlp::core::tokenizer::IceTokenTags & a1, const ::is::iclt::icenlp::core::tokenizer::IceTokenTags & a2, const ::is::iclt::icenlp::core::tokenizer::IceTokenTags & a3, const ::is::iclt::icenlp::core::tokenizer::IceTokenTags & a4, const ::is::iclt::icenlp::core::tokenizer::IceTokenTags & a5) const
                    {
                        env->callVoidMethod(this$, mids$[mid_checkConjunction_93a073e8], a0.this$, a1.this$, a2.this$, a3.this$, a4.this$, a5.this$);
                    }

                    void IceLocalRules::checkDemonstrativePronoun(const ::is::iclt::icenlp::core::utils::IceTag & a0, const ::is::iclt::icenlp::core::tokenizer::IceTokenTags & a1, const ::is::iclt::icenlp::core::tokenizer::IceTokenTags & a2, const ::is::iclt::icenlp::core::tokenizer::IceTokenTags & a3, const ::is::iclt::icenlp::core::tokenizer::IceTokenTags & a4, const ::is::iclt::icenlp::core::tokenizer::IceTokenTags & a5) const
                    {
                        env->callVoidMethod(this$, mids$[mid_checkDemonstrativePronoun_93a073e8], a0.this$, a1.this$, a2.this$, a3.this$, a4.this$, a5.this$);
                    }

                    void IceLocalRules::checkExclamation(const ::is::iclt::icenlp::core::utils::IceTag & a0, const ::is::iclt::icenlp::core::tokenizer::IceTokenTags & a1, const ::is::iclt::icenlp::core::tokenizer::IceTokenTags & a2, const ::is::iclt::icenlp::core::tokenizer::IceTokenTags & a3, const ::is::iclt::icenlp::core::tokenizer::IceTokenTags & a4, const ::is::iclt::icenlp::core::tokenizer::IceTokenTags & a5) const
                    {
                        env->callVoidMethod(this$, mids$[mid_checkExclamation_93a073e8], a0.this$, a1.this$, a2.this$, a3.this$, a4.this$, a5.this$);
                    }

                    void IceLocalRules::checkIndefinitePronoun(const ::is::iclt::icenlp::core::utils::IceTag & a0, const ::is::iclt::icenlp::core::tokenizer::IceTokenTags & a1, const ::is::iclt::icenlp::core::tokenizer::IceTokenTags & a2, const ::is::iclt::icenlp::core::tokenizer::IceTokenTags & a3, const ::is::iclt::icenlp::core::tokenizer::IceTokenTags & a4, const ::is::iclt::icenlp::core::tokenizer::IceTokenTags & a5) const
                    {
                        env->callVoidMethod(this$, mids$[mid_checkIndefinitePronoun_93a073e8], a0.this$, a1.this$, a2.this$, a3.this$, a4.this$, a5.this$);
                    }

                    void IceLocalRules::checkInfinitive(const ::is::iclt::icenlp::core::utils::IceTag & a0, const ::is::iclt::icenlp::core::tokenizer::IceTokenTags & a1, const ::is::iclt::icenlp::core::tokenizer::IceTokenTags & a2, const ::is::iclt::icenlp::core::tokenizer::IceTokenTags & a3, const ::is::iclt::icenlp::core::tokenizer::IceTokenTags & a4, const ::is::iclt::icenlp::core::tokenizer::IceTokenTags & a5) const
                    {
                        env->callVoidMethod(this$, mids$[mid_checkInfinitive_93a073e8], a0.this$, a1.this$, a2.this$, a3.this$, a4.this$, a5.this$);
                    }

                    void IceLocalRules::checkInterrogativePronoun(const ::is::iclt::icenlp::core::utils::IceTag & a0, const ::is::iclt::icenlp::core::tokenizer::IceTokenTags & a1, const ::is::iclt::icenlp::core::tokenizer::IceTokenTags & a2, const ::is::iclt::icenlp::core::tokenizer::IceTokenTags & a3, const ::is::iclt::icenlp::core::tokenizer::IceTokenTags & a4, const ::is::iclt::icenlp::core::tokenizer::IceTokenTags & a5) const
                    {
                        env->callVoidMethod(this$, mids$[mid_checkInterrogativePronoun_93a073e8], a0.this$, a1.this$, a2.this$, a3.this$, a4.this$, a5.this$);
                    }

                    void IceLocalRules::checkNoun(const ::is::iclt::icenlp::core::utils::IceTag & a0, const ::is::iclt::icenlp::core::tokenizer::IceTokenTags & a1, const ::is::iclt::icenlp::core::tokenizer::IceTokenTags & a2, const ::is::iclt::icenlp::core::tokenizer::IceTokenTags & a3, const ::is::iclt::icenlp::core::tokenizer::IceTokenTags & a4, const ::is::iclt::icenlp::core::tokenizer::IceTokenTags & a5) const
                    {
                        env->callVoidMethod(this$, mids$[mid_checkNoun_93a073e8], a0.this$, a1.this$, a2.this$, a3.this$, a4.this$, a5.this$);
                    }

                    void IceLocalRules::checkNumeral(const ::is::iclt::icenlp::core::utils::IceTag & a0, const ::is::iclt::icenlp::core::tokenizer::IceTokenTags & a1, const ::is::iclt::icenlp::core::tokenizer::IceTokenTags & a2, const ::is::iclt::icenlp::core::tokenizer::IceTokenTags & a3, const ::is::iclt::icenlp::core::tokenizer::IceTokenTags & a4, const ::is::iclt::icenlp::core::tokenizer::IceTokenTags & a5) const
                    {
                        env->callVoidMethod(this$, mids$[mid_checkNumeral_93a073e8], a0.this$, a1.this$, a2.this$, a3.this$, a4.this$, a5.this$);
                    }

                    void IceLocalRules::checkPersonalPronoun(const ::is::iclt::icenlp::core::utils::IceTag & a0, const ::is::iclt::icenlp::core::tokenizer::IceTokenTags & a1, const ::is::iclt::icenlp::core::tokenizer::IceTokenTags & a2, const ::is::iclt::icenlp::core::tokenizer::IceTokenTags & a3, const ::is::iclt::icenlp::core::tokenizer::IceTokenTags & a4, const ::is::iclt::icenlp::core::tokenizer::IceTokenTags & a5) const
                    {
                        env->callVoidMethod(this$, mids$[mid_checkPersonalPronoun_93a073e8], a0.this$, a1.this$, a2.this$, a3.this$, a4.this$, a5.this$);
                    }

                    void IceLocalRules::checkPossessivePronoun(const ::is::iclt::icenlp::core::utils::IceTag & a0, const ::is::iclt::icenlp::core::tokenizer::IceTokenTags & a1, const ::is::iclt::icenlp::core::tokenizer::IceTokenTags & a2, const ::is::iclt::icenlp::core::tokenizer::IceTokenTags & a3, const ::is::iclt::icenlp::core::tokenizer::IceTokenTags & a4, const ::is::iclt::icenlp::core::tokenizer::IceTokenTags & a5) const
                    {
                        env->callVoidMethod(this$, mids$[mid_checkPossessivePronoun_93a073e8], a0.this$, a1.this$, a2.this$, a3.this$, a4.this$, a5.this$);
                    }

                    void IceLocalRules::checkPreposition(const ::is::iclt::icenlp::core::utils::IceTag & a0, const ::is::iclt::icenlp::core::tokenizer::IceTokenTags & a1, const ::is::iclt::icenlp::core::tokenizer::IceTokenTags & a2, const ::is::iclt::icenlp::core::tokenizer::IceTokenTags & a3, const ::is::iclt::icenlp::core::tokenizer::IceTokenTags & a4, const ::is::iclt::icenlp::core::tokenizer::IceTokenTags & a5) const
                    {
                        env->callVoidMethod(this$, mids$[mid_checkPreposition_93a073e8], a0.this$, a1.this$, a2.this$, a3.this$, a4.this$, a5.this$);
                    }

                    void IceLocalRules::checkProperNoun(const ::is::iclt::icenlp::core::utils::IceTag & a0, const ::is::iclt::icenlp::core::tokenizer::IceTokenTags & a1, const ::is::iclt::icenlp::core::tokenizer::IceTokenTags & a2, const ::is::iclt::icenlp::core::tokenizer::IceTokenTags & a3, const ::is::iclt::icenlp::core::tokenizer::IceTokenTags & a4, const ::is::iclt::icenlp::core::tokenizer::IceTokenTags & a5) const
                    {
                        env->callVoidMethod(this$, mids$[mid_checkProperNoun_93a073e8], a0.this$, a1.this$, a2.this$, a3.this$, a4.this$, a5.this$);
                    }

                    void IceLocalRules::checkReflexivePronoun(const ::is::iclt::icenlp::core::utils::IceTag & a0, const ::is::iclt::icenlp::core::tokenizer::IceTokenTags & a1, const ::is::iclt::icenlp::core::tokenizer::IceTokenTags & a2, const ::is::iclt::icenlp::core::tokenizer::IceTokenTags & a3, const ::is::iclt::icenlp::core::tokenizer::IceTokenTags & a4, const ::is::iclt::icenlp::core::tokenizer::IceTokenTags & a5) const
                    {
                        env->callVoidMethod(this$, mids$[mid_checkReflexivePronoun_93a073e8], a0.this$, a1.this$, a2.this$, a3.this$, a4.this$, a5.this$);
                    }

                    void IceLocalRules::checkRelativeConjunction(const ::is::iclt::icenlp::core::utils::IceTag & a0, const ::is::iclt::icenlp::core::tokenizer::IceTokenTags & a1, const ::is::iclt::icenlp::core::tokenizer::IceTokenTags & a2, const ::is::iclt::icenlp::core::tokenizer::IceTokenTags & a3, const ::is::iclt::icenlp::core::tokenizer::IceTokenTags & a4, const ::is::iclt::icenlp::core::tokenizer::IceTokenTags & a5) const
                    {
                        env->callVoidMethod(this$, mids$[mid_checkRelativeConjunction_93a073e8], a0.this$, a1.this$, a2.this$, a3.this$, a4.this$, a5.this$);
                    }

                    void IceLocalRules::checkVerb(const ::is::iclt::icenlp::core::utils::IceTag & a0, const ::is::iclt::icenlp::core::tokenizer::IceTokenTags & a1, const ::is::iclt::icenlp::core::tokenizer::IceTokenTags & a2, const ::is::iclt::icenlp::core::tokenizer::IceTokenTags & a3, const ::is::iclt::icenlp::core::tokenizer::IceTokenTags & a4, const ::is::iclt::icenlp::core::tokenizer::IceTokenTags & a5) const
                    {
                        env->callVoidMethod(this$, mids$[mid_checkVerb_93a073e8], a0.this$, a1.this$, a2.this$, a3.this$, a4.this$, a5.this$);
                    }

                    void IceLocalRules::checkVerbInfinitive(const ::is::iclt::icenlp::core::utils::IceTag & a0, const ::is::iclt::icenlp::core::tokenizer::IceTokenTags & a1, const ::is::iclt::icenlp::core::tokenizer::IceTokenTags & a2, const ::is::iclt::icenlp::core::tokenizer::IceTokenTags & a3, const ::is::iclt::icenlp::core::tokenizer::IceTokenTags & a4, const ::is::iclt::icenlp::core::tokenizer::IceTokenTags & a5) const
                    {
                        env->callVoidMethod(this$, mids$[mid_checkVerbInfinitive_93a073e8], a0.this$, a1.this$, a2.this$, a3.this$, a4.this$, a5.this$);
                    }

                    jboolean IceLocalRules::getDisambiguateFlag() const
                    {
                        return env->callBooleanMethod(this$, mids$[mid_getDisambiguateFlag_54c6a16a]);
                    }

                    void IceLocalRules::setDisambiguateFlag(jboolean a0) const
                    {
                        env->callVoidMethod(this$, mids$[mid_setDisambiguateFlag_bb0c767f], a0);
                    }
                }
            }
        }
    }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace is {
    namespace iclt {
        namespace icenlp {
            namespace core {
                namespace icetagger {
                    static PyObject *t_IceLocalRules_cast_(PyTypeObject *type, PyObject *arg);
                    static PyObject *t_IceLocalRules_instance_(PyTypeObject *type, PyObject *arg);
                    static int t_IceLocalRules_init_(t_IceLocalRules *self, PyObject *args, PyObject *kwds);
                    static PyObject *t_IceLocalRules_checkAdj(t_IceLocalRules *self, PyObject *args);
                    static PyObject *t_IceLocalRules_checkAdverb(t_IceLocalRules *self, PyObject *args);
                    static PyObject *t_IceLocalRules_checkArticle(t_IceLocalRules *self, PyObject *args);
                    static PyObject *t_IceLocalRules_checkConjunction(t_IceLocalRules *self, PyObject *args);
                    static PyObject *t_IceLocalRules_checkDemonstrativePronoun(t_IceLocalRules *self, PyObject *args);
                    static PyObject *t_IceLocalRules_checkExclamation(t_IceLocalRules *self, PyObject *args);
                    static PyObject *t_IceLocalRules_checkIndefinitePronoun(t_IceLocalRules *self, PyObject *args);
                    static PyObject *t_IceLocalRules_checkInfinitive(t_IceLocalRules *self, PyObject *args);
                    static PyObject *t_IceLocalRules_checkInterrogativePronoun(t_IceLocalRules *self, PyObject *args);
                    static PyObject *t_IceLocalRules_checkNoun(t_IceLocalRules *self, PyObject *args);
                    static PyObject *t_IceLocalRules_checkNumeral(t_IceLocalRules *self, PyObject *args);
                    static PyObject *t_IceLocalRules_checkPersonalPronoun(t_IceLocalRules *self, PyObject *args);
                    static PyObject *t_IceLocalRules_checkPossessivePronoun(t_IceLocalRules *self, PyObject *args);
                    static PyObject *t_IceLocalRules_checkPreposition(t_IceLocalRules *self, PyObject *args);
                    static PyObject *t_IceLocalRules_checkProperNoun(t_IceLocalRules *self, PyObject *args);
                    static PyObject *t_IceLocalRules_checkReflexivePronoun(t_IceLocalRules *self, PyObject *args);
                    static PyObject *t_IceLocalRules_checkRelativeConjunction(t_IceLocalRules *self, PyObject *args);
                    static PyObject *t_IceLocalRules_checkVerb(t_IceLocalRules *self, PyObject *args);
                    static PyObject *t_IceLocalRules_checkVerbInfinitive(t_IceLocalRules *self, PyObject *args);
                    static PyObject *t_IceLocalRules_getDisambiguateFlag(t_IceLocalRules *self);
                    static PyObject *t_IceLocalRules_setDisambiguateFlag(t_IceLocalRules *self, PyObject *arg);
                    static PyObject *t_IceLocalRules_get__disambiguateFlag(t_IceLocalRules *self, void *data);
                    static int t_IceLocalRules_set__disambiguateFlag(t_IceLocalRules *self, PyObject *arg, void *data);
                    static PyGetSetDef t_IceLocalRules__fields_[] = {
                        DECLARE_GETSET_FIELD(t_IceLocalRules, disambiguateFlag),
                        { NULL, NULL, NULL, NULL, NULL }
                    };

                    static PyMethodDef t_IceLocalRules__methods_[] = {
                        DECLARE_METHOD(t_IceLocalRules, cast_, METH_O | METH_CLASS),
                        DECLARE_METHOD(t_IceLocalRules, instance_, METH_O | METH_CLASS),
                        DECLARE_METHOD(t_IceLocalRules, checkAdj, METH_VARARGS),
                        DECLARE_METHOD(t_IceLocalRules, checkAdverb, METH_VARARGS),
                        DECLARE_METHOD(t_IceLocalRules, checkArticle, METH_VARARGS),
                        DECLARE_METHOD(t_IceLocalRules, checkConjunction, METH_VARARGS),
                        DECLARE_METHOD(t_IceLocalRules, checkDemonstrativePronoun, METH_VARARGS),
                        DECLARE_METHOD(t_IceLocalRules, checkExclamation, METH_VARARGS),
                        DECLARE_METHOD(t_IceLocalRules, checkIndefinitePronoun, METH_VARARGS),
                        DECLARE_METHOD(t_IceLocalRules, checkInfinitive, METH_VARARGS),
                        DECLARE_METHOD(t_IceLocalRules, checkInterrogativePronoun, METH_VARARGS),
                        DECLARE_METHOD(t_IceLocalRules, checkNoun, METH_VARARGS),
                        DECLARE_METHOD(t_IceLocalRules, checkNumeral, METH_VARARGS),
                        DECLARE_METHOD(t_IceLocalRules, checkPersonalPronoun, METH_VARARGS),
                        DECLARE_METHOD(t_IceLocalRules, checkPossessivePronoun, METH_VARARGS),
                        DECLARE_METHOD(t_IceLocalRules, checkPreposition, METH_VARARGS),
                        DECLARE_METHOD(t_IceLocalRules, checkProperNoun, METH_VARARGS),
                        DECLARE_METHOD(t_IceLocalRules, checkReflexivePronoun, METH_VARARGS),
                        DECLARE_METHOD(t_IceLocalRules, checkRelativeConjunction, METH_VARARGS),
                        DECLARE_METHOD(t_IceLocalRules, checkVerb, METH_VARARGS),
                        DECLARE_METHOD(t_IceLocalRules, checkVerbInfinitive, METH_VARARGS),
                        DECLARE_METHOD(t_IceLocalRules, getDisambiguateFlag, METH_NOARGS),
                        DECLARE_METHOD(t_IceLocalRules, setDisambiguateFlag, METH_O),
                        { NULL, NULL, 0, NULL }
                    };

                    DECLARE_TYPE(IceLocalRules, t_IceLocalRules, ::java::lang::Object, IceLocalRules, t_IceLocalRules_init_, 0, 0, t_IceLocalRules__fields_, 0, 0);

                    void t_IceLocalRules::install(PyObject *module)
                    {
                        installType(&PY_TYPE(IceLocalRules), module, "IceLocalRules", 0);
                    }

                    void t_IceLocalRules::initialize(PyObject *module)
                    {
                        PyDict_SetItemString(PY_TYPE(IceLocalRules).tp_dict, "class_", make_descriptor(IceLocalRules::initializeClass, 1));
                        PyDict_SetItemString(PY_TYPE(IceLocalRules).tp_dict, "wrapfn_", make_descriptor(t_IceLocalRules::wrap_jobject));
                        PyDict_SetItemString(PY_TYPE(IceLocalRules).tp_dict, "boxfn_", make_descriptor(boxObject));
                    }

                    static PyObject *t_IceLocalRules_cast_(PyTypeObject *type, PyObject *arg)
                    {
                        if (!(arg = castCheck(arg, IceLocalRules::initializeClass, 1)))
                            return NULL;
                        return t_IceLocalRules::wrap_Object(IceLocalRules(((t_IceLocalRules *) arg)->object.this$));
                    }
                    static PyObject *t_IceLocalRules_instance_(PyTypeObject *type, PyObject *arg)
                    {
                        if (!castCheck(arg, IceLocalRules::initializeClass, 0))
                            Py_RETURN_FALSE;
                        Py_RETURN_TRUE;
                    }

                    static int t_IceLocalRules_init_(t_IceLocalRules *self, PyObject *args, PyObject *kwds)
                    {
                        ::is::iclt::icenlp::core::utils::IceLog a0((jobject) NULL);
                        IceLocalRules object((jobject) NULL);

                        if (!parseArgs(args, "k", ::is::iclt::icenlp::core::utils::IceLog::initializeClass, &a0))
                        {
                            INT_CALL(object = IceLocalRules(a0));
                            self->object = object;
                        }
                        else
                        {
                            PyErr_SetArgsError((PyObject *) self, "__init__", args);
                            return -1;
                        }

                        return 0;
                    }

                    static PyObject *t_IceLocalRules_checkAdj(t_IceLocalRules *self, PyObject *args)
                    {
                        ::is::iclt::icenlp::core::utils::IceTag a0((jobject) NULL);
                        ::is::iclt::icenlp::core::tokenizer::IceTokenTags a1((jobject) NULL);
                        ::is::iclt::icenlp::core::tokenizer::IceTokenTags a2((jobject) NULL);
                        ::is::iclt::icenlp::core::tokenizer::IceTokenTags a3((jobject) NULL);
                        ::is::iclt::icenlp::core::tokenizer::IceTokenTags a4((jobject) NULL);
                        ::is::iclt::icenlp::core::tokenizer::IceTokenTags a5((jobject) NULL);

                        if (!parseArgs(args, "kkkkkk", ::is::iclt::icenlp::core::utils::IceTag::initializeClass, ::is::iclt::icenlp::core::tokenizer::IceTokenTags::initializeClass, ::is::iclt::icenlp::core::tokenizer::IceTokenTags::initializeClass, ::is::iclt::icenlp::core::tokenizer::IceTokenTags::initializeClass, ::is::iclt::icenlp::core::tokenizer::IceTokenTags::initializeClass, ::is::iclt::icenlp::core::tokenizer::IceTokenTags::initializeClass, &a0, &a1, &a2, &a3, &a4, &a5))
                        {
                            OBJ_CALL(self->object.checkAdj(a0, a1, a2, a3, a4, a5));
                            Py_RETURN_NONE;
                        }

                        PyErr_SetArgsError((PyObject *) self, "checkAdj", args);
                        return NULL;
                    }

                    static PyObject *t_IceLocalRules_checkAdverb(t_IceLocalRules *self, PyObject *args)
                    {
                        ::is::iclt::icenlp::core::utils::IceTag a0((jobject) NULL);
                        ::is::iclt::icenlp::core::tokenizer::IceTokenTags a1((jobject) NULL);
                        ::is::iclt::icenlp::core::tokenizer::IceTokenTags a2((jobject) NULL);
                        ::is::iclt::icenlp::core::tokenizer::IceTokenTags a3((jobject) NULL);
                        ::is::iclt::icenlp::core::tokenizer::IceTokenTags a4((jobject) NULL);
                        ::is::iclt::icenlp::core::tokenizer::IceTokenTags a5((jobject) NULL);

                        if (!parseArgs(args, "kkkkkk", ::is::iclt::icenlp::core::utils::IceTag::initializeClass, ::is::iclt::icenlp::core::tokenizer::IceTokenTags::initializeClass, ::is::iclt::icenlp::core::tokenizer::IceTokenTags::initializeClass, ::is::iclt::icenlp::core::tokenizer::IceTokenTags::initializeClass, ::is::iclt::icenlp::core::tokenizer::IceTokenTags::initializeClass, ::is::iclt::icenlp::core::tokenizer::IceTokenTags::initializeClass, &a0, &a1, &a2, &a3, &a4, &a5))
                        {
                            OBJ_CALL(self->object.checkAdverb(a0, a1, a2, a3, a4, a5));
                            Py_RETURN_NONE;
                        }

                        PyErr_SetArgsError((PyObject *) self, "checkAdverb", args);
                        return NULL;
                    }

                    static PyObject *t_IceLocalRules_checkArticle(t_IceLocalRules *self, PyObject *args)
                    {
                        ::is::iclt::icenlp::core::utils::IceTag a0((jobject) NULL);
                        ::is::iclt::icenlp::core::tokenizer::IceTokenTags a1((jobject) NULL);
                        ::is::iclt::icenlp::core::tokenizer::IceTokenTags a2((jobject) NULL);
                        ::is::iclt::icenlp::core::tokenizer::IceTokenTags a3((jobject) NULL);
                        ::is::iclt::icenlp::core::tokenizer::IceTokenTags a4((jobject) NULL);
                        ::is::iclt::icenlp::core::tokenizer::IceTokenTags a5((jobject) NULL);

                        if (!parseArgs(args, "kkkkkk", ::is::iclt::icenlp::core::utils::IceTag::initializeClass, ::is::iclt::icenlp::core::tokenizer::IceTokenTags::initializeClass, ::is::iclt::icenlp::core::tokenizer::IceTokenTags::initializeClass, ::is::iclt::icenlp::core::tokenizer::IceTokenTags::initializeClass, ::is::iclt::icenlp::core::tokenizer::IceTokenTags::initializeClass, ::is::iclt::icenlp::core::tokenizer::IceTokenTags::initializeClass, &a0, &a1, &a2, &a3, &a4, &a5))
                        {
                            OBJ_CALL(self->object.checkArticle(a0, a1, a2, a3, a4, a5));
                            Py_RETURN_NONE;
                        }

                        PyErr_SetArgsError((PyObject *) self, "checkArticle", args);
                        return NULL;
                    }

                    static PyObject *t_IceLocalRules_checkConjunction(t_IceLocalRules *self, PyObject *args)
                    {
                        ::is::iclt::icenlp::core::utils::IceTag a0((jobject) NULL);
                        ::is::iclt::icenlp::core::tokenizer::IceTokenTags a1((jobject) NULL);
                        ::is::iclt::icenlp::core::tokenizer::IceTokenTags a2((jobject) NULL);
                        ::is::iclt::icenlp::core::tokenizer::IceTokenTags a3((jobject) NULL);
                        ::is::iclt::icenlp::core::tokenizer::IceTokenTags a4((jobject) NULL);
                        ::is::iclt::icenlp::core::tokenizer::IceTokenTags a5((jobject) NULL);

                        if (!parseArgs(args, "kkkkkk", ::is::iclt::icenlp::core::utils::IceTag::initializeClass, ::is::iclt::icenlp::core::tokenizer::IceTokenTags::initializeClass, ::is::iclt::icenlp::core::tokenizer::IceTokenTags::initializeClass, ::is::iclt::icenlp::core::tokenizer::IceTokenTags::initializeClass, ::is::iclt::icenlp::core::tokenizer::IceTokenTags::initializeClass, ::is::iclt::icenlp::core::tokenizer::IceTokenTags::initializeClass, &a0, &a1, &a2, &a3, &a4, &a5))
                        {
                            OBJ_CALL(self->object.checkConjunction(a0, a1, a2, a3, a4, a5));
                            Py_RETURN_NONE;
                        }

                        PyErr_SetArgsError((PyObject *) self, "checkConjunction", args);
                        return NULL;
                    }

                    static PyObject *t_IceLocalRules_checkDemonstrativePronoun(t_IceLocalRules *self, PyObject *args)
                    {
                        ::is::iclt::icenlp::core::utils::IceTag a0((jobject) NULL);
                        ::is::iclt::icenlp::core::tokenizer::IceTokenTags a1((jobject) NULL);
                        ::is::iclt::icenlp::core::tokenizer::IceTokenTags a2((jobject) NULL);
                        ::is::iclt::icenlp::core::tokenizer::IceTokenTags a3((jobject) NULL);
                        ::is::iclt::icenlp::core::tokenizer::IceTokenTags a4((jobject) NULL);
                        ::is::iclt::icenlp::core::tokenizer::IceTokenTags a5((jobject) NULL);

                        if (!parseArgs(args, "kkkkkk", ::is::iclt::icenlp::core::utils::IceTag::initializeClass, ::is::iclt::icenlp::core::tokenizer::IceTokenTags::initializeClass, ::is::iclt::icenlp::core::tokenizer::IceTokenTags::initializeClass, ::is::iclt::icenlp::core::tokenizer::IceTokenTags::initializeClass, ::is::iclt::icenlp::core::tokenizer::IceTokenTags::initializeClass, ::is::iclt::icenlp::core::tokenizer::IceTokenTags::initializeClass, &a0, &a1, &a2, &a3, &a4, &a5))
                        {
                            OBJ_CALL(self->object.checkDemonstrativePronoun(a0, a1, a2, a3, a4, a5));
                            Py_RETURN_NONE;
                        }

                        PyErr_SetArgsError((PyObject *) self, "checkDemonstrativePronoun", args);
                        return NULL;
                    }

                    static PyObject *t_IceLocalRules_checkExclamation(t_IceLocalRules *self, PyObject *args)
                    {
                        ::is::iclt::icenlp::core::utils::IceTag a0((jobject) NULL);
                        ::is::iclt::icenlp::core::tokenizer::IceTokenTags a1((jobject) NULL);
                        ::is::iclt::icenlp::core::tokenizer::IceTokenTags a2((jobject) NULL);
                        ::is::iclt::icenlp::core::tokenizer::IceTokenTags a3((jobject) NULL);
                        ::is::iclt::icenlp::core::tokenizer::IceTokenTags a4((jobject) NULL);
                        ::is::iclt::icenlp::core::tokenizer::IceTokenTags a5((jobject) NULL);

                        if (!parseArgs(args, "kkkkkk", ::is::iclt::icenlp::core::utils::IceTag::initializeClass, ::is::iclt::icenlp::core::tokenizer::IceTokenTags::initializeClass, ::is::iclt::icenlp::core::tokenizer::IceTokenTags::initializeClass, ::is::iclt::icenlp::core::tokenizer::IceTokenTags::initializeClass, ::is::iclt::icenlp::core::tokenizer::IceTokenTags::initializeClass, ::is::iclt::icenlp::core::tokenizer::IceTokenTags::initializeClass, &a0, &a1, &a2, &a3, &a4, &a5))
                        {
                            OBJ_CALL(self->object.checkExclamation(a0, a1, a2, a3, a4, a5));
                            Py_RETURN_NONE;
                        }

                        PyErr_SetArgsError((PyObject *) self, "checkExclamation", args);
                        return NULL;
                    }

                    static PyObject *t_IceLocalRules_checkIndefinitePronoun(t_IceLocalRules *self, PyObject *args)
                    {
                        ::is::iclt::icenlp::core::utils::IceTag a0((jobject) NULL);
                        ::is::iclt::icenlp::core::tokenizer::IceTokenTags a1((jobject) NULL);
                        ::is::iclt::icenlp::core::tokenizer::IceTokenTags a2((jobject) NULL);
                        ::is::iclt::icenlp::core::tokenizer::IceTokenTags a3((jobject) NULL);
                        ::is::iclt::icenlp::core::tokenizer::IceTokenTags a4((jobject) NULL);
                        ::is::iclt::icenlp::core::tokenizer::IceTokenTags a5((jobject) NULL);

                        if (!parseArgs(args, "kkkkkk", ::is::iclt::icenlp::core::utils::IceTag::initializeClass, ::is::iclt::icenlp::core::tokenizer::IceTokenTags::initializeClass, ::is::iclt::icenlp::core::tokenizer::IceTokenTags::initializeClass, ::is::iclt::icenlp::core::tokenizer::IceTokenTags::initializeClass, ::is::iclt::icenlp::core::tokenizer::IceTokenTags::initializeClass, ::is::iclt::icenlp::core::tokenizer::IceTokenTags::initializeClass, &a0, &a1, &a2, &a3, &a4, &a5))
                        {
                            OBJ_CALL(self->object.checkIndefinitePronoun(a0, a1, a2, a3, a4, a5));
                            Py_RETURN_NONE;
                        }

                        PyErr_SetArgsError((PyObject *) self, "checkIndefinitePronoun", args);
                        return NULL;
                    }

                    static PyObject *t_IceLocalRules_checkInfinitive(t_IceLocalRules *self, PyObject *args)
                    {
                        ::is::iclt::icenlp::core::utils::IceTag a0((jobject) NULL);
                        ::is::iclt::icenlp::core::tokenizer::IceTokenTags a1((jobject) NULL);
                        ::is::iclt::icenlp::core::tokenizer::IceTokenTags a2((jobject) NULL);
                        ::is::iclt::icenlp::core::tokenizer::IceTokenTags a3((jobject) NULL);
                        ::is::iclt::icenlp::core::tokenizer::IceTokenTags a4((jobject) NULL);
                        ::is::iclt::icenlp::core::tokenizer::IceTokenTags a5((jobject) NULL);

                        if (!parseArgs(args, "kkkkkk", ::is::iclt::icenlp::core::utils::IceTag::initializeClass, ::is::iclt::icenlp::core::tokenizer::IceTokenTags::initializeClass, ::is::iclt::icenlp::core::tokenizer::IceTokenTags::initializeClass, ::is::iclt::icenlp::core::tokenizer::IceTokenTags::initializeClass, ::is::iclt::icenlp::core::tokenizer::IceTokenTags::initializeClass, ::is::iclt::icenlp::core::tokenizer::IceTokenTags::initializeClass, &a0, &a1, &a2, &a3, &a4, &a5))
                        {
                            OBJ_CALL(self->object.checkInfinitive(a0, a1, a2, a3, a4, a5));
                            Py_RETURN_NONE;
                        }

                        PyErr_SetArgsError((PyObject *) self, "checkInfinitive", args);
                        return NULL;
                    }

                    static PyObject *t_IceLocalRules_checkInterrogativePronoun(t_IceLocalRules *self, PyObject *args)
                    {
                        ::is::iclt::icenlp::core::utils::IceTag a0((jobject) NULL);
                        ::is::iclt::icenlp::core::tokenizer::IceTokenTags a1((jobject) NULL);
                        ::is::iclt::icenlp::core::tokenizer::IceTokenTags a2((jobject) NULL);
                        ::is::iclt::icenlp::core::tokenizer::IceTokenTags a3((jobject) NULL);
                        ::is::iclt::icenlp::core::tokenizer::IceTokenTags a4((jobject) NULL);
                        ::is::iclt::icenlp::core::tokenizer::IceTokenTags a5((jobject) NULL);

                        if (!parseArgs(args, "kkkkkk", ::is::iclt::icenlp::core::utils::IceTag::initializeClass, ::is::iclt::icenlp::core::tokenizer::IceTokenTags::initializeClass, ::is::iclt::icenlp::core::tokenizer::IceTokenTags::initializeClass, ::is::iclt::icenlp::core::tokenizer::IceTokenTags::initializeClass, ::is::iclt::icenlp::core::tokenizer::IceTokenTags::initializeClass, ::is::iclt::icenlp::core::tokenizer::IceTokenTags::initializeClass, &a0, &a1, &a2, &a3, &a4, &a5))
                        {
                            OBJ_CALL(self->object.checkInterrogativePronoun(a0, a1, a2, a3, a4, a5));
                            Py_RETURN_NONE;
                        }

                        PyErr_SetArgsError((PyObject *) self, "checkInterrogativePronoun", args);
                        return NULL;
                    }

                    static PyObject *t_IceLocalRules_checkNoun(t_IceLocalRules *self, PyObject *args)
                    {
                        ::is::iclt::icenlp::core::utils::IceTag a0((jobject) NULL);
                        ::is::iclt::icenlp::core::tokenizer::IceTokenTags a1((jobject) NULL);
                        ::is::iclt::icenlp::core::tokenizer::IceTokenTags a2((jobject) NULL);
                        ::is::iclt::icenlp::core::tokenizer::IceTokenTags a3((jobject) NULL);
                        ::is::iclt::icenlp::core::tokenizer::IceTokenTags a4((jobject) NULL);
                        ::is::iclt::icenlp::core::tokenizer::IceTokenTags a5((jobject) NULL);

                        if (!parseArgs(args, "kkkkkk", ::is::iclt::icenlp::core::utils::IceTag::initializeClass, ::is::iclt::icenlp::core::tokenizer::IceTokenTags::initializeClass, ::is::iclt::icenlp::core::tokenizer::IceTokenTags::initializeClass, ::is::iclt::icenlp::core::tokenizer::IceTokenTags::initializeClass, ::is::iclt::icenlp::core::tokenizer::IceTokenTags::initializeClass, ::is::iclt::icenlp::core::tokenizer::IceTokenTags::initializeClass, &a0, &a1, &a2, &a3, &a4, &a5))
                        {
                            OBJ_CALL(self->object.checkNoun(a0, a1, a2, a3, a4, a5));
                            Py_RETURN_NONE;
                        }

                        PyErr_SetArgsError((PyObject *) self, "checkNoun", args);
                        return NULL;
                    }

                    static PyObject *t_IceLocalRules_checkNumeral(t_IceLocalRules *self, PyObject *args)
                    {
                        ::is::iclt::icenlp::core::utils::IceTag a0((jobject) NULL);
                        ::is::iclt::icenlp::core::tokenizer::IceTokenTags a1((jobject) NULL);
                        ::is::iclt::icenlp::core::tokenizer::IceTokenTags a2((jobject) NULL);
                        ::is::iclt::icenlp::core::tokenizer::IceTokenTags a3((jobject) NULL);
                        ::is::iclt::icenlp::core::tokenizer::IceTokenTags a4((jobject) NULL);
                        ::is::iclt::icenlp::core::tokenizer::IceTokenTags a5((jobject) NULL);

                        if (!parseArgs(args, "kkkkkk", ::is::iclt::icenlp::core::utils::IceTag::initializeClass, ::is::iclt::icenlp::core::tokenizer::IceTokenTags::initializeClass, ::is::iclt::icenlp::core::tokenizer::IceTokenTags::initializeClass, ::is::iclt::icenlp::core::tokenizer::IceTokenTags::initializeClass, ::is::iclt::icenlp::core::tokenizer::IceTokenTags::initializeClass, ::is::iclt::icenlp::core::tokenizer::IceTokenTags::initializeClass, &a0, &a1, &a2, &a3, &a4, &a5))
                        {
                            OBJ_CALL(self->object.checkNumeral(a0, a1, a2, a3, a4, a5));
                            Py_RETURN_NONE;
                        }

                        PyErr_SetArgsError((PyObject *) self, "checkNumeral", args);
                        return NULL;
                    }

                    static PyObject *t_IceLocalRules_checkPersonalPronoun(t_IceLocalRules *self, PyObject *args)
                    {
                        ::is::iclt::icenlp::core::utils::IceTag a0((jobject) NULL);
                        ::is::iclt::icenlp::core::tokenizer::IceTokenTags a1((jobject) NULL);
                        ::is::iclt::icenlp::core::tokenizer::IceTokenTags a2((jobject) NULL);
                        ::is::iclt::icenlp::core::tokenizer::IceTokenTags a3((jobject) NULL);
                        ::is::iclt::icenlp::core::tokenizer::IceTokenTags a4((jobject) NULL);
                        ::is::iclt::icenlp::core::tokenizer::IceTokenTags a5((jobject) NULL);

                        if (!parseArgs(args, "kkkkkk", ::is::iclt::icenlp::core::utils::IceTag::initializeClass, ::is::iclt::icenlp::core::tokenizer::IceTokenTags::initializeClass, ::is::iclt::icenlp::core::tokenizer::IceTokenTags::initializeClass, ::is::iclt::icenlp::core::tokenizer::IceTokenTags::initializeClass, ::is::iclt::icenlp::core::tokenizer::IceTokenTags::initializeClass, ::is::iclt::icenlp::core::tokenizer::IceTokenTags::initializeClass, &a0, &a1, &a2, &a3, &a4, &a5))
                        {
                            OBJ_CALL(self->object.checkPersonalPronoun(a0, a1, a2, a3, a4, a5));
                            Py_RETURN_NONE;
                        }

                        PyErr_SetArgsError((PyObject *) self, "checkPersonalPronoun", args);
                        return NULL;
                    }

                    static PyObject *t_IceLocalRules_checkPossessivePronoun(t_IceLocalRules *self, PyObject *args)
                    {
                        ::is::iclt::icenlp::core::utils::IceTag a0((jobject) NULL);
                        ::is::iclt::icenlp::core::tokenizer::IceTokenTags a1((jobject) NULL);
                        ::is::iclt::icenlp::core::tokenizer::IceTokenTags a2((jobject) NULL);
                        ::is::iclt::icenlp::core::tokenizer::IceTokenTags a3((jobject) NULL);
                        ::is::iclt::icenlp::core::tokenizer::IceTokenTags a4((jobject) NULL);
                        ::is::iclt::icenlp::core::tokenizer::IceTokenTags a5((jobject) NULL);

                        if (!parseArgs(args, "kkkkkk", ::is::iclt::icenlp::core::utils::IceTag::initializeClass, ::is::iclt::icenlp::core::tokenizer::IceTokenTags::initializeClass, ::is::iclt::icenlp::core::tokenizer::IceTokenTags::initializeClass, ::is::iclt::icenlp::core::tokenizer::IceTokenTags::initializeClass, ::is::iclt::icenlp::core::tokenizer::IceTokenTags::initializeClass, ::is::iclt::icenlp::core::tokenizer::IceTokenTags::initializeClass, &a0, &a1, &a2, &a3, &a4, &a5))
                        {
                            OBJ_CALL(self->object.checkPossessivePronoun(a0, a1, a2, a3, a4, a5));
                            Py_RETURN_NONE;
                        }

                        PyErr_SetArgsError((PyObject *) self, "checkPossessivePronoun", args);
                        return NULL;
                    }

                    static PyObject *t_IceLocalRules_checkPreposition(t_IceLocalRules *self, PyObject *args)
                    {
                        ::is::iclt::icenlp::core::utils::IceTag a0((jobject) NULL);
                        ::is::iclt::icenlp::core::tokenizer::IceTokenTags a1((jobject) NULL);
                        ::is::iclt::icenlp::core::tokenizer::IceTokenTags a2((jobject) NULL);
                        ::is::iclt::icenlp::core::tokenizer::IceTokenTags a3((jobject) NULL);
                        ::is::iclt::icenlp::core::tokenizer::IceTokenTags a4((jobject) NULL);
                        ::is::iclt::icenlp::core::tokenizer::IceTokenTags a5((jobject) NULL);

                        if (!parseArgs(args, "kkkkkk", ::is::iclt::icenlp::core::utils::IceTag::initializeClass, ::is::iclt::icenlp::core::tokenizer::IceTokenTags::initializeClass, ::is::iclt::icenlp::core::tokenizer::IceTokenTags::initializeClass, ::is::iclt::icenlp::core::tokenizer::IceTokenTags::initializeClass, ::is::iclt::icenlp::core::tokenizer::IceTokenTags::initializeClass, ::is::iclt::icenlp::core::tokenizer::IceTokenTags::initializeClass, &a0, &a1, &a2, &a3, &a4, &a5))
                        {
                            OBJ_CALL(self->object.checkPreposition(a0, a1, a2, a3, a4, a5));
                            Py_RETURN_NONE;
                        }

                        PyErr_SetArgsError((PyObject *) self, "checkPreposition", args);
                        return NULL;
                    }

                    static PyObject *t_IceLocalRules_checkProperNoun(t_IceLocalRules *self, PyObject *args)
                    {
                        ::is::iclt::icenlp::core::utils::IceTag a0((jobject) NULL);
                        ::is::iclt::icenlp::core::tokenizer::IceTokenTags a1((jobject) NULL);
                        ::is::iclt::icenlp::core::tokenizer::IceTokenTags a2((jobject) NULL);
                        ::is::iclt::icenlp::core::tokenizer::IceTokenTags a3((jobject) NULL);
                        ::is::iclt::icenlp::core::tokenizer::IceTokenTags a4((jobject) NULL);
                        ::is::iclt::icenlp::core::tokenizer::IceTokenTags a5((jobject) NULL);

                        if (!parseArgs(args, "kkkkkk", ::is::iclt::icenlp::core::utils::IceTag::initializeClass, ::is::iclt::icenlp::core::tokenizer::IceTokenTags::initializeClass, ::is::iclt::icenlp::core::tokenizer::IceTokenTags::initializeClass, ::is::iclt::icenlp::core::tokenizer::IceTokenTags::initializeClass, ::is::iclt::icenlp::core::tokenizer::IceTokenTags::initializeClass, ::is::iclt::icenlp::core::tokenizer::IceTokenTags::initializeClass, &a0, &a1, &a2, &a3, &a4, &a5))
                        {
                            OBJ_CALL(self->object.checkProperNoun(a0, a1, a2, a3, a4, a5));
                            Py_RETURN_NONE;
                        }

                        PyErr_SetArgsError((PyObject *) self, "checkProperNoun", args);
                        return NULL;
                    }

                    static PyObject *t_IceLocalRules_checkReflexivePronoun(t_IceLocalRules *self, PyObject *args)
                    {
                        ::is::iclt::icenlp::core::utils::IceTag a0((jobject) NULL);
                        ::is::iclt::icenlp::core::tokenizer::IceTokenTags a1((jobject) NULL);
                        ::is::iclt::icenlp::core::tokenizer::IceTokenTags a2((jobject) NULL);
                        ::is::iclt::icenlp::core::tokenizer::IceTokenTags a3((jobject) NULL);
                        ::is::iclt::icenlp::core::tokenizer::IceTokenTags a4((jobject) NULL);
                        ::is::iclt::icenlp::core::tokenizer::IceTokenTags a5((jobject) NULL);

                        if (!parseArgs(args, "kkkkkk", ::is::iclt::icenlp::core::utils::IceTag::initializeClass, ::is::iclt::icenlp::core::tokenizer::IceTokenTags::initializeClass, ::is::iclt::icenlp::core::tokenizer::IceTokenTags::initializeClass, ::is::iclt::icenlp::core::tokenizer::IceTokenTags::initializeClass, ::is::iclt::icenlp::core::tokenizer::IceTokenTags::initializeClass, ::is::iclt::icenlp::core::tokenizer::IceTokenTags::initializeClass, &a0, &a1, &a2, &a3, &a4, &a5))
                        {
                            OBJ_CALL(self->object.checkReflexivePronoun(a0, a1, a2, a3, a4, a5));
                            Py_RETURN_NONE;
                        }

                        PyErr_SetArgsError((PyObject *) self, "checkReflexivePronoun", args);
                        return NULL;
                    }

                    static PyObject *t_IceLocalRules_checkRelativeConjunction(t_IceLocalRules *self, PyObject *args)
                    {
                        ::is::iclt::icenlp::core::utils::IceTag a0((jobject) NULL);
                        ::is::iclt::icenlp::core::tokenizer::IceTokenTags a1((jobject) NULL);
                        ::is::iclt::icenlp::core::tokenizer::IceTokenTags a2((jobject) NULL);
                        ::is::iclt::icenlp::core::tokenizer::IceTokenTags a3((jobject) NULL);
                        ::is::iclt::icenlp::core::tokenizer::IceTokenTags a4((jobject) NULL);
                        ::is::iclt::icenlp::core::tokenizer::IceTokenTags a5((jobject) NULL);

                        if (!parseArgs(args, "kkkkkk", ::is::iclt::icenlp::core::utils::IceTag::initializeClass, ::is::iclt::icenlp::core::tokenizer::IceTokenTags::initializeClass, ::is::iclt::icenlp::core::tokenizer::IceTokenTags::initializeClass, ::is::iclt::icenlp::core::tokenizer::IceTokenTags::initializeClass, ::is::iclt::icenlp::core::tokenizer::IceTokenTags::initializeClass, ::is::iclt::icenlp::core::tokenizer::IceTokenTags::initializeClass, &a0, &a1, &a2, &a3, &a4, &a5))
                        {
                            OBJ_CALL(self->object.checkRelativeConjunction(a0, a1, a2, a3, a4, a5));
                            Py_RETURN_NONE;
                        }

                        PyErr_SetArgsError((PyObject *) self, "checkRelativeConjunction", args);
                        return NULL;
                    }

                    static PyObject *t_IceLocalRules_checkVerb(t_IceLocalRules *self, PyObject *args)
                    {
                        ::is::iclt::icenlp::core::utils::IceTag a0((jobject) NULL);
                        ::is::iclt::icenlp::core::tokenizer::IceTokenTags a1((jobject) NULL);
                        ::is::iclt::icenlp::core::tokenizer::IceTokenTags a2((jobject) NULL);
                        ::is::iclt::icenlp::core::tokenizer::IceTokenTags a3((jobject) NULL);
                        ::is::iclt::icenlp::core::tokenizer::IceTokenTags a4((jobject) NULL);
                        ::is::iclt::icenlp::core::tokenizer::IceTokenTags a5((jobject) NULL);

                        if (!parseArgs(args, "kkkkkk", ::is::iclt::icenlp::core::utils::IceTag::initializeClass, ::is::iclt::icenlp::core::tokenizer::IceTokenTags::initializeClass, ::is::iclt::icenlp::core::tokenizer::IceTokenTags::initializeClass, ::is::iclt::icenlp::core::tokenizer::IceTokenTags::initializeClass, ::is::iclt::icenlp::core::tokenizer::IceTokenTags::initializeClass, ::is::iclt::icenlp::core::tokenizer::IceTokenTags::initializeClass, &a0, &a1, &a2, &a3, &a4, &a5))
                        {
                            OBJ_CALL(self->object.checkVerb(a0, a1, a2, a3, a4, a5));
                            Py_RETURN_NONE;
                        }

                        PyErr_SetArgsError((PyObject *) self, "checkVerb", args);
                        return NULL;
                    }

                    static PyObject *t_IceLocalRules_checkVerbInfinitive(t_IceLocalRules *self, PyObject *args)
                    {
                        ::is::iclt::icenlp::core::utils::IceTag a0((jobject) NULL);
                        ::is::iclt::icenlp::core::tokenizer::IceTokenTags a1((jobject) NULL);
                        ::is::iclt::icenlp::core::tokenizer::IceTokenTags a2((jobject) NULL);
                        ::is::iclt::icenlp::core::tokenizer::IceTokenTags a3((jobject) NULL);
                        ::is::iclt::icenlp::core::tokenizer::IceTokenTags a4((jobject) NULL);
                        ::is::iclt::icenlp::core::tokenizer::IceTokenTags a5((jobject) NULL);

                        if (!parseArgs(args, "kkkkkk", ::is::iclt::icenlp::core::utils::IceTag::initializeClass, ::is::iclt::icenlp::core::tokenizer::IceTokenTags::initializeClass, ::is::iclt::icenlp::core::tokenizer::IceTokenTags::initializeClass, ::is::iclt::icenlp::core::tokenizer::IceTokenTags::initializeClass, ::is::iclt::icenlp::core::tokenizer::IceTokenTags::initializeClass, ::is::iclt::icenlp::core::tokenizer::IceTokenTags::initializeClass, &a0, &a1, &a2, &a3, &a4, &a5))
                        {
                            OBJ_CALL(self->object.checkVerbInfinitive(a0, a1, a2, a3, a4, a5));
                            Py_RETURN_NONE;
                        }

                        PyErr_SetArgsError((PyObject *) self, "checkVerbInfinitive", args);
                        return NULL;
                    }

                    static PyObject *t_IceLocalRules_getDisambiguateFlag(t_IceLocalRules *self)
                    {
                        jboolean result;
                        OBJ_CALL(result = self->object.getDisambiguateFlag());
                        Py_RETURN_BOOL(result);
                    }

                    static PyObject *t_IceLocalRules_setDisambiguateFlag(t_IceLocalRules *self, PyObject *arg)
                    {
                        jboolean a0;

                        if (!parseArg(arg, "Z", &a0))
                        {
                            OBJ_CALL(self->object.setDisambiguateFlag(a0));
                            Py_RETURN_NONE;
                        }

                        PyErr_SetArgsError((PyObject *) self, "setDisambiguateFlag", arg);
                        return NULL;
                    }

                    static PyObject *t_IceLocalRules_get__disambiguateFlag(t_IceLocalRules *self, void *data)
                    {
                        jboolean value;
                        OBJ_CALL(value = self->object.getDisambiguateFlag());
                        Py_RETURN_BOOL(value);
                    }
                    static int t_IceLocalRules_set__disambiguateFlag(t_IceLocalRules *self, PyObject *arg, void *data)
                    {
                        {
                            jboolean value;
                            if (!parseArg(arg, "Z", &value))
                            {
                                INT_CALL(self->object.setDisambiguateFlag(value));
                                return 0;
                            }
                        }
                        PyErr_SetArgsError((PyObject *) self, "disambiguateFlag", arg);
                        return -1;
                    }
                }
            }
        }
    }
}
#include <jni.h>
#include "JCCEnv.h"
#include "is/iclt/icenlp/core/tokenizer/Token$TokenCode.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace is {
    namespace iclt {
        namespace icenlp {
            namespace core {
                namespace tokenizer {

                    ::java::lang::Class *Token$TokenCode::class$ = NULL;
                    jmethodID *Token$TokenCode::mids$ = NULL;
                    Token$TokenCode *Token$TokenCode::tcAbbrev = NULL;
                    Token$TokenCode *Token$TokenCode::tcAnd = NULL;
                    Token$TokenCode *Token$TokenCode::tcArrow = NULL;
                    Token$TokenCode *Token$TokenCode::tcBackSlash = NULL;
                    Token$TokenCode *Token$TokenCode::tcColon = NULL;
                    Token$TokenCode *Token$TokenCode::tcComma = NULL;
                    Token$TokenCode *Token$TokenCode::tcCurrency = NULL;
                    Token$TokenCode *Token$TokenCode::tcDollar = NULL;
                    Token$TokenCode *Token$TokenCode::tcDoubleQuote = NULL;
                    Token$TokenCode *Token$TokenCode::tcDownQuote = NULL;
                    Token$TokenCode *Token$TokenCode::tcEOS = NULL;
                    Token$TokenCode *Token$TokenCode::tcEqualSign = NULL;
                    Token$TokenCode *Token$TokenCode::tcExclamation = NULL;
                    Token$TokenCode *Token$TokenCode::tcGreater = NULL;
                    Token$TokenCode *Token$TokenCode::tcHyphen = NULL;
                    Token$TokenCode *Token$TokenCode::tcLArrow = NULL;
                    Token$TokenCode *Token$TokenCode::tcLBracket = NULL;
                    Token$TokenCode *Token$TokenCode::tcLCurlyBracket = NULL;
                    Token$TokenCode *Token$TokenCode::tcLParen = NULL;
                    Token$TokenCode *Token$TokenCode::tcLess = NULL;
                    Token$TokenCode *Token$TokenCode::tcMultiWord = NULL;
                    Token$TokenCode *Token$TokenCode::tcNone = NULL;
                    Token$TokenCode *Token$TokenCode::tcNumber = NULL;
                    Token$TokenCode *Token$TokenCode::tcNumberSign = NULL;
                    Token$TokenCode *Token$TokenCode::tcPeriod = NULL;
                    Token$TokenCode *Token$TokenCode::tcPlus = NULL;
                    Token$TokenCode *Token$TokenCode::tcPlusMinus = NULL;
                    Token$TokenCode *Token$TokenCode::tcQuestion = NULL;
                    Token$TokenCode *Token$TokenCode::tcRArrow = NULL;
                    Token$TokenCode *Token$TokenCode::tcRBracket = NULL;
                    Token$TokenCode *Token$TokenCode::tcRCurlyBracket = NULL;
                    Token$TokenCode *Token$TokenCode::tcRParen = NULL;
                    Token$TokenCode *Token$TokenCode::tcSemicolon = NULL;
                    Token$TokenCode *Token$TokenCode::tcSingleQuote = NULL;
                    Token$TokenCode *Token$TokenCode::tcSlash = NULL;
                    Token$TokenCode *Token$TokenCode::tcStar = NULL;
                    Token$TokenCode *Token$TokenCode::tcUnderscore = NULL;
                    Token$TokenCode *Token$TokenCode::tcUnknown = NULL;
                    Token$TokenCode *Token$TokenCode::tcUpQuote = NULL;
                    Token$TokenCode *Token$TokenCode::tcUrl = NULL;
                    Token$TokenCode *Token$TokenCode::tcWhitespace = NULL;
                    Token$TokenCode *Token$TokenCode::tcWord = NULL;

                    jclass Token$TokenCode::initializeClass()
                    {
                        if (!class$)
                        {

                            jclass cls = (jclass) env->findClass("is/iclt/icenlp/core/tokenizer/Token$TokenCode");

                            mids$ = new jmethodID[max_mid];
                            mids$[mid_valueOf_9d5a6536] = env->getStaticMethodID(cls, "valueOf", "(Ljava/lang/String;)Lis/iclt/icenlp/core/tokenizer/Token$TokenCode;");
                            mids$[mid_values_b00a3150] = env->getStaticMethodID(cls, "values", "()[Lis/iclt/icenlp/core/tokenizer/Token$TokenCode;");

                            class$ = (::java::lang::Class *) new JObject(cls);
                            cls = (jclass) class$->this$;

                            tcAbbrev = new Token$TokenCode(env->getStaticObjectField(cls, "tcAbbrev", "Lis/iclt/icenlp/core/tokenizer/Token$TokenCode;"));
                            tcAnd = new Token$TokenCode(env->getStaticObjectField(cls, "tcAnd", "Lis/iclt/icenlp/core/tokenizer/Token$TokenCode;"));
                            tcArrow = new Token$TokenCode(env->getStaticObjectField(cls, "tcArrow", "Lis/iclt/icenlp/core/tokenizer/Token$TokenCode;"));
                            tcBackSlash = new Token$TokenCode(env->getStaticObjectField(cls, "tcBackSlash", "Lis/iclt/icenlp/core/tokenizer/Token$TokenCode;"));
                            tcColon = new Token$TokenCode(env->getStaticObjectField(cls, "tcColon", "Lis/iclt/icenlp/core/tokenizer/Token$TokenCode;"));
                            tcComma = new Token$TokenCode(env->getStaticObjectField(cls, "tcComma", "Lis/iclt/icenlp/core/tokenizer/Token$TokenCode;"));
                            tcCurrency = new Token$TokenCode(env->getStaticObjectField(cls, "tcCurrency", "Lis/iclt/icenlp/core/tokenizer/Token$TokenCode;"));
                            tcDollar = new Token$TokenCode(env->getStaticObjectField(cls, "tcDollar", "Lis/iclt/icenlp/core/tokenizer/Token$TokenCode;"));
                            tcDoubleQuote = new Token$TokenCode(env->getStaticObjectField(cls, "tcDoubleQuote", "Lis/iclt/icenlp/core/tokenizer/Token$TokenCode;"));
                            tcDownQuote = new Token$TokenCode(env->getStaticObjectField(cls, "tcDownQuote", "Lis/iclt/icenlp/core/tokenizer/Token$TokenCode;"));
                            tcEOS = new Token$TokenCode(env->getStaticObjectField(cls, "tcEOS", "Lis/iclt/icenlp/core/tokenizer/Token$TokenCode;"));
                            tcEqualSign = new Token$TokenCode(env->getStaticObjectField(cls, "tcEqualSign", "Lis/iclt/icenlp/core/tokenizer/Token$TokenCode;"));
                            tcExclamation = new Token$TokenCode(env->getStaticObjectField(cls, "tcExclamation", "Lis/iclt/icenlp/core/tokenizer/Token$TokenCode;"));
                            tcGreater = new Token$TokenCode(env->getStaticObjectField(cls, "tcGreater", "Lis/iclt/icenlp/core/tokenizer/Token$TokenCode;"));
                            tcHyphen = new Token$TokenCode(env->getStaticObjectField(cls, "tcHyphen", "Lis/iclt/icenlp/core/tokenizer/Token$TokenCode;"));
                            tcLArrow = new Token$TokenCode(env->getStaticObjectField(cls, "tcLArrow", "Lis/iclt/icenlp/core/tokenizer/Token$TokenCode;"));
                            tcLBracket = new Token$TokenCode(env->getStaticObjectField(cls, "tcLBracket", "Lis/iclt/icenlp/core/tokenizer/Token$TokenCode;"));
                            tcLCurlyBracket = new Token$TokenCode(env->getStaticObjectField(cls, "tcLCurlyBracket", "Lis/iclt/icenlp/core/tokenizer/Token$TokenCode;"));
                            tcLParen = new Token$TokenCode(env->getStaticObjectField(cls, "tcLParen", "Lis/iclt/icenlp/core/tokenizer/Token$TokenCode;"));
                            tcLess = new Token$TokenCode(env->getStaticObjectField(cls, "tcLess", "Lis/iclt/icenlp/core/tokenizer/Token$TokenCode;"));
                            tcMultiWord = new Token$TokenCode(env->getStaticObjectField(cls, "tcMultiWord", "Lis/iclt/icenlp/core/tokenizer/Token$TokenCode;"));
                            tcNone = new Token$TokenCode(env->getStaticObjectField(cls, "tcNone", "Lis/iclt/icenlp/core/tokenizer/Token$TokenCode;"));
                            tcNumber = new Token$TokenCode(env->getStaticObjectField(cls, "tcNumber", "Lis/iclt/icenlp/core/tokenizer/Token$TokenCode;"));
                            tcNumberSign = new Token$TokenCode(env->getStaticObjectField(cls, "tcNumberSign", "Lis/iclt/icenlp/core/tokenizer/Token$TokenCode;"));
                            tcPeriod = new Token$TokenCode(env->getStaticObjectField(cls, "tcPeriod", "Lis/iclt/icenlp/core/tokenizer/Token$TokenCode;"));
                            tcPlus = new Token$TokenCode(env->getStaticObjectField(cls, "tcPlus", "Lis/iclt/icenlp/core/tokenizer/Token$TokenCode;"));
                            tcPlusMinus = new Token$TokenCode(env->getStaticObjectField(cls, "tcPlusMinus", "Lis/iclt/icenlp/core/tokenizer/Token$TokenCode;"));
                            tcQuestion = new Token$TokenCode(env->getStaticObjectField(cls, "tcQuestion", "Lis/iclt/icenlp/core/tokenizer/Token$TokenCode;"));
                            tcRArrow = new Token$TokenCode(env->getStaticObjectField(cls, "tcRArrow", "Lis/iclt/icenlp/core/tokenizer/Token$TokenCode;"));
                            tcRBracket = new Token$TokenCode(env->getStaticObjectField(cls, "tcRBracket", "Lis/iclt/icenlp/core/tokenizer/Token$TokenCode;"));
                            tcRCurlyBracket = new Token$TokenCode(env->getStaticObjectField(cls, "tcRCurlyBracket", "Lis/iclt/icenlp/core/tokenizer/Token$TokenCode;"));
                            tcRParen = new Token$TokenCode(env->getStaticObjectField(cls, "tcRParen", "Lis/iclt/icenlp/core/tokenizer/Token$TokenCode;"));
                            tcSemicolon = new Token$TokenCode(env->getStaticObjectField(cls, "tcSemicolon", "Lis/iclt/icenlp/core/tokenizer/Token$TokenCode;"));
                            tcSingleQuote = new Token$TokenCode(env->getStaticObjectField(cls, "tcSingleQuote", "Lis/iclt/icenlp/core/tokenizer/Token$TokenCode;"));
                            tcSlash = new Token$TokenCode(env->getStaticObjectField(cls, "tcSlash", "Lis/iclt/icenlp/core/tokenizer/Token$TokenCode;"));
                            tcStar = new Token$TokenCode(env->getStaticObjectField(cls, "tcStar", "Lis/iclt/icenlp/core/tokenizer/Token$TokenCode;"));
                            tcUnderscore = new Token$TokenCode(env->getStaticObjectField(cls, "tcUnderscore", "Lis/iclt/icenlp/core/tokenizer/Token$TokenCode;"));
                            tcUnknown = new Token$TokenCode(env->getStaticObjectField(cls, "tcUnknown", "Lis/iclt/icenlp/core/tokenizer/Token$TokenCode;"));
                            tcUpQuote = new Token$TokenCode(env->getStaticObjectField(cls, "tcUpQuote", "Lis/iclt/icenlp/core/tokenizer/Token$TokenCode;"));
                            tcUrl = new Token$TokenCode(env->getStaticObjectField(cls, "tcUrl", "Lis/iclt/icenlp/core/tokenizer/Token$TokenCode;"));
                            tcWhitespace = new Token$TokenCode(env->getStaticObjectField(cls, "tcWhitespace", "Lis/iclt/icenlp/core/tokenizer/Token$TokenCode;"));
                            tcWord = new Token$TokenCode(env->getStaticObjectField(cls, "tcWord", "Lis/iclt/icenlp/core/tokenizer/Token$TokenCode;"));
                        }
                        return (jclass) class$->this$;
                    }

                    Token$TokenCode Token$TokenCode::valueOf(const ::java::lang::String & a0)
                    {
                        jclass cls = initializeClass();
                        return Token$TokenCode(env->callStaticObjectMethod(cls, mids$[mid_valueOf_9d5a6536], a0.this$));
                    }

                    JArray< Token$TokenCode > Token$TokenCode::values()
                    {
                        jclass cls = initializeClass();
                        return JArray< Token$TokenCode >(env->callStaticObjectMethod(cls, mids$[mid_values_b00a3150]));
                    }
                }
            }
        }
    }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace is {
    namespace iclt {
        namespace icenlp {
            namespace core {
                namespace tokenizer {
                    static PyObject *t_Token$TokenCode_cast_(PyTypeObject *type, PyObject *arg);
                    static PyObject *t_Token$TokenCode_instance_(PyTypeObject *type, PyObject *arg);
                    static PyObject *t_Token$TokenCode_valueOf(PyTypeObject *type, PyObject *args);
                    static PyObject *t_Token$TokenCode_values(PyTypeObject *type);

                    static PyMethodDef t_Token$TokenCode__methods_[] = {
                        DECLARE_METHOD(t_Token$TokenCode, cast_, METH_O | METH_CLASS),
                        DECLARE_METHOD(t_Token$TokenCode, instance_, METH_O | METH_CLASS),
                        DECLARE_METHOD(t_Token$TokenCode, valueOf, METH_VARARGS | METH_CLASS),
                        DECLARE_METHOD(t_Token$TokenCode, values, METH_NOARGS | METH_CLASS),
                        { NULL, NULL, 0, NULL }
                    };

                    DECLARE_TYPE(Token$TokenCode, t_Token$TokenCode, ::java::lang::Enum, Token$TokenCode, abstract_init, 0, 0, 0, 0, 0);

                    void t_Token$TokenCode::install(PyObject *module)
                    {
                        installType(&PY_TYPE(Token$TokenCode), module, "Token$TokenCode", 0);
                    }

                    void t_Token$TokenCode::initialize(PyObject *module)
                    {
                        PyDict_SetItemString(PY_TYPE(Token$TokenCode).tp_dict, "class_", make_descriptor(Token$TokenCode::initializeClass, 1));
                        PyDict_SetItemString(PY_TYPE(Token$TokenCode).tp_dict, "wrapfn_", make_descriptor(t_Token$TokenCode::wrap_jobject));
                        PyDict_SetItemString(PY_TYPE(Token$TokenCode).tp_dict, "boxfn_", make_descriptor(boxObject));
                        Token$TokenCode::initializeClass();
                        PyDict_SetItemString(PY_TYPE(Token$TokenCode).tp_dict, "tcAbbrev", make_descriptor(t_Token$TokenCode::wrap_Object(*Token$TokenCode::tcAbbrev)));
                        PyDict_SetItemString(PY_TYPE(Token$TokenCode).tp_dict, "tcAnd", make_descriptor(t_Token$TokenCode::wrap_Object(*Token$TokenCode::tcAnd)));
                        PyDict_SetItemString(PY_TYPE(Token$TokenCode).tp_dict, "tcArrow", make_descriptor(t_Token$TokenCode::wrap_Object(*Token$TokenCode::tcArrow)));
                        PyDict_SetItemString(PY_TYPE(Token$TokenCode).tp_dict, "tcBackSlash", make_descriptor(t_Token$TokenCode::wrap_Object(*Token$TokenCode::tcBackSlash)));
                        PyDict_SetItemString(PY_TYPE(Token$TokenCode).tp_dict, "tcColon", make_descriptor(t_Token$TokenCode::wrap_Object(*Token$TokenCode::tcColon)));
                        PyDict_SetItemString(PY_TYPE(Token$TokenCode).tp_dict, "tcComma", make_descriptor(t_Token$TokenCode::wrap_Object(*Token$TokenCode::tcComma)));
                        PyDict_SetItemString(PY_TYPE(Token$TokenCode).tp_dict, "tcCurrency", make_descriptor(t_Token$TokenCode::wrap_Object(*Token$TokenCode::tcCurrency)));
                        PyDict_SetItemString(PY_TYPE(Token$TokenCode).tp_dict, "tcDollar", make_descriptor(t_Token$TokenCode::wrap_Object(*Token$TokenCode::tcDollar)));
                        PyDict_SetItemString(PY_TYPE(Token$TokenCode).tp_dict, "tcDoubleQuote", make_descriptor(t_Token$TokenCode::wrap_Object(*Token$TokenCode::tcDoubleQuote)));
                        PyDict_SetItemString(PY_TYPE(Token$TokenCode).tp_dict, "tcDownQuote", make_descriptor(t_Token$TokenCode::wrap_Object(*Token$TokenCode::tcDownQuote)));
                        PyDict_SetItemString(PY_TYPE(Token$TokenCode).tp_dict, "tcEOS", make_descriptor(t_Token$TokenCode::wrap_Object(*Token$TokenCode::tcEOS)));
                        PyDict_SetItemString(PY_TYPE(Token$TokenCode).tp_dict, "tcEqualSign", make_descriptor(t_Token$TokenCode::wrap_Object(*Token$TokenCode::tcEqualSign)));
                        PyDict_SetItemString(PY_TYPE(Token$TokenCode).tp_dict, "tcExclamation", make_descriptor(t_Token$TokenCode::wrap_Object(*Token$TokenCode::tcExclamation)));
                        PyDict_SetItemString(PY_TYPE(Token$TokenCode).tp_dict, "tcGreater", make_descriptor(t_Token$TokenCode::wrap_Object(*Token$TokenCode::tcGreater)));
                        PyDict_SetItemString(PY_TYPE(Token$TokenCode).tp_dict, "tcHyphen", make_descriptor(t_Token$TokenCode::wrap_Object(*Token$TokenCode::tcHyphen)));
                        PyDict_SetItemString(PY_TYPE(Token$TokenCode).tp_dict, "tcLArrow", make_descriptor(t_Token$TokenCode::wrap_Object(*Token$TokenCode::tcLArrow)));
                        PyDict_SetItemString(PY_TYPE(Token$TokenCode).tp_dict, "tcLBracket", make_descriptor(t_Token$TokenCode::wrap_Object(*Token$TokenCode::tcLBracket)));
                        PyDict_SetItemString(PY_TYPE(Token$TokenCode).tp_dict, "tcLCurlyBracket", make_descriptor(t_Token$TokenCode::wrap_Object(*Token$TokenCode::tcLCurlyBracket)));
                        PyDict_SetItemString(PY_TYPE(Token$TokenCode).tp_dict, "tcLParen", make_descriptor(t_Token$TokenCode::wrap_Object(*Token$TokenCode::tcLParen)));
                        PyDict_SetItemString(PY_TYPE(Token$TokenCode).tp_dict, "tcLess", make_descriptor(t_Token$TokenCode::wrap_Object(*Token$TokenCode::tcLess)));
                        PyDict_SetItemString(PY_TYPE(Token$TokenCode).tp_dict, "tcMultiWord", make_descriptor(t_Token$TokenCode::wrap_Object(*Token$TokenCode::tcMultiWord)));
                        PyDict_SetItemString(PY_TYPE(Token$TokenCode).tp_dict, "tcNone", make_descriptor(t_Token$TokenCode::wrap_Object(*Token$TokenCode::tcNone)));
                        PyDict_SetItemString(PY_TYPE(Token$TokenCode).tp_dict, "tcNumber", make_descriptor(t_Token$TokenCode::wrap_Object(*Token$TokenCode::tcNumber)));
                        PyDict_SetItemString(PY_TYPE(Token$TokenCode).tp_dict, "tcNumberSign", make_descriptor(t_Token$TokenCode::wrap_Object(*Token$TokenCode::tcNumberSign)));
                        PyDict_SetItemString(PY_TYPE(Token$TokenCode).tp_dict, "tcPeriod", make_descriptor(t_Token$TokenCode::wrap_Object(*Token$TokenCode::tcPeriod)));
                        PyDict_SetItemString(PY_TYPE(Token$TokenCode).tp_dict, "tcPlus", make_descriptor(t_Token$TokenCode::wrap_Object(*Token$TokenCode::tcPlus)));
                        PyDict_SetItemString(PY_TYPE(Token$TokenCode).tp_dict, "tcPlusMinus", make_descriptor(t_Token$TokenCode::wrap_Object(*Token$TokenCode::tcPlusMinus)));
                        PyDict_SetItemString(PY_TYPE(Token$TokenCode).tp_dict, "tcQuestion", make_descriptor(t_Token$TokenCode::wrap_Object(*Token$TokenCode::tcQuestion)));
                        PyDict_SetItemString(PY_TYPE(Token$TokenCode).tp_dict, "tcRArrow", make_descriptor(t_Token$TokenCode::wrap_Object(*Token$TokenCode::tcRArrow)));
                        PyDict_SetItemString(PY_TYPE(Token$TokenCode).tp_dict, "tcRBracket", make_descriptor(t_Token$TokenCode::wrap_Object(*Token$TokenCode::tcRBracket)));
                        PyDict_SetItemString(PY_TYPE(Token$TokenCode).tp_dict, "tcRCurlyBracket", make_descriptor(t_Token$TokenCode::wrap_Object(*Token$TokenCode::tcRCurlyBracket)));
                        PyDict_SetItemString(PY_TYPE(Token$TokenCode).tp_dict, "tcRParen", make_descriptor(t_Token$TokenCode::wrap_Object(*Token$TokenCode::tcRParen)));
                        PyDict_SetItemString(PY_TYPE(Token$TokenCode).tp_dict, "tcSemicolon", make_descriptor(t_Token$TokenCode::wrap_Object(*Token$TokenCode::tcSemicolon)));
                        PyDict_SetItemString(PY_TYPE(Token$TokenCode).tp_dict, "tcSingleQuote", make_descriptor(t_Token$TokenCode::wrap_Object(*Token$TokenCode::tcSingleQuote)));
                        PyDict_SetItemString(PY_TYPE(Token$TokenCode).tp_dict, "tcSlash", make_descriptor(t_Token$TokenCode::wrap_Object(*Token$TokenCode::tcSlash)));
                        PyDict_SetItemString(PY_TYPE(Token$TokenCode).tp_dict, "tcStar", make_descriptor(t_Token$TokenCode::wrap_Object(*Token$TokenCode::tcStar)));
                        PyDict_SetItemString(PY_TYPE(Token$TokenCode).tp_dict, "tcUnderscore", make_descriptor(t_Token$TokenCode::wrap_Object(*Token$TokenCode::tcUnderscore)));
                        PyDict_SetItemString(PY_TYPE(Token$TokenCode).tp_dict, "tcUnknown", make_descriptor(t_Token$TokenCode::wrap_Object(*Token$TokenCode::tcUnknown)));
                        PyDict_SetItemString(PY_TYPE(Token$TokenCode).tp_dict, "tcUpQuote", make_descriptor(t_Token$TokenCode::wrap_Object(*Token$TokenCode::tcUpQuote)));
                        PyDict_SetItemString(PY_TYPE(Token$TokenCode).tp_dict, "tcUrl", make_descriptor(t_Token$TokenCode::wrap_Object(*Token$TokenCode::tcUrl)));
                        PyDict_SetItemString(PY_TYPE(Token$TokenCode).tp_dict, "tcWhitespace", make_descriptor(t_Token$TokenCode::wrap_Object(*Token$TokenCode::tcWhitespace)));
                        PyDict_SetItemString(PY_TYPE(Token$TokenCode).tp_dict, "tcWord", make_descriptor(t_Token$TokenCode::wrap_Object(*Token$TokenCode::tcWord)));
                    }

                    static PyObject *t_Token$TokenCode_cast_(PyTypeObject *type, PyObject *arg)
                    {
                        if (!(arg = castCheck(arg, Token$TokenCode::initializeClass, 1)))
                            return NULL;
                        return t_Token$TokenCode::wrap_Object(Token$TokenCode(((t_Token$TokenCode *) arg)->object.this$));
                    }
                    static PyObject *t_Token$TokenCode_instance_(PyTypeObject *type, PyObject *arg)
                    {
                        if (!castCheck(arg, Token$TokenCode::initializeClass, 0))
                            Py_RETURN_FALSE;
                        Py_RETURN_TRUE;
                    }

                    static PyObject *t_Token$TokenCode_valueOf(PyTypeObject *type, PyObject *args)
                    {
                        ::java::lang::String a0((jobject) NULL);
                        Token$TokenCode result((jobject) NULL);

                        if (!parseArgs(args, "s", &a0))
                        {
                            OBJ_CALL(result = ::is::iclt::icenlp::core::tokenizer::Token$TokenCode::valueOf(a0));
                            return t_Token$TokenCode::wrap_Object(result);
                        }

                        return callSuper(type, "valueOf", args, 2);
                    }

                    static PyObject *t_Token$TokenCode_values(PyTypeObject *type)
                    {
                        JArray< Token$TokenCode > result((jobject) NULL);
                        OBJ_CALL(result = ::is::iclt::icenlp::core::tokenizer::Token$TokenCode::values());
                        return JArray<jobject>(result.this$).wrap(t_Token$TokenCode::wrap_jobject);
                    }
                }
            }
        }
    }
}
#include <jni.h>
#include "JCCEnv.h"
#include "is/iclt/icenlp/core/tritagger/FreqLexEntry.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace is {
    namespace iclt {
        namespace icenlp {
            namespace core {
                namespace tritagger {

                    ::java::lang::Class *FreqLexEntry::class$ = NULL;
                    jmethodID *FreqLexEntry::mids$ = NULL;

                    jclass FreqLexEntry::initializeClass()
                    {
                        if (!class$)
                        {

                            jclass cls = (jclass) env->findClass("is/iclt/icenlp/core/tritagger/FreqLexEntry");

                            mids$ = new jmethodID[max_mid];
                            mids$[mid_init$_6e53ccc6] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;I)V");
                            mids$[mid_getFrequency_54c6a179] = env->getMethodID(cls, "getFrequency", "()I");
                            mids$[mid_getTag_14c7b5c5] = env->getMethodID(cls, "getTag", "()Ljava/lang/String;");
                            mids$[mid_setFrequency_39c7bd3c] = env->getMethodID(cls, "setFrequency", "(I)V");

                            class$ = (::java::lang::Class *) new JObject(cls);
                        }
                        return (jclass) class$->this$;
                    }

                    FreqLexEntry::FreqLexEntry(const ::java::lang::String & a0, jint a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_6e53ccc6, a0.this$, a1)) {}

                    jint FreqLexEntry::getFrequency() const
                    {
                        return env->callIntMethod(this$, mids$[mid_getFrequency_54c6a179]);
                    }

                    ::java::lang::String FreqLexEntry::getTag() const
                    {
                        return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getTag_14c7b5c5]));
                    }

                    void FreqLexEntry::setFrequency(jint a0) const
                    {
                        env->callVoidMethod(this$, mids$[mid_setFrequency_39c7bd3c], a0);
                    }
                }
            }
        }
    }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace is {
    namespace iclt {
        namespace icenlp {
            namespace core {
                namespace tritagger {
                    static PyObject *t_FreqLexEntry_cast_(PyTypeObject *type, PyObject *arg);
                    static PyObject *t_FreqLexEntry_instance_(PyTypeObject *type, PyObject *arg);
                    static int t_FreqLexEntry_init_(t_FreqLexEntry *self, PyObject *args, PyObject *kwds);
                    static PyObject *t_FreqLexEntry_getFrequency(t_FreqLexEntry *self);
                    static PyObject *t_FreqLexEntry_getTag(t_FreqLexEntry *self);
                    static PyObject *t_FreqLexEntry_setFrequency(t_FreqLexEntry *self, PyObject *arg);
                    static PyObject *t_FreqLexEntry_get__frequency(t_FreqLexEntry *self, void *data);
                    static int t_FreqLexEntry_set__frequency(t_FreqLexEntry *self, PyObject *arg, void *data);
                    static PyObject *t_FreqLexEntry_get__tag(t_FreqLexEntry *self, void *data);
                    static PyGetSetDef t_FreqLexEntry__fields_[] = {
                        DECLARE_GETSET_FIELD(t_FreqLexEntry, frequency),
                        DECLARE_GET_FIELD(t_FreqLexEntry, tag),
                        { NULL, NULL, NULL, NULL, NULL }
                    };

                    static PyMethodDef t_FreqLexEntry__methods_[] = {
                        DECLARE_METHOD(t_FreqLexEntry, cast_, METH_O | METH_CLASS),
                        DECLARE_METHOD(t_FreqLexEntry, instance_, METH_O | METH_CLASS),
                        DECLARE_METHOD(t_FreqLexEntry, getFrequency, METH_NOARGS),
                        DECLARE_METHOD(t_FreqLexEntry, getTag, METH_NOARGS),
                        DECLARE_METHOD(t_FreqLexEntry, setFrequency, METH_O),
                        { NULL, NULL, 0, NULL }
                    };

                    DECLARE_TYPE(FreqLexEntry, t_FreqLexEntry, ::java::lang::Object, FreqLexEntry, t_FreqLexEntry_init_, 0, 0, t_FreqLexEntry__fields_, 0, 0);

                    void t_FreqLexEntry::install(PyObject *module)
                    {
                        installType(&PY_TYPE(FreqLexEntry), module, "FreqLexEntry", 0);
                    }

                    void t_FreqLexEntry::initialize(PyObject *module)
                    {
                        PyDict_SetItemString(PY_TYPE(FreqLexEntry).tp_dict, "class_", make_descriptor(FreqLexEntry::initializeClass, 1));
                        PyDict_SetItemString(PY_TYPE(FreqLexEntry).tp_dict, "wrapfn_", make_descriptor(t_FreqLexEntry::wrap_jobject));
                        PyDict_SetItemString(PY_TYPE(FreqLexEntry).tp_dict, "boxfn_", make_descriptor(boxObject));
                    }

                    static PyObject *t_FreqLexEntry_cast_(PyTypeObject *type, PyObject *arg)
                    {
                        if (!(arg = castCheck(arg, FreqLexEntry::initializeClass, 1)))
                            return NULL;
                        return t_FreqLexEntry::wrap_Object(FreqLexEntry(((t_FreqLexEntry *) arg)->object.this$));
                    }
                    static PyObject *t_FreqLexEntry_instance_(PyTypeObject *type, PyObject *arg)
                    {
                        if (!castCheck(arg, FreqLexEntry::initializeClass, 0))
                            Py_RETURN_FALSE;
                        Py_RETURN_TRUE;
                    }

                    static int t_FreqLexEntry_init_(t_FreqLexEntry *self, PyObject *args, PyObject *kwds)
                    {
                        ::java::lang::String a0((jobject) NULL);
                        jint a1;
                        FreqLexEntry object((jobject) NULL);

                        if (!parseArgs(args, "sI", &a0, &a1))
                        {
                            INT_CALL(object = FreqLexEntry(a0, a1));
                            self->object = object;
                        }
                        else
                        {
                            PyErr_SetArgsError((PyObject *) self, "__init__", args);
                            return -1;
                        }

                        return 0;
                    }

                    static PyObject *t_FreqLexEntry_getFrequency(t_FreqLexEntry *self)
                    {
                        jint result;
                        OBJ_CALL(result = self->object.getFrequency());
                        return PyInt_FromLong((long) result);
                    }

                    static PyObject *t_FreqLexEntry_getTag(t_FreqLexEntry *self)
                    {
                        ::java::lang::String result((jobject) NULL);
                        OBJ_CALL(result = self->object.getTag());
                        return j2p(result);
                    }

                    static PyObject *t_FreqLexEntry_setFrequency(t_FreqLexEntry *self, PyObject *arg)
                    {
                        jint a0;

                        if (!parseArg(arg, "I", &a0))
                        {
                            OBJ_CALL(self->object.setFrequency(a0));
                            Py_RETURN_NONE;
                        }

                        PyErr_SetArgsError((PyObject *) self, "setFrequency", arg);
                        return NULL;
                    }

                    static PyObject *t_FreqLexEntry_get__frequency(t_FreqLexEntry *self, void *data)
                    {
                        jint value;
                        OBJ_CALL(value = self->object.getFrequency());
                        return PyInt_FromLong((long) value);
                    }
                    static int t_FreqLexEntry_set__frequency(t_FreqLexEntry *self, PyObject *arg, void *data)
                    {
                        {
                            jint value;
                            if (!parseArg(arg, "I", &value))
                            {
                                INT_CALL(self->object.setFrequency(value));
                                return 0;
                            }
                        }
                        PyErr_SetArgsError((PyObject *) self, "frequency", arg);
                        return -1;
                    }

                    static PyObject *t_FreqLexEntry_get__tag(t_FreqLexEntry *self, void *data)
                    {
                        ::java::lang::String value((jobject) NULL);
                        OBJ_CALL(value = self->object.getTag());
                        return j2p(value);
                    }
                }
            }
        }
    }
}
#include <jni.h>
#include "JCCEnv.h"
#include "is/iclt/icenlp/core/iceparser/Func_SUBJ.h"
#include "java/io/IOException.h"
#include "java/io/Reader.h"
#include "java/io/Writer.h"
#include "java/lang/Class.h"
#include "java/io/InputStream.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace is {
    namespace iclt {
        namespace icenlp {
            namespace core {
                namespace iceparser {

                    ::java::lang::Class *Func_SUBJ::class$ = NULL;
                    jmethodID *Func_SUBJ::mids$ = NULL;
                    jint Func_SUBJ::YYEOF = (jint) 0;
                    jint Func_SUBJ::YYINITIAL = (jint) 0;

                    jclass Func_SUBJ::initializeClass()
                    {
                        if (!class$)
                        {

                            jclass cls = (jclass) env->findClass("is/iclt/icenlp/core/iceparser/Func_SUBJ");

                            mids$ = new jmethodID[max_mid];
                            mids$[mid_init$_cf2e3c10] = env->getMethodID(cls, "<init>", "(Ljava/io/Reader;)V");
                            mids$[mid_init$_be2e4f90] = env->getMethodID(cls, "<init>", "(Ljava/io/InputStream;)V");
                            mids$[mid_main_4dd4540c] = env->getStaticMethodID(cls, "main", "([Ljava/lang/String;)V");
                            mids$[mid_parse_5bcd5850] = env->getMethodID(cls, "parse", "(Ljava/io/Writer;)V");
                            mids$[mid_yybegin_39c7bd3c] = env->getMethodID(cls, "yybegin", "(I)V");
                            mids$[mid_yycharat_39c7bd29] = env->getMethodID(cls, "yycharat", "(I)C");
                            mids$[mid_yyclose_54c6a166] = env->getMethodID(cls, "yyclose", "()V");
                            mids$[mid_yylength_54c6a179] = env->getMethodID(cls, "yylength", "()I");
                            mids$[mid_yylex_54c6a179] = env->getMethodID(cls, "yylex", "()I");
                            mids$[mid_yypushback_39c7bd3c] = env->getMethodID(cls, "yypushback", "(I)V");
                            mids$[mid_yyreset_cf2e3c10] = env->getMethodID(cls, "yyreset", "(Ljava/io/Reader;)V");
                            mids$[mid_yystate_54c6a179] = env->getMethodID(cls, "yystate", "()I");
                            mids$[mid_yytext_14c7b5c5] = env->getMethodID(cls, "yytext", "()Ljava/lang/String;");

                            class$ = (::java::lang::Class *) new JObject(cls);
                            cls = (jclass) class$->this$;

                            YYEOF = env->getStaticIntField(cls, "YYEOF");
                            YYINITIAL = env->getStaticIntField(cls, "YYINITIAL");
                        }
                        return (jclass) class$->this$;
                    }

                    Func_SUBJ::Func_SUBJ(const ::java::io::Reader & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_cf2e3c10, a0.this$)) {}

                    Func_SUBJ::Func_SUBJ(const ::java::io::InputStream & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_be2e4f90, a0.this$)) {}

                    void Func_SUBJ::main(const JArray< ::java::lang::String > & a0)
                    {
                        jclass cls = initializeClass();
                        env->callStaticVoidMethod(cls, mids$[mid_main_4dd4540c], a0.this$);
                    }

                    void Func_SUBJ::parse(const ::java::io::Writer & a0) const
                    {
                        env->callVoidMethod(this$, mids$[mid_parse_5bcd5850], a0.this$);
                    }

                    void Func_SUBJ::yybegin(jint a0) const
                    {
                        env->callVoidMethod(this$, mids$[mid_yybegin_39c7bd3c], a0);
                    }

                    jchar Func_SUBJ::yycharat(jint a0) const
                    {
                        return env->callCharMethod(this$, mids$[mid_yycharat_39c7bd29], a0);
                    }

                    void Func_SUBJ::yyclose() const
                    {
                        env->callVoidMethod(this$, mids$[mid_yyclose_54c6a166]);
                    }

                    jint Func_SUBJ::yylength() const
                    {
                        return env->callIntMethod(this$, mids$[mid_yylength_54c6a179]);
                    }

                    jint Func_SUBJ::yylex() const
                    {
                        return env->callIntMethod(this$, mids$[mid_yylex_54c6a179]);
                    }

                    void Func_SUBJ::yypushback(jint a0) const
                    {
                        env->callVoidMethod(this$, mids$[mid_yypushback_39c7bd3c], a0);
                    }

                    void Func_SUBJ::yyreset(const ::java::io::Reader & a0) const
                    {
                        env->callVoidMethod(this$, mids$[mid_yyreset_cf2e3c10], a0.this$);
                    }

                    jint Func_SUBJ::yystate() const
                    {
                        return env->callIntMethod(this$, mids$[mid_yystate_54c6a179]);
                    }

                    ::java::lang::String Func_SUBJ::yytext() const
                    {
                        return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_yytext_14c7b5c5]));
                    }
                }
            }
        }
    }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace is {
    namespace iclt {
        namespace icenlp {
            namespace core {
                namespace iceparser {
                    static PyObject *t_Func_SUBJ_cast_(PyTypeObject *type, PyObject *arg);
                    static PyObject *t_Func_SUBJ_instance_(PyTypeObject *type, PyObject *arg);
                    static int t_Func_SUBJ_init_(t_Func_SUBJ *self, PyObject *args, PyObject *kwds);
                    static PyObject *t_Func_SUBJ_main(PyTypeObject *type, PyObject *arg);
                    static PyObject *t_Func_SUBJ_parse(t_Func_SUBJ *self, PyObject *arg);
                    static PyObject *t_Func_SUBJ_yybegin(t_Func_SUBJ *self, PyObject *arg);
                    static PyObject *t_Func_SUBJ_yycharat(t_Func_SUBJ *self, PyObject *arg);
                    static PyObject *t_Func_SUBJ_yyclose(t_Func_SUBJ *self);
                    static PyObject *t_Func_SUBJ_yylength(t_Func_SUBJ *self);
                    static PyObject *t_Func_SUBJ_yylex(t_Func_SUBJ *self);
                    static PyObject *t_Func_SUBJ_yypushback(t_Func_SUBJ *self, PyObject *arg);
                    static PyObject *t_Func_SUBJ_yyreset(t_Func_SUBJ *self, PyObject *arg);
                    static PyObject *t_Func_SUBJ_yystate(t_Func_SUBJ *self);
                    static PyObject *t_Func_SUBJ_yytext(t_Func_SUBJ *self);

                    static PyMethodDef t_Func_SUBJ__methods_[] = {
                        DECLARE_METHOD(t_Func_SUBJ, cast_, METH_O | METH_CLASS),
                        DECLARE_METHOD(t_Func_SUBJ, instance_, METH_O | METH_CLASS),
                        DECLARE_METHOD(t_Func_SUBJ, main, METH_O | METH_CLASS),
                        DECLARE_METHOD(t_Func_SUBJ, parse, METH_O),
                        DECLARE_METHOD(t_Func_SUBJ, yybegin, METH_O),
                        DECLARE_METHOD(t_Func_SUBJ, yycharat, METH_O),
                        DECLARE_METHOD(t_Func_SUBJ, yyclose, METH_NOARGS),
                        DECLARE_METHOD(t_Func_SUBJ, yylength, METH_NOARGS),
                        DECLARE_METHOD(t_Func_SUBJ, yylex, METH_NOARGS),
                        DECLARE_METHOD(t_Func_SUBJ, yypushback, METH_O),
                        DECLARE_METHOD(t_Func_SUBJ, yyreset, METH_O),
                        DECLARE_METHOD(t_Func_SUBJ, yystate, METH_NOARGS),
                        DECLARE_METHOD(t_Func_SUBJ, yytext, METH_NOARGS),
                        { NULL, NULL, 0, NULL }
                    };

                    DECLARE_TYPE(Func_SUBJ, t_Func_SUBJ, ::java::lang::Object, Func_SUBJ, t_Func_SUBJ_init_, 0, 0, 0, 0, 0);

                    void t_Func_SUBJ::install(PyObject *module)
                    {
                        installType(&PY_TYPE(Func_SUBJ), module, "Func_SUBJ", 0);
                    }

                    void t_Func_SUBJ::initialize(PyObject *module)
                    {
                        PyDict_SetItemString(PY_TYPE(Func_SUBJ).tp_dict, "class_", make_descriptor(Func_SUBJ::initializeClass, 1));
                        PyDict_SetItemString(PY_TYPE(Func_SUBJ).tp_dict, "wrapfn_", make_descriptor(t_Func_SUBJ::wrap_jobject));
                        PyDict_SetItemString(PY_TYPE(Func_SUBJ).tp_dict, "boxfn_", make_descriptor(boxObject));
                        Func_SUBJ::initializeClass();
                        PyDict_SetItemString(PY_TYPE(Func_SUBJ).tp_dict, "YYEOF", make_descriptor(Func_SUBJ::YYEOF));
                        PyDict_SetItemString(PY_TYPE(Func_SUBJ).tp_dict, "YYINITIAL", make_descriptor(Func_SUBJ::YYINITIAL));
                    }

                    static PyObject *t_Func_SUBJ_cast_(PyTypeObject *type, PyObject *arg)
                    {
                        if (!(arg = castCheck(arg, Func_SUBJ::initializeClass, 1)))
                            return NULL;
                        return t_Func_SUBJ::wrap_Object(Func_SUBJ(((t_Func_SUBJ *) arg)->object.this$));
                    }
                    static PyObject *t_Func_SUBJ_instance_(PyTypeObject *type, PyObject *arg)
                    {
                        if (!castCheck(arg, Func_SUBJ::initializeClass, 0))
                            Py_RETURN_FALSE;
                        Py_RETURN_TRUE;
                    }

                    static int t_Func_SUBJ_init_(t_Func_SUBJ *self, PyObject *args, PyObject *kwds)
                    {
                        switch (PyTuple_GET_SIZE(args)) {
                          case 1:
                            {
                                ::java::io::Reader a0((jobject) NULL);
                                Func_SUBJ object((jobject) NULL);

                                if (!parseArgs(args, "k", ::java::io::Reader::initializeClass, &a0))
                                {
                                    INT_CALL(object = Func_SUBJ(a0));
                                    self->object = object;
                                    break;
                                }
                            }
                            {
                                ::java::io::InputStream a0((jobject) NULL);
                                Func_SUBJ object((jobject) NULL);

                                if (!parseArgs(args, "k", ::java::io::InputStream::initializeClass, &a0))
                                {
                                    INT_CALL(object = Func_SUBJ(a0));
                                    self->object = object;
                                    break;
                                }
                            }
                          default:
                            PyErr_SetArgsError((PyObject *) self, "__init__", args);
                            return -1;
                        }

                        return 0;
                    }

                    static PyObject *t_Func_SUBJ_main(PyTypeObject *type, PyObject *arg)
                    {
                        JArray< ::java::lang::String > a0((jobject) NULL);

                        if (!parseArg(arg, "[s", &a0))
                        {
                            OBJ_CALL(::is::iclt::icenlp::core::iceparser::Func_SUBJ::main(a0));
                            Py_RETURN_NONE;
                        }

                        PyErr_SetArgsError(type, "main", arg);
                        return NULL;
                    }

                    static PyObject *t_Func_SUBJ_parse(t_Func_SUBJ *self, PyObject *arg)
                    {
                        ::java::io::Writer a0((jobject) NULL);

                        if (!parseArg(arg, "k", ::java::io::Writer::initializeClass, &a0))
                        {
                            OBJ_CALL(self->object.parse(a0));
                            Py_RETURN_NONE;
                        }

                        PyErr_SetArgsError((PyObject *) self, "parse", arg);
                        return NULL;
                    }

                    static PyObject *t_Func_SUBJ_yybegin(t_Func_SUBJ *self, PyObject *arg)
                    {
                        jint a0;

                        if (!parseArg(arg, "I", &a0))
                        {
                            OBJ_CALL(self->object.yybegin(a0));
                            Py_RETURN_NONE;
                        }

                        PyErr_SetArgsError((PyObject *) self, "yybegin", arg);
                        return NULL;
                    }

                    static PyObject *t_Func_SUBJ_yycharat(t_Func_SUBJ *self, PyObject *arg)
                    {
                        jint a0;
                        jchar result;

                        if (!parseArg(arg, "I", &a0))
                        {
                            OBJ_CALL(result = self->object.yycharat(a0));
                            return PyUnicode_FromUnicode((Py_UNICODE *) &result, 1);
                        }

                        PyErr_SetArgsError((PyObject *) self, "yycharat", arg);
                        return NULL;
                    }

                    static PyObject *t_Func_SUBJ_yyclose(t_Func_SUBJ *self)
                    {
                        OBJ_CALL(self->object.yyclose());
                        Py_RETURN_NONE;
                    }

                    static PyObject *t_Func_SUBJ_yylength(t_Func_SUBJ *self)
                    {
                        jint result;
                        OBJ_CALL(result = self->object.yylength());
                        return PyInt_FromLong((long) result);
                    }

                    static PyObject *t_Func_SUBJ_yylex(t_Func_SUBJ *self)
                    {
                        jint result;
                        OBJ_CALL(result = self->object.yylex());
                        return PyInt_FromLong((long) result);
                    }

                    static PyObject *t_Func_SUBJ_yypushback(t_Func_SUBJ *self, PyObject *arg)
                    {
                        jint a0;

                        if (!parseArg(arg, "I", &a0))
                        {
                            OBJ_CALL(self->object.yypushback(a0));
                            Py_RETURN_NONE;
                        }

                        PyErr_SetArgsError((PyObject *) self, "yypushback", arg);
                        return NULL;
                    }

                    static PyObject *t_Func_SUBJ_yyreset(t_Func_SUBJ *self, PyObject *arg)
                    {
                        ::java::io::Reader a0((jobject) NULL);

                        if (!parseArg(arg, "k", ::java::io::Reader::initializeClass, &a0))
                        {
                            OBJ_CALL(self->object.yyreset(a0));
                            Py_RETURN_NONE;
                        }

                        PyErr_SetArgsError((PyObject *) self, "yyreset", arg);
                        return NULL;
                    }

                    static PyObject *t_Func_SUBJ_yystate(t_Func_SUBJ *self)
                    {
                        jint result;
                        OBJ_CALL(result = self->object.yystate());
                        return PyInt_FromLong((long) result);
                    }

                    static PyObject *t_Func_SUBJ_yytext(t_Func_SUBJ *self)
                    {
                        ::java::lang::String result((jobject) NULL);
                        OBJ_CALL(result = self->object.yytext());
                        return j2p(result);
                    }
                }
            }
        }
    }
}
#include <jni.h>
#include "JCCEnv.h"
#include "is/iclt/icenlp/core/lemmald/RuleDatabase.h"
#include "is/iclt/icenlp/core/lemmald/LemmaRule.h"
#include "java/util/HashSet.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "java/io/InputStream.h"
#include "JArray.h"

namespace is {
    namespace iclt {
        namespace icenlp {
            namespace core {
                namespace lemmald {

                    ::java::lang::Class *RuleDatabase::class$ = NULL;
                    jmethodID *RuleDatabase::mids$ = NULL;

                    jclass RuleDatabase::initializeClass()
                    {
                        if (!class$)
                        {

                            jclass cls = (jclass) env->findClass("is/iclt/icenlp/core/lemmald/RuleDatabase");

                            mids$ = new jmethodID[max_mid];
                            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                            mids$[mid_getLemmaRules_dacecad9] = env->getStaticMethodID(cls, "getLemmaRules", "(Ljava/lang/String;)Ljava/util/HashSet;");
                            mids$[mid_loadRules_be2e4f90] = env->getStaticMethodID(cls, "loadRules", "(Ljava/io/InputStream;)V");
                            mids$[mid_loadRules_5fdc3f48] = env->getStaticMethodID(cls, "loadRules", "(Ljava/lang/String;)V");
                            mids$[mid_ruleIdExists_5fdc3f44] = env->getStaticMethodID(cls, "ruleIdExists", "(Ljava/lang/String;)Z");
                            mids$[mid_wordExists_4a26474e] = env->getStaticMethodID(cls, "wordExists", "(Ljava/lang/String;Ljava/lang/String;)Z");
                            mids$[mid_wordFormExists_5fdc3f44] = env->getStaticMethodID(cls, "wordFormExists", "(Ljava/lang/String;)Z");
                            mids$[mid_wordFormExistsLoose_5fdc3f44] = env->getStaticMethodID(cls, "wordFormExistsLoose", "(Ljava/lang/String;)Z");

                            class$ = (::java::lang::Class *) new JObject(cls);
                        }
                        return (jclass) class$->this$;
                    }

                    RuleDatabase::RuleDatabase() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

                    ::java::util::HashSet RuleDatabase::getLemmaRules(const ::java::lang::String & a0)
                    {
                        jclass cls = initializeClass();
                        return ::java::util::HashSet(env->callStaticObjectMethod(cls, mids$[mid_getLemmaRules_dacecad9], a0.this$));
                    }

                    void RuleDatabase::loadRules(const ::java::io::InputStream & a0)
                    {
                        jclass cls = initializeClass();
                        env->callStaticVoidMethod(cls, mids$[mid_loadRules_be2e4f90], a0.this$);
                    }

                    void RuleDatabase::loadRules(const ::java::lang::String & a0)
                    {
                        jclass cls = initializeClass();
                        env->callStaticVoidMethod(cls, mids$[mid_loadRules_5fdc3f48], a0.this$);
                    }

                    jboolean RuleDatabase::ruleIdExists(const ::java::lang::String & a0)
                    {
                        jclass cls = initializeClass();
                        return env->callStaticBooleanMethod(cls, mids$[mid_ruleIdExists_5fdc3f44], a0.this$);
                    }

                    jboolean RuleDatabase::wordExists(const ::java::lang::String & a0, const ::java::lang::String & a1)
                    {
                        jclass cls = initializeClass();
                        return env->callStaticBooleanMethod(cls, mids$[mid_wordExists_4a26474e], a0.this$, a1.this$);
                    }

                    jboolean RuleDatabase::wordFormExists(const ::java::lang::String & a0)
                    {
                        jclass cls = initializeClass();
                        return env->callStaticBooleanMethod(cls, mids$[mid_wordFormExists_5fdc3f44], a0.this$);
                    }

                    jboolean RuleDatabase::wordFormExistsLoose(const ::java::lang::String & a0)
                    {
                        jclass cls = initializeClass();
                        return env->callStaticBooleanMethod(cls, mids$[mid_wordFormExistsLoose_5fdc3f44], a0.this$);
                    }
                }
            }
        }
    }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace is {
    namespace iclt {
        namespace icenlp {
            namespace core {
                namespace lemmald {
                    static PyObject *t_RuleDatabase_cast_(PyTypeObject *type, PyObject *arg);
                    static PyObject *t_RuleDatabase_instance_(PyTypeObject *type, PyObject *arg);
                    static int t_RuleDatabase_init_(t_RuleDatabase *self, PyObject *args, PyObject *kwds);
                    static PyObject *t_RuleDatabase_getLemmaRules(PyTypeObject *type, PyObject *arg);
                    static PyObject *t_RuleDatabase_loadRules(PyTypeObject *type, PyObject *args);
                    static PyObject *t_RuleDatabase_ruleIdExists(PyTypeObject *type, PyObject *arg);
                    static PyObject *t_RuleDatabase_wordExists(PyTypeObject *type, PyObject *args);
                    static PyObject *t_RuleDatabase_wordFormExists(PyTypeObject *type, PyObject *arg);
                    static PyObject *t_RuleDatabase_wordFormExistsLoose(PyTypeObject *type, PyObject *arg);

                    static PyMethodDef t_RuleDatabase__methods_[] = {
                        DECLARE_METHOD(t_RuleDatabase, cast_, METH_O | METH_CLASS),
                        DECLARE_METHOD(t_RuleDatabase, instance_, METH_O | METH_CLASS),
                        DECLARE_METHOD(t_RuleDatabase, getLemmaRules, METH_O | METH_CLASS),
                        DECLARE_METHOD(t_RuleDatabase, loadRules, METH_VARARGS | METH_CLASS),
                        DECLARE_METHOD(t_RuleDatabase, ruleIdExists, METH_O | METH_CLASS),
                        DECLARE_METHOD(t_RuleDatabase, wordExists, METH_VARARGS | METH_CLASS),
                        DECLARE_METHOD(t_RuleDatabase, wordFormExists, METH_O | METH_CLASS),
                        DECLARE_METHOD(t_RuleDatabase, wordFormExistsLoose, METH_O | METH_CLASS),
                        { NULL, NULL, 0, NULL }
                    };

                    DECLARE_TYPE(RuleDatabase, t_RuleDatabase, ::java::lang::Object, RuleDatabase, t_RuleDatabase_init_, 0, 0, 0, 0, 0);

                    void t_RuleDatabase::install(PyObject *module)
                    {
                        installType(&PY_TYPE(RuleDatabase), module, "RuleDatabase", 0);
                    }

                    void t_RuleDatabase::initialize(PyObject *module)
                    {
                        PyDict_SetItemString(PY_TYPE(RuleDatabase).tp_dict, "class_", make_descriptor(RuleDatabase::initializeClass, 1));
                        PyDict_SetItemString(PY_TYPE(RuleDatabase).tp_dict, "wrapfn_", make_descriptor(t_RuleDatabase::wrap_jobject));
                        PyDict_SetItemString(PY_TYPE(RuleDatabase).tp_dict, "boxfn_", make_descriptor(boxObject));
                    }

                    static PyObject *t_RuleDatabase_cast_(PyTypeObject *type, PyObject *arg)
                    {
                        if (!(arg = castCheck(arg, RuleDatabase::initializeClass, 1)))
                            return NULL;
                        return t_RuleDatabase::wrap_Object(RuleDatabase(((t_RuleDatabase *) arg)->object.this$));
                    }
                    static PyObject *t_RuleDatabase_instance_(PyTypeObject *type, PyObject *arg)
                    {
                        if (!castCheck(arg, RuleDatabase::initializeClass, 0))
                            Py_RETURN_FALSE;
                        Py_RETURN_TRUE;
                    }

                    static int t_RuleDatabase_init_(t_RuleDatabase *self, PyObject *args, PyObject *kwds)
                    {
                        RuleDatabase object((jobject) NULL);

                        INT_CALL(object = RuleDatabase());
                        self->object = object;

                        return 0;
                    }

                    static PyObject *t_RuleDatabase_getLemmaRules(PyTypeObject *type, PyObject *arg)
                    {
                        ::java::lang::String a0((jobject) NULL);
                        ::java::util::HashSet result((jobject) NULL);

                        if (!parseArg(arg, "s", &a0))
                        {
                            OBJ_CALL(result = ::is::iclt::icenlp::core::lemmald::RuleDatabase::getLemmaRules(a0));
                            return ::java::util::t_HashSet::wrap_Object(result, &::is::iclt::icenlp::core::lemmald::PY_TYPE(LemmaRule));
                        }

                        PyErr_SetArgsError(type, "getLemmaRules", arg);
                        return NULL;
                    }

                    static PyObject *t_RuleDatabase_loadRules(PyTypeObject *type, PyObject *args)
                    {
                        switch (PyTuple_GET_SIZE(args)) {
                          case 1:
                            {
                                ::java::io::InputStream a0((jobject) NULL);

                                if (!parseArgs(args, "k", ::java::io::InputStream::initializeClass, &a0))
                                {
                                    OBJ_CALL(::is::iclt::icenlp::core::lemmald::RuleDatabase::loadRules(a0));
                                    Py_RETURN_NONE;
                                }
                            }
                            {
                                ::java::lang::String a0((jobject) NULL);

                                if (!parseArgs(args, "s", &a0))
                                {
                                    OBJ_CALL(::is::iclt::icenlp::core::lemmald::RuleDatabase::loadRules(a0));
                                    Py_RETURN_NONE;
                                }
                            }
                        }

                        PyErr_SetArgsError(type, "loadRules", args);
                        return NULL;
                    }

                    static PyObject *t_RuleDatabase_ruleIdExists(PyTypeObject *type, PyObject *arg)
                    {
                        ::java::lang::String a0((jobject) NULL);
                        jboolean result;

                        if (!parseArg(arg, "s", &a0))
                        {
                            OBJ_CALL(result = ::is::iclt::icenlp::core::lemmald::RuleDatabase::ruleIdExists(a0));
                            Py_RETURN_BOOL(result);
                        }

                        PyErr_SetArgsError(type, "ruleIdExists", arg);
                        return NULL;
                    }

                    static PyObject *t_RuleDatabase_wordExists(PyTypeObject *type, PyObject *args)
                    {
                        ::java::lang::String a0((jobject) NULL);
                        ::java::lang::String a1((jobject) NULL);
                        jboolean result;

                        if (!parseArgs(args, "ss", &a0, &a1))
                        {
                            OBJ_CALL(result = ::is::iclt::icenlp::core::lemmald::RuleDatabase::wordExists(a0, a1));
                            Py_RETURN_BOOL(result);
                        }

                        PyErr_SetArgsError(type, "wordExists", args);
                        return NULL;
                    }

                    static PyObject *t_RuleDatabase_wordFormExists(PyTypeObject *type, PyObject *arg)
                    {
                        ::java::lang::String a0((jobject) NULL);
                        jboolean result;

                        if (!parseArg(arg, "s", &a0))
                        {
                            OBJ_CALL(result = ::is::iclt::icenlp::core::lemmald::RuleDatabase::wordFormExists(a0));
                            Py_RETURN_BOOL(result);
                        }

                        PyErr_SetArgsError(type, "wordFormExists", arg);
                        return NULL;
                    }

                    static PyObject *t_RuleDatabase_wordFormExistsLoose(PyTypeObject *type, PyObject *arg)
                    {
                        ::java::lang::String a0((jobject) NULL);
                        jboolean result;

                        if (!parseArg(arg, "s", &a0))
                        {
                            OBJ_CALL(result = ::is::iclt::icenlp::core::lemmald::RuleDatabase::wordFormExistsLoose(a0));
                            Py_RETURN_BOOL(result);
                        }

                        PyErr_SetArgsError(type, "wordFormExistsLoose", arg);
                        return NULL;
                    }
                }
            }
        }
    }
}
#include <jni.h>
#include "JCCEnv.h"
#include "is/iclt/icenlp/core/formald/tags/TaggedToken.h"
#include "is/iclt/icenlp/core/formald/tags/TaggedSentence.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace is {
    namespace iclt {
        namespace icenlp {
            namespace core {
                namespace formald {
                    namespace tags {

                        ::java::lang::Class *TaggedToken::class$ = NULL;
                        jmethodID *TaggedToken::mids$ = NULL;

                        jclass TaggedToken::initializeClass()
                        {
                            if (!class$)
                            {

                                jclass cls = (jclass) env->findClass("is/iclt/icenlp/core/formald/tags/TaggedToken");

                                mids$ = new jmethodID[max_mid];
                                mids$[mid_getLemma_14c7b5c5] = env->getMethodID(cls, "getLemma", "()Ljava/lang/String;");
                                mids$[mid_getParentSentence_060fbffc] = env->getMethodID(cls, "getParentSentence", "()Lis/iclt/icenlp/core/formald/tags/TaggedSentence;");
                                mids$[mid_getTag_14c7b5c5] = env->getMethodID(cls, "getTag", "()Ljava/lang/String;");
                                mids$[mid_getWord_14c7b5c5] = env->getMethodID(cls, "getWord", "()Ljava/lang/String;");
                                mids$[mid_hasLemma_54c6a16a] = env->getMethodID(cls, "hasLemma", "()Z");
                                mids$[mid_hasTag_54c6a16a] = env->getMethodID(cls, "hasTag", "()Z");
                                mids$[mid_setLemma_5fdc3f48] = env->getMethodID(cls, "setLemma", "(Ljava/lang/String;)V");
                                mids$[mid_setTag_5fdc3f48] = env->getMethodID(cls, "setTag", "(Ljava/lang/String;)V");
                                mids$[mid_setWord_5fdc3f48] = env->getMethodID(cls, "setWord", "(Ljava/lang/String;)V");

                                class$ = (::java::lang::Class *) new JObject(cls);
                            }
                            return (jclass) class$->this$;
                        }

                        ::java::lang::String TaggedToken::getLemma() const
                        {
                            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getLemma_14c7b5c5]));
                        }

                        ::is::iclt::icenlp::core::formald::tags::TaggedSentence TaggedToken::getParentSentence() const
                        {
                            return ::is::iclt::icenlp::core::formald::tags::TaggedSentence(env->callObjectMethod(this$, mids$[mid_getParentSentence_060fbffc]));
                        }

                        ::java::lang::String TaggedToken::getTag() const
                        {
                            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getTag_14c7b5c5]));
                        }

                        ::java::lang::String TaggedToken::getWord() const
                        {
                            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getWord_14c7b5c5]));
                        }

                        jboolean TaggedToken::hasLemma() const
                        {
                            return env->callBooleanMethod(this$, mids$[mid_hasLemma_54c6a16a]);
                        }

                        jboolean TaggedToken::hasTag() const
                        {
                            return env->callBooleanMethod(this$, mids$[mid_hasTag_54c6a16a]);
                        }

                        void TaggedToken::setLemma(const ::java::lang::String & a0) const
                        {
                            env->callVoidMethod(this$, mids$[mid_setLemma_5fdc3f48], a0.this$);
                        }

                        void TaggedToken::setTag(const ::java::lang::String & a0) const
                        {
                            env->callVoidMethod(this$, mids$[mid_setTag_5fdc3f48], a0.this$);
                        }

                        void TaggedToken::setWord(const ::java::lang::String & a0) const
                        {
                            env->callVoidMethod(this$, mids$[mid_setWord_5fdc3f48], a0.this$);
                        }
                    }
                }
            }
        }
    }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace is {
    namespace iclt {
        namespace icenlp {
            namespace core {
                namespace formald {
                    namespace tags {
                        static PyObject *t_TaggedToken_cast_(PyTypeObject *type, PyObject *arg);
                        static PyObject *t_TaggedToken_instance_(PyTypeObject *type, PyObject *arg);
                        static PyObject *t_TaggedToken_getLemma(t_TaggedToken *self);
                        static PyObject *t_TaggedToken_getParentSentence(t_TaggedToken *self);
                        static PyObject *t_TaggedToken_getTag(t_TaggedToken *self);
                        static PyObject *t_TaggedToken_getWord(t_TaggedToken *self);
                        static PyObject *t_TaggedToken_hasLemma(t_TaggedToken *self);
                        static PyObject *t_TaggedToken_hasTag(t_TaggedToken *self);
                        static PyObject *t_TaggedToken_setLemma(t_TaggedToken *self, PyObject *arg);
                        static PyObject *t_TaggedToken_setTag(t_TaggedToken *self, PyObject *arg);
                        static PyObject *t_TaggedToken_setWord(t_TaggedToken *self, PyObject *arg);
                        static PyObject *t_TaggedToken_get__lemma(t_TaggedToken *self, void *data);
                        static int t_TaggedToken_set__lemma(t_TaggedToken *self, PyObject *arg, void *data);
                        static PyObject *t_TaggedToken_get__parentSentence(t_TaggedToken *self, void *data);
                        static PyObject *t_TaggedToken_get__tag(t_TaggedToken *self, void *data);
                        static int t_TaggedToken_set__tag(t_TaggedToken *self, PyObject *arg, void *data);
                        static PyObject *t_TaggedToken_get__word(t_TaggedToken *self, void *data);
                        static int t_TaggedToken_set__word(t_TaggedToken *self, PyObject *arg, void *data);
                        static PyGetSetDef t_TaggedToken__fields_[] = {
                            DECLARE_GETSET_FIELD(t_TaggedToken, lemma),
                            DECLARE_GET_FIELD(t_TaggedToken, parentSentence),
                            DECLARE_GETSET_FIELD(t_TaggedToken, tag),
                            DECLARE_GETSET_FIELD(t_TaggedToken, word),
                            { NULL, NULL, NULL, NULL, NULL }
                        };

                        static PyMethodDef t_TaggedToken__methods_[] = {
                            DECLARE_METHOD(t_TaggedToken, cast_, METH_O | METH_CLASS),
                            DECLARE_METHOD(t_TaggedToken, instance_, METH_O | METH_CLASS),
                            DECLARE_METHOD(t_TaggedToken, getLemma, METH_NOARGS),
                            DECLARE_METHOD(t_TaggedToken, getParentSentence, METH_NOARGS),
                            DECLARE_METHOD(t_TaggedToken, getTag, METH_NOARGS),
                            DECLARE_METHOD(t_TaggedToken, getWord, METH_NOARGS),
                            DECLARE_METHOD(t_TaggedToken, hasLemma, METH_NOARGS),
                            DECLARE_METHOD(t_TaggedToken, hasTag, METH_NOARGS),
                            DECLARE_METHOD(t_TaggedToken, setLemma, METH_O),
                            DECLARE_METHOD(t_TaggedToken, setTag, METH_O),
                            DECLARE_METHOD(t_TaggedToken, setWord, METH_O),
                            { NULL, NULL, 0, NULL }
                        };

                        DECLARE_TYPE(TaggedToken, t_TaggedToken, ::java::lang::Object, TaggedToken, abstract_init, 0, 0, t_TaggedToken__fields_, 0, 0);

                        void t_TaggedToken::install(PyObject *module)
                        {
                            installType(&PY_TYPE(TaggedToken), module, "TaggedToken", 0);
                        }

                        void t_TaggedToken::initialize(PyObject *module)
                        {
                            PyDict_SetItemString(PY_TYPE(TaggedToken).tp_dict, "class_", make_descriptor(TaggedToken::initializeClass, 1));
                            PyDict_SetItemString(PY_TYPE(TaggedToken).tp_dict, "wrapfn_", make_descriptor(t_TaggedToken::wrap_jobject));
                            PyDict_SetItemString(PY_TYPE(TaggedToken).tp_dict, "boxfn_", make_descriptor(boxObject));
                        }

                        static PyObject *t_TaggedToken_cast_(PyTypeObject *type, PyObject *arg)
                        {
                            if (!(arg = castCheck(arg, TaggedToken::initializeClass, 1)))
                                return NULL;
                            return t_TaggedToken::wrap_Object(TaggedToken(((t_TaggedToken *) arg)->object.this$));
                        }
                        static PyObject *t_TaggedToken_instance_(PyTypeObject *type, PyObject *arg)
                        {
                            if (!castCheck(arg, TaggedToken::initializeClass, 0))
                                Py_RETURN_FALSE;
                            Py_RETURN_TRUE;
                        }

                        static PyObject *t_TaggedToken_getLemma(t_TaggedToken *self)
                        {
                            ::java::lang::String result((jobject) NULL);
                            OBJ_CALL(result = self->object.getLemma());
                            return j2p(result);
                        }

                        static PyObject *t_TaggedToken_getParentSentence(t_TaggedToken *self)
                        {
                            ::is::iclt::icenlp::core::formald::tags::TaggedSentence result((jobject) NULL);
                            OBJ_CALL(result = self->object.getParentSentence());
                            return ::is::iclt::icenlp::core::formald::tags::t_TaggedSentence::wrap_Object(result);
                        }

                        static PyObject *t_TaggedToken_getTag(t_TaggedToken *self)
                        {
                            ::java::lang::String result((jobject) NULL);
                            OBJ_CALL(result = self->object.getTag());
                            return j2p(result);
                        }

                        static PyObject *t_TaggedToken_getWord(t_TaggedToken *self)
                        {
                            ::java::lang::String result((jobject) NULL);
                            OBJ_CALL(result = self->object.getWord());
                            return j2p(result);
                        }

                        static PyObject *t_TaggedToken_hasLemma(t_TaggedToken *self)
                        {
                            jboolean result;
                            OBJ_CALL(result = self->object.hasLemma());
                            Py_RETURN_BOOL(result);
                        }

                        static PyObject *t_TaggedToken_hasTag(t_TaggedToken *self)
                        {
                            jboolean result;
                            OBJ_CALL(result = self->object.hasTag());
                            Py_RETURN_BOOL(result);
                        }

                        static PyObject *t_TaggedToken_setLemma(t_TaggedToken *self, PyObject *arg)
                        {
                            ::java::lang::String a0((jobject) NULL);

                            if (!parseArg(arg, "s", &a0))
                            {
                                OBJ_CALL(self->object.setLemma(a0));
                                Py_RETURN_NONE;
                            }

                            PyErr_SetArgsError((PyObject *) self, "setLemma", arg);
                            return NULL;
                        }

                        static PyObject *t_TaggedToken_setTag(t_TaggedToken *self, PyObject *arg)
                        {
                            ::java::lang::String a0((jobject) NULL);

                            if (!parseArg(arg, "s", &a0))
                            {
                                OBJ_CALL(self->object.setTag(a0));
                                Py_RETURN_NONE;
                            }

                            PyErr_SetArgsError((PyObject *) self, "setTag", arg);
                            return NULL;
                        }

                        static PyObject *t_TaggedToken_setWord(t_TaggedToken *self, PyObject *arg)
                        {
                            ::java::lang::String a0((jobject) NULL);

                            if (!parseArg(arg, "s", &a0))
                            {
                                OBJ_CALL(self->object.setWord(a0));
                                Py_RETURN_NONE;
                            }

                            PyErr_SetArgsError((PyObject *) self, "setWord", arg);
                            return NULL;
                        }

                        static PyObject *t_TaggedToken_get__lemma(t_TaggedToken *self, void *data)
                        {
                            ::java::lang::String value((jobject) NULL);
                            OBJ_CALL(value = self->object.getLemma());
                            return j2p(value);
                        }
                        static int t_TaggedToken_set__lemma(t_TaggedToken *self, PyObject *arg, void *data)
                        {
                            {
                                ::java::lang::String value((jobject) NULL);
                                if (!parseArg(arg, "s", &value))
                                {
                                    INT_CALL(self->object.setLemma(value));
                                    return 0;
                                }
                            }
                            PyErr_SetArgsError((PyObject *) self, "lemma", arg);
                            return -1;
                        }

                        static PyObject *t_TaggedToken_get__parentSentence(t_TaggedToken *self, void *data)
                        {
                            ::is::iclt::icenlp::core::formald::tags::TaggedSentence value((jobject) NULL);
                            OBJ_CALL(value = self->object.getParentSentence());
                            return ::is::iclt::icenlp::core::formald::tags::t_TaggedSentence::wrap_Object(value);
                        }

                        static PyObject *t_TaggedToken_get__tag(t_TaggedToken *self, void *data)
                        {
                            ::java::lang::String value((jobject) NULL);
                            OBJ_CALL(value = self->object.getTag());
                            return j2p(value);
                        }
                        static int t_TaggedToken_set__tag(t_TaggedToken *self, PyObject *arg, void *data)
                        {
                            {
                                ::java::lang::String value((jobject) NULL);
                                if (!parseArg(arg, "s", &value))
                                {
                                    INT_CALL(self->object.setTag(value));
                                    return 0;
                                }
                            }
                            PyErr_SetArgsError((PyObject *) self, "tag", arg);
                            return -1;
                        }

                        static PyObject *t_TaggedToken_get__word(t_TaggedToken *self, void *data)
                        {
                            ::java::lang::String value((jobject) NULL);
                            OBJ_CALL(value = self->object.getWord());
                            return j2p(value);
                        }
                        static int t_TaggedToken_set__word(t_TaggedToken *self, PyObject *arg, void *data)
                        {
                            {
                                ::java::lang::String value((jobject) NULL);
                                if (!parseArg(arg, "s", &value))
                                {
                                    INT_CALL(self->object.setWord(value));
                                    return 0;
                                }
                            }
                            PyErr_SetArgsError((PyObject *) self, "word", arg);
                            return -1;
                        }
                    }
                }
            }
        }
    }
}
#include <jni.h>
#include "JCCEnv.h"
#include "is/iclt/icenlp/core/utils/FileOperations.h"
#include "java/util/ArrayList.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace is {
    namespace iclt {
        namespace icenlp {
            namespace core {
                namespace utils {

                    ::java::lang::Class *FileOperations::class$ = NULL;
                    jmethodID *FileOperations::mids$ = NULL;

                    jclass FileOperations::initializeClass()
                    {
                        if (!class$)
                        {

                            jclass cls = (jclass) env->findClass("is/iclt/icenlp/core/utils/FileOperations");

                            mids$ = new jmethodID[max_mid];
                            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                            mids$[mid_fileToString_97a5258f] = env->getStaticMethodID(cls, "fileToString", "(Ljava/lang/String;)Ljava/lang/String;");
                            mids$[mid_getFilePaths_e5d0f376] = env->getStaticMethodID(cls, "getFilePaths", "(Ljava/lang/String;)Ljava/util/ArrayList;");
                            mids$[mid_stringToFile_4a264742] = env->getStaticMethodID(cls, "stringToFile", "(Ljava/lang/String;Ljava/lang/String;)V");

                            class$ = (::java::lang::Class *) new JObject(cls);
                        }
                        return (jclass) class$->this$;
                    }

                    FileOperations::FileOperations() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

                    ::java::lang::String FileOperations::fileToString(const ::java::lang::String & a0)
                    {
                        jclass cls = initializeClass();
                        return ::java::lang::String(env->callStaticObjectMethod(cls, mids$[mid_fileToString_97a5258f], a0.this$));
                    }

                    ::java::util::ArrayList FileOperations::getFilePaths(const ::java::lang::String & a0)
                    {
                        jclass cls = initializeClass();
                        return ::java::util::ArrayList(env->callStaticObjectMethod(cls, mids$[mid_getFilePaths_e5d0f376], a0.this$));
                    }

                    void FileOperations::stringToFile(const ::java::lang::String & a0, const ::java::lang::String & a1)
                    {
                        jclass cls = initializeClass();
                        env->callStaticVoidMethod(cls, mids$[mid_stringToFile_4a264742], a0.this$, a1.this$);
                    }
                }
            }
        }
    }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace is {
    namespace iclt {
        namespace icenlp {
            namespace core {
                namespace utils {
                    static PyObject *t_FileOperations_cast_(PyTypeObject *type, PyObject *arg);
                    static PyObject *t_FileOperations_instance_(PyTypeObject *type, PyObject *arg);
                    static int t_FileOperations_init_(t_FileOperations *self, PyObject *args, PyObject *kwds);
                    static PyObject *t_FileOperations_fileToString(PyTypeObject *type, PyObject *arg);
                    static PyObject *t_FileOperations_getFilePaths(PyTypeObject *type, PyObject *arg);
                    static PyObject *t_FileOperations_stringToFile(PyTypeObject *type, PyObject *args);

                    static PyMethodDef t_FileOperations__methods_[] = {
                        DECLARE_METHOD(t_FileOperations, cast_, METH_O | METH_CLASS),
                        DECLARE_METHOD(t_FileOperations, instance_, METH_O | METH_CLASS),
                        DECLARE_METHOD(t_FileOperations, fileToString, METH_O | METH_CLASS),
                        DECLARE_METHOD(t_FileOperations, getFilePaths, METH_O | METH_CLASS),
                        DECLARE_METHOD(t_FileOperations, stringToFile, METH_VARARGS | METH_CLASS),
                        { NULL, NULL, 0, NULL }
                    };

                    DECLARE_TYPE(FileOperations, t_FileOperations, ::java::lang::Object, FileOperations, t_FileOperations_init_, 0, 0, 0, 0, 0);

                    void t_FileOperations::install(PyObject *module)
                    {
                        installType(&PY_TYPE(FileOperations), module, "FileOperations", 0);
                    }

                    void t_FileOperations::initialize(PyObject *module)
                    {
                        PyDict_SetItemString(PY_TYPE(FileOperations).tp_dict, "class_", make_descriptor(FileOperations::initializeClass, 1));
                        PyDict_SetItemString(PY_TYPE(FileOperations).tp_dict, "wrapfn_", make_descriptor(t_FileOperations::wrap_jobject));
                        PyDict_SetItemString(PY_TYPE(FileOperations).tp_dict, "boxfn_", make_descriptor(boxObject));
                    }

                    static PyObject *t_FileOperations_cast_(PyTypeObject *type, PyObject *arg)
                    {
                        if (!(arg = castCheck(arg, FileOperations::initializeClass, 1)))
                            return NULL;
                        return t_FileOperations::wrap_Object(FileOperations(((t_FileOperations *) arg)->object.this$));
                    }
                    static PyObject *t_FileOperations_instance_(PyTypeObject *type, PyObject *arg)
                    {
                        if (!castCheck(arg, FileOperations::initializeClass, 0))
                            Py_RETURN_FALSE;
                        Py_RETURN_TRUE;
                    }

                    static int t_FileOperations_init_(t_FileOperations *self, PyObject *args, PyObject *kwds)
                    {
                        FileOperations object((jobject) NULL);

                        INT_CALL(object = FileOperations());
                        self->object = object;

                        return 0;
                    }

                    static PyObject *t_FileOperations_fileToString(PyTypeObject *type, PyObject *arg)
                    {
                        ::java::lang::String a0((jobject) NULL);
                        ::java::lang::String result((jobject) NULL);

                        if (!parseArg(arg, "s", &a0))
                        {
                            OBJ_CALL(result = ::is::iclt::icenlp::core::utils::FileOperations::fileToString(a0));
                            return j2p(result);
                        }

                        PyErr_SetArgsError(type, "fileToString", arg);
                        return NULL;
                    }

                    static PyObject *t_FileOperations_getFilePaths(PyTypeObject *type, PyObject *arg)
                    {
                        ::java::lang::String a0((jobject) NULL);
                        ::java::util::ArrayList result((jobject) NULL);

                        if (!parseArg(arg, "s", &a0))
                        {
                            OBJ_CALL(result = ::is::iclt::icenlp::core::utils::FileOperations::getFilePaths(a0));
                            return ::java::util::t_ArrayList::wrap_Object(result, &::java::lang::PY_TYPE(String));
                        }

                        PyErr_SetArgsError(type, "getFilePaths", arg);
                        return NULL;
                    }

                    static PyObject *t_FileOperations_stringToFile(PyTypeObject *type, PyObject *args)
                    {
                        ::java::lang::String a0((jobject) NULL);
                        ::java::lang::String a1((jobject) NULL);

                        if (!parseArgs(args, "ss", &a0, &a1))
                        {
                            OBJ_CALL(::is::iclt::icenlp::core::utils::FileOperations::stringToFile(a0, a1));
                            Py_RETURN_NONE;
                        }

                        PyErr_SetArgsError(type, "stringToFile", args);
                        return NULL;
                    }
                }
            }
        }
    }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/util/Properties.h"
#include "java/io/Reader.h"
#include "java/util/Set.h"
#include "java/io/PrintStream.h"
#include "java/io/IOException.h"
#include "java/util/InvalidPropertiesFormatException.h"
#include "java/io/Writer.h"
#include "java/io/PrintWriter.h"
#include "java/io/OutputStream.h"
#include "java/util/Enumeration.h"
#include "java/lang/Class.h"
#include "java/io/InputStream.h"
#include "java/lang/String.h"
#include "java/lang/Object.h"
#include "JArray.h"

namespace java {
    namespace util {

        ::java::lang::Class *Properties::class$ = NULL;
        jmethodID *Properties::mids$ = NULL;

        jclass Properties::initializeClass()
        {
            if (!class$)
            {

                jclass cls = (jclass) env->findClass("java/util/Properties");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                mids$[mid_getProperty_97a5258f] = env->getMethodID(cls, "getProperty", "(Ljava/lang/String;)Ljava/lang/String;");
                mids$[mid_getProperty_aacea7e9] = env->getMethodID(cls, "getProperty", "(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;");
                mids$[mid_list_82fffd94] = env->getMethodID(cls, "list", "(Ljava/io/PrintWriter;)V");
                mids$[mid_list_1b7c898b] = env->getMethodID(cls, "list", "(Ljava/io/PrintStream;)V");
                mids$[mid_load_cf2e3c10] = env->getMethodID(cls, "load", "(Ljava/io/Reader;)V");
                mids$[mid_load_be2e4f90] = env->getMethodID(cls, "load", "(Ljava/io/InputStream;)V");
                mids$[mid_loadFromXML_be2e4f90] = env->getMethodID(cls, "loadFromXML", "(Ljava/io/InputStream;)V");
                mids$[mid_propertyNames_39f88070] = env->getMethodID(cls, "propertyNames", "()Ljava/util/Enumeration;");
                mids$[mid_save_c195c3b2] = env->getMethodID(cls, "save", "(Ljava/io/OutputStream;Ljava/lang/String;)V");
                mids$[mid_setProperty_1a6a44ef] = env->getMethodID(cls, "setProperty", "(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/Object;");
                mids$[mid_store_c195c3b2] = env->getMethodID(cls, "store", "(Ljava/io/OutputStream;Ljava/lang/String;)V");
                mids$[mid_store_2913a022] = env->getMethodID(cls, "store", "(Ljava/io/Writer;Ljava/lang/String;)V");
                mids$[mid_storeToXML_c195c3b2] = env->getMethodID(cls, "storeToXML", "(Ljava/io/OutputStream;Ljava/lang/String;)V");
                mids$[mid_storeToXML_f846429c] = env->getMethodID(cls, "storeToXML", "(Ljava/io/OutputStream;Ljava/lang/String;Ljava/lang/String;)V");
                mids$[mid_stringPropertyNames_03e99967] = env->getMethodID(cls, "stringPropertyNames", "()Ljava/util/Set;");

                class$ = (::java::lang::Class *) new JObject(cls);
            }
            return (jclass) class$->this$;
        }

        Properties::Properties() : ::java::util::Hashtable(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        ::java::lang::String Properties::getProperty(const ::java::lang::String & a0) const
        {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getProperty_97a5258f], a0.this$));
        }

        ::java::lang::String Properties::getProperty(const ::java::lang::String & a0, const ::java::lang::String & a1) const
        {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getProperty_aacea7e9], a0.this$, a1.this$));
        }

        void Properties::list(const ::java::io::PrintWriter & a0) const
        {
            env->callVoidMethod(this$, mids$[mid_list_82fffd94], a0.this$);
        }

        void Properties::list(const ::java::io::PrintStream & a0) const
        {
            env->callVoidMethod(this$, mids$[mid_list_1b7c898b], a0.this$);
        }

        void Properties::load(const ::java::io::Reader & a0) const
        {
            env->callVoidMethod(this$, mids$[mid_load_cf2e3c10], a0.this$);
        }

        void Properties::load(const ::java::io::InputStream & a0) const
        {
            env->callVoidMethod(this$, mids$[mid_load_be2e4f90], a0.this$);
        }

        void Properties::loadFromXML(const ::java::io::InputStream & a0) const
        {
            env->callVoidMethod(this$, mids$[mid_loadFromXML_be2e4f90], a0.this$);
        }

        ::java::util::Enumeration Properties::propertyNames() const
        {
            return ::java::util::Enumeration(env->callObjectMethod(this$, mids$[mid_propertyNames_39f88070]));
        }

        void Properties::save(const ::java::io::OutputStream & a0, const ::java::lang::String & a1) const
        {
            env->callVoidMethod(this$, mids$[mid_save_c195c3b2], a0.this$, a1.this$);
        }

        ::java::lang::Object Properties::setProperty(const ::java::lang::String & a0, const ::java::lang::String & a1) const
        {
            return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_setProperty_1a6a44ef], a0.this$, a1.this$));
        }

        void Properties::store(const ::java::io::OutputStream & a0, const ::java::lang::String & a1) const
        {
            env->callVoidMethod(this$, mids$[mid_store_c195c3b2], a0.this$, a1.this$);
        }

        void Properties::store(const ::java::io::Writer & a0, const ::java::lang::String & a1) const
        {
            env->callVoidMethod(this$, mids$[mid_store_2913a022], a0.this$, a1.this$);
        }

        void Properties::storeToXML(const ::java::io::OutputStream & a0, const ::java::lang::String & a1) const
        {
            env->callVoidMethod(this$, mids$[mid_storeToXML_c195c3b2], a0.this$, a1.this$);
        }

        void Properties::storeToXML(const ::java::io::OutputStream & a0, const ::java::lang::String & a1, const ::java::lang::String & a2) const
        {
            env->callVoidMethod(this$, mids$[mid_storeToXML_f846429c], a0.this$, a1.this$, a2.this$);
        }

        ::java::util::Set Properties::stringPropertyNames() const
        {
            return ::java::util::Set(env->callObjectMethod(this$, mids$[mid_stringPropertyNames_03e99967]));
        }
    }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
    namespace util {
        static PyObject *t_Properties_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Properties_instance_(PyTypeObject *type, PyObject *arg);
        static int t_Properties_init_(t_Properties *self, PyObject *args, PyObject *kwds);
        static PyObject *t_Properties_getProperty(t_Properties *self, PyObject *args);
        static PyObject *t_Properties_list(t_Properties *self, PyObject *args);
        static PyObject *t_Properties_load(t_Properties *self, PyObject *args);
        static PyObject *t_Properties_loadFromXML(t_Properties *self, PyObject *arg);
        static PyObject *t_Properties_propertyNames(t_Properties *self);
        static PyObject *t_Properties_save(t_Properties *self, PyObject *args);
        static PyObject *t_Properties_setProperty(t_Properties *self, PyObject *args);
        static PyObject *t_Properties_store(t_Properties *self, PyObject *args);
        static PyObject *t_Properties_storeToXML(t_Properties *self, PyObject *args);
        static PyObject *t_Properties_stringPropertyNames(t_Properties *self);

        static PyMethodDef t_Properties__methods_[] = {
            DECLARE_METHOD(t_Properties, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Properties, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Properties, getProperty, METH_VARARGS),
            DECLARE_METHOD(t_Properties, list, METH_VARARGS),
            DECLARE_METHOD(t_Properties, load, METH_VARARGS),
            DECLARE_METHOD(t_Properties, loadFromXML, METH_O),
            DECLARE_METHOD(t_Properties, propertyNames, METH_NOARGS),
            DECLARE_METHOD(t_Properties, save, METH_VARARGS),
            DECLARE_METHOD(t_Properties, setProperty, METH_VARARGS),
            DECLARE_METHOD(t_Properties, store, METH_VARARGS),
            DECLARE_METHOD(t_Properties, storeToXML, METH_VARARGS),
            DECLARE_METHOD(t_Properties, stringPropertyNames, METH_NOARGS),
            { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(Properties, t_Properties, ::java::util::Hashtable, Properties, t_Properties_init_, 0, 0, 0, 0, 0);

        void t_Properties::install(PyObject *module)
        {
            installType(&PY_TYPE(Properties), module, "Properties", 0);
        }

        void t_Properties::initialize(PyObject *module)
        {
            PyDict_SetItemString(PY_TYPE(Properties).tp_dict, "class_", make_descriptor(Properties::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Properties).tp_dict, "wrapfn_", make_descriptor(t_Properties::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Properties).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_Properties_cast_(PyTypeObject *type, PyObject *arg)
        {
            if (!(arg = castCheck(arg, Properties::initializeClass, 1)))
                return NULL;
            return t_Properties::wrap_Object(Properties(((t_Properties *) arg)->object.this$));
        }
        static PyObject *t_Properties_instance_(PyTypeObject *type, PyObject *arg)
        {
            if (!castCheck(arg, Properties::initializeClass, 0))
                Py_RETURN_FALSE;
            Py_RETURN_TRUE;
        }

        static int t_Properties_init_(t_Properties *self, PyObject *args, PyObject *kwds)
        {
            Properties object((jobject) NULL);

            INT_CALL(object = Properties());
            self->object = object;

            return 0;
        }

        static PyObject *t_Properties_getProperty(t_Properties *self, PyObject *args)
        {
            switch (PyTuple_GET_SIZE(args)) {
              case 1:
                {
                    ::java::lang::String a0((jobject) NULL);
                    ::java::lang::String result((jobject) NULL);

                    if (!parseArgs(args, "s", &a0))
                    {
                        OBJ_CALL(result = self->object.getProperty(a0));
                        return j2p(result);
                    }
                }
                break;
              case 2:
                {
                    ::java::lang::String a0((jobject) NULL);
                    ::java::lang::String a1((jobject) NULL);
                    ::java::lang::String result((jobject) NULL);

                    if (!parseArgs(args, "ss", &a0, &a1))
                    {
                        OBJ_CALL(result = self->object.getProperty(a0, a1));
                        return j2p(result);
                    }
                }
            }

            PyErr_SetArgsError((PyObject *) self, "getProperty", args);
            return NULL;
        }

        static PyObject *t_Properties_list(t_Properties *self, PyObject *args)
        {
            switch (PyTuple_GET_SIZE(args)) {
              case 1:
                {
                    ::java::io::PrintWriter a0((jobject) NULL);

                    if (!parseArgs(args, "k", ::java::io::PrintWriter::initializeClass, &a0))
                    {
                        OBJ_CALL(self->object.list(a0));
                        Py_RETURN_NONE;
                    }
                }
                {
                    ::java::io::PrintStream a0((jobject) NULL);

                    if (!parseArgs(args, "k", ::java::io::PrintStream::initializeClass, &a0))
                    {
                        OBJ_CALL(self->object.list(a0));
                        Py_RETURN_NONE;
                    }
                }
            }

            PyErr_SetArgsError((PyObject *) self, "list", args);
            return NULL;
        }

        static PyObject *t_Properties_load(t_Properties *self, PyObject *args)
        {
            switch (PyTuple_GET_SIZE(args)) {
              case 1:
                {
                    ::java::io::Reader a0((jobject) NULL);

                    if (!parseArgs(args, "k", ::java::io::Reader::initializeClass, &a0))
                    {
                        OBJ_CALL(self->object.load(a0));
                        Py_RETURN_NONE;
                    }
                }
                {
                    ::java::io::InputStream a0((jobject) NULL);

                    if (!parseArgs(args, "k", ::java::io::InputStream::initializeClass, &a0))
                    {
                        OBJ_CALL(self->object.load(a0));
                        Py_RETURN_NONE;
                    }
                }
            }

            PyErr_SetArgsError((PyObject *) self, "load", args);
            return NULL;
        }

        static PyObject *t_Properties_loadFromXML(t_Properties *self, PyObject *arg)
        {
            ::java::io::InputStream a0((jobject) NULL);

            if (!parseArg(arg, "k", ::java::io::InputStream::initializeClass, &a0))
            {
                OBJ_CALL(self->object.loadFromXML(a0));
                Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "loadFromXML", arg);
            return NULL;
        }

        static PyObject *t_Properties_propertyNames(t_Properties *self)
        {
            ::java::util::Enumeration result((jobject) NULL);
            OBJ_CALL(result = self->object.propertyNames());
            return ::java::util::t_Enumeration::wrap_Object(result);
        }

        static PyObject *t_Properties_save(t_Properties *self, PyObject *args)
        {
            ::java::io::OutputStream a0((jobject) NULL);
            ::java::lang::String a1((jobject) NULL);

            if (!parseArgs(args, "ks", ::java::io::OutputStream::initializeClass, &a0, &a1))
            {
                OBJ_CALL(self->object.save(a0, a1));
                Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "save", args);
            return NULL;
        }

        static PyObject *t_Properties_setProperty(t_Properties *self, PyObject *args)
        {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::String a1((jobject) NULL);
            ::java::lang::Object result((jobject) NULL);

            if (!parseArgs(args, "ss", &a0, &a1))
            {
                OBJ_CALL(result = self->object.setProperty(a0, a1));
                return ::java::lang::t_Object::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "setProperty", args);
            return NULL;
        }

        static PyObject *t_Properties_store(t_Properties *self, PyObject *args)
        {
            switch (PyTuple_GET_SIZE(args)) {
              case 2:
                {
                    ::java::io::OutputStream a0((jobject) NULL);
                    ::java::lang::String a1((jobject) NULL);

                    if (!parseArgs(args, "ks", ::java::io::OutputStream::initializeClass, &a0, &a1))
                    {
                        OBJ_CALL(self->object.store(a0, a1));
                        Py_RETURN_NONE;
                    }
                }
                {
                    ::java::io::Writer a0((jobject) NULL);
                    ::java::lang::String a1((jobject) NULL);

                    if (!parseArgs(args, "ks", ::java::io::Writer::initializeClass, &a0, &a1))
                    {
                        OBJ_CALL(self->object.store(a0, a1));
                        Py_RETURN_NONE;
                    }
                }
            }

            PyErr_SetArgsError((PyObject *) self, "store", args);
            return NULL;
        }

        static PyObject *t_Properties_storeToXML(t_Properties *self, PyObject *args)
        {
            switch (PyTuple_GET_SIZE(args)) {
              case 2:
                {
                    ::java::io::OutputStream a0((jobject) NULL);
                    ::java::lang::String a1((jobject) NULL);

                    if (!parseArgs(args, "ks", ::java::io::OutputStream::initializeClass, &a0, &a1))
                    {
                        OBJ_CALL(self->object.storeToXML(a0, a1));
                        Py_RETURN_NONE;
                    }
                }
                break;
              case 3:
                {
                    ::java::io::OutputStream a0((jobject) NULL);
                    ::java::lang::String a1((jobject) NULL);
                    ::java::lang::String a2((jobject) NULL);

                    if (!parseArgs(args, "kss", ::java::io::OutputStream::initializeClass, &a0, &a1, &a2))
                    {
                        OBJ_CALL(self->object.storeToXML(a0, a1, a2));
                        Py_RETURN_NONE;
                    }
                }
            }

            PyErr_SetArgsError((PyObject *) self, "storeToXML", args);
            return NULL;
        }

        static PyObject *t_Properties_stringPropertyNames(t_Properties *self)
        {
            ::java::util::Set result((jobject) NULL);
            OBJ_CALL(result = self->object.stringPropertyNames());
            return ::java::util::t_Set::wrap_Object(result, &::java::lang::PY_TYPE(String));
        }
    }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/io/StringWriter.h"
#include "java/io/IOException.h"
#include "java/lang/CharSequence.h"
#include "java/lang/Class.h"
#include "java/lang/StringBuffer.h"
#include "java/lang/String.h"
#include "java/lang/Appendable.h"
#include "JArray.h"

namespace java {
    namespace io {

        ::java::lang::Class *StringWriter::class$ = NULL;
        jmethodID *StringWriter::mids$ = NULL;

        jclass StringWriter::initializeClass()
        {
            if (!class$)
            {

                jclass cls = (jclass) env->findClass("java/io/StringWriter");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                mids$[mid_init$_39c7bd3c] = env->getMethodID(cls, "<init>", "(I)V");
                mids$[mid_append_3aee6342] = env->getMethodID(cls, "append", "(C)Ljava/io/StringWriter;");
                mids$[mid_append_e2d4acee] = env->getMethodID(cls, "append", "(Ljava/lang/CharSequence;)Ljava/io/StringWriter;");
                mids$[mid_append_199526fa] = env->getMethodID(cls, "append", "(Ljava/lang/CharSequence;II)Ljava/io/StringWriter;");
                mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
                mids$[mid_flush_54c6a166] = env->getMethodID(cls, "flush", "()V");
                mids$[mid_getBuffer_d54172a5] = env->getMethodID(cls, "getBuffer", "()Ljava/lang/StringBuffer;");
                mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
                mids$[mid_write_5fdc3f48] = env->getMethodID(cls, "write", "(Ljava/lang/String;)V");
                mids$[mid_write_39c7bd3c] = env->getMethodID(cls, "write", "(I)V");
                mids$[mid_write_555f322c] = env->getMethodID(cls, "write", "(Ljava/lang/String;II)V");
                mids$[mid_write_6f0bb356] = env->getMethodID(cls, "write", "([CII)V");

                class$ = (::java::lang::Class *) new JObject(cls);
            }
            return (jclass) class$->this$;
        }

        StringWriter::StringWriter() : ::java::io::Writer(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        StringWriter::StringWriter(jint a0) : ::java::io::Writer(env->newObject(initializeClass, &mids$, mid_init$_39c7bd3c, a0)) {}

        StringWriter StringWriter::append(jchar a0) const
        {
            return StringWriter(env->callObjectMethod(this$, mids$[mid_append_3aee6342], a0));
        }

        StringWriter StringWriter::append(const ::java::lang::CharSequence & a0) const
        {
            return StringWriter(env->callObjectMethod(this$, mids$[mid_append_e2d4acee], a0.this$));
        }

        StringWriter StringWriter::append(const ::java::lang::CharSequence & a0, jint a1, jint a2) const
        {
            return StringWriter(env->callObjectMethod(this$, mids$[mid_append_199526fa], a0.this$, a1, a2));
        }

        void StringWriter::close() const
        {
            env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
        }

        void StringWriter::flush() const
        {
            env->callVoidMethod(this$, mids$[mid_flush_54c6a166]);
        }

        ::java::lang::StringBuffer StringWriter::getBuffer() const
        {
            return ::java::lang::StringBuffer(env->callObjectMethod(this$, mids$[mid_getBuffer_d54172a5]));
        }

        ::java::lang::String StringWriter::toString() const
        {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }

        void StringWriter::write(const ::java::lang::String & a0) const
        {
            env->callVoidMethod(this$, mids$[mid_write_5fdc3f48], a0.this$);
        }

        void StringWriter::write(jint a0) const
        {
            env->callVoidMethod(this$, mids$[mid_write_39c7bd3c], a0);
        }

        void StringWriter::write(const ::java::lang::String & a0, jint a1, jint a2) const
        {
            env->callVoidMethod(this$, mids$[mid_write_555f322c], a0.this$, a1, a2);
        }

        void StringWriter::write(const JArray< jchar > & a0, jint a1, jint a2) const
        {
            env->callVoidMethod(this$, mids$[mid_write_6f0bb356], a0.this$, a1, a2);
        }
    }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
    namespace io {
        static PyObject *t_StringWriter_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_StringWriter_instance_(PyTypeObject *type, PyObject *arg);
        static int t_StringWriter_init_(t_StringWriter *self, PyObject *args, PyObject *kwds);
        static PyObject *t_StringWriter_append(t_StringWriter *self, PyObject *args);
        static PyObject *t_StringWriter_close(t_StringWriter *self, PyObject *args);
        static PyObject *t_StringWriter_flush(t_StringWriter *self, PyObject *args);
        static PyObject *t_StringWriter_getBuffer(t_StringWriter *self);
        static PyObject *t_StringWriter_toString(t_StringWriter *self, PyObject *args);
        static PyObject *t_StringWriter_write(t_StringWriter *self, PyObject *args);
        static PyObject *t_StringWriter_get__buffer(t_StringWriter *self, void *data);
        static PyGetSetDef t_StringWriter__fields_[] = {
            DECLARE_GET_FIELD(t_StringWriter, buffer),
            { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_StringWriter__methods_[] = {
            DECLARE_METHOD(t_StringWriter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_StringWriter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_StringWriter, append, METH_VARARGS),
            DECLARE_METHOD(t_StringWriter, close, METH_VARARGS),
            DECLARE_METHOD(t_StringWriter, flush, METH_VARARGS),
            DECLARE_METHOD(t_StringWriter, getBuffer, METH_NOARGS),
            DECLARE_METHOD(t_StringWriter, toString, METH_VARARGS),
            DECLARE_METHOD(t_StringWriter, write, METH_VARARGS),
            { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(StringWriter, t_StringWriter, ::java::io::Writer, StringWriter, t_StringWriter_init_, 0, 0, t_StringWriter__fields_, 0, 0);

        void t_StringWriter::install(PyObject *module)
        {
            installType(&PY_TYPE(StringWriter), module, "StringWriter", 0);
        }

        void t_StringWriter::initialize(PyObject *module)
        {
            PyDict_SetItemString(PY_TYPE(StringWriter).tp_dict, "class_", make_descriptor(StringWriter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(StringWriter).tp_dict, "wrapfn_", make_descriptor(t_StringWriter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(StringWriter).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_StringWriter_cast_(PyTypeObject *type, PyObject *arg)
        {
            if (!(arg = castCheck(arg, StringWriter::initializeClass, 1)))
                return NULL;
            return t_StringWriter::wrap_Object(StringWriter(((t_StringWriter *) arg)->object.this$));
        }
        static PyObject *t_StringWriter_instance_(PyTypeObject *type, PyObject *arg)
        {
            if (!castCheck(arg, StringWriter::initializeClass, 0))
                Py_RETURN_FALSE;
            Py_RETURN_TRUE;
        }

        static int t_StringWriter_init_(t_StringWriter *self, PyObject *args, PyObject *kwds)
        {
            switch (PyTuple_GET_SIZE(args)) {
              case 0:
                {
                    StringWriter object((jobject) NULL);

                    INT_CALL(object = StringWriter());
                    self->object = object;
                    break;
                }
                goto err;
              case 1:
                {
                    jint a0;
                    StringWriter object((jobject) NULL);

                    if (!parseArgs(args, "I", &a0))
                    {
                        INT_CALL(object = StringWriter(a0));
                        self->object = object;
                        break;
                    }
                }
              default:
              err:
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
            }

            return 0;
        }

        static PyObject *t_StringWriter_append(t_StringWriter *self, PyObject *args)
        {
            switch (PyTuple_GET_SIZE(args)) {
              case 1:
                {
                    jchar a0;
                    StringWriter result((jobject) NULL);

                    if (!parseArgs(args, "C", &a0))
                    {
                        OBJ_CALL(result = self->object.append(a0));
                        return t_StringWriter::wrap_Object(result);
                    }
                }
                {
                    ::java::lang::CharSequence a0((jobject) NULL);
                    StringWriter result((jobject) NULL);

                    if (!parseArgs(args, "O", &::java::lang::PY_TYPE(CharSequence), &a0))
                    {
                        OBJ_CALL(result = self->object.append(a0));
                        return t_StringWriter::wrap_Object(result);
                    }
                }
                break;
              case 3:
                {
                    ::java::lang::CharSequence a0((jobject) NULL);
                    jint a1;
                    jint a2;
                    StringWriter result((jobject) NULL);

                    if (!parseArgs(args, "OII", &::java::lang::PY_TYPE(CharSequence), &a0, &a1, &a2))
                    {
                        OBJ_CALL(result = self->object.append(a0, a1, a2));
                        return t_StringWriter::wrap_Object(result);
                    }
                }
            }

            return callSuper(&PY_TYPE(StringWriter), (PyObject *) self, "append", args, 2);
        }

        static PyObject *t_StringWriter_close(t_StringWriter *self, PyObject *args)
        {

            if (!parseArgs(args, ""))
            {
                OBJ_CALL(self->object.close());
                Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(StringWriter), (PyObject *) self, "close", args, 2);
        }

        static PyObject *t_StringWriter_flush(t_StringWriter *self, PyObject *args)
        {

            if (!parseArgs(args, ""))
            {
                OBJ_CALL(self->object.flush());
                Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(StringWriter), (PyObject *) self, "flush", args, 2);
        }

        static PyObject *t_StringWriter_getBuffer(t_StringWriter *self)
        {
            ::java::lang::StringBuffer result((jobject) NULL);
            OBJ_CALL(result = self->object.getBuffer());
            return ::java::lang::t_StringBuffer::wrap_Object(result);
        }

        static PyObject *t_StringWriter_toString(t_StringWriter *self, PyObject *args)
        {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
                OBJ_CALL(result = self->object.toString());
                return j2p(result);
            }

            return callSuper(&PY_TYPE(StringWriter), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_StringWriter_write(t_StringWriter *self, PyObject *args)
        {
            switch (PyTuple_GET_SIZE(args)) {
              case 1:
                {
                    ::java::lang::String a0((jobject) NULL);

                    if (!parseArgs(args, "s", &a0))
                    {
                        OBJ_CALL(self->object.write(a0));
                        Py_RETURN_NONE;
                    }
                }
                {
                    jint a0;

                    if (!parseArgs(args, "I", &a0))
                    {
                        OBJ_CALL(self->object.write(a0));
                        Py_RETURN_NONE;
                    }
                }
                break;
              case 3:
                {
                    ::java::lang::String a0((jobject) NULL);
                    jint a1;
                    jint a2;

                    if (!parseArgs(args, "sII", &a0, &a1, &a2))
                    {
                        OBJ_CALL(self->object.write(a0, a1, a2));
                        Py_RETURN_NONE;
                    }
                }
                {
                    JArray< jchar > a0((jobject) NULL);
                    jint a1;
                    jint a2;

                    if (!parseArgs(args, "[CII", &a0, &a1, &a2))
                    {
                        OBJ_CALL(self->object.write(a0, a1, a2));
                        Py_RETURN_NONE;
                    }
                }
            }

            return callSuper(&PY_TYPE(StringWriter), (PyObject *) self, "write", args, 2);
        }

        static PyObject *t_StringWriter_get__buffer(t_StringWriter *self, void *data)
        {
            ::java::lang::StringBuffer value((jobject) NULL);
            OBJ_CALL(value = self->object.getBuffer());
            return ::java::lang::t_StringBuffer::wrap_Object(value);
        }
    }
}
#include <jni.h>
#include "JCCEnv.h"
#include "is/iclt/icenlp/facade/TriTaggerFacade.h"
#include "java/io/IOException.h"
#include "is/iclt/icenlp/core/utils/Lexicon.h"
#include "is/iclt/icenlp/core/tokenizer/Sentences.h"
#include "java/lang/Class.h"
#include "is/iclt/icenlp/core/tritagger/TriTaggerLexicons.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace is {
    namespace iclt {
        namespace icenlp {
            namespace facade {

                ::java::lang::Class *TriTaggerFacade::class$ = NULL;
                jmethodID *TriTaggerFacade::mids$ = NULL;

                jclass TriTaggerFacade::initializeClass()
                {
                    if (!class$)
                    {

                        jclass cls = (jclass) env->findClass("is/iclt/icenlp/facade/TriTaggerFacade");

                        mids$ = new jmethodID[max_mid];
                        mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                        mids$[mid_init$_f4e26f98] = env->getMethodID(cls, "<init>", "(Lis/iclt/icenlp/core/tritagger/TriTaggerLexicons;Lis/iclt/icenlp/core/utils/Lexicon;)V");
                        mids$[mid_tag_6359824b] = env->getMethodID(cls, "tag", "(Ljava/lang/String;)Lis/iclt/icenlp/core/tokenizer/Sentences;");

                        class$ = (::java::lang::Class *) new JObject(cls);
                    }
                    return (jclass) class$->this$;
                }

                TriTaggerFacade::TriTaggerFacade() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

                TriTaggerFacade::TriTaggerFacade(const ::is::iclt::icenlp::core::tritagger::TriTaggerLexicons & a0, const ::is::iclt::icenlp::core::utils::Lexicon & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_f4e26f98, a0.this$, a1.this$)) {}

                ::is::iclt::icenlp::core::tokenizer::Sentences TriTaggerFacade::tag(const ::java::lang::String & a0) const
                {
                    return ::is::iclt::icenlp::core::tokenizer::Sentences(env->callObjectMethod(this$, mids$[mid_tag_6359824b], a0.this$));
                }
            }
        }
    }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace is {
    namespace iclt {
        namespace icenlp {
            namespace facade {
                static PyObject *t_TriTaggerFacade_cast_(PyTypeObject *type, PyObject *arg);
                static PyObject *t_TriTaggerFacade_instance_(PyTypeObject *type, PyObject *arg);
                static int t_TriTaggerFacade_init_(t_TriTaggerFacade *self, PyObject *args, PyObject *kwds);
                static PyObject *t_TriTaggerFacade_tag(t_TriTaggerFacade *self, PyObject *arg);

                static PyMethodDef t_TriTaggerFacade__methods_[] = {
                    DECLARE_METHOD(t_TriTaggerFacade, cast_, METH_O | METH_CLASS),
                    DECLARE_METHOD(t_TriTaggerFacade, instance_, METH_O | METH_CLASS),
                    DECLARE_METHOD(t_TriTaggerFacade, tag, METH_O),
                    { NULL, NULL, 0, NULL }
                };

                DECLARE_TYPE(TriTaggerFacade, t_TriTaggerFacade, ::java::lang::Object, TriTaggerFacade, t_TriTaggerFacade_init_, 0, 0, 0, 0, 0);

                void t_TriTaggerFacade::install(PyObject *module)
                {
                    installType(&PY_TYPE(TriTaggerFacade), module, "TriTaggerFacade", 0);
                }

                void t_TriTaggerFacade::initialize(PyObject *module)
                {
                    PyDict_SetItemString(PY_TYPE(TriTaggerFacade).tp_dict, "class_", make_descriptor(TriTaggerFacade::initializeClass, 1));
                    PyDict_SetItemString(PY_TYPE(TriTaggerFacade).tp_dict, "wrapfn_", make_descriptor(t_TriTaggerFacade::wrap_jobject));
                    PyDict_SetItemString(PY_TYPE(TriTaggerFacade).tp_dict, "boxfn_", make_descriptor(boxObject));
                }

                static PyObject *t_TriTaggerFacade_cast_(PyTypeObject *type, PyObject *arg)
                {
                    if (!(arg = castCheck(arg, TriTaggerFacade::initializeClass, 1)))
                        return NULL;
                    return t_TriTaggerFacade::wrap_Object(TriTaggerFacade(((t_TriTaggerFacade *) arg)->object.this$));
                }
                static PyObject *t_TriTaggerFacade_instance_(PyTypeObject *type, PyObject *arg)
                {
                    if (!castCheck(arg, TriTaggerFacade::initializeClass, 0))
                        Py_RETURN_FALSE;
                    Py_RETURN_TRUE;
                }

                static int t_TriTaggerFacade_init_(t_TriTaggerFacade *self, PyObject *args, PyObject *kwds)
                {
                    switch (PyTuple_GET_SIZE(args)) {
                      case 0:
                        {
                            TriTaggerFacade object((jobject) NULL);

                            INT_CALL(object = TriTaggerFacade());
                            self->object = object;
                            break;
                        }
                        goto err;
                      case 2:
                        {
                            ::is::iclt::icenlp::core::tritagger::TriTaggerLexicons a0((jobject) NULL);
                            ::is::iclt::icenlp::core::utils::Lexicon a1((jobject) NULL);
                            TriTaggerFacade object((jobject) NULL);

                            if (!parseArgs(args, "kk", ::is::iclt::icenlp::core::tritagger::TriTaggerLexicons::initializeClass, ::is::iclt::icenlp::core::utils::Lexicon::initializeClass, &a0, &a1))
                            {
                                INT_CALL(object = TriTaggerFacade(a0, a1));
                                self->object = object;
                                break;
                            }
                        }
                      default:
                      err:
                        PyErr_SetArgsError((PyObject *) self, "__init__", args);
                        return -1;
                    }

                    return 0;
                }

                static PyObject *t_TriTaggerFacade_tag(t_TriTaggerFacade *self, PyObject *arg)
                {
                    ::java::lang::String a0((jobject) NULL);
                    ::is::iclt::icenlp::core::tokenizer::Sentences result((jobject) NULL);

                    if (!parseArg(arg, "s", &a0))
                    {
                        OBJ_CALL(result = self->object.tag(a0));
                        return ::is::iclt::icenlp::core::tokenizer::t_Sentences::wrap_Object(result);
                    }

                    PyErr_SetArgsError((PyObject *) self, "tag", arg);
                    return NULL;
                }
            }
        }
    }
}
#include <jni.h>
#include "JCCEnv.h"
#include "is/iclt/icenlp/core/icetagger/IceFrequency.h"
#include "java/io/IOException.h"
#include "java/lang/NullPointerException.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "java/io/InputStream.h"
#include "JArray.h"

namespace is {
    namespace iclt {
        namespace icenlp {
            namespace core {
                namespace icetagger {

                    ::java::lang::Class *IceFrequency::class$ = NULL;
                    jmethodID *IceFrequency::mids$ = NULL;

                    jclass IceFrequency::initializeClass()
                    {
                        if (!class$)
                        {

                            jclass cls = (jclass) env->findClass("is/iclt/icenlp/core/icetagger/IceFrequency");

                            mids$ = new jmethodID[max_mid];
                            mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
                            mids$[mid_init$_be2e4f90] = env->getMethodID(cls, "<init>", "(Ljava/io/InputStream;)V");
                            mids$[mid_getFrequency_5fdc3f57] = env->getMethodID(cls, "getFrequency", "(Ljava/lang/String;)I");
                            mids$[mid_maxFrequency_1034289b] = env->getMethodID(cls, "maxFrequency", "([Ljava/lang/String;)Ljava/lang/String;");

                            class$ = (::java::lang::Class *) new JObject(cls);
                        }
                        return (jclass) class$->this$;
                    }

                    IceFrequency::IceFrequency(const ::java::lang::String & a0) : ::is::iclt::icenlp::core::utils::Lexicon(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}

                    IceFrequency::IceFrequency(const ::java::io::InputStream & a0) : ::is::iclt::icenlp::core::utils::Lexicon(env->newObject(initializeClass, &mids$, mid_init$_be2e4f90, a0.this$)) {}

                    jint IceFrequency::getFrequency(const ::java::lang::String & a0) const
                    {
                        return env->callIntMethod(this$, mids$[mid_getFrequency_5fdc3f57], a0.this$);
                    }

                    ::java::lang::String IceFrequency::maxFrequency(const JArray< ::java::lang::String > & a0) const
                    {
                        return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_maxFrequency_1034289b], a0.this$));
                    }
                }
            }
        }
    }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace is {
    namespace iclt {
        namespace icenlp {
            namespace core {
                namespace icetagger {
                    static PyObject *t_IceFrequency_cast_(PyTypeObject *type, PyObject *arg);
                    static PyObject *t_IceFrequency_instance_(PyTypeObject *type, PyObject *arg);
                    static int t_IceFrequency_init_(t_IceFrequency *self, PyObject *args, PyObject *kwds);
                    static PyObject *t_IceFrequency_getFrequency(t_IceFrequency *self, PyObject *arg);
                    static PyObject *t_IceFrequency_maxFrequency(t_IceFrequency *self, PyObject *arg);

                    static PyMethodDef t_IceFrequency__methods_[] = {
                        DECLARE_METHOD(t_IceFrequency, cast_, METH_O | METH_CLASS),
                        DECLARE_METHOD(t_IceFrequency, instance_, METH_O | METH_CLASS),
                        DECLARE_METHOD(t_IceFrequency, getFrequency, METH_O),
                        DECLARE_METHOD(t_IceFrequency, maxFrequency, METH_O),
                        { NULL, NULL, 0, NULL }
                    };

                    DECLARE_TYPE(IceFrequency, t_IceFrequency, ::is::iclt::icenlp::core::utils::Lexicon, IceFrequency, t_IceFrequency_init_, 0, 0, 0, 0, 0);

                    void t_IceFrequency::install(PyObject *module)
                    {
                        installType(&PY_TYPE(IceFrequency), module, "IceFrequency", 0);
                    }

                    void t_IceFrequency::initialize(PyObject *module)
                    {
                        PyDict_SetItemString(PY_TYPE(IceFrequency).tp_dict, "class_", make_descriptor(IceFrequency::initializeClass, 1));
                        PyDict_SetItemString(PY_TYPE(IceFrequency).tp_dict, "wrapfn_", make_descriptor(t_IceFrequency::wrap_jobject));
                        PyDict_SetItemString(PY_TYPE(IceFrequency).tp_dict, "boxfn_", make_descriptor(boxObject));
                    }

                    static PyObject *t_IceFrequency_cast_(PyTypeObject *type, PyObject *arg)
                    {
                        if (!(arg = castCheck(arg, IceFrequency::initializeClass, 1)))
                            return NULL;
                        return t_IceFrequency::wrap_Object(IceFrequency(((t_IceFrequency *) arg)->object.this$));
                    }
                    static PyObject *t_IceFrequency_instance_(PyTypeObject *type, PyObject *arg)
                    {
                        if (!castCheck(arg, IceFrequency::initializeClass, 0))
                            Py_RETURN_FALSE;
                        Py_RETURN_TRUE;
                    }

                    static int t_IceFrequency_init_(t_IceFrequency *self, PyObject *args, PyObject *kwds)
                    {
                        switch (PyTuple_GET_SIZE(args)) {
                          case 1:
                            {
                                ::java::lang::String a0((jobject) NULL);
                                IceFrequency object((jobject) NULL);

                                if (!parseArgs(args, "s", &a0))
                                {
                                    INT_CALL(object = IceFrequency(a0));
                                    self->object = object;
                                    break;
                                }
                            }
                            {
                                ::java::io::InputStream a0((jobject) NULL);
                                IceFrequency object((jobject) NULL);

                                if (!parseArgs(args, "k", ::java::io::InputStream::initializeClass, &a0))
                                {
                                    INT_CALL(object = IceFrequency(a0));
                                    self->object = object;
                                    break;
                                }
                            }
                          default:
                            PyErr_SetArgsError((PyObject *) self, "__init__", args);
                            return -1;
                        }

                        return 0;
                    }

                    static PyObject *t_IceFrequency_getFrequency(t_IceFrequency *self, PyObject *arg)
                    {
                        ::java::lang::String a0((jobject) NULL);
                        jint result;

                        if (!parseArg(arg, "s", &a0))
                        {
                            OBJ_CALL(result = self->object.getFrequency(a0));
                            return PyInt_FromLong((long) result);
                        }

                        PyErr_SetArgsError((PyObject *) self, "getFrequency", arg);
                        return NULL;
                    }

                    static PyObject *t_IceFrequency_maxFrequency(t_IceFrequency *self, PyObject *arg)
                    {
                        JArray< ::java::lang::String > a0((jobject) NULL);
                        ::java::lang::String result((jobject) NULL);

                        if (!parseArg(arg, "[s", &a0))
                        {
                            OBJ_CALL(result = self->object.maxFrequency(a0));
                            return j2p(result);
                        }

                        PyErr_SetArgsError((PyObject *) self, "maxFrequency", arg);
                        return NULL;
                    }
                }
            }
        }
    }
}
#include <jni.h>
#include "JCCEnv.h"
#include "is/iclt/icenlp/core/utils/FileEncoding.h"
#include "java/io/IOException.h"
#include "java/io/BufferedReader.h"
#include "java/io/OutputStream.h"
#include "java/lang/Class.h"
#include "java/io/InputStream.h"
#include "java/io/BufferedWriter.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace is {
    namespace iclt {
        namespace icenlp {
            namespace core {
                namespace utils {

                    ::java::lang::Class *FileEncoding::class$ = NULL;
                    jmethodID *FileEncoding::mids$ = NULL;
                    ::java::lang::String *FileEncoding::ENCODING = NULL;

                    jclass FileEncoding::initializeClass()
                    {
                        if (!class$)
                        {

                            jclass cls = (jclass) env->findClass("is/iclt/icenlp/core/utils/FileEncoding");

                            mids$ = new jmethodID[max_mid];
                            mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                            mids$[mid_getReader_a4b8cb84] = env->getStaticMethodID(cls, "getReader", "(Ljava/io/InputStream;)Ljava/io/BufferedReader;");
                            mids$[mid_getReader_c4d3c0e4] = env->getStaticMethodID(cls, "getReader", "(Ljava/lang/String;)Ljava/io/BufferedReader;");
                            mids$[mid_getWriter_1bd047f0] = env->getStaticMethodID(cls, "getWriter", "(Ljava/lang/String;)Ljava/io/BufferedWriter;");
                            mids$[mid_getWriter_b63a3030] = env->getStaticMethodID(cls, "getWriter", "(Ljava/io/OutputStream;)Ljava/io/BufferedWriter;");

                            class$ = (::java::lang::Class *) new JObject(cls);
                            cls = (jclass) class$->this$;

                            ENCODING = new ::java::lang::String(env->getStaticObjectField(cls, "ENCODING", "Ljava/lang/String;"));
                        }
                        return (jclass) class$->this$;
                    }

                    FileEncoding::FileEncoding() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

                    ::java::io::BufferedReader FileEncoding::getReader(const ::java::io::InputStream & a0)
                    {
                        jclass cls = initializeClass();
                        return ::java::io::BufferedReader(env->callStaticObjectMethod(cls, mids$[mid_getReader_a4b8cb84], a0.this$));
                    }

                    ::java::io::BufferedReader FileEncoding::getReader(const ::java::lang::String & a0)
                    {
                        jclass cls = initializeClass();
                        return ::java::io::BufferedReader(env->callStaticObjectMethod(cls, mids$[mid_getReader_c4d3c0e4], a0.this$));
                    }

                    ::java::io::BufferedWriter FileEncoding::getWriter(const ::java::lang::String & a0)
                    {
                        jclass cls = initializeClass();
                        return ::java::io::BufferedWriter(env->callStaticObjectMethod(cls, mids$[mid_getWriter_1bd047f0], a0.this$));
                    }

                    ::java::io::BufferedWriter FileEncoding::getWriter(const ::java::io::OutputStream & a0)
                    {
                        jclass cls = initializeClass();
                        return ::java::io::BufferedWriter(env->callStaticObjectMethod(cls, mids$[mid_getWriter_b63a3030], a0.this$));
                    }
                }
            }
        }
    }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace is {
    namespace iclt {
        namespace icenlp {
            namespace core {
                namespace utils {
                    static PyObject *t_FileEncoding_cast_(PyTypeObject *type, PyObject *arg);
                    static PyObject *t_FileEncoding_instance_(PyTypeObject *type, PyObject *arg);
                    static int t_FileEncoding_init_(t_FileEncoding *self, PyObject *args, PyObject *kwds);
                    static PyObject *t_FileEncoding_getReader(PyTypeObject *type, PyObject *args);
                    static PyObject *t_FileEncoding_getWriter(PyTypeObject *type, PyObject *args);

                    static PyMethodDef t_FileEncoding__methods_[] = {
                        DECLARE_METHOD(t_FileEncoding, cast_, METH_O | METH_CLASS),
                        DECLARE_METHOD(t_FileEncoding, instance_, METH_O | METH_CLASS),
                        DECLARE_METHOD(t_FileEncoding, getReader, METH_VARARGS | METH_CLASS),
                        DECLARE_METHOD(t_FileEncoding, getWriter, METH_VARARGS | METH_CLASS),
                        { NULL, NULL, 0, NULL }
                    };

                    DECLARE_TYPE(FileEncoding, t_FileEncoding, ::java::lang::Object, FileEncoding, t_FileEncoding_init_, 0, 0, 0, 0, 0);

                    void t_FileEncoding::install(PyObject *module)
                    {
                        installType(&PY_TYPE(FileEncoding), module, "FileEncoding", 0);
                    }

                    void t_FileEncoding::initialize(PyObject *module)
                    {
                        PyDict_SetItemString(PY_TYPE(FileEncoding).tp_dict, "class_", make_descriptor(FileEncoding::initializeClass, 1));
                        PyDict_SetItemString(PY_TYPE(FileEncoding).tp_dict, "wrapfn_", make_descriptor(t_FileEncoding::wrap_jobject));
                        PyDict_SetItemString(PY_TYPE(FileEncoding).tp_dict, "boxfn_", make_descriptor(boxObject));
                        FileEncoding::initializeClass();
                        PyDict_SetItemString(PY_TYPE(FileEncoding).tp_dict, "ENCODING", make_descriptor(j2p(*FileEncoding::ENCODING)));
                    }

                    static PyObject *t_FileEncoding_cast_(PyTypeObject *type, PyObject *arg)
                    {
                        if (!(arg = castCheck(arg, FileEncoding::initializeClass, 1)))
                            return NULL;
                        return t_FileEncoding::wrap_Object(FileEncoding(((t_FileEncoding *) arg)->object.this$));
                    }
                    static PyObject *t_FileEncoding_instance_(PyTypeObject *type, PyObject *arg)
                    {
                        if (!castCheck(arg, FileEncoding::initializeClass, 0))
                            Py_RETURN_FALSE;
                        Py_RETURN_TRUE;
                    }

                    static int t_FileEncoding_init_(t_FileEncoding *self, PyObject *args, PyObject *kwds)
                    {
                        FileEncoding object((jobject) NULL);

                        INT_CALL(object = FileEncoding());
                        self->object = object;

                        return 0;
                    }

                    static PyObject *t_FileEncoding_getReader(PyTypeObject *type, PyObject *args)
                    {
                        switch (PyTuple_GET_SIZE(args)) {
                          case 1:
                            {
                                ::java::io::InputStream a0((jobject) NULL);
                                ::java::io::BufferedReader result((jobject) NULL);

                                if (!parseArgs(args, "k", ::java::io::InputStream::initializeClass, &a0))
                                {
                                    OBJ_CALL(result = ::is::iclt::icenlp::core::utils::FileEncoding::getReader(a0));
                                    return ::java::io::t_BufferedReader::wrap_Object(result);
                                }
                            }
                            {
                                ::java::lang::String a0((jobject) NULL);
                                ::java::io::BufferedReader result((jobject) NULL);

                                if (!parseArgs(args, "s", &a0))
                                {
                                    OBJ_CALL(result = ::is::iclt::icenlp::core::utils::FileEncoding::getReader(a0));
                                    return ::java::io::t_BufferedReader::wrap_Object(result);
                                }
                            }
                        }

                        PyErr_SetArgsError(type, "getReader", args);
                        return NULL;
                    }

                    static PyObject *t_FileEncoding_getWriter(PyTypeObject *type, PyObject *args)
                    {
                        switch (PyTuple_GET_SIZE(args)) {
                          case 1:
                            {
                                ::java::lang::String a0((jobject) NULL);
                                ::java::io::BufferedWriter result((jobject) NULL);

                                if (!parseArgs(args, "s", &a0))
                                {
                                    OBJ_CALL(result = ::is::iclt::icenlp::core::utils::FileEncoding::getWriter(a0));
                                    return ::java::io::t_BufferedWriter::wrap_Object(result);
                                }
                            }
                            {
                                ::java::io::OutputStream a0((jobject) NULL);
                                ::java::io::BufferedWriter result((jobject) NULL);

                                if (!parseArgs(args, "k", ::java::io::OutputStream::initializeClass, &a0))
                                {
                                    OBJ_CALL(result = ::is::iclt::icenlp::core::utils::FileEncoding::getWriter(a0));
                                    return ::java::io::t_BufferedWriter::wrap_Object(result);
                                }
                            }
                        }

                        PyErr_SetArgsError(type, "getWriter", args);
                        return NULL;
                    }
                }
            }
        }
    }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/util/Collection.h"
#include "java/util/Iterator.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "JArray.h"

namespace java {
    namespace util {

        ::java::lang::Class *Collection::class$ = NULL;
        jmethodID *Collection::mids$ = NULL;

        jclass Collection::initializeClass()
        {
            if (!class$)
            {

                jclass cls = (jclass) env->findClass("java/util/Collection");

                mids$ = new jmethodID[max_mid];
                mids$[mid_add_290588e2] = env->getMethodID(cls, "add", "(Ljava/lang/Object;)Z");
                mids$[mid_addAll_9bfb3701] = env->getMethodID(cls, "addAll", "(Ljava/util/Collection;)Z");
                mids$[mid_clear_54c6a166] = env->getMethodID(cls, "clear", "()V");
                mids$[mid_contains_290588e2] = env->getMethodID(cls, "contains", "(Ljava/lang/Object;)Z");
                mids$[mid_containsAll_9bfb3701] = env->getMethodID(cls, "containsAll", "(Ljava/util/Collection;)Z");
                mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
                mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
                mids$[mid_isEmpty_54c6a16a] = env->getMethodID(cls, "isEmpty", "()Z");
                mids$[mid_iterator_40858c90] = env->getMethodID(cls, "iterator", "()Ljava/util/Iterator;");
                mids$[mid_remove_290588e2] = env->getMethodID(cls, "remove", "(Ljava/lang/Object;)Z");
                mids$[mid_removeAll_9bfb3701] = env->getMethodID(cls, "removeAll", "(Ljava/util/Collection;)Z");
                mids$[mid_retainAll_9bfb3701] = env->getMethodID(cls, "retainAll", "(Ljava/util/Collection;)Z");
                mids$[mid_size_54c6a179] = env->getMethodID(cls, "size", "()I");
                mids$[mid_toArray_94e49c77] = env->getMethodID(cls, "toArray", "()[Ljava/lang/Object;");
                mids$[mid_toArray_ae67dbcf] = env->getMethodID(cls, "toArray", "([Ljava/lang/Object;)[Ljava/lang/Object;");

                class$ = (::java::lang::Class *) new JObject(cls);
            }
            return (jclass) class$->this$;
        }

        jboolean Collection::add(const ::java::lang::Object & a0) const
        {
            return env->callBooleanMethod(this$, mids$[mid_add_290588e2], a0.this$);
        }

        jboolean Collection::addAll(const Collection & a0) const
        {
            return env->callBooleanMethod(this$, mids$[mid_addAll_9bfb3701], a0.this$);
        }

        void Collection::clear() const
        {
            env->callVoidMethod(this$, mids$[mid_clear_54c6a166]);
        }

        jboolean Collection::contains(const ::java::lang::Object & a0) const
        {
            return env->callBooleanMethod(this$, mids$[mid_contains_290588e2], a0.this$);
        }

        jboolean Collection::containsAll(const Collection & a0) const
        {
            return env->callBooleanMethod(this$, mids$[mid_containsAll_9bfb3701], a0.this$);
        }

        jboolean Collection::equals(const ::java::lang::Object & a0) const
        {
            return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        jint Collection::hashCode() const
        {
            return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        jboolean Collection::isEmpty() const
        {
            return env->callBooleanMethod(this$, mids$[mid_isEmpty_54c6a16a]);
        }

        ::java::util::Iterator Collection::iterator() const
        {
            return ::java::util::Iterator(env->callObjectMethod(this$, mids$[mid_iterator_40858c90]));
        }

        jboolean Collection::remove(const ::java::lang::Object & a0) const
        {
            return env->callBooleanMethod(this$, mids$[mid_remove_290588e2], a0.this$);
        }

        jboolean Collection::removeAll(const Collection & a0) const
        {
            return env->callBooleanMethod(this$, mids$[mid_removeAll_9bfb3701], a0.this$);
        }

        jboolean Collection::retainAll(const Collection & a0) const
        {
            return env->callBooleanMethod(this$, mids$[mid_retainAll_9bfb3701], a0.this$);
        }

        jint Collection::size() const
        {
            return env->callIntMethod(this$, mids$[mid_size_54c6a179]);
        }

        JArray< ::java::lang::Object > Collection::toArray() const
        {
            return JArray< ::java::lang::Object >(env->callObjectMethod(this$, mids$[mid_toArray_94e49c77]));
        }

        JArray< ::java::lang::Object > Collection::toArray(const JArray< ::java::lang::Object > & a0) const
        {
            return JArray< ::java::lang::Object >(env->callObjectMethod(this$, mids$[mid_toArray_ae67dbcf], a0.this$));
        }
    }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
    namespace util {
        static PyObject *t_Collection_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Collection_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Collection_of_(t_Collection *self, PyObject *args);
        static PyObject *t_Collection_add(t_Collection *self, PyObject *arg);
        static PyObject *t_Collection_addAll(t_Collection *self, PyObject *arg);
        static PyObject *t_Collection_clear(t_Collection *self);
        static PyObject *t_Collection_contains(t_Collection *self, PyObject *arg);
        static PyObject *t_Collection_containsAll(t_Collection *self, PyObject *arg);
        static PyObject *t_Collection_equals(t_Collection *self, PyObject *arg);
        static PyObject *t_Collection_hashCode(t_Collection *self);
        static PyObject *t_Collection_isEmpty(t_Collection *self);
        static PyObject *t_Collection_iterator(t_Collection *self, PyObject *args);
        static PyObject *t_Collection_remove(t_Collection *self, PyObject *arg);
        static PyObject *t_Collection_removeAll(t_Collection *self, PyObject *arg);
        static PyObject *t_Collection_retainAll(t_Collection *self, PyObject *arg);
        static PyObject *t_Collection_size(t_Collection *self);
        static PyObject *t_Collection_toArray(t_Collection *self, PyObject *args);
        static PyObject *t_Collection_get__empty(t_Collection *self, void *data);
        static PyObject *t_Collection_get__parameters_(t_Collection *self, void *data);
        static PyGetSetDef t_Collection__fields_[] = {
            DECLARE_GET_FIELD(t_Collection, empty),
            DECLARE_GET_FIELD(t_Collection, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_Collection__methods_[] = {
            DECLARE_METHOD(t_Collection, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Collection, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Collection, of_, METH_VARARGS),
            DECLARE_METHOD(t_Collection, add, METH_O),
            DECLARE_METHOD(t_Collection, addAll, METH_O),
            DECLARE_METHOD(t_Collection, clear, METH_NOARGS),
            DECLARE_METHOD(t_Collection, contains, METH_O),
            DECLARE_METHOD(t_Collection, containsAll, METH_O),
            DECLARE_METHOD(t_Collection, equals, METH_O),
            DECLARE_METHOD(t_Collection, hashCode, METH_NOARGS),
            DECLARE_METHOD(t_Collection, isEmpty, METH_NOARGS),
            DECLARE_METHOD(t_Collection, iterator, METH_VARARGS),
            DECLARE_METHOD(t_Collection, remove, METH_O),
            DECLARE_METHOD(t_Collection, removeAll, METH_O),
            DECLARE_METHOD(t_Collection, retainAll, METH_O),
            DECLARE_METHOD(t_Collection, size, METH_NOARGS),
            DECLARE_METHOD(t_Collection, toArray, METH_VARARGS),
            { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(Collection, t_Collection, ::java::lang::Iterable, Collection, abstract_init, ((PyObject *(*)(t_Collection *)) get_generic_iterator< t_Collection >), 0, t_Collection__fields_, 0, 0);
        PyObject *t_Collection::wrap_Object(const Collection& object, PyTypeObject *E)
        {
            PyObject *obj = t_Collection::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
                t_Collection *self = (t_Collection *) obj;
                self->parameters[0] = E;
            }
            return obj;
        }

        PyObject *t_Collection::wrap_jobject(const jobject& object, PyTypeObject *E)
        {
            PyObject *obj = t_Collection::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
                t_Collection *self = (t_Collection *) obj;
                self->parameters[0] = E;
            }
            return obj;
        }

        void t_Collection::install(PyObject *module)
        {
            installType(&PY_TYPE(Collection), module, "Collection", 0);
        }

        void t_Collection::initialize(PyObject *module)
        {
            PyDict_SetItemString(PY_TYPE(Collection).tp_dict, "class_", make_descriptor(Collection::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Collection).tp_dict, "wrapfn_", make_descriptor(t_Collection::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Collection).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_Collection_cast_(PyTypeObject *type, PyObject *arg)
        {
            if (!(arg = castCheck(arg, Collection::initializeClass, 1)))
                return NULL;
            return t_Collection::wrap_Object(Collection(((t_Collection *) arg)->object.this$));
        }
        static PyObject *t_Collection_instance_(PyTypeObject *type, PyObject *arg)
        {
            if (!castCheck(arg, Collection::initializeClass, 0))
                Py_RETURN_FALSE;
            Py_RETURN_TRUE;
        }

        static PyObject *t_Collection_of_(t_Collection *self, PyObject *args)
        {
            if (!parseArg(args, "T", 1, &(self->parameters)))
                Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static PyObject *t_Collection_add(t_Collection *self, PyObject *arg)
        {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArg(arg, "O", self->parameters[0], &a0))
            {
                OBJ_CALL(result = self->object.add(a0));
                Py_RETURN_BOOL(result);
            }

            PyErr_SetArgsError((PyObject *) self, "add", arg);
            return NULL;
        }

        static PyObject *t_Collection_addAll(t_Collection *self, PyObject *arg)
        {
            Collection a0((jobject) NULL);
            PyTypeObject **p0;
            jboolean result;

            if (!parseArg(arg, "K", Collection::initializeClass, &a0, &p0, t_Collection::parameters_))
            {
                OBJ_CALL(result = self->object.addAll(a0));
                Py_RETURN_BOOL(result);
            }

            PyErr_SetArgsError((PyObject *) self, "addAll", arg);
            return NULL;
        }

        static PyObject *t_Collection_clear(t_Collection *self)
        {
            OBJ_CALL(self->object.clear());
            Py_RETURN_NONE;
        }

        static PyObject *t_Collection_contains(t_Collection *self, PyObject *arg)
        {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArg(arg, "o", &a0))
            {
                OBJ_CALL(result = self->object.contains(a0));
                Py_RETURN_BOOL(result);
            }

            PyErr_SetArgsError((PyObject *) self, "contains", arg);
            return NULL;
        }

        static PyObject *t_Collection_containsAll(t_Collection *self, PyObject *arg)
        {
            Collection a0((jobject) NULL);
            PyTypeObject **p0;
            jboolean result;

            if (!parseArg(arg, "K", Collection::initializeClass, &a0, &p0, t_Collection::parameters_))
            {
                OBJ_CALL(result = self->object.containsAll(a0));
                Py_RETURN_BOOL(result);
            }

            PyErr_SetArgsError((PyObject *) self, "containsAll", arg);
            return NULL;
        }

        static PyObject *t_Collection_equals(t_Collection *self, PyObject *arg)
        {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArg(arg, "o", &a0))
            {
                OBJ_CALL(result = self->object.equals(a0));
                Py_RETURN_BOOL(result);
            }

            PyErr_SetArgsError((PyObject *) self, "equals", arg);
            return NULL;
        }

        static PyObject *t_Collection_hashCode(t_Collection *self)
        {
            jint result;
            OBJ_CALL(result = self->object.hashCode());
            return PyInt_FromLong((long) result);
        }

        static PyObject *t_Collection_isEmpty(t_Collection *self)
        {
            jboolean result;
            OBJ_CALL(result = self->object.isEmpty());
            Py_RETURN_BOOL(result);
        }

        static PyObject *t_Collection_iterator(t_Collection *self, PyObject *args)
        {
            ::java::util::Iterator result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
                OBJ_CALL(result = self->object.iterator());
                return ::java::util::t_Iterator::wrap_Object(result, self->parameters[0]);
            }

            return callSuper(&PY_TYPE(Collection), (PyObject *) self, "iterator", args, 2);
        }

        static PyObject *t_Collection_remove(t_Collection *self, PyObject *arg)
        {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArg(arg, "o", &a0))
            {
                OBJ_CALL(result = self->object.remove(a0));
                Py_RETURN_BOOL(result);
            }

            PyErr_SetArgsError((PyObject *) self, "remove", arg);
            return NULL;
        }

        static PyObject *t_Collection_removeAll(t_Collection *self, PyObject *arg)
        {
            Collection a0((jobject) NULL);
            PyTypeObject **p0;
            jboolean result;

            if (!parseArg(arg, "K", Collection::initializeClass, &a0, &p0, t_Collection::parameters_))
            {
                OBJ_CALL(result = self->object.removeAll(a0));
                Py_RETURN_BOOL(result);
            }

            PyErr_SetArgsError((PyObject *) self, "removeAll", arg);
            return NULL;
        }

        static PyObject *t_Collection_retainAll(t_Collection *self, PyObject *arg)
        {
            Collection a0((jobject) NULL);
            PyTypeObject **p0;
            jboolean result;

            if (!parseArg(arg, "K", Collection::initializeClass, &a0, &p0, t_Collection::parameters_))
            {
                OBJ_CALL(result = self->object.retainAll(a0));
                Py_RETURN_BOOL(result);
            }

            PyErr_SetArgsError((PyObject *) self, "retainAll", arg);
            return NULL;
        }

        static PyObject *t_Collection_size(t_Collection *self)
        {
            jint result;
            OBJ_CALL(result = self->object.size());
            return PyInt_FromLong((long) result);
        }

        static PyObject *t_Collection_toArray(t_Collection *self, PyObject *args)
        {
            switch (PyTuple_GET_SIZE(args)) {
              case 0:
                {
                    JArray< ::java::lang::Object > result((jobject) NULL);
                    OBJ_CALL(result = self->object.toArray());
                    return JArray<jobject>(result.this$).wrap(::java::lang::t_Object::wrap_jobject);
                }
                break;
              case 1:
                {
                    JArray< ::java::lang::Object > a0((jobject) NULL);
                    JArray< ::java::lang::Object > result((jobject) NULL);

                    if (!parseArgs(args, "[o", &a0))
                    {
                        OBJ_CALL(result = self->object.toArray(a0));
                        return JArray<jobject>(result.this$).wrap(::java::lang::t_Object::wrap_jobject);
                    }
                }
            }

            PyErr_SetArgsError((PyObject *) self, "toArray", args);
            return NULL;
        }
        static PyObject *t_Collection_get__parameters_(t_Collection *self, void *data)
        {
            return typeParameters(self->parameters, sizeof(self->parameters));
        }

        static PyObject *t_Collection_get__empty(t_Collection *self, void *data)
        {
            jboolean value;
            OBJ_CALL(value = self->object.isEmpty());
            Py_RETURN_BOOL(value);
        }
    }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/util/ArrayList.h"
#include "java/util/Collection.h"
#include "java/lang/Cloneable.h"
#include "java/util/RandomAccess.h"
#include "java/io/Serializable.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "JArray.h"

namespace java {
    namespace util {

        ::java::lang::Class *ArrayList::class$ = NULL;
        jmethodID *ArrayList::mids$ = NULL;

        jclass ArrayList::initializeClass()
        {
            if (!class$)
            {

                jclass cls = (jclass) env->findClass("java/util/ArrayList");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                mids$[mid_init$_39c7bd3c] = env->getMethodID(cls, "<init>", "(I)V");
                mids$[mid_init$_9bfb370d] = env->getMethodID(cls, "<init>", "(Ljava/util/Collection;)V");
                mids$[mid_add_290588e2] = env->getMethodID(cls, "add", "(Ljava/lang/Object;)Z");
                mids$[mid_add_f7cd74a4] = env->getMethodID(cls, "add", "(ILjava/lang/Object;)V");
                mids$[mid_addAll_9bfb3701] = env->getMethodID(cls, "addAll", "(Ljava/util/Collection;)Z");
                mids$[mid_addAll_006cd2b7] = env->getMethodID(cls, "addAll", "(ILjava/util/Collection;)Z");
                mids$[mid_clear_54c6a166] = env->getMethodID(cls, "clear", "()V");
                mids$[mid_clone_846352c3] = env->getMethodID(cls, "clone", "()Ljava/lang/Object;");
                mids$[mid_contains_290588e2] = env->getMethodID(cls, "contains", "(Ljava/lang/Object;)Z");
                mids$[mid_ensureCapacity_39c7bd3c] = env->getMethodID(cls, "ensureCapacity", "(I)V");
                mids$[mid_get_29be6a55] = env->getMethodID(cls, "get", "(I)Ljava/lang/Object;");
                mids$[mid_indexOf_290588f1] = env->getMethodID(cls, "indexOf", "(Ljava/lang/Object;)I");
                mids$[mid_isEmpty_54c6a16a] = env->getMethodID(cls, "isEmpty", "()Z");
                mids$[mid_lastIndexOf_290588f1] = env->getMethodID(cls, "lastIndexOf", "(Ljava/lang/Object;)I");
                mids$[mid_remove_29be6a55] = env->getMethodID(cls, "remove", "(I)Ljava/lang/Object;");
                mids$[mid_remove_290588e2] = env->getMethodID(cls, "remove", "(Ljava/lang/Object;)Z");
                mids$[mid_set_211591b1] = env->getMethodID(cls, "set", "(ILjava/lang/Object;)Ljava/lang/Object;");
                mids$[mid_size_54c6a179] = env->getMethodID(cls, "size", "()I");
                mids$[mid_toArray_94e49c77] = env->getMethodID(cls, "toArray", "()[Ljava/lang/Object;");
                mids$[mid_toArray_ae67dbcf] = env->getMethodID(cls, "toArray", "([Ljava/lang/Object;)[Ljava/lang/Object;");
                mids$[mid_trimToSize_54c6a166] = env->getMethodID(cls, "trimToSize", "()V");
                mids$[mid_removeRange_d8d154a6] = env->getMethodID(cls, "removeRange", "(II)V");

                class$ = (::java::lang::Class *) new JObject(cls);
            }
            return (jclass) class$->this$;
        }

        ArrayList::ArrayList() : ::java::util::AbstractList(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        ArrayList::ArrayList(jint a0) : ::java::util::AbstractList(env->newObject(initializeClass, &mids$, mid_init$_39c7bd3c, a0)) {}

        ArrayList::ArrayList(const ::java::util::Collection & a0) : ::java::util::AbstractList(env->newObject(initializeClass, &mids$, mid_init$_9bfb370d, a0.this$)) {}

        jboolean ArrayList::add(const ::java::lang::Object & a0) const
        {
            return env->callBooleanMethod(this$, mids$[mid_add_290588e2], a0.this$);
        }

        void ArrayList::add(jint a0, const ::java::lang::Object & a1) const
        {
            env->callVoidMethod(this$, mids$[mid_add_f7cd74a4], a0, a1.this$);
        }

        jboolean ArrayList::addAll(const ::java::util::Collection & a0) const
        {
            return env->callBooleanMethod(this$, mids$[mid_addAll_9bfb3701], a0.this$);
        }

        jboolean ArrayList::addAll(jint a0, const ::java::util::Collection & a1) const
        {
            return env->callBooleanMethod(this$, mids$[mid_addAll_006cd2b7], a0, a1.this$);
        }

        void ArrayList::clear() const
        {
            env->callVoidMethod(this$, mids$[mid_clear_54c6a166]);
        }

        ::java::lang::Object ArrayList::clone() const
        {
            return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_clone_846352c3]));
        }

        jboolean ArrayList::contains(const ::java::lang::Object & a0) const
        {
            return env->callBooleanMethod(this$, mids$[mid_contains_290588e2], a0.this$);
        }

        void ArrayList::ensureCapacity(jint a0) const
        {
            env->callVoidMethod(this$, mids$[mid_ensureCapacity_39c7bd3c], a0);
        }

        ::java::lang::Object ArrayList::get(jint a0) const
        {
            return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_get_29be6a55], a0));
        }

        jint ArrayList::indexOf(const ::java::lang::Object & a0) const
        {
            return env->callIntMethod(this$, mids$[mid_indexOf_290588f1], a0.this$);
        }

        jboolean ArrayList::isEmpty() const
        {
            return env->callBooleanMethod(this$, mids$[mid_isEmpty_54c6a16a]);
        }

        jint ArrayList::lastIndexOf(const ::java::lang::Object & a0) const
        {
            return env->callIntMethod(this$, mids$[mid_lastIndexOf_290588f1], a0.this$);
        }

        ::java::lang::Object ArrayList::remove(jint a0) const
        {
            return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_remove_29be6a55], a0));
        }

        jboolean ArrayList::remove(const ::java::lang::Object & a0) const
        {
            return env->callBooleanMethod(this$, mids$[mid_remove_290588e2], a0.this$);
        }

        ::java::lang::Object ArrayList::set(jint a0, const ::java::lang::Object & a1) const
        {
            return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_set_211591b1], a0, a1.this$));
        }

        jint ArrayList::size() const
        {
            return env->callIntMethod(this$, mids$[mid_size_54c6a179]);
        }

        JArray< ::java::lang::Object > ArrayList::toArray() const
        {
            return JArray< ::java::lang::Object >(env->callObjectMethod(this$, mids$[mid_toArray_94e49c77]));
        }

        JArray< ::java::lang::Object > ArrayList::toArray(const JArray< ::java::lang::Object > & a0) const
        {
            return JArray< ::java::lang::Object >(env->callObjectMethod(this$, mids$[mid_toArray_ae67dbcf], a0.this$));
        }

        void ArrayList::trimToSize() const
        {
            env->callVoidMethod(this$, mids$[mid_trimToSize_54c6a166]);
        }
    }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
    namespace util {
        static PyObject *t_ArrayList_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_ArrayList_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_ArrayList_of_(t_ArrayList *self, PyObject *args);
        static int t_ArrayList_init_(t_ArrayList *self, PyObject *args, PyObject *kwds);
        static PyObject *t_ArrayList_add(t_ArrayList *self, PyObject *args);
        static PyObject *t_ArrayList_addAll(t_ArrayList *self, PyObject *args);
        static PyObject *t_ArrayList_clear(t_ArrayList *self, PyObject *args);
        static PyObject *t_ArrayList_clone(t_ArrayList *self);
        static PyObject *t_ArrayList_contains(t_ArrayList *self, PyObject *args);
        static PyObject *t_ArrayList_ensureCapacity(t_ArrayList *self, PyObject *arg);
        static PyObject *t_ArrayList_get(t_ArrayList *self, PyObject *args);
        static PyObject *t_ArrayList_indexOf(t_ArrayList *self, PyObject *args);
        static PyObject *t_ArrayList_isEmpty(t_ArrayList *self, PyObject *args);
        static PyObject *t_ArrayList_lastIndexOf(t_ArrayList *self, PyObject *args);
        static PyObject *t_ArrayList_remove(t_ArrayList *self, PyObject *args);
        static PyObject *t_ArrayList_set(t_ArrayList *self, PyObject *args);
        static PyObject *t_ArrayList_size(t_ArrayList *self, PyObject *args);
        static PyObject *t_ArrayList_toArray(t_ArrayList *self, PyObject *args);
        static PyObject *t_ArrayList_trimToSize(t_ArrayList *self);
        static PyObject *t_ArrayList_get__empty(t_ArrayList *self, void *data);
        static PyObject *t_ArrayList_get__parameters_(t_ArrayList *self, void *data);
        static PyGetSetDef t_ArrayList__fields_[] = {
            DECLARE_GET_FIELD(t_ArrayList, empty),
            DECLARE_GET_FIELD(t_ArrayList, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_ArrayList__methods_[] = {
            DECLARE_METHOD(t_ArrayList, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ArrayList, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ArrayList, of_, METH_VARARGS),
            DECLARE_METHOD(t_ArrayList, add, METH_VARARGS),
            DECLARE_METHOD(t_ArrayList, addAll, METH_VARARGS),
            DECLARE_METHOD(t_ArrayList, clear, METH_VARARGS),
            DECLARE_METHOD(t_ArrayList, clone, METH_NOARGS),
            DECLARE_METHOD(t_ArrayList, contains, METH_VARARGS),
            DECLARE_METHOD(t_ArrayList, ensureCapacity, METH_O),
            DECLARE_METHOD(t_ArrayList, get, METH_VARARGS),
            DECLARE_METHOD(t_ArrayList, indexOf, METH_VARARGS),
            DECLARE_METHOD(t_ArrayList, isEmpty, METH_VARARGS),
            DECLARE_METHOD(t_ArrayList, lastIndexOf, METH_VARARGS),
            DECLARE_METHOD(t_ArrayList, remove, METH_VARARGS),
            DECLARE_METHOD(t_ArrayList, set, METH_VARARGS),
            DECLARE_METHOD(t_ArrayList, size, METH_VARARGS),
            DECLARE_METHOD(t_ArrayList, toArray, METH_VARARGS),
            DECLARE_METHOD(t_ArrayList, trimToSize, METH_NOARGS),
            { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(ArrayList, t_ArrayList, ::java::util::AbstractList, ArrayList, t_ArrayList_init_, 0, 0, t_ArrayList__fields_, 0, 0);
        PyObject *t_ArrayList::wrap_Object(const ArrayList& object, PyTypeObject *E)
        {
            PyObject *obj = t_ArrayList::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
                t_ArrayList *self = (t_ArrayList *) obj;
                self->parameters[0] = E;
            }
            return obj;
        }

        PyObject *t_ArrayList::wrap_jobject(const jobject& object, PyTypeObject *E)
        {
            PyObject *obj = t_ArrayList::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
                t_ArrayList *self = (t_ArrayList *) obj;
                self->parameters[0] = E;
            }
            return obj;
        }

        void t_ArrayList::install(PyObject *module)
        {
            installType(&PY_TYPE(ArrayList), module, "ArrayList", 0);
        }

        void t_ArrayList::initialize(PyObject *module)
        {
            PyDict_SetItemString(PY_TYPE(ArrayList).tp_dict, "class_", make_descriptor(ArrayList::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(ArrayList).tp_dict, "wrapfn_", make_descriptor(t_ArrayList::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(ArrayList).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_ArrayList_cast_(PyTypeObject *type, PyObject *arg)
        {
            if (!(arg = castCheck(arg, ArrayList::initializeClass, 1)))
                return NULL;
            return t_ArrayList::wrap_Object(ArrayList(((t_ArrayList *) arg)->object.this$));
        }
        static PyObject *t_ArrayList_instance_(PyTypeObject *type, PyObject *arg)
        {
            if (!castCheck(arg, ArrayList::initializeClass, 0))
                Py_RETURN_FALSE;
            Py_RETURN_TRUE;
        }

        static PyObject *t_ArrayList_of_(t_ArrayList *self, PyObject *args)
        {
            if (!parseArg(args, "T", 1, &(self->parameters)))
                Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static int t_ArrayList_init_(t_ArrayList *self, PyObject *args, PyObject *kwds)
        {
            switch (PyTuple_GET_SIZE(args)) {
              case 0:
                {
                    ArrayList object((jobject) NULL);

                    INT_CALL(object = ArrayList());
                    self->object = object;
                    break;
                }
                goto err;
              case 1:
                {
                    jint a0;
                    ArrayList object((jobject) NULL);

                    if (!parseArgs(args, "I", &a0))
                    {
                        INT_CALL(object = ArrayList(a0));
                        self->object = object;
                        break;
                    }
                }
                {
                    ::java::util::Collection a0((jobject) NULL);
                    PyTypeObject **p0;
                    ArrayList object((jobject) NULL);

                    if (!parseArgs(args, "K", ::java::util::Collection::initializeClass, &a0, &p0, ::java::util::t_Collection::parameters_))
                    {
                        INT_CALL(object = ArrayList(a0));
                        self->object = object;
                        break;
                    }
                }
              default:
              err:
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
            }

            return 0;
        }

        static PyObject *t_ArrayList_add(t_ArrayList *self, PyObject *args)
        {
            switch (PyTuple_GET_SIZE(args)) {
              case 1:
                {
                    ::java::lang::Object a0((jobject) NULL);
                    jboolean result;

                    if (!parseArgs(args, "O", self->parameters[0], &a0))
                    {
                        OBJ_CALL(result = self->object.add(a0));
                        Py_RETURN_BOOL(result);
                    }
                }
                break;
              case 2:
                {
                    jint a0;
                    ::java::lang::Object a1((jobject) NULL);

                    if (!parseArgs(args, "IO", self->parameters[0], &a0, &a1))
                    {
                        OBJ_CALL(self->object.add(a0, a1));
                        Py_RETURN_NONE;
                    }
                }
            }

            return callSuper(&PY_TYPE(ArrayList), (PyObject *) self, "add", args, 2);
        }

        static PyObject *t_ArrayList_addAll(t_ArrayList *self, PyObject *args)
        {
            switch (PyTuple_GET_SIZE(args)) {
              case 1:
                {
                    ::java::util::Collection a0((jobject) NULL);
                    PyTypeObject **p0;
                    jboolean result;

                    if (!parseArgs(args, "K", ::java::util::Collection::initializeClass, &a0, &p0, ::java::util::t_Collection::parameters_))
                    {
                        OBJ_CALL(result = self->object.addAll(a0));
                        Py_RETURN_BOOL(result);
                    }
                }
                break;
              case 2:
                {
                    jint a0;
                    ::java::util::Collection a1((jobject) NULL);
                    PyTypeObject **p1;
                    jboolean result;

                    if (!parseArgs(args, "IK", ::java::util::Collection::initializeClass, &a0, &a1, &p1, ::java::util::t_Collection::parameters_))
                    {
                        OBJ_CALL(result = self->object.addAll(a0, a1));
                        Py_RETURN_BOOL(result);
                    }
                }
            }

            return callSuper(&PY_TYPE(ArrayList), (PyObject *) self, "addAll", args, 2);
        }

        static PyObject *t_ArrayList_clear(t_ArrayList *self, PyObject *args)
        {

            if (!parseArgs(args, ""))
            {
                OBJ_CALL(self->object.clear());
                Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(ArrayList), (PyObject *) self, "clear", args, 2);
        }

        static PyObject *t_ArrayList_clone(t_ArrayList *self)
        {
            ::java::lang::Object result((jobject) NULL);
            OBJ_CALL(result = self->object.clone());
            return ::java::lang::t_Object::wrap_Object(result);
        }

        static PyObject *t_ArrayList_contains(t_ArrayList *self, PyObject *args)
        {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
                OBJ_CALL(result = self->object.contains(a0));
                Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(ArrayList), (PyObject *) self, "contains", args, 2);
        }

        static PyObject *t_ArrayList_ensureCapacity(t_ArrayList *self, PyObject *arg)
        {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
                OBJ_CALL(self->object.ensureCapacity(a0));
                Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "ensureCapacity", arg);
            return NULL;
        }

        static PyObject *t_ArrayList_get(t_ArrayList *self, PyObject *args)
        {
            jint a0;
            ::java::lang::Object result((jobject) NULL);

            if (!parseArgs(args, "I", &a0))
            {
                OBJ_CALL(result = self->object.get(a0));
                return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(ArrayList), (PyObject *) self, "get", args, 2);
        }

        static PyObject *t_ArrayList_indexOf(t_ArrayList *self, PyObject *args)
        {
            ::java::lang::Object a0((jobject) NULL);
            jint result;

            if (!parseArgs(args, "o", &a0))
            {
                OBJ_CALL(result = self->object.indexOf(a0));
                return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(ArrayList), (PyObject *) self, "indexOf", args, 2);
        }

        static PyObject *t_ArrayList_isEmpty(t_ArrayList *self, PyObject *args)
        {
            jboolean result;

            if (!parseArgs(args, ""))
            {
                OBJ_CALL(result = self->object.isEmpty());
                Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(ArrayList), (PyObject *) self, "isEmpty", args, 2);
        }

        static PyObject *t_ArrayList_lastIndexOf(t_ArrayList *self, PyObject *args)
        {
            ::java::lang::Object a0((jobject) NULL);
            jint result;

            if (!parseArgs(args, "o", &a0))
            {
                OBJ_CALL(result = self->object.lastIndexOf(a0));
                return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(ArrayList), (PyObject *) self, "lastIndexOf", args, 2);
        }

        static PyObject *t_ArrayList_remove(t_ArrayList *self, PyObject *args)
        {
            switch (PyTuple_GET_SIZE(args)) {
              case 1:
                {
                    jint a0;
                    ::java::lang::Object result((jobject) NULL);

                    if (!parseArgs(args, "I", &a0))
                    {
                        OBJ_CALL(result = self->object.remove(a0));
                        return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
                    }
                }
                {
                    ::java::lang::Object a0((jobject) NULL);
                    jboolean result;

                    if (!parseArgs(args, "o", &a0))
                    {
                        OBJ_CALL(result = self->object.remove(a0));
                        Py_RETURN_BOOL(result);
                    }
                }
            }

            return callSuper(&PY_TYPE(ArrayList), (PyObject *) self, "remove", args, 2);
        }

        static PyObject *t_ArrayList_set(t_ArrayList *self, PyObject *args)
        {
            jint a0;
            ::java::lang::Object a1((jobject) NULL);
            ::java::lang::Object result((jobject) NULL);

            if (!parseArgs(args, "IO", self->parameters[0], &a0, &a1))
            {
                OBJ_CALL(result = self->object.set(a0, a1));
                return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(ArrayList), (PyObject *) self, "set", args, 2);
        }

        static PyObject *t_ArrayList_size(t_ArrayList *self, PyObject *args)
        {
            jint result;

            if (!parseArgs(args, ""))
            {
                OBJ_CALL(result = self->object.size());
                return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(ArrayList), (PyObject *) self, "size", args, 2);
        }

        static PyObject *t_ArrayList_toArray(t_ArrayList *self, PyObject *args)
        {
            switch (PyTuple_GET_SIZE(args)) {
              case 0:
                {
                    JArray< ::java::lang::Object > result((jobject) NULL);
                    OBJ_CALL(result = self->object.toArray());
                    return JArray<jobject>(result.this$).wrap(::java::lang::t_Object::wrap_jobject);
                }
                break;
              case 1:
                {
                    JArray< ::java::lang::Object > a0((jobject) NULL);
                    JArray< ::java::lang::Object > result((jobject) NULL);

                    if (!parseArgs(args, "[o", &a0))
                    {
                        OBJ_CALL(result = self->object.toArray(a0));
                        return JArray<jobject>(result.this$).wrap(::java::lang::t_Object::wrap_jobject);
                    }
                }
            }

            return callSuper(&PY_TYPE(ArrayList), (PyObject *) self, "toArray", args, 2);
        }

        static PyObject *t_ArrayList_trimToSize(t_ArrayList *self)
        {
            OBJ_CALL(self->object.trimToSize());
            Py_RETURN_NONE;
        }
        static PyObject *t_ArrayList_get__parameters_(t_ArrayList *self, void *data)
        {
            return typeParameters(self->parameters, sizeof(self->parameters));
        }

        static PyObject *t_ArrayList_get__empty(t_ArrayList *self, void *data)
        {
            jboolean value;
            OBJ_CALL(value = self->object.isEmpty());
            Py_RETURN_BOOL(value);
        }
    }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/io/FilterOutputStream.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace java {
    namespace io {

        ::java::lang::Class *FilterOutputStream::class$ = NULL;
        jmethodID *FilterOutputStream::mids$ = NULL;

        jclass FilterOutputStream::initializeClass()
        {
            if (!class$)
            {

                jclass cls = (jclass) env->findClass("java/io/FilterOutputStream");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_82d865f8] = env->getMethodID(cls, "<init>", "(Ljava/io/OutputStream;)V");
                mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
                mids$[mid_flush_54c6a166] = env->getMethodID(cls, "flush", "()V");
                mids$[mid_write_49b4f12b] = env->getMethodID(cls, "write", "([B)V");
                mids$[mid_write_39c7bd3c] = env->getMethodID(cls, "write", "(I)V");
                mids$[mid_write_86f4435f] = env->getMethodID(cls, "write", "([BII)V");

                class$ = (::java::lang::Class *) new JObject(cls);
            }
            return (jclass) class$->this$;
        }

        FilterOutputStream::FilterOutputStream(const ::java::io::OutputStream & a0) : ::java::io::OutputStream(env->newObject(initializeClass, &mids$, mid_init$_82d865f8, a0.this$)) {}

        void FilterOutputStream::close() const
        {
            env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
        }

        void FilterOutputStream::flush() const
        {
            env->callVoidMethod(this$, mids$[mid_flush_54c6a166]);
        }

        void FilterOutputStream::write(const JArray< jbyte > & a0) const
        {
            env->callVoidMethod(this$, mids$[mid_write_49b4f12b], a0.this$);
        }

        void FilterOutputStream::write(jint a0) const
        {
            env->callVoidMethod(this$, mids$[mid_write_39c7bd3c], a0);
        }

        void FilterOutputStream::write(const JArray< jbyte > & a0, jint a1, jint a2) const
        {
            env->callVoidMethod(this$, mids$[mid_write_86f4435f], a0.this$, a1, a2);
        }
    }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
    namespace io {
        static PyObject *t_FilterOutputStream_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FilterOutputStream_instance_(PyTypeObject *type, PyObject *arg);
        static int t_FilterOutputStream_init_(t_FilterOutputStream *self, PyObject *args, PyObject *kwds);
        static PyObject *t_FilterOutputStream_close(t_FilterOutputStream *self, PyObject *args);
        static PyObject *t_FilterOutputStream_flush(t_FilterOutputStream *self, PyObject *args);
        static PyObject *t_FilterOutputStream_write(t_FilterOutputStream *self, PyObject *args);

        static PyMethodDef t_FilterOutputStream__methods_[] = {
            DECLARE_METHOD(t_FilterOutputStream, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FilterOutputStream, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FilterOutputStream, close, METH_VARARGS),
            DECLARE_METHOD(t_FilterOutputStream, flush, METH_VARARGS),
            DECLARE_METHOD(t_FilterOutputStream, write, METH_VARARGS),
            { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FilterOutputStream, t_FilterOutputStream, ::java::io::OutputStream, FilterOutputStream, t_FilterOutputStream_init_, 0, 0, 0, 0, 0);

        void t_FilterOutputStream::install(PyObject *module)
        {
            installType(&PY_TYPE(FilterOutputStream), module, "FilterOutputStream", 0);
        }

        void t_FilterOutputStream::initialize(PyObject *module)
        {
            PyDict_SetItemString(PY_TYPE(FilterOutputStream).tp_dict, "class_", make_descriptor(FilterOutputStream::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(FilterOutputStream).tp_dict, "wrapfn_", make_descriptor(t_FilterOutputStream::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(FilterOutputStream).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FilterOutputStream_cast_(PyTypeObject *type, PyObject *arg)
        {
            if (!(arg = castCheck(arg, FilterOutputStream::initializeClass, 1)))
                return NULL;
            return t_FilterOutputStream::wrap_Object(FilterOutputStream(((t_FilterOutputStream *) arg)->object.this$));
        }
        static PyObject *t_FilterOutputStream_instance_(PyTypeObject *type, PyObject *arg)
        {
            if (!castCheck(arg, FilterOutputStream::initializeClass, 0))
                Py_RETURN_FALSE;
            Py_RETURN_TRUE;
        }

        static int t_FilterOutputStream_init_(t_FilterOutputStream *self, PyObject *args, PyObject *kwds)
        {
            ::java::io::OutputStream a0((jobject) NULL);
            FilterOutputStream object((jobject) NULL);

            if (!parseArgs(args, "k", ::java::io::OutputStream::initializeClass, &a0))
            {
                INT_CALL(object = FilterOutputStream(a0));
                self->object = object;
            }
            else
            {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
            }

            return 0;
        }

        static PyObject *t_FilterOutputStream_close(t_FilterOutputStream *self, PyObject *args)
        {

            if (!parseArgs(args, ""))
            {
                OBJ_CALL(self->object.close());
                Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(FilterOutputStream), (PyObject *) self, "close", args, 2);
        }

        static PyObject *t_FilterOutputStream_flush(t_FilterOutputStream *self, PyObject *args)
        {

            if (!parseArgs(args, ""))
            {
                OBJ_CALL(self->object.flush());
                Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(FilterOutputStream), (PyObject *) self, "flush", args, 2);
        }

        static PyObject *t_FilterOutputStream_write(t_FilterOutputStream *self, PyObject *args)
        {
            switch (PyTuple_GET_SIZE(args)) {
              case 1:
                {
                    JArray< jbyte > a0((jobject) NULL);

                    if (!parseArgs(args, "[B", &a0))
                    {
                        OBJ_CALL(self->object.write(a0));
                        Py_RETURN_NONE;
                    }
                }
                {
                    jint a0;

                    if (!parseArgs(args, "I", &a0))
                    {
                        OBJ_CALL(self->object.write(a0));
                        Py_RETURN_NONE;
                    }
                }
                break;
              case 3:
                {
                    JArray< jbyte > a0((jobject) NULL);
                    jint a1;
                    jint a2;

                    if (!parseArgs(args, "[BII", &a0, &a1, &a2))
                    {
                        OBJ_CALL(self->object.write(a0, a1, a2));
                        Py_RETURN_NONE;
                    }
                }
            }

            return callSuper(&PY_TYPE(FilterOutputStream), (PyObject *) self, "write", args, 2);
        }
    }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/lang/NumberFormatException.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace java {
    namespace lang {

        ::java::lang::Class *NumberFormatException::class$ = NULL;
        jmethodID *NumberFormatException::mids$ = NULL;

        jclass NumberFormatException::initializeClass()
        {
            if (!class$)
            {

                jclass cls = (jclass) env->findClass("java/lang/NumberFormatException");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");

                class$ = (::java::lang::Class *) new JObject(cls);
            }
            return (jclass) class$->this$;
        }

        NumberFormatException::NumberFormatException() : ::java::lang::IllegalArgumentException(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        NumberFormatException::NumberFormatException(const ::java::lang::String & a0) : ::java::lang::IllegalArgumentException(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}
    }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
    namespace lang {
        static PyObject *t_NumberFormatException_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_NumberFormatException_instance_(PyTypeObject *type, PyObject *arg);
        static int t_NumberFormatException_init_(t_NumberFormatException *self, PyObject *args, PyObject *kwds);

        static PyMethodDef t_NumberFormatException__methods_[] = {
            DECLARE_METHOD(t_NumberFormatException, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_NumberFormatException, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(NumberFormatException, t_NumberFormatException, ::java::lang::IllegalArgumentException, NumberFormatException, t_NumberFormatException_init_, 0, 0, 0, 0, 0);

        void t_NumberFormatException::install(PyObject *module)
        {
            installType(&PY_TYPE(NumberFormatException), module, "NumberFormatException", 0);
        }

        void t_NumberFormatException::initialize(PyObject *module)
        {
            PyDict_SetItemString(PY_TYPE(NumberFormatException).tp_dict, "class_", make_descriptor(NumberFormatException::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(NumberFormatException).tp_dict, "wrapfn_", make_descriptor(t_NumberFormatException::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(NumberFormatException).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_NumberFormatException_cast_(PyTypeObject *type, PyObject *arg)
        {
            if (!(arg = castCheck(arg, NumberFormatException::initializeClass, 1)))
                return NULL;
            return t_NumberFormatException::wrap_Object(NumberFormatException(((t_NumberFormatException *) arg)->object.this$));
        }
        static PyObject *t_NumberFormatException_instance_(PyTypeObject *type, PyObject *arg)
        {
            if (!castCheck(arg, NumberFormatException::initializeClass, 0))
                Py_RETURN_FALSE;
            Py_RETURN_TRUE;
        }

        static int t_NumberFormatException_init_(t_NumberFormatException *self, PyObject *args, PyObject *kwds)
        {
            switch (PyTuple_GET_SIZE(args)) {
              case 0:
                {
                    NumberFormatException object((jobject) NULL);

                    INT_CALL(object = NumberFormatException());
                    self->object = object;
                    break;
                }
                goto err;
              case 1:
                {
                    ::java::lang::String a0((jobject) NULL);
                    NumberFormatException object((jobject) NULL);

                    if (!parseArgs(args, "s", &a0))
                    {
                        INT_CALL(object = NumberFormatException(a0));
                        self->object = object;
                        break;
                    }
                }
              default:
              err:
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
            }

            return 0;
        }
    }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/io/Reader.h"
#include "java/lang/Readable.h"
#include "java/io/Closeable.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace java {
    namespace io {

        ::java::lang::Class *Reader::class$ = NULL;
        jmethodID *Reader::mids$ = NULL;

        jclass Reader::initializeClass()
        {
            if (!class$)
            {

                jclass cls = (jclass) env->findClass("java/io/Reader");

                mids$ = new jmethodID[max_mid];
                mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
                mids$[mid_mark_39c7bd3c] = env->getMethodID(cls, "mark", "(I)V");
                mids$[mid_markSupported_54c6a16a] = env->getMethodID(cls, "markSupported", "()Z");
                mids$[mid_read_54c6a179] = env->getMethodID(cls, "read", "()I");
                mids$[mid_read_700e23c9] = env->getMethodID(cls, "read", "([C)I");
                mids$[mid_read_6f0bb349] = env->getMethodID(cls, "read", "([CII)I");
                mids$[mid_ready_54c6a16a] = env->getMethodID(cls, "ready", "()Z");
                mids$[mid_reset_54c6a166] = env->getMethodID(cls, "reset", "()V");
                mids$[mid_skip_0ee6df33] = env->getMethodID(cls, "skip", "(J)J");

                class$ = (::java::lang::Class *) new JObject(cls);
            }
            return (jclass) class$->this$;
        }

        void Reader::close() const
        {
            env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
        }

        void Reader::mark(jint a0) const
        {
            env->callVoidMethod(this$, mids$[mid_mark_39c7bd3c], a0);
        }

        jboolean Reader::markSupported() const
        {
            return env->callBooleanMethod(this$, mids$[mid_markSupported_54c6a16a]);
        }

        jint Reader::read() const
        {
            return env->callIntMethod(this$, mids$[mid_read_54c6a179]);
        }

        jint Reader::read(const JArray< jchar > & a0) const
        {
            return env->callIntMethod(this$, mids$[mid_read_700e23c9], a0.this$);
        }

        jint Reader::read(const JArray< jchar > & a0, jint a1, jint a2) const
        {
            return env->callIntMethod(this$, mids$[mid_read_6f0bb349], a0.this$, a1, a2);
        }

        jboolean Reader::ready() const
        {
            return env->callBooleanMethod(this$, mids$[mid_ready_54c6a16a]);
        }

        void Reader::reset() const
        {
            env->callVoidMethod(this$, mids$[mid_reset_54c6a166]);
        }

        jlong Reader::skip(jlong a0) const
        {
            return env->callLongMethod(this$, mids$[mid_skip_0ee6df33], a0);
        }
    }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
    namespace io {
        static PyObject *t_Reader_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Reader_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Reader_close(t_Reader *self);
        static PyObject *t_Reader_mark(t_Reader *self, PyObject *arg);
        static PyObject *t_Reader_markSupported(t_Reader *self);
        static PyObject *t_Reader_read(t_Reader *self, PyObject *args);
        static PyObject *t_Reader_ready(t_Reader *self);
        static PyObject *t_Reader_reset(t_Reader *self);
        static PyObject *t_Reader_skip(t_Reader *self, PyObject *arg);

        static PyMethodDef t_Reader__methods_[] = {
            DECLARE_METHOD(t_Reader, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Reader, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Reader, close, METH_NOARGS),
            DECLARE_METHOD(t_Reader, mark, METH_O),
            DECLARE_METHOD(t_Reader, markSupported, METH_NOARGS),
            DECLARE_METHOD(t_Reader, read, METH_VARARGS),
            DECLARE_METHOD(t_Reader, ready, METH_NOARGS),
            DECLARE_METHOD(t_Reader, reset, METH_NOARGS),
            DECLARE_METHOD(t_Reader, skip, METH_O),
            { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(Reader, t_Reader, ::java::lang::Object, Reader, abstract_init, 0, 0, 0, 0, 0);

        void t_Reader::install(PyObject *module)
        {
            installType(&PY_TYPE(Reader), module, "Reader", 0);
        }

        void t_Reader::initialize(PyObject *module)
        {
            PyDict_SetItemString(PY_TYPE(Reader).tp_dict, "class_", make_descriptor(Reader::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Reader).tp_dict, "wrapfn_", make_descriptor(t_Reader::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Reader).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_Reader_cast_(PyTypeObject *type, PyObject *arg)
        {
            if (!(arg = castCheck(arg, Reader::initializeClass, 1)))
                return NULL;
            return t_Reader::wrap_Object(Reader(((t_Reader *) arg)->object.this$));
        }
        static PyObject *t_Reader_instance_(PyTypeObject *type, PyObject *arg)
        {
            if (!castCheck(arg, Reader::initializeClass, 0))
                Py_RETURN_FALSE;
            Py_RETURN_TRUE;
        }

        static PyObject *t_Reader_close(t_Reader *self)
        {
            OBJ_CALL(self->object.close());
            Py_RETURN_NONE;
        }

        static PyObject *t_Reader_mark(t_Reader *self, PyObject *arg)
        {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
                OBJ_CALL(self->object.mark(a0));
                Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "mark", arg);
            return NULL;
        }

        static PyObject *t_Reader_markSupported(t_Reader *self)
        {
            jboolean result;
            OBJ_CALL(result = self->object.markSupported());
            Py_RETURN_BOOL(result);
        }

        static PyObject *t_Reader_read(t_Reader *self, PyObject *args)
        {
            switch (PyTuple_GET_SIZE(args)) {
              case 0:
                {
                    jint result;
                    OBJ_CALL(result = self->object.read());
                    return PyInt_FromLong((long) result);
                }
                break;
              case 1:
                {
                    JArray< jchar > a0((jobject) NULL);
                    jint result;

                    if (!parseArgs(args, "[C", &a0))
                    {
                        OBJ_CALL(result = self->object.read(a0));
                        return PyInt_FromLong((long) result);
                    }
                }
                break;
              case 3:
                {
                    JArray< jchar > a0((jobject) NULL);
                    jint a1;
                    jint a2;
                    jint result;

                    if (!parseArgs(args, "[CII", &a0, &a1, &a2))
                    {
                        OBJ_CALL(result = self->object.read(a0, a1, a2));
                        return PyInt_FromLong((long) result);
                    }
                }
            }

            PyErr_SetArgsError((PyObject *) self, "read", args);
            return NULL;
        }

        static PyObject *t_Reader_ready(t_Reader *self)
        {
            jboolean result;
            OBJ_CALL(result = self->object.ready());
            Py_RETURN_BOOL(result);
        }

        static PyObject *t_Reader_reset(t_Reader *self)
        {
            OBJ_CALL(self->object.reset());
            Py_RETURN_NONE;
        }

        static PyObject *t_Reader_skip(t_Reader *self, PyObject *arg)
        {
            jlong a0;
            jlong result;

            if (!parseArg(arg, "J", &a0))
            {
                OBJ_CALL(result = self->object.skip(a0));
                return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            PyErr_SetArgsError((PyObject *) self, "skip", arg);
            return NULL;
        }
    }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/lang/Cloneable.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace java {
    namespace lang {

        ::java::lang::Class *Cloneable::class$ = NULL;
        jmethodID *Cloneable::mids$ = NULL;

        jclass Cloneable::initializeClass()
        {
            if (!class$)
            {

                jclass cls = (jclass) env->findClass("java/lang/Cloneable");

                class$ = (::java::lang::Class *) new JObject(cls);
            }
            return (jclass) class$->this$;
        }
    }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
    namespace lang {
        static PyObject *t_Cloneable_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Cloneable_instance_(PyTypeObject *type, PyObject *arg);

        static PyMethodDef t_Cloneable__methods_[] = {
            DECLARE_METHOD(t_Cloneable, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Cloneable, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(Cloneable, t_Cloneable, ::java::lang::Object, Cloneable, abstract_init, 0, 0, 0, 0, 0);

        void t_Cloneable::install(PyObject *module)
        {
            installType(&PY_TYPE(Cloneable), module, "Cloneable", 0);
        }

        void t_Cloneable::initialize(PyObject *module)
        {
            PyDict_SetItemString(PY_TYPE(Cloneable).tp_dict, "class_", make_descriptor(Cloneable::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Cloneable).tp_dict, "wrapfn_", make_descriptor(t_Cloneable::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Cloneable).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_Cloneable_cast_(PyTypeObject *type, PyObject *arg)
        {
            if (!(arg = castCheck(arg, Cloneable::initializeClass, 1)))
                return NULL;
            return t_Cloneable::wrap_Object(Cloneable(((t_Cloneable *) arg)->object.this$));
        }
        static PyObject *t_Cloneable_instance_(PyTypeObject *type, PyObject *arg)
        {
            if (!castCheck(arg, Cloneable::initializeClass, 0))
                Py_RETURN_FALSE;
            Py_RETURN_TRUE;
        }
    }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/util/HashSet.h"
#include "java/util/Collection.h"
#include "java/util/Iterator.h"
#include "java/lang/Cloneable.h"
#include "java/io/Serializable.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "JArray.h"

namespace java {
    namespace util {

        ::java::lang::Class *HashSet::class$ = NULL;
        jmethodID *HashSet::mids$ = NULL;

        jclass HashSet::initializeClass()
        {
            if (!class$)
            {

                jclass cls = (jclass) env->findClass("java/util/HashSet");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                mids$[mid_init$_9bfb370d] = env->getMethodID(cls, "<init>", "(Ljava/util/Collection;)V");
                mids$[mid_init$_39c7bd3c] = env->getMethodID(cls, "<init>", "(I)V");
                mids$[mid_init$_abdf2c51] = env->getMethodID(cls, "<init>", "(IF)V");
                mids$[mid_add_290588e2] = env->getMethodID(cls, "add", "(Ljava/lang/Object;)Z");
                mids$[mid_clear_54c6a166] = env->getMethodID(cls, "clear", "()V");
                mids$[mid_clone_846352c3] = env->getMethodID(cls, "clone", "()Ljava/lang/Object;");
                mids$[mid_contains_290588e2] = env->getMethodID(cls, "contains", "(Ljava/lang/Object;)Z");
                mids$[mid_isEmpty_54c6a16a] = env->getMethodID(cls, "isEmpty", "()Z");
                mids$[mid_iterator_40858c90] = env->getMethodID(cls, "iterator", "()Ljava/util/Iterator;");
                mids$[mid_remove_290588e2] = env->getMethodID(cls, "remove", "(Ljava/lang/Object;)Z");
                mids$[mid_size_54c6a179] = env->getMethodID(cls, "size", "()I");

                class$ = (::java::lang::Class *) new JObject(cls);
            }
            return (jclass) class$->this$;
        }

        HashSet::HashSet() : ::java::util::AbstractSet(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        HashSet::HashSet(const ::java::util::Collection & a0) : ::java::util::AbstractSet(env->newObject(initializeClass, &mids$, mid_init$_9bfb370d, a0.this$)) {}

        HashSet::HashSet(jint a0) : ::java::util::AbstractSet(env->newObject(initializeClass, &mids$, mid_init$_39c7bd3c, a0)) {}

        HashSet::HashSet(jint a0, jfloat a1) : ::java::util::AbstractSet(env->newObject(initializeClass, &mids$, mid_init$_abdf2c51, a0, a1)) {}

        jboolean HashSet::add(const ::java::lang::Object & a0) const
        {
            return env->callBooleanMethod(this$, mids$[mid_add_290588e2], a0.this$);
        }

        void HashSet::clear() const
        {
            env->callVoidMethod(this$, mids$[mid_clear_54c6a166]);
        }

        ::java::lang::Object HashSet::clone() const
        {
            return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_clone_846352c3]));
        }

        jboolean HashSet::contains(const ::java::lang::Object & a0) const
        {
            return env->callBooleanMethod(this$, mids$[mid_contains_290588e2], a0.this$);
        }

        jboolean HashSet::isEmpty() const
        {
            return env->callBooleanMethod(this$, mids$[mid_isEmpty_54c6a16a]);
        }

        ::java::util::Iterator HashSet::iterator() const
        {
            return ::java::util::Iterator(env->callObjectMethod(this$, mids$[mid_iterator_40858c90]));
        }

        jboolean HashSet::remove(const ::java::lang::Object & a0) const
        {
            return env->callBooleanMethod(this$, mids$[mid_remove_290588e2], a0.this$);
        }

        jint HashSet::size() const
        {
            return env->callIntMethod(this$, mids$[mid_size_54c6a179]);
        }
    }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
    namespace util {
        static PyObject *t_HashSet_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_HashSet_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_HashSet_of_(t_HashSet *self, PyObject *args);
        static int t_HashSet_init_(t_HashSet *self, PyObject *args, PyObject *kwds);
        static PyObject *t_HashSet_add(t_HashSet *self, PyObject *args);
        static PyObject *t_HashSet_clear(t_HashSet *self, PyObject *args);
        static PyObject *t_HashSet_clone(t_HashSet *self);
        static PyObject *t_HashSet_contains(t_HashSet *self, PyObject *args);
        static PyObject *t_HashSet_isEmpty(t_HashSet *self, PyObject *args);
        static PyObject *t_HashSet_iterator(t_HashSet *self, PyObject *args);
        static PyObject *t_HashSet_remove(t_HashSet *self, PyObject *args);
        static PyObject *t_HashSet_size(t_HashSet *self, PyObject *args);
        static PyObject *t_HashSet_get__empty(t_HashSet *self, void *data);
        static PyObject *t_HashSet_get__parameters_(t_HashSet *self, void *data);
        static PyGetSetDef t_HashSet__fields_[] = {
            DECLARE_GET_FIELD(t_HashSet, empty),
            DECLARE_GET_FIELD(t_HashSet, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_HashSet__methods_[] = {
            DECLARE_METHOD(t_HashSet, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_HashSet, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_HashSet, of_, METH_VARARGS),
            DECLARE_METHOD(t_HashSet, add, METH_VARARGS),
            DECLARE_METHOD(t_HashSet, clear, METH_VARARGS),
            DECLARE_METHOD(t_HashSet, clone, METH_NOARGS),
            DECLARE_METHOD(t_HashSet, contains, METH_VARARGS),
            DECLARE_METHOD(t_HashSet, isEmpty, METH_VARARGS),
            DECLARE_METHOD(t_HashSet, iterator, METH_VARARGS),
            DECLARE_METHOD(t_HashSet, remove, METH_VARARGS),
            DECLARE_METHOD(t_HashSet, size, METH_VARARGS),
            { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(HashSet, t_HashSet, ::java::util::AbstractSet, HashSet, t_HashSet_init_, ((PyObject *(*)(t_HashSet *)) get_generic_iterator< t_HashSet >), 0, t_HashSet__fields_, 0, 0);
        PyObject *t_HashSet::wrap_Object(const HashSet& object, PyTypeObject *E)
        {
            PyObject *obj = t_HashSet::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
                t_HashSet *self = (t_HashSet *) obj;
                self->parameters[0] = E;
            }
            return obj;
        }

        PyObject *t_HashSet::wrap_jobject(const jobject& object, PyTypeObject *E)
        {
            PyObject *obj = t_HashSet::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
                t_HashSet *self = (t_HashSet *) obj;
                self->parameters[0] = E;
            }
            return obj;
        }

        void t_HashSet::install(PyObject *module)
        {
            installType(&PY_TYPE(HashSet), module, "HashSet", 0);
        }

        void t_HashSet::initialize(PyObject *module)
        {
            PyDict_SetItemString(PY_TYPE(HashSet).tp_dict, "class_", make_descriptor(HashSet::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(HashSet).tp_dict, "wrapfn_", make_descriptor(t_HashSet::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(HashSet).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_HashSet_cast_(PyTypeObject *type, PyObject *arg)
        {
            if (!(arg = castCheck(arg, HashSet::initializeClass, 1)))
                return NULL;
            return t_HashSet::wrap_Object(HashSet(((t_HashSet *) arg)->object.this$));
        }
        static PyObject *t_HashSet_instance_(PyTypeObject *type, PyObject *arg)
        {
            if (!castCheck(arg, HashSet::initializeClass, 0))
                Py_RETURN_FALSE;
            Py_RETURN_TRUE;
        }

        static PyObject *t_HashSet_of_(t_HashSet *self, PyObject *args)
        {
            if (!parseArg(args, "T", 1, &(self->parameters)))
                Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static int t_HashSet_init_(t_HashSet *self, PyObject *args, PyObject *kwds)
        {
            switch (PyTuple_GET_SIZE(args)) {
              case 0:
                {
                    HashSet object((jobject) NULL);

                    INT_CALL(object = HashSet());
                    self->object = object;
                    break;
                }
                goto err;
              case 1:
                {
                    ::java::util::Collection a0((jobject) NULL);
                    PyTypeObject **p0;
                    HashSet object((jobject) NULL);

                    if (!parseArgs(args, "K", ::java::util::Collection::initializeClass, &a0, &p0, ::java::util::t_Collection::parameters_))
                    {
                        INT_CALL(object = HashSet(a0));
                        self->object = object;
                        break;
                    }
                }
                {
                    jint a0;
                    HashSet object((jobject) NULL);

                    if (!parseArgs(args, "I", &a0))
                    {
                        INT_CALL(object = HashSet(a0));
                        self->object = object;
                        break;
                    }
                }
                goto err;
              case 2:
                {
                    jint a0;
                    jfloat a1;
                    HashSet object((jobject) NULL);

                    if (!parseArgs(args, "IF", &a0, &a1))
                    {
                        INT_CALL(object = HashSet(a0, a1));
                        self->object = object;
                        break;
                    }
                }
              default:
              err:
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
            }

            return 0;
        }

        static PyObject *t_HashSet_add(t_HashSet *self, PyObject *args)
        {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "O", self->parameters[0], &a0))
            {
                OBJ_CALL(result = self->object.add(a0));
                Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(HashSet), (PyObject *) self, "add", args, 2);
        }

        static PyObject *t_HashSet_clear(t_HashSet *self, PyObject *args)
        {

            if (!parseArgs(args, ""))
            {
                OBJ_CALL(self->object.clear());
                Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(HashSet), (PyObject *) self, "clear", args, 2);
        }

        static PyObject *t_HashSet_clone(t_HashSet *self)
        {
            ::java::lang::Object result((jobject) NULL);
            OBJ_CALL(result = self->object.clone());
            return ::java::lang::t_Object::wrap_Object(result);
        }

        static PyObject *t_HashSet_contains(t_HashSet *self, PyObject *args)
        {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
                OBJ_CALL(result = self->object.contains(a0));
                Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(HashSet), (PyObject *) self, "contains", args, 2);
        }

        static PyObject *t_HashSet_isEmpty(t_HashSet *self, PyObject *args)
        {
            jboolean result;

            if (!parseArgs(args, ""))
            {
                OBJ_CALL(result = self->object.isEmpty());
                Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(HashSet), (PyObject *) self, "isEmpty", args, 2);
        }

        static PyObject *t_HashSet_iterator(t_HashSet *self, PyObject *args)
        {
            ::java::util::Iterator result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
                OBJ_CALL(result = self->object.iterator());
                return ::java::util::t_Iterator::wrap_Object(result, self->parameters[0]);
            }

            return callSuper(&PY_TYPE(HashSet), (PyObject *) self, "iterator", args, 2);
        }

        static PyObject *t_HashSet_remove(t_HashSet *self, PyObject *args)
        {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
                OBJ_CALL(result = self->object.remove(a0));
                Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(HashSet), (PyObject *) self, "remove", args, 2);
        }

        static PyObject *t_HashSet_size(t_HashSet *self, PyObject *args)
        {
            jint result;

            if (!parseArgs(args, ""))
            {
                OBJ_CALL(result = self->object.size());
                return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(HashSet), (PyObject *) self, "size", args, 2);
        }
        static PyObject *t_HashSet_get__parameters_(t_HashSet *self, void *data)
        {
            return typeParameters(self->parameters, sizeof(self->parameters));
        }

        static PyObject *t_HashSet_get__empty(t_HashSet *self, void *data)
        {
            jboolean value;
            OBJ_CALL(value = self->object.isEmpty());
            Py_RETURN_BOOL(value);
        }
    }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/util/AbstractCollection.h"
#include "java/util/Collection.h"
#include "java/util/Iterator.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace java {
    namespace util {

        ::java::lang::Class *AbstractCollection::class$ = NULL;
        jmethodID *AbstractCollection::mids$ = NULL;

        jclass AbstractCollection::initializeClass()
        {
            if (!class$)
            {

                jclass cls = (jclass) env->findClass("java/util/AbstractCollection");

                mids$ = new jmethodID[max_mid];
                mids$[mid_add_290588e2] = env->getMethodID(cls, "add", "(Ljava/lang/Object;)Z");
                mids$[mid_addAll_9bfb3701] = env->getMethodID(cls, "addAll", "(Ljava/util/Collection;)Z");
                mids$[mid_clear_54c6a166] = env->getMethodID(cls, "clear", "()V");
                mids$[mid_contains_290588e2] = env->getMethodID(cls, "contains", "(Ljava/lang/Object;)Z");
                mids$[mid_containsAll_9bfb3701] = env->getMethodID(cls, "containsAll", "(Ljava/util/Collection;)Z");
                mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
                mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
                mids$[mid_isEmpty_54c6a16a] = env->getMethodID(cls, "isEmpty", "()Z");
                mids$[mid_iterator_40858c90] = env->getMethodID(cls, "iterator", "()Ljava/util/Iterator;");
                mids$[mid_remove_290588e2] = env->getMethodID(cls, "remove", "(Ljava/lang/Object;)Z");
                mids$[mid_removeAll_9bfb3701] = env->getMethodID(cls, "removeAll", "(Ljava/util/Collection;)Z");
                mids$[mid_retainAll_9bfb3701] = env->getMethodID(cls, "retainAll", "(Ljava/util/Collection;)Z");
                mids$[mid_size_54c6a179] = env->getMethodID(cls, "size", "()I");
                mids$[mid_toArray_94e49c77] = env->getMethodID(cls, "toArray", "()[Ljava/lang/Object;");
                mids$[mid_toArray_ae67dbcf] = env->getMethodID(cls, "toArray", "([Ljava/lang/Object;)[Ljava/lang/Object;");
                mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

                class$ = (::java::lang::Class *) new JObject(cls);
            }
            return (jclass) class$->this$;
        }

        jboolean AbstractCollection::add(const ::java::lang::Object & a0) const
        {
            return env->callBooleanMethod(this$, mids$[mid_add_290588e2], a0.this$);
        }

        jboolean AbstractCollection::addAll(const ::java::util::Collection & a0) const
        {
            return env->callBooleanMethod(this$, mids$[mid_addAll_9bfb3701], a0.this$);
        }

        void AbstractCollection::clear() const
        {
            env->callVoidMethod(this$, mids$[mid_clear_54c6a166]);
        }

        jboolean AbstractCollection::contains(const ::java::lang::Object & a0) const
        {
            return env->callBooleanMethod(this$, mids$[mid_contains_290588e2], a0.this$);
        }

        jboolean AbstractCollection::containsAll(const ::java::util::Collection & a0) const
        {
            return env->callBooleanMethod(this$, mids$[mid_containsAll_9bfb3701], a0.this$);
        }

        jboolean AbstractCollection::equals(const ::java::lang::Object & a0) const
        {
            return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        jint AbstractCollection::hashCode() const
        {
            return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        jboolean AbstractCollection::isEmpty() const
        {
            return env->callBooleanMethod(this$, mids$[mid_isEmpty_54c6a16a]);
        }

        ::java::util::Iterator AbstractCollection::iterator() const
        {
            return ::java::util::Iterator(env->callObjectMethod(this$, mids$[mid_iterator_40858c90]));
        }

        jboolean AbstractCollection::remove(const ::java::lang::Object & a0) const
        {
            return env->callBooleanMethod(this$, mids$[mid_remove_290588e2], a0.this$);
        }

        jboolean AbstractCollection::removeAll(const ::java::util::Collection & a0) const
        {
            return env->callBooleanMethod(this$, mids$[mid_removeAll_9bfb3701], a0.this$);
        }

        jboolean AbstractCollection::retainAll(const ::java::util::Collection & a0) const
        {
            return env->callBooleanMethod(this$, mids$[mid_retainAll_9bfb3701], a0.this$);
        }

        jint AbstractCollection::size() const
        {
            return env->callIntMethod(this$, mids$[mid_size_54c6a179]);
        }

        JArray< ::java::lang::Object > AbstractCollection::toArray() const
        {
            return JArray< ::java::lang::Object >(env->callObjectMethod(this$, mids$[mid_toArray_94e49c77]));
        }

        JArray< ::java::lang::Object > AbstractCollection::toArray(const JArray< ::java::lang::Object > & a0) const
        {
            return JArray< ::java::lang::Object >(env->callObjectMethod(this$, mids$[mid_toArray_ae67dbcf], a0.this$));
        }

        ::java::lang::String AbstractCollection::toString() const
        {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }
    }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
    namespace util {
        static PyObject *t_AbstractCollection_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_AbstractCollection_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_AbstractCollection_of_(t_AbstractCollection *self, PyObject *args);
        static PyObject *t_AbstractCollection_add(t_AbstractCollection *self, PyObject *arg);
        static PyObject *t_AbstractCollection_addAll(t_AbstractCollection *self, PyObject *arg);
        static PyObject *t_AbstractCollection_clear(t_AbstractCollection *self);
        static PyObject *t_AbstractCollection_contains(t_AbstractCollection *self, PyObject *arg);
        static PyObject *t_AbstractCollection_containsAll(t_AbstractCollection *self, PyObject *arg);
        static PyObject *t_AbstractCollection_equals(t_AbstractCollection *self, PyObject *args);
        static PyObject *t_AbstractCollection_hashCode(t_AbstractCollection *self, PyObject *args);
        static PyObject *t_AbstractCollection_isEmpty(t_AbstractCollection *self);
        static PyObject *t_AbstractCollection_iterator(t_AbstractCollection *self);
        static PyObject *t_AbstractCollection_remove(t_AbstractCollection *self, PyObject *arg);
        static PyObject *t_AbstractCollection_removeAll(t_AbstractCollection *self, PyObject *arg);
        static PyObject *t_AbstractCollection_retainAll(t_AbstractCollection *self, PyObject *arg);
        static PyObject *t_AbstractCollection_size(t_AbstractCollection *self);
        static PyObject *t_AbstractCollection_toArray(t_AbstractCollection *self, PyObject *args);
        static PyObject *t_AbstractCollection_toString(t_AbstractCollection *self, PyObject *args);
        static PyObject *t_AbstractCollection_get__empty(t_AbstractCollection *self, void *data);
        static PyObject *t_AbstractCollection_get__parameters_(t_AbstractCollection *self, void *data);
        static PyGetSetDef t_AbstractCollection__fields_[] = {
            DECLARE_GET_FIELD(t_AbstractCollection, empty),
            DECLARE_GET_FIELD(t_AbstractCollection, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_AbstractCollection__methods_[] = {
            DECLARE_METHOD(t_AbstractCollection, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_AbstractCollection, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_AbstractCollection, of_, METH_VARARGS),
            DECLARE_METHOD(t_AbstractCollection, add, METH_O),
            DECLARE_METHOD(t_AbstractCollection, addAll, METH_O),
            DECLARE_METHOD(t_AbstractCollection, clear, METH_NOARGS),
            DECLARE_METHOD(t_AbstractCollection, contains, METH_O),
            DECLARE_METHOD(t_AbstractCollection, containsAll, METH_O),
            DECLARE_METHOD(t_AbstractCollection, equals, METH_VARARGS),
            DECLARE_METHOD(t_AbstractCollection, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_AbstractCollection, isEmpty, METH_NOARGS),
            DECLARE_METHOD(t_AbstractCollection, iterator, METH_NOARGS),
            DECLARE_METHOD(t_AbstractCollection, remove, METH_O),
            DECLARE_METHOD(t_AbstractCollection, removeAll, METH_O),
            DECLARE_METHOD(t_AbstractCollection, retainAll, METH_O),
            DECLARE_METHOD(t_AbstractCollection, size, METH_NOARGS),
            DECLARE_METHOD(t_AbstractCollection, toArray, METH_VARARGS),
            DECLARE_METHOD(t_AbstractCollection, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(AbstractCollection, t_AbstractCollection, ::java::lang::Object, AbstractCollection, abstract_init, ((PyObject *(*)(t_AbstractCollection *)) get_generic_iterator< t_AbstractCollection >), 0, t_AbstractCollection__fields_, 0, 0);
        PyObject *t_AbstractCollection::wrap_Object(const AbstractCollection& object, PyTypeObject *E)
        {
            PyObject *obj = t_AbstractCollection::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
                t_AbstractCollection *self = (t_AbstractCollection *) obj;
                self->parameters[0] = E;
            }
            return obj;
        }

        PyObject *t_AbstractCollection::wrap_jobject(const jobject& object, PyTypeObject *E)
        {
            PyObject *obj = t_AbstractCollection::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
                t_AbstractCollection *self = (t_AbstractCollection *) obj;
                self->parameters[0] = E;
            }
            return obj;
        }

        void t_AbstractCollection::install(PyObject *module)
        {
            installType(&PY_TYPE(AbstractCollection), module, "AbstractCollection", 0);
        }

        void t_AbstractCollection::initialize(PyObject *module)
        {
            PyDict_SetItemString(PY_TYPE(AbstractCollection).tp_dict, "class_", make_descriptor(AbstractCollection::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(AbstractCollection).tp_dict, "wrapfn_", make_descriptor(t_AbstractCollection::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(AbstractCollection).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_AbstractCollection_cast_(PyTypeObject *type, PyObject *arg)
        {
            if (!(arg = castCheck(arg, AbstractCollection::initializeClass, 1)))
                return NULL;
            return t_AbstractCollection::wrap_Object(AbstractCollection(((t_AbstractCollection *) arg)->object.this$));
        }
        static PyObject *t_AbstractCollection_instance_(PyTypeObject *type, PyObject *arg)
        {
            if (!castCheck(arg, AbstractCollection::initializeClass, 0))
                Py_RETURN_FALSE;
            Py_RETURN_TRUE;
        }

        static PyObject *t_AbstractCollection_of_(t_AbstractCollection *self, PyObject *args)
        {
            if (!parseArg(args, "T", 1, &(self->parameters)))
                Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static PyObject *t_AbstractCollection_add(t_AbstractCollection *self, PyObject *arg)
        {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArg(arg, "O", self->parameters[0], &a0))
            {
                OBJ_CALL(result = self->object.add(a0));
                Py_RETURN_BOOL(result);
            }

            PyErr_SetArgsError((PyObject *) self, "add", arg);
            return NULL;
        }

        static PyObject *t_AbstractCollection_addAll(t_AbstractCollection *self, PyObject *arg)
        {
            ::java::util::Collection a0((jobject) NULL);
            PyTypeObject **p0;
            jboolean result;

            if (!parseArg(arg, "K", ::java::util::Collection::initializeClass, &a0, &p0, ::java::util::t_Collection::parameters_))
            {
                OBJ_CALL(result = self->object.addAll(a0));
                Py_RETURN_BOOL(result);
            }

            PyErr_SetArgsError((PyObject *) self, "addAll", arg);
            return NULL;
        }

        static PyObject *t_AbstractCollection_clear(t_AbstractCollection *self)
        {
            OBJ_CALL(self->object.clear());
            Py_RETURN_NONE;
        }

        static PyObject *t_AbstractCollection_contains(t_AbstractCollection *self, PyObject *arg)
        {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArg(arg, "o", &a0))
            {
                OBJ_CALL(result = self->object.contains(a0));
                Py_RETURN_BOOL(result);
            }

            PyErr_SetArgsError((PyObject *) self, "contains", arg);
            return NULL;
        }

        static PyObject *t_AbstractCollection_containsAll(t_AbstractCollection *self, PyObject *arg)
        {
            ::java::util::Collection a0((jobject) NULL);
            PyTypeObject **p0;
            jboolean result;

            if (!parseArg(arg, "K", ::java::util::Collection::initializeClass, &a0, &p0, ::java::util::t_Collection::parameters_))
            {
                OBJ_CALL(result = self->object.containsAll(a0));
                Py_RETURN_BOOL(result);
            }

            PyErr_SetArgsError((PyObject *) self, "containsAll", arg);
            return NULL;
        }

        static PyObject *t_AbstractCollection_equals(t_AbstractCollection *self, PyObject *args)
        {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
                OBJ_CALL(result = self->object.equals(a0));
                Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(AbstractCollection), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_AbstractCollection_hashCode(t_AbstractCollection *self, PyObject *args)
        {
            jint result;

            if (!parseArgs(args, ""))
            {
                OBJ_CALL(result = self->object.hashCode());
                return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(AbstractCollection), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_AbstractCollection_isEmpty(t_AbstractCollection *self)
        {
            jboolean result;
            OBJ_CALL(result = self->object.isEmpty());
            Py_RETURN_BOOL(result);
        }

        static PyObject *t_AbstractCollection_iterator(t_AbstractCollection *self)
        {
            ::java::util::Iterator result((jobject) NULL);
            OBJ_CALL(result = self->object.iterator());
            return ::java::util::t_Iterator::wrap_Object(result, self->parameters[0]);
        }

        static PyObject *t_AbstractCollection_remove(t_AbstractCollection *self, PyObject *arg)
        {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArg(arg, "o", &a0))
            {
                OBJ_CALL(result = self->object.remove(a0));
                Py_RETURN_BOOL(result);
            }

            PyErr_SetArgsError((PyObject *) self, "remove", arg);
            return NULL;
        }

        static PyObject *t_AbstractCollection_removeAll(t_AbstractCollection *self, PyObject *arg)
        {
            ::java::util::Collection a0((jobject) NULL);
            PyTypeObject **p0;
            jboolean result;

            if (!parseArg(arg, "K", ::java::util::Collection::initializeClass, &a0, &p0, ::java::util::t_Collection::parameters_))
            {
                OBJ_CALL(result = self->object.removeAll(a0));
                Py_RETURN_BOOL(result);
            }

            PyErr_SetArgsError((PyObject *) self, "removeAll", arg);
            return NULL;
        }

        static PyObject *t_AbstractCollection_retainAll(t_AbstractCollection *self, PyObject *arg)
        {
            ::java::util::Collection a0((jobject) NULL);
            PyTypeObject **p0;
            jboolean result;

            if (!parseArg(arg, "K", ::java::util::Collection::initializeClass, &a0, &p0, ::java::util::t_Collection::parameters_))
            {
                OBJ_CALL(result = self->object.retainAll(a0));
                Py_RETURN_BOOL(result);
            }

            PyErr_SetArgsError((PyObject *) self, "retainAll", arg);
            return NULL;
        }

        static PyObject *t_AbstractCollection_size(t_AbstractCollection *self)
        {
            jint result;
            OBJ_CALL(result = self->object.size());
            return PyInt_FromLong((long) result);
        }

        static PyObject *t_AbstractCollection_toArray(t_AbstractCollection *self, PyObject *args)
        {
            switch (PyTuple_GET_SIZE(args)) {
              case 0:
                {
                    JArray< ::java::lang::Object > result((jobject) NULL);
                    OBJ_CALL(result = self->object.toArray());
                    return JArray<jobject>(result.this$).wrap(::java::lang::t_Object::wrap_jobject);
                }
                break;
              case 1:
                {
                    JArray< ::java::lang::Object > a0((jobject) NULL);
                    JArray< ::java::lang::Object > result((jobject) NULL);

                    if (!parseArgs(args, "[o", &a0))
                    {
                        OBJ_CALL(result = self->object.toArray(a0));
                        return JArray<jobject>(result.this$).wrap(::java::lang::t_Object::wrap_jobject);
                    }
                }
            }

            PyErr_SetArgsError((PyObject *) self, "toArray", args);
            return NULL;
        }

        static PyObject *t_AbstractCollection_toString(t_AbstractCollection *self, PyObject *args)
        {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
                OBJ_CALL(result = self->object.toString());
                return j2p(result);
            }

            return callSuper(&PY_TYPE(AbstractCollection), (PyObject *) self, "toString", args, 2);
        }
        static PyObject *t_AbstractCollection_get__parameters_(t_AbstractCollection *self, void *data)
        {
            return typeParameters(self->parameters, sizeof(self->parameters));
        }

        static PyObject *t_AbstractCollection_get__empty(t_AbstractCollection *self, void *data)
        {
            jboolean value;
            OBJ_CALL(value = self->object.isEmpty());
            Py_RETURN_BOOL(value);
        }
    }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/util/Set.h"
#include "java/util/Iterator.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "JArray.h"

namespace java {
    namespace util {

        ::java::lang::Class *Set::class$ = NULL;
        jmethodID *Set::mids$ = NULL;

        jclass Set::initializeClass()
        {
            if (!class$)
            {

                jclass cls = (jclass) env->findClass("java/util/Set");

                mids$ = new jmethodID[max_mid];
                mids$[mid_add_290588e2] = env->getMethodID(cls, "add", "(Ljava/lang/Object;)Z");
                mids$[mid_addAll_9bfb3701] = env->getMethodID(cls, "addAll", "(Ljava/util/Collection;)Z");
                mids$[mid_clear_54c6a166] = env->getMethodID(cls, "clear", "()V");
                mids$[mid_contains_290588e2] = env->getMethodID(cls, "contains", "(Ljava/lang/Object;)Z");
                mids$[mid_containsAll_9bfb3701] = env->getMethodID(cls, "containsAll", "(Ljava/util/Collection;)Z");
                mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
                mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
                mids$[mid_isEmpty_54c6a16a] = env->getMethodID(cls, "isEmpty", "()Z");
                mids$[mid_iterator_40858c90] = env->getMethodID(cls, "iterator", "()Ljava/util/Iterator;");
                mids$[mid_remove_290588e2] = env->getMethodID(cls, "remove", "(Ljava/lang/Object;)Z");
                mids$[mid_removeAll_9bfb3701] = env->getMethodID(cls, "removeAll", "(Ljava/util/Collection;)Z");
                mids$[mid_retainAll_9bfb3701] = env->getMethodID(cls, "retainAll", "(Ljava/util/Collection;)Z");
                mids$[mid_size_54c6a179] = env->getMethodID(cls, "size", "()I");
                mids$[mid_toArray_94e49c77] = env->getMethodID(cls, "toArray", "()[Ljava/lang/Object;");
                mids$[mid_toArray_ae67dbcf] = env->getMethodID(cls, "toArray", "([Ljava/lang/Object;)[Ljava/lang/Object;");

                class$ = (::java::lang::Class *) new JObject(cls);
            }
            return (jclass) class$->this$;
        }

        jboolean Set::add(const ::java::lang::Object & a0) const
        {
            return env->callBooleanMethod(this$, mids$[mid_add_290588e2], a0.this$);
        }

        jboolean Set::addAll(const ::java::util::Collection & a0) const
        {
            return env->callBooleanMethod(this$, mids$[mid_addAll_9bfb3701], a0.this$);
        }

        void Set::clear() const
        {
            env->callVoidMethod(this$, mids$[mid_clear_54c6a166]);
        }

        jboolean Set::contains(const ::java::lang::Object & a0) const
        {
            return env->callBooleanMethod(this$, mids$[mid_contains_290588e2], a0.this$);
        }

        jboolean Set::containsAll(const ::java::util::Collection & a0) const
        {
            return env->callBooleanMethod(this$, mids$[mid_containsAll_9bfb3701], a0.this$);
        }

        jboolean Set::equals(const ::java::lang::Object & a0) const
        {
            return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        jint Set::hashCode() const
        {
            return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        jboolean Set::isEmpty() const
        {
            return env->callBooleanMethod(this$, mids$[mid_isEmpty_54c6a16a]);
        }

        ::java::util::Iterator Set::iterator() const
        {
            return ::java::util::Iterator(env->callObjectMethod(this$, mids$[mid_iterator_40858c90]));
        }

        jboolean Set::remove(const ::java::lang::Object & a0) const
        {
            return env->callBooleanMethod(this$, mids$[mid_remove_290588e2], a0.this$);
        }

        jboolean Set::removeAll(const ::java::util::Collection & a0) const
        {
            return env->callBooleanMethod(this$, mids$[mid_removeAll_9bfb3701], a0.this$);
        }

        jboolean Set::retainAll(const ::java::util::Collection & a0) const
        {
            return env->callBooleanMethod(this$, mids$[mid_retainAll_9bfb3701], a0.this$);
        }

        jint Set::size() const
        {
            return env->callIntMethod(this$, mids$[mid_size_54c6a179]);
        }

        JArray< ::java::lang::Object > Set::toArray() const
        {
            return JArray< ::java::lang::Object >(env->callObjectMethod(this$, mids$[mid_toArray_94e49c77]));
        }

        JArray< ::java::lang::Object > Set::toArray(const JArray< ::java::lang::Object > & a0) const
        {
            return JArray< ::java::lang::Object >(env->callObjectMethod(this$, mids$[mid_toArray_ae67dbcf], a0.this$));
        }
    }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
    namespace util {
        static PyObject *t_Set_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Set_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Set_of_(t_Set *self, PyObject *args);
        static PyObject *t_Set_add(t_Set *self, PyObject *args);
        static PyObject *t_Set_addAll(t_Set *self, PyObject *args);
        static PyObject *t_Set_clear(t_Set *self, PyObject *args);
        static PyObject *t_Set_contains(t_Set *self, PyObject *args);
        static PyObject *t_Set_containsAll(t_Set *self, PyObject *args);
        static PyObject *t_Set_equals(t_Set *self, PyObject *args);
        static PyObject *t_Set_hashCode(t_Set *self, PyObject *args);
        static PyObject *t_Set_isEmpty(t_Set *self, PyObject *args);
        static PyObject *t_Set_iterator(t_Set *self, PyObject *args);
        static PyObject *t_Set_remove(t_Set *self, PyObject *args);
        static PyObject *t_Set_removeAll(t_Set *self, PyObject *args);
        static PyObject *t_Set_retainAll(t_Set *self, PyObject *args);
        static PyObject *t_Set_size(t_Set *self, PyObject *args);
        static PyObject *t_Set_toArray(t_Set *self, PyObject *args);
        static PyObject *t_Set_get__empty(t_Set *self, void *data);
        static PyObject *t_Set_get__parameters_(t_Set *self, void *data);
        static PyGetSetDef t_Set__fields_[] = {
            DECLARE_GET_FIELD(t_Set, empty),
            DECLARE_GET_FIELD(t_Set, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_Set__methods_[] = {
            DECLARE_METHOD(t_Set, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Set, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Set, of_, METH_VARARGS),
            DECLARE_METHOD(t_Set, add, METH_VARARGS),
            DECLARE_METHOD(t_Set, addAll, METH_VARARGS),
            DECLARE_METHOD(t_Set, clear, METH_VARARGS),
            DECLARE_METHOD(t_Set, contains, METH_VARARGS),
            DECLARE_METHOD(t_Set, containsAll, METH_VARARGS),
            DECLARE_METHOD(t_Set, equals, METH_VARARGS),
            DECLARE_METHOD(t_Set, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_Set, isEmpty, METH_VARARGS),
            DECLARE_METHOD(t_Set, iterator, METH_VARARGS),
            DECLARE_METHOD(t_Set, remove, METH_VARARGS),
            DECLARE_METHOD(t_Set, removeAll, METH_VARARGS),
            DECLARE_METHOD(t_Set, retainAll, METH_VARARGS),
            DECLARE_METHOD(t_Set, size, METH_VARARGS),
            DECLARE_METHOD(t_Set, toArray, METH_VARARGS),
            { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(Set, t_Set, ::java::util::Collection, Set, abstract_init, ((PyObject *(*)(t_Set *)) get_generic_iterator< t_Set >), 0, t_Set__fields_, 0, 0);
        PyObject *t_Set::wrap_Object(const Set& object, PyTypeObject *E)
        {
            PyObject *obj = t_Set::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
                t_Set *self = (t_Set *) obj;
                self->parameters[0] = E;
            }
            return obj;
        }

        PyObject *t_Set::wrap_jobject(const jobject& object, PyTypeObject *E)
        {
            PyObject *obj = t_Set::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
                t_Set *self = (t_Set *) obj;
                self->parameters[0] = E;
            }
            return obj;
        }

        void t_Set::install(PyObject *module)
        {
            installType(&PY_TYPE(Set), module, "Set", 0);
        }

        void t_Set::initialize(PyObject *module)
        {
            PyDict_SetItemString(PY_TYPE(Set).tp_dict, "class_", make_descriptor(Set::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Set).tp_dict, "wrapfn_", make_descriptor(t_Set::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Set).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_Set_cast_(PyTypeObject *type, PyObject *arg)
        {
            if (!(arg = castCheck(arg, Set::initializeClass, 1)))
                return NULL;
            return t_Set::wrap_Object(Set(((t_Set *) arg)->object.this$));
        }
        static PyObject *t_Set_instance_(PyTypeObject *type, PyObject *arg)
        {
            if (!castCheck(arg, Set::initializeClass, 0))
                Py_RETURN_FALSE;
            Py_RETURN_TRUE;
        }

        static PyObject *t_Set_of_(t_Set *self, PyObject *args)
        {
            if (!parseArg(args, "T", 1, &(self->parameters)))
                Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static PyObject *t_Set_add(t_Set *self, PyObject *args)
        {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "O", self->parameters[0], &a0))
            {
                OBJ_CALL(result = self->object.add(a0));
                Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(Set), (PyObject *) self, "add", args, 2);
        }

        static PyObject *t_Set_addAll(t_Set *self, PyObject *args)
        {
            ::java::util::Collection a0((jobject) NULL);
            PyTypeObject **p0;
            jboolean result;

            if (!parseArgs(args, "K", ::java::util::Collection::initializeClass, &a0, &p0, ::java::util::t_Collection::parameters_))
            {
                OBJ_CALL(result = self->object.addAll(a0));
                Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(Set), (PyObject *) self, "addAll", args, 2);
        }

        static PyObject *t_Set_clear(t_Set *self, PyObject *args)
        {

            if (!parseArgs(args, ""))
            {
                OBJ_CALL(self->object.clear());
                Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(Set), (PyObject *) self, "clear", args, 2);
        }

        static PyObject *t_Set_contains(t_Set *self, PyObject *args)
        {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
                OBJ_CALL(result = self->object.contains(a0));
                Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(Set), (PyObject *) self, "contains", args, 2);
        }

        static PyObject *t_Set_containsAll(t_Set *self, PyObject *args)
        {
            ::java::util::Collection a0((jobject) NULL);
            PyTypeObject **p0;
            jboolean result;

            if (!parseArgs(args, "K", ::java::util::Collection::initializeClass, &a0, &p0, ::java::util::t_Collection::parameters_))
            {
                OBJ_CALL(result = self->object.containsAll(a0));
                Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(Set), (PyObject *) self, "containsAll", args, 2);
        }

        static PyObject *t_Set_equals(t_Set *self, PyObject *args)
        {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
                OBJ_CALL(result = self->object.equals(a0));
                Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(Set), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_Set_hashCode(t_Set *self, PyObject *args)
        {
            jint result;

            if (!parseArgs(args, ""))
            {
                OBJ_CALL(result = self->object.hashCode());
                return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(Set), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_Set_isEmpty(t_Set *self, PyObject *args)
        {
            jboolean result;

            if (!parseArgs(args, ""))
            {
                OBJ_CALL(result = self->object.isEmpty());
                Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(Set), (PyObject *) self, "isEmpty", args, 2);
        }

        static PyObject *t_Set_iterator(t_Set *self, PyObject *args)
        {
            ::java::util::Iterator result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
                OBJ_CALL(result = self->object.iterator());
                return ::java::util::t_Iterator::wrap_Object(result, self->parameters[0]);
            }

            return callSuper(&PY_TYPE(Set), (PyObject *) self, "iterator", args, 2);
        }

        static PyObject *t_Set_remove(t_Set *self, PyObject *args)
        {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
                OBJ_CALL(result = self->object.remove(a0));
                Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(Set), (PyObject *) self, "remove", args, 2);
        }

        static PyObject *t_Set_removeAll(t_Set *self, PyObject *args)
        {
            ::java::util::Collection a0((jobject) NULL);
            PyTypeObject **p0;
            jboolean result;

            if (!parseArgs(args, "K", ::java::util::Collection::initializeClass, &a0, &p0, ::java::util::t_Collection::parameters_))
            {
                OBJ_CALL(result = self->object.removeAll(a0));
                Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(Set), (PyObject *) self, "removeAll", args, 2);
        }

        static PyObject *t_Set_retainAll(t_Set *self, PyObject *args)
        {
            ::java::util::Collection a0((jobject) NULL);
            PyTypeObject **p0;
            jboolean result;

            if (!parseArgs(args, "K", ::java::util::Collection::initializeClass, &a0, &p0, ::java::util::t_Collection::parameters_))
            {
                OBJ_CALL(result = self->object.retainAll(a0));
                Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(Set), (PyObject *) self, "retainAll", args, 2);
        }

        static PyObject *t_Set_size(t_Set *self, PyObject *args)
        {
            jint result;

            if (!parseArgs(args, ""))
            {
                OBJ_CALL(result = self->object.size());
                return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(Set), (PyObject *) self, "size", args, 2);
        }

        static PyObject *t_Set_toArray(t_Set *self, PyObject *args)
        {
            switch (PyTuple_GET_SIZE(args)) {
              case 0:
                {
                    JArray< ::java::lang::Object > result((jobject) NULL);
                    OBJ_CALL(result = self->object.toArray());
                    return JArray<jobject>(result.this$).wrap(::java::lang::t_Object::wrap_jobject);
                }
                break;
              case 1:
                {
                    JArray< ::java::lang::Object > a0((jobject) NULL);
                    JArray< ::java::lang::Object > result((jobject) NULL);

                    if (!parseArgs(args, "[o", &a0))
                    {
                        OBJ_CALL(result = self->object.toArray(a0));
                        return JArray<jobject>(result.this$).wrap(::java::lang::t_Object::wrap_jobject);
                    }
                }
            }

            return callSuper(&PY_TYPE(Set), (PyObject *) self, "toArray", args, 2);
        }
        static PyObject *t_Set_get__parameters_(t_Set *self, void *data)
        {
            return typeParameters(self->parameters, sizeof(self->parameters));
        }

        static PyObject *t_Set_get__empty(t_Set *self, void *data)
        {
            jboolean value;
            OBJ_CALL(value = self->object.isEmpty());
            Py_RETURN_BOOL(value);
        }
    }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/lang/SecurityException.h"
#include "java/lang/Throwable.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace java {
    namespace lang {

        ::java::lang::Class *SecurityException::class$ = NULL;
        jmethodID *SecurityException::mids$ = NULL;

        jclass SecurityException::initializeClass()
        {
            if (!class$)
            {

                jclass cls = (jclass) env->findClass("java/lang/SecurityException");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
                mids$[mid_init$_c5ec8ca4] = env->getMethodID(cls, "<init>", "(Ljava/lang/Throwable;)V");
                mids$[mid_init$_01646a2e] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Ljava/lang/Throwable;)V");

                class$ = (::java::lang::Class *) new JObject(cls);
            }
            return (jclass) class$->this$;
        }

        SecurityException::SecurityException() : ::java::lang::RuntimeException(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        SecurityException::SecurityException(const ::java::lang::String & a0) : ::java::lang::RuntimeException(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}

        SecurityException::SecurityException(const ::java::lang::Throwable & a0) : ::java::lang::RuntimeException(env->newObject(initializeClass, &mids$, mid_init$_c5ec8ca4, a0.this$)) {}

        SecurityException::SecurityException(const ::java::lang::String & a0, const ::java::lang::Throwable & a1) : ::java::lang::RuntimeException(env->newObject(initializeClass, &mids$, mid_init$_01646a2e, a0.this$, a1.this$)) {}
    }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
    namespace lang {
        static PyObject *t_SecurityException_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_SecurityException_instance_(PyTypeObject *type, PyObject *arg);
        static int t_SecurityException_init_(t_SecurityException *self, PyObject *args, PyObject *kwds);

        static PyMethodDef t_SecurityException__methods_[] = {
            DECLARE_METHOD(t_SecurityException, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_SecurityException, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(SecurityException, t_SecurityException, ::java::lang::RuntimeException, SecurityException, t_SecurityException_init_, 0, 0, 0, 0, 0);

        void t_SecurityException::install(PyObject *module)
        {
            installType(&PY_TYPE(SecurityException), module, "SecurityException", 0);
        }

        void t_SecurityException::initialize(PyObject *module)
        {
            PyDict_SetItemString(PY_TYPE(SecurityException).tp_dict, "class_", make_descriptor(SecurityException::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(SecurityException).tp_dict, "wrapfn_", make_descriptor(t_SecurityException::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(SecurityException).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_SecurityException_cast_(PyTypeObject *type, PyObject *arg)
        {
            if (!(arg = castCheck(arg, SecurityException::initializeClass, 1)))
                return NULL;
            return t_SecurityException::wrap_Object(SecurityException(((t_SecurityException *) arg)->object.this$));
        }
        static PyObject *t_SecurityException_instance_(PyTypeObject *type, PyObject *arg)
        {
            if (!castCheck(arg, SecurityException::initializeClass, 0))
                Py_RETURN_FALSE;
            Py_RETURN_TRUE;
        }

        static int t_SecurityException_init_(t_SecurityException *self, PyObject *args, PyObject *kwds)
        {
            switch (PyTuple_GET_SIZE(args)) {
              case 0:
                {
                    SecurityException object((jobject) NULL);

                    INT_CALL(object = SecurityException());
                    self->object = object;
                    break;
                }
                goto err;
              case 1:
                {
                    ::java::lang::String a0((jobject) NULL);
                    SecurityException object((jobject) NULL);

                    if (!parseArgs(args, "s", &a0))
                    {
                        INT_CALL(object = SecurityException(a0));
                        self->object = object;
                        break;
                    }
                }
                {
                    ::java::lang::Throwable a0((jobject) NULL);
                    SecurityException object((jobject) NULL);

                    if (!parseArgs(args, "k", ::java::lang::Throwable::initializeClass, &a0))
                    {
                        INT_CALL(object = SecurityException(a0));
                        self->object = object;
                        break;
                    }
                }
                goto err;
              case 2:
                {
                    ::java::lang::String a0((jobject) NULL);
                    ::java::lang::Throwable a1((jobject) NULL);
                    SecurityException object((jobject) NULL);

                    if (!parseArgs(args, "sk", ::java::lang::Throwable::initializeClass, &a0, &a1))
                    {
                        INT_CALL(object = SecurityException(a0, a1));
                        self->object = object;
                        break;
                    }
                }
              default:
              err:
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
            }

            return 0;
        }
    }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/lang/Package.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "java/lang/NumberFormatException.h"
#include "JArray.h"

namespace java {
    namespace lang {

        ::java::lang::Class *Package::class$ = NULL;
        jmethodID *Package::mids$ = NULL;

        jclass Package::initializeClass()
        {
            if (!class$)
            {

                jclass cls = (jclass) env->findClass("java/lang/Package");

                mids$ = new jmethodID[max_mid];
                mids$[mid_getImplementationTitle_14c7b5c5] = env->getMethodID(cls, "getImplementationTitle", "()Ljava/lang/String;");
                mids$[mid_getImplementationVendor_14c7b5c5] = env->getMethodID(cls, "getImplementationVendor", "()Ljava/lang/String;");
                mids$[mid_getImplementationVersion_14c7b5c5] = env->getMethodID(cls, "getImplementationVersion", "()Ljava/lang/String;");
                mids$[mid_getName_14c7b5c5] = env->getMethodID(cls, "getName", "()Ljava/lang/String;");
                mids$[mid_getPackage_d9fbaba1] = env->getStaticMethodID(cls, "getPackage", "(Ljava/lang/String;)Ljava/lang/Package;");
                mids$[mid_getPackages_c03e7c17] = env->getStaticMethodID(cls, "getPackages", "()[Ljava/lang/Package;");
                mids$[mid_getSpecificationTitle_14c7b5c5] = env->getMethodID(cls, "getSpecificationTitle", "()Ljava/lang/String;");
                mids$[mid_getSpecificationVendor_14c7b5c5] = env->getMethodID(cls, "getSpecificationVendor", "()Ljava/lang/String;");
                mids$[mid_getSpecificationVersion_14c7b5c5] = env->getMethodID(cls, "getSpecificationVersion", "()Ljava/lang/String;");
                mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
                mids$[mid_isCompatibleWith_5fdc3f44] = env->getMethodID(cls, "isCompatibleWith", "(Ljava/lang/String;)Z");
                mids$[mid_isSealed_54c6a16a] = env->getMethodID(cls, "isSealed", "()Z");
                mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

                class$ = (::java::lang::Class *) new JObject(cls);
            }
            return (jclass) class$->this$;
        }

        ::java::lang::String Package::getImplementationTitle() const
        {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getImplementationTitle_14c7b5c5]));
        }

        ::java::lang::String Package::getImplementationVendor() const
        {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getImplementationVendor_14c7b5c5]));
        }

        ::java::lang::String Package::getImplementationVersion() const
        {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getImplementationVersion_14c7b5c5]));
        }

        ::java::lang::String Package::getName() const
        {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getName_14c7b5c5]));
        }

        Package Package::getPackage(const ::java::lang::String & a0)
        {
            jclass cls = initializeClass();
            return Package(env->callStaticObjectMethod(cls, mids$[mid_getPackage_d9fbaba1], a0.this$));
        }

        JArray< Package > Package::getPackages()
        {
            jclass cls = initializeClass();
            return JArray< Package >(env->callStaticObjectMethod(cls, mids$[mid_getPackages_c03e7c17]));
        }

        ::java::lang::String Package::getSpecificationTitle() const
        {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getSpecificationTitle_14c7b5c5]));
        }

        ::java::lang::String Package::getSpecificationVendor() const
        {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getSpecificationVendor_14c7b5c5]));
        }

        ::java::lang::String Package::getSpecificationVersion() const
        {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getSpecificationVersion_14c7b5c5]));
        }

        jint Package::hashCode() const
        {
            return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        jboolean Package::isCompatibleWith(const ::java::lang::String & a0) const
        {
            return env->callBooleanMethod(this$, mids$[mid_isCompatibleWith_5fdc3f44], a0.this$);
        }

        jboolean Package::isSealed() const
        {
            return env->callBooleanMethod(this$, mids$[mid_isSealed_54c6a16a]);
        }

        ::java::lang::String Package::toString() const
        {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }
    }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
    namespace lang {
        static PyObject *t_Package_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Package_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Package_getImplementationTitle(t_Package *self);
        static PyObject *t_Package_getImplementationVendor(t_Package *self);
        static PyObject *t_Package_getImplementationVersion(t_Package *self);
        static PyObject *t_Package_getName(t_Package *self);
        static PyObject *t_Package_getPackage(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Package_getPackages(PyTypeObject *type);
        static PyObject *t_Package_getSpecificationTitle(t_Package *self);
        static PyObject *t_Package_getSpecificationVendor(t_Package *self);
        static PyObject *t_Package_getSpecificationVersion(t_Package *self);
        static PyObject *t_Package_hashCode(t_Package *self, PyObject *args);
        static PyObject *t_Package_isCompatibleWith(t_Package *self, PyObject *arg);
        static PyObject *t_Package_isSealed(t_Package *self);
        static PyObject *t_Package_toString(t_Package *self, PyObject *args);
        static PyObject *t_Package_get__implementationTitle(t_Package *self, void *data);
        static PyObject *t_Package_get__implementationVendor(t_Package *self, void *data);
        static PyObject *t_Package_get__implementationVersion(t_Package *self, void *data);
        static PyObject *t_Package_get__name(t_Package *self, void *data);
        static PyObject *t_Package_get__packages(t_Package *self, void *data);
        static PyObject *t_Package_get__sealed(t_Package *self, void *data);
        static PyObject *t_Package_get__specificationTitle(t_Package *self, void *data);
        static PyObject *t_Package_get__specificationVendor(t_Package *self, void *data);
        static PyObject *t_Package_get__specificationVersion(t_Package *self, void *data);
        static PyGetSetDef t_Package__fields_[] = {
            DECLARE_GET_FIELD(t_Package, implementationTitle),
            DECLARE_GET_FIELD(t_Package, implementationVendor),
            DECLARE_GET_FIELD(t_Package, implementationVersion),
            DECLARE_GET_FIELD(t_Package, name),
            DECLARE_GET_FIELD(t_Package, packages),
            DECLARE_GET_FIELD(t_Package, sealed),
            DECLARE_GET_FIELD(t_Package, specificationTitle),
            DECLARE_GET_FIELD(t_Package, specificationVendor),
            DECLARE_GET_FIELD(t_Package, specificationVersion),
            { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_Package__methods_[] = {
            DECLARE_METHOD(t_Package, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Package, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Package, getImplementationTitle, METH_NOARGS),
            DECLARE_METHOD(t_Package, getImplementationVendor, METH_NOARGS),
            DECLARE_METHOD(t_Package, getImplementationVersion, METH_NOARGS),
            DECLARE_METHOD(t_Package, getName, METH_NOARGS),
            DECLARE_METHOD(t_Package, getPackage, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Package, getPackages, METH_NOARGS | METH_CLASS),
            DECLARE_METHOD(t_Package, getSpecificationTitle, METH_NOARGS),
            DECLARE_METHOD(t_Package, getSpecificationVendor, METH_NOARGS),
            DECLARE_METHOD(t_Package, getSpecificationVersion, METH_NOARGS),
            DECLARE_METHOD(t_Package, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_Package, isCompatibleWith, METH_O),
            DECLARE_METHOD(t_Package, isSealed, METH_NOARGS),
            DECLARE_METHOD(t_Package, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(Package, t_Package, ::java::lang::Object, Package, abstract_init, 0, 0, t_Package__fields_, 0, 0);

        void t_Package::install(PyObject *module)
        {
            installType(&PY_TYPE(Package), module, "Package", 0);
        }

        void t_Package::initialize(PyObject *module)
        {
            PyDict_SetItemString(PY_TYPE(Package).tp_dict, "class_", make_descriptor(Package::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Package).tp_dict, "wrapfn_", make_descriptor(t_Package::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Package).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_Package_cast_(PyTypeObject *type, PyObject *arg)
        {
            if (!(arg = castCheck(arg, Package::initializeClass, 1)))
                return NULL;
            return t_Package::wrap_Object(Package(((t_Package *) arg)->object.this$));
        }
        static PyObject *t_Package_instance_(PyTypeObject *type, PyObject *arg)
        {
            if (!castCheck(arg, Package::initializeClass, 0))
                Py_RETURN_FALSE;
            Py_RETURN_TRUE;
        }

        static PyObject *t_Package_getImplementationTitle(t_Package *self)
        {
            ::java::lang::String result((jobject) NULL);
            OBJ_CALL(result = self->object.getImplementationTitle());
            return j2p(result);
        }

        static PyObject *t_Package_getImplementationVendor(t_Package *self)
        {
            ::java::lang::String result((jobject) NULL);
            OBJ_CALL(result = self->object.getImplementationVendor());
            return j2p(result);
        }

        static PyObject *t_Package_getImplementationVersion(t_Package *self)
        {
            ::java::lang::String result((jobject) NULL);
            OBJ_CALL(result = self->object.getImplementationVersion());
            return j2p(result);
        }

        static PyObject *t_Package_getName(t_Package *self)
        {
            ::java::lang::String result((jobject) NULL);
            OBJ_CALL(result = self->object.getName());
            return j2p(result);
        }

        static PyObject *t_Package_getPackage(PyTypeObject *type, PyObject *arg)
        {
            ::java::lang::String a0((jobject) NULL);
            Package result((jobject) NULL);

            if (!parseArg(arg, "s", &a0))
            {
                OBJ_CALL(result = ::java::lang::Package::getPackage(a0));
                return t_Package::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "getPackage", arg);
            return NULL;
        }

        static PyObject *t_Package_getPackages(PyTypeObject *type)
        {
            JArray< Package > result((jobject) NULL);
            OBJ_CALL(result = ::java::lang::Package::getPackages());
            return JArray<jobject>(result.this$).wrap(t_Package::wrap_jobject);
        }

        static PyObject *t_Package_getSpecificationTitle(t_Package *self)
        {
            ::java::lang::String result((jobject) NULL);
            OBJ_CALL(result = self->object.getSpecificationTitle());
            return j2p(result);
        }

        static PyObject *t_Package_getSpecificationVendor(t_Package *self)
        {
            ::java::lang::String result((jobject) NULL);
            OBJ_CALL(result = self->object.getSpecificationVendor());
            return j2p(result);
        }

        static PyObject *t_Package_getSpecificationVersion(t_Package *self)
        {
            ::java::lang::String result((jobject) NULL);
            OBJ_CALL(result = self->object.getSpecificationVersion());
            return j2p(result);
        }

        static PyObject *t_Package_hashCode(t_Package *self, PyObject *args)
        {
            jint result;

            if (!parseArgs(args, ""))
            {
                OBJ_CALL(result = self->object.hashCode());
                return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(Package), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_Package_isCompatibleWith(t_Package *self, PyObject *arg)
        {
            ::java::lang::String a0((jobject) NULL);
            jboolean result;

            if (!parseArg(arg, "s", &a0))
            {
                OBJ_CALL(result = self->object.isCompatibleWith(a0));
                Py_RETURN_BOOL(result);
            }

            PyErr_SetArgsError((PyObject *) self, "isCompatibleWith", arg);
            return NULL;
        }

        static PyObject *t_Package_isSealed(t_Package *self)
        {
            jboolean result;
            OBJ_CALL(result = self->object.isSealed());
            Py_RETURN_BOOL(result);
        }

        static PyObject *t_Package_toString(t_Package *self, PyObject *args)
        {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
                OBJ_CALL(result = self->object.toString());
                return j2p(result);
            }

            return callSuper(&PY_TYPE(Package), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_Package_get__implementationTitle(t_Package *self, void *data)
        {
            ::java::lang::String value((jobject) NULL);
            OBJ_CALL(value = self->object.getImplementationTitle());
            return j2p(value);
        }

        static PyObject *t_Package_get__implementationVendor(t_Package *self, void *data)
        {
            ::java::lang::String value((jobject) NULL);
            OBJ_CALL(value = self->object.getImplementationVendor());
            return j2p(value);
        }

        static PyObject *t_Package_get__implementationVersion(t_Package *self, void *data)
        {
            ::java::lang::String value((jobject) NULL);
            OBJ_CALL(value = self->object.getImplementationVersion());
            return j2p(value);
        }

        static PyObject *t_Package_get__name(t_Package *self, void *data)
        {
            ::java::lang::String value((jobject) NULL);
            OBJ_CALL(value = self->object.getName());
            return j2p(value);
        }

        static PyObject *t_Package_get__packages(t_Package *self, void *data)
        {
            JArray< Package > value((jobject) NULL);
            OBJ_CALL(value = self->object.getPackages());
            return JArray<jobject>(value.this$).wrap(t_Package::wrap_jobject);
        }

        static PyObject *t_Package_get__sealed(t_Package *self, void *data)
        {
            jboolean value;
            OBJ_CALL(value = self->object.isSealed());
            Py_RETURN_BOOL(value);
        }

        static PyObject *t_Package_get__specificationTitle(t_Package *self, void *data)
        {
            ::java::lang::String value((jobject) NULL);
            OBJ_CALL(value = self->object.getSpecificationTitle());
            return j2p(value);
        }

        static PyObject *t_Package_get__specificationVendor(t_Package *self, void *data)
        {
            ::java::lang::String value((jobject) NULL);
            OBJ_CALL(value = self->object.getSpecificationVendor());
            return j2p(value);
        }

        static PyObject *t_Package_get__specificationVersion(t_Package *self, void *data)
        {
            ::java::lang::String value((jobject) NULL);
            OBJ_CALL(value = self->object.getSpecificationVersion());
            return j2p(value);
        }
    }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/io/Closeable.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace java {
    namespace io {

        ::java::lang::Class *Closeable::class$ = NULL;
        jmethodID *Closeable::mids$ = NULL;

        jclass Closeable::initializeClass()
        {
            if (!class$)
            {

                jclass cls = (jclass) env->findClass("java/io/Closeable");

                mids$ = new jmethodID[max_mid];
                mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");

                class$ = (::java::lang::Class *) new JObject(cls);
            }
            return (jclass) class$->this$;
        }

        void Closeable::close() const
        {
            env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
        }
    }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
    namespace io {
        static PyObject *t_Closeable_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Closeable_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Closeable_close(t_Closeable *self);

        static PyMethodDef t_Closeable__methods_[] = {
            DECLARE_METHOD(t_Closeable, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Closeable, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Closeable, close, METH_NOARGS),
            { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(Closeable, t_Closeable, ::java::lang::Object, Closeable, abstract_init, 0, 0, 0, 0, 0);

        void t_Closeable::install(PyObject *module)
        {
            installType(&PY_TYPE(Closeable), module, "Closeable", 0);
        }

        void t_Closeable::initialize(PyObject *module)
        {
            PyDict_SetItemString(PY_TYPE(Closeable).tp_dict, "class_", make_descriptor(Closeable::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Closeable).tp_dict, "wrapfn_", make_descriptor(t_Closeable::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Closeable).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_Closeable_cast_(PyTypeObject *type, PyObject *arg)
        {
            if (!(arg = castCheck(arg, Closeable::initializeClass, 1)))
                return NULL;
            return t_Closeable::wrap_Object(Closeable(((t_Closeable *) arg)->object.this$));
        }
        static PyObject *t_Closeable_instance_(PyTypeObject *type, PyObject *arg)
        {
            if (!castCheck(arg, Closeable::initializeClass, 0))
                Py_RETURN_FALSE;
            Py_RETURN_TRUE;
        }

        static PyObject *t_Closeable_close(t_Closeable *self)
        {
            OBJ_CALL(self->object.close());
            Py_RETURN_NONE;
        }
    }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/io/File.h"
#include "java/io/IOException.h"
#include "java/lang/Comparable.h"
#include "java/io/FilenameFilter.h"
#include "java/io/Serializable.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "java/io/FileFilter.h"
#include "JArray.h"

namespace java {
    namespace io {

        ::java::lang::Class *File::class$ = NULL;
        jmethodID *File::mids$ = NULL;
        ::java::lang::String *File::pathSeparator = NULL;
        jchar File::pathSeparatorChar = (jchar) 0;
        ::java::lang::String *File::separator = NULL;
        jchar File::separatorChar = (jchar) 0;

        jclass File::initializeClass()
        {
            if (!class$)
            {

                jclass cls = (jclass) env->findClass("java/io/File");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
                mids$[mid_init$_4a264742] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Ljava/lang/String;)V");
                mids$[mid_init$_b8789389] = env->getMethodID(cls, "<init>", "(Ljava/io/File;Ljava/lang/String;)V");
                mids$[mid_canExecute_54c6a16a] = env->getMethodID(cls, "canExecute", "()Z");
                mids$[mid_canRead_54c6a16a] = env->getMethodID(cls, "canRead", "()Z");
                mids$[mid_canWrite_54c6a16a] = env->getMethodID(cls, "canWrite", "()Z");
                mids$[mid_compareTo_290588f1] = env->getMethodID(cls, "compareTo", "(Ljava/lang/Object;)I");
                mids$[mid_compareTo_c3dacf48] = env->getMethodID(cls, "compareTo", "(Ljava/io/File;)I");
                mids$[mid_createNewFile_54c6a16a] = env->getMethodID(cls, "createNewFile", "()Z");
                mids$[mid_createTempFile_c112cd9a] = env->getStaticMethodID(cls, "createTempFile", "(Ljava/lang/String;Ljava/lang/String;)Ljava/io/File;");
                mids$[mid_createTempFile_a168e209] = env->getStaticMethodID(cls, "createTempFile", "(Ljava/lang/String;Ljava/lang/String;Ljava/io/File;)Ljava/io/File;");
                mids$[mid_delete_54c6a16a] = env->getMethodID(cls, "delete", "()Z");
                mids$[mid_deleteOnExit_54c6a166] = env->getMethodID(cls, "deleteOnExit", "()V");
                mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
                mids$[mid_exists_54c6a16a] = env->getMethodID(cls, "exists", "()Z");
                mids$[mid_getAbsoluteFile_a8eb7bbe] = env->getMethodID(cls, "getAbsoluteFile", "()Ljava/io/File;");
                mids$[mid_getAbsolutePath_14c7b5c5] = env->getMethodID(cls, "getAbsolutePath", "()Ljava/lang/String;");
                mids$[mid_getCanonicalFile_a8eb7bbe] = env->getMethodID(cls, "getCanonicalFile", "()Ljava/io/File;");
                mids$[mid_getCanonicalPath_14c7b5c5] = env->getMethodID(cls, "getCanonicalPath", "()Ljava/lang/String;");
                mids$[mid_getFreeSpace_54c6a17a] = env->getMethodID(cls, "getFreeSpace", "()J");
                mids$[mid_getName_14c7b5c5] = env->getMethodID(cls, "getName", "()Ljava/lang/String;");
                mids$[mid_getParent_14c7b5c5] = env->getMethodID(cls, "getParent", "()Ljava/lang/String;");
                mids$[mid_getParentFile_a8eb7bbe] = env->getMethodID(cls, "getParentFile", "()Ljava/io/File;");
                mids$[mid_getPath_14c7b5c5] = env->getMethodID(cls, "getPath", "()Ljava/lang/String;");
                mids$[mid_getTotalSpace_54c6a17a] = env->getMethodID(cls, "getTotalSpace", "()J");
                mids$[mid_getUsableSpace_54c6a17a] = env->getMethodID(cls, "getUsableSpace", "()J");
                mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
                mids$[mid_isAbsolute_54c6a16a] = env->getMethodID(cls, "isAbsolute", "()Z");
                mids$[mid_isDirectory_54c6a16a] = env->getMethodID(cls, "isDirectory", "()Z");
                mids$[mid_isFile_54c6a16a] = env->getMethodID(cls, "isFile", "()Z");
                mids$[mid_isHidden_54c6a16a] = env->getMethodID(cls, "isHidden", "()Z");
                mids$[mid_lastModified_54c6a17a] = env->getMethodID(cls, "lastModified", "()J");
                mids$[mid_length_54c6a17a] = env->getMethodID(cls, "length", "()J");
                mids$[mid_list_2e6d5245] = env->getMethodID(cls, "list", "()[Ljava/lang/String;");
                mids$[mid_list_4f9187f3] = env->getMethodID(cls, "list", "(Ljava/io/FilenameFilter;)[Ljava/lang/String;");
                mids$[mid_listFiles_5e6eeba2] = env->getMethodID(cls, "listFiles", "()[Ljava/io/File;");
                mids$[mid_listFiles_3e6357e7] = env->getMethodID(cls, "listFiles", "(Ljava/io/FileFilter;)[Ljava/io/File;");
                mids$[mid_listFiles_e6205e68] = env->getMethodID(cls, "listFiles", "(Ljava/io/FilenameFilter;)[Ljava/io/File;");
                mids$[mid_listRoots_5e6eeba2] = env->getStaticMethodID(cls, "listRoots", "()[Ljava/io/File;");
                mids$[mid_mkdir_54c6a16a] = env->getMethodID(cls, "mkdir", "()Z");
                mids$[mid_mkdirs_54c6a16a] = env->getMethodID(cls, "mkdirs", "()Z");
                mids$[mid_renameTo_c3dacf5b] = env->getMethodID(cls, "renameTo", "(Ljava/io/File;)Z");
                mids$[mid_setExecutable_bb0c7673] = env->getMethodID(cls, "setExecutable", "(Z)Z");
                mids$[mid_setExecutable_46f2e2c8] = env->getMethodID(cls, "setExecutable", "(ZZ)Z");
                mids$[mid_setLastModified_0ee6df23] = env->getMethodID(cls, "setLastModified", "(J)Z");
                mids$[mid_setReadOnly_54c6a16a] = env->getMethodID(cls, "setReadOnly", "()Z");
                mids$[mid_setReadable_bb0c7673] = env->getMethodID(cls, "setReadable", "(Z)Z");
                mids$[mid_setReadable_46f2e2c8] = env->getMethodID(cls, "setReadable", "(ZZ)Z");
                mids$[mid_setWritable_bb0c7673] = env->getMethodID(cls, "setWritable", "(Z)Z");
                mids$[mid_setWritable_46f2e2c8] = env->getMethodID(cls, "setWritable", "(ZZ)Z");
                mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

                class$ = (::java::lang::Class *) new JObject(cls);
                cls = (jclass) class$->this$;

                pathSeparator = new ::java::lang::String(env->getStaticObjectField(cls, "pathSeparator", "Ljava/lang/String;"));
                pathSeparatorChar = env->getStaticCharField(cls, "pathSeparatorChar");
                separator = new ::java::lang::String(env->getStaticObjectField(cls, "separator", "Ljava/lang/String;"));
                separatorChar = env->getStaticCharField(cls, "separatorChar");
            }
            return (jclass) class$->this$;
        }

        File::File(const ::java::lang::String & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}

        File::File(const ::java::lang::String & a0, const ::java::lang::String & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_4a264742, a0.this$, a1.this$)) {}

        File::File(const File & a0, const ::java::lang::String & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_b8789389, a0.this$, a1.this$)) {}

        jboolean File::canExecute() const
        {
            return env->callBooleanMethod(this$, mids$[mid_canExecute_54c6a16a]);
        }

        jboolean File::canRead() const
        {
            return env->callBooleanMethod(this$, mids$[mid_canRead_54c6a16a]);
        }

        jboolean File::canWrite() const
        {
            return env->callBooleanMethod(this$, mids$[mid_canWrite_54c6a16a]);
        }

        jint File::compareTo(const ::java::lang::Object & a0) const
        {
            return env->callIntMethod(this$, mids$[mid_compareTo_290588f1], a0.this$);
        }

        jint File::compareTo(const File & a0) const
        {
            return env->callIntMethod(this$, mids$[mid_compareTo_c3dacf48], a0.this$);
        }

        jboolean File::createNewFile() const
        {
            return env->callBooleanMethod(this$, mids$[mid_createNewFile_54c6a16a]);
        }

        File File::createTempFile(const ::java::lang::String & a0, const ::java::lang::String & a1)
        {
            jclass cls = initializeClass();
            return File(env->callStaticObjectMethod(cls, mids$[mid_createTempFile_c112cd9a], a0.this$, a1.this$));
        }

        File File::createTempFile(const ::java::lang::String & a0, const ::java::lang::String & a1, const File & a2)
        {
            jclass cls = initializeClass();
            return File(env->callStaticObjectMethod(cls, mids$[mid_createTempFile_a168e209], a0.this$, a1.this$, a2.this$));
        }

        jboolean File::delete$() const
        {
            return env->callBooleanMethod(this$, mids$[mid_delete_54c6a16a]);
        }

        void File::deleteOnExit() const
        {
            env->callVoidMethod(this$, mids$[mid_deleteOnExit_54c6a166]);
        }

        jboolean File::equals(const ::java::lang::Object & a0) const
        {
            return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        jboolean File::exists() const
        {
            return env->callBooleanMethod(this$, mids$[mid_exists_54c6a16a]);
        }

        File File::getAbsoluteFile() const
        {
            return File(env->callObjectMethod(this$, mids$[mid_getAbsoluteFile_a8eb7bbe]));
        }

        ::java::lang::String File::getAbsolutePath() const
        {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getAbsolutePath_14c7b5c5]));
        }

        File File::getCanonicalFile() const
        {
            return File(env->callObjectMethod(this$, mids$[mid_getCanonicalFile_a8eb7bbe]));
        }

        ::java::lang::String File::getCanonicalPath() const
        {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getCanonicalPath_14c7b5c5]));
        }

        jlong File::getFreeSpace() const
        {
            return env->callLongMethod(this$, mids$[mid_getFreeSpace_54c6a17a]);
        }

        ::java::lang::String File::getName() const
        {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getName_14c7b5c5]));
        }

        ::java::lang::String File::getParent() const
        {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getParent_14c7b5c5]));
        }

        File File::getParentFile() const
        {
            return File(env->callObjectMethod(this$, mids$[mid_getParentFile_a8eb7bbe]));
        }

        ::java::lang::String File::getPath() const
        {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getPath_14c7b5c5]));
        }

        jlong File::getTotalSpace() const
        {
            return env->callLongMethod(this$, mids$[mid_getTotalSpace_54c6a17a]);
        }

        jlong File::getUsableSpace() const
        {
            return env->callLongMethod(this$, mids$[mid_getUsableSpace_54c6a17a]);
        }

        jint File::hashCode() const
        {
            return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        jboolean File::isAbsolute() const
        {
            return env->callBooleanMethod(this$, mids$[mid_isAbsolute_54c6a16a]);
        }

        jboolean File::isDirectory() const
        {
            return env->callBooleanMethod(this$, mids$[mid_isDirectory_54c6a16a]);
        }

        jboolean File::isFile() const
        {
            return env->callBooleanMethod(this$, mids$[mid_isFile_54c6a16a]);
        }

        jboolean File::isHidden() const
        {
            return env->callBooleanMethod(this$, mids$[mid_isHidden_54c6a16a]);
        }

        jlong File::lastModified() const
        {
            return env->callLongMethod(this$, mids$[mid_lastModified_54c6a17a]);
        }

        jlong File::length() const
        {
            return env->callLongMethod(this$, mids$[mid_length_54c6a17a]);
        }

        JArray< ::java::lang::String > File::list() const
        {
            return JArray< ::java::lang::String >(env->callObjectMethod(this$, mids$[mid_list_2e6d5245]));
        }

        JArray< ::java::lang::String > File::list(const ::java::io::FilenameFilter & a0) const
        {
            return JArray< ::java::lang::String >(env->callObjectMethod(this$, mids$[mid_list_4f9187f3], a0.this$));
        }

        JArray< File > File::listFiles() const
        {
            return JArray< File >(env->callObjectMethod(this$, mids$[mid_listFiles_5e6eeba2]));
        }

        JArray< File > File::listFiles(const ::java::io::FileFilter & a0) const
        {
            return JArray< File >(env->callObjectMethod(this$, mids$[mid_listFiles_3e6357e7], a0.this$));
        }

        JArray< File > File::listFiles(const ::java::io::FilenameFilter & a0) const
        {
            return JArray< File >(env->callObjectMethod(this$, mids$[mid_listFiles_e6205e68], a0.this$));
        }

        JArray< File > File::listRoots()
        {
            jclass cls = initializeClass();
            return JArray< File >(env->callStaticObjectMethod(cls, mids$[mid_listRoots_5e6eeba2]));
        }

        jboolean File::mkdir() const
        {
            return env->callBooleanMethod(this$, mids$[mid_mkdir_54c6a16a]);
        }

        jboolean File::mkdirs() const
        {
            return env->callBooleanMethod(this$, mids$[mid_mkdirs_54c6a16a]);
        }

        jboolean File::renameTo(const File & a0) const
        {
            return env->callBooleanMethod(this$, mids$[mid_renameTo_c3dacf5b], a0.this$);
        }

        jboolean File::setExecutable(jboolean a0) const
        {
            return env->callBooleanMethod(this$, mids$[mid_setExecutable_bb0c7673], a0);
        }

        jboolean File::setExecutable(jboolean a0, jboolean a1) const
        {
            return env->callBooleanMethod(this$, mids$[mid_setExecutable_46f2e2c8], a0, a1);
        }

        jboolean File::setLastModified(jlong a0) const
        {
            return env->callBooleanMethod(this$, mids$[mid_setLastModified_0ee6df23], a0);
        }

        jboolean File::setReadOnly() const
        {
            return env->callBooleanMethod(this$, mids$[mid_setReadOnly_54c6a16a]);
        }

        jboolean File::setReadable(jboolean a0) const
        {
            return env->callBooleanMethod(this$, mids$[mid_setReadable_bb0c7673], a0);
        }

        jboolean File::setReadable(jboolean a0, jboolean a1) const
        {
            return env->callBooleanMethod(this$, mids$[mid_setReadable_46f2e2c8], a0, a1);
        }

        jboolean File::setWritable(jboolean a0) const
        {
            return env->callBooleanMethod(this$, mids$[mid_setWritable_bb0c7673], a0);
        }

        jboolean File::setWritable(jboolean a0, jboolean a1) const
        {
            return env->callBooleanMethod(this$, mids$[mid_setWritable_46f2e2c8], a0, a1);
        }

        ::java::lang::String File::toString() const
        {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }
    }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
    namespace io {
        static PyObject *t_File_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_File_instance_(PyTypeObject *type, PyObject *arg);
        static int t_File_init_(t_File *self, PyObject *args, PyObject *kwds);
        static PyObject *t_File_canExecute(t_File *self);
        static PyObject *t_File_canRead(t_File *self);
        static PyObject *t_File_canWrite(t_File *self);
        static PyObject *t_File_compareTo(t_File *self, PyObject *args);
        static PyObject *t_File_createNewFile(t_File *self);
        static PyObject *t_File_createTempFile(PyTypeObject *type, PyObject *args);
        static PyObject *t_File_delete(t_File *self);
        static PyObject *t_File_deleteOnExit(t_File *self);
        static PyObject *t_File_equals(t_File *self, PyObject *args);
        static PyObject *t_File_exists(t_File *self);
        static PyObject *t_File_getAbsoluteFile(t_File *self);
        static PyObject *t_File_getAbsolutePath(t_File *self);
        static PyObject *t_File_getCanonicalFile(t_File *self);
        static PyObject *t_File_getCanonicalPath(t_File *self);
        static PyObject *t_File_getFreeSpace(t_File *self);
        static PyObject *t_File_getName(t_File *self);
        static PyObject *t_File_getParent(t_File *self);
        static PyObject *t_File_getParentFile(t_File *self);
        static PyObject *t_File_getPath(t_File *self);
        static PyObject *t_File_getTotalSpace(t_File *self);
        static PyObject *t_File_getUsableSpace(t_File *self);
        static PyObject *t_File_hashCode(t_File *self, PyObject *args);
        static PyObject *t_File_isAbsolute(t_File *self);
        static PyObject *t_File_isDirectory(t_File *self);
        static PyObject *t_File_isFile(t_File *self);
        static PyObject *t_File_isHidden(t_File *self);
        static PyObject *t_File_lastModified(t_File *self);
        static PyObject *t_File_length(t_File *self);
        static PyObject *t_File_list(t_File *self, PyObject *args);
        static PyObject *t_File_listFiles(t_File *self, PyObject *args);
        static PyObject *t_File_listRoots(PyTypeObject *type);
        static PyObject *t_File_mkdir(t_File *self);
        static PyObject *t_File_mkdirs(t_File *self);
        static PyObject *t_File_renameTo(t_File *self, PyObject *arg);
        static PyObject *t_File_setExecutable(t_File *self, PyObject *args);
        static PyObject *t_File_setLastModified(t_File *self, PyObject *arg);
        static PyObject *t_File_setReadOnly(t_File *self);
        static PyObject *t_File_setReadable(t_File *self, PyObject *args);
        static PyObject *t_File_setWritable(t_File *self, PyObject *args);
        static PyObject *t_File_toString(t_File *self, PyObject *args);
        static PyObject *t_File_get__absolute(t_File *self, void *data);
        static PyObject *t_File_get__absoluteFile(t_File *self, void *data);
        static PyObject *t_File_get__absolutePath(t_File *self, void *data);
        static PyObject *t_File_get__canonicalFile(t_File *self, void *data);
        static PyObject *t_File_get__canonicalPath(t_File *self, void *data);
        static PyObject *t_File_get__directory(t_File *self, void *data);
        static int t_File_set__executable(t_File *self, PyObject *arg, void *data);
        static PyObject *t_File_get__file(t_File *self, void *data);
        static PyObject *t_File_get__freeSpace(t_File *self, void *data);
        static PyObject *t_File_get__hidden(t_File *self, void *data);
        static PyObject *t_File_get__name(t_File *self, void *data);
        static PyObject *t_File_get__parent(t_File *self, void *data);
        static PyObject *t_File_get__parentFile(t_File *self, void *data);
        static PyObject *t_File_get__path(t_File *self, void *data);
        static int t_File_set__readable(t_File *self, PyObject *arg, void *data);
        static PyObject *t_File_get__totalSpace(t_File *self, void *data);
        static PyObject *t_File_get__usableSpace(t_File *self, void *data);
        static int t_File_set__writable(t_File *self, PyObject *arg, void *data);
        static PyGetSetDef t_File__fields_[] = {
            DECLARE_GET_FIELD(t_File, absolute),
            DECLARE_GET_FIELD(t_File, absoluteFile),
            DECLARE_GET_FIELD(t_File, absolutePath),
            DECLARE_GET_FIELD(t_File, canonicalFile),
            DECLARE_GET_FIELD(t_File, canonicalPath),
            DECLARE_GET_FIELD(t_File, directory),
            DECLARE_SET_FIELD(t_File, executable),
            DECLARE_GET_FIELD(t_File, file),
            DECLARE_GET_FIELD(t_File, freeSpace),
            DECLARE_GET_FIELD(t_File, hidden),
            DECLARE_GET_FIELD(t_File, name),
            DECLARE_GET_FIELD(t_File, parent),
            DECLARE_GET_FIELD(t_File, parentFile),
            DECLARE_GET_FIELD(t_File, path),
            DECLARE_SET_FIELD(t_File, readable),
            DECLARE_GET_FIELD(t_File, totalSpace),
            DECLARE_GET_FIELD(t_File, usableSpace),
            DECLARE_SET_FIELD(t_File, writable),
            { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_File__methods_[] = {
            DECLARE_METHOD(t_File, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_File, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_File, canExecute, METH_NOARGS),
            DECLARE_METHOD(t_File, canRead, METH_NOARGS),
            DECLARE_METHOD(t_File, canWrite, METH_NOARGS),
            DECLARE_METHOD(t_File, compareTo, METH_VARARGS),
            DECLARE_METHOD(t_File, createNewFile, METH_NOARGS),
            DECLARE_METHOD(t_File, createTempFile, METH_VARARGS | METH_CLASS),
            DECLARE_METHOD(t_File, delete, METH_NOARGS),
            DECLARE_METHOD(t_File, deleteOnExit, METH_NOARGS),
            DECLARE_METHOD(t_File, equals, METH_VARARGS),
            DECLARE_METHOD(t_File, exists, METH_NOARGS),
            DECLARE_METHOD(t_File, getAbsoluteFile, METH_NOARGS),
            DECLARE_METHOD(t_File, getAbsolutePath, METH_NOARGS),
            DECLARE_METHOD(t_File, getCanonicalFile, METH_NOARGS),
            DECLARE_METHOD(t_File, getCanonicalPath, METH_NOARGS),
            DECLARE_METHOD(t_File, getFreeSpace, METH_NOARGS),
            DECLARE_METHOD(t_File, getName, METH_NOARGS),
            DECLARE_METHOD(t_File, getParent, METH_NOARGS),
            DECLARE_METHOD(t_File, getParentFile, METH_NOARGS),
            DECLARE_METHOD(t_File, getPath, METH_NOARGS),
            DECLARE_METHOD(t_File, getTotalSpace, METH_NOARGS),
            DECLARE_METHOD(t_File, getUsableSpace, METH_NOARGS),
            DECLARE_METHOD(t_File, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_File, isAbsolute, METH_NOARGS),
            DECLARE_METHOD(t_File, isDirectory, METH_NOARGS),
            DECLARE_METHOD(t_File, isFile, METH_NOARGS),
            DECLARE_METHOD(t_File, isHidden, METH_NOARGS),
            DECLARE_METHOD(t_File, lastModified, METH_NOARGS),
            DECLARE_METHOD(t_File, length, METH_NOARGS),
            DECLARE_METHOD(t_File, list, METH_VARARGS),
            DECLARE_METHOD(t_File, listFiles, METH_VARARGS),
            DECLARE_METHOD(t_File, listRoots, METH_NOARGS | METH_CLASS),
            DECLARE_METHOD(t_File, mkdir, METH_NOARGS),
            DECLARE_METHOD(t_File, mkdirs, METH_NOARGS),
            DECLARE_METHOD(t_File, renameTo, METH_O),
            DECLARE_METHOD(t_File, setExecutable, METH_VARARGS),
            DECLARE_METHOD(t_File, setLastModified, METH_O),
            DECLARE_METHOD(t_File, setReadOnly, METH_NOARGS),
            DECLARE_METHOD(t_File, setReadable, METH_VARARGS),
            DECLARE_METHOD(t_File, setWritable, METH_VARARGS),
            DECLARE_METHOD(t_File, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(File, t_File, ::java::lang::Object, File, t_File_init_, 0, 0, t_File__fields_, 0, 0);

        void t_File::install(PyObject *module)
        {
            installType(&PY_TYPE(File), module, "File", 0);
        }

        void t_File::initialize(PyObject *module)
        {
            PyDict_SetItemString(PY_TYPE(File).tp_dict, "class_", make_descriptor(File::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(File).tp_dict, "wrapfn_", make_descriptor(t_File::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(File).tp_dict, "boxfn_", make_descriptor(boxObject));
            File::initializeClass();
            PyDict_SetItemString(PY_TYPE(File).tp_dict, "pathSeparator", make_descriptor(j2p(*File::pathSeparator)));
            PyDict_SetItemString(PY_TYPE(File).tp_dict, "pathSeparatorChar", make_descriptor(File::pathSeparatorChar));
            PyDict_SetItemString(PY_TYPE(File).tp_dict, "separator", make_descriptor(j2p(*File::separator)));
            PyDict_SetItemString(PY_TYPE(File).tp_dict, "separatorChar", make_descriptor(File::separatorChar));
        }

        static PyObject *t_File_cast_(PyTypeObject *type, PyObject *arg)
        {
            if (!(arg = castCheck(arg, File::initializeClass, 1)))
                return NULL;
            return t_File::wrap_Object(File(((t_File *) arg)->object.this$));
        }
        static PyObject *t_File_instance_(PyTypeObject *type, PyObject *arg)
        {
            if (!castCheck(arg, File::initializeClass, 0))
                Py_RETURN_FALSE;
            Py_RETURN_TRUE;
        }

        static int t_File_init_(t_File *self, PyObject *args, PyObject *kwds)
        {
            switch (PyTuple_GET_SIZE(args)) {
              case 1:
                {
                    ::java::lang::String a0((jobject) NULL);
                    File object((jobject) NULL);

                    if (!parseArgs(args, "s", &a0))
                    {
                        INT_CALL(object = File(a0));
                        self->object = object;
                        break;
                    }
                }
                goto err;
              case 2:
                {
                    ::java::lang::String a0((jobject) NULL);
                    ::java::lang::String a1((jobject) NULL);
                    File object((jobject) NULL);

                    if (!parseArgs(args, "ss", &a0, &a1))
                    {
                        INT_CALL(object = File(a0, a1));
                        self->object = object;
                        break;
                    }
                }
                {
                    File a0((jobject) NULL);
                    ::java::lang::String a1((jobject) NULL);
                    File object((jobject) NULL);

                    if (!parseArgs(args, "ks", File::initializeClass, &a0, &a1))
                    {
                        INT_CALL(object = File(a0, a1));
                        self->object = object;
                        break;
                    }
                }
              default:
              err:
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
            }

            return 0;
        }

        static PyObject *t_File_canExecute(t_File *self)
        {
            jboolean result;
            OBJ_CALL(result = self->object.canExecute());
            Py_RETURN_BOOL(result);
        }

        static PyObject *t_File_canRead(t_File *self)
        {
            jboolean result;
            OBJ_CALL(result = self->object.canRead());
            Py_RETURN_BOOL(result);
        }

        static PyObject *t_File_canWrite(t_File *self)
        {
            jboolean result;
            OBJ_CALL(result = self->object.canWrite());
            Py_RETURN_BOOL(result);
        }

        static PyObject *t_File_compareTo(t_File *self, PyObject *args)
        {
            switch (PyTuple_GET_SIZE(args)) {
              case 1:
                {
                    ::java::lang::Object a0((jobject) NULL);
                    jint result;

                    if (!parseArgs(args, "o", &a0))
                    {
                        OBJ_CALL(result = self->object.compareTo(a0));
                        return PyInt_FromLong((long) result);
                    }
                }
                {
                    File a0((jobject) NULL);
                    jint result;

                    if (!parseArgs(args, "k", File::initializeClass, &a0))
                    {
                        OBJ_CALL(result = self->object.compareTo(a0));
                        return PyInt_FromLong((long) result);
                    }
                }
            }

            PyErr_SetArgsError((PyObject *) self, "compareTo", args);
            return NULL;
        }

        static PyObject *t_File_createNewFile(t_File *self)
        {
            jboolean result;
            OBJ_CALL(result = self->object.createNewFile());
            Py_RETURN_BOOL(result);
        }

        static PyObject *t_File_createTempFile(PyTypeObject *type, PyObject *args)
        {
            switch (PyTuple_GET_SIZE(args)) {
              case 2:
                {
                    ::java::lang::String a0((jobject) NULL);
                    ::java::lang::String a1((jobject) NULL);
                    File result((jobject) NULL);

                    if (!parseArgs(args, "ss", &a0, &a1))
                    {
                        OBJ_CALL(result = ::java::io::File::createTempFile(a0, a1));
                        return t_File::wrap_Object(result);
                    }
                }
                break;
              case 3:
                {
                    ::java::lang::String a0((jobject) NULL);
                    ::java::lang::String a1((jobject) NULL);
                    File a2((jobject) NULL);
                    File result((jobject) NULL);

                    if (!parseArgs(args, "ssk", File::initializeClass, &a0, &a1, &a2))
                    {
                        OBJ_CALL(result = ::java::io::File::createTempFile(a0, a1, a2));
                        return t_File::wrap_Object(result);
                    }
                }
            }

            PyErr_SetArgsError(type, "createTempFile", args);
            return NULL;
        }

        static PyObject *t_File_delete(t_File *self)
        {
            jboolean result;
            OBJ_CALL(result = self->object.delete$());
            Py_RETURN_BOOL(result);
        }

        static PyObject *t_File_deleteOnExit(t_File *self)
        {
            OBJ_CALL(self->object.deleteOnExit());
            Py_RETURN_NONE;
        }

        static PyObject *t_File_equals(t_File *self, PyObject *args)
        {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
                OBJ_CALL(result = self->object.equals(a0));
                Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(File), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_File_exists(t_File *self)
        {
            jboolean result;
            OBJ_CALL(result = self->object.exists());
            Py_RETURN_BOOL(result);
        }

        static PyObject *t_File_getAbsoluteFile(t_File *self)
        {
            File result((jobject) NULL);
            OBJ_CALL(result = self->object.getAbsoluteFile());
            return t_File::wrap_Object(result);
        }

        static PyObject *t_File_getAbsolutePath(t_File *self)
        {
            ::java::lang::String result((jobject) NULL);
            OBJ_CALL(result = self->object.getAbsolutePath());
            return j2p(result);
        }

        static PyObject *t_File_getCanonicalFile(t_File *self)
        {
            File result((jobject) NULL);
            OBJ_CALL(result = self->object.getCanonicalFile());
            return t_File::wrap_Object(result);
        }

        static PyObject *t_File_getCanonicalPath(t_File *self)
        {
            ::java::lang::String result((jobject) NULL);
            OBJ_CALL(result = self->object.getCanonicalPath());
            return j2p(result);
        }

        static PyObject *t_File_getFreeSpace(t_File *self)
        {
            jlong result;
            OBJ_CALL(result = self->object.getFreeSpace());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_File_getName(t_File *self)
        {
            ::java::lang::String result((jobject) NULL);
            OBJ_CALL(result = self->object.getName());
            return j2p(result);
        }

        static PyObject *t_File_getParent(t_File *self)
        {
            ::java::lang::String result((jobject) NULL);
            OBJ_CALL(result = self->object.getParent());
            return j2p(result);
        }

        static PyObject *t_File_getParentFile(t_File *self)
        {
            File result((jobject) NULL);
            OBJ_CALL(result = self->object.getParentFile());
            return t_File::wrap_Object(result);
        }

        static PyObject *t_File_getPath(t_File *self)
        {
            ::java::lang::String result((jobject) NULL);
            OBJ_CALL(result = self->object.getPath());
            return j2p(result);
        }

        static PyObject *t_File_getTotalSpace(t_File *self)
        {
            jlong result;
            OBJ_CALL(result = self->object.getTotalSpace());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_File_getUsableSpace(t_File *self)
        {
            jlong result;
            OBJ_CALL(result = self->object.getUsableSpace());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_File_hashCode(t_File *self, PyObject *args)
        {
            jint result;

            if (!parseArgs(args, ""))
            {
                OBJ_CALL(result = self->object.hashCode());
                return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(File), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_File_isAbsolute(t_File *self)
        {
            jboolean result;
            OBJ_CALL(result = self->object.isAbsolute());
            Py_RETURN_BOOL(result);
        }

        static PyObject *t_File_isDirectory(t_File *self)
        {
            jboolean result;
            OBJ_CALL(result = self->object.isDirectory());
            Py_RETURN_BOOL(result);
        }

        static PyObject *t_File_isFile(t_File *self)
        {
            jboolean result;
            OBJ_CALL(result = self->object.isFile());
            Py_RETURN_BOOL(result);
        }

        static PyObject *t_File_isHidden(t_File *self)
        {
            jboolean result;
            OBJ_CALL(result = self->object.isHidden());
            Py_RETURN_BOOL(result);
        }

        static PyObject *t_File_lastModified(t_File *self)
        {
            jlong result;
            OBJ_CALL(result = self->object.lastModified());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_File_length(t_File *self)
        {
            jlong result;
            OBJ_CALL(result = self->object.length());
            return PyLong_FromLongLong((PY_LONG_LONG) result);
        }

        static PyObject *t_File_list(t_File *self, PyObject *args)
        {
            switch (PyTuple_GET_SIZE(args)) {
              case 0:
                {
                    JArray< ::java::lang::String > result((jobject) NULL);
                    OBJ_CALL(result = self->object.list());
                    return JArray<jstring>(result.this$).wrap();
                }
                break;
              case 1:
                {
                    ::java::io::FilenameFilter a0((jobject) NULL);
                    JArray< ::java::lang::String > result((jobject) NULL);

                    if (!parseArgs(args, "k", ::java::io::FilenameFilter::initializeClass, &a0))
                    {
                        OBJ_CALL(result = self->object.list(a0));
                        return JArray<jstring>(result.this$).wrap();
                    }
                }
            }

            PyErr_SetArgsError((PyObject *) self, "list", args);
            return NULL;
        }

        static PyObject *t_File_listFiles(t_File *self, PyObject *args)
        {
            switch (PyTuple_GET_SIZE(args)) {
              case 0:
                {
                    JArray< File > result((jobject) NULL);
                    OBJ_CALL(result = self->object.listFiles());
                    return JArray<jobject>(result.this$).wrap(t_File::wrap_jobject);
                }
                break;
              case 1:
                {
                    ::java::io::FileFilter a0((jobject) NULL);
                    JArray< File > result((jobject) NULL);

                    if (!parseArgs(args, "k", ::java::io::FileFilter::initializeClass, &a0))
                    {
                        OBJ_CALL(result = self->object.listFiles(a0));
                        return JArray<jobject>(result.this$).wrap(t_File::wrap_jobject);
                    }
                }
                {
                    ::java::io::FilenameFilter a0((jobject) NULL);
                    JArray< File > result((jobject) NULL);

                    if (!parseArgs(args, "k", ::java::io::FilenameFilter::initializeClass, &a0))
                    {
                        OBJ_CALL(result = self->object.listFiles(a0));
                        return JArray<jobject>(result.this$).wrap(t_File::wrap_jobject);
                    }
                }
            }

            PyErr_SetArgsError((PyObject *) self, "listFiles", args);
            return NULL;
        }

        static PyObject *t_File_listRoots(PyTypeObject *type)
        {
            JArray< File > result((jobject) NULL);
            OBJ_CALL(result = ::java::io::File::listRoots());
            return JArray<jobject>(result.this$).wrap(t_File::wrap_jobject);
        }

        static PyObject *t_File_mkdir(t_File *self)
        {
            jboolean result;
            OBJ_CALL(result = self->object.mkdir());
            Py_RETURN_BOOL(result);
        }

        static PyObject *t_File_mkdirs(t_File *self)
        {
            jboolean result;
            OBJ_CALL(result = self->object.mkdirs());
            Py_RETURN_BOOL(result);
        }

        static PyObject *t_File_renameTo(t_File *self, PyObject *arg)
        {
            File a0((jobject) NULL);
            jboolean result;

            if (!parseArg(arg, "k", File::initializeClass, &a0))
            {
                OBJ_CALL(result = self->object.renameTo(a0));
                Py_RETURN_BOOL(result);
            }

            PyErr_SetArgsError((PyObject *) self, "renameTo", arg);
            return NULL;
        }

        static PyObject *t_File_setExecutable(t_File *self, PyObject *args)
        {
            switch (PyTuple_GET_SIZE(args)) {
              case 1:
                {
                    jboolean a0;
                    jboolean result;

                    if (!parseArgs(args, "Z", &a0))
                    {
                        OBJ_CALL(result = self->object.setExecutable(a0));
                        Py_RETURN_BOOL(result);
                    }
                }
                break;
              case 2:
                {
                    jboolean a0;
                    jboolean a1;
                    jboolean result;

                    if (!parseArgs(args, "ZZ", &a0, &a1))
                    {
                        OBJ_CALL(result = self->object.setExecutable(a0, a1));
                        Py_RETURN_BOOL(result);
                    }
                }
            }

            PyErr_SetArgsError((PyObject *) self, "setExecutable", args);
            return NULL;
        }

        static PyObject *t_File_setLastModified(t_File *self, PyObject *arg)
        {
            jlong a0;
            jboolean result;

            if (!parseArg(arg, "J", &a0))
            {
                OBJ_CALL(result = self->object.setLastModified(a0));
                Py_RETURN_BOOL(result);
            }

            PyErr_SetArgsError((PyObject *) self, "setLastModified", arg);
            return NULL;
        }

        static PyObject *t_File_setReadOnly(t_File *self)
        {
            jboolean result;
            OBJ_CALL(result = self->object.setReadOnly());
            Py_RETURN_BOOL(result);
        }

        static PyObject *t_File_setReadable(t_File *self, PyObject *args)
        {
            switch (PyTuple_GET_SIZE(args)) {
              case 1:
                {
                    jboolean a0;
                    jboolean result;

                    if (!parseArgs(args, "Z", &a0))
                    {
                        OBJ_CALL(result = self->object.setReadable(a0));
                        Py_RETURN_BOOL(result);
                    }
                }
                break;
              case 2:
                {
                    jboolean a0;
                    jboolean a1;
                    jboolean result;

                    if (!parseArgs(args, "ZZ", &a0, &a1))
                    {
                        OBJ_CALL(result = self->object.setReadable(a0, a1));
                        Py_RETURN_BOOL(result);
                    }
                }
            }

            PyErr_SetArgsError((PyObject *) self, "setReadable", args);
            return NULL;
        }

        static PyObject *t_File_setWritable(t_File *self, PyObject *args)
        {
            switch (PyTuple_GET_SIZE(args)) {
              case 1:
                {
                    jboolean a0;
                    jboolean result;

                    if (!parseArgs(args, "Z", &a0))
                    {
                        OBJ_CALL(result = self->object.setWritable(a0));
                        Py_RETURN_BOOL(result);
                    }
                }
                break;
              case 2:
                {
                    jboolean a0;
                    jboolean a1;
                    jboolean result;

                    if (!parseArgs(args, "ZZ", &a0, &a1))
                    {
                        OBJ_CALL(result = self->object.setWritable(a0, a1));
                        Py_RETURN_BOOL(result);
                    }
                }
            }

            PyErr_SetArgsError((PyObject *) self, "setWritable", args);
            return NULL;
        }

        static PyObject *t_File_toString(t_File *self, PyObject *args)
        {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
                OBJ_CALL(result = self->object.toString());
                return j2p(result);
            }

            return callSuper(&PY_TYPE(File), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_File_get__absolute(t_File *self, void *data)
        {
            jboolean value;
            OBJ_CALL(value = self->object.isAbsolute());
            Py_RETURN_BOOL(value);
        }

        static PyObject *t_File_get__absoluteFile(t_File *self, void *data)
        {
            File value((jobject) NULL);
            OBJ_CALL(value = self->object.getAbsoluteFile());
            return t_File::wrap_Object(value);
        }

        static PyObject *t_File_get__absolutePath(t_File *self, void *data)
        {
            ::java::lang::String value((jobject) NULL);
            OBJ_CALL(value = self->object.getAbsolutePath());
            return j2p(value);
        }

        static PyObject *t_File_get__canonicalFile(t_File *self, void *data)
        {
            File value((jobject) NULL);
            OBJ_CALL(value = self->object.getCanonicalFile());
            return t_File::wrap_Object(value);
        }

        static PyObject *t_File_get__canonicalPath(t_File *self, void *data)
        {
            ::java::lang::String value((jobject) NULL);
            OBJ_CALL(value = self->object.getCanonicalPath());
            return j2p(value);
        }

        static PyObject *t_File_get__directory(t_File *self, void *data)
        {
            jboolean value;
            OBJ_CALL(value = self->object.isDirectory());
            Py_RETURN_BOOL(value);
        }

        static int t_File_set__executable(t_File *self, PyObject *arg, void *data)
        {
            {
                jboolean value;
                if (!parseArg(arg, "Z", &value))
                {
                    INT_CALL(self->object.setExecutable(value));
                    return 0;
                }
            }
            PyErr_SetArgsError((PyObject *) self, "executable", arg);
            return -1;
        }

        static PyObject *t_File_get__file(t_File *self, void *data)
        {
            jboolean value;
            OBJ_CALL(value = self->object.isFile());
            Py_RETURN_BOOL(value);
        }

        static PyObject *t_File_get__freeSpace(t_File *self, void *data)
        {
            jlong value;
            OBJ_CALL(value = self->object.getFreeSpace());
            return PyLong_FromLongLong((PY_LONG_LONG) value);
        }

        static PyObject *t_File_get__hidden(t_File *self, void *data)
        {
            jboolean value;
            OBJ_CALL(value = self->object.isHidden());
            Py_RETURN_BOOL(value);
        }

        static PyObject *t_File_get__name(t_File *self, void *data)
        {
            ::java::lang::String value((jobject) NULL);
            OBJ_CALL(value = self->object.getName());
            return j2p(value);
        }

        static PyObject *t_File_get__parent(t_File *self, void *data)
        {
            ::java::lang::String value((jobject) NULL);
            OBJ_CALL(value = self->object.getParent());
            return j2p(value);
        }

        static PyObject *t_File_get__parentFile(t_File *self, void *data)
        {
            File value((jobject) NULL);
            OBJ_CALL(value = self->object.getParentFile());
            return t_File::wrap_Object(value);
        }

        static PyObject *t_File_get__path(t_File *self, void *data)
        {
            ::java::lang::String value((jobject) NULL);
            OBJ_CALL(value = self->object.getPath());
            return j2p(value);
        }

        static int t_File_set__readable(t_File *self, PyObject *arg, void *data)
        {
            {
                jboolean value;
                if (!parseArg(arg, "Z", &value))
                {
                    INT_CALL(self->object.setReadable(value));
                    return 0;
                }
            }
            PyErr_SetArgsError((PyObject *) self, "readable", arg);
            return -1;
        }

        static PyObject *t_File_get__totalSpace(t_File *self, void *data)
        {
            jlong value;
            OBJ_CALL(value = self->object.getTotalSpace());
            return PyLong_FromLongLong((PY_LONG_LONG) value);
        }

        static PyObject *t_File_get__usableSpace(t_File *self, void *data)
        {
            jlong value;
            OBJ_CALL(value = self->object.getUsableSpace());
            return PyLong_FromLongLong((PY_LONG_LONG) value);
        }

        static int t_File_set__writable(t_File *self, PyObject *arg, void *data)
        {
            {
                jboolean value;
                if (!parseArg(arg, "Z", &value))
                {
                    INT_CALL(self->object.setWritable(value));
                    return 0;
                }
            }
            PyErr_SetArgsError((PyObject *) self, "writable", arg);
            return -1;
        }
    }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/io/Flushable.h"
#include "java/io/IOException.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace java {
    namespace io {

        ::java::lang::Class *Flushable::class$ = NULL;
        jmethodID *Flushable::mids$ = NULL;

        jclass Flushable::initializeClass()
        {
            if (!class$)
            {

                jclass cls = (jclass) env->findClass("java/io/Flushable");

                mids$ = new jmethodID[max_mid];
                mids$[mid_flush_54c6a166] = env->getMethodID(cls, "flush", "()V");

                class$ = (::java::lang::Class *) new JObject(cls);
            }
            return (jclass) class$->this$;
        }

        void Flushable::flush() const
        {
            env->callVoidMethod(this$, mids$[mid_flush_54c6a166]);
        }
    }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
    namespace io {
        static PyObject *t_Flushable_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Flushable_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Flushable_flush(t_Flushable *self);

        static PyMethodDef t_Flushable__methods_[] = {
            DECLARE_METHOD(t_Flushable, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Flushable, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Flushable, flush, METH_NOARGS),
            { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(Flushable, t_Flushable, ::java::lang::Object, Flushable, abstract_init, 0, 0, 0, 0, 0);

        void t_Flushable::install(PyObject *module)
        {
            installType(&PY_TYPE(Flushable), module, "Flushable", 0);
        }

        void t_Flushable::initialize(PyObject *module)
        {
            PyDict_SetItemString(PY_TYPE(Flushable).tp_dict, "class_", make_descriptor(Flushable::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Flushable).tp_dict, "wrapfn_", make_descriptor(t_Flushable::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Flushable).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_Flushable_cast_(PyTypeObject *type, PyObject *arg)
        {
            if (!(arg = castCheck(arg, Flushable::initializeClass, 1)))
                return NULL;
            return t_Flushable::wrap_Object(Flushable(((t_Flushable *) arg)->object.this$));
        }
        static PyObject *t_Flushable_instance_(PyTypeObject *type, PyObject *arg)
        {
            if (!castCheck(arg, Flushable::initializeClass, 0))
                Py_RETURN_FALSE;
            Py_RETURN_TRUE;
        }

        static PyObject *t_Flushable_flush(t_Flushable *self)
        {
            OBJ_CALL(self->object.flush());
            Py_RETURN_NONE;
        }
    }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/util/Map.h"
#include "java/util/Collection.h"
#include "java/util/Map$Entry.h"
#include "java/util/Set.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace java {
    namespace util {

        ::java::lang::Class *Map::class$ = NULL;
        jmethodID *Map::mids$ = NULL;

        jclass Map::initializeClass()
        {
            if (!class$)
            {

                jclass cls = (jclass) env->findClass("java/util/Map");

                mids$ = new jmethodID[max_mid];
                mids$[mid_clear_54c6a166] = env->getMethodID(cls, "clear", "()V");
                mids$[mid_containsKey_290588e2] = env->getMethodID(cls, "containsKey", "(Ljava/lang/Object;)Z");
                mids$[mid_containsValue_290588e2] = env->getMethodID(cls, "containsValue", "(Ljava/lang/Object;)Z");
                mids$[mid_entrySet_03e99967] = env->getMethodID(cls, "entrySet", "()Ljava/util/Set;");
                mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
                mids$[mid_get_a932a95f] = env->getMethodID(cls, "get", "(Ljava/lang/Object;)Ljava/lang/Object;");
                mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
                mids$[mid_isEmpty_54c6a16a] = env->getMethodID(cls, "isEmpty", "()Z");
                mids$[mid_keySet_03e99967] = env->getMethodID(cls, "keySet", "()Ljava/util/Set;");
                mids$[mid_put_537d5bdf] = env->getMethodID(cls, "put", "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;");
                mids$[mid_putAll_4c9e2b1c] = env->getMethodID(cls, "putAll", "(Ljava/util/Map;)V");
                mids$[mid_remove_a932a95f] = env->getMethodID(cls, "remove", "(Ljava/lang/Object;)Ljava/lang/Object;");
                mids$[mid_size_54c6a179] = env->getMethodID(cls, "size", "()I");
                mids$[mid_values_2d2d7de4] = env->getMethodID(cls, "values", "()Ljava/util/Collection;");

                class$ = (::java::lang::Class *) new JObject(cls);
            }
            return (jclass) class$->this$;
        }

        void Map::clear() const
        {
            env->callVoidMethod(this$, mids$[mid_clear_54c6a166]);
        }

        jboolean Map::containsKey(const ::java::lang::Object & a0) const
        {
            return env->callBooleanMethod(this$, mids$[mid_containsKey_290588e2], a0.this$);
        }

        jboolean Map::containsValue(const ::java::lang::Object & a0) const
        {
            return env->callBooleanMethod(this$, mids$[mid_containsValue_290588e2], a0.this$);
        }

        ::java::util::Set Map::entrySet() const
        {
            return ::java::util::Set(env->callObjectMethod(this$, mids$[mid_entrySet_03e99967]));
        }

        jboolean Map::equals(const ::java::lang::Object & a0) const
        {
            return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        ::java::lang::Object Map::get(const ::java::lang::Object & a0) const
        {
            return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_get_a932a95f], a0.this$));
        }

        jint Map::hashCode() const
        {
            return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        jboolean Map::isEmpty() const
        {
            return env->callBooleanMethod(this$, mids$[mid_isEmpty_54c6a16a]);
        }

        ::java::util::Set Map::keySet() const
        {
            return ::java::util::Set(env->callObjectMethod(this$, mids$[mid_keySet_03e99967]));
        }

        ::java::lang::Object Map::put(const ::java::lang::Object & a0, const ::java::lang::Object & a1) const
        {
            return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_put_537d5bdf], a0.this$, a1.this$));
        }

        void Map::putAll(const Map & a0) const
        {
            env->callVoidMethod(this$, mids$[mid_putAll_4c9e2b1c], a0.this$);
        }

        ::java::lang::Object Map::remove(const ::java::lang::Object & a0) const
        {
            return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_remove_a932a95f], a0.this$));
        }

        jint Map::size() const
        {
            return env->callIntMethod(this$, mids$[mid_size_54c6a179]);
        }

        ::java::util::Collection Map::values() const
        {
            return ::java::util::Collection(env->callObjectMethod(this$, mids$[mid_values_2d2d7de4]));
        }
    }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
    namespace util {
        static PyObject *t_Map_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Map_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Map_of_(t_Map *self, PyObject *args);
        static PyObject *t_Map_clear(t_Map *self);
        static PyObject *t_Map_containsKey(t_Map *self, PyObject *arg);
        static PyObject *t_Map_containsValue(t_Map *self, PyObject *arg);
        static PyObject *t_Map_entrySet(t_Map *self);
        static PyObject *t_Map_equals(t_Map *self, PyObject *args);
        static PyObject *t_Map_get(t_Map *self, PyObject *arg);
        static PyObject *t_Map_hashCode(t_Map *self, PyObject *args);
        static PyObject *t_Map_isEmpty(t_Map *self);
        static PyObject *t_Map_keySet(t_Map *self);
        static PyObject *t_Map_put(t_Map *self, PyObject *args);
        static PyObject *t_Map_putAll(t_Map *self, PyObject *arg);
        static PyObject *t_Map_remove(t_Map *self, PyObject *arg);
        static PyObject *t_Map_size(t_Map *self);
        static PyObject *t_Map_values(t_Map *self);
        static PyObject *t_Map_get__empty(t_Map *self, void *data);
        static PyObject *t_Map_get__parameters_(t_Map *self, void *data);
        static PyGetSetDef t_Map__fields_[] = {
            DECLARE_GET_FIELD(t_Map, empty),
            DECLARE_GET_FIELD(t_Map, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_Map__methods_[] = {
            DECLARE_METHOD(t_Map, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Map, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Map, of_, METH_VARARGS),
            DECLARE_METHOD(t_Map, clear, METH_NOARGS),
            DECLARE_METHOD(t_Map, containsKey, METH_O),
            DECLARE_METHOD(t_Map, containsValue, METH_O),
            DECLARE_METHOD(t_Map, entrySet, METH_NOARGS),
            DECLARE_METHOD(t_Map, equals, METH_VARARGS),
            DECLARE_METHOD(t_Map, get, METH_O),
            DECLARE_METHOD(t_Map, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_Map, isEmpty, METH_NOARGS),
            DECLARE_METHOD(t_Map, keySet, METH_NOARGS),
            DECLARE_METHOD(t_Map, put, METH_VARARGS),
            DECLARE_METHOD(t_Map, putAll, METH_O),
            DECLARE_METHOD(t_Map, remove, METH_O),
            DECLARE_METHOD(t_Map, size, METH_NOARGS),
            DECLARE_METHOD(t_Map, values, METH_NOARGS),
            { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(Map, t_Map, ::java::lang::Object, Map, abstract_init, 0, 0, t_Map__fields_, 0, 0);
        PyObject *t_Map::wrap_Object(const Map& object, PyTypeObject *K, PyTypeObject *V)
        {
            PyObject *obj = t_Map::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
                t_Map *self = (t_Map *) obj;
                self->parameters[0] = K;
                self->parameters[1] = V;
            }
            return obj;
        }

        PyObject *t_Map::wrap_jobject(const jobject& object, PyTypeObject *K, PyTypeObject *V)
        {
            PyObject *obj = t_Map::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
                t_Map *self = (t_Map *) obj;
                self->parameters[0] = K;
                self->parameters[1] = V;
            }
            return obj;
        }

        void t_Map::install(PyObject *module)
        {
            installType(&PY_TYPE(Map), module, "Map", 0);
            PyDict_SetItemString(PY_TYPE(Map).tp_dict, "Entry", make_descriptor(&PY_TYPE(Map$Entry)));
        }

        void t_Map::initialize(PyObject *module)
        {
            PyDict_SetItemString(PY_TYPE(Map).tp_dict, "class_", make_descriptor(Map::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Map).tp_dict, "wrapfn_", make_descriptor(t_Map::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Map).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_Map_cast_(PyTypeObject *type, PyObject *arg)
        {
            if (!(arg = castCheck(arg, Map::initializeClass, 1)))
                return NULL;
            return t_Map::wrap_Object(Map(((t_Map *) arg)->object.this$));
        }
        static PyObject *t_Map_instance_(PyTypeObject *type, PyObject *arg)
        {
            if (!castCheck(arg, Map::initializeClass, 0))
                Py_RETURN_FALSE;
            Py_RETURN_TRUE;
        }

        static PyObject *t_Map_of_(t_Map *self, PyObject *args)
        {
            if (!parseArg(args, "T", 2, &(self->parameters)))
                Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static PyObject *t_Map_clear(t_Map *self)
        {
            OBJ_CALL(self->object.clear());
            Py_RETURN_NONE;
        }

        static PyObject *t_Map_containsKey(t_Map *self, PyObject *arg)
        {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArg(arg, "o", &a0))
            {
                OBJ_CALL(result = self->object.containsKey(a0));
                Py_RETURN_BOOL(result);
            }

            PyErr_SetArgsError((PyObject *) self, "containsKey", arg);
            return NULL;
        }

        static PyObject *t_Map_containsValue(t_Map *self, PyObject *arg)
        {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArg(arg, "o", &a0))
            {
                OBJ_CALL(result = self->object.containsValue(a0));
                Py_RETURN_BOOL(result);
            }

            PyErr_SetArgsError((PyObject *) self, "containsValue", arg);
            return NULL;
        }

        static PyObject *t_Map_entrySet(t_Map *self)
        {
            ::java::util::Set result((jobject) NULL);
            OBJ_CALL(result = self->object.entrySet());
            return ::java::util::t_Set::wrap_Object(result);
        }

        static PyObject *t_Map_equals(t_Map *self, PyObject *args)
        {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
                OBJ_CALL(result = self->object.equals(a0));
                Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(Map), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_Map_get(t_Map *self, PyObject *arg)
        {
            ::java::lang::Object a0((jobject) NULL);
            ::java::lang::Object result((jobject) NULL);

            if (!parseArg(arg, "o", &a0))
            {
                OBJ_CALL(result = self->object.get(a0));
                return self->parameters[1] != NULL ? wrapType(self->parameters[1], result.this$) : ::java::lang::t_Object::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "get", arg);
            return NULL;
        }

        static PyObject *t_Map_hashCode(t_Map *self, PyObject *args)
        {
            jint result;

            if (!parseArgs(args, ""))
            {
                OBJ_CALL(result = self->object.hashCode());
                return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(Map), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_Map_isEmpty(t_Map *self)
        {
            jboolean result;
            OBJ_CALL(result = self->object.isEmpty());
            Py_RETURN_BOOL(result);
        }

        static PyObject *t_Map_keySet(t_Map *self)
        {
            ::java::util::Set result((jobject) NULL);
            OBJ_CALL(result = self->object.keySet());
            return ::java::util::t_Set::wrap_Object(result, self->parameters[0]);
        }

        static PyObject *t_Map_put(t_Map *self, PyObject *args)
        {
            ::java::lang::Object a0((jobject) NULL);
            ::java::lang::Object a1((jobject) NULL);
            ::java::lang::Object result((jobject) NULL);

            if (!parseArgs(args, "OO", self->parameters[0], self->parameters[1], &a0, &a1))
            {
                OBJ_CALL(result = self->object.put(a0, a1));
                return self->parameters[1] != NULL ? wrapType(self->parameters[1], result.this$) : ::java::lang::t_Object::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "put", args);
            return NULL;
        }

        static PyObject *t_Map_putAll(t_Map *self, PyObject *arg)
        {
            Map a0((jobject) NULL);
            PyTypeObject **p0;

            if (!parseArg(arg, "K", Map::initializeClass, &a0, &p0, t_Map::parameters_))
            {
                OBJ_CALL(self->object.putAll(a0));
                Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "putAll", arg);
            return NULL;
        }

        static PyObject *t_Map_remove(t_Map *self, PyObject *arg)
        {
            ::java::lang::Object a0((jobject) NULL);
            ::java::lang::Object result((jobject) NULL);

            if (!parseArg(arg, "o", &a0))
            {
                OBJ_CALL(result = self->object.remove(a0));
                return self->parameters[1] != NULL ? wrapType(self->parameters[1], result.this$) : ::java::lang::t_Object::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "remove", arg);
            return NULL;
        }

        static PyObject *t_Map_size(t_Map *self)
        {
            jint result;
            OBJ_CALL(result = self->object.size());
            return PyInt_FromLong((long) result);
        }

        static PyObject *t_Map_values(t_Map *self)
        {
            ::java::util::Collection result((jobject) NULL);
            OBJ_CALL(result = self->object.values());
            return ::java::util::t_Collection::wrap_Object(result, self->parameters[1]);
        }
        static PyObject *t_Map_get__parameters_(t_Map *self, void *data)
        {
            return typeParameters(self->parameters, sizeof(self->parameters));
        }

        static PyObject *t_Map_get__empty(t_Map *self, void *data)
        {
            jboolean value;
            OBJ_CALL(value = self->object.isEmpty());
            Py_RETURN_BOOL(value);
        }
    }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/lang/Comparable.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace java {
    namespace lang {

        ::java::lang::Class *Comparable::class$ = NULL;
        jmethodID *Comparable::mids$ = NULL;

        jclass Comparable::initializeClass()
        {
            if (!class$)
            {

                jclass cls = (jclass) env->findClass("java/lang/Comparable");

                mids$ = new jmethodID[max_mid];
                mids$[mid_compareTo_290588f1] = env->getMethodID(cls, "compareTo", "(Ljava/lang/Object;)I");

                class$ = (::java::lang::Class *) new JObject(cls);
            }
            return (jclass) class$->this$;
        }

        jint Comparable::compareTo(const ::java::lang::Object & a0) const
        {
            return env->callIntMethod(this$, mids$[mid_compareTo_290588f1], a0.this$);
        }
    }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
    namespace lang {
        static PyObject *t_Comparable_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Comparable_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Comparable_of_(t_Comparable *self, PyObject *args);
        static PyObject *t_Comparable_compareTo(t_Comparable *self, PyObject *arg);
        static PyObject *t_Comparable_get__parameters_(t_Comparable *self, void *data);
        static PyGetSetDef t_Comparable__fields_[] = {
            DECLARE_GET_FIELD(t_Comparable, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_Comparable__methods_[] = {
            DECLARE_METHOD(t_Comparable, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Comparable, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Comparable, of_, METH_VARARGS),
            DECLARE_METHOD(t_Comparable, compareTo, METH_O),
            { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(Comparable, t_Comparable, ::java::lang::Object, Comparable, abstract_init, 0, 0, t_Comparable__fields_, 0, 0);
        PyObject *t_Comparable::wrap_Object(const Comparable& object, PyTypeObject *T)
        {
            PyObject *obj = t_Comparable::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
                t_Comparable *self = (t_Comparable *) obj;
                self->parameters[0] = T;
            }
            return obj;
        }

        PyObject *t_Comparable::wrap_jobject(const jobject& object, PyTypeObject *T)
        {
            PyObject *obj = t_Comparable::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
                t_Comparable *self = (t_Comparable *) obj;
                self->parameters[0] = T;
            }
            return obj;
        }

        void t_Comparable::install(PyObject *module)
        {
            installType(&PY_TYPE(Comparable), module, "Comparable", 0);
        }

        void t_Comparable::initialize(PyObject *module)
        {
            PyDict_SetItemString(PY_TYPE(Comparable).tp_dict, "class_", make_descriptor(Comparable::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Comparable).tp_dict, "wrapfn_", make_descriptor(t_Comparable::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Comparable).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_Comparable_cast_(PyTypeObject *type, PyObject *arg)
        {
            if (!(arg = castCheck(arg, Comparable::initializeClass, 1)))
                return NULL;
            return t_Comparable::wrap_Object(Comparable(((t_Comparable *) arg)->object.this$));
        }
        static PyObject *t_Comparable_instance_(PyTypeObject *type, PyObject *arg)
        {
            if (!castCheck(arg, Comparable::initializeClass, 0))
                Py_RETURN_FALSE;
            Py_RETURN_TRUE;
        }

        static PyObject *t_Comparable_of_(t_Comparable *self, PyObject *args)
        {
            if (!parseArg(args, "T", 1, &(self->parameters)))
                Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static PyObject *t_Comparable_compareTo(t_Comparable *self, PyObject *arg)
        {
            ::java::lang::Object a0((jobject) NULL);
            jint result;

            if (!parseArg(arg, "O", self->parameters[0], &a0))
            {
                OBJ_CALL(result = self->object.compareTo(a0));
                return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "compareTo", arg);
            return NULL;
        }
        static PyObject *t_Comparable_get__parameters_(t_Comparable *self, void *data)
        {
            return typeParameters(self->parameters, sizeof(self->parameters));
        }
    }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/lang/StackTraceElement.h"
#include "java/io/Serializable.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace java {
    namespace lang {

        ::java::lang::Class *StackTraceElement::class$ = NULL;
        jmethodID *StackTraceElement::mids$ = NULL;

        jclass StackTraceElement::initializeClass()
        {
            if (!class$)
            {

                jclass cls = (jclass) env->findClass("java/lang/StackTraceElement");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_fa754eea] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;I)V");
                mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
                mids$[mid_getClassName_14c7b5c5] = env->getMethodID(cls, "getClassName", "()Ljava/lang/String;");
                mids$[mid_getFileName_14c7b5c5] = env->getMethodID(cls, "getFileName", "()Ljava/lang/String;");
                mids$[mid_getLineNumber_54c6a179] = env->getMethodID(cls, "getLineNumber", "()I");
                mids$[mid_getMethodName_14c7b5c5] = env->getMethodID(cls, "getMethodName", "()Ljava/lang/String;");
                mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
                mids$[mid_isNativeMethod_54c6a16a] = env->getMethodID(cls, "isNativeMethod", "()Z");
                mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

                class$ = (::java::lang::Class *) new JObject(cls);
            }
            return (jclass) class$->this$;
        }

        StackTraceElement::StackTraceElement(const ::java::lang::String & a0, const ::java::lang::String & a1, const ::java::lang::String & a2, jint a3) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_fa754eea, a0.this$, a1.this$, a2.this$, a3)) {}

        jboolean StackTraceElement::equals(const ::java::lang::Object & a0) const
        {
            return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        ::java::lang::String StackTraceElement::getClassName() const
        {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getClassName_14c7b5c5]));
        }

        ::java::lang::String StackTraceElement::getFileName() const
        {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getFileName_14c7b5c5]));
        }

        jint StackTraceElement::getLineNumber() const
        {
            return env->callIntMethod(this$, mids$[mid_getLineNumber_54c6a179]);
        }

        ::java::lang::String StackTraceElement::getMethodName() const
        {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getMethodName_14c7b5c5]));
        }

        jint StackTraceElement::hashCode() const
        {
            return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        jboolean StackTraceElement::isNativeMethod() const
        {
            return env->callBooleanMethod(this$, mids$[mid_isNativeMethod_54c6a16a]);
        }

        ::java::lang::String StackTraceElement::toString() const
        {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }
    }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
    namespace lang {
        static PyObject *t_StackTraceElement_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_StackTraceElement_instance_(PyTypeObject *type, PyObject *arg);
        static int t_StackTraceElement_init_(t_StackTraceElement *self, PyObject *args, PyObject *kwds);
        static PyObject *t_StackTraceElement_equals(t_StackTraceElement *self, PyObject *args);
        static PyObject *t_StackTraceElement_getClassName(t_StackTraceElement *self);
        static PyObject *t_StackTraceElement_getFileName(t_StackTraceElement *self);
        static PyObject *t_StackTraceElement_getLineNumber(t_StackTraceElement *self);
        static PyObject *t_StackTraceElement_getMethodName(t_StackTraceElement *self);
        static PyObject *t_StackTraceElement_hashCode(t_StackTraceElement *self, PyObject *args);
        static PyObject *t_StackTraceElement_isNativeMethod(t_StackTraceElement *self);
        static PyObject *t_StackTraceElement_toString(t_StackTraceElement *self, PyObject *args);
        static PyObject *t_StackTraceElement_get__className(t_StackTraceElement *self, void *data);
        static PyObject *t_StackTraceElement_get__fileName(t_StackTraceElement *self, void *data);
        static PyObject *t_StackTraceElement_get__lineNumber(t_StackTraceElement *self, void *data);
        static PyObject *t_StackTraceElement_get__methodName(t_StackTraceElement *self, void *data);
        static PyObject *t_StackTraceElement_get__nativeMethod(t_StackTraceElement *self, void *data);
        static PyGetSetDef t_StackTraceElement__fields_[] = {
            DECLARE_GET_FIELD(t_StackTraceElement, className),
            DECLARE_GET_FIELD(t_StackTraceElement, fileName),
            DECLARE_GET_FIELD(t_StackTraceElement, lineNumber),
            DECLARE_GET_FIELD(t_StackTraceElement, methodName),
            DECLARE_GET_FIELD(t_StackTraceElement, nativeMethod),
            { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_StackTraceElement__methods_[] = {
            DECLARE_METHOD(t_StackTraceElement, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_StackTraceElement, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_StackTraceElement, equals, METH_VARARGS),
            DECLARE_METHOD(t_StackTraceElement, getClassName, METH_NOARGS),
            DECLARE_METHOD(t_StackTraceElement, getFileName, METH_NOARGS),
            DECLARE_METHOD(t_StackTraceElement, getLineNumber, METH_NOARGS),
            DECLARE_METHOD(t_StackTraceElement, getMethodName, METH_NOARGS),
            DECLARE_METHOD(t_StackTraceElement, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_StackTraceElement, isNativeMethod, METH_NOARGS),
            DECLARE_METHOD(t_StackTraceElement, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(StackTraceElement, t_StackTraceElement, ::java::lang::Object, StackTraceElement, t_StackTraceElement_init_, 0, 0, t_StackTraceElement__fields_, 0, 0);

        void t_StackTraceElement::install(PyObject *module)
        {
            installType(&PY_TYPE(StackTraceElement), module, "StackTraceElement", 0);
        }

        void t_StackTraceElement::initialize(PyObject *module)
        {
            PyDict_SetItemString(PY_TYPE(StackTraceElement).tp_dict, "class_", make_descriptor(StackTraceElement::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(StackTraceElement).tp_dict, "wrapfn_", make_descriptor(t_StackTraceElement::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(StackTraceElement).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_StackTraceElement_cast_(PyTypeObject *type, PyObject *arg)
        {
            if (!(arg = castCheck(arg, StackTraceElement::initializeClass, 1)))
                return NULL;
            return t_StackTraceElement::wrap_Object(StackTraceElement(((t_StackTraceElement *) arg)->object.this$));
        }
        static PyObject *t_StackTraceElement_instance_(PyTypeObject *type, PyObject *arg)
        {
            if (!castCheck(arg, StackTraceElement::initializeClass, 0))
                Py_RETURN_FALSE;
            Py_RETURN_TRUE;
        }

        static int t_StackTraceElement_init_(t_StackTraceElement *self, PyObject *args, PyObject *kwds)
        {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::String a1((jobject) NULL);
            ::java::lang::String a2((jobject) NULL);
            jint a3;
            StackTraceElement object((jobject) NULL);

            if (!parseArgs(args, "sssI", &a0, &a1, &a2, &a3))
            {
                INT_CALL(object = StackTraceElement(a0, a1, a2, a3));
                self->object = object;
            }
            else
            {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
            }

            return 0;
        }

        static PyObject *t_StackTraceElement_equals(t_StackTraceElement *self, PyObject *args)
        {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
                OBJ_CALL(result = self->object.equals(a0));
                Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(StackTraceElement), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_StackTraceElement_getClassName(t_StackTraceElement *self)
        {
            ::java::lang::String result((jobject) NULL);
            OBJ_CALL(result = self->object.getClassName());
            return j2p(result);
        }

        static PyObject *t_StackTraceElement_getFileName(t_StackTraceElement *self)
        {
            ::java::lang::String result((jobject) NULL);
            OBJ_CALL(result = self->object.getFileName());
            return j2p(result);
        }

        static PyObject *t_StackTraceElement_getLineNumber(t_StackTraceElement *self)
        {
            jint result;
            OBJ_CALL(result = self->object.getLineNumber());
            return PyInt_FromLong((long) result);
        }

        static PyObject *t_StackTraceElement_getMethodName(t_StackTraceElement *self)
        {
            ::java::lang::String result((jobject) NULL);
            OBJ_CALL(result = self->object.getMethodName());
            return j2p(result);
        }

        static PyObject *t_StackTraceElement_hashCode(t_StackTraceElement *self, PyObject *args)
        {
            jint result;

            if (!parseArgs(args, ""))
            {
                OBJ_CALL(result = self->object.hashCode());
                return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(StackTraceElement), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_StackTraceElement_isNativeMethod(t_StackTraceElement *self)
        {
            jboolean result;
            OBJ_CALL(result = self->object.isNativeMethod());
            Py_RETURN_BOOL(result);
        }

        static PyObject *t_StackTraceElement_toString(t_StackTraceElement *self, PyObject *args)
        {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
                OBJ_CALL(result = self->object.toString());
                return j2p(result);
            }

            return callSuper(&PY_TYPE(StackTraceElement), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_StackTraceElement_get__className(t_StackTraceElement *self, void *data)
        {
            ::java::lang::String value((jobject) NULL);
            OBJ_CALL(value = self->object.getClassName());
            return j2p(value);
        }

        static PyObject *t_StackTraceElement_get__fileName(t_StackTraceElement *self, void *data)
        {
            ::java::lang::String value((jobject) NULL);
            OBJ_CALL(value = self->object.getFileName());
            return j2p(value);
        }

        static PyObject *t_StackTraceElement_get__lineNumber(t_StackTraceElement *self, void *data)
        {
            jint value;
            OBJ_CALL(value = self->object.getLineNumber());
            return PyInt_FromLong((long) value);
        }

        static PyObject *t_StackTraceElement_get__methodName(t_StackTraceElement *self, void *data)
        {
            ::java::lang::String value((jobject) NULL);
            OBJ_CALL(value = self->object.getMethodName());
            return j2p(value);
        }

        static PyObject *t_StackTraceElement_get__nativeMethod(t_StackTraceElement *self, void *data)
        {
            jboolean value;
            OBJ_CALL(value = self->object.isNativeMethod());
            Py_RETURN_BOOL(value);
        }
    }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/io/OutputStream.h"
#include "java/io/IOException.h"
#include "java/io/Closeable.h"
#include "java/lang/Class.h"
#include "java/io/Flushable.h"
#include "JArray.h"

namespace java {
    namespace io {

        ::java::lang::Class *OutputStream::class$ = NULL;
        jmethodID *OutputStream::mids$ = NULL;

        jclass OutputStream::initializeClass()
        {
            if (!class$)
            {

                jclass cls = (jclass) env->findClass("java/io/OutputStream");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
                mids$[mid_flush_54c6a166] = env->getMethodID(cls, "flush", "()V");
                mids$[mid_write_49b4f12b] = env->getMethodID(cls, "write", "([B)V");
                mids$[mid_write_39c7bd3c] = env->getMethodID(cls, "write", "(I)V");
                mids$[mid_write_86f4435f] = env->getMethodID(cls, "write", "([BII)V");

                class$ = (::java::lang::Class *) new JObject(cls);
            }
            return (jclass) class$->this$;
        }

        OutputStream::OutputStream() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        void OutputStream::close() const
        {
            env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
        }

        void OutputStream::flush() const
        {
            env->callVoidMethod(this$, mids$[mid_flush_54c6a166]);
        }

        void OutputStream::write(const JArray< jbyte > & a0) const
        {
            env->callVoidMethod(this$, mids$[mid_write_49b4f12b], a0.this$);
        }

        void OutputStream::write(jint a0) const
        {
            env->callVoidMethod(this$, mids$[mid_write_39c7bd3c], a0);
        }

        void OutputStream::write(const JArray< jbyte > & a0, jint a1, jint a2) const
        {
            env->callVoidMethod(this$, mids$[mid_write_86f4435f], a0.this$, a1, a2);
        }
    }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
    namespace io {
        static PyObject *t_OutputStream_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_OutputStream_instance_(PyTypeObject *type, PyObject *arg);
        static int t_OutputStream_init_(t_OutputStream *self, PyObject *args, PyObject *kwds);
        static PyObject *t_OutputStream_close(t_OutputStream *self);
        static PyObject *t_OutputStream_flush(t_OutputStream *self);
        static PyObject *t_OutputStream_write(t_OutputStream *self, PyObject *args);

        static PyMethodDef t_OutputStream__methods_[] = {
            DECLARE_METHOD(t_OutputStream, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_OutputStream, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_OutputStream, close, METH_NOARGS),
            DECLARE_METHOD(t_OutputStream, flush, METH_NOARGS),
            DECLARE_METHOD(t_OutputStream, write, METH_VARARGS),
            { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(OutputStream, t_OutputStream, ::java::lang::Object, OutputStream, t_OutputStream_init_, 0, 0, 0, 0, 0);

        void t_OutputStream::install(PyObject *module)
        {
            installType(&PY_TYPE(OutputStream), module, "OutputStream", 0);
        }

        void t_OutputStream::initialize(PyObject *module)
        {
            PyDict_SetItemString(PY_TYPE(OutputStream).tp_dict, "class_", make_descriptor(OutputStream::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(OutputStream).tp_dict, "wrapfn_", make_descriptor(t_OutputStream::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(OutputStream).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_OutputStream_cast_(PyTypeObject *type, PyObject *arg)
        {
            if (!(arg = castCheck(arg, OutputStream::initializeClass, 1)))
                return NULL;
            return t_OutputStream::wrap_Object(OutputStream(((t_OutputStream *) arg)->object.this$));
        }
        static PyObject *t_OutputStream_instance_(PyTypeObject *type, PyObject *arg)
        {
            if (!castCheck(arg, OutputStream::initializeClass, 0))
                Py_RETURN_FALSE;
            Py_RETURN_TRUE;
        }

        static int t_OutputStream_init_(t_OutputStream *self, PyObject *args, PyObject *kwds)
        {
            OutputStream object((jobject) NULL);

            INT_CALL(object = OutputStream());
            self->object = object;

            return 0;
        }

        static PyObject *t_OutputStream_close(t_OutputStream *self)
        {
            OBJ_CALL(self->object.close());
            Py_RETURN_NONE;
        }

        static PyObject *t_OutputStream_flush(t_OutputStream *self)
        {
            OBJ_CALL(self->object.flush());
            Py_RETURN_NONE;
        }

        static PyObject *t_OutputStream_write(t_OutputStream *self, PyObject *args)
        {
            switch (PyTuple_GET_SIZE(args)) {
              case 1:
                {
                    JArray< jbyte > a0((jobject) NULL);

                    if (!parseArgs(args, "[B", &a0))
                    {
                        OBJ_CALL(self->object.write(a0));
                        Py_RETURN_NONE;
                    }
                }
                {
                    jint a0;

                    if (!parseArgs(args, "I", &a0))
                    {
                        OBJ_CALL(self->object.write(a0));
                        Py_RETURN_NONE;
                    }
                }
                break;
              case 3:
                {
                    JArray< jbyte > a0((jobject) NULL);
                    jint a1;
                    jint a2;

                    if (!parseArgs(args, "[BII", &a0, &a1, &a2))
                    {
                        OBJ_CALL(self->object.write(a0, a1, a2));
                        Py_RETURN_NONE;
                    }
                }
            }

            PyErr_SetArgsError((PyObject *) self, "write", args);
            return NULL;
        }
    }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/util/Map$Entry.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace java {
    namespace util {

        ::java::lang::Class *Map$Entry::class$ = NULL;
        jmethodID *Map$Entry::mids$ = NULL;

        jclass Map$Entry::initializeClass()
        {
            if (!class$)
            {

                jclass cls = (jclass) env->findClass("java/util/Map$Entry");

                mids$ = new jmethodID[max_mid];
                mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
                mids$[mid_getKey_846352c3] = env->getMethodID(cls, "getKey", "()Ljava/lang/Object;");
                mids$[mid_getValue_846352c3] = env->getMethodID(cls, "getValue", "()Ljava/lang/Object;");
                mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
                mids$[mid_setValue_a932a95f] = env->getMethodID(cls, "setValue", "(Ljava/lang/Object;)Ljava/lang/Object;");

                class$ = (::java::lang::Class *) new JObject(cls);
            }
            return (jclass) class$->this$;
        }

        jboolean Map$Entry::equals(const ::java::lang::Object & a0) const
        {
            return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        ::java::lang::Object Map$Entry::getKey() const
        {
            return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_getKey_846352c3]));
        }

        ::java::lang::Object Map$Entry::getValue() const
        {
            return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_getValue_846352c3]));
        }

        jint Map$Entry::hashCode() const
        {
            return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        ::java::lang::Object Map$Entry::setValue(const ::java::lang::Object & a0) const
        {
            return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_setValue_a932a95f], a0.this$));
        }
    }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
    namespace util {
        static PyObject *t_Map$Entry_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Map$Entry_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Map$Entry_of_(t_Map$Entry *self, PyObject *args);
        static PyObject *t_Map$Entry_equals(t_Map$Entry *self, PyObject *args);
        static PyObject *t_Map$Entry_getKey(t_Map$Entry *self);
        static PyObject *t_Map$Entry_getValue(t_Map$Entry *self);
        static PyObject *t_Map$Entry_hashCode(t_Map$Entry *self, PyObject *args);
        static PyObject *t_Map$Entry_setValue(t_Map$Entry *self, PyObject *arg);
        static PyObject *t_Map$Entry_get__key(t_Map$Entry *self, void *data);
        static PyObject *t_Map$Entry_get__value(t_Map$Entry *self, void *data);
        static int t_Map$Entry_set__value(t_Map$Entry *self, PyObject *arg, void *data);
        static PyObject *t_Map$Entry_get__parameters_(t_Map$Entry *self, void *data);
        static PyGetSetDef t_Map$Entry__fields_[] = {
            DECLARE_GET_FIELD(t_Map$Entry, key),
            DECLARE_GETSET_FIELD(t_Map$Entry, value),
            DECLARE_GET_FIELD(t_Map$Entry, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_Map$Entry__methods_[] = {
            DECLARE_METHOD(t_Map$Entry, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Map$Entry, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Map$Entry, of_, METH_VARARGS),
            DECLARE_METHOD(t_Map$Entry, equals, METH_VARARGS),
            DECLARE_METHOD(t_Map$Entry, getKey, METH_NOARGS),
            DECLARE_METHOD(t_Map$Entry, getValue, METH_NOARGS),
            DECLARE_METHOD(t_Map$Entry, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_Map$Entry, setValue, METH_O),
            { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(Map$Entry, t_Map$Entry, ::java::lang::Object, Map$Entry, abstract_init, 0, 0, t_Map$Entry__fields_, 0, 0);
        PyObject *t_Map$Entry::wrap_Object(const Map$Entry& object, PyTypeObject *K, PyTypeObject *V)
        {
            PyObject *obj = t_Map$Entry::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
                t_Map$Entry *self = (t_Map$Entry *) obj;
                self->parameters[0] = K;
                self->parameters[1] = V;
            }
            return obj;
        }

        PyObject *t_Map$Entry::wrap_jobject(const jobject& object, PyTypeObject *K, PyTypeObject *V)
        {
            PyObject *obj = t_Map$Entry::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
                t_Map$Entry *self = (t_Map$Entry *) obj;
                self->parameters[0] = K;
                self->parameters[1] = V;
            }
            return obj;
        }

        void t_Map$Entry::install(PyObject *module)
        {
            installType(&PY_TYPE(Map$Entry), module, "Map$Entry", 0);
        }

        void t_Map$Entry::initialize(PyObject *module)
        {
            PyDict_SetItemString(PY_TYPE(Map$Entry).tp_dict, "class_", make_descriptor(Map$Entry::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Map$Entry).tp_dict, "wrapfn_", make_descriptor(t_Map$Entry::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Map$Entry).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_Map$Entry_cast_(PyTypeObject *type, PyObject *arg)
        {
            if (!(arg = castCheck(arg, Map$Entry::initializeClass, 1)))
                return NULL;
            return t_Map$Entry::wrap_Object(Map$Entry(((t_Map$Entry *) arg)->object.this$));
        }
        static PyObject *t_Map$Entry_instance_(PyTypeObject *type, PyObject *arg)
        {
            if (!castCheck(arg, Map$Entry::initializeClass, 0))
                Py_RETURN_FALSE;
            Py_RETURN_TRUE;
        }

        static PyObject *t_Map$Entry_of_(t_Map$Entry *self, PyObject *args)
        {
            if (!parseArg(args, "T", 2, &(self->parameters)))
                Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static PyObject *t_Map$Entry_equals(t_Map$Entry *self, PyObject *args)
        {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
                OBJ_CALL(result = self->object.equals(a0));
                Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(Map$Entry), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_Map$Entry_getKey(t_Map$Entry *self)
        {
            ::java::lang::Object result((jobject) NULL);
            OBJ_CALL(result = self->object.getKey());
            return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
        }

        static PyObject *t_Map$Entry_getValue(t_Map$Entry *self)
        {
            ::java::lang::Object result((jobject) NULL);
            OBJ_CALL(result = self->object.getValue());
            return self->parameters[1] != NULL ? wrapType(self->parameters[1], result.this$) : ::java::lang::t_Object::wrap_Object(result);
        }

        static PyObject *t_Map$Entry_hashCode(t_Map$Entry *self, PyObject *args)
        {
            jint result;

            if (!parseArgs(args, ""))
            {
                OBJ_CALL(result = self->object.hashCode());
                return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(Map$Entry), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_Map$Entry_setValue(t_Map$Entry *self, PyObject *arg)
        {
            ::java::lang::Object a0((jobject) NULL);
            ::java::lang::Object result((jobject) NULL);

            if (!parseArg(arg, "O", self->parameters[1], &a0))
            {
                OBJ_CALL(result = self->object.setValue(a0));
                return self->parameters[1] != NULL ? wrapType(self->parameters[1], result.this$) : ::java::lang::t_Object::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "setValue", arg);
            return NULL;
        }
        static PyObject *t_Map$Entry_get__parameters_(t_Map$Entry *self, void *data)
        {
            return typeParameters(self->parameters, sizeof(self->parameters));
        }

        static PyObject *t_Map$Entry_get__key(t_Map$Entry *self, void *data)
        {
            ::java::lang::Object value((jobject) NULL);
            OBJ_CALL(value = self->object.getKey());
            return ::java::lang::t_Object::wrap_Object(value);
        }

        static PyObject *t_Map$Entry_get__value(t_Map$Entry *self, void *data)
        {
            ::java::lang::Object value((jobject) NULL);
            OBJ_CALL(value = self->object.getValue());
            return ::java::lang::t_Object::wrap_Object(value);
        }
        static int t_Map$Entry_set__value(t_Map$Entry *self, PyObject *arg, void *data)
        {
            {
                ::java::lang::Object value((jobject) NULL);
                if (!parseArg(arg, "o", &value))
                {
                    INT_CALL(self->object.setValue(value));
                    return 0;
                }
            }
            PyErr_SetArgsError((PyObject *) self, "value", arg);
            return -1;
        }
    }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/lang/NullPointerException.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace java {
    namespace lang {

        ::java::lang::Class *NullPointerException::class$ = NULL;
        jmethodID *NullPointerException::mids$ = NULL;

        jclass NullPointerException::initializeClass()
        {
            if (!class$)
            {

                jclass cls = (jclass) env->findClass("java/lang/NullPointerException");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");

                class$ = (::java::lang::Class *) new JObject(cls);
            }
            return (jclass) class$->this$;
        }

        NullPointerException::NullPointerException() : ::java::lang::RuntimeException(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        NullPointerException::NullPointerException(const ::java::lang::String & a0) : ::java::lang::RuntimeException(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}
    }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
    namespace lang {
        static PyObject *t_NullPointerException_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_NullPointerException_instance_(PyTypeObject *type, PyObject *arg);
        static int t_NullPointerException_init_(t_NullPointerException *self, PyObject *args, PyObject *kwds);

        static PyMethodDef t_NullPointerException__methods_[] = {
            DECLARE_METHOD(t_NullPointerException, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_NullPointerException, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(NullPointerException, t_NullPointerException, ::java::lang::RuntimeException, NullPointerException, t_NullPointerException_init_, 0, 0, 0, 0, 0);

        void t_NullPointerException::install(PyObject *module)
        {
            installType(&PY_TYPE(NullPointerException), module, "NullPointerException", 0);
        }

        void t_NullPointerException::initialize(PyObject *module)
        {
            PyDict_SetItemString(PY_TYPE(NullPointerException).tp_dict, "class_", make_descriptor(NullPointerException::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(NullPointerException).tp_dict, "wrapfn_", make_descriptor(t_NullPointerException::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(NullPointerException).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_NullPointerException_cast_(PyTypeObject *type, PyObject *arg)
        {
            if (!(arg = castCheck(arg, NullPointerException::initializeClass, 1)))
                return NULL;
            return t_NullPointerException::wrap_Object(NullPointerException(((t_NullPointerException *) arg)->object.this$));
        }
        static PyObject *t_NullPointerException_instance_(PyTypeObject *type, PyObject *arg)
        {
            if (!castCheck(arg, NullPointerException::initializeClass, 0))
                Py_RETURN_FALSE;
            Py_RETURN_TRUE;
        }

        static int t_NullPointerException_init_(t_NullPointerException *self, PyObject *args, PyObject *kwds)
        {
            switch (PyTuple_GET_SIZE(args)) {
              case 0:
                {
                    NullPointerException object((jobject) NULL);

                    INT_CALL(object = NullPointerException());
                    self->object = object;
                    break;
                }
                goto err;
              case 1:
                {
                    ::java::lang::String a0((jobject) NULL);
                    NullPointerException object((jobject) NULL);

                    if (!parseArgs(args, "s", &a0))
                    {
                        INT_CALL(object = NullPointerException(a0));
                        self->object = object;
                        break;
                    }
                }
              default:
              err:
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
            }

            return 0;
        }
    }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/util/AbstractList.h"
#include "java/util/Collection.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "java/util/ListIterator.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "JArray.h"

namespace java {
    namespace util {

        ::java::lang::Class *AbstractList::class$ = NULL;
        jmethodID *AbstractList::mids$ = NULL;

        jclass AbstractList::initializeClass()
        {
            if (!class$)
            {

                jclass cls = (jclass) env->findClass("java/util/AbstractList");

                mids$ = new jmethodID[max_mid];
                mids$[mid_add_290588e2] = env->getMethodID(cls, "add", "(Ljava/lang/Object;)Z");
                mids$[mid_add_f7cd74a4] = env->getMethodID(cls, "add", "(ILjava/lang/Object;)V");
                mids$[mid_addAll_9bfb3701] = env->getMethodID(cls, "addAll", "(Ljava/util/Collection;)Z");
                mids$[mid_addAll_006cd2b7] = env->getMethodID(cls, "addAll", "(ILjava/util/Collection;)Z");
                mids$[mid_clear_54c6a166] = env->getMethodID(cls, "clear", "()V");
                mids$[mid_contains_290588e2] = env->getMethodID(cls, "contains", "(Ljava/lang/Object;)Z");
                mids$[mid_containsAll_9bfb3701] = env->getMethodID(cls, "containsAll", "(Ljava/util/Collection;)Z");
                mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
                mids$[mid_get_29be6a55] = env->getMethodID(cls, "get", "(I)Ljava/lang/Object;");
                mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
                mids$[mid_indexOf_290588f1] = env->getMethodID(cls, "indexOf", "(Ljava/lang/Object;)I");
                mids$[mid_isEmpty_54c6a16a] = env->getMethodID(cls, "isEmpty", "()Z");
                mids$[mid_iterator_40858c90] = env->getMethodID(cls, "iterator", "()Ljava/util/Iterator;");
                mids$[mid_lastIndexOf_290588f1] = env->getMethodID(cls, "lastIndexOf", "(Ljava/lang/Object;)I");
                mids$[mid_listIterator_b5be4e14] = env->getMethodID(cls, "listIterator", "()Ljava/util/ListIterator;");
                mids$[mid_listIterator_4145ee6a] = env->getMethodID(cls, "listIterator", "(I)Ljava/util/ListIterator;");
                mids$[mid_remove_29be6a55] = env->getMethodID(cls, "remove", "(I)Ljava/lang/Object;");
                mids$[mid_remove_290588e2] = env->getMethodID(cls, "remove", "(Ljava/lang/Object;)Z");
                mids$[mid_removeAll_9bfb3701] = env->getMethodID(cls, "removeAll", "(Ljava/util/Collection;)Z");
                mids$[mid_retainAll_9bfb3701] = env->getMethodID(cls, "retainAll", "(Ljava/util/Collection;)Z");
                mids$[mid_set_211591b1] = env->getMethodID(cls, "set", "(ILjava/lang/Object;)Ljava/lang/Object;");
                mids$[mid_size_54c6a179] = env->getMethodID(cls, "size", "()I");
                mids$[mid_subList_6bc635fe] = env->getMethodID(cls, "subList", "(II)Ljava/util/List;");
                mids$[mid_toArray_94e49c77] = env->getMethodID(cls, "toArray", "()[Ljava/lang/Object;");
                mids$[mid_toArray_ae67dbcf] = env->getMethodID(cls, "toArray", "([Ljava/lang/Object;)[Ljava/lang/Object;");
                mids$[mid_removeRange_d8d154a6] = env->getMethodID(cls, "removeRange", "(II)V");

                class$ = (::java::lang::Class *) new JObject(cls);
            }
            return (jclass) class$->this$;
        }

        jboolean AbstractList::add(const ::java::lang::Object & a0) const
        {
            return env->callBooleanMethod(this$, mids$[mid_add_290588e2], a0.this$);
        }

        void AbstractList::add(jint a0, const ::java::lang::Object & a1) const
        {
            env->callVoidMethod(this$, mids$[mid_add_f7cd74a4], a0, a1.this$);
        }

        jboolean AbstractList::addAll(const ::java::util::Collection & a0) const
        {
            return env->callBooleanMethod(this$, mids$[mid_addAll_9bfb3701], a0.this$);
        }

        jboolean AbstractList::addAll(jint a0, const ::java::util::Collection & a1) const
        {
            return env->callBooleanMethod(this$, mids$[mid_addAll_006cd2b7], a0, a1.this$);
        }

        void AbstractList::clear() const
        {
            env->callVoidMethod(this$, mids$[mid_clear_54c6a166]);
        }

        jboolean AbstractList::contains(const ::java::lang::Object & a0) const
        {
            return env->callBooleanMethod(this$, mids$[mid_contains_290588e2], a0.this$);
        }

        jboolean AbstractList::containsAll(const ::java::util::Collection & a0) const
        {
            return env->callBooleanMethod(this$, mids$[mid_containsAll_9bfb3701], a0.this$);
        }

        jboolean AbstractList::equals(const ::java::lang::Object & a0) const
        {
            return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        ::java::lang::Object AbstractList::get(jint a0) const
        {
            return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_get_29be6a55], a0));
        }

        jint AbstractList::hashCode() const
        {
            return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        jint AbstractList::indexOf(const ::java::lang::Object & a0) const
        {
            return env->callIntMethod(this$, mids$[mid_indexOf_290588f1], a0.this$);
        }

        jboolean AbstractList::isEmpty() const
        {
            return env->callBooleanMethod(this$, mids$[mid_isEmpty_54c6a16a]);
        }

        ::java::util::Iterator AbstractList::iterator() const
        {
            return ::java::util::Iterator(env->callObjectMethod(this$, mids$[mid_iterator_40858c90]));
        }

        jint AbstractList::lastIndexOf(const ::java::lang::Object & a0) const
        {
            return env->callIntMethod(this$, mids$[mid_lastIndexOf_290588f1], a0.this$);
        }

        ::java::util::ListIterator AbstractList::listIterator() const
        {
            return ::java::util::ListIterator(env->callObjectMethod(this$, mids$[mid_listIterator_b5be4e14]));
        }

        ::java::util::ListIterator AbstractList::listIterator(jint a0) const
        {
            return ::java::util::ListIterator(env->callObjectMethod(this$, mids$[mid_listIterator_4145ee6a], a0));
        }

        ::java::lang::Object AbstractList::remove(jint a0) const
        {
            return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_remove_29be6a55], a0));
        }

        jboolean AbstractList::remove(const ::java::lang::Object & a0) const
        {
            return env->callBooleanMethod(this$, mids$[mid_remove_290588e2], a0.this$);
        }

        jboolean AbstractList::removeAll(const ::java::util::Collection & a0) const
        {
            return env->callBooleanMethod(this$, mids$[mid_removeAll_9bfb3701], a0.this$);
        }

        jboolean AbstractList::retainAll(const ::java::util::Collection & a0) const
        {
            return env->callBooleanMethod(this$, mids$[mid_retainAll_9bfb3701], a0.this$);
        }

        ::java::lang::Object AbstractList::set(jint a0, const ::java::lang::Object & a1) const
        {
            return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_set_211591b1], a0, a1.this$));
        }

        jint AbstractList::size() const
        {
            return env->callIntMethod(this$, mids$[mid_size_54c6a179]);
        }

        ::java::util::List AbstractList::subList(jint a0, jint a1) const
        {
            return ::java::util::List(env->callObjectMethod(this$, mids$[mid_subList_6bc635fe], a0, a1));
        }

        JArray< ::java::lang::Object > AbstractList::toArray() const
        {
            return JArray< ::java::lang::Object >(env->callObjectMethod(this$, mids$[mid_toArray_94e49c77]));
        }

        JArray< ::java::lang::Object > AbstractList::toArray(const JArray< ::java::lang::Object > & a0) const
        {
            return JArray< ::java::lang::Object >(env->callObjectMethod(this$, mids$[mid_toArray_ae67dbcf], a0.this$));
        }
    }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
    namespace util {
        static PyObject *t_AbstractList_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_AbstractList_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_AbstractList_of_(t_AbstractList *self, PyObject *args);
        static PyObject *t_AbstractList_add(t_AbstractList *self, PyObject *args);
        static PyObject *t_AbstractList_addAll(t_AbstractList *self, PyObject *args);
        static PyObject *t_AbstractList_clear(t_AbstractList *self, PyObject *args);
        static PyObject *t_AbstractList_contains(t_AbstractList *self, PyObject *args);
        static PyObject *t_AbstractList_containsAll(t_AbstractList *self, PyObject *args);
        static PyObject *t_AbstractList_equals(t_AbstractList *self, PyObject *args);
        static PyObject *t_AbstractList_get(t_AbstractList *self, PyObject *arg);
        static PyObject *t_AbstractList_hashCode(t_AbstractList *self, PyObject *args);
        static PyObject *t_AbstractList_indexOf(t_AbstractList *self, PyObject *arg);
        static PyObject *t_AbstractList_isEmpty(t_AbstractList *self, PyObject *args);
        static PyObject *t_AbstractList_iterator(t_AbstractList *self, PyObject *args);
        static PyObject *t_AbstractList_lastIndexOf(t_AbstractList *self, PyObject *arg);
        static PyObject *t_AbstractList_listIterator(t_AbstractList *self, PyObject *args);
        static PyObject *t_AbstractList_remove(t_AbstractList *self, PyObject *args);
        static PyObject *t_AbstractList_removeAll(t_AbstractList *self, PyObject *args);
        static PyObject *t_AbstractList_retainAll(t_AbstractList *self, PyObject *args);
        static PyObject *t_AbstractList_set(t_AbstractList *self, PyObject *args);
        static PyObject *t_AbstractList_size(t_AbstractList *self, PyObject *args);
        static PyObject *t_AbstractList_subList(t_AbstractList *self, PyObject *args);
        static PyObject *t_AbstractList_toArray(t_AbstractList *self, PyObject *args);
        static PyObject *t_AbstractList_get__empty(t_AbstractList *self, void *data);
        static PyObject *t_AbstractList_get__parameters_(t_AbstractList *self, void *data);
        static PyGetSetDef t_AbstractList__fields_[] = {
            DECLARE_GET_FIELD(t_AbstractList, empty),
            DECLARE_GET_FIELD(t_AbstractList, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_AbstractList__methods_[] = {
            DECLARE_METHOD(t_AbstractList, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_AbstractList, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_AbstractList, of_, METH_VARARGS),
            DECLARE_METHOD(t_AbstractList, add, METH_VARARGS),
            DECLARE_METHOD(t_AbstractList, addAll, METH_VARARGS),
            DECLARE_METHOD(t_AbstractList, clear, METH_VARARGS),
            DECLARE_METHOD(t_AbstractList, contains, METH_VARARGS),
            DECLARE_METHOD(t_AbstractList, containsAll, METH_VARARGS),
            DECLARE_METHOD(t_AbstractList, equals, METH_VARARGS),
            DECLARE_METHOD(t_AbstractList, get, METH_O),
            DECLARE_METHOD(t_AbstractList, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_AbstractList, indexOf, METH_O),
            DECLARE_METHOD(t_AbstractList, isEmpty, METH_VARARGS),
            DECLARE_METHOD(t_AbstractList, iterator, METH_VARARGS),
            DECLARE_METHOD(t_AbstractList, lastIndexOf, METH_O),
            DECLARE_METHOD(t_AbstractList, listIterator, METH_VARARGS),
            DECLARE_METHOD(t_AbstractList, remove, METH_VARARGS),
            DECLARE_METHOD(t_AbstractList, removeAll, METH_VARARGS),
            DECLARE_METHOD(t_AbstractList, retainAll, METH_VARARGS),
            DECLARE_METHOD(t_AbstractList, set, METH_VARARGS),
            DECLARE_METHOD(t_AbstractList, size, METH_VARARGS),
            DECLARE_METHOD(t_AbstractList, subList, METH_VARARGS),
            DECLARE_METHOD(t_AbstractList, toArray, METH_VARARGS),
            { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(AbstractList, t_AbstractList, ::java::util::AbstractCollection, AbstractList, abstract_init, ((PyObject *(*)(t_AbstractList *)) get_generic_iterator< t_AbstractList >), 0, t_AbstractList__fields_, 0, 0);
        PyObject *t_AbstractList::wrap_Object(const AbstractList& object, PyTypeObject *E)
        {
            PyObject *obj = t_AbstractList::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
                t_AbstractList *self = (t_AbstractList *) obj;
                self->parameters[0] = E;
            }
            return obj;
        }

        PyObject *t_AbstractList::wrap_jobject(const jobject& object, PyTypeObject *E)
        {
            PyObject *obj = t_AbstractList::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
                t_AbstractList *self = (t_AbstractList *) obj;
                self->parameters[0] = E;
            }
            return obj;
        }

        void t_AbstractList::install(PyObject *module)
        {
            installType(&PY_TYPE(AbstractList), module, "AbstractList", 0);
        }

        void t_AbstractList::initialize(PyObject *module)
        {
            PyDict_SetItemString(PY_TYPE(AbstractList).tp_dict, "class_", make_descriptor(AbstractList::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(AbstractList).tp_dict, "wrapfn_", make_descriptor(t_AbstractList::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(AbstractList).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_AbstractList_cast_(PyTypeObject *type, PyObject *arg)
        {
            if (!(arg = castCheck(arg, AbstractList::initializeClass, 1)))
                return NULL;
            return t_AbstractList::wrap_Object(AbstractList(((t_AbstractList *) arg)->object.this$));
        }
        static PyObject *t_AbstractList_instance_(PyTypeObject *type, PyObject *arg)
        {
            if (!castCheck(arg, AbstractList::initializeClass, 0))
                Py_RETURN_FALSE;
            Py_RETURN_TRUE;
        }

        static PyObject *t_AbstractList_of_(t_AbstractList *self, PyObject *args)
        {
            if (!parseArg(args, "T", 1, &(self->parameters)))
                Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static PyObject *t_AbstractList_add(t_AbstractList *self, PyObject *args)
        {
            switch (PyTuple_GET_SIZE(args)) {
              case 1:
                {
                    ::java::lang::Object a0((jobject) NULL);
                    jboolean result;

                    if (!parseArgs(args, "O", self->parameters[0], &a0))
                    {
                        OBJ_CALL(result = self->object.add(a0));
                        Py_RETURN_BOOL(result);
                    }
                }
                break;
              case 2:
                {
                    jint a0;
                    ::java::lang::Object a1((jobject) NULL);

                    if (!parseArgs(args, "IO", self->parameters[0], &a0, &a1))
                    {
                        OBJ_CALL(self->object.add(a0, a1));
                        Py_RETURN_NONE;
                    }
                }
            }

            return callSuper(&PY_TYPE(AbstractList), (PyObject *) self, "add", args, 2);
        }

        static PyObject *t_AbstractList_addAll(t_AbstractList *self, PyObject *args)
        {
            switch (PyTuple_GET_SIZE(args)) {
              case 1:
                {
                    ::java::util::Collection a0((jobject) NULL);
                    PyTypeObject **p0;
                    jboolean result;

                    if (!parseArgs(args, "K", ::java::util::Collection::initializeClass, &a0, &p0, ::java::util::t_Collection::parameters_))
                    {
                        OBJ_CALL(result = self->object.addAll(a0));
                        Py_RETURN_BOOL(result);
                    }
                }
                break;
              case 2:
                {
                    jint a0;
                    ::java::util::Collection a1((jobject) NULL);
                    PyTypeObject **p1;
                    jboolean result;

                    if (!parseArgs(args, "IK", ::java::util::Collection::initializeClass, &a0, &a1, &p1, ::java::util::t_Collection::parameters_))
                    {
                        OBJ_CALL(result = self->object.addAll(a0, a1));
                        Py_RETURN_BOOL(result);
                    }
                }
            }

            return callSuper(&PY_TYPE(AbstractList), (PyObject *) self, "addAll", args, 2);
        }

        static PyObject *t_AbstractList_clear(t_AbstractList *self, PyObject *args)
        {

            if (!parseArgs(args, ""))
            {
                OBJ_CALL(self->object.clear());
                Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(AbstractList), (PyObject *) self, "clear", args, 2);
        }

        static PyObject *t_AbstractList_contains(t_AbstractList *self, PyObject *args)
        {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
                OBJ_CALL(result = self->object.contains(a0));
                Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(AbstractList), (PyObject *) self, "contains", args, 2);
        }

        static PyObject *t_AbstractList_containsAll(t_AbstractList *self, PyObject *args)
        {
            ::java::util::Collection a0((jobject) NULL);
            PyTypeObject **p0;
            jboolean result;

            if (!parseArgs(args, "K", ::java::util::Collection::initializeClass, &a0, &p0, ::java::util::t_Collection::parameters_))
            {
                OBJ_CALL(result = self->object.containsAll(a0));
                Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(AbstractList), (PyObject *) self, "containsAll", args, 2);
        }

        static PyObject *t_AbstractList_equals(t_AbstractList *self, PyObject *args)
        {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
                OBJ_CALL(result = self->object.equals(a0));
                Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(AbstractList), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_AbstractList_get(t_AbstractList *self, PyObject *arg)
        {
            jint a0;
            ::java::lang::Object result((jobject) NULL);

            if (!parseArg(arg, "I", &a0))
            {
                OBJ_CALL(result = self->object.get(a0));
                return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "get", arg);
            return NULL;
        }

        static PyObject *t_AbstractList_hashCode(t_AbstractList *self, PyObject *args)
        {
            jint result;

            if (!parseArgs(args, ""))
            {
                OBJ_CALL(result = self->object.hashCode());
                return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(AbstractList), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_AbstractList_indexOf(t_AbstractList *self, PyObject *arg)
        {
            ::java::lang::Object a0((jobject) NULL);
            jint result;

            if (!parseArg(arg, "o", &a0))
            {
                OBJ_CALL(result = self->object.indexOf(a0));
                return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "indexOf", arg);
            return NULL;
        }

        static PyObject *t_AbstractList_isEmpty(t_AbstractList *self, PyObject *args)
        {
            jboolean result;

            if (!parseArgs(args, ""))
            {
                OBJ_CALL(result = self->object.isEmpty());
                Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(AbstractList), (PyObject *) self, "isEmpty", args, 2);
        }

        static PyObject *t_AbstractList_iterator(t_AbstractList *self, PyObject *args)
        {
            ::java::util::Iterator result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
                OBJ_CALL(result = self->object.iterator());
                return ::java::util::t_Iterator::wrap_Object(result, self->parameters[0]);
            }

            return callSuper(&PY_TYPE(AbstractList), (PyObject *) self, "iterator", args, 2);
        }

        static PyObject *t_AbstractList_lastIndexOf(t_AbstractList *self, PyObject *arg)
        {
            ::java::lang::Object a0((jobject) NULL);
            jint result;

            if (!parseArg(arg, "o", &a0))
            {
                OBJ_CALL(result = self->object.lastIndexOf(a0));
                return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "lastIndexOf", arg);
            return NULL;
        }

        static PyObject *t_AbstractList_listIterator(t_AbstractList *self, PyObject *args)
        {
            switch (PyTuple_GET_SIZE(args)) {
              case 0:
                {
                    ::java::util::ListIterator result((jobject) NULL);
                    OBJ_CALL(result = self->object.listIterator());
                    return ::java::util::t_ListIterator::wrap_Object(result, self->parameters[0]);
                }
                break;
              case 1:
                {
                    jint a0;
                    ::java::util::ListIterator result((jobject) NULL);

                    if (!parseArgs(args, "I", &a0))
                    {
                        OBJ_CALL(result = self->object.listIterator(a0));
                        return ::java::util::t_ListIterator::wrap_Object(result, self->parameters[0]);
                    }
                }
            }

            PyErr_SetArgsError((PyObject *) self, "listIterator", args);
            return NULL;
        }

        static PyObject *t_AbstractList_remove(t_AbstractList *self, PyObject *args)
        {
            switch (PyTuple_GET_SIZE(args)) {
              case 1:
                {
                    jint a0;
                    ::java::lang::Object result((jobject) NULL);

                    if (!parseArgs(args, "I", &a0))
                    {
                        OBJ_CALL(result = self->object.remove(a0));
                        return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
                    }
                }
                {
                    ::java::lang::Object a0((jobject) NULL);
                    jboolean result;

                    if (!parseArgs(args, "o", &a0))
                    {
                        OBJ_CALL(result = self->object.remove(a0));
                        Py_RETURN_BOOL(result);
                    }
                }
            }

            return callSuper(&PY_TYPE(AbstractList), (PyObject *) self, "remove", args, 2);
        }

        static PyObject *t_AbstractList_removeAll(t_AbstractList *self, PyObject *args)
        {
            ::java::util::Collection a0((jobject) NULL);
            PyTypeObject **p0;
            jboolean result;

            if (!parseArgs(args, "K", ::java::util::Collection::initializeClass, &a0, &p0, ::java::util::t_Collection::parameters_))
            {
                OBJ_CALL(result = self->object.removeAll(a0));
                Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(AbstractList), (PyObject *) self, "removeAll", args, 2);
        }

        static PyObject *t_AbstractList_retainAll(t_AbstractList *self, PyObject *args)
        {
            ::java::util::Collection a0((jobject) NULL);
            PyTypeObject **p0;
            jboolean result;

            if (!parseArgs(args, "K", ::java::util::Collection::initializeClass, &a0, &p0, ::java::util::t_Collection::parameters_))
            {
                OBJ_CALL(result = self->object.retainAll(a0));
                Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(AbstractList), (PyObject *) self, "retainAll", args, 2);
        }

        static PyObject *t_AbstractList_set(t_AbstractList *self, PyObject *args)
        {
            jint a0;
            ::java::lang::Object a1((jobject) NULL);
            ::java::lang::Object result((jobject) NULL);

            if (!parseArgs(args, "IO", self->parameters[0], &a0, &a1))
            {
                OBJ_CALL(result = self->object.set(a0, a1));
                return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "set", args);
            return NULL;
        }

        static PyObject *t_AbstractList_size(t_AbstractList *self, PyObject *args)
        {
            jint result;

            if (!parseArgs(args, ""))
            {
                OBJ_CALL(result = self->object.size());
                return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(AbstractList), (PyObject *) self, "size", args, 2);
        }

        static PyObject *t_AbstractList_subList(t_AbstractList *self, PyObject *args)
        {
            jint a0;
            jint a1;
            ::java::util::List result((jobject) NULL);

            if (!parseArgs(args, "II", &a0, &a1))
            {
                OBJ_CALL(result = self->object.subList(a0, a1));
                return ::java::util::t_List::wrap_Object(result, self->parameters[0]);
            }

            PyErr_SetArgsError((PyObject *) self, "subList", args);
            return NULL;
        }

        static PyObject *t_AbstractList_toArray(t_AbstractList *self, PyObject *args)
        {
            switch (PyTuple_GET_SIZE(args)) {
              case 0:
                {
                    JArray< ::java::lang::Object > result((jobject) NULL);
                    OBJ_CALL(result = self->object.toArray());
                    return JArray<jobject>(result.this$).wrap(::java::lang::t_Object::wrap_jobject);
                }
                break;
              case 1:
                {
                    JArray< ::java::lang::Object > a0((jobject) NULL);
                    JArray< ::java::lang::Object > result((jobject) NULL);

                    if (!parseArgs(args, "[o", &a0))
                    {
                        OBJ_CALL(result = self->object.toArray(a0));
                        return JArray<jobject>(result.this$).wrap(::java::lang::t_Object::wrap_jobject);
                    }
                }
            }

            return callSuper(&PY_TYPE(AbstractList), (PyObject *) self, "toArray", args, 2);
        }
        static PyObject *t_AbstractList_get__parameters_(t_AbstractList *self, void *data)
        {
            return typeParameters(self->parameters, sizeof(self->parameters));
        }

        static PyObject *t_AbstractList_get__empty(t_AbstractList *self, void *data)
        {
            jboolean value;
            OBJ_CALL(value = self->object.isEmpty());
            Py_RETURN_BOOL(value);
        }
    }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/io/BufferedWriter.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace java {
    namespace io {

        ::java::lang::Class *BufferedWriter::class$ = NULL;
        jmethodID *BufferedWriter::mids$ = NULL;

        jclass BufferedWriter::initializeClass()
        {
            if (!class$)
            {

                jclass cls = (jclass) env->findClass("java/io/BufferedWriter");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_5bcd5850] = env->getMethodID(cls, "<init>", "(Ljava/io/Writer;)V");
                mids$[mid_init$_7f1d4d96] = env->getMethodID(cls, "<init>", "(Ljava/io/Writer;I)V");
                mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
                mids$[mid_flush_54c6a166] = env->getMethodID(cls, "flush", "()V");
                mids$[mid_newLine_54c6a166] = env->getMethodID(cls, "newLine", "()V");
                mids$[mid_write_39c7bd3c] = env->getMethodID(cls, "write", "(I)V");
                mids$[mid_write_6f0bb356] = env->getMethodID(cls, "write", "([CII)V");
                mids$[mid_write_555f322c] = env->getMethodID(cls, "write", "(Ljava/lang/String;II)V");

                class$ = (::java::lang::Class *) new JObject(cls);
            }
            return (jclass) class$->this$;
        }

        BufferedWriter::BufferedWriter(const ::java::io::Writer & a0) : ::java::io::Writer(env->newObject(initializeClass, &mids$, mid_init$_5bcd5850, a0.this$)) {}

        BufferedWriter::BufferedWriter(const ::java::io::Writer & a0, jint a1) : ::java::io::Writer(env->newObject(initializeClass, &mids$, mid_init$_7f1d4d96, a0.this$, a1)) {}

        void BufferedWriter::close() const
        {
            env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
        }

        void BufferedWriter::flush() const
        {
            env->callVoidMethod(this$, mids$[mid_flush_54c6a166]);
        }

        void BufferedWriter::newLine() const
        {
            env->callVoidMethod(this$, mids$[mid_newLine_54c6a166]);
        }

        void BufferedWriter::write(jint a0) const
        {
            env->callVoidMethod(this$, mids$[mid_write_39c7bd3c], a0);
        }

        void BufferedWriter::write(const JArray< jchar > & a0, jint a1, jint a2) const
        {
            env->callVoidMethod(this$, mids$[mid_write_6f0bb356], a0.this$, a1, a2);
        }

        void BufferedWriter::write(const ::java::lang::String & a0, jint a1, jint a2) const
        {
            env->callVoidMethod(this$, mids$[mid_write_555f322c], a0.this$, a1, a2);
        }
    }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
    namespace io {
        static PyObject *t_BufferedWriter_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_BufferedWriter_instance_(PyTypeObject *type, PyObject *arg);
        static int t_BufferedWriter_init_(t_BufferedWriter *self, PyObject *args, PyObject *kwds);
        static PyObject *t_BufferedWriter_close(t_BufferedWriter *self, PyObject *args);
        static PyObject *t_BufferedWriter_flush(t_BufferedWriter *self, PyObject *args);
        static PyObject *t_BufferedWriter_newLine(t_BufferedWriter *self);
        static PyObject *t_BufferedWriter_write(t_BufferedWriter *self, PyObject *args);

        static PyMethodDef t_BufferedWriter__methods_[] = {
            DECLARE_METHOD(t_BufferedWriter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BufferedWriter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BufferedWriter, close, METH_VARARGS),
            DECLARE_METHOD(t_BufferedWriter, flush, METH_VARARGS),
            DECLARE_METHOD(t_BufferedWriter, newLine, METH_NOARGS),
            DECLARE_METHOD(t_BufferedWriter, write, METH_VARARGS),
            { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(BufferedWriter, t_BufferedWriter, ::java::io::Writer, BufferedWriter, t_BufferedWriter_init_, 0, 0, 0, 0, 0);

        void t_BufferedWriter::install(PyObject *module)
        {
            installType(&PY_TYPE(BufferedWriter), module, "BufferedWriter", 0);
        }

        void t_BufferedWriter::initialize(PyObject *module)
        {
            PyDict_SetItemString(PY_TYPE(BufferedWriter).tp_dict, "class_", make_descriptor(BufferedWriter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(BufferedWriter).tp_dict, "wrapfn_", make_descriptor(t_BufferedWriter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(BufferedWriter).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_BufferedWriter_cast_(PyTypeObject *type, PyObject *arg)
        {
            if (!(arg = castCheck(arg, BufferedWriter::initializeClass, 1)))
                return NULL;
            return t_BufferedWriter::wrap_Object(BufferedWriter(((t_BufferedWriter *) arg)->object.this$));
        }
        static PyObject *t_BufferedWriter_instance_(PyTypeObject *type, PyObject *arg)
        {
            if (!castCheck(arg, BufferedWriter::initializeClass, 0))
                Py_RETURN_FALSE;
            Py_RETURN_TRUE;
        }

        static int t_BufferedWriter_init_(t_BufferedWriter *self, PyObject *args, PyObject *kwds)
        {
            switch (PyTuple_GET_SIZE(args)) {
              case 1:
                {
                    ::java::io::Writer a0((jobject) NULL);
                    BufferedWriter object((jobject) NULL);

                    if (!parseArgs(args, "k", ::java::io::Writer::initializeClass, &a0))
                    {
                        INT_CALL(object = BufferedWriter(a0));
                        self->object = object;
                        break;
                    }
                }
                goto err;
              case 2:
                {
                    ::java::io::Writer a0((jobject) NULL);
                    jint a1;
                    BufferedWriter object((jobject) NULL);

                    if (!parseArgs(args, "kI", ::java::io::Writer::initializeClass, &a0, &a1))
                    {
                        INT_CALL(object = BufferedWriter(a0, a1));
                        self->object = object;
                        break;
                    }
                }
              default:
              err:
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
            }

            return 0;
        }

        static PyObject *t_BufferedWriter_close(t_BufferedWriter *self, PyObject *args)
        {

            if (!parseArgs(args, ""))
            {
                OBJ_CALL(self->object.close());
                Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(BufferedWriter), (PyObject *) self, "close", args, 2);
        }

        static PyObject *t_BufferedWriter_flush(t_BufferedWriter *self, PyObject *args)
        {

            if (!parseArgs(args, ""))
            {
                OBJ_CALL(self->object.flush());
                Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(BufferedWriter), (PyObject *) self, "flush", args, 2);
        }

        static PyObject *t_BufferedWriter_newLine(t_BufferedWriter *self)
        {
            OBJ_CALL(self->object.newLine());
            Py_RETURN_NONE;
        }

        static PyObject *t_BufferedWriter_write(t_BufferedWriter *self, PyObject *args)
        {
            switch (PyTuple_GET_SIZE(args)) {
              case 1:
                {
                    jint a0;

                    if (!parseArgs(args, "I", &a0))
                    {
                        OBJ_CALL(self->object.write(a0));
                        Py_RETURN_NONE;
                    }
                }
                break;
              case 3:
                {
                    JArray< jchar > a0((jobject) NULL);
                    jint a1;
                    jint a2;

                    if (!parseArgs(args, "[CII", &a0, &a1, &a2))
                    {
                        OBJ_CALL(self->object.write(a0, a1, a2));
                        Py_RETURN_NONE;
                    }
                }
                {
                    ::java::lang::String a0((jobject) NULL);
                    jint a1;
                    jint a2;

                    if (!parseArgs(args, "sII", &a0, &a1, &a2))
                    {
                        OBJ_CALL(self->object.write(a0, a1, a2));
                        Py_RETURN_NONE;
                    }
                }
            }

            return callSuper(&PY_TYPE(BufferedWriter), (PyObject *) self, "write", args, 2);
        }
    }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Throwable.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace java {
    namespace lang {

        ::java::lang::Class *IllegalArgumentException::class$ = NULL;
        jmethodID *IllegalArgumentException::mids$ = NULL;

        jclass IllegalArgumentException::initializeClass()
        {
            if (!class$)
            {

                jclass cls = (jclass) env->findClass("java/lang/IllegalArgumentException");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
                mids$[mid_init$_c5ec8ca4] = env->getMethodID(cls, "<init>", "(Ljava/lang/Throwable;)V");
                mids$[mid_init$_01646a2e] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Ljava/lang/Throwable;)V");

                class$ = (::java::lang::Class *) new JObject(cls);
            }
            return (jclass) class$->this$;
        }

        IllegalArgumentException::IllegalArgumentException() : ::java::lang::RuntimeException(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        IllegalArgumentException::IllegalArgumentException(const ::java::lang::String & a0) : ::java::lang::RuntimeException(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}

        IllegalArgumentException::IllegalArgumentException(const ::java::lang::Throwable & a0) : ::java::lang::RuntimeException(env->newObject(initializeClass, &mids$, mid_init$_c5ec8ca4, a0.this$)) {}

        IllegalArgumentException::IllegalArgumentException(const ::java::lang::String & a0, const ::java::lang::Throwable & a1) : ::java::lang::RuntimeException(env->newObject(initializeClass, &mids$, mid_init$_01646a2e, a0.this$, a1.this$)) {}
    }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
    namespace lang {
        static PyObject *t_IllegalArgumentException_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IllegalArgumentException_instance_(PyTypeObject *type, PyObject *arg);
        static int t_IllegalArgumentException_init_(t_IllegalArgumentException *self, PyObject *args, PyObject *kwds);

        static PyMethodDef t_IllegalArgumentException__methods_[] = {
            DECLARE_METHOD(t_IllegalArgumentException, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_IllegalArgumentException, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(IllegalArgumentException, t_IllegalArgumentException, ::java::lang::RuntimeException, IllegalArgumentException, t_IllegalArgumentException_init_, 0, 0, 0, 0, 0);

        void t_IllegalArgumentException::install(PyObject *module)
        {
            installType(&PY_TYPE(IllegalArgumentException), module, "IllegalArgumentException", 0);
        }

        void t_IllegalArgumentException::initialize(PyObject *module)
        {
            PyDict_SetItemString(PY_TYPE(IllegalArgumentException).tp_dict, "class_", make_descriptor(IllegalArgumentException::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(IllegalArgumentException).tp_dict, "wrapfn_", make_descriptor(t_IllegalArgumentException::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(IllegalArgumentException).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_IllegalArgumentException_cast_(PyTypeObject *type, PyObject *arg)
        {
            if (!(arg = castCheck(arg, IllegalArgumentException::initializeClass, 1)))
                return NULL;
            return t_IllegalArgumentException::wrap_Object(IllegalArgumentException(((t_IllegalArgumentException *) arg)->object.this$));
        }
        static PyObject *t_IllegalArgumentException_instance_(PyTypeObject *type, PyObject *arg)
        {
            if (!castCheck(arg, IllegalArgumentException::initializeClass, 0))
                Py_RETURN_FALSE;
            Py_RETURN_TRUE;
        }

        static int t_IllegalArgumentException_init_(t_IllegalArgumentException *self, PyObject *args, PyObject *kwds)
        {
            switch (PyTuple_GET_SIZE(args)) {
              case 0:
                {
                    IllegalArgumentException object((jobject) NULL);

                    INT_CALL(object = IllegalArgumentException());
                    self->object = object;
                    break;
                }
                goto err;
              case 1:
                {
                    ::java::lang::String a0((jobject) NULL);
                    IllegalArgumentException object((jobject) NULL);

                    if (!parseArgs(args, "s", &a0))
                    {
                        INT_CALL(object = IllegalArgumentException(a0));
                        self->object = object;
                        break;
                    }
                }
                {
                    ::java::lang::Throwable a0((jobject) NULL);
                    IllegalArgumentException object((jobject) NULL);

                    if (!parseArgs(args, "k", ::java::lang::Throwable::initializeClass, &a0))
                    {
                        INT_CALL(object = IllegalArgumentException(a0));
                        self->object = object;
                        break;
                    }
                }
                goto err;
              case 2:
                {
                    ::java::lang::String a0((jobject) NULL);
                    ::java::lang::Throwable a1((jobject) NULL);
                    IllegalArgumentException object((jobject) NULL);

                    if (!parseArgs(args, "sk", ::java::lang::Throwable::initializeClass, &a0, &a1))
                    {
                        INT_CALL(object = IllegalArgumentException(a0, a1));
                        self->object = object;
                        break;
                    }
                }
              default:
              err:
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
            }

            return 0;
        }
    }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/util/Vector.h"
#include "java/util/Collection.h"
#include "java/util/List.h"
#include "java/lang/Cloneable.h"
#include "java/util/RandomAccess.h"
#include "java/util/Enumeration.h"
#include "java/io/Serializable.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "java/lang/Object.h"
#include "JArray.h"

namespace java {
    namespace util {

        ::java::lang::Class *Vector::class$ = NULL;
        jmethodID *Vector::mids$ = NULL;

        jclass Vector::initializeClass()
        {
            if (!class$)
            {

                jclass cls = (jclass) env->findClass("java/util/Vector");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                mids$[mid_init$_39c7bd3c] = env->getMethodID(cls, "<init>", "(I)V");
                mids$[mid_init$_9bfb370d] = env->getMethodID(cls, "<init>", "(Ljava/util/Collection;)V");
                mids$[mid_init$_d8d154a6] = env->getMethodID(cls, "<init>", "(II)V");
                mids$[mid_add_290588e2] = env->getMethodID(cls, "add", "(Ljava/lang/Object;)Z");
                mids$[mid_add_f7cd74a4] = env->getMethodID(cls, "add", "(ILjava/lang/Object;)V");
                mids$[mid_addAll_9bfb3701] = env->getMethodID(cls, "addAll", "(Ljava/util/Collection;)Z");
                mids$[mid_addAll_006cd2b7] = env->getMethodID(cls, "addAll", "(ILjava/util/Collection;)Z");
                mids$[mid_addElement_290588ee] = env->getMethodID(cls, "addElement", "(Ljava/lang/Object;)V");
                mids$[mid_capacity_54c6a179] = env->getMethodID(cls, "capacity", "()I");
                mids$[mid_clear_54c6a166] = env->getMethodID(cls, "clear", "()V");
                mids$[mid_clone_846352c3] = env->getMethodID(cls, "clone", "()Ljava/lang/Object;");
                mids$[mid_contains_290588e2] = env->getMethodID(cls, "contains", "(Ljava/lang/Object;)Z");
                mids$[mid_containsAll_9bfb3701] = env->getMethodID(cls, "containsAll", "(Ljava/util/Collection;)Z");
                mids$[mid_copyInto_c0f5dada] = env->getMethodID(cls, "copyInto", "([Ljava/lang/Object;)V");
                mids$[mid_elementAt_29be6a55] = env->getMethodID(cls, "elementAt", "(I)Ljava/lang/Object;");
                mids$[mid_elements_39f88070] = env->getMethodID(cls, "elements", "()Ljava/util/Enumeration;");
                mids$[mid_ensureCapacity_39c7bd3c] = env->getMethodID(cls, "ensureCapacity", "(I)V");
                mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
                mids$[mid_firstElement_846352c3] = env->getMethodID(cls, "firstElement", "()Ljava/lang/Object;");
                mids$[mid_get_29be6a55] = env->getMethodID(cls, "get", "(I)Ljava/lang/Object;");
                mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
                mids$[mid_indexOf_290588f1] = env->getMethodID(cls, "indexOf", "(Ljava/lang/Object;)I");
                mids$[mid_indexOf_8d1da273] = env->getMethodID(cls, "indexOf", "(Ljava/lang/Object;I)I");
                mids$[mid_insertElementAt_8d1da26c] = env->getMethodID(cls, "insertElementAt", "(Ljava/lang/Object;I)V");
                mids$[mid_isEmpty_54c6a16a] = env->getMethodID(cls, "isEmpty", "()Z");
                mids$[mid_lastElement_846352c3] = env->getMethodID(cls, "lastElement", "()Ljava/lang/Object;");
                mids$[mid_lastIndexOf_290588f1] = env->getMethodID(cls, "lastIndexOf", "(Ljava/lang/Object;)I");
                mids$[mid_lastIndexOf_8d1da273] = env->getMethodID(cls, "lastIndexOf", "(Ljava/lang/Object;I)I");
                mids$[mid_remove_29be6a55] = env->getMethodID(cls, "remove", "(I)Ljava/lang/Object;");
                mids$[mid_remove_290588e2] = env->getMethodID(cls, "remove", "(Ljava/lang/Object;)Z");
                mids$[mid_removeAll_9bfb3701] = env->getMethodID(cls, "removeAll", "(Ljava/util/Collection;)Z");
                mids$[mid_removeAllElements_54c6a166] = env->getMethodID(cls, "removeAllElements", "()V");
                mids$[mid_removeElement_290588e2] = env->getMethodID(cls, "removeElement", "(Ljava/lang/Object;)Z");
                mids$[mid_removeElementAt_39c7bd3c] = env->getMethodID(cls, "removeElementAt", "(I)V");
                mids$[mid_retainAll_9bfb3701] = env->getMethodID(cls, "retainAll", "(Ljava/util/Collection;)Z");
                mids$[mid_set_211591b1] = env->getMethodID(cls, "set", "(ILjava/lang/Object;)Ljava/lang/Object;");
                mids$[mid_setElementAt_8d1da26c] = env->getMethodID(cls, "setElementAt", "(Ljava/lang/Object;I)V");
                mids$[mid_setSize_39c7bd3c] = env->getMethodID(cls, "setSize", "(I)V");
                mids$[mid_size_54c6a179] = env->getMethodID(cls, "size", "()I");
                mids$[mid_subList_6bc635fe] = env->getMethodID(cls, "subList", "(II)Ljava/util/List;");
                mids$[mid_toArray_94e49c77] = env->getMethodID(cls, "toArray", "()[Ljava/lang/Object;");
                mids$[mid_toArray_ae67dbcf] = env->getMethodID(cls, "toArray", "([Ljava/lang/Object;)[Ljava/lang/Object;");
                mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
                mids$[mid_trimToSize_54c6a166] = env->getMethodID(cls, "trimToSize", "()V");
                mids$[mid_removeRange_d8d154a6] = env->getMethodID(cls, "removeRange", "(II)V");

                class$ = (::java::lang::Class *) new JObject(cls);
            }
            return (jclass) class$->this$;
        }

        Vector::Vector() : ::java::util::AbstractList(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        Vector::Vector(jint a0) : ::java::util::AbstractList(env->newObject(initializeClass, &mids$, mid_init$_39c7bd3c, a0)) {}

        Vector::Vector(const ::java::util::Collection & a0) : ::java::util::AbstractList(env->newObject(initializeClass, &mids$, mid_init$_9bfb370d, a0.this$)) {}

        Vector::Vector(jint a0, jint a1) : ::java::util::AbstractList(env->newObject(initializeClass, &mids$, mid_init$_d8d154a6, a0, a1)) {}

        jboolean Vector::add(const ::java::lang::Object & a0) const
        {
            return env->callBooleanMethod(this$, mids$[mid_add_290588e2], a0.this$);
        }

        void Vector::add(jint a0, const ::java::lang::Object & a1) const
        {
            env->callVoidMethod(this$, mids$[mid_add_f7cd74a4], a0, a1.this$);
        }

        jboolean Vector::addAll(const ::java::util::Collection & a0) const
        {
            return env->callBooleanMethod(this$, mids$[mid_addAll_9bfb3701], a0.this$);
        }

        jboolean Vector::addAll(jint a0, const ::java::util::Collection & a1) const
        {
            return env->callBooleanMethod(this$, mids$[mid_addAll_006cd2b7], a0, a1.this$);
        }

        void Vector::addElement(const ::java::lang::Object & a0) const
        {
            env->callVoidMethod(this$, mids$[mid_addElement_290588ee], a0.this$);
        }

        jint Vector::capacity() const
        {
            return env->callIntMethod(this$, mids$[mid_capacity_54c6a179]);
        }

        void Vector::clear() const
        {
            env->callVoidMethod(this$, mids$[mid_clear_54c6a166]);
        }

        ::java::lang::Object Vector::clone() const
        {
            return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_clone_846352c3]));
        }

        jboolean Vector::contains(const ::java::lang::Object & a0) const
        {
            return env->callBooleanMethod(this$, mids$[mid_contains_290588e2], a0.this$);
        }

        jboolean Vector::containsAll(const ::java::util::Collection & a0) const
        {
            return env->callBooleanMethod(this$, mids$[mid_containsAll_9bfb3701], a0.this$);
        }

        void Vector::copyInto(const JArray< ::java::lang::Object > & a0) const
        {
            env->callVoidMethod(this$, mids$[mid_copyInto_c0f5dada], a0.this$);
        }

        ::java::lang::Object Vector::elementAt(jint a0) const
        {
            return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_elementAt_29be6a55], a0));
        }

        ::java::util::Enumeration Vector::elements() const
        {
            return ::java::util::Enumeration(env->callObjectMethod(this$, mids$[mid_elements_39f88070]));
        }

        void Vector::ensureCapacity(jint a0) const
        {
            env->callVoidMethod(this$, mids$[mid_ensureCapacity_39c7bd3c], a0);
        }

        jboolean Vector::equals(const ::java::lang::Object & a0) const
        {
            return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        ::java::lang::Object Vector::firstElement() const
        {
            return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_firstElement_846352c3]));
        }

        ::java::lang::Object Vector::get(jint a0) const
        {
            return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_get_29be6a55], a0));
        }

        jint Vector::hashCode() const
        {
            return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        jint Vector::indexOf(const ::java::lang::Object & a0) const
        {
            return env->callIntMethod(this$, mids$[mid_indexOf_290588f1], a0.this$);
        }

        jint Vector::indexOf(const ::java::lang::Object & a0, jint a1) const
        {
            return env->callIntMethod(this$, mids$[mid_indexOf_8d1da273], a0.this$, a1);
        }

        void Vector::insertElementAt(const ::java::lang::Object & a0, jint a1) const
        {
            env->callVoidMethod(this$, mids$[mid_insertElementAt_8d1da26c], a0.this$, a1);
        }

        jboolean Vector::isEmpty() const
        {
            return env->callBooleanMethod(this$, mids$[mid_isEmpty_54c6a16a]);
        }

        ::java::lang::Object Vector::lastElement() const
        {
            return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_lastElement_846352c3]));
        }

        jint Vector::lastIndexOf(const ::java::lang::Object & a0) const
        {
            return env->callIntMethod(this$, mids$[mid_lastIndexOf_290588f1], a0.this$);
        }

        jint Vector::lastIndexOf(const ::java::lang::Object & a0, jint a1) const
        {
            return env->callIntMethod(this$, mids$[mid_lastIndexOf_8d1da273], a0.this$, a1);
        }

        ::java::lang::Object Vector::remove(jint a0) const
        {
            return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_remove_29be6a55], a0));
        }

        jboolean Vector::remove(const ::java::lang::Object & a0) const
        {
            return env->callBooleanMethod(this$, mids$[mid_remove_290588e2], a0.this$);
        }

        jboolean Vector::removeAll(const ::java::util::Collection & a0) const
        {
            return env->callBooleanMethod(this$, mids$[mid_removeAll_9bfb3701], a0.this$);
        }

        void Vector::removeAllElements() const
        {
            env->callVoidMethod(this$, mids$[mid_removeAllElements_54c6a166]);
        }

        jboolean Vector::removeElement(const ::java::lang::Object & a0) const
        {
            return env->callBooleanMethod(this$, mids$[mid_removeElement_290588e2], a0.this$);
        }

        void Vector::removeElementAt(jint a0) const
        {
            env->callVoidMethod(this$, mids$[mid_removeElementAt_39c7bd3c], a0);
        }

        jboolean Vector::retainAll(const ::java::util::Collection & a0) const
        {
            return env->callBooleanMethod(this$, mids$[mid_retainAll_9bfb3701], a0.this$);
        }

        ::java::lang::Object Vector::set(jint a0, const ::java::lang::Object & a1) const
        {
            return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_set_211591b1], a0, a1.this$));
        }

        void Vector::setElementAt(const ::java::lang::Object & a0, jint a1) const
        {
            env->callVoidMethod(this$, mids$[mid_setElementAt_8d1da26c], a0.this$, a1);
        }

        void Vector::setSize(jint a0) const
        {
            env->callVoidMethod(this$, mids$[mid_setSize_39c7bd3c], a0);
        }

        jint Vector::size() const
        {
            return env->callIntMethod(this$, mids$[mid_size_54c6a179]);
        }

        ::java::util::List Vector::subList(jint a0, jint a1) const
        {
            return ::java::util::List(env->callObjectMethod(this$, mids$[mid_subList_6bc635fe], a0, a1));
        }

        JArray< ::java::lang::Object > Vector::toArray() const
        {
            return JArray< ::java::lang::Object >(env->callObjectMethod(this$, mids$[mid_toArray_94e49c77]));
        }

        JArray< ::java::lang::Object > Vector::toArray(const JArray< ::java::lang::Object > & a0) const
        {
            return JArray< ::java::lang::Object >(env->callObjectMethod(this$, mids$[mid_toArray_ae67dbcf], a0.this$));
        }

        ::java::lang::String Vector::toString() const
        {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }

        void Vector::trimToSize() const
        {
            env->callVoidMethod(this$, mids$[mid_trimToSize_54c6a166]);
        }
    }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
    namespace util {
        static PyObject *t_Vector_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Vector_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Vector_of_(t_Vector *self, PyObject *args);
        static int t_Vector_init_(t_Vector *self, PyObject *args, PyObject *kwds);
        static PyObject *t_Vector_add(t_Vector *self, PyObject *args);
        static PyObject *t_Vector_addAll(t_Vector *self, PyObject *args);
        static PyObject *t_Vector_addElement(t_Vector *self, PyObject *arg);
        static PyObject *t_Vector_capacity(t_Vector *self);
        static PyObject *t_Vector_clear(t_Vector *self, PyObject *args);
        static PyObject *t_Vector_clone(t_Vector *self);
        static PyObject *t_Vector_contains(t_Vector *self, PyObject *args);
        static PyObject *t_Vector_containsAll(t_Vector *self, PyObject *args);
        static PyObject *t_Vector_copyInto(t_Vector *self, PyObject *arg);
        static PyObject *t_Vector_elementAt(t_Vector *self, PyObject *arg);
        static PyObject *t_Vector_elements(t_Vector *self);
        static PyObject *t_Vector_ensureCapacity(t_Vector *self, PyObject *arg);
        static PyObject *t_Vector_equals(t_Vector *self, PyObject *args);
        static PyObject *t_Vector_firstElement(t_Vector *self);
        static PyObject *t_Vector_get(t_Vector *self, PyObject *args);
        static PyObject *t_Vector_hashCode(t_Vector *self, PyObject *args);
        static PyObject *t_Vector_indexOf(t_Vector *self, PyObject *args);
        static PyObject *t_Vector_insertElementAt(t_Vector *self, PyObject *args);
        static PyObject *t_Vector_isEmpty(t_Vector *self, PyObject *args);
        static PyObject *t_Vector_lastElement(t_Vector *self);
        static PyObject *t_Vector_lastIndexOf(t_Vector *self, PyObject *args);
        static PyObject *t_Vector_remove(t_Vector *self, PyObject *args);
        static PyObject *t_Vector_removeAll(t_Vector *self, PyObject *args);
        static PyObject *t_Vector_removeAllElements(t_Vector *self);
        static PyObject *t_Vector_removeElement(t_Vector *self, PyObject *arg);
        static PyObject *t_Vector_removeElementAt(t_Vector *self, PyObject *arg);
        static PyObject *t_Vector_retainAll(t_Vector *self, PyObject *args);
        static PyObject *t_Vector_set(t_Vector *self, PyObject *args);
        static PyObject *t_Vector_setElementAt(t_Vector *self, PyObject *args);
        static PyObject *t_Vector_setSize(t_Vector *self, PyObject *arg);
        static PyObject *t_Vector_size(t_Vector *self, PyObject *args);
        static PyObject *t_Vector_subList(t_Vector *self, PyObject *args);
        static PyObject *t_Vector_toArray(t_Vector *self, PyObject *args);
        static PyObject *t_Vector_toString(t_Vector *self, PyObject *args);
        static PyObject *t_Vector_trimToSize(t_Vector *self);
        static PyObject *t_Vector_get__empty(t_Vector *self, void *data);
        static PyObject *t_Vector_get__parameters_(t_Vector *self, void *data);
        static PyGetSetDef t_Vector__fields_[] = {
            DECLARE_GET_FIELD(t_Vector, empty),
            DECLARE_GET_FIELD(t_Vector, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_Vector__methods_[] = {
            DECLARE_METHOD(t_Vector, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Vector, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Vector, of_, METH_VARARGS),
            DECLARE_METHOD(t_Vector, add, METH_VARARGS),
            DECLARE_METHOD(t_Vector, addAll, METH_VARARGS),
            DECLARE_METHOD(t_Vector, addElement, METH_O),
            DECLARE_METHOD(t_Vector, capacity, METH_NOARGS),
            DECLARE_METHOD(t_Vector, clear, METH_VARARGS),
            DECLARE_METHOD(t_Vector, clone, METH_NOARGS),
            DECLARE_METHOD(t_Vector, contains, METH_VARARGS),
            DECLARE_METHOD(t_Vector, containsAll, METH_VARARGS),
            DECLARE_METHOD(t_Vector, copyInto, METH_O),
            DECLARE_METHOD(t_Vector, elementAt, METH_O),
            DECLARE_METHOD(t_Vector, elements, METH_NOARGS),
            DECLARE_METHOD(t_Vector, ensureCapacity, METH_O),
            DECLARE_METHOD(t_Vector, equals, METH_VARARGS),
            DECLARE_METHOD(t_Vector, firstElement, METH_NOARGS),
            DECLARE_METHOD(t_Vector, get, METH_VARARGS),
            DECLARE_METHOD(t_Vector, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_Vector, indexOf, METH_VARARGS),
            DECLARE_METHOD(t_Vector, insertElementAt, METH_VARARGS),
            DECLARE_METHOD(t_Vector, isEmpty, METH_VARARGS),
            DECLARE_METHOD(t_Vector, lastElement, METH_NOARGS),
            DECLARE_METHOD(t_Vector, lastIndexOf, METH_VARARGS),
            DECLARE_METHOD(t_Vector, remove, METH_VARARGS),
            DECLARE_METHOD(t_Vector, removeAll, METH_VARARGS),
            DECLARE_METHOD(t_Vector, removeAllElements, METH_NOARGS),
            DECLARE_METHOD(t_Vector, removeElement, METH_O),
            DECLARE_METHOD(t_Vector, removeElementAt, METH_O),
            DECLARE_METHOD(t_Vector, retainAll, METH_VARARGS),
            DECLARE_METHOD(t_Vector, set, METH_VARARGS),
            DECLARE_METHOD(t_Vector, setElementAt, METH_VARARGS),
            DECLARE_METHOD(t_Vector, setSize, METH_O),
            DECLARE_METHOD(t_Vector, size, METH_VARARGS),
            DECLARE_METHOD(t_Vector, subList, METH_VARARGS),
            DECLARE_METHOD(t_Vector, toArray, METH_VARARGS),
            DECLARE_METHOD(t_Vector, toString, METH_VARARGS),
            DECLARE_METHOD(t_Vector, trimToSize, METH_NOARGS),
            { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(Vector, t_Vector, ::java::util::AbstractList, Vector, t_Vector_init_, 0, 0, t_Vector__fields_, 0, 0);
        PyObject *t_Vector::wrap_Object(const Vector& object, PyTypeObject *E)
        {
            PyObject *obj = t_Vector::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
                t_Vector *self = (t_Vector *) obj;
                self->parameters[0] = E;
            }
            return obj;
        }

        PyObject *t_Vector::wrap_jobject(const jobject& object, PyTypeObject *E)
        {
            PyObject *obj = t_Vector::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
                t_Vector *self = (t_Vector *) obj;
                self->parameters[0] = E;
            }
            return obj;
        }

        void t_Vector::install(PyObject *module)
        {
            installType(&PY_TYPE(Vector), module, "Vector", 0);
        }

        void t_Vector::initialize(PyObject *module)
        {
            PyDict_SetItemString(PY_TYPE(Vector).tp_dict, "class_", make_descriptor(Vector::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Vector).tp_dict, "wrapfn_", make_descriptor(t_Vector::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Vector).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_Vector_cast_(PyTypeObject *type, PyObject *arg)
        {
            if (!(arg = castCheck(arg, Vector::initializeClass, 1)))
                return NULL;
            return t_Vector::wrap_Object(Vector(((t_Vector *) arg)->object.this$));
        }
        static PyObject *t_Vector_instance_(PyTypeObject *type, PyObject *arg)
        {
            if (!castCheck(arg, Vector::initializeClass, 0))
                Py_RETURN_FALSE;
            Py_RETURN_TRUE;
        }

        static PyObject *t_Vector_of_(t_Vector *self, PyObject *args)
        {
            if (!parseArg(args, "T", 1, &(self->parameters)))
                Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static int t_Vector_init_(t_Vector *self, PyObject *args, PyObject *kwds)
        {
            switch (PyTuple_GET_SIZE(args)) {
              case 0:
                {
                    Vector object((jobject) NULL);

                    INT_CALL(object = Vector());
                    self->object = object;
                    break;
                }
                goto err;
              case 1:
                {
                    jint a0;
                    Vector object((jobject) NULL);

                    if (!parseArgs(args, "I", &a0))
                    {
                        INT_CALL(object = Vector(a0));
                        self->object = object;
                        break;
                    }
                }
                {
                    ::java::util::Collection a0((jobject) NULL);
                    PyTypeObject **p0;
                    Vector object((jobject) NULL);

                    if (!parseArgs(args, "K", ::java::util::Collection::initializeClass, &a0, &p0, ::java::util::t_Collection::parameters_))
                    {
                        INT_CALL(object = Vector(a0));
                        self->object = object;
                        break;
                    }
                }
                goto err;
              case 2:
                {
                    jint a0;
                    jint a1;
                    Vector object((jobject) NULL);

                    if (!parseArgs(args, "II", &a0, &a1))
                    {
                        INT_CALL(object = Vector(a0, a1));
                        self->object = object;
                        break;
                    }
                }
              default:
              err:
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
            }

            return 0;
        }

        static PyObject *t_Vector_add(t_Vector *self, PyObject *args)
        {
            switch (PyTuple_GET_SIZE(args)) {
              case 1:
                {
                    ::java::lang::Object a0((jobject) NULL);
                    jboolean result;

                    if (!parseArgs(args, "O", self->parameters[0], &a0))
                    {
                        OBJ_CALL(result = self->object.add(a0));
                        Py_RETURN_BOOL(result);
                    }
                }
                break;
              case 2:
                {
                    jint a0;
                    ::java::lang::Object a1((jobject) NULL);

                    if (!parseArgs(args, "IO", self->parameters[0], &a0, &a1))
                    {
                        OBJ_CALL(self->object.add(a0, a1));
                        Py_RETURN_NONE;
                    }
                }
            }

            return callSuper(&PY_TYPE(Vector), (PyObject *) self, "add", args, 2);
        }

        static PyObject *t_Vector_addAll(t_Vector *self, PyObject *args)
        {
            switch (PyTuple_GET_SIZE(args)) {
              case 1:
                {
                    ::java::util::Collection a0((jobject) NULL);
                    PyTypeObject **p0;
                    jboolean result;

                    if (!parseArgs(args, "K", ::java::util::Collection::initializeClass, &a0, &p0, ::java::util::t_Collection::parameters_))
                    {
                        OBJ_CALL(result = self->object.addAll(a0));
                        Py_RETURN_BOOL(result);
                    }
                }
                break;
              case 2:
                {
                    jint a0;
                    ::java::util::Collection a1((jobject) NULL);
                    PyTypeObject **p1;
                    jboolean result;

                    if (!parseArgs(args, "IK", ::java::util::Collection::initializeClass, &a0, &a1, &p1, ::java::util::t_Collection::parameters_))
                    {
                        OBJ_CALL(result = self->object.addAll(a0, a1));
                        Py_RETURN_BOOL(result);
                    }
                }
            }

            return callSuper(&PY_TYPE(Vector), (PyObject *) self, "addAll", args, 2);
        }

        static PyObject *t_Vector_addElement(t_Vector *self, PyObject *arg)
        {
            ::java::lang::Object a0((jobject) NULL);

            if (!parseArg(arg, "O", self->parameters[0], &a0))
            {
                OBJ_CALL(self->object.addElement(a0));
                Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "addElement", arg);
            return NULL;
        }

        static PyObject *t_Vector_capacity(t_Vector *self)
        {
            jint result;
            OBJ_CALL(result = self->object.capacity());
            return PyInt_FromLong((long) result);
        }

        static PyObject *t_Vector_clear(t_Vector *self, PyObject *args)
        {

            if (!parseArgs(args, ""))
            {
                OBJ_CALL(self->object.clear());
                Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(Vector), (PyObject *) self, "clear", args, 2);
        }

        static PyObject *t_Vector_clone(t_Vector *self)
        {
            ::java::lang::Object result((jobject) NULL);
            OBJ_CALL(result = self->object.clone());
            return ::java::lang::t_Object::wrap_Object(result);
        }

        static PyObject *t_Vector_contains(t_Vector *self, PyObject *args)
        {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
                OBJ_CALL(result = self->object.contains(a0));
                Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(Vector), (PyObject *) self, "contains", args, 2);
        }

        static PyObject *t_Vector_containsAll(t_Vector *self, PyObject *args)
        {
            ::java::util::Collection a0((jobject) NULL);
            PyTypeObject **p0;
            jboolean result;

            if (!parseArgs(args, "K", ::java::util::Collection::initializeClass, &a0, &p0, ::java::util::t_Collection::parameters_))
            {
                OBJ_CALL(result = self->object.containsAll(a0));
                Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(Vector), (PyObject *) self, "containsAll", args, 2);
        }

        static PyObject *t_Vector_copyInto(t_Vector *self, PyObject *arg)
        {
            JArray< ::java::lang::Object > a0((jobject) NULL);

            if (!parseArg(arg, "[o", &a0))
            {
                OBJ_CALL(self->object.copyInto(a0));
                Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "copyInto", arg);
            return NULL;
        }

        static PyObject *t_Vector_elementAt(t_Vector *self, PyObject *arg)
        {
            jint a0;
            ::java::lang::Object result((jobject) NULL);

            if (!parseArg(arg, "I", &a0))
            {
                OBJ_CALL(result = self->object.elementAt(a0));
                return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "elementAt", arg);
            return NULL;
        }

        static PyObject *t_Vector_elements(t_Vector *self)
        {
            ::java::util::Enumeration result((jobject) NULL);
            OBJ_CALL(result = self->object.elements());
            return ::java::util::t_Enumeration::wrap_Object(result, self->parameters[0]);
        }

        static PyObject *t_Vector_ensureCapacity(t_Vector *self, PyObject *arg)
        {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
                OBJ_CALL(self->object.ensureCapacity(a0));
                Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "ensureCapacity", arg);
            return NULL;
        }

        static PyObject *t_Vector_equals(t_Vector *self, PyObject *args)
        {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
                OBJ_CALL(result = self->object.equals(a0));
                Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(Vector), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_Vector_firstElement(t_Vector *self)
        {
            ::java::lang::Object result((jobject) NULL);
            OBJ_CALL(result = self->object.firstElement());
            return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
        }

        static PyObject *t_Vector_get(t_Vector *self, PyObject *args)
        {
            jint a0;
            ::java::lang::Object result((jobject) NULL);

            if (!parseArgs(args, "I", &a0))
            {
                OBJ_CALL(result = self->object.get(a0));
                return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Vector), (PyObject *) self, "get", args, 2);
        }

        static PyObject *t_Vector_hashCode(t_Vector *self, PyObject *args)
        {
            jint result;

            if (!parseArgs(args, ""))
            {
                OBJ_CALL(result = self->object.hashCode());
                return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(Vector), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_Vector_indexOf(t_Vector *self, PyObject *args)
        {
            switch (PyTuple_GET_SIZE(args)) {
              case 1:
                {
                    ::java::lang::Object a0((jobject) NULL);
                    jint result;

                    if (!parseArgs(args, "o", &a0))
                    {
                        OBJ_CALL(result = self->object.indexOf(a0));
                        return PyInt_FromLong((long) result);
                    }
                }
                break;
              case 2:
                {
                    ::java::lang::Object a0((jobject) NULL);
                    jint a1;
                    jint result;

                    if (!parseArgs(args, "oI", &a0, &a1))
                    {
                        OBJ_CALL(result = self->object.indexOf(a0, a1));
                        return PyInt_FromLong((long) result);
                    }
                }
            }

            return callSuper(&PY_TYPE(Vector), (PyObject *) self, "indexOf", args, 2);
        }

        static PyObject *t_Vector_insertElementAt(t_Vector *self, PyObject *args)
        {
            ::java::lang::Object a0((jobject) NULL);
            jint a1;

            if (!parseArgs(args, "OI", self->parameters[0], &a0, &a1))
            {
                OBJ_CALL(self->object.insertElementAt(a0, a1));
                Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "insertElementAt", args);
            return NULL;
        }

        static PyObject *t_Vector_isEmpty(t_Vector *self, PyObject *args)
        {
            jboolean result;

            if (!parseArgs(args, ""))
            {
                OBJ_CALL(result = self->object.isEmpty());
                Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(Vector), (PyObject *) self, "isEmpty", args, 2);
        }

        static PyObject *t_Vector_lastElement(t_Vector *self)
        {
            ::java::lang::Object result((jobject) NULL);
            OBJ_CALL(result = self->object.lastElement());
            return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
        }

        static PyObject *t_Vector_lastIndexOf(t_Vector *self, PyObject *args)
        {
            switch (PyTuple_GET_SIZE(args)) {
              case 1:
                {
                    ::java::lang::Object a0((jobject) NULL);
                    jint result;

                    if (!parseArgs(args, "o", &a0))
                    {
                        OBJ_CALL(result = self->object.lastIndexOf(a0));
                        return PyInt_FromLong((long) result);
                    }
                }
                break;
              case 2:
                {
                    ::java::lang::Object a0((jobject) NULL);
                    jint a1;
                    jint result;

                    if (!parseArgs(args, "oI", &a0, &a1))
                    {
                        OBJ_CALL(result = self->object.lastIndexOf(a0, a1));
                        return PyInt_FromLong((long) result);
                    }
                }
            }

            return callSuper(&PY_TYPE(Vector), (PyObject *) self, "lastIndexOf", args, 2);
        }

        static PyObject *t_Vector_remove(t_Vector *self, PyObject *args)
        {
            switch (PyTuple_GET_SIZE(args)) {
              case 1:
                {
                    jint a0;
                    ::java::lang::Object result((jobject) NULL);

                    if (!parseArgs(args, "I", &a0))
                    {
                        OBJ_CALL(result = self->object.remove(a0));
                        return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
                    }
                }
                {
                    ::java::lang::Object a0((jobject) NULL);
                    jboolean result;

                    if (!parseArgs(args, "o", &a0))
                    {
                        OBJ_CALL(result = self->object.remove(a0));
                        Py_RETURN_BOOL(result);
                    }
                }
            }

            return callSuper(&PY_TYPE(Vector), (PyObject *) self, "remove", args, 2);
        }

        static PyObject *t_Vector_removeAll(t_Vector *self, PyObject *args)
        {
            ::java::util::Collection a0((jobject) NULL);
            PyTypeObject **p0;
            jboolean result;

            if (!parseArgs(args, "K", ::java::util::Collection::initializeClass, &a0, &p0, ::java::util::t_Collection::parameters_))
            {
                OBJ_CALL(result = self->object.removeAll(a0));
                Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(Vector), (PyObject *) self, "removeAll", args, 2);
        }

        static PyObject *t_Vector_removeAllElements(t_Vector *self)
        {
            OBJ_CALL(self->object.removeAllElements());
            Py_RETURN_NONE;
        }

        static PyObject *t_Vector_removeElement(t_Vector *self, PyObject *arg)
        {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArg(arg, "o", &a0))
            {
                OBJ_CALL(result = self->object.removeElement(a0));
                Py_RETURN_BOOL(result);
            }

            PyErr_SetArgsError((PyObject *) self, "removeElement", arg);
            return NULL;
        }

        static PyObject *t_Vector_removeElementAt(t_Vector *self, PyObject *arg)
        {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
                OBJ_CALL(self->object.removeElementAt(a0));
                Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "removeElementAt", arg);
            return NULL;
        }

        static PyObject *t_Vector_retainAll(t_Vector *self, PyObject *args)
        {
            ::java::util::Collection a0((jobject) NULL);
            PyTypeObject **p0;
            jboolean result;

            if (!parseArgs(args, "K", ::java::util::Collection::initializeClass, &a0, &p0, ::java::util::t_Collection::parameters_))
            {
                OBJ_CALL(result = self->object.retainAll(a0));
                Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(Vector), (PyObject *) self, "retainAll", args, 2);
        }

        static PyObject *t_Vector_set(t_Vector *self, PyObject *args)
        {
            jint a0;
            ::java::lang::Object a1((jobject) NULL);
            ::java::lang::Object result((jobject) NULL);

            if (!parseArgs(args, "IO", self->parameters[0], &a0, &a1))
            {
                OBJ_CALL(result = self->object.set(a0, a1));
                return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(Vector), (PyObject *) self, "set", args, 2);
        }

        static PyObject *t_Vector_setElementAt(t_Vector *self, PyObject *args)
        {
            ::java::lang::Object a0((jobject) NULL);
            jint a1;

            if (!parseArgs(args, "OI", self->parameters[0], &a0, &a1))
            {
                OBJ_CALL(self->object.setElementAt(a0, a1));
                Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setElementAt", args);
            return NULL;
        }

        static PyObject *t_Vector_setSize(t_Vector *self, PyObject *arg)
        {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
                OBJ_CALL(self->object.setSize(a0));
                Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setSize", arg);
            return NULL;
        }

        static PyObject *t_Vector_size(t_Vector *self, PyObject *args)
        {
            jint result;

            if (!parseArgs(args, ""))
            {
                OBJ_CALL(result = self->object.size());
                return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(Vector), (PyObject *) self, "size", args, 2);
        }

        static PyObject *t_Vector_subList(t_Vector *self, PyObject *args)
        {
            jint a0;
            jint a1;
            ::java::util::List result((jobject) NULL);

            if (!parseArgs(args, "II", &a0, &a1))
            {
                OBJ_CALL(result = self->object.subList(a0, a1));
                return ::java::util::t_List::wrap_Object(result, self->parameters[0]);
            }

            return callSuper(&PY_TYPE(Vector), (PyObject *) self, "subList", args, 2);
        }

        static PyObject *t_Vector_toArray(t_Vector *self, PyObject *args)
        {
            switch (PyTuple_GET_SIZE(args)) {
              case 0:
                {
                    JArray< ::java::lang::Object > result((jobject) NULL);
                    OBJ_CALL(result = self->object.toArray());
                    return JArray<jobject>(result.this$).wrap(::java::lang::t_Object::wrap_jobject);
                }
                break;
              case 1:
                {
                    JArray< ::java::lang::Object > a0((jobject) NULL);
                    JArray< ::java::lang::Object > result((jobject) NULL);

                    if (!parseArgs(args, "[o", &a0))
                    {
                        OBJ_CALL(result = self->object.toArray(a0));
                        return JArray<jobject>(result.this$).wrap(::java::lang::t_Object::wrap_jobject);
                    }
                }
            }

            return callSuper(&PY_TYPE(Vector), (PyObject *) self, "toArray", args, 2);
        }

        static PyObject *t_Vector_toString(t_Vector *self, PyObject *args)
        {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
                OBJ_CALL(result = self->object.toString());
                return j2p(result);
            }

            return callSuper(&PY_TYPE(Vector), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_Vector_trimToSize(t_Vector *self)
        {
            OBJ_CALL(self->object.trimToSize());
            Py_RETURN_NONE;
        }
        static PyObject *t_Vector_get__parameters_(t_Vector *self, void *data)
        {
            return typeParameters(self->parameters, sizeof(self->parameters));
        }

        static PyObject *t_Vector_get__empty(t_Vector *self, void *data)
        {
            jboolean value;
            OBJ_CALL(value = self->object.isEmpty());
            Py_RETURN_BOOL(value);
        }
    }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/io/BufferedReader.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace java {
    namespace io {

        ::java::lang::Class *BufferedReader::class$ = NULL;
        jmethodID *BufferedReader::mids$ = NULL;

        jclass BufferedReader::initializeClass()
        {
            if (!class$)
            {

                jclass cls = (jclass) env->findClass("java/io/BufferedReader");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_cf2e3c10] = env->getMethodID(cls, "<init>", "(Ljava/io/Reader;)V");
                mids$[mid_init$_8c604f56] = env->getMethodID(cls, "<init>", "(Ljava/io/Reader;I)V");
                mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
                mids$[mid_mark_39c7bd3c] = env->getMethodID(cls, "mark", "(I)V");
                mids$[mid_markSupported_54c6a16a] = env->getMethodID(cls, "markSupported", "()Z");
                mids$[mid_read_54c6a179] = env->getMethodID(cls, "read", "()I");
                mids$[mid_read_6f0bb349] = env->getMethodID(cls, "read", "([CII)I");
                mids$[mid_readLine_14c7b5c5] = env->getMethodID(cls, "readLine", "()Ljava/lang/String;");
                mids$[mid_ready_54c6a16a] = env->getMethodID(cls, "ready", "()Z");
                mids$[mid_reset_54c6a166] = env->getMethodID(cls, "reset", "()V");
                mids$[mid_skip_0ee6df33] = env->getMethodID(cls, "skip", "(J)J");

                class$ = (::java::lang::Class *) new JObject(cls);
            }
            return (jclass) class$->this$;
        }

        BufferedReader::BufferedReader(const ::java::io::Reader & a0) : ::java::io::Reader(env->newObject(initializeClass, &mids$, mid_init$_cf2e3c10, a0.this$)) {}

        BufferedReader::BufferedReader(const ::java::io::Reader & a0, jint a1) : ::java::io::Reader(env->newObject(initializeClass, &mids$, mid_init$_8c604f56, a0.this$, a1)) {}

        void BufferedReader::close() const
        {
            env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
        }

        void BufferedReader::mark(jint a0) const
        {
            env->callVoidMethod(this$, mids$[mid_mark_39c7bd3c], a0);
        }

        jboolean BufferedReader::markSupported() const
        {
            return env->callBooleanMethod(this$, mids$[mid_markSupported_54c6a16a]);
        }

        jint BufferedReader::read() const
        {
            return env->callIntMethod(this$, mids$[mid_read_54c6a179]);
        }

        jint BufferedReader::read(const JArray< jchar > & a0, jint a1, jint a2) const
        {
            return env->callIntMethod(this$, mids$[mid_read_6f0bb349], a0.this$, a1, a2);
        }

        ::java::lang::String BufferedReader::readLine() const
        {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_readLine_14c7b5c5]));
        }

        jboolean BufferedReader::ready() const
        {
            return env->callBooleanMethod(this$, mids$[mid_ready_54c6a16a]);
        }

        void BufferedReader::reset() const
        {
            env->callVoidMethod(this$, mids$[mid_reset_54c6a166]);
        }

        jlong BufferedReader::skip(jlong a0) const
        {
            return env->callLongMethod(this$, mids$[mid_skip_0ee6df33], a0);
        }
    }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
    namespace io {
        static PyObject *t_BufferedReader_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_BufferedReader_instance_(PyTypeObject *type, PyObject *arg);
        static int t_BufferedReader_init_(t_BufferedReader *self, PyObject *args, PyObject *kwds);
        static PyObject *t_BufferedReader_close(t_BufferedReader *self, PyObject *args);
        static PyObject *t_BufferedReader_mark(t_BufferedReader *self, PyObject *args);
        static PyObject *t_BufferedReader_markSupported(t_BufferedReader *self, PyObject *args);
        static PyObject *t_BufferedReader_read(t_BufferedReader *self, PyObject *args);
        static PyObject *t_BufferedReader_readLine(t_BufferedReader *self);
        static PyObject *t_BufferedReader_ready(t_BufferedReader *self, PyObject *args);
        static PyObject *t_BufferedReader_reset(t_BufferedReader *self, PyObject *args);
        static PyObject *t_BufferedReader_skip(t_BufferedReader *self, PyObject *args);

        static PyMethodDef t_BufferedReader__methods_[] = {
            DECLARE_METHOD(t_BufferedReader, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BufferedReader, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_BufferedReader, close, METH_VARARGS),
            DECLARE_METHOD(t_BufferedReader, mark, METH_VARARGS),
            DECLARE_METHOD(t_BufferedReader, markSupported, METH_VARARGS),
            DECLARE_METHOD(t_BufferedReader, read, METH_VARARGS),
            DECLARE_METHOD(t_BufferedReader, readLine, METH_NOARGS),
            DECLARE_METHOD(t_BufferedReader, ready, METH_VARARGS),
            DECLARE_METHOD(t_BufferedReader, reset, METH_VARARGS),
            DECLARE_METHOD(t_BufferedReader, skip, METH_VARARGS),
            { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(BufferedReader, t_BufferedReader, ::java::io::Reader, BufferedReader, t_BufferedReader_init_, 0, 0, 0, 0, 0);

        void t_BufferedReader::install(PyObject *module)
        {
            installType(&PY_TYPE(BufferedReader), module, "BufferedReader", 0);
        }

        void t_BufferedReader::initialize(PyObject *module)
        {
            PyDict_SetItemString(PY_TYPE(BufferedReader).tp_dict, "class_", make_descriptor(BufferedReader::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(BufferedReader).tp_dict, "wrapfn_", make_descriptor(t_BufferedReader::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(BufferedReader).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_BufferedReader_cast_(PyTypeObject *type, PyObject *arg)
        {
            if (!(arg = castCheck(arg, BufferedReader::initializeClass, 1)))
                return NULL;
            return t_BufferedReader::wrap_Object(BufferedReader(((t_BufferedReader *) arg)->object.this$));
        }
        static PyObject *t_BufferedReader_instance_(PyTypeObject *type, PyObject *arg)
        {
            if (!castCheck(arg, BufferedReader::initializeClass, 0))
                Py_RETURN_FALSE;
            Py_RETURN_TRUE;
        }

        static int t_BufferedReader_init_(t_BufferedReader *self, PyObject *args, PyObject *kwds)
        {
            switch (PyTuple_GET_SIZE(args)) {
              case 1:
                {
                    ::java::io::Reader a0((jobject) NULL);
                    BufferedReader object((jobject) NULL);

                    if (!parseArgs(args, "k", ::java::io::Reader::initializeClass, &a0))
                    {
                        INT_CALL(object = BufferedReader(a0));
                        self->object = object;
                        break;
                    }
                }
                goto err;
              case 2:
                {
                    ::java::io::Reader a0((jobject) NULL);
                    jint a1;
                    BufferedReader object((jobject) NULL);

                    if (!parseArgs(args, "kI", ::java::io::Reader::initializeClass, &a0, &a1))
                    {
                        INT_CALL(object = BufferedReader(a0, a1));
                        self->object = object;
                        break;
                    }
                }
              default:
              err:
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
            }

            return 0;
        }

        static PyObject *t_BufferedReader_close(t_BufferedReader *self, PyObject *args)
        {

            if (!parseArgs(args, ""))
            {
                OBJ_CALL(self->object.close());
                Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(BufferedReader), (PyObject *) self, "close", args, 2);
        }

        static PyObject *t_BufferedReader_mark(t_BufferedReader *self, PyObject *args)
        {
            jint a0;

            if (!parseArgs(args, "I", &a0))
            {
                OBJ_CALL(self->object.mark(a0));
                Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(BufferedReader), (PyObject *) self, "mark", args, 2);
        }

        static PyObject *t_BufferedReader_markSupported(t_BufferedReader *self, PyObject *args)
        {
            jboolean result;

            if (!parseArgs(args, ""))
            {
                OBJ_CALL(result = self->object.markSupported());
                Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(BufferedReader), (PyObject *) self, "markSupported", args, 2);
        }

        static PyObject *t_BufferedReader_read(t_BufferedReader *self, PyObject *args)
        {
            switch (PyTuple_GET_SIZE(args)) {
              case 0:
                {
                    jint result;
                    OBJ_CALL(result = self->object.read());
                    return PyInt_FromLong((long) result);
                }
                break;
              case 3:
                {
                    JArray< jchar > a0((jobject) NULL);
                    jint a1;
                    jint a2;
                    jint result;

                    if (!parseArgs(args, "[CII", &a0, &a1, &a2))
                    {
                        OBJ_CALL(result = self->object.read(a0, a1, a2));
                        return PyInt_FromLong((long) result);
                    }
                }
            }

            return callSuper(&PY_TYPE(BufferedReader), (PyObject *) self, "read", args, 2);
        }

        static PyObject *t_BufferedReader_readLine(t_BufferedReader *self)
        {
            ::java::lang::String result((jobject) NULL);
            OBJ_CALL(result = self->object.readLine());
            return j2p(result);
        }

        static PyObject *t_BufferedReader_ready(t_BufferedReader *self, PyObject *args)
        {
            jboolean result;

            if (!parseArgs(args, ""))
            {
                OBJ_CALL(result = self->object.ready());
                Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(BufferedReader), (PyObject *) self, "ready", args, 2);
        }

        static PyObject *t_BufferedReader_reset(t_BufferedReader *self, PyObject *args)
        {

            if (!parseArgs(args, ""))
            {
                OBJ_CALL(self->object.reset());
                Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(BufferedReader), (PyObject *) self, "reset", args, 2);
        }

        static PyObject *t_BufferedReader_skip(t_BufferedReader *self, PyObject *args)
        {
            jlong a0;
            jlong result;

            if (!parseArgs(args, "J", &a0))
            {
                OBJ_CALL(result = self->object.skip(a0));
                return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            return callSuper(&PY_TYPE(BufferedReader), (PyObject *) self, "skip", args, 2);
        }
    }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/CharSequence.h"
#include "java/io/Serializable.h"
#include "java/lang/Class.h"
#include "java/lang/StringBuffer.h"
#include "java/lang/String.h"
#include "java/lang/Appendable.h"
#include "java/lang/Object.h"
#include "JArray.h"

namespace java {
    namespace lang {

        ::java::lang::Class *StringBuilder::class$ = NULL;
        jmethodID *StringBuilder::mids$ = NULL;

        jclass StringBuilder::initializeClass()
        {
            if (!class$)
            {

                jclass cls = (jclass) env->findClass("java/lang/StringBuilder");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                mids$[mid_init$_39c7bd3c] = env->getMethodID(cls, "<init>", "(I)V");
                mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
                mids$[mid_init$_a8afc64a] = env->getMethodID(cls, "<init>", "(Ljava/lang/CharSequence;)V");
                mids$[mid_append_3c8cf749] = env->getMethodID(cls, "append", "([C)Ljava/lang/StringBuilder;");
                mids$[mid_append_75fd4e14] = env->getMethodID(cls, "append", "(F)Ljava/lang/StringBuilder;");
                mids$[mid_append_1c7ab4ee] = env->getMethodID(cls, "append", "(D)Ljava/lang/StringBuilder;");
                mids$[mid_append_b60c3de1] = env->getMethodID(cls, "append", "(Ljava/lang/Object;)Ljava/lang/StringBuilder;");
                mids$[mid_append_d9a60f20] = env->getMethodID(cls, "append", "(J)Ljava/lang/StringBuilder;");
                mids$[mid_append_0f09fb50] = env->getMethodID(cls, "append", "(Z)Ljava/lang/StringBuilder;");
                mids$[mid_append_e82ae26d] = env->getMethodID(cls, "append", "(C)Ljava/lang/StringBuilder;");
                mids$[mid_append_50083a71] = env->getMethodID(cls, "append", "(Ljava/lang/CharSequence;)Ljava/lang/StringBuilder;");
                mids$[mid_append_2dfc73db] = env->getMethodID(cls, "append", "(Ljava/lang/String;)Ljava/lang/StringBuilder;");
                mids$[mid_append_83777cef] = env->getMethodID(cls, "append", "(I)Ljava/lang/StringBuilder;");
                mids$[mid_append_8358d2a7] = env->getMethodID(cls, "append", "(Ljava/lang/StringBuffer;)Ljava/lang/StringBuilder;");
                mids$[mid_append_24d5875d] = env->getMethodID(cls, "append", "([CII)Ljava/lang/StringBuilder;");
                mids$[mid_append_2bd4722d] = env->getMethodID(cls, "append", "(Ljava/lang/CharSequence;II)Ljava/lang/StringBuilder;");
                mids$[mid_appendCodePoint_83777cef] = env->getMethodID(cls, "appendCodePoint", "(I)Ljava/lang/StringBuilder;");
                mids$[mid_capacity_54c6a179] = env->getMethodID(cls, "capacity", "()I");
                mids$[mid_charAt_39c7bd29] = env->getMethodID(cls, "charAt", "(I)C");
                mids$[mid_codePointAt_39c7bd23] = env->getMethodID(cls, "codePointAt", "(I)I");
                mids$[mid_codePointBefore_39c7bd23] = env->getMethodID(cls, "codePointBefore", "(I)I");
                mids$[mid_codePointCount_d8d154b9] = env->getMethodID(cls, "codePointCount", "(II)I");
                mids$[mid_delete_719db8f9] = env->getMethodID(cls, "delete", "(II)Ljava/lang/StringBuilder;");
                mids$[mid_deleteCharAt_83777cef] = env->getMethodID(cls, "deleteCharAt", "(I)Ljava/lang/StringBuilder;");
                mids$[mid_ensureCapacity_39c7bd3c] = env->getMethodID(cls, "ensureCapacity", "(I)V");
                mids$[mid_getChars_06518f84] = env->getMethodID(cls, "getChars", "(II[CI)V");
                mids$[mid_indexOf_5fdc3f57] = env->getMethodID(cls, "indexOf", "(Ljava/lang/String;)I");
                mids$[mid_indexOf_6e53ccd9] = env->getMethodID(cls, "indexOf", "(Ljava/lang/String;I)I");
                mids$[mid_insert_a08f263a] = env->getMethodID(cls, "insert", "(IF)Ljava/lang/StringBuilder;");
                mids$[mid_insert_223b06cf] = env->getMethodID(cls, "insert", "(I[C)Ljava/lang/StringBuilder;");
                mids$[mid_insert_012dcedd] = env->getMethodID(cls, "insert", "(ILjava/lang/String;)Ljava/lang/StringBuilder;");
                mids$[mid_insert_719db8f9] = env->getMethodID(cls, "insert", "(II)Ljava/lang/StringBuilder;");
                mids$[mid_insert_16519a10] = env->getMethodID(cls, "insert", "(ID)Ljava/lang/StringBuilder;");
                mids$[mid_insert_de03d343] = env->getMethodID(cls, "insert", "(ILjava/lang/Object;)Ljava/lang/StringBuilder;");
                mids$[mid_insert_f2b36ed3] = env->getMethodID(cls, "insert", "(ILjava/lang/CharSequence;)Ljava/lang/StringBuilder;");
                mids$[mid_insert_094df9d6] = env->getMethodID(cls, "insert", "(IZ)Ljava/lang/StringBuilder;");
                mids$[mid_insert_4ed4b5eb] = env->getMethodID(cls, "insert", "(IC)Ljava/lang/StringBuilder;");
                mids$[mid_insert_af7946e6] = env->getMethodID(cls, "insert", "(IJ)Ljava/lang/StringBuilder;");
                mids$[mid_insert_2824e937] = env->getMethodID(cls, "insert", "(ILjava/lang/CharSequence;II)Ljava/lang/StringBuilder;");
                mids$[mid_insert_d3b5ed83] = env->getMethodID(cls, "insert", "(I[CII)Ljava/lang/StringBuilder;");
                mids$[mid_lastIndexOf_5fdc3f57] = env->getMethodID(cls, "lastIndexOf", "(Ljava/lang/String;)I");
                mids$[mid_lastIndexOf_6e53ccd9] = env->getMethodID(cls, "lastIndexOf", "(Ljava/lang/String;I)I");
                mids$[mid_length_54c6a179] = env->getMethodID(cls, "length", "()I");
                mids$[mid_offsetByCodePoints_d8d154b9] = env->getMethodID(cls, "offsetByCodePoints", "(II)I");
                mids$[mid_replace_3740c5ff] = env->getMethodID(cls, "replace", "(IILjava/lang/String;)Ljava/lang/StringBuilder;");
                mids$[mid_reverse_a1025355] = env->getMethodID(cls, "reverse", "()Ljava/lang/StringBuilder;");
                mids$[mid_setCharAt_83eec158] = env->getMethodID(cls, "setCharAt", "(IC)V");
                mids$[mid_setLength_39c7bd3c] = env->getMethodID(cls, "setLength", "(I)V");
                mids$[mid_subSequence_f88dfd57] = env->getMethodID(cls, "subSequence", "(II)Ljava/lang/CharSequence;");
                mids$[mid_substring_141401b3] = env->getMethodID(cls, "substring", "(I)Ljava/lang/String;");
                mids$[mid_substring_f9118fe5] = env->getMethodID(cls, "substring", "(II)Ljava/lang/String;");
                mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
                mids$[mid_trimToSize_54c6a166] = env->getMethodID(cls, "trimToSize", "()V");

                class$ = (::java::lang::Class *) new JObject(cls);
            }
            return (jclass) class$->this$;
        }

        StringBuilder::StringBuilder() : ::java::lang::AbstractStringBuilder(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        StringBuilder::StringBuilder(jint a0) : ::java::lang::AbstractStringBuilder(env->newObject(initializeClass, &mids$, mid_init$_39c7bd3c, a0)) {}

        StringBuilder::StringBuilder(const ::java::lang::String & a0) : ::java::lang::AbstractStringBuilder(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}

        StringBuilder::StringBuilder(const ::java::lang::CharSequence & a0) : ::java::lang::AbstractStringBuilder(env->newObject(initializeClass, &mids$, mid_init$_a8afc64a, a0.this$)) {}

        StringBuilder StringBuilder::append(const JArray< jchar > & a0) const
        {
            return StringBuilder(env->callObjectMethod(this$, mids$[mid_append_3c8cf749], a0.this$));
        }

        StringBuilder StringBuilder::append(jfloat a0) const
        {
            return StringBuilder(env->callObjectMethod(this$, mids$[mid_append_75fd4e14], a0));
        }

        StringBuilder StringBuilder::append(jdouble a0) const
        {
            return StringBuilder(env->callObjectMethod(this$, mids$[mid_append_1c7ab4ee], a0));
        }

        StringBuilder StringBuilder::append(const ::java::lang::Object & a0) const
        {
            return StringBuilder(env->callObjectMethod(this$, mids$[mid_append_b60c3de1], a0.this$));
        }

        StringBuilder StringBuilder::append(jlong a0) const
        {
            return StringBuilder(env->callObjectMethod(this$, mids$[mid_append_d9a60f20], a0));
        }

        StringBuilder StringBuilder::append(jboolean a0) const
        {
            return StringBuilder(env->callObjectMethod(this$, mids$[mid_append_0f09fb50], a0));
        }

        StringBuilder StringBuilder::append(jchar a0) const
        {
            return StringBuilder(env->callObjectMethod(this$, mids$[mid_append_e82ae26d], a0));
        }

        StringBuilder StringBuilder::append(const ::java::lang::CharSequence & a0) const
        {
            return StringBuilder(env->callObjectMethod(this$, mids$[mid_append_50083a71], a0.this$));
        }

        StringBuilder StringBuilder::append(const ::java::lang::String & a0) const
        {
            return StringBuilder(env->callObjectMethod(this$, mids$[mid_append_2dfc73db], a0.this$));
        }

        StringBuilder StringBuilder::append(jint a0) const
        {
            return StringBuilder(env->callObjectMethod(this$, mids$[mid_append_83777cef], a0));
        }

        StringBuilder StringBuilder::append(const ::java::lang::StringBuffer & a0) const
        {
            return StringBuilder(env->callObjectMethod(this$, mids$[mid_append_8358d2a7], a0.this$));
        }

        StringBuilder StringBuilder::append(const JArray< jchar > & a0, jint a1, jint a2) const
        {
            return StringBuilder(env->callObjectMethod(this$, mids$[mid_append_24d5875d], a0.this$, a1, a2));
        }

        StringBuilder StringBuilder::append(const ::java::lang::CharSequence & a0, jint a1, jint a2) const
        {
            return StringBuilder(env->callObjectMethod(this$, mids$[mid_append_2bd4722d], a0.this$, a1, a2));
        }

        StringBuilder StringBuilder::appendCodePoint(jint a0) const
        {
            return StringBuilder(env->callObjectMethod(this$, mids$[mid_appendCodePoint_83777cef], a0));
        }

        jint StringBuilder::capacity() const
        {
            return env->callIntMethod(this$, mids$[mid_capacity_54c6a179]);
        }

        jchar StringBuilder::charAt(jint a0) const
        {
            return env->callCharMethod(this$, mids$[mid_charAt_39c7bd29], a0);
        }

        jint StringBuilder::codePointAt(jint a0) const
        {
            return env->callIntMethod(this$, mids$[mid_codePointAt_39c7bd23], a0);
        }

        jint StringBuilder::codePointBefore(jint a0) const
        {
            return env->callIntMethod(this$, mids$[mid_codePointBefore_39c7bd23], a0);
        }

        jint StringBuilder::codePointCount(jint a0, jint a1) const
        {
            return env->callIntMethod(this$, mids$[mid_codePointCount_d8d154b9], a0, a1);
        }

        StringBuilder StringBuilder::delete$(jint a0, jint a1) const
        {
            return StringBuilder(env->callObjectMethod(this$, mids$[mid_delete_719db8f9], a0, a1));
        }

        StringBuilder StringBuilder::deleteCharAt(jint a0) const
        {
            return StringBuilder(env->callObjectMethod(this$, mids$[mid_deleteCharAt_83777cef], a0));
        }

        void StringBuilder::ensureCapacity(jint a0) const
        {
            env->callVoidMethod(this$, mids$[mid_ensureCapacity_39c7bd3c], a0);
        }

        void StringBuilder::getChars(jint a0, jint a1, const JArray< jchar > & a2, jint a3) const
        {
            env->callVoidMethod(this$, mids$[mid_getChars_06518f84], a0, a1, a2.this$, a3);
        }

        jint StringBuilder::indexOf(const ::java::lang::String & a0) const
        {
            return env->callIntMethod(this$, mids$[mid_indexOf_5fdc3f57], a0.this$);
        }

        jint StringBuilder::indexOf(const ::java::lang::String & a0, jint a1) const
        {
            return env->callIntMethod(this$, mids$[mid_indexOf_6e53ccd9], a0.this$, a1);
        }

        StringBuilder StringBuilder::insert(jint a0, jfloat a1) const
        {
            return StringBuilder(env->callObjectMethod(this$, mids$[mid_insert_a08f263a], a0, a1));
        }

        StringBuilder StringBuilder::insert(jint a0, const JArray< jchar > & a1) const
        {
            return StringBuilder(env->callObjectMethod(this$, mids$[mid_insert_223b06cf], a0, a1.this$));
        }

        StringBuilder StringBuilder::insert(jint a0, const ::java::lang::String & a1) const
        {
            return StringBuilder(env->callObjectMethod(this$, mids$[mid_insert_012dcedd], a0, a1.this$));
        }

        StringBuilder StringBuilder::insert(jint a0, jint a1) const
        {
            return StringBuilder(env->callObjectMethod(this$, mids$[mid_insert_719db8f9], a0, a1));
        }

        StringBuilder StringBuilder::insert(jint a0, jdouble a1) const
        {
            return StringBuilder(env->callObjectMethod(this$, mids$[mid_insert_16519a10], a0, a1));
        }

        StringBuilder StringBuilder::insert(jint a0, const ::java::lang::Object & a1) const
        {
            return StringBuilder(env->callObjectMethod(this$, mids$[mid_insert_de03d343], a0, a1.this$));
        }

        StringBuilder StringBuilder::insert(jint a0, const ::java::lang::CharSequence & a1) const
        {
            return StringBuilder(env->callObjectMethod(this$, mids$[mid_insert_f2b36ed3], a0, a1.this$));
        }

        StringBuilder StringBuilder::insert(jint a0, jboolean a1) const
        {
            return StringBuilder(env->callObjectMethod(this$, mids$[mid_insert_094df9d6], a0, a1));
        }

        StringBuilder StringBuilder::insert(jint a0, jchar a1) const
        {
            return StringBuilder(env->callObjectMethod(this$, mids$[mid_insert_4ed4b5eb], a0, a1));
        }

        StringBuilder StringBuilder::insert(jint a0, jlong a1) const
        {
            return StringBuilder(env->callObjectMethod(this$, mids$[mid_insert_af7946e6], a0, a1));
        }

        StringBuilder StringBuilder::insert(jint a0, const ::java::lang::CharSequence & a1, jint a2, jint a3) const
        {
            return StringBuilder(env->callObjectMethod(this$, mids$[mid_insert_2824e937], a0, a1.this$, a2, a3));
        }

        StringBuilder StringBuilder::insert(jint a0, const JArray< jchar > & a1, jint a2, jint a3) const
        {
            return StringBuilder(env->callObjectMethod(this$, mids$[mid_insert_d3b5ed83], a0, a1.this$, a2, a3));
        }

        jint StringBuilder::lastIndexOf(const ::java::lang::String & a0) const
        {
            return env->callIntMethod(this$, mids$[mid_lastIndexOf_5fdc3f57], a0.this$);
        }

        jint StringBuilder::lastIndexOf(const ::java::lang::String & a0, jint a1) const
        {
            return env->callIntMethod(this$, mids$[mid_lastIndexOf_6e53ccd9], a0.this$, a1);
        }

        jint StringBuilder::length() const
        {
            return env->callIntMethod(this$, mids$[mid_length_54c6a179]);
        }

        jint StringBuilder::offsetByCodePoints(jint a0, jint a1) const
        {
            return env->callIntMethod(this$, mids$[mid_offsetByCodePoints_d8d154b9], a0, a1);
        }

        StringBuilder StringBuilder::replace(jint a0, jint a1, const ::java::lang::String & a2) const
        {
            return StringBuilder(env->callObjectMethod(this$, mids$[mid_replace_3740c5ff], a0, a1, a2.this$));
        }

        StringBuilder StringBuilder::reverse() const
        {
            return StringBuilder(env->callObjectMethod(this$, mids$[mid_reverse_a1025355]));
        }

        void StringBuilder::setCharAt(jint a0, jchar a1) const
        {
            env->callVoidMethod(this$, mids$[mid_setCharAt_83eec158], a0, a1);
        }

        void StringBuilder::setLength(jint a0) const
        {
            env->callVoidMethod(this$, mids$[mid_setLength_39c7bd3c], a0);
        }

        ::java::lang::CharSequence StringBuilder::subSequence(jint a0, jint a1) const
        {
            return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_subSequence_f88dfd57], a0, a1));
        }

        ::java::lang::String StringBuilder::substring(jint a0) const
        {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_substring_141401b3], a0));
        }

        ::java::lang::String StringBuilder::substring(jint a0, jint a1) const
        {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_substring_f9118fe5], a0, a1));
        }

        ::java::lang::String StringBuilder::toString() const
        {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }

        void StringBuilder::trimToSize() const
        {
            env->callVoidMethod(this$, mids$[mid_trimToSize_54c6a166]);
        }
    }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
    namespace lang {
        static PyObject *t_StringBuilder_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_StringBuilder_instance_(PyTypeObject *type, PyObject *arg);
        static int t_StringBuilder_init_(t_StringBuilder *self, PyObject *args, PyObject *kwds);
        static PyObject *t_StringBuilder_append(t_StringBuilder *self, PyObject *args);
        static PyObject *t_StringBuilder_appendCodePoint(t_StringBuilder *self, PyObject *args);
        static PyObject *t_StringBuilder_capacity(t_StringBuilder *self, PyObject *args);
        static PyObject *t_StringBuilder_charAt(t_StringBuilder *self, PyObject *args);
        static PyObject *t_StringBuilder_codePointAt(t_StringBuilder *self, PyObject *args);
        static PyObject *t_StringBuilder_codePointBefore(t_StringBuilder *self, PyObject *args);
        static PyObject *t_StringBuilder_codePointCount(t_StringBuilder *self, PyObject *args);
        static PyObject *t_StringBuilder_delete(t_StringBuilder *self, PyObject *args);
        static PyObject *t_StringBuilder_deleteCharAt(t_StringBuilder *self, PyObject *args);
        static PyObject *t_StringBuilder_ensureCapacity(t_StringBuilder *self, PyObject *args);
        static PyObject *t_StringBuilder_getChars(t_StringBuilder *self, PyObject *args);
        static PyObject *t_StringBuilder_indexOf(t_StringBuilder *self, PyObject *args);
        static PyObject *t_StringBuilder_insert(t_StringBuilder *self, PyObject *args);
        static PyObject *t_StringBuilder_lastIndexOf(t_StringBuilder *self, PyObject *args);
        static PyObject *t_StringBuilder_length(t_StringBuilder *self, PyObject *args);
        static PyObject *t_StringBuilder_offsetByCodePoints(t_StringBuilder *self, PyObject *args);
        static PyObject *t_StringBuilder_replace(t_StringBuilder *self, PyObject *args);
        static PyObject *t_StringBuilder_reverse(t_StringBuilder *self, PyObject *args);
        static PyObject *t_StringBuilder_setCharAt(t_StringBuilder *self, PyObject *args);
        static PyObject *t_StringBuilder_setLength(t_StringBuilder *self, PyObject *args);
        static PyObject *t_StringBuilder_subSequence(t_StringBuilder *self, PyObject *args);
        static PyObject *t_StringBuilder_substring(t_StringBuilder *self, PyObject *args);
        static PyObject *t_StringBuilder_toString(t_StringBuilder *self, PyObject *args);
        static PyObject *t_StringBuilder_trimToSize(t_StringBuilder *self, PyObject *args);

        static PyMethodDef t_StringBuilder__methods_[] = {
            DECLARE_METHOD(t_StringBuilder, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_StringBuilder, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_StringBuilder, append, METH_VARARGS),
            DECLARE_METHOD(t_StringBuilder, appendCodePoint, METH_VARARGS),
            DECLARE_METHOD(t_StringBuilder, capacity, METH_VARARGS),
            DECLARE_METHOD(t_StringBuilder, charAt, METH_VARARGS),
            DECLARE_METHOD(t_StringBuilder, codePointAt, METH_VARARGS),
            DECLARE_METHOD(t_StringBuilder, codePointBefore, METH_VARARGS),
            DECLARE_METHOD(t_StringBuilder, codePointCount, METH_VARARGS),
            DECLARE_METHOD(t_StringBuilder, delete, METH_VARARGS),
            DECLARE_METHOD(t_StringBuilder, deleteCharAt, METH_VARARGS),
            DECLARE_METHOD(t_StringBuilder, ensureCapacity, METH_VARARGS),
            DECLARE_METHOD(t_StringBuilder, getChars, METH_VARARGS),
            DECLARE_METHOD(t_StringBuilder, indexOf, METH_VARARGS),
            DECLARE_METHOD(t_StringBuilder, insert, METH_VARARGS),
            DECLARE_METHOD(t_StringBuilder, lastIndexOf, METH_VARARGS),
            DECLARE_METHOD(t_StringBuilder, length, METH_VARARGS),
            DECLARE_METHOD(t_StringBuilder, offsetByCodePoints, METH_VARARGS),
            DECLARE_METHOD(t_StringBuilder, replace, METH_VARARGS),
            DECLARE_METHOD(t_StringBuilder, reverse, METH_VARARGS),
            DECLARE_METHOD(t_StringBuilder, setCharAt, METH_VARARGS),
            DECLARE_METHOD(t_StringBuilder, setLength, METH_VARARGS),
            DECLARE_METHOD(t_StringBuilder, subSequence, METH_VARARGS),
            DECLARE_METHOD(t_StringBuilder, substring, METH_VARARGS),
            DECLARE_METHOD(t_StringBuilder, toString, METH_VARARGS),
            DECLARE_METHOD(t_StringBuilder, trimToSize, METH_VARARGS),
            { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(StringBuilder, t_StringBuilder, ::java::lang::AbstractStringBuilder, StringBuilder, t_StringBuilder_init_, 0, 0, 0, 0, 0);

        void t_StringBuilder::install(PyObject *module)
        {
            installType(&PY_TYPE(StringBuilder), module, "StringBuilder", 0);
        }

        void t_StringBuilder::initialize(PyObject *module)
        {
            PyDict_SetItemString(PY_TYPE(StringBuilder).tp_dict, "class_", make_descriptor(StringBuilder::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(StringBuilder).tp_dict, "wrapfn_", make_descriptor(t_StringBuilder::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(StringBuilder).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_StringBuilder_cast_(PyTypeObject *type, PyObject *arg)
        {
            if (!(arg = castCheck(arg, StringBuilder::initializeClass, 1)))
                return NULL;
            return t_StringBuilder::wrap_Object(StringBuilder(((t_StringBuilder *) arg)->object.this$));
        }
        static PyObject *t_StringBuilder_instance_(PyTypeObject *type, PyObject *arg)
        {
            if (!castCheck(arg, StringBuilder::initializeClass, 0))
                Py_RETURN_FALSE;
            Py_RETURN_TRUE;
        }

        static int t_StringBuilder_init_(t_StringBuilder *self, PyObject *args, PyObject *kwds)
        {
            switch (PyTuple_GET_SIZE(args)) {
              case 0:
                {
                    StringBuilder object((jobject) NULL);

                    INT_CALL(object = StringBuilder());
                    self->object = object;
                    break;
                }
                goto err;
              case 1:
                {
                    jint a0;
                    StringBuilder object((jobject) NULL);

                    if (!parseArgs(args, "I", &a0))
                    {
                        INT_CALL(object = StringBuilder(a0));
                        self->object = object;
                        break;
                    }
                }
                {
                    ::java::lang::String a0((jobject) NULL);
                    StringBuilder object((jobject) NULL);

                    if (!parseArgs(args, "s", &a0))
                    {
                        INT_CALL(object = StringBuilder(a0));
                        self->object = object;
                        break;
                    }
                }
                {
                    ::java::lang::CharSequence a0((jobject) NULL);
                    StringBuilder object((jobject) NULL);

                    if (!parseArgs(args, "O", &::java::lang::PY_TYPE(CharSequence), &a0))
                    {
                        INT_CALL(object = StringBuilder(a0));
                        self->object = object;
                        break;
                    }
                }
              default:
              err:
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
            }

            return 0;
        }

        static PyObject *t_StringBuilder_append(t_StringBuilder *self, PyObject *args)
        {
            switch (PyTuple_GET_SIZE(args)) {
              case 1:
                {
                    JArray< jchar > a0((jobject) NULL);
                    StringBuilder result((jobject) NULL);

                    if (!parseArgs(args, "[C", &a0))
                    {
                        OBJ_CALL(result = self->object.append(a0));
                        return t_StringBuilder::wrap_Object(result);
                    }
                }
                {
                    jfloat a0;
                    StringBuilder result((jobject) NULL);

                    if (!parseArgs(args, "F", &a0))
                    {
                        OBJ_CALL(result = self->object.append(a0));
                        return t_StringBuilder::wrap_Object(result);
                    }
                }
                {
                    jdouble a0;
                    StringBuilder result((jobject) NULL);

                    if (!parseArgs(args, "D", &a0))
                    {
                        OBJ_CALL(result = self->object.append(a0));
                        return t_StringBuilder::wrap_Object(result);
                    }
                }
                {
                    ::java::lang::Object a0((jobject) NULL);
                    StringBuilder result((jobject) NULL);

                    if (!parseArgs(args, "o", &a0))
                    {
                        OBJ_CALL(result = self->object.append(a0));
                        return t_StringBuilder::wrap_Object(result);
                    }
                }
                {
                    jlong a0;
                    StringBuilder result((jobject) NULL);

                    if (!parseArgs(args, "J", &a0))
                    {
                        OBJ_CALL(result = self->object.append(a0));
                        return t_StringBuilder::wrap_Object(result);
                    }
                }
                {
                    jboolean a0;
                    StringBuilder result((jobject) NULL);

                    if (!parseArgs(args, "Z", &a0))
                    {
                        OBJ_CALL(result = self->object.append(a0));
                        return t_StringBuilder::wrap_Object(result);
                    }
                }
                {
                    jchar a0;
                    StringBuilder result((jobject) NULL);

                    if (!parseArgs(args, "C", &a0))
                    {
                        OBJ_CALL(result = self->object.append(a0));
                        return t_StringBuilder::wrap_Object(result);
                    }
                }
                {
                    ::java::lang::CharSequence a0((jobject) NULL);
                    StringBuilder result((jobject) NULL);

                    if (!parseArgs(args, "O", &::java::lang::PY_TYPE(CharSequence), &a0))
                    {
                        OBJ_CALL(result = self->object.append(a0));
                        return t_StringBuilder::wrap_Object(result);
                    }
                }
                {
                    ::java::lang::String a0((jobject) NULL);
                    StringBuilder result((jobject) NULL);

                    if (!parseArgs(args, "s", &a0))
                    {
                        OBJ_CALL(result = self->object.append(a0));
                        return t_StringBuilder::wrap_Object(result);
                    }
                }
                {
                    jint a0;
                    StringBuilder result((jobject) NULL);

                    if (!parseArgs(args, "I", &a0))
                    {
                        OBJ_CALL(result = self->object.append(a0));
                        return t_StringBuilder::wrap_Object(result);
                    }
                }
                {
                    ::java::lang::StringBuffer a0((jobject) NULL);
                    StringBuilder result((jobject) NULL);

                    if (!parseArgs(args, "k", ::java::lang::StringBuffer::initializeClass, &a0))
                    {
                        OBJ_CALL(result = self->object.append(a0));
                        return t_StringBuilder::wrap_Object(result);
                    }
                }
                break;
              case 3:
                {
                    JArray< jchar > a0((jobject) NULL);
                    jint a1;
                    jint a2;
                    StringBuilder result((jobject) NULL);

                    if (!parseArgs(args, "[CII", &a0, &a1, &a2))
                    {
                        OBJ_CALL(result = self->object.append(a0, a1, a2));
                        return t_StringBuilder::wrap_Object(result);
                    }
                }
                {
                    ::java::lang::CharSequence a0((jobject) NULL);
                    jint a1;
                    jint a2;
                    StringBuilder result((jobject) NULL);

                    if (!parseArgs(args, "OII", &::java::lang::PY_TYPE(CharSequence), &a0, &a1, &a2))
                    {
                        OBJ_CALL(result = self->object.append(a0, a1, a2));
                        return t_StringBuilder::wrap_Object(result);
                    }
                }
            }

            return callSuper(&PY_TYPE(StringBuilder), (PyObject *) self, "append", args, 2);
        }

        static PyObject *t_StringBuilder_appendCodePoint(t_StringBuilder *self, PyObject *args)
        {
            jint a0;
            StringBuilder result((jobject) NULL);

            if (!parseArgs(args, "I", &a0))
            {
                OBJ_CALL(result = self->object.appendCodePoint(a0));
                return t_StringBuilder::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(StringBuilder), (PyObject *) self, "appendCodePoint", args, 2);
        }

        static PyObject *t_StringBuilder_capacity(t_StringBuilder *self, PyObject *args)
        {
            jint result;

            if (!parseArgs(args, ""))
            {
                OBJ_CALL(result = self->object.capacity());
                return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(StringBuilder), (PyObject *) self, "capacity", args, 2);
        }

        static PyObject *t_StringBuilder_charAt(t_StringBuilder *self, PyObject *args)
        {
            jint a0;
            jchar result;

            if (!parseArgs(args, "I", &a0))
            {
                OBJ_CALL(result = self->object.charAt(a0));
                return PyUnicode_FromUnicode((Py_UNICODE *) &result, 1);
            }

            return callSuper(&PY_TYPE(StringBuilder), (PyObject *) self, "charAt", args, 2);
        }

        static PyObject *t_StringBuilder_codePointAt(t_StringBuilder *self, PyObject *args)
        {
            jint a0;
            jint result;

            if (!parseArgs(args, "I", &a0))
            {
                OBJ_CALL(result = self->object.codePointAt(a0));
                return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(StringBuilder), (PyObject *) self, "codePointAt", args, 2);
        }

        static PyObject *t_StringBuilder_codePointBefore(t_StringBuilder *self, PyObject *args)
        {
            jint a0;
            jint result;

            if (!parseArgs(args, "I", &a0))
            {
                OBJ_CALL(result = self->object.codePointBefore(a0));
                return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(StringBuilder), (PyObject *) self, "codePointBefore", args, 2);
        }

        static PyObject *t_StringBuilder_codePointCount(t_StringBuilder *self, PyObject *args)
        {
            jint a0;
            jint a1;
            jint result;

            if (!parseArgs(args, "II", &a0, &a1))
            {
                OBJ_CALL(result = self->object.codePointCount(a0, a1));
                return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(StringBuilder), (PyObject *) self, "codePointCount", args, 2);
        }

        static PyObject *t_StringBuilder_delete(t_StringBuilder *self, PyObject *args)
        {
            jint a0;
            jint a1;
            StringBuilder result((jobject) NULL);

            if (!parseArgs(args, "II", &a0, &a1))
            {
                OBJ_CALL(result = self->object.delete$(a0, a1));
                return t_StringBuilder::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(StringBuilder), (PyObject *) self, "delete", args, 2);
        }

        static PyObject *t_StringBuilder_deleteCharAt(t_StringBuilder *self, PyObject *args)
        {
            jint a0;
            StringBuilder result((jobject) NULL);

            if (!parseArgs(args, "I", &a0))
            {
                OBJ_CALL(result = self->object.deleteCharAt(a0));
                return t_StringBuilder::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(StringBuilder), (PyObject *) self, "deleteCharAt", args, 2);
        }

        static PyObject *t_StringBuilder_ensureCapacity(t_StringBuilder *self, PyObject *args)
        {
            jint a0;

            if (!parseArgs(args, "I", &a0))
            {
                OBJ_CALL(self->object.ensureCapacity(a0));
                Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(StringBuilder), (PyObject *) self, "ensureCapacity", args, 2);
        }

        static PyObject *t_StringBuilder_getChars(t_StringBuilder *self, PyObject *args)
        {
            jint a0;
            jint a1;
            JArray< jchar > a2((jobject) NULL);
            jint a3;

            if (!parseArgs(args, "II[CI", &a0, &a1, &a2, &a3))
            {
                OBJ_CALL(self->object.getChars(a0, a1, a2, a3));
                Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(StringBuilder), (PyObject *) self, "getChars", args, 2);
        }

        static PyObject *t_StringBuilder_indexOf(t_StringBuilder *self, PyObject *args)
        {
            switch (PyTuple_GET_SIZE(args)) {
              case 1:
                {
                    ::java::lang::String a0((jobject) NULL);
                    jint result;

                    if (!parseArgs(args, "s", &a0))
                    {
                        OBJ_CALL(result = self->object.indexOf(a0));
                        return PyInt_FromLong((long) result);
                    }
                }
                break;
              case 2:
                {
                    ::java::lang::String a0((jobject) NULL);
                    jint a1;
                    jint result;

                    if (!parseArgs(args, "sI", &a0, &a1))
                    {
                        OBJ_CALL(result = self->object.indexOf(a0, a1));
                        return PyInt_FromLong((long) result);
                    }
                }
            }

            return callSuper(&PY_TYPE(StringBuilder), (PyObject *) self, "indexOf", args, 2);
        }

        static PyObject *t_StringBuilder_insert(t_StringBuilder *self, PyObject *args)
        {
            switch (PyTuple_GET_SIZE(args)) {
              case 2:
                {
                    jint a0;
                    jfloat a1;
                    StringBuilder result((jobject) NULL);

                    if (!parseArgs(args, "IF", &a0, &a1))
                    {
                        OBJ_CALL(result = self->object.insert(a0, a1));
                        return t_StringBuilder::wrap_Object(result);
                    }
                }
                {
                    jint a0;
                    JArray< jchar > a1((jobject) NULL);
                    StringBuilder result((jobject) NULL);

                    if (!parseArgs(args, "I[C", &a0, &a1))
                    {
                        OBJ_CALL(result = self->object.insert(a0, a1));
                        return t_StringBuilder::wrap_Object(result);
                    }
                }
                {
                    jint a0;
                    ::java::lang::String a1((jobject) NULL);
                    StringBuilder result((jobject) NULL);

                    if (!parseArgs(args, "Is", &a0, &a1))
                    {
                        OBJ_CALL(result = self->object.insert(a0, a1));
                        return t_StringBuilder::wrap_Object(result);
                    }
                }
                {
                    jint a0;
                    jint a1;
                    StringBuilder result((jobject) NULL);

                    if (!parseArgs(args, "II", &a0, &a1))
                    {
                        OBJ_CALL(result = self->object.insert(a0, a1));
                        return t_StringBuilder::wrap_Object(result);
                    }
                }
                {
                    jint a0;
                    jdouble a1;
                    StringBuilder result((jobject) NULL);

                    if (!parseArgs(args, "ID", &a0, &a1))
                    {
                        OBJ_CALL(result = self->object.insert(a0, a1));
                        return t_StringBuilder::wrap_Object(result);
                    }
                }
                {
                    jint a0;
                    ::java::lang::Object a1((jobject) NULL);
                    StringBuilder result((jobject) NULL);

                    if (!parseArgs(args, "Io", &a0, &a1))
                    {
                        OBJ_CALL(result = self->object.insert(a0, a1));
                        return t_StringBuilder::wrap_Object(result);
                    }
                }
                {
                    jint a0;
                    ::java::lang::CharSequence a1((jobject) NULL);
                    StringBuilder result((jobject) NULL);

                    if (!parseArgs(args, "IO", &::java::lang::PY_TYPE(CharSequence), &a0, &a1))
                    {
                        OBJ_CALL(result = self->object.insert(a0, a1));
                        return t_StringBuilder::wrap_Object(result);
                    }
                }
                {
                    jint a0;
                    jboolean a1;
                    StringBuilder result((jobject) NULL);

                    if (!parseArgs(args, "IZ", &a0, &a1))
                    {
                        OBJ_CALL(result = self->object.insert(a0, a1));
                        return t_StringBuilder::wrap_Object(result);
                    }
                }
                {
                    jint a0;
                    jchar a1;
                    StringBuilder result((jobject) NULL);

                    if (!parseArgs(args, "IC", &a0, &a1))
                    {
                        OBJ_CALL(result = self->object.insert(a0, a1));
                        return t_StringBuilder::wrap_Object(result);
                    }
                }
                {
                    jint a0;
                    jlong a1;
                    StringBuilder result((jobject) NULL);

                    if (!parseArgs(args, "IJ", &a0, &a1))
                    {
                        OBJ_CALL(result = self->object.insert(a0, a1));
                        return t_StringBuilder::wrap_Object(result);
                    }
                }
                break;
              case 4:
                {
                    jint a0;
                    ::java::lang::CharSequence a1((jobject) NULL);
                    jint a2;
                    jint a3;
                    StringBuilder result((jobject) NULL);

                    if (!parseArgs(args, "IOII", &::java::lang::PY_TYPE(CharSequence), &a0, &a1, &a2, &a3))
                    {
                        OBJ_CALL(result = self->object.insert(a0, a1, a2, a3));
                        return t_StringBuilder::wrap_Object(result);
                    }
                }
                {
                    jint a0;
                    JArray< jchar > a1((jobject) NULL);
                    jint a2;
                    jint a3;
                    StringBuilder result((jobject) NULL);

                    if (!parseArgs(args, "I[CII", &a0, &a1, &a2, &a3))
                    {
                        OBJ_CALL(result = self->object.insert(a0, a1, a2, a3));
                        return t_StringBuilder::wrap_Object(result);
                    }
                }
            }

            return callSuper(&PY_TYPE(StringBuilder), (PyObject *) self, "insert", args, 2);
        }

        static PyObject *t_StringBuilder_lastIndexOf(t_StringBuilder *self, PyObject *args)
        {
            switch (PyTuple_GET_SIZE(args)) {
              case 1:
                {
                    ::java::lang::String a0((jobject) NULL);
                    jint result;

                    if (!parseArgs(args, "s", &a0))
                    {
                        OBJ_CALL(result = self->object.lastIndexOf(a0));
                        return PyInt_FromLong((long) result);
                    }
                }
                break;
              case 2:
                {
                    ::java::lang::String a0((jobject) NULL);
                    jint a1;
                    jint result;

                    if (!parseArgs(args, "sI", &a0, &a1))
                    {
                        OBJ_CALL(result = self->object.lastIndexOf(a0, a1));
                        return PyInt_FromLong((long) result);
                    }
                }
            }

            return callSuper(&PY_TYPE(StringBuilder), (PyObject *) self, "lastIndexOf", args, 2);
        }

        static PyObject *t_StringBuilder_length(t_StringBuilder *self, PyObject *args)
        {
            jint result;

            if (!parseArgs(args, ""))
            {
                OBJ_CALL(result = self->object.length());
                return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(StringBuilder), (PyObject *) self, "length", args, 2);
        }

        static PyObject *t_StringBuilder_offsetByCodePoints(t_StringBuilder *self, PyObject *args)
        {
            jint a0;
            jint a1;
            jint result;

            if (!parseArgs(args, "II", &a0, &a1))
            {
                OBJ_CALL(result = self->object.offsetByCodePoints(a0, a1));
                return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(StringBuilder), (PyObject *) self, "offsetByCodePoints", args, 2);
        }

        static PyObject *t_StringBuilder_replace(t_StringBuilder *self, PyObject *args)
        {
            jint a0;
            jint a1;
            ::java::lang::String a2((jobject) NULL);
            StringBuilder result((jobject) NULL);

            if (!parseArgs(args, "IIs", &a0, &a1, &a2))
            {
                OBJ_CALL(result = self->object.replace(a0, a1, a2));
                return t_StringBuilder::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(StringBuilder), (PyObject *) self, "replace", args, 2);
        }

        static PyObject *t_StringBuilder_reverse(t_StringBuilder *self, PyObject *args)
        {
            StringBuilder result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
                OBJ_CALL(result = self->object.reverse());
                return t_StringBuilder::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(StringBuilder), (PyObject *) self, "reverse", args, 2);
        }

        static PyObject *t_StringBuilder_setCharAt(t_StringBuilder *self, PyObject *args)
        {
            jint a0;
            jchar a1;

            if (!parseArgs(args, "IC", &a0, &a1))
            {
                OBJ_CALL(self->object.setCharAt(a0, a1));
                Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(StringBuilder), (PyObject *) self, "setCharAt", args, 2);
        }

        static PyObject *t_StringBuilder_setLength(t_StringBuilder *self, PyObject *args)
        {
            jint a0;

            if (!parseArgs(args, "I", &a0))
            {
                OBJ_CALL(self->object.setLength(a0));
                Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(StringBuilder), (PyObject *) self, "setLength", args, 2);
        }

        static PyObject *t_StringBuilder_subSequence(t_StringBuilder *self, PyObject *args)
        {
            jint a0;
            jint a1;
            ::java::lang::CharSequence result((jobject) NULL);

            if (!parseArgs(args, "II", &a0, &a1))
            {
                OBJ_CALL(result = self->object.subSequence(a0, a1));
                return ::java::lang::t_CharSequence::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(StringBuilder), (PyObject *) self, "subSequence", args, 2);
        }

        static PyObject *t_StringBuilder_substring(t_StringBuilder *self, PyObject *args)
        {
            switch (PyTuple_GET_SIZE(args)) {
              case 1:
                {
                    jint a0;
                    ::java::lang::String result((jobject) NULL);

                    if (!parseArgs(args, "I", &a0))
                    {
                        OBJ_CALL(result = self->object.substring(a0));
                        return j2p(result);
                    }
                }
                break;
              case 2:
                {
                    jint a0;
                    jint a1;
                    ::java::lang::String result((jobject) NULL);

                    if (!parseArgs(args, "II", &a0, &a1))
                    {
                        OBJ_CALL(result = self->object.substring(a0, a1));
                        return j2p(result);
                    }
                }
            }

            return callSuper(&PY_TYPE(StringBuilder), (PyObject *) self, "substring", args, 2);
        }

        static PyObject *t_StringBuilder_toString(t_StringBuilder *self, PyObject *args)
        {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
                OBJ_CALL(result = self->object.toString());
                return j2p(result);
            }

            return callSuper(&PY_TYPE(StringBuilder), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_StringBuilder_trimToSize(t_StringBuilder *self, PyObject *args)
        {

            if (!parseArgs(args, ""))
            {
                OBJ_CALL(self->object.trimToSize());
                Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(StringBuilder), (PyObject *) self, "trimToSize", args, 2);
        }
    }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/io/PrintStream.h"
#include "java/lang/CharSequence.h"
#include "java/io/UnsupportedEncodingException.h"
#include "java/io/OutputStream.h"
#include "java/lang/Class.h"
#include "java/io/FileNotFoundException.h"
#include "java/util/Locale.h"
#include "java/io/File.h"
#include "java/lang/String.h"
#include "java/lang/Appendable.h"
#include "java/lang/Object.h"
#include "JArray.h"

namespace java {
    namespace io {

        ::java::lang::Class *PrintStream::class$ = NULL;
        jmethodID *PrintStream::mids$ = NULL;

        jclass PrintStream::initializeClass()
        {
            if (!class$)
            {

                jclass cls = (jclass) env->findClass("java/io/PrintStream");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
                mids$[mid_init$_c3dacf57] = env->getMethodID(cls, "<init>", "(Ljava/io/File;)V");
                mids$[mid_init$_82d865f8] = env->getMethodID(cls, "<init>", "(Ljava/io/OutputStream;)V");
                mids$[mid_init$_a0fd6605] = env->getMethodID(cls, "<init>", "(Ljava/io/OutputStream;Z)V");
                mids$[mid_init$_4a264742] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Ljava/lang/String;)V");
                mids$[mid_init$_b8789389] = env->getMethodID(cls, "<init>", "(Ljava/io/File;Ljava/lang/String;)V");
                mids$[mid_init$_edbcee1f] = env->getMethodID(cls, "<init>", "(Ljava/io/OutputStream;ZLjava/lang/String;)V");
                mids$[mid_append_df4c2e82] = env->getMethodID(cls, "append", "(Ljava/lang/CharSequence;)Ljava/io/PrintStream;");
                mids$[mid_append_40d6dba2] = env->getMethodID(cls, "append", "(C)Ljava/io/PrintStream;");
                mids$[mid_append_1e7d47f6] = env->getMethodID(cls, "append", "(Ljava/lang/CharSequence;II)Ljava/io/PrintStream;");
                mids$[mid_checkError_54c6a16a] = env->getMethodID(cls, "checkError", "()Z");
                mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
                mids$[mid_flush_54c6a166] = env->getMethodID(cls, "flush", "()V");
                mids$[mid_format_3f655b78] = env->getMethodID(cls, "format", "(Ljava/lang/String;[Ljava/lang/Object;)Ljava/io/PrintStream;");
                mids$[mid_format_a8a140d3] = env->getMethodID(cls, "format", "(Ljava/util/Locale;Ljava/lang/String;[Ljava/lang/Object;)Ljava/io/PrintStream;");
                mids$[mid_print_5d1c7645] = env->getMethodID(cls, "print", "(D)V");
                mids$[mid_print_87fd545a] = env->getMethodID(cls, "print", "(C)V");
                mids$[mid_print_700e23d6] = env->getMethodID(cls, "print", "([C)V");
                mids$[mid_print_bb0c767f] = env->getMethodID(cls, "print", "(Z)V");
                mids$[mid_print_39c7bd3c] = env->getMethodID(cls, "print", "(I)V");
                mids$[mid_print_5fdc3f48] = env->getMethodID(cls, "print", "(Ljava/lang/String;)V");
                mids$[mid_print_290588ee] = env->getMethodID(cls, "print", "(Ljava/lang/Object;)V");
                mids$[mid_print_06298cab] = env->getMethodID(cls, "print", "(F)V");
                mids$[mid_print_0ee6df2f] = env->getMethodID(cls, "print", "(J)V");
                mids$[mid_printf_3f655b78] = env->getMethodID(cls, "printf", "(Ljava/lang/String;[Ljava/lang/Object;)Ljava/io/PrintStream;");
                mids$[mid_printf_a8a140d3] = env->getMethodID(cls, "printf", "(Ljava/util/Locale;Ljava/lang/String;[Ljava/lang/Object;)Ljava/io/PrintStream;");
                mids$[mid_println_54c6a166] = env->getMethodID(cls, "println", "()V");
                mids$[mid_println_39c7bd3c] = env->getMethodID(cls, "println", "(I)V");
                mids$[mid_println_5fdc3f48] = env->getMethodID(cls, "println", "(Ljava/lang/String;)V");
                mids$[mid_println_0ee6df2f] = env->getMethodID(cls, "println", "(J)V");
                mids$[mid_println_bb0c767f] = env->getMethodID(cls, "println", "(Z)V");
                mids$[mid_println_06298cab] = env->getMethodID(cls, "println", "(F)V");
                mids$[mid_println_5d1c7645] = env->getMethodID(cls, "println", "(D)V");
                mids$[mid_println_700e23d6] = env->getMethodID(cls, "println", "([C)V");
                mids$[mid_println_290588ee] = env->getMethodID(cls, "println", "(Ljava/lang/Object;)V");
                mids$[mid_println_87fd545a] = env->getMethodID(cls, "println", "(C)V");
                mids$[mid_write_39c7bd3c] = env->getMethodID(cls, "write", "(I)V");
                mids$[mid_write_86f4435f] = env->getMethodID(cls, "write", "([BII)V");
                mids$[mid_setError_54c6a166] = env->getMethodID(cls, "setError", "()V");
                mids$[mid_clearError_54c6a166] = env->getMethodID(cls, "clearError", "()V");

                class$ = (::java::lang::Class *) new JObject(cls);
            }
            return (jclass) class$->this$;
        }

        PrintStream::PrintStream(const ::java::lang::String & a0) : ::java::io::FilterOutputStream(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}

        PrintStream::PrintStream(const ::java::io::File & a0) : ::java::io::FilterOutputStream(env->newObject(initializeClass, &mids$, mid_init$_c3dacf57, a0.this$)) {}

        PrintStream::PrintStream(const ::java::io::OutputStream & a0) : ::java::io::FilterOutputStream(env->newObject(initializeClass, &mids$, mid_init$_82d865f8, a0.this$)) {}

        PrintStream::PrintStream(const ::java::io::OutputStream & a0, jboolean a1) : ::java::io::FilterOutputStream(env->newObject(initializeClass, &mids$, mid_init$_a0fd6605, a0.this$, a1)) {}

        PrintStream::PrintStream(const ::java::lang::String & a0, const ::java::lang::String & a1) : ::java::io::FilterOutputStream(env->newObject(initializeClass, &mids$, mid_init$_4a264742, a0.this$, a1.this$)) {}

        PrintStream::PrintStream(const ::java::io::File & a0, const ::java::lang::String & a1) : ::java::io::FilterOutputStream(env->newObject(initializeClass, &mids$, mid_init$_b8789389, a0.this$, a1.this$)) {}

        PrintStream::PrintStream(const ::java::io::OutputStream & a0, jboolean a1, const ::java::lang::String & a2) : ::java::io::FilterOutputStream(env->newObject(initializeClass, &mids$, mid_init$_edbcee1f, a0.this$, a1, a2.this$)) {}

        PrintStream PrintStream::append(const ::java::lang::CharSequence & a0) const
        {
            return PrintStream(env->callObjectMethod(this$, mids$[mid_append_df4c2e82], a0.this$));
        }

        PrintStream PrintStream::append(jchar a0) const
        {
            return PrintStream(env->callObjectMethod(this$, mids$[mid_append_40d6dba2], a0));
        }

        PrintStream PrintStream::append(const ::java::lang::CharSequence & a0, jint a1, jint a2) const
        {
            return PrintStream(env->callObjectMethod(this$, mids$[mid_append_1e7d47f6], a0.this$, a1, a2));
        }

        jboolean PrintStream::checkError() const
        {
            return env->callBooleanMethod(this$, mids$[mid_checkError_54c6a16a]);
        }

        void PrintStream::close() const
        {
            env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
        }

        void PrintStream::flush() const
        {
            env->callVoidMethod(this$, mids$[mid_flush_54c6a166]);
        }

        PrintStream PrintStream::format(const ::java::lang::String & a0, const JArray< ::java::lang::Object > & a1) const
        {
            return PrintStream(env->callObjectMethod(this$, mids$[mid_format_3f655b78], a0.this$, a1.this$));
        }

        PrintStream PrintStream::format(const ::java::util::Locale & a0, const ::java::lang::String & a1, const JArray< ::java::lang::Object > & a2) const
        {
            return PrintStream(env->callObjectMethod(this$, mids$[mid_format_a8a140d3], a0.this$, a1.this$, a2.this$));
        }

        void PrintStream::print(jdouble a0) const
        {
            env->callVoidMethod(this$, mids$[mid_print_5d1c7645], a0);
        }

        void PrintStream::print(jchar a0) const
        {
            env->callVoidMethod(this$, mids$[mid_print_87fd545a], a0);
        }

        void PrintStream::print(const JArray< jchar > & a0) const
        {
            env->callVoidMethod(this$, mids$[mid_print_700e23d6], a0.this$);
        }

        void PrintStream::print(jboolean a0) const
        {
            env->callVoidMethod(this$, mids$[mid_print_bb0c767f], a0);
        }

        void PrintStream::print(jint a0) const
        {
            env->callVoidMethod(this$, mids$[mid_print_39c7bd3c], a0);
        }

        void PrintStream::print(const ::java::lang::String & a0) const
        {
            env->callVoidMethod(this$, mids$[mid_print_5fdc3f48], a0.this$);
        }

        void PrintStream::print(const ::java::lang::Object & a0) const
        {
            env->callVoidMethod(this$, mids$[mid_print_290588ee], a0.this$);
        }

        void PrintStream::print(jfloat a0) const
        {
            env->callVoidMethod(this$, mids$[mid_print_06298cab], a0);
        }

        void PrintStream::print(jlong a0) const
        {
            env->callVoidMethod(this$, mids$[mid_print_0ee6df2f], a0);
        }

        PrintStream PrintStream::printf(const ::java::lang::String & a0, const JArray< ::java::lang::Object > & a1) const
        {
            return PrintStream(env->callObjectMethod(this$, mids$[mid_printf_3f655b78], a0.this$, a1.this$));
        }

        PrintStream PrintStream::printf(const ::java::util::Locale & a0, const ::java::lang::String & a1, const JArray< ::java::lang::Object > & a2) const
        {
            return PrintStream(env->callObjectMethod(this$, mids$[mid_printf_a8a140d3], a0.this$, a1.this$, a2.this$));
        }

        void PrintStream::println() const
        {
            env->callVoidMethod(this$, mids$[mid_println_54c6a166]);
        }

        void PrintStream::println(jint a0) const
        {
            env->callVoidMethod(this$, mids$[mid_println_39c7bd3c], a0);
        }

        void PrintStream::println(const ::java::lang::String & a0) const
        {
            env->callVoidMethod(this$, mids$[mid_println_5fdc3f48], a0.this$);
        }

        void PrintStream::println(jlong a0) const
        {
            env->callVoidMethod(this$, mids$[mid_println_0ee6df2f], a0);
        }

        void PrintStream::println(jboolean a0) const
        {
            env->callVoidMethod(this$, mids$[mid_println_bb0c767f], a0);
        }

        void PrintStream::println(jfloat a0) const
        {
            env->callVoidMethod(this$, mids$[mid_println_06298cab], a0);
        }

        void PrintStream::println(jdouble a0) const
        {
            env->callVoidMethod(this$, mids$[mid_println_5d1c7645], a0);
        }

        void PrintStream::println(const JArray< jchar > & a0) const
        {
            env->callVoidMethod(this$, mids$[mid_println_700e23d6], a0.this$);
        }

        void PrintStream::println(const ::java::lang::Object & a0) const
        {
            env->callVoidMethod(this$, mids$[mid_println_290588ee], a0.this$);
        }

        void PrintStream::println(jchar a0) const
        {
            env->callVoidMethod(this$, mids$[mid_println_87fd545a], a0);
        }

        void PrintStream::write(jint a0) const
        {
            env->callVoidMethod(this$, mids$[mid_write_39c7bd3c], a0);
        }

        void PrintStream::write(const JArray< jbyte > & a0, jint a1, jint a2) const
        {
            env->callVoidMethod(this$, mids$[mid_write_86f4435f], a0.this$, a1, a2);
        }
    }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
    namespace io {
        static PyObject *t_PrintStream_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_PrintStream_instance_(PyTypeObject *type, PyObject *arg);
        static int t_PrintStream_init_(t_PrintStream *self, PyObject *args, PyObject *kwds);
        static PyObject *t_PrintStream_append(t_PrintStream *self, PyObject *args);
        static PyObject *t_PrintStream_checkError(t_PrintStream *self);
        static PyObject *t_PrintStream_close(t_PrintStream *self, PyObject *args);
        static PyObject *t_PrintStream_flush(t_PrintStream *self, PyObject *args);
        static PyObject *t_PrintStream_format(t_PrintStream *self, PyObject *args);
        static PyObject *t_PrintStream_print(t_PrintStream *self, PyObject *args);
        static PyObject *t_PrintStream_printf(t_PrintStream *self, PyObject *args);
        static PyObject *t_PrintStream_println(t_PrintStream *self, PyObject *args);
        static PyObject *t_PrintStream_write(t_PrintStream *self, PyObject *args);

        static PyMethodDef t_PrintStream__methods_[] = {
            DECLARE_METHOD(t_PrintStream, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PrintStream, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_PrintStream, append, METH_VARARGS),
            DECLARE_METHOD(t_PrintStream, checkError, METH_NOARGS),
            DECLARE_METHOD(t_PrintStream, close, METH_VARARGS),
            DECLARE_METHOD(t_PrintStream, flush, METH_VARARGS),
            DECLARE_METHOD(t_PrintStream, format, METH_VARARGS),
            DECLARE_METHOD(t_PrintStream, print, METH_VARARGS),
            DECLARE_METHOD(t_PrintStream, printf, METH_VARARGS),
            DECLARE_METHOD(t_PrintStream, println, METH_VARARGS),
            DECLARE_METHOD(t_PrintStream, write, METH_VARARGS),
            { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(PrintStream, t_PrintStream, ::java::io::FilterOutputStream, PrintStream, t_PrintStream_init_, 0, 0, 0, 0, 0);

        void t_PrintStream::install(PyObject *module)
        {
            installType(&PY_TYPE(PrintStream), module, "PrintStream", 0);
        }

        void t_PrintStream::initialize(PyObject *module)
        {
            PyDict_SetItemString(PY_TYPE(PrintStream).tp_dict, "class_", make_descriptor(PrintStream::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(PrintStream).tp_dict, "wrapfn_", make_descriptor(t_PrintStream::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(PrintStream).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_PrintStream_cast_(PyTypeObject *type, PyObject *arg)
        {
            if (!(arg = castCheck(arg, PrintStream::initializeClass, 1)))
                return NULL;
            return t_PrintStream::wrap_Object(PrintStream(((t_PrintStream *) arg)->object.this$));
        }
        static PyObject *t_PrintStream_instance_(PyTypeObject *type, PyObject *arg)
        {
            if (!castCheck(arg, PrintStream::initializeClass, 0))
                Py_RETURN_FALSE;
            Py_RETURN_TRUE;
        }

        static int t_PrintStream_init_(t_PrintStream *self, PyObject *args, PyObject *kwds)
        {
            switch (PyTuple_GET_SIZE(args)) {
              case 1:
                {
                    ::java::lang::String a0((jobject) NULL);
                    PrintStream object((jobject) NULL);

                    if (!parseArgs(args, "s", &a0))
                    {
                        INT_CALL(object = PrintStream(a0));
                        self->object = object;
                        break;
                    }
                }
                {
                    ::java::io::File a0((jobject) NULL);
                    PrintStream object((jobject) NULL);

                    if (!parseArgs(args, "k", ::java::io::File::initializeClass, &a0))
                    {
                        INT_CALL(object = PrintStream(a0));
                        self->object = object;
                        break;
                    }
                }
                {
                    ::java::io::OutputStream a0((jobject) NULL);
                    PrintStream object((jobject) NULL);

                    if (!parseArgs(args, "k", ::java::io::OutputStream::initializeClass, &a0))
                    {
                        INT_CALL(object = PrintStream(a0));
                        self->object = object;
                        break;
                    }
                }
                goto err;
              case 2:
                {
                    ::java::io::OutputStream a0((jobject) NULL);
                    jboolean a1;
                    PrintStream object((jobject) NULL);

                    if (!parseArgs(args, "kZ", ::java::io::OutputStream::initializeClass, &a0, &a1))
                    {
                        INT_CALL(object = PrintStream(a0, a1));
                        self->object = object;
                        break;
                    }
                }
                {
                    ::java::lang::String a0((jobject) NULL);
                    ::java::lang::String a1((jobject) NULL);
                    PrintStream object((jobject) NULL);

                    if (!parseArgs(args, "ss", &a0, &a1))
                    {
                        INT_CALL(object = PrintStream(a0, a1));
                        self->object = object;
                        break;
                    }
                }
                {
                    ::java::io::File a0((jobject) NULL);
                    ::java::lang::String a1((jobject) NULL);
                    PrintStream object((jobject) NULL);

                    if (!parseArgs(args, "ks", ::java::io::File::initializeClass, &a0, &a1))
                    {
                        INT_CALL(object = PrintStream(a0, a1));
                        self->object = object;
                        break;
                    }
                }
                goto err;
              case 3:
                {
                    ::java::io::OutputStream a0((jobject) NULL);
                    jboolean a1;
                    ::java::lang::String a2((jobject) NULL);
                    PrintStream object((jobject) NULL);

                    if (!parseArgs(args, "kZs", ::java::io::OutputStream::initializeClass, &a0, &a1, &a2))
                    {
                        INT_CALL(object = PrintStream(a0, a1, a2));
                        self->object = object;
                        break;
                    }
                }
              default:
              err:
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
            }

            return 0;
        }

        static PyObject *t_PrintStream_append(t_PrintStream *self, PyObject *args)
        {
            switch (PyTuple_GET_SIZE(args)) {
              case 1:
                {
                    ::java::lang::CharSequence a0((jobject) NULL);
                    PrintStream result((jobject) NULL);

                    if (!parseArgs(args, "O", &::java::lang::PY_TYPE(CharSequence), &a0))
                    {
                        OBJ_CALL(result = self->object.append(a0));
                        return t_PrintStream::wrap_Object(result);
                    }
                }
                {
                    jchar a0;
                    PrintStream result((jobject) NULL);

                    if (!parseArgs(args, "C", &a0))
                    {
                        OBJ_CALL(result = self->object.append(a0));
                        return t_PrintStream::wrap_Object(result);
                    }
                }
                break;
              case 3:
                {
                    ::java::lang::CharSequence a0((jobject) NULL);
                    jint a1;
                    jint a2;
                    PrintStream result((jobject) NULL);

                    if (!parseArgs(args, "OII", &::java::lang::PY_TYPE(CharSequence), &a0, &a1, &a2))
                    {
                        OBJ_CALL(result = self->object.append(a0, a1, a2));
                        return t_PrintStream::wrap_Object(result);
                    }
                }
            }

            PyErr_SetArgsError((PyObject *) self, "append", args);
            return NULL;
        }

        static PyObject *t_PrintStream_checkError(t_PrintStream *self)
        {
            jboolean result;
            OBJ_CALL(result = self->object.checkError());
            Py_RETURN_BOOL(result);
        }

        static PyObject *t_PrintStream_close(t_PrintStream *self, PyObject *args)
        {

            if (!parseArgs(args, ""))
            {
                OBJ_CALL(self->object.close());
                Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(PrintStream), (PyObject *) self, "close", args, 2);
        }

        static PyObject *t_PrintStream_flush(t_PrintStream *self, PyObject *args)
        {

            if (!parseArgs(args, ""))
            {
                OBJ_CALL(self->object.flush());
                Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(PrintStream), (PyObject *) self, "flush", args, 2);
        }

        static PyObject *t_PrintStream_format(t_PrintStream *self, PyObject *args)
        {
            switch (PyTuple_GET_SIZE(args)) {
              case 2:
                {
                    ::java::lang::String a0((jobject) NULL);
                    JArray< ::java::lang::Object > a1((jobject) NULL);
                    PrintStream result((jobject) NULL);

                    if (!parseArgs(args, "s[o", &a0, &a1))
                    {
                        OBJ_CALL(result = self->object.format(a0, a1));
                        return t_PrintStream::wrap_Object(result);
                    }
                }
                break;
              case 3:
                {
                    ::java::util::Locale a0((jobject) NULL);
                    ::java::lang::String a1((jobject) NULL);
                    JArray< ::java::lang::Object > a2((jobject) NULL);
                    PrintStream result((jobject) NULL);

                    if (!parseArgs(args, "ks[o", ::java::util::Locale::initializeClass, &a0, &a1, &a2))
                    {
                        OBJ_CALL(result = self->object.format(a0, a1, a2));
                        return t_PrintStream::wrap_Object(result);
                    }
                }
            }

            PyErr_SetArgsError((PyObject *) self, "format", args);
            return NULL;
        }

        static PyObject *t_PrintStream_print(t_PrintStream *self, PyObject *args)
        {
            switch (PyTuple_GET_SIZE(args)) {
              case 1:
                {
                    jdouble a0;

                    if (!parseArgs(args, "D", &a0))
                    {
                        OBJ_CALL(self->object.print(a0));
                        Py_RETURN_NONE;
                    }
                }
                {
                    jchar a0;

                    if (!parseArgs(args, "C", &a0))
                    {
                        OBJ_CALL(self->object.print(a0));
                        Py_RETURN_NONE;
                    }
                }
                {
                    JArray< jchar > a0((jobject) NULL);

                    if (!parseArgs(args, "[C", &a0))
                    {
                        OBJ_CALL(self->object.print(a0));
                        Py_RETURN_NONE;
                    }
                }
                {
                    jboolean a0;

                    if (!parseArgs(args, "Z", &a0))
                    {
                        OBJ_CALL(self->object.print(a0));
                        Py_RETURN_NONE;
                    }
                }
                {
                    jint a0;

                    if (!parseArgs(args, "I", &a0))
                    {
                        OBJ_CALL(self->object.print(a0));
                        Py_RETURN_NONE;
                    }
                }
                {
                    ::java::lang::String a0((jobject) NULL);

                    if (!parseArgs(args, "s", &a0))
                    {
                        OBJ_CALL(self->object.print(a0));
                        Py_RETURN_NONE;
                    }
                }
                {
                    ::java::lang::Object a0((jobject) NULL);

                    if (!parseArgs(args, "o", &a0))
                    {
                        OBJ_CALL(self->object.print(a0));
                        Py_RETURN_NONE;
                    }
                }
                {
                    jfloat a0;

                    if (!parseArgs(args, "F", &a0))
                    {
                        OBJ_CALL(self->object.print(a0));
                        Py_RETURN_NONE;
                    }
                }
                {
                    jlong a0;

                    if (!parseArgs(args, "J", &a0))
                    {
                        OBJ_CALL(self->object.print(a0));
                        Py_RETURN_NONE;
                    }
                }
            }

            PyErr_SetArgsError((PyObject *) self, "print", args);
            return NULL;
        }

        static PyObject *t_PrintStream_printf(t_PrintStream *self, PyObject *args)
        {
            switch (PyTuple_GET_SIZE(args)) {
              case 2:
                {
                    ::java::lang::String a0((jobject) NULL);
                    JArray< ::java::lang::Object > a1((jobject) NULL);
                    PrintStream result((jobject) NULL);

                    if (!parseArgs(args, "s[o", &a0, &a1))
                    {
                        OBJ_CALL(result = self->object.printf(a0, a1));
                        return t_PrintStream::wrap_Object(result);
                    }
                }
                break;
              case 3:
                {
                    ::java::util::Locale a0((jobject) NULL);
                    ::java::lang::String a1((jobject) NULL);
                    JArray< ::java::lang::Object > a2((jobject) NULL);
                    PrintStream result((jobject) NULL);

                    if (!parseArgs(args, "ks[o", ::java::util::Locale::initializeClass, &a0, &a1, &a2))
                    {
                        OBJ_CALL(result = self->object.printf(a0, a1, a2));
                        return t_PrintStream::wrap_Object(result);
                    }
                }
            }

            PyErr_SetArgsError((PyObject *) self, "printf", args);
            return NULL;
        }

        static PyObject *t_PrintStream_println(t_PrintStream *self, PyObject *args)
        {
            switch (PyTuple_GET_SIZE(args)) {
              case 0:
                {
                    OBJ_CALL(self->object.println());
                    Py_RETURN_NONE;
                }
                break;
              case 1:
                {
                    jint a0;

                    if (!parseArgs(args, "I", &a0))
                    {
                        OBJ_CALL(self->object.println(a0));
                        Py_RETURN_NONE;
                    }
                }
                {
                    ::java::lang::String a0((jobject) NULL);

                    if (!parseArgs(args, "s", &a0))
                    {
                        OBJ_CALL(self->object.println(a0));
                        Py_RETURN_NONE;
                    }
                }
                {
                    jlong a0;

                    if (!parseArgs(args, "J", &a0))
                    {
                        OBJ_CALL(self->object.println(a0));
                        Py_RETURN_NONE;
                    }
                }
                {
                    jboolean a0;

                    if (!parseArgs(args, "Z", &a0))
                    {
                        OBJ_CALL(self->object.println(a0));
                        Py_RETURN_NONE;
                    }
                }
                {
                    jfloat a0;

                    if (!parseArgs(args, "F", &a0))
                    {
                        OBJ_CALL(self->object.println(a0));
                        Py_RETURN_NONE;
                    }
                }
                {
                    jdouble a0;

                    if (!parseArgs(args, "D", &a0))
                    {
                        OBJ_CALL(self->object.println(a0));
                        Py_RETURN_NONE;
                    }
                }
                {
                    JArray< jchar > a0((jobject) NULL);

                    if (!parseArgs(args, "[C", &a0))
                    {
                        OBJ_CALL(self->object.println(a0));
                        Py_RETURN_NONE;
                    }
                }
                {
                    ::java::lang::Object a0((jobject) NULL);

                    if (!parseArgs(args, "o", &a0))
                    {
                        OBJ_CALL(self->object.println(a0));
                        Py_RETURN_NONE;
                    }
                }
                {
                    jchar a0;

                    if (!parseArgs(args, "C", &a0))
                    {
                        OBJ_CALL(self->object.println(a0));
                        Py_RETURN_NONE;
                    }
                }
            }

            PyErr_SetArgsError((PyObject *) self, "println", args);
            return NULL;
        }

        static PyObject *t_PrintStream_write(t_PrintStream *self, PyObject *args)
        {
            switch (PyTuple_GET_SIZE(args)) {
              case 1:
                {
                    jint a0;

                    if (!parseArgs(args, "I", &a0))
                    {
                        OBJ_CALL(self->object.write(a0));
                        Py_RETURN_NONE;
                    }
                }
                break;
              case 3:
                {
                    JArray< jbyte > a0((jobject) NULL);
                    jint a1;
                    jint a2;

                    if (!parseArgs(args, "[BII", &a0, &a1, &a2))
                    {
                        OBJ_CALL(self->object.write(a0, a1, a2));
                        Py_RETURN_NONE;
                    }
                }
            }

            return callSuper(&PY_TYPE(PrintStream), (PyObject *) self, "write", args, 2);
        }
    }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/util/Comparator.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace java {
    namespace util {

        ::java::lang::Class *Comparator::class$ = NULL;
        jmethodID *Comparator::mids$ = NULL;

        jclass Comparator::initializeClass()
        {
            if (!class$)
            {

                jclass cls = (jclass) env->findClass("java/util/Comparator");

                mids$ = new jmethodID[max_mid];
                mids$[mid_compare_466982ed] = env->getMethodID(cls, "compare", "(Ljava/lang/Object;Ljava/lang/Object;)I");
                mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");

                class$ = (::java::lang::Class *) new JObject(cls);
            }
            return (jclass) class$->this$;
        }

        jint Comparator::compare(const ::java::lang::Object & a0, const ::java::lang::Object & a1) const
        {
            return env->callIntMethod(this$, mids$[mid_compare_466982ed], a0.this$, a1.this$);
        }

        jboolean Comparator::equals(const ::java::lang::Object & a0) const
        {
            return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }
    }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
    namespace util {
        static PyObject *t_Comparator_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Comparator_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Comparator_of_(t_Comparator *self, PyObject *args);
        static PyObject *t_Comparator_compare(t_Comparator *self, PyObject *args);
        static PyObject *t_Comparator_equals(t_Comparator *self, PyObject *args);
        static PyObject *t_Comparator_get__parameters_(t_Comparator *self, void *data);
        static PyGetSetDef t_Comparator__fields_[] = {
            DECLARE_GET_FIELD(t_Comparator, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_Comparator__methods_[] = {
            DECLARE_METHOD(t_Comparator, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Comparator, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Comparator, of_, METH_VARARGS),
            DECLARE_METHOD(t_Comparator, compare, METH_VARARGS),
            DECLARE_METHOD(t_Comparator, equals, METH_VARARGS),
            { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(Comparator, t_Comparator, ::java::lang::Object, Comparator, abstract_init, 0, 0, t_Comparator__fields_, 0, 0);
        PyObject *t_Comparator::wrap_Object(const Comparator& object, PyTypeObject *T)
        {
            PyObject *obj = t_Comparator::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
                t_Comparator *self = (t_Comparator *) obj;
                self->parameters[0] = T;
            }
            return obj;
        }

        PyObject *t_Comparator::wrap_jobject(const jobject& object, PyTypeObject *T)
        {
            PyObject *obj = t_Comparator::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
                t_Comparator *self = (t_Comparator *) obj;
                self->parameters[0] = T;
            }
            return obj;
        }

        void t_Comparator::install(PyObject *module)
        {
            installType(&PY_TYPE(Comparator), module, "Comparator", 0);
        }

        void t_Comparator::initialize(PyObject *module)
        {
            PyDict_SetItemString(PY_TYPE(Comparator).tp_dict, "class_", make_descriptor(Comparator::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Comparator).tp_dict, "wrapfn_", make_descriptor(t_Comparator::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Comparator).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_Comparator_cast_(PyTypeObject *type, PyObject *arg)
        {
            if (!(arg = castCheck(arg, Comparator::initializeClass, 1)))
                return NULL;
            return t_Comparator::wrap_Object(Comparator(((t_Comparator *) arg)->object.this$));
        }
        static PyObject *t_Comparator_instance_(PyTypeObject *type, PyObject *arg)
        {
            if (!castCheck(arg, Comparator::initializeClass, 0))
                Py_RETURN_FALSE;
            Py_RETURN_TRUE;
        }

        static PyObject *t_Comparator_of_(t_Comparator *self, PyObject *args)
        {
            if (!parseArg(args, "T", 1, &(self->parameters)))
                Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static PyObject *t_Comparator_compare(t_Comparator *self, PyObject *args)
        {
            ::java::lang::Object a0((jobject) NULL);
            ::java::lang::Object a1((jobject) NULL);
            jint result;

            if (!parseArgs(args, "OO", self->parameters[0], self->parameters[0], &a0, &a1))
            {
                OBJ_CALL(result = self->object.compare(a0, a1));
                return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "compare", args);
            return NULL;
        }

        static PyObject *t_Comparator_equals(t_Comparator *self, PyObject *args)
        {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
                OBJ_CALL(result = self->object.equals(a0));
                Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(Comparator), (PyObject *) self, "equals", args, 2);
        }
        static PyObject *t_Comparator_get__parameters_(t_Comparator *self, void *data)
        {
            return typeParameters(self->parameters, sizeof(self->parameters));
        }
    }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/io/UnsupportedEncodingException.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace java {
    namespace io {

        ::java::lang::Class *UnsupportedEncodingException::class$ = NULL;
        jmethodID *UnsupportedEncodingException::mids$ = NULL;

        jclass UnsupportedEncodingException::initializeClass()
        {
            if (!class$)
            {

                jclass cls = (jclass) env->findClass("java/io/UnsupportedEncodingException");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");

                class$ = (::java::lang::Class *) new JObject(cls);
            }
            return (jclass) class$->this$;
        }

        UnsupportedEncodingException::UnsupportedEncodingException() : ::java::io::IOException(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        UnsupportedEncodingException::UnsupportedEncodingException(const ::java::lang::String & a0) : ::java::io::IOException(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}
    }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
    namespace io {
        static PyObject *t_UnsupportedEncodingException_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_UnsupportedEncodingException_instance_(PyTypeObject *type, PyObject *arg);
        static int t_UnsupportedEncodingException_init_(t_UnsupportedEncodingException *self, PyObject *args, PyObject *kwds);

        static PyMethodDef t_UnsupportedEncodingException__methods_[] = {
            DECLARE_METHOD(t_UnsupportedEncodingException, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_UnsupportedEncodingException, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(UnsupportedEncodingException, t_UnsupportedEncodingException, ::java::io::IOException, UnsupportedEncodingException, t_UnsupportedEncodingException_init_, 0, 0, 0, 0, 0);

        void t_UnsupportedEncodingException::install(PyObject *module)
        {
            installType(&PY_TYPE(UnsupportedEncodingException), module, "UnsupportedEncodingException", 0);
        }

        void t_UnsupportedEncodingException::initialize(PyObject *module)
        {
            PyDict_SetItemString(PY_TYPE(UnsupportedEncodingException).tp_dict, "class_", make_descriptor(UnsupportedEncodingException::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(UnsupportedEncodingException).tp_dict, "wrapfn_", make_descriptor(t_UnsupportedEncodingException::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(UnsupportedEncodingException).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_UnsupportedEncodingException_cast_(PyTypeObject *type, PyObject *arg)
        {
            if (!(arg = castCheck(arg, UnsupportedEncodingException::initializeClass, 1)))
                return NULL;
            return t_UnsupportedEncodingException::wrap_Object(UnsupportedEncodingException(((t_UnsupportedEncodingException *) arg)->object.this$));
        }
        static PyObject *t_UnsupportedEncodingException_instance_(PyTypeObject *type, PyObject *arg)
        {
            if (!castCheck(arg, UnsupportedEncodingException::initializeClass, 0))
                Py_RETURN_FALSE;
            Py_RETURN_TRUE;
        }

        static int t_UnsupportedEncodingException_init_(t_UnsupportedEncodingException *self, PyObject *args, PyObject *kwds)
        {
            switch (PyTuple_GET_SIZE(args)) {
              case 0:
                {
                    UnsupportedEncodingException object((jobject) NULL);

                    INT_CALL(object = UnsupportedEncodingException());
                    self->object = object;
                    break;
                }
                goto err;
              case 1:
                {
                    ::java::lang::String a0((jobject) NULL);
                    UnsupportedEncodingException object((jobject) NULL);

                    if (!parseArgs(args, "s", &a0))
                    {
                        INT_CALL(object = UnsupportedEncodingException(a0));
                        self->object = object;
                        break;
                    }
                }
              default:
              err:
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
            }

            return 0;
        }
    }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/lang/ClassLoader.h"
#include "java/lang/ClassNotFoundException.h"
#include "java/util/Enumeration.h"
#include "java/lang/Class.h"
#include "java/io/InputStream.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace java {
    namespace lang {

        ::java::lang::Class *ClassLoader::class$ = NULL;
        jmethodID *ClassLoader::mids$ = NULL;

        jclass ClassLoader::initializeClass()
        {
            if (!class$)
            {

                jclass cls = (jclass) env->findClass("java/lang/ClassLoader");

                mids$ = new jmethodID[max_mid];
                mids$[mid_clearAssertionStatus_54c6a166] = env->getMethodID(cls, "clearAssertionStatus", "()V");
                mids$[mid_getParent_8d2f11fc] = env->getMethodID(cls, "getParent", "()Ljava/lang/ClassLoader;");
                mids$[mid_getResourceAsStream_222e59eb] = env->getMethodID(cls, "getResourceAsStream", "(Ljava/lang/String;)Ljava/io/InputStream;");
                mids$[mid_getSystemClassLoader_8d2f11fc] = env->getStaticMethodID(cls, "getSystemClassLoader", "()Ljava/lang/ClassLoader;");
                mids$[mid_getSystemResourceAsStream_222e59eb] = env->getStaticMethodID(cls, "getSystemResourceAsStream", "(Ljava/lang/String;)Ljava/io/InputStream;");
                mids$[mid_loadClass_7d663d97] = env->getMethodID(cls, "loadClass", "(Ljava/lang/String;)Ljava/lang/Class;");
                mids$[mid_setClassAssertionStatus_f3691645] = env->getMethodID(cls, "setClassAssertionStatus", "(Ljava/lang/String;Z)V");
                mids$[mid_setDefaultAssertionStatus_bb0c767f] = env->getMethodID(cls, "setDefaultAssertionStatus", "(Z)V");
                mids$[mid_setPackageAssertionStatus_f3691645] = env->getMethodID(cls, "setPackageAssertionStatus", "(Ljava/lang/String;Z)V");
                mids$[mid_loadClass_dfdc0682] = env->getMethodID(cls, "loadClass", "(Ljava/lang/String;Z)Ljava/lang/Class;");
                mids$[mid_getPackage_d9fbaba1] = env->getMethodID(cls, "getPackage", "(Ljava/lang/String;)Ljava/lang/Package;");
                mids$[mid_setSigners_34aa77b4] = env->getMethodID(cls, "setSigners", "(Ljava/lang/Class;[Ljava/lang/Object;)V");
                mids$[mid_findClass_7d663d97] = env->getMethodID(cls, "findClass", "(Ljava/lang/String;)Ljava/lang/Class;");
                mids$[mid_defineClass_43666462] = env->getMethodID(cls, "defineClass", "(Ljava/lang/String;[BIILjava/security/ProtectionDomain;)Ljava/lang/Class;");
                mids$[mid_defineClass_deb30b89] = env->getMethodID(cls, "defineClass", "(Ljava/lang/String;Ljava/nio/ByteBuffer;Ljava/security/ProtectionDomain;)Ljava/lang/Class;");
                mids$[mid_defineClass_fd7e66de] = env->getMethodID(cls, "defineClass", "(Ljava/lang/String;[BII)Ljava/lang/Class;");
                mids$[mid_defineClass_2476a918] = env->getMethodID(cls, "defineClass", "([BII)Ljava/lang/Class;");
                mids$[mid_resolveClass_a5deaff4] = env->getMethodID(cls, "resolveClass", "(Ljava/lang/Class;)V");
                mids$[mid_findSystemClass_7d663d97] = env->getMethodID(cls, "findSystemClass", "(Ljava/lang/String;)Ljava/lang/Class;");
                mids$[mid_findLoadedClass_7d663d97] = env->getMethodID(cls, "findLoadedClass", "(Ljava/lang/String;)Ljava/lang/Class;");
                mids$[mid_findResource_77de5daa] = env->getMethodID(cls, "findResource", "(Ljava/lang/String;)Ljava/net/URL;");
                mids$[mid_findResources_1aac6a8a] = env->getMethodID(cls, "findResources", "(Ljava/lang/String;)Ljava/util/Enumeration;");
                mids$[mid_definePackage_ebf4cbfe] = env->getMethodID(cls, "definePackage", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/net/URL;)Ljava/lang/Package;");
                mids$[mid_getPackages_c03e7c17] = env->getMethodID(cls, "getPackages", "()[Ljava/lang/Package;");
                mids$[mid_findLibrary_97a5258f] = env->getMethodID(cls, "findLibrary", "(Ljava/lang/String;)Ljava/lang/String;");

                class$ = (::java::lang::Class *) new JObject(cls);
            }
            return (jclass) class$->this$;
        }

        void ClassLoader::clearAssertionStatus() const
        {
            env->callVoidMethod(this$, mids$[mid_clearAssertionStatus_54c6a166]);
        }

        ClassLoader ClassLoader::getParent() const
        {
            return ClassLoader(env->callObjectMethod(this$, mids$[mid_getParent_8d2f11fc]));
        }

        ::java::io::InputStream ClassLoader::getResourceAsStream(const ::java::lang::String & a0) const
        {
            return ::java::io::InputStream(env->callObjectMethod(this$, mids$[mid_getResourceAsStream_222e59eb], a0.this$));
        }

        ClassLoader ClassLoader::getSystemClassLoader()
        {
            jclass cls = initializeClass();
            return ClassLoader(env->callStaticObjectMethod(cls, mids$[mid_getSystemClassLoader_8d2f11fc]));
        }

        ::java::io::InputStream ClassLoader::getSystemResourceAsStream(const ::java::lang::String & a0)
        {
            jclass cls = initializeClass();
            return ::java::io::InputStream(env->callStaticObjectMethod(cls, mids$[mid_getSystemResourceAsStream_222e59eb], a0.this$));
        }

        ::java::lang::Class ClassLoader::loadClass(const ::java::lang::String & a0) const
        {
            return ::java::lang::Class(env->callObjectMethod(this$, mids$[mid_loadClass_7d663d97], a0.this$));
        }

        void ClassLoader::setClassAssertionStatus(const ::java::lang::String & a0, jboolean a1) const
        {
            env->callVoidMethod(this$, mids$[mid_setClassAssertionStatus_f3691645], a0.this$, a1);
        }

        void ClassLoader::setDefaultAssertionStatus(jboolean a0) const
        {
            env->callVoidMethod(this$, mids$[mid_setDefaultAssertionStatus_bb0c767f], a0);
        }

        void ClassLoader::setPackageAssertionStatus(const ::java::lang::String & a0, jboolean a1) const
        {
            env->callVoidMethod(this$, mids$[mid_setPackageAssertionStatus_f3691645], a0.this$, a1);
        }
    }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
    namespace lang {
        static PyObject *t_ClassLoader_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_ClassLoader_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_ClassLoader_clearAssertionStatus(t_ClassLoader *self);
        static PyObject *t_ClassLoader_getParent(t_ClassLoader *self);
        static PyObject *t_ClassLoader_getResourceAsStream(t_ClassLoader *self, PyObject *arg);
        static PyObject *t_ClassLoader_getSystemClassLoader(PyTypeObject *type);
        static PyObject *t_ClassLoader_getSystemResourceAsStream(PyTypeObject *type, PyObject *arg);
        static PyObject *t_ClassLoader_loadClass(t_ClassLoader *self, PyObject *arg);
        static PyObject *t_ClassLoader_setClassAssertionStatus(t_ClassLoader *self, PyObject *args);
        static PyObject *t_ClassLoader_setDefaultAssertionStatus(t_ClassLoader *self, PyObject *arg);
        static PyObject *t_ClassLoader_setPackageAssertionStatus(t_ClassLoader *self, PyObject *args);
        static int t_ClassLoader_set__defaultAssertionStatus(t_ClassLoader *self, PyObject *arg, void *data);
        static PyObject *t_ClassLoader_get__parent(t_ClassLoader *self, void *data);
        static PyObject *t_ClassLoader_get__systemClassLoader(t_ClassLoader *self, void *data);
        static PyGetSetDef t_ClassLoader__fields_[] = {
            DECLARE_SET_FIELD(t_ClassLoader, defaultAssertionStatus),
            DECLARE_GET_FIELD(t_ClassLoader, parent),
            DECLARE_GET_FIELD(t_ClassLoader, systemClassLoader),
            { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_ClassLoader__methods_[] = {
            DECLARE_METHOD(t_ClassLoader, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ClassLoader, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ClassLoader, clearAssertionStatus, METH_NOARGS),
            DECLARE_METHOD(t_ClassLoader, getParent, METH_NOARGS),
            DECLARE_METHOD(t_ClassLoader, getResourceAsStream, METH_O),
            DECLARE_METHOD(t_ClassLoader, getSystemClassLoader, METH_NOARGS | METH_CLASS),
            DECLARE_METHOD(t_ClassLoader, getSystemResourceAsStream, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ClassLoader, loadClass, METH_O),
            DECLARE_METHOD(t_ClassLoader, setClassAssertionStatus, METH_VARARGS),
            DECLARE_METHOD(t_ClassLoader, setDefaultAssertionStatus, METH_O),
            DECLARE_METHOD(t_ClassLoader, setPackageAssertionStatus, METH_VARARGS),
            { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(ClassLoader, t_ClassLoader, ::java::lang::Object, ClassLoader, abstract_init, 0, 0, t_ClassLoader__fields_, 0, 0);

        void t_ClassLoader::install(PyObject *module)
        {
            installType(&PY_TYPE(ClassLoader), module, "ClassLoader", 0);
        }

        void t_ClassLoader::initialize(PyObject *module)
        {
            PyDict_SetItemString(PY_TYPE(ClassLoader).tp_dict, "class_", make_descriptor(ClassLoader::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(ClassLoader).tp_dict, "wrapfn_", make_descriptor(t_ClassLoader::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(ClassLoader).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_ClassLoader_cast_(PyTypeObject *type, PyObject *arg)
        {
            if (!(arg = castCheck(arg, ClassLoader::initializeClass, 1)))
                return NULL;
            return t_ClassLoader::wrap_Object(ClassLoader(((t_ClassLoader *) arg)->object.this$));
        }
        static PyObject *t_ClassLoader_instance_(PyTypeObject *type, PyObject *arg)
        {
            if (!castCheck(arg, ClassLoader::initializeClass, 0))
                Py_RETURN_FALSE;
            Py_RETURN_TRUE;
        }

        static PyObject *t_ClassLoader_clearAssertionStatus(t_ClassLoader *self)
        {
            OBJ_CALL(self->object.clearAssertionStatus());
            Py_RETURN_NONE;
        }

        static PyObject *t_ClassLoader_getParent(t_ClassLoader *self)
        {
            ClassLoader result((jobject) NULL);
            OBJ_CALL(result = self->object.getParent());
            return t_ClassLoader::wrap_Object(result);
        }

        static PyObject *t_ClassLoader_getResourceAsStream(t_ClassLoader *self, PyObject *arg)
        {
            ::java::lang::String a0((jobject) NULL);
            ::java::io::InputStream result((jobject) NULL);

            if (!parseArg(arg, "s", &a0))
            {
                OBJ_CALL(result = self->object.getResourceAsStream(a0));
                return ::java::io::t_InputStream::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "getResourceAsStream", arg);
            return NULL;
        }

        static PyObject *t_ClassLoader_getSystemClassLoader(PyTypeObject *type)
        {
            ClassLoader result((jobject) NULL);
            OBJ_CALL(result = ::java::lang::ClassLoader::getSystemClassLoader());
            return t_ClassLoader::wrap_Object(result);
        }

        static PyObject *t_ClassLoader_getSystemResourceAsStream(PyTypeObject *type, PyObject *arg)
        {
            ::java::lang::String a0((jobject) NULL);
            ::java::io::InputStream result((jobject) NULL);

            if (!parseArg(arg, "s", &a0))
            {
                OBJ_CALL(result = ::java::lang::ClassLoader::getSystemResourceAsStream(a0));
                return ::java::io::t_InputStream::wrap_Object(result);
            }

            PyErr_SetArgsError(type, "getSystemResourceAsStream", arg);
            return NULL;
        }

        static PyObject *t_ClassLoader_loadClass(t_ClassLoader *self, PyObject *arg)
        {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::Class result((jobject) NULL);

            if (!parseArg(arg, "s", &a0))
            {
                OBJ_CALL(result = self->object.loadClass(a0));
                return ::java::lang::t_Class::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "loadClass", arg);
            return NULL;
        }

        static PyObject *t_ClassLoader_setClassAssertionStatus(t_ClassLoader *self, PyObject *args)
        {
            ::java::lang::String a0((jobject) NULL);
            jboolean a1;

            if (!parseArgs(args, "sZ", &a0, &a1))
            {
                OBJ_CALL(self->object.setClassAssertionStatus(a0, a1));
                Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setClassAssertionStatus", args);
            return NULL;
        }

        static PyObject *t_ClassLoader_setDefaultAssertionStatus(t_ClassLoader *self, PyObject *arg)
        {
            jboolean a0;

            if (!parseArg(arg, "Z", &a0))
            {
                OBJ_CALL(self->object.setDefaultAssertionStatus(a0));
                Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setDefaultAssertionStatus", arg);
            return NULL;
        }

        static PyObject *t_ClassLoader_setPackageAssertionStatus(t_ClassLoader *self, PyObject *args)
        {
            ::java::lang::String a0((jobject) NULL);
            jboolean a1;

            if (!parseArgs(args, "sZ", &a0, &a1))
            {
                OBJ_CALL(self->object.setPackageAssertionStatus(a0, a1));
                Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setPackageAssertionStatus", args);
            return NULL;
        }

        static int t_ClassLoader_set__defaultAssertionStatus(t_ClassLoader *self, PyObject *arg, void *data)
        {
            {
                jboolean value;
                if (!parseArg(arg, "Z", &value))
                {
                    INT_CALL(self->object.setDefaultAssertionStatus(value));
                    return 0;
                }
            }
            PyErr_SetArgsError((PyObject *) self, "defaultAssertionStatus", arg);
            return -1;
        }

        static PyObject *t_ClassLoader_get__parent(t_ClassLoader *self, void *data)
        {
            ClassLoader value((jobject) NULL);
            OBJ_CALL(value = self->object.getParent());
            return t_ClassLoader::wrap_Object(value);
        }

        static PyObject *t_ClassLoader_get__systemClassLoader(t_ClassLoader *self, void *data)
        {
            ClassLoader value((jobject) NULL);
            OBJ_CALL(value = self->object.getSystemClassLoader());
            return t_ClassLoader::wrap_Object(value);
        }
    }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/io/Serializable.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace java {
    namespace io {

        ::java::lang::Class *Serializable::class$ = NULL;
        jmethodID *Serializable::mids$ = NULL;

        jclass Serializable::initializeClass()
        {
            if (!class$)
            {

                jclass cls = (jclass) env->findClass("java/io/Serializable");

                class$ = (::java::lang::Class *) new JObject(cls);
            }
            return (jclass) class$->this$;
        }
    }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
    namespace io {
        static PyObject *t_Serializable_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Serializable_instance_(PyTypeObject *type, PyObject *arg);

        static PyMethodDef t_Serializable__methods_[] = {
            DECLARE_METHOD(t_Serializable, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Serializable, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(Serializable, t_Serializable, ::java::lang::Object, Serializable, abstract_init, 0, 0, 0, 0, 0);

        void t_Serializable::install(PyObject *module)
        {
            installType(&PY_TYPE(Serializable), module, "Serializable", 0);
        }

        void t_Serializable::initialize(PyObject *module)
        {
            PyDict_SetItemString(PY_TYPE(Serializable).tp_dict, "class_", make_descriptor(Serializable::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Serializable).tp_dict, "wrapfn_", make_descriptor(t_Serializable::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Serializable).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_Serializable_cast_(PyTypeObject *type, PyObject *arg)
        {
            if (!(arg = castCheck(arg, Serializable::initializeClass, 1)))
                return NULL;
            return t_Serializable::wrap_Object(Serializable(((t_Serializable *) arg)->object.this$));
        }
        static PyObject *t_Serializable_instance_(PyTypeObject *type, PyObject *arg)
        {
            if (!castCheck(arg, Serializable::initializeClass, 0))
                Py_RETURN_FALSE;
            Py_RETURN_TRUE;
        }
    }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/io/FileNotFoundException.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace java {
    namespace io {

        ::java::lang::Class *FileNotFoundException::class$ = NULL;
        jmethodID *FileNotFoundException::mids$ = NULL;

        jclass FileNotFoundException::initializeClass()
        {
            if (!class$)
            {

                jclass cls = (jclass) env->findClass("java/io/FileNotFoundException");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");

                class$ = (::java::lang::Class *) new JObject(cls);
            }
            return (jclass) class$->this$;
        }

        FileNotFoundException::FileNotFoundException() : ::java::io::IOException(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        FileNotFoundException::FileNotFoundException(const ::java::lang::String & a0) : ::java::io::IOException(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}
    }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
    namespace io {
        static PyObject *t_FileNotFoundException_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FileNotFoundException_instance_(PyTypeObject *type, PyObject *arg);
        static int t_FileNotFoundException_init_(t_FileNotFoundException *self, PyObject *args, PyObject *kwds);

        static PyMethodDef t_FileNotFoundException__methods_[] = {
            DECLARE_METHOD(t_FileNotFoundException, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FileNotFoundException, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FileNotFoundException, t_FileNotFoundException, ::java::io::IOException, FileNotFoundException, t_FileNotFoundException_init_, 0, 0, 0, 0, 0);

        void t_FileNotFoundException::install(PyObject *module)
        {
            installType(&PY_TYPE(FileNotFoundException), module, "FileNotFoundException", 0);
        }

        void t_FileNotFoundException::initialize(PyObject *module)
        {
            PyDict_SetItemString(PY_TYPE(FileNotFoundException).tp_dict, "class_", make_descriptor(FileNotFoundException::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(FileNotFoundException).tp_dict, "wrapfn_", make_descriptor(t_FileNotFoundException::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(FileNotFoundException).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FileNotFoundException_cast_(PyTypeObject *type, PyObject *arg)
        {
            if (!(arg = castCheck(arg, FileNotFoundException::initializeClass, 1)))
                return NULL;
            return t_FileNotFoundException::wrap_Object(FileNotFoundException(((t_FileNotFoundException *) arg)->object.this$));
        }
        static PyObject *t_FileNotFoundException_instance_(PyTypeObject *type, PyObject *arg)
        {
            if (!castCheck(arg, FileNotFoundException::initializeClass, 0))
                Py_RETURN_FALSE;
            Py_RETURN_TRUE;
        }

        static int t_FileNotFoundException_init_(t_FileNotFoundException *self, PyObject *args, PyObject *kwds)
        {
            switch (PyTuple_GET_SIZE(args)) {
              case 0:
                {
                    FileNotFoundException object((jobject) NULL);

                    INT_CALL(object = FileNotFoundException());
                    self->object = object;
                    break;
                }
                goto err;
              case 1:
                {
                    ::java::lang::String a0((jobject) NULL);
                    FileNotFoundException object((jobject) NULL);

                    if (!parseArgs(args, "s", &a0))
                    {
                        INT_CALL(object = FileNotFoundException(a0));
                        self->object = object;
                        break;
                    }
                }
              default:
              err:
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
            }

            return 0;
        }
    }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/util/AbstractSet.h"
#include "java/util/Collection.h"
#include "java/util/Set.h"
#include "java/lang/Class.h"
#include "java/util/Iterator.h"
#include "java/lang/Object.h"
#include "JArray.h"

namespace java {
    namespace util {

        ::java::lang::Class *AbstractSet::class$ = NULL;
        jmethodID *AbstractSet::mids$ = NULL;

        jclass AbstractSet::initializeClass()
        {
            if (!class$)
            {

                jclass cls = (jclass) env->findClass("java/util/AbstractSet");

                mids$ = new jmethodID[max_mid];
                mids$[mid_add_290588e2] = env->getMethodID(cls, "add", "(Ljava/lang/Object;)Z");
                mids$[mid_addAll_9bfb3701] = env->getMethodID(cls, "addAll", "(Ljava/util/Collection;)Z");
                mids$[mid_clear_54c6a166] = env->getMethodID(cls, "clear", "()V");
                mids$[mid_contains_290588e2] = env->getMethodID(cls, "contains", "(Ljava/lang/Object;)Z");
                mids$[mid_containsAll_9bfb3701] = env->getMethodID(cls, "containsAll", "(Ljava/util/Collection;)Z");
                mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
                mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
                mids$[mid_isEmpty_54c6a16a] = env->getMethodID(cls, "isEmpty", "()Z");
                mids$[mid_iterator_40858c90] = env->getMethodID(cls, "iterator", "()Ljava/util/Iterator;");
                mids$[mid_remove_290588e2] = env->getMethodID(cls, "remove", "(Ljava/lang/Object;)Z");
                mids$[mid_removeAll_9bfb3701] = env->getMethodID(cls, "removeAll", "(Ljava/util/Collection;)Z");
                mids$[mid_retainAll_9bfb3701] = env->getMethodID(cls, "retainAll", "(Ljava/util/Collection;)Z");
                mids$[mid_size_54c6a179] = env->getMethodID(cls, "size", "()I");
                mids$[mid_toArray_94e49c77] = env->getMethodID(cls, "toArray", "()[Ljava/lang/Object;");
                mids$[mid_toArray_ae67dbcf] = env->getMethodID(cls, "toArray", "([Ljava/lang/Object;)[Ljava/lang/Object;");

                class$ = (::java::lang::Class *) new JObject(cls);
            }
            return (jclass) class$->this$;
        }

        jboolean AbstractSet::add(const ::java::lang::Object & a0) const
        {
            return env->callBooleanMethod(this$, mids$[mid_add_290588e2], a0.this$);
        }

        jboolean AbstractSet::addAll(const ::java::util::Collection & a0) const
        {
            return env->callBooleanMethod(this$, mids$[mid_addAll_9bfb3701], a0.this$);
        }

        void AbstractSet::clear() const
        {
            env->callVoidMethod(this$, mids$[mid_clear_54c6a166]);
        }

        jboolean AbstractSet::contains(const ::java::lang::Object & a0) const
        {
            return env->callBooleanMethod(this$, mids$[mid_contains_290588e2], a0.this$);
        }

        jboolean AbstractSet::containsAll(const ::java::util::Collection & a0) const
        {
            return env->callBooleanMethod(this$, mids$[mid_containsAll_9bfb3701], a0.this$);
        }

        jboolean AbstractSet::equals(const ::java::lang::Object & a0) const
        {
            return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        jint AbstractSet::hashCode() const
        {
            return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        jboolean AbstractSet::isEmpty() const
        {
            return env->callBooleanMethod(this$, mids$[mid_isEmpty_54c6a16a]);
        }

        ::java::util::Iterator AbstractSet::iterator() const
        {
            return ::java::util::Iterator(env->callObjectMethod(this$, mids$[mid_iterator_40858c90]));
        }

        jboolean AbstractSet::remove(const ::java::lang::Object & a0) const
        {
            return env->callBooleanMethod(this$, mids$[mid_remove_290588e2], a0.this$);
        }

        jboolean AbstractSet::removeAll(const ::java::util::Collection & a0) const
        {
            return env->callBooleanMethod(this$, mids$[mid_removeAll_9bfb3701], a0.this$);
        }

        jboolean AbstractSet::retainAll(const ::java::util::Collection & a0) const
        {
            return env->callBooleanMethod(this$, mids$[mid_retainAll_9bfb3701], a0.this$);
        }

        jint AbstractSet::size() const
        {
            return env->callIntMethod(this$, mids$[mid_size_54c6a179]);
        }

        JArray< ::java::lang::Object > AbstractSet::toArray() const
        {
            return JArray< ::java::lang::Object >(env->callObjectMethod(this$, mids$[mid_toArray_94e49c77]));
        }

        JArray< ::java::lang::Object > AbstractSet::toArray(const JArray< ::java::lang::Object > & a0) const
        {
            return JArray< ::java::lang::Object >(env->callObjectMethod(this$, mids$[mid_toArray_ae67dbcf], a0.this$));
        }
    }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
    namespace util {
        static PyObject *t_AbstractSet_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_AbstractSet_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_AbstractSet_of_(t_AbstractSet *self, PyObject *args);
        static PyObject *t_AbstractSet_add(t_AbstractSet *self, PyObject *args);
        static PyObject *t_AbstractSet_addAll(t_AbstractSet *self, PyObject *args);
        static PyObject *t_AbstractSet_clear(t_AbstractSet *self, PyObject *args);
        static PyObject *t_AbstractSet_contains(t_AbstractSet *self, PyObject *args);
        static PyObject *t_AbstractSet_containsAll(t_AbstractSet *self, PyObject *args);
        static PyObject *t_AbstractSet_equals(t_AbstractSet *self, PyObject *args);
        static PyObject *t_AbstractSet_hashCode(t_AbstractSet *self, PyObject *args);
        static PyObject *t_AbstractSet_isEmpty(t_AbstractSet *self, PyObject *args);
        static PyObject *t_AbstractSet_iterator(t_AbstractSet *self, PyObject *args);
        static PyObject *t_AbstractSet_remove(t_AbstractSet *self, PyObject *args);
        static PyObject *t_AbstractSet_removeAll(t_AbstractSet *self, PyObject *args);
        static PyObject *t_AbstractSet_retainAll(t_AbstractSet *self, PyObject *args);
        static PyObject *t_AbstractSet_size(t_AbstractSet *self, PyObject *args);
        static PyObject *t_AbstractSet_toArray(t_AbstractSet *self, PyObject *args);
        static PyObject *t_AbstractSet_get__empty(t_AbstractSet *self, void *data);
        static PyObject *t_AbstractSet_get__parameters_(t_AbstractSet *self, void *data);
        static PyGetSetDef t_AbstractSet__fields_[] = {
            DECLARE_GET_FIELD(t_AbstractSet, empty),
            DECLARE_GET_FIELD(t_AbstractSet, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_AbstractSet__methods_[] = {
            DECLARE_METHOD(t_AbstractSet, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_AbstractSet, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_AbstractSet, of_, METH_VARARGS),
            DECLARE_METHOD(t_AbstractSet, add, METH_VARARGS),
            DECLARE_METHOD(t_AbstractSet, addAll, METH_VARARGS),
            DECLARE_METHOD(t_AbstractSet, clear, METH_VARARGS),
            DECLARE_METHOD(t_AbstractSet, contains, METH_VARARGS),
            DECLARE_METHOD(t_AbstractSet, containsAll, METH_VARARGS),
            DECLARE_METHOD(t_AbstractSet, equals, METH_VARARGS),
            DECLARE_METHOD(t_AbstractSet, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_AbstractSet, isEmpty, METH_VARARGS),
            DECLARE_METHOD(t_AbstractSet, iterator, METH_VARARGS),
            DECLARE_METHOD(t_AbstractSet, remove, METH_VARARGS),
            DECLARE_METHOD(t_AbstractSet, removeAll, METH_VARARGS),
            DECLARE_METHOD(t_AbstractSet, retainAll, METH_VARARGS),
            DECLARE_METHOD(t_AbstractSet, size, METH_VARARGS),
            DECLARE_METHOD(t_AbstractSet, toArray, METH_VARARGS),
            { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(AbstractSet, t_AbstractSet, ::java::util::AbstractCollection, AbstractSet, abstract_init, ((PyObject *(*)(t_AbstractSet *)) get_generic_iterator< t_AbstractSet >), 0, t_AbstractSet__fields_, 0, 0);
        PyObject *t_AbstractSet::wrap_Object(const AbstractSet& object, PyTypeObject *E)
        {
            PyObject *obj = t_AbstractSet::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
                t_AbstractSet *self = (t_AbstractSet *) obj;
                self->parameters[0] = E;
            }
            return obj;
        }

        PyObject *t_AbstractSet::wrap_jobject(const jobject& object, PyTypeObject *E)
        {
            PyObject *obj = t_AbstractSet::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
                t_AbstractSet *self = (t_AbstractSet *) obj;
                self->parameters[0] = E;
            }
            return obj;
        }

        void t_AbstractSet::install(PyObject *module)
        {
            installType(&PY_TYPE(AbstractSet), module, "AbstractSet", 0);
        }

        void t_AbstractSet::initialize(PyObject *module)
        {
            PyDict_SetItemString(PY_TYPE(AbstractSet).tp_dict, "class_", make_descriptor(AbstractSet::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(AbstractSet).tp_dict, "wrapfn_", make_descriptor(t_AbstractSet::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(AbstractSet).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_AbstractSet_cast_(PyTypeObject *type, PyObject *arg)
        {
            if (!(arg = castCheck(arg, AbstractSet::initializeClass, 1)))
                return NULL;
            return t_AbstractSet::wrap_Object(AbstractSet(((t_AbstractSet *) arg)->object.this$));
        }
        static PyObject *t_AbstractSet_instance_(PyTypeObject *type, PyObject *arg)
        {
            if (!castCheck(arg, AbstractSet::initializeClass, 0))
                Py_RETURN_FALSE;
            Py_RETURN_TRUE;
        }

        static PyObject *t_AbstractSet_of_(t_AbstractSet *self, PyObject *args)
        {
            if (!parseArg(args, "T", 1, &(self->parameters)))
                Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static PyObject *t_AbstractSet_add(t_AbstractSet *self, PyObject *args)
        {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
                OBJ_CALL(result = self->object.add(a0));
                Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(AbstractSet), (PyObject *) self, "add", args, 2);
        }

        static PyObject *t_AbstractSet_addAll(t_AbstractSet *self, PyObject *args)
        {
            ::java::util::Collection a0((jobject) NULL);
            PyTypeObject **p0;
            jboolean result;

            if (!parseArgs(args, "K", ::java::util::Collection::initializeClass, &a0, &p0, ::java::util::t_Collection::parameters_))
            {
                OBJ_CALL(result = self->object.addAll(a0));
                Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(AbstractSet), (PyObject *) self, "addAll", args, 2);
        }

        static PyObject *t_AbstractSet_clear(t_AbstractSet *self, PyObject *args)
        {

            if (!parseArgs(args, ""))
            {
                OBJ_CALL(self->object.clear());
                Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(AbstractSet), (PyObject *) self, "clear", args, 2);
        }

        static PyObject *t_AbstractSet_contains(t_AbstractSet *self, PyObject *args)
        {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
                OBJ_CALL(result = self->object.contains(a0));
                Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(AbstractSet), (PyObject *) self, "contains", args, 2);
        }

        static PyObject *t_AbstractSet_containsAll(t_AbstractSet *self, PyObject *args)
        {
            ::java::util::Collection a0((jobject) NULL);
            PyTypeObject **p0;
            jboolean result;

            if (!parseArgs(args, "K", ::java::util::Collection::initializeClass, &a0, &p0, ::java::util::t_Collection::parameters_))
            {
                OBJ_CALL(result = self->object.containsAll(a0));
                Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(AbstractSet), (PyObject *) self, "containsAll", args, 2);
        }

        static PyObject *t_AbstractSet_equals(t_AbstractSet *self, PyObject *args)
        {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
                OBJ_CALL(result = self->object.equals(a0));
                Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(AbstractSet), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_AbstractSet_hashCode(t_AbstractSet *self, PyObject *args)
        {
            jint result;

            if (!parseArgs(args, ""))
            {
                OBJ_CALL(result = self->object.hashCode());
                return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(AbstractSet), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_AbstractSet_isEmpty(t_AbstractSet *self, PyObject *args)
        {
            jboolean result;

            if (!parseArgs(args, ""))
            {
                OBJ_CALL(result = self->object.isEmpty());
                Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(AbstractSet), (PyObject *) self, "isEmpty", args, 2);
        }

        static PyObject *t_AbstractSet_iterator(t_AbstractSet *self, PyObject *args)
        {
            ::java::util::Iterator result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
                OBJ_CALL(result = self->object.iterator());
                return ::java::util::t_Iterator::wrap_Object(result, self->parameters[0]);
            }

            return callSuper(&PY_TYPE(AbstractSet), (PyObject *) self, "iterator", args, 2);
        }

        static PyObject *t_AbstractSet_remove(t_AbstractSet *self, PyObject *args)
        {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
                OBJ_CALL(result = self->object.remove(a0));
                Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(AbstractSet), (PyObject *) self, "remove", args, 2);
        }

        static PyObject *t_AbstractSet_removeAll(t_AbstractSet *self, PyObject *args)
        {
            ::java::util::Collection a0((jobject) NULL);
            PyTypeObject **p0;
            jboolean result;

            if (!parseArgs(args, "K", ::java::util::Collection::initializeClass, &a0, &p0, ::java::util::t_Collection::parameters_))
            {
                OBJ_CALL(result = self->object.removeAll(a0));
                Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(AbstractSet), (PyObject *) self, "removeAll", args, 2);
        }

        static PyObject *t_AbstractSet_retainAll(t_AbstractSet *self, PyObject *args)
        {
            ::java::util::Collection a0((jobject) NULL);
            PyTypeObject **p0;
            jboolean result;

            if (!parseArgs(args, "K", ::java::util::Collection::initializeClass, &a0, &p0, ::java::util::t_Collection::parameters_))
            {
                OBJ_CALL(result = self->object.retainAll(a0));
                Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(AbstractSet), (PyObject *) self, "retainAll", args, 2);
        }

        static PyObject *t_AbstractSet_size(t_AbstractSet *self, PyObject *args)
        {
            jint result;

            if (!parseArgs(args, ""))
            {
                OBJ_CALL(result = self->object.size());
                return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(AbstractSet), (PyObject *) self, "size", args, 2);
        }

        static PyObject *t_AbstractSet_toArray(t_AbstractSet *self, PyObject *args)
        {
            switch (PyTuple_GET_SIZE(args)) {
              case 0:
                {
                    JArray< ::java::lang::Object > result((jobject) NULL);
                    OBJ_CALL(result = self->object.toArray());
                    return JArray<jobject>(result.this$).wrap(::java::lang::t_Object::wrap_jobject);
                }
                break;
              case 1:
                {
                    JArray< ::java::lang::Object > a0((jobject) NULL);
                    JArray< ::java::lang::Object > result((jobject) NULL);

                    if (!parseArgs(args, "[o", &a0))
                    {
                        OBJ_CALL(result = self->object.toArray(a0));
                        return JArray<jobject>(result.this$).wrap(::java::lang::t_Object::wrap_jobject);
                    }
                }
            }

            return callSuper(&PY_TYPE(AbstractSet), (PyObject *) self, "toArray", args, 2);
        }
        static PyObject *t_AbstractSet_get__parameters_(t_AbstractSet *self, void *data)
        {
            return typeParameters(self->parameters, sizeof(self->parameters));
        }

        static PyObject *t_AbstractSet_get__empty(t_AbstractSet *self, void *data)
        {
            jboolean value;
            OBJ_CALL(value = self->object.isEmpty());
            Py_RETURN_BOOL(value);
        }
    }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/util/Locale.h"
#include "java/util/MissingResourceException.h"
#include "java/lang/Cloneable.h"
#include "java/io/Serializable.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace java {
    namespace util {

        ::java::lang::Class *Locale::class$ = NULL;
        jmethodID *Locale::mids$ = NULL;
        Locale *Locale::CANADA = NULL;
        Locale *Locale::CANADA_FRENCH = NULL;
        Locale *Locale::CHINA = NULL;
        Locale *Locale::CHINESE = NULL;
        Locale *Locale::ENGLISH = NULL;
        Locale *Locale::FRANCE = NULL;
        Locale *Locale::FRENCH = NULL;
        Locale *Locale::GERMAN = NULL;
        Locale *Locale::GERMANY = NULL;
        Locale *Locale::ITALIAN = NULL;
        Locale *Locale::ITALY = NULL;
        Locale *Locale::JAPAN = NULL;
        Locale *Locale::JAPANESE = NULL;
        Locale *Locale::KOREA = NULL;
        Locale *Locale::KOREAN = NULL;
        Locale *Locale::PRC = NULL;
        Locale *Locale::ROOT = NULL;
        Locale *Locale::SIMPLIFIED_CHINESE = NULL;
        Locale *Locale::TAIWAN = NULL;
        Locale *Locale::TRADITIONAL_CHINESE = NULL;
        Locale *Locale::UK = NULL;
        Locale *Locale::US = NULL;

        jclass Locale::initializeClass()
        {
            if (!class$)
            {

                jclass cls = (jclass) env->findClass("java/util/Locale");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
                mids$[mid_init$_4a264742] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Ljava/lang/String;)V");
                mids$[mid_init$_9c119564] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V");
                mids$[mid_clone_846352c3] = env->getMethodID(cls, "clone", "()Ljava/lang/Object;");
                mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
                mids$[mid_getAvailableLocales_59cb5b46] = env->getStaticMethodID(cls, "getAvailableLocales", "()[Ljava/util/Locale;");
                mids$[mid_getCountry_14c7b5c5] = env->getMethodID(cls, "getCountry", "()Ljava/lang/String;");
                mids$[mid_getDefault_8bb22876] = env->getStaticMethodID(cls, "getDefault", "()Ljava/util/Locale;");
                mids$[mid_getDisplayCountry_14c7b5c5] = env->getMethodID(cls, "getDisplayCountry", "()Ljava/lang/String;");
                mids$[mid_getDisplayCountry_c0fb304e] = env->getMethodID(cls, "getDisplayCountry", "(Ljava/util/Locale;)Ljava/lang/String;");
                mids$[mid_getDisplayLanguage_14c7b5c5] = env->getMethodID(cls, "getDisplayLanguage", "()Ljava/lang/String;");
                mids$[mid_getDisplayLanguage_c0fb304e] = env->getMethodID(cls, "getDisplayLanguage", "(Ljava/util/Locale;)Ljava/lang/String;");
                mids$[mid_getDisplayName_14c7b5c5] = env->getMethodID(cls, "getDisplayName", "()Ljava/lang/String;");
                mids$[mid_getDisplayName_c0fb304e] = env->getMethodID(cls, "getDisplayName", "(Ljava/util/Locale;)Ljava/lang/String;");
                mids$[mid_getDisplayVariant_14c7b5c5] = env->getMethodID(cls, "getDisplayVariant", "()Ljava/lang/String;");
                mids$[mid_getDisplayVariant_c0fb304e] = env->getMethodID(cls, "getDisplayVariant", "(Ljava/util/Locale;)Ljava/lang/String;");
                mids$[mid_getISO3Country_14c7b5c5] = env->getMethodID(cls, "getISO3Country", "()Ljava/lang/String;");
                mids$[mid_getISO3Language_14c7b5c5] = env->getMethodID(cls, "getISO3Language", "()Ljava/lang/String;");
                mids$[mid_getISOCountries_2e6d5245] = env->getStaticMethodID(cls, "getISOCountries", "()[Ljava/lang/String;");
                mids$[mid_getISOLanguages_2e6d5245] = env->getStaticMethodID(cls, "getISOLanguages", "()[Ljava/lang/String;");
                mids$[mid_getLanguage_14c7b5c5] = env->getMethodID(cls, "getLanguage", "()Ljava/lang/String;");
                mids$[mid_getVariant_14c7b5c5] = env->getMethodID(cls, "getVariant", "()Ljava/lang/String;");
                mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
                mids$[mid_setDefault_56b0e4b3] = env->getStaticMethodID(cls, "setDefault", "(Ljava/util/Locale;)V");
                mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

                class$ = (::java::lang::Class *) new JObject(cls);
                cls = (jclass) class$->this$;

                CANADA = new Locale(env->getStaticObjectField(cls, "CANADA", "Ljava/util/Locale;"));
                CANADA_FRENCH = new Locale(env->getStaticObjectField(cls, "CANADA_FRENCH", "Ljava/util/Locale;"));
                CHINA = new Locale(env->getStaticObjectField(cls, "CHINA", "Ljava/util/Locale;"));
                CHINESE = new Locale(env->getStaticObjectField(cls, "CHINESE", "Ljava/util/Locale;"));
                ENGLISH = new Locale(env->getStaticObjectField(cls, "ENGLISH", "Ljava/util/Locale;"));
                FRANCE = new Locale(env->getStaticObjectField(cls, "FRANCE", "Ljava/util/Locale;"));
                FRENCH = new Locale(env->getStaticObjectField(cls, "FRENCH", "Ljava/util/Locale;"));
                GERMAN = new Locale(env->getStaticObjectField(cls, "GERMAN", "Ljava/util/Locale;"));
                GERMANY = new Locale(env->getStaticObjectField(cls, "GERMANY", "Ljava/util/Locale;"));
                ITALIAN = new Locale(env->getStaticObjectField(cls, "ITALIAN", "Ljava/util/Locale;"));
                ITALY = new Locale(env->getStaticObjectField(cls, "ITALY", "Ljava/util/Locale;"));
                JAPAN = new Locale(env->getStaticObjectField(cls, "JAPAN", "Ljava/util/Locale;"));
                JAPANESE = new Locale(env->getStaticObjectField(cls, "JAPANESE", "Ljava/util/Locale;"));
                KOREA = new Locale(env->getStaticObjectField(cls, "KOREA", "Ljava/util/Locale;"));
                KOREAN = new Locale(env->getStaticObjectField(cls, "KOREAN", "Ljava/util/Locale;"));
                PRC = new Locale(env->getStaticObjectField(cls, "PRC", "Ljava/util/Locale;"));
                ROOT = new Locale(env->getStaticObjectField(cls, "ROOT", "Ljava/util/Locale;"));
                SIMPLIFIED_CHINESE = new Locale(env->getStaticObjectField(cls, "SIMPLIFIED_CHINESE", "Ljava/util/Locale;"));
                TAIWAN = new Locale(env->getStaticObjectField(cls, "TAIWAN", "Ljava/util/Locale;"));
                TRADITIONAL_CHINESE = new Locale(env->getStaticObjectField(cls, "TRADITIONAL_CHINESE", "Ljava/util/Locale;"));
                UK = new Locale(env->getStaticObjectField(cls, "UK", "Ljava/util/Locale;"));
                US = new Locale(env->getStaticObjectField(cls, "US", "Ljava/util/Locale;"));
            }
            return (jclass) class$->this$;
        }

        Locale::Locale(const ::java::lang::String & a0) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}

        Locale::Locale(const ::java::lang::String & a0, const ::java::lang::String & a1) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_4a264742, a0.this$, a1.this$)) {}

        Locale::Locale(const ::java::lang::String & a0, const ::java::lang::String & a1, const ::java::lang::String & a2) : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_9c119564, a0.this$, a1.this$, a2.this$)) {}

        ::java::lang::Object Locale::clone() const
        {
            return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_clone_846352c3]));
        }

        jboolean Locale::equals(const ::java::lang::Object & a0) const
        {
            return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        JArray< Locale > Locale::getAvailableLocales()
        {
            jclass cls = initializeClass();
            return JArray< Locale >(env->callStaticObjectMethod(cls, mids$[mid_getAvailableLocales_59cb5b46]));
        }

        ::java::lang::String Locale::getCountry() const
        {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getCountry_14c7b5c5]));
        }

        Locale Locale::getDefault()
        {
            jclass cls = initializeClass();
            return Locale(env->callStaticObjectMethod(cls, mids$[mid_getDefault_8bb22876]));
        }

        ::java::lang::String Locale::getDisplayCountry() const
        {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getDisplayCountry_14c7b5c5]));
        }

        ::java::lang::String Locale::getDisplayCountry(const Locale & a0) const
        {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getDisplayCountry_c0fb304e], a0.this$));
        }

        ::java::lang::String Locale::getDisplayLanguage() const
        {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getDisplayLanguage_14c7b5c5]));
        }

        ::java::lang::String Locale::getDisplayLanguage(const Locale & a0) const
        {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getDisplayLanguage_c0fb304e], a0.this$));
        }

        ::java::lang::String Locale::getDisplayName() const
        {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getDisplayName_14c7b5c5]));
        }

        ::java::lang::String Locale::getDisplayName(const Locale & a0) const
        {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getDisplayName_c0fb304e], a0.this$));
        }

        ::java::lang::String Locale::getDisplayVariant() const
        {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getDisplayVariant_14c7b5c5]));
        }

        ::java::lang::String Locale::getDisplayVariant(const Locale & a0) const
        {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getDisplayVariant_c0fb304e], a0.this$));
        }

        ::java::lang::String Locale::getISO3Country() const
        {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getISO3Country_14c7b5c5]));
        }

        ::java::lang::String Locale::getISO3Language() const
        {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getISO3Language_14c7b5c5]));
        }

        JArray< ::java::lang::String > Locale::getISOCountries()
        {
            jclass cls = initializeClass();
            return JArray< ::java::lang::String >(env->callStaticObjectMethod(cls, mids$[mid_getISOCountries_2e6d5245]));
        }

        JArray< ::java::lang::String > Locale::getISOLanguages()
        {
            jclass cls = initializeClass();
            return JArray< ::java::lang::String >(env->callStaticObjectMethod(cls, mids$[mid_getISOLanguages_2e6d5245]));
        }

        ::java::lang::String Locale::getLanguage() const
        {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getLanguage_14c7b5c5]));
        }

        ::java::lang::String Locale::getVariant() const
        {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getVariant_14c7b5c5]));
        }

        jint Locale::hashCode() const
        {
            return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        void Locale::setDefault(const Locale & a0)
        {
            jclass cls = initializeClass();
            env->callStaticVoidMethod(cls, mids$[mid_setDefault_56b0e4b3], a0.this$);
        }

        ::java::lang::String Locale::toString() const
        {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }
    }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
    namespace util {
        static PyObject *t_Locale_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Locale_instance_(PyTypeObject *type, PyObject *arg);
        static int t_Locale_init_(t_Locale *self, PyObject *args, PyObject *kwds);
        static PyObject *t_Locale_clone(t_Locale *self);
        static PyObject *t_Locale_equals(t_Locale *self, PyObject *args);
        static PyObject *t_Locale_getAvailableLocales(PyTypeObject *type);
        static PyObject *t_Locale_getCountry(t_Locale *self);
        static PyObject *t_Locale_getDefault(PyTypeObject *type);
        static PyObject *t_Locale_getDisplayCountry(t_Locale *self, PyObject *args);
        static PyObject *t_Locale_getDisplayLanguage(t_Locale *self, PyObject *args);
        static PyObject *t_Locale_getDisplayName(t_Locale *self, PyObject *args);
        static PyObject *t_Locale_getDisplayVariant(t_Locale *self, PyObject *args);
        static PyObject *t_Locale_getISO3Country(t_Locale *self);
        static PyObject *t_Locale_getISO3Language(t_Locale *self);
        static PyObject *t_Locale_getISOCountries(PyTypeObject *type);
        static PyObject *t_Locale_getISOLanguages(PyTypeObject *type);
        static PyObject *t_Locale_getLanguage(t_Locale *self);
        static PyObject *t_Locale_getVariant(t_Locale *self);
        static PyObject *t_Locale_hashCode(t_Locale *self, PyObject *args);
        static PyObject *t_Locale_setDefault(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Locale_toString(t_Locale *self, PyObject *args);
        static PyObject *t_Locale_get__availableLocales(t_Locale *self, void *data);
        static PyObject *t_Locale_get__country(t_Locale *self, void *data);
        static PyObject *t_Locale_get__default(t_Locale *self, void *data);
        static int t_Locale_set__default(t_Locale *self, PyObject *arg, void *data);
        static PyObject *t_Locale_get__displayCountry(t_Locale *self, void *data);
        static PyObject *t_Locale_get__displayLanguage(t_Locale *self, void *data);
        static PyObject *t_Locale_get__displayName(t_Locale *self, void *data);
        static PyObject *t_Locale_get__displayVariant(t_Locale *self, void *data);
        static PyObject *t_Locale_get__iSO3Country(t_Locale *self, void *data);
        static PyObject *t_Locale_get__iSO3Language(t_Locale *self, void *data);
        static PyObject *t_Locale_get__iSOCountries(t_Locale *self, void *data);
        static PyObject *t_Locale_get__iSOLanguages(t_Locale *self, void *data);
        static PyObject *t_Locale_get__language(t_Locale *self, void *data);
        static PyObject *t_Locale_get__variant(t_Locale *self, void *data);
        static PyGetSetDef t_Locale__fields_[] = {
            DECLARE_GET_FIELD(t_Locale, availableLocales),
            DECLARE_GET_FIELD(t_Locale, country),
            DECLARE_GETSET_FIELD(t_Locale, default),
            DECLARE_GET_FIELD(t_Locale, displayCountry),
            DECLARE_GET_FIELD(t_Locale, displayLanguage),
            DECLARE_GET_FIELD(t_Locale, displayName),
            DECLARE_GET_FIELD(t_Locale, displayVariant),
            DECLARE_GET_FIELD(t_Locale, iSO3Country),
            DECLARE_GET_FIELD(t_Locale, iSO3Language),
            DECLARE_GET_FIELD(t_Locale, iSOCountries),
            DECLARE_GET_FIELD(t_Locale, iSOLanguages),
            DECLARE_GET_FIELD(t_Locale, language),
            DECLARE_GET_FIELD(t_Locale, variant),
            { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_Locale__methods_[] = {
            DECLARE_METHOD(t_Locale, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Locale, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Locale, clone, METH_NOARGS),
            DECLARE_METHOD(t_Locale, equals, METH_VARARGS),
            DECLARE_METHOD(t_Locale, getAvailableLocales, METH_NOARGS | METH_CLASS),
            DECLARE_METHOD(t_Locale, getCountry, METH_NOARGS),
            DECLARE_METHOD(t_Locale, getDefault, METH_NOARGS | METH_CLASS),
            DECLARE_METHOD(t_Locale, getDisplayCountry, METH_VARARGS),
            DECLARE_METHOD(t_Locale, getDisplayLanguage, METH_VARARGS),
            DECLARE_METHOD(t_Locale, getDisplayName, METH_VARARGS),
            DECLARE_METHOD(t_Locale, getDisplayVariant, METH_VARARGS),
            DECLARE_METHOD(t_Locale, getISO3Country, METH_NOARGS),
            DECLARE_METHOD(t_Locale, getISO3Language, METH_NOARGS),
            DECLARE_METHOD(t_Locale, getISOCountries, METH_NOARGS | METH_CLASS),
            DECLARE_METHOD(t_Locale, getISOLanguages, METH_NOARGS | METH_CLASS),
            DECLARE_METHOD(t_Locale, getLanguage, METH_NOARGS),
            DECLARE_METHOD(t_Locale, getVariant, METH_NOARGS),
            DECLARE_METHOD(t_Locale, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_Locale, setDefault, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Locale, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(Locale, t_Locale, ::java::lang::Object, Locale, t_Locale_init_, 0, 0, t_Locale__fields_, 0, 0);

        void t_Locale::install(PyObject *module)
        {
            installType(&PY_TYPE(Locale), module, "Locale", 0);
        }

        void t_Locale::initialize(PyObject *module)
        {
            PyDict_SetItemString(PY_TYPE(Locale).tp_dict, "class_", make_descriptor(Locale::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Locale).tp_dict, "wrapfn_", make_descriptor(t_Locale::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Locale).tp_dict, "boxfn_", make_descriptor(boxObject));
            Locale::initializeClass();
            PyDict_SetItemString(PY_TYPE(Locale).tp_dict, "CANADA", make_descriptor(t_Locale::wrap_Object(*Locale::CANADA)));
            PyDict_SetItemString(PY_TYPE(Locale).tp_dict, "CANADA_FRENCH", make_descriptor(t_Locale::wrap_Object(*Locale::CANADA_FRENCH)));
            PyDict_SetItemString(PY_TYPE(Locale).tp_dict, "CHINA", make_descriptor(t_Locale::wrap_Object(*Locale::CHINA)));
            PyDict_SetItemString(PY_TYPE(Locale).tp_dict, "CHINESE", make_descriptor(t_Locale::wrap_Object(*Locale::CHINESE)));
            PyDict_SetItemString(PY_TYPE(Locale).tp_dict, "ENGLISH", make_descriptor(t_Locale::wrap_Object(*Locale::ENGLISH)));
            PyDict_SetItemString(PY_TYPE(Locale).tp_dict, "FRANCE", make_descriptor(t_Locale::wrap_Object(*Locale::FRANCE)));
            PyDict_SetItemString(PY_TYPE(Locale).tp_dict, "FRENCH", make_descriptor(t_Locale::wrap_Object(*Locale::FRENCH)));
            PyDict_SetItemString(PY_TYPE(Locale).tp_dict, "GERMAN", make_descriptor(t_Locale::wrap_Object(*Locale::GERMAN)));
            PyDict_SetItemString(PY_TYPE(Locale).tp_dict, "GERMANY", make_descriptor(t_Locale::wrap_Object(*Locale::GERMANY)));
            PyDict_SetItemString(PY_TYPE(Locale).tp_dict, "ITALIAN", make_descriptor(t_Locale::wrap_Object(*Locale::ITALIAN)));
            PyDict_SetItemString(PY_TYPE(Locale).tp_dict, "ITALY", make_descriptor(t_Locale::wrap_Object(*Locale::ITALY)));
            PyDict_SetItemString(PY_TYPE(Locale).tp_dict, "JAPAN", make_descriptor(t_Locale::wrap_Object(*Locale::JAPAN)));
            PyDict_SetItemString(PY_TYPE(Locale).tp_dict, "JAPANESE", make_descriptor(t_Locale::wrap_Object(*Locale::JAPANESE)));
            PyDict_SetItemString(PY_TYPE(Locale).tp_dict, "KOREA", make_descriptor(t_Locale::wrap_Object(*Locale::KOREA)));
            PyDict_SetItemString(PY_TYPE(Locale).tp_dict, "KOREAN", make_descriptor(t_Locale::wrap_Object(*Locale::KOREAN)));
            PyDict_SetItemString(PY_TYPE(Locale).tp_dict, "PRC", make_descriptor(t_Locale::wrap_Object(*Locale::PRC)));
            PyDict_SetItemString(PY_TYPE(Locale).tp_dict, "ROOT", make_descriptor(t_Locale::wrap_Object(*Locale::ROOT)));
            PyDict_SetItemString(PY_TYPE(Locale).tp_dict, "SIMPLIFIED_CHINESE", make_descriptor(t_Locale::wrap_Object(*Locale::SIMPLIFIED_CHINESE)));
            PyDict_SetItemString(PY_TYPE(Locale).tp_dict, "TAIWAN", make_descriptor(t_Locale::wrap_Object(*Locale::TAIWAN)));
            PyDict_SetItemString(PY_TYPE(Locale).tp_dict, "TRADITIONAL_CHINESE", make_descriptor(t_Locale::wrap_Object(*Locale::TRADITIONAL_CHINESE)));
            PyDict_SetItemString(PY_TYPE(Locale).tp_dict, "UK", make_descriptor(t_Locale::wrap_Object(*Locale::UK)));
            PyDict_SetItemString(PY_TYPE(Locale).tp_dict, "US", make_descriptor(t_Locale::wrap_Object(*Locale::US)));
        }

        static PyObject *t_Locale_cast_(PyTypeObject *type, PyObject *arg)
        {
            if (!(arg = castCheck(arg, Locale::initializeClass, 1)))
                return NULL;
            return t_Locale::wrap_Object(Locale(((t_Locale *) arg)->object.this$));
        }
        static PyObject *t_Locale_instance_(PyTypeObject *type, PyObject *arg)
        {
            if (!castCheck(arg, Locale::initializeClass, 0))
                Py_RETURN_FALSE;
            Py_RETURN_TRUE;
        }

        static int t_Locale_init_(t_Locale *self, PyObject *args, PyObject *kwds)
        {
            switch (PyTuple_GET_SIZE(args)) {
              case 1:
                {
                    ::java::lang::String a0((jobject) NULL);
                    Locale object((jobject) NULL);

                    if (!parseArgs(args, "s", &a0))
                    {
                        INT_CALL(object = Locale(a0));
                        self->object = object;
                        break;
                    }
                }
                goto err;
              case 2:
                {
                    ::java::lang::String a0((jobject) NULL);
                    ::java::lang::String a1((jobject) NULL);
                    Locale object((jobject) NULL);

                    if (!parseArgs(args, "ss", &a0, &a1))
                    {
                        INT_CALL(object = Locale(a0, a1));
                        self->object = object;
                        break;
                    }
                }
                goto err;
              case 3:
                {
                    ::java::lang::String a0((jobject) NULL);
                    ::java::lang::String a1((jobject) NULL);
                    ::java::lang::String a2((jobject) NULL);
                    Locale object((jobject) NULL);

                    if (!parseArgs(args, "sss", &a0, &a1, &a2))
                    {
                        INT_CALL(object = Locale(a0, a1, a2));
                        self->object = object;
                        break;
                    }
                }
              default:
              err:
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
            }

            return 0;
        }

        static PyObject *t_Locale_clone(t_Locale *self)
        {
            ::java::lang::Object result((jobject) NULL);
            OBJ_CALL(result = self->object.clone());
            return ::java::lang::t_Object::wrap_Object(result);
        }

        static PyObject *t_Locale_equals(t_Locale *self, PyObject *args)
        {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
                OBJ_CALL(result = self->object.equals(a0));
                Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(Locale), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_Locale_getAvailableLocales(PyTypeObject *type)
        {
            JArray< Locale > result((jobject) NULL);
            OBJ_CALL(result = ::java::util::Locale::getAvailableLocales());
            return JArray<jobject>(result.this$).wrap(t_Locale::wrap_jobject);
        }

        static PyObject *t_Locale_getCountry(t_Locale *self)
        {
            ::java::lang::String result((jobject) NULL);
            OBJ_CALL(result = self->object.getCountry());
            return j2p(result);
        }

        static PyObject *t_Locale_getDefault(PyTypeObject *type)
        {
            Locale result((jobject) NULL);
            OBJ_CALL(result = ::java::util::Locale::getDefault());
            return t_Locale::wrap_Object(result);
        }

        static PyObject *t_Locale_getDisplayCountry(t_Locale *self, PyObject *args)
        {
            switch (PyTuple_GET_SIZE(args)) {
              case 0:
                {
                    ::java::lang::String result((jobject) NULL);
                    OBJ_CALL(result = self->object.getDisplayCountry());
                    return j2p(result);
                }
                break;
              case 1:
                {
                    Locale a0((jobject) NULL);
                    ::java::lang::String result((jobject) NULL);

                    if (!parseArgs(args, "k", Locale::initializeClass, &a0))
                    {
                        OBJ_CALL(result = self->object.getDisplayCountry(a0));
                        return j2p(result);
                    }
                }
            }

            PyErr_SetArgsError((PyObject *) self, "getDisplayCountry", args);
            return NULL;
        }

        static PyObject *t_Locale_getDisplayLanguage(t_Locale *self, PyObject *args)
        {
            switch (PyTuple_GET_SIZE(args)) {
              case 0:
                {
                    ::java::lang::String result((jobject) NULL);
                    OBJ_CALL(result = self->object.getDisplayLanguage());
                    return j2p(result);
                }
                break;
              case 1:
                {
                    Locale a0((jobject) NULL);
                    ::java::lang::String result((jobject) NULL);

                    if (!parseArgs(args, "k", Locale::initializeClass, &a0))
                    {
                        OBJ_CALL(result = self->object.getDisplayLanguage(a0));
                        return j2p(result);
                    }
                }
            }

            PyErr_SetArgsError((PyObject *) self, "getDisplayLanguage", args);
            return NULL;
        }

        static PyObject *t_Locale_getDisplayName(t_Locale *self, PyObject *args)
        {
            switch (PyTuple_GET_SIZE(args)) {
              case 0:
                {
                    ::java::lang::String result((jobject) NULL);
                    OBJ_CALL(result = self->object.getDisplayName());
                    return j2p(result);
                }
                break;
              case 1:
                {
                    Locale a0((jobject) NULL);
                    ::java::lang::String result((jobject) NULL);

                    if (!parseArgs(args, "k", Locale::initializeClass, &a0))
                    {
                        OBJ_CALL(result = self->object.getDisplayName(a0));
                        return j2p(result);
                    }
                }
            }

            PyErr_SetArgsError((PyObject *) self, "getDisplayName", args);
            return NULL;
        }

        static PyObject *t_Locale_getDisplayVariant(t_Locale *self, PyObject *args)
        {
            switch (PyTuple_GET_SIZE(args)) {
              case 0:
                {
                    ::java::lang::String result((jobject) NULL);
                    OBJ_CALL(result = self->object.getDisplayVariant());
                    return j2p(result);
                }
                break;
              case 1:
                {
                    Locale a0((jobject) NULL);
                    ::java::lang::String result((jobject) NULL);

                    if (!parseArgs(args, "k", Locale::initializeClass, &a0))
                    {
                        OBJ_CALL(result = self->object.getDisplayVariant(a0));
                        return j2p(result);
                    }
                }
            }

            PyErr_SetArgsError((PyObject *) self, "getDisplayVariant", args);
            return NULL;
        }

        static PyObject *t_Locale_getISO3Country(t_Locale *self)
        {
            ::java::lang::String result((jobject) NULL);
            OBJ_CALL(result = self->object.getISO3Country());
            return j2p(result);
        }

        static PyObject *t_Locale_getISO3Language(t_Locale *self)
        {
            ::java::lang::String result((jobject) NULL);
            OBJ_CALL(result = self->object.getISO3Language());
            return j2p(result);
        }

        static PyObject *t_Locale_getISOCountries(PyTypeObject *type)
        {
            JArray< ::java::lang::String > result((jobject) NULL);
            OBJ_CALL(result = ::java::util::Locale::getISOCountries());
            return JArray<jstring>(result.this$).wrap();
        }

        static PyObject *t_Locale_getISOLanguages(PyTypeObject *type)
        {
            JArray< ::java::lang::String > result((jobject) NULL);
            OBJ_CALL(result = ::java::util::Locale::getISOLanguages());
            return JArray<jstring>(result.this$).wrap();
        }

        static PyObject *t_Locale_getLanguage(t_Locale *self)
        {
            ::java::lang::String result((jobject) NULL);
            OBJ_CALL(result = self->object.getLanguage());
            return j2p(result);
        }

        static PyObject *t_Locale_getVariant(t_Locale *self)
        {
            ::java::lang::String result((jobject) NULL);
            OBJ_CALL(result = self->object.getVariant());
            return j2p(result);
        }

        static PyObject *t_Locale_hashCode(t_Locale *self, PyObject *args)
        {
            jint result;

            if (!parseArgs(args, ""))
            {
                OBJ_CALL(result = self->object.hashCode());
                return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(Locale), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_Locale_setDefault(PyTypeObject *type, PyObject *arg)
        {
            Locale a0((jobject) NULL);

            if (!parseArg(arg, "k", Locale::initializeClass, &a0))
            {
                OBJ_CALL(::java::util::Locale::setDefault(a0));
                Py_RETURN_NONE;
            }

            PyErr_SetArgsError(type, "setDefault", arg);
            return NULL;
        }

        static PyObject *t_Locale_toString(t_Locale *self, PyObject *args)
        {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
                OBJ_CALL(result = self->object.toString());
                return j2p(result);
            }

            return callSuper(&PY_TYPE(Locale), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_Locale_get__availableLocales(t_Locale *self, void *data)
        {
            JArray< Locale > value((jobject) NULL);
            OBJ_CALL(value = self->object.getAvailableLocales());
            return JArray<jobject>(value.this$).wrap(t_Locale::wrap_jobject);
        }

        static PyObject *t_Locale_get__country(t_Locale *self, void *data)
        {
            ::java::lang::String value((jobject) NULL);
            OBJ_CALL(value = self->object.getCountry());
            return j2p(value);
        }

        static PyObject *t_Locale_get__default(t_Locale *self, void *data)
        {
            Locale value((jobject) NULL);
            OBJ_CALL(value = self->object.getDefault());
            return t_Locale::wrap_Object(value);
        }
        static int t_Locale_set__default(t_Locale *self, PyObject *arg, void *data)
        {
            {
                Locale value((jobject) NULL);
                if (!parseArg(arg, "k", Locale::initializeClass, &value))
                {
                    INT_CALL(self->object.setDefault(value));
                    return 0;
                }
            }
            PyErr_SetArgsError((PyObject *) self, "default", arg);
            return -1;
        }

        static PyObject *t_Locale_get__displayCountry(t_Locale *self, void *data)
        {
            ::java::lang::String value((jobject) NULL);
            OBJ_CALL(value = self->object.getDisplayCountry());
            return j2p(value);
        }

        static PyObject *t_Locale_get__displayLanguage(t_Locale *self, void *data)
        {
            ::java::lang::String value((jobject) NULL);
            OBJ_CALL(value = self->object.getDisplayLanguage());
            return j2p(value);
        }

        static PyObject *t_Locale_get__displayName(t_Locale *self, void *data)
        {
            ::java::lang::String value((jobject) NULL);
            OBJ_CALL(value = self->object.getDisplayName());
            return j2p(value);
        }

        static PyObject *t_Locale_get__displayVariant(t_Locale *self, void *data)
        {
            ::java::lang::String value((jobject) NULL);
            OBJ_CALL(value = self->object.getDisplayVariant());
            return j2p(value);
        }

        static PyObject *t_Locale_get__iSO3Country(t_Locale *self, void *data)
        {
            ::java::lang::String value((jobject) NULL);
            OBJ_CALL(value = self->object.getISO3Country());
            return j2p(value);
        }

        static PyObject *t_Locale_get__iSO3Language(t_Locale *self, void *data)
        {
            ::java::lang::String value((jobject) NULL);
            OBJ_CALL(value = self->object.getISO3Language());
            return j2p(value);
        }

        static PyObject *t_Locale_get__iSOCountries(t_Locale *self, void *data)
        {
            JArray< ::java::lang::String > value((jobject) NULL);
            OBJ_CALL(value = self->object.getISOCountries());
            return JArray<jstring>(value.this$).wrap();
        }

        static PyObject *t_Locale_get__iSOLanguages(t_Locale *self, void *data)
        {
            JArray< ::java::lang::String > value((jobject) NULL);
            OBJ_CALL(value = self->object.getISOLanguages());
            return JArray<jstring>(value.this$).wrap();
        }

        static PyObject *t_Locale_get__language(t_Locale *self, void *data)
        {
            ::java::lang::String value((jobject) NULL);
            OBJ_CALL(value = self->object.getLanguage());
            return j2p(value);
        }

        static PyObject *t_Locale_get__variant(t_Locale *self, void *data)
        {
            ::java::lang::String value((jobject) NULL);
            OBJ_CALL(value = self->object.getVariant());
            return j2p(value);
        }
    }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/lang/Appendable.h"
#include "java/lang/CharSequence.h"
#include "java/lang/Class.h"
#include "java/io/IOException.h"
#include "JArray.h"

namespace java {
    namespace lang {

        ::java::lang::Class *Appendable::class$ = NULL;
        jmethodID *Appendable::mids$ = NULL;

        jclass Appendable::initializeClass()
        {
            if (!class$)
            {

                jclass cls = (jclass) env->findClass("java/lang/Appendable");

                mids$ = new jmethodID[max_mid];
                mids$[mid_append_fac808c8] = env->getMethodID(cls, "append", "(C)Ljava/lang/Appendable;");
                mids$[mid_append_ca3c2aa4] = env->getMethodID(cls, "append", "(Ljava/lang/CharSequence;)Ljava/lang/Appendable;");
                mids$[mid_append_7f83fd04] = env->getMethodID(cls, "append", "(Ljava/lang/CharSequence;II)Ljava/lang/Appendable;");

                class$ = (::java::lang::Class *) new JObject(cls);
            }
            return (jclass) class$->this$;
        }

        Appendable Appendable::append(jchar a0) const
        {
            return Appendable(env->callObjectMethod(this$, mids$[mid_append_fac808c8], a0));
        }

        Appendable Appendable::append(const ::java::lang::CharSequence & a0) const
        {
            return Appendable(env->callObjectMethod(this$, mids$[mid_append_ca3c2aa4], a0.this$));
        }

        Appendable Appendable::append(const ::java::lang::CharSequence & a0, jint a1, jint a2) const
        {
            return Appendable(env->callObjectMethod(this$, mids$[mid_append_7f83fd04], a0.this$, a1, a2));
        }
    }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
    namespace lang {
        static PyObject *t_Appendable_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Appendable_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Appendable_append(t_Appendable *self, PyObject *args);

        static PyMethodDef t_Appendable__methods_[] = {
            DECLARE_METHOD(t_Appendable, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Appendable, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Appendable, append, METH_VARARGS),
            { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(Appendable, t_Appendable, ::java::lang::Object, Appendable, abstract_init, 0, 0, 0, 0, 0);

        void t_Appendable::install(PyObject *module)
        {
            installType(&PY_TYPE(Appendable), module, "Appendable", 0);
        }

        void t_Appendable::initialize(PyObject *module)
        {
            PyDict_SetItemString(PY_TYPE(Appendable).tp_dict, "class_", make_descriptor(Appendable::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Appendable).tp_dict, "wrapfn_", make_descriptor(t_Appendable::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Appendable).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_Appendable_cast_(PyTypeObject *type, PyObject *arg)
        {
            if (!(arg = castCheck(arg, Appendable::initializeClass, 1)))
                return NULL;
            return t_Appendable::wrap_Object(Appendable(((t_Appendable *) arg)->object.this$));
        }
        static PyObject *t_Appendable_instance_(PyTypeObject *type, PyObject *arg)
        {
            if (!castCheck(arg, Appendable::initializeClass, 0))
                Py_RETURN_FALSE;
            Py_RETURN_TRUE;
        }

        static PyObject *t_Appendable_append(t_Appendable *self, PyObject *args)
        {
            switch (PyTuple_GET_SIZE(args)) {
              case 1:
                {
                    jchar a0;
                    Appendable result((jobject) NULL);

                    if (!parseArgs(args, "C", &a0))
                    {
                        OBJ_CALL(result = self->object.append(a0));
                        return t_Appendable::wrap_Object(result);
                    }
                }
                {
                    ::java::lang::CharSequence a0((jobject) NULL);
                    Appendable result((jobject) NULL);

                    if (!parseArgs(args, "O", &::java::lang::PY_TYPE(CharSequence), &a0))
                    {
                        OBJ_CALL(result = self->object.append(a0));
                        return t_Appendable::wrap_Object(result);
                    }
                }
                break;
              case 3:
                {
                    ::java::lang::CharSequence a0((jobject) NULL);
                    jint a1;
                    jint a2;
                    Appendable result((jobject) NULL);

                    if (!parseArgs(args, "OII", &::java::lang::PY_TYPE(CharSequence), &a0, &a1, &a2))
                    {
                        OBJ_CALL(result = self->object.append(a0, a1, a2));
                        return t_Appendable::wrap_Object(result);
                    }
                }
            }

            PyErr_SetArgsError((PyObject *) self, "append", args);
            return NULL;
        }
    }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/lang/ClassNotFoundException.h"
#include "java/lang/Throwable.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace java {
    namespace lang {

        ::java::lang::Class *ClassNotFoundException::class$ = NULL;
        jmethodID *ClassNotFoundException::mids$ = NULL;

        jclass ClassNotFoundException::initializeClass()
        {
            if (!class$)
            {

                jclass cls = (jclass) env->findClass("java/lang/ClassNotFoundException");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
                mids$[mid_init$_01646a2e] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Ljava/lang/Throwable;)V");
                mids$[mid_getCause_9a29189d] = env->getMethodID(cls, "getCause", "()Ljava/lang/Throwable;");
                mids$[mid_getException_9a29189d] = env->getMethodID(cls, "getException", "()Ljava/lang/Throwable;");

                class$ = (::java::lang::Class *) new JObject(cls);
            }
            return (jclass) class$->this$;
        }

        ClassNotFoundException::ClassNotFoundException() : ::java::lang::Exception(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        ClassNotFoundException::ClassNotFoundException(const ::java::lang::String & a0) : ::java::lang::Exception(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}

        ClassNotFoundException::ClassNotFoundException(const ::java::lang::String & a0, const ::java::lang::Throwable & a1) : ::java::lang::Exception(env->newObject(initializeClass, &mids$, mid_init$_01646a2e, a0.this$, a1.this$)) {}

        ::java::lang::Throwable ClassNotFoundException::getCause() const
        {
            return ::java::lang::Throwable(env->callObjectMethod(this$, mids$[mid_getCause_9a29189d]));
        }

        ::java::lang::Throwable ClassNotFoundException::getException() const
        {
            return ::java::lang::Throwable(env->callObjectMethod(this$, mids$[mid_getException_9a29189d]));
        }
    }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
    namespace lang {
        static PyObject *t_ClassNotFoundException_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_ClassNotFoundException_instance_(PyTypeObject *type, PyObject *arg);
        static int t_ClassNotFoundException_init_(t_ClassNotFoundException *self, PyObject *args, PyObject *kwds);
        static PyObject *t_ClassNotFoundException_getCause(t_ClassNotFoundException *self, PyObject *args);
        static PyObject *t_ClassNotFoundException_getException(t_ClassNotFoundException *self);
        static PyObject *t_ClassNotFoundException_get__cause(t_ClassNotFoundException *self, void *data);
        static PyObject *t_ClassNotFoundException_get__exception(t_ClassNotFoundException *self, void *data);
        static PyGetSetDef t_ClassNotFoundException__fields_[] = {
            DECLARE_GET_FIELD(t_ClassNotFoundException, cause),
            DECLARE_GET_FIELD(t_ClassNotFoundException, exception),
            { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_ClassNotFoundException__methods_[] = {
            DECLARE_METHOD(t_ClassNotFoundException, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ClassNotFoundException, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ClassNotFoundException, getCause, METH_VARARGS),
            DECLARE_METHOD(t_ClassNotFoundException, getException, METH_NOARGS),
            { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(ClassNotFoundException, t_ClassNotFoundException, ::java::lang::Exception, ClassNotFoundException, t_ClassNotFoundException_init_, 0, 0, t_ClassNotFoundException__fields_, 0, 0);

        void t_ClassNotFoundException::install(PyObject *module)
        {
            installType(&PY_TYPE(ClassNotFoundException), module, "ClassNotFoundException", 0);
        }

        void t_ClassNotFoundException::initialize(PyObject *module)
        {
            PyDict_SetItemString(PY_TYPE(ClassNotFoundException).tp_dict, "class_", make_descriptor(ClassNotFoundException::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(ClassNotFoundException).tp_dict, "wrapfn_", make_descriptor(t_ClassNotFoundException::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(ClassNotFoundException).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_ClassNotFoundException_cast_(PyTypeObject *type, PyObject *arg)
        {
            if (!(arg = castCheck(arg, ClassNotFoundException::initializeClass, 1)))
                return NULL;
            return t_ClassNotFoundException::wrap_Object(ClassNotFoundException(((t_ClassNotFoundException *) arg)->object.this$));
        }
        static PyObject *t_ClassNotFoundException_instance_(PyTypeObject *type, PyObject *arg)
        {
            if (!castCheck(arg, ClassNotFoundException::initializeClass, 0))
                Py_RETURN_FALSE;
            Py_RETURN_TRUE;
        }

        static int t_ClassNotFoundException_init_(t_ClassNotFoundException *self, PyObject *args, PyObject *kwds)
        {
            switch (PyTuple_GET_SIZE(args)) {
              case 0:
                {
                    ClassNotFoundException object((jobject) NULL);

                    INT_CALL(object = ClassNotFoundException());
                    self->object = object;
                    break;
                }
                goto err;
              case 1:
                {
                    ::java::lang::String a0((jobject) NULL);
                    ClassNotFoundException object((jobject) NULL);

                    if (!parseArgs(args, "s", &a0))
                    {
                        INT_CALL(object = ClassNotFoundException(a0));
                        self->object = object;
                        break;
                    }
                }
                goto err;
              case 2:
                {
                    ::java::lang::String a0((jobject) NULL);
                    ::java::lang::Throwable a1((jobject) NULL);
                    ClassNotFoundException object((jobject) NULL);

                    if (!parseArgs(args, "sk", ::java::lang::Throwable::initializeClass, &a0, &a1))
                    {
                        INT_CALL(object = ClassNotFoundException(a0, a1));
                        self->object = object;
                        break;
                    }
                }
              default:
              err:
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
            }

            return 0;
        }

        static PyObject *t_ClassNotFoundException_getCause(t_ClassNotFoundException *self, PyObject *args)
        {
            ::java::lang::Throwable result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
                OBJ_CALL(result = self->object.getCause());
                return ::java::lang::t_Throwable::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(ClassNotFoundException), (PyObject *) self, "getCause", args, 2);
        }

        static PyObject *t_ClassNotFoundException_getException(t_ClassNotFoundException *self)
        {
            ::java::lang::Throwable result((jobject) NULL);
            OBJ_CALL(result = self->object.getException());
            return ::java::lang::t_Throwable::wrap_Object(result);
        }

        static PyObject *t_ClassNotFoundException_get__cause(t_ClassNotFoundException *self, void *data)
        {
            ::java::lang::Throwable value((jobject) NULL);
            OBJ_CALL(value = self->object.getCause());
            return ::java::lang::t_Throwable::wrap_Object(value);
        }

        static PyObject *t_ClassNotFoundException_get__exception(t_ClassNotFoundException *self, void *data)
        {
            ::java::lang::Throwable value((jobject) NULL);
            OBJ_CALL(value = self->object.getException());
            return ::java::lang::t_Throwable::wrap_Object(value);
        }
    }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/lang/CharSequence.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace java {
    namespace lang {

        ::java::lang::Class *CharSequence::class$ = NULL;
        jmethodID *CharSequence::mids$ = NULL;

        jclass CharSequence::initializeClass()
        {
            if (!class$)
            {

                jclass cls = (jclass) env->findClass("java/lang/CharSequence");

                mids$ = new jmethodID[max_mid];
                mids$[mid_charAt_39c7bd29] = env->getMethodID(cls, "charAt", "(I)C");
                mids$[mid_length_54c6a179] = env->getMethodID(cls, "length", "()I");
                mids$[mid_subSequence_f88dfd57] = env->getMethodID(cls, "subSequence", "(II)Ljava/lang/CharSequence;");
                mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");

                class$ = (::java::lang::Class *) new JObject(cls);
            }
            return (jclass) class$->this$;
        }

        jchar CharSequence::charAt(jint a0) const
        {
            return env->callCharMethod(this$, mids$[mid_charAt_39c7bd29], a0);
        }

        jint CharSequence::length() const
        {
            return env->callIntMethod(this$, mids$[mid_length_54c6a179]);
        }

        CharSequence CharSequence::subSequence(jint a0, jint a1) const
        {
            return CharSequence(env->callObjectMethod(this$, mids$[mid_subSequence_f88dfd57], a0, a1));
        }

        ::java::lang::String CharSequence::toString() const
        {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }
    }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
    namespace lang {
        static PyObject *t_CharSequence_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CharSequence_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_CharSequence_charAt(t_CharSequence *self, PyObject *arg);
        static PyObject *t_CharSequence_length(t_CharSequence *self);
        static PyObject *t_CharSequence_subSequence(t_CharSequence *self, PyObject *args);
        static PyObject *t_CharSequence_toString(t_CharSequence *self, PyObject *args);

        static PyMethodDef t_CharSequence__methods_[] = {
            DECLARE_METHOD(t_CharSequence, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CharSequence, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_CharSequence, charAt, METH_O),
            DECLARE_METHOD(t_CharSequence, length, METH_NOARGS),
            DECLARE_METHOD(t_CharSequence, subSequence, METH_VARARGS),
            DECLARE_METHOD(t_CharSequence, toString, METH_VARARGS),
            { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(CharSequence, t_CharSequence, ::java::lang::Object, CharSequence, abstract_init, 0, 0, 0, 0, 0);

        void t_CharSequence::install(PyObject *module)
        {
            installType(&PY_TYPE(CharSequence), module, "CharSequence", 0);
        }

        void t_CharSequence::initialize(PyObject *module)
        {
            PyDict_SetItemString(PY_TYPE(CharSequence).tp_dict, "class_", make_descriptor(CharSequence::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(CharSequence).tp_dict, "wrapfn_", make_descriptor(t_CharSequence::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(CharSequence).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_CharSequence_cast_(PyTypeObject *type, PyObject *arg)
        {
            if (!(arg = castCheck(arg, CharSequence::initializeClass, 1)))
                return NULL;
            return t_CharSequence::wrap_Object(CharSequence(((t_CharSequence *) arg)->object.this$));
        }
        static PyObject *t_CharSequence_instance_(PyTypeObject *type, PyObject *arg)
        {
            if (!castCheck(arg, CharSequence::initializeClass, 0))
                Py_RETURN_FALSE;
            Py_RETURN_TRUE;
        }

        static PyObject *t_CharSequence_charAt(t_CharSequence *self, PyObject *arg)
        {
            jint a0;
            jchar result;

            if (!parseArg(arg, "I", &a0))
            {
                OBJ_CALL(result = self->object.charAt(a0));
                return PyUnicode_FromUnicode((Py_UNICODE *) &result, 1);
            }

            PyErr_SetArgsError((PyObject *) self, "charAt", arg);
            return NULL;
        }

        static PyObject *t_CharSequence_length(t_CharSequence *self)
        {
            jint result;
            OBJ_CALL(result = self->object.length());
            return PyInt_FromLong((long) result);
        }

        static PyObject *t_CharSequence_subSequence(t_CharSequence *self, PyObject *args)
        {
            jint a0;
            jint a1;
            CharSequence result((jobject) NULL);

            if (!parseArgs(args, "II", &a0, &a1))
            {
                OBJ_CALL(result = self->object.subSequence(a0, a1));
                return t_CharSequence::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "subSequence", args);
            return NULL;
        }

        static PyObject *t_CharSequence_toString(t_CharSequence *self, PyObject *args)
        {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
                OBJ_CALL(result = self->object.toString());
                return j2p(result);
            }

            return callSuper(&PY_TYPE(CharSequence), (PyObject *) self, "toString", args, 2);
        }
    }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/lang/IllegalAccessException.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace java {
    namespace lang {

        ::java::lang::Class *IllegalAccessException::class$ = NULL;
        jmethodID *IllegalAccessException::mids$ = NULL;

        jclass IllegalAccessException::initializeClass()
        {
            if (!class$)
            {

                jclass cls = (jclass) env->findClass("java/lang/IllegalAccessException");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");

                class$ = (::java::lang::Class *) new JObject(cls);
            }
            return (jclass) class$->this$;
        }

        IllegalAccessException::IllegalAccessException() : ::java::lang::Exception(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        IllegalAccessException::IllegalAccessException(const ::java::lang::String & a0) : ::java::lang::Exception(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}
    }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
    namespace lang {
        static PyObject *t_IllegalAccessException_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IllegalAccessException_instance_(PyTypeObject *type, PyObject *arg);
        static int t_IllegalAccessException_init_(t_IllegalAccessException *self, PyObject *args, PyObject *kwds);

        static PyMethodDef t_IllegalAccessException__methods_[] = {
            DECLARE_METHOD(t_IllegalAccessException, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_IllegalAccessException, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(IllegalAccessException, t_IllegalAccessException, ::java::lang::Exception, IllegalAccessException, t_IllegalAccessException_init_, 0, 0, 0, 0, 0);

        void t_IllegalAccessException::install(PyObject *module)
        {
            installType(&PY_TYPE(IllegalAccessException), module, "IllegalAccessException", 0);
        }

        void t_IllegalAccessException::initialize(PyObject *module)
        {
            PyDict_SetItemString(PY_TYPE(IllegalAccessException).tp_dict, "class_", make_descriptor(IllegalAccessException::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(IllegalAccessException).tp_dict, "wrapfn_", make_descriptor(t_IllegalAccessException::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(IllegalAccessException).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_IllegalAccessException_cast_(PyTypeObject *type, PyObject *arg)
        {
            if (!(arg = castCheck(arg, IllegalAccessException::initializeClass, 1)))
                return NULL;
            return t_IllegalAccessException::wrap_Object(IllegalAccessException(((t_IllegalAccessException *) arg)->object.this$));
        }
        static PyObject *t_IllegalAccessException_instance_(PyTypeObject *type, PyObject *arg)
        {
            if (!castCheck(arg, IllegalAccessException::initializeClass, 0))
                Py_RETURN_FALSE;
            Py_RETURN_TRUE;
        }

        static int t_IllegalAccessException_init_(t_IllegalAccessException *self, PyObject *args, PyObject *kwds)
        {
            switch (PyTuple_GET_SIZE(args)) {
              case 0:
                {
                    IllegalAccessException object((jobject) NULL);

                    INT_CALL(object = IllegalAccessException());
                    self->object = object;
                    break;
                }
                goto err;
              case 1:
                {
                    ::java::lang::String a0((jobject) NULL);
                    IllegalAccessException object((jobject) NULL);

                    if (!parseArgs(args, "s", &a0))
                    {
                        INT_CALL(object = IllegalAccessException(a0));
                        self->object = object;
                        break;
                    }
                }
              default:
              err:
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
            }

            return 0;
        }
    }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/util/List.h"
#include "java/util/Iterator.h"
#include "java/util/ListIterator.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "JArray.h"

namespace java {
    namespace util {

        ::java::lang::Class *List::class$ = NULL;
        jmethodID *List::mids$ = NULL;

        jclass List::initializeClass()
        {
            if (!class$)
            {

                jclass cls = (jclass) env->findClass("java/util/List");

                mids$ = new jmethodID[max_mid];
                mids$[mid_add_290588e2] = env->getMethodID(cls, "add", "(Ljava/lang/Object;)Z");
                mids$[mid_add_f7cd74a4] = env->getMethodID(cls, "add", "(ILjava/lang/Object;)V");
                mids$[mid_addAll_9bfb3701] = env->getMethodID(cls, "addAll", "(Ljava/util/Collection;)Z");
                mids$[mid_addAll_006cd2b7] = env->getMethodID(cls, "addAll", "(ILjava/util/Collection;)Z");
                mids$[mid_clear_54c6a166] = env->getMethodID(cls, "clear", "()V");
                mids$[mid_contains_290588e2] = env->getMethodID(cls, "contains", "(Ljava/lang/Object;)Z");
                mids$[mid_containsAll_9bfb3701] = env->getMethodID(cls, "containsAll", "(Ljava/util/Collection;)Z");
                mids$[mid_equals_290588e2] = env->getMethodID(cls, "equals", "(Ljava/lang/Object;)Z");
                mids$[mid_get_29be6a55] = env->getMethodID(cls, "get", "(I)Ljava/lang/Object;");
                mids$[mid_hashCode_54c6a179] = env->getMethodID(cls, "hashCode", "()I");
                mids$[mid_indexOf_290588f1] = env->getMethodID(cls, "indexOf", "(Ljava/lang/Object;)I");
                mids$[mid_isEmpty_54c6a16a] = env->getMethodID(cls, "isEmpty", "()Z");
                mids$[mid_iterator_40858c90] = env->getMethodID(cls, "iterator", "()Ljava/util/Iterator;");
                mids$[mid_lastIndexOf_290588f1] = env->getMethodID(cls, "lastIndexOf", "(Ljava/lang/Object;)I");
                mids$[mid_listIterator_b5be4e14] = env->getMethodID(cls, "listIterator", "()Ljava/util/ListIterator;");
                mids$[mid_listIterator_4145ee6a] = env->getMethodID(cls, "listIterator", "(I)Ljava/util/ListIterator;");
                mids$[mid_remove_29be6a55] = env->getMethodID(cls, "remove", "(I)Ljava/lang/Object;");
                mids$[mid_remove_290588e2] = env->getMethodID(cls, "remove", "(Ljava/lang/Object;)Z");
                mids$[mid_removeAll_9bfb3701] = env->getMethodID(cls, "removeAll", "(Ljava/util/Collection;)Z");
                mids$[mid_retainAll_9bfb3701] = env->getMethodID(cls, "retainAll", "(Ljava/util/Collection;)Z");
                mids$[mid_set_211591b1] = env->getMethodID(cls, "set", "(ILjava/lang/Object;)Ljava/lang/Object;");
                mids$[mid_size_54c6a179] = env->getMethodID(cls, "size", "()I");
                mids$[mid_subList_6bc635fe] = env->getMethodID(cls, "subList", "(II)Ljava/util/List;");
                mids$[mid_toArray_94e49c77] = env->getMethodID(cls, "toArray", "()[Ljava/lang/Object;");
                mids$[mid_toArray_ae67dbcf] = env->getMethodID(cls, "toArray", "([Ljava/lang/Object;)[Ljava/lang/Object;");

                class$ = (::java::lang::Class *) new JObject(cls);
            }
            return (jclass) class$->this$;
        }

        jboolean List::add(const ::java::lang::Object & a0) const
        {
            return env->callBooleanMethod(this$, mids$[mid_add_290588e2], a0.this$);
        }

        void List::add(jint a0, const ::java::lang::Object & a1) const
        {
            env->callVoidMethod(this$, mids$[mid_add_f7cd74a4], a0, a1.this$);
        }

        jboolean List::addAll(const ::java::util::Collection & a0) const
        {
            return env->callBooleanMethod(this$, mids$[mid_addAll_9bfb3701], a0.this$);
        }

        jboolean List::addAll(jint a0, const ::java::util::Collection & a1) const
        {
            return env->callBooleanMethod(this$, mids$[mid_addAll_006cd2b7], a0, a1.this$);
        }

        void List::clear() const
        {
            env->callVoidMethod(this$, mids$[mid_clear_54c6a166]);
        }

        jboolean List::contains(const ::java::lang::Object & a0) const
        {
            return env->callBooleanMethod(this$, mids$[mid_contains_290588e2], a0.this$);
        }

        jboolean List::containsAll(const ::java::util::Collection & a0) const
        {
            return env->callBooleanMethod(this$, mids$[mid_containsAll_9bfb3701], a0.this$);
        }

        jboolean List::equals(const ::java::lang::Object & a0) const
        {
            return env->callBooleanMethod(this$, mids$[mid_equals_290588e2], a0.this$);
        }

        ::java::lang::Object List::get(jint a0) const
        {
            return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_get_29be6a55], a0));
        }

        jint List::hashCode() const
        {
            return env->callIntMethod(this$, mids$[mid_hashCode_54c6a179]);
        }

        jint List::indexOf(const ::java::lang::Object & a0) const
        {
            return env->callIntMethod(this$, mids$[mid_indexOf_290588f1], a0.this$);
        }

        jboolean List::isEmpty() const
        {
            return env->callBooleanMethod(this$, mids$[mid_isEmpty_54c6a16a]);
        }

        ::java::util::Iterator List::iterator() const
        {
            return ::java::util::Iterator(env->callObjectMethod(this$, mids$[mid_iterator_40858c90]));
        }

        jint List::lastIndexOf(const ::java::lang::Object & a0) const
        {
            return env->callIntMethod(this$, mids$[mid_lastIndexOf_290588f1], a0.this$);
        }

        ::java::util::ListIterator List::listIterator() const
        {
            return ::java::util::ListIterator(env->callObjectMethod(this$, mids$[mid_listIterator_b5be4e14]));
        }

        ::java::util::ListIterator List::listIterator(jint a0) const
        {
            return ::java::util::ListIterator(env->callObjectMethod(this$, mids$[mid_listIterator_4145ee6a], a0));
        }

        ::java::lang::Object List::remove(jint a0) const
        {
            return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_remove_29be6a55], a0));
        }

        jboolean List::remove(const ::java::lang::Object & a0) const
        {
            return env->callBooleanMethod(this$, mids$[mid_remove_290588e2], a0.this$);
        }

        jboolean List::removeAll(const ::java::util::Collection & a0) const
        {
            return env->callBooleanMethod(this$, mids$[mid_removeAll_9bfb3701], a0.this$);
        }

        jboolean List::retainAll(const ::java::util::Collection & a0) const
        {
            return env->callBooleanMethod(this$, mids$[mid_retainAll_9bfb3701], a0.this$);
        }

        ::java::lang::Object List::set(jint a0, const ::java::lang::Object & a1) const
        {
            return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_set_211591b1], a0, a1.this$));
        }

        jint List::size() const
        {
            return env->callIntMethod(this$, mids$[mid_size_54c6a179]);
        }

        List List::subList(jint a0, jint a1) const
        {
            return List(env->callObjectMethod(this$, mids$[mid_subList_6bc635fe], a0, a1));
        }

        JArray< ::java::lang::Object > List::toArray() const
        {
            return JArray< ::java::lang::Object >(env->callObjectMethod(this$, mids$[mid_toArray_94e49c77]));
        }

        JArray< ::java::lang::Object > List::toArray(const JArray< ::java::lang::Object > & a0) const
        {
            return JArray< ::java::lang::Object >(env->callObjectMethod(this$, mids$[mid_toArray_ae67dbcf], a0.this$));
        }
    }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
    namespace util {
        static PyObject *t_List_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_List_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_List_of_(t_List *self, PyObject *args);
        static PyObject *t_List_add(t_List *self, PyObject *args);
        static PyObject *t_List_addAll(t_List *self, PyObject *args);
        static PyObject *t_List_clear(t_List *self, PyObject *args);
        static PyObject *t_List_contains(t_List *self, PyObject *args);
        static PyObject *t_List_containsAll(t_List *self, PyObject *args);
        static PyObject *t_List_equals(t_List *self, PyObject *args);
        static PyObject *t_List_get(t_List *self, PyObject *arg);
        static PyObject *t_List_hashCode(t_List *self, PyObject *args);
        static PyObject *t_List_indexOf(t_List *self, PyObject *arg);
        static PyObject *t_List_isEmpty(t_List *self, PyObject *args);
        static PyObject *t_List_iterator(t_List *self, PyObject *args);
        static PyObject *t_List_lastIndexOf(t_List *self, PyObject *arg);
        static PyObject *t_List_listIterator(t_List *self, PyObject *args);
        static PyObject *t_List_remove(t_List *self, PyObject *args);
        static PyObject *t_List_removeAll(t_List *self, PyObject *args);
        static PyObject *t_List_retainAll(t_List *self, PyObject *args);
        static PyObject *t_List_set(t_List *self, PyObject *args);
        static PyObject *t_List_size(t_List *self, PyObject *args);
        static PyObject *t_List_subList(t_List *self, PyObject *args);
        static PyObject *t_List_toArray(t_List *self, PyObject *args);
        static PyObject *t_List_get__empty(t_List *self, void *data);
        static PyObject *t_List_get__parameters_(t_List *self, void *data);
        static PyGetSetDef t_List__fields_[] = {
            DECLARE_GET_FIELD(t_List, empty),
            DECLARE_GET_FIELD(t_List, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_List__methods_[] = {
            DECLARE_METHOD(t_List, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_List, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_List, of_, METH_VARARGS),
            DECLARE_METHOD(t_List, add, METH_VARARGS),
            DECLARE_METHOD(t_List, addAll, METH_VARARGS),
            DECLARE_METHOD(t_List, clear, METH_VARARGS),
            DECLARE_METHOD(t_List, contains, METH_VARARGS),
            DECLARE_METHOD(t_List, containsAll, METH_VARARGS),
            DECLARE_METHOD(t_List, equals, METH_VARARGS),
            DECLARE_METHOD(t_List, get, METH_O),
            DECLARE_METHOD(t_List, hashCode, METH_VARARGS),
            DECLARE_METHOD(t_List, indexOf, METH_O),
            DECLARE_METHOD(t_List, isEmpty, METH_VARARGS),
            DECLARE_METHOD(t_List, iterator, METH_VARARGS),
            DECLARE_METHOD(t_List, lastIndexOf, METH_O),
            DECLARE_METHOD(t_List, listIterator, METH_VARARGS),
            DECLARE_METHOD(t_List, remove, METH_VARARGS),
            DECLARE_METHOD(t_List, removeAll, METH_VARARGS),
            DECLARE_METHOD(t_List, retainAll, METH_VARARGS),
            DECLARE_METHOD(t_List, set, METH_VARARGS),
            DECLARE_METHOD(t_List, size, METH_VARARGS),
            DECLARE_METHOD(t_List, subList, METH_VARARGS),
            DECLARE_METHOD(t_List, toArray, METH_VARARGS),
            { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(List, t_List, ::java::util::Collection, List, abstract_init, ((PyObject *(*)(t_List *)) get_generic_iterator< t_List >), 0, t_List__fields_, 0, 0);
        PyObject *t_List::wrap_Object(const List& object, PyTypeObject *E)
        {
            PyObject *obj = t_List::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
                t_List *self = (t_List *) obj;
                self->parameters[0] = E;
            }
            return obj;
        }

        PyObject *t_List::wrap_jobject(const jobject& object, PyTypeObject *E)
        {
            PyObject *obj = t_List::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
                t_List *self = (t_List *) obj;
                self->parameters[0] = E;
            }
            return obj;
        }

        void t_List::install(PyObject *module)
        {
            installType(&PY_TYPE(List), module, "List", 0);
        }

        void t_List::initialize(PyObject *module)
        {
            PyDict_SetItemString(PY_TYPE(List).tp_dict, "class_", make_descriptor(List::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(List).tp_dict, "wrapfn_", make_descriptor(t_List::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(List).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_List_cast_(PyTypeObject *type, PyObject *arg)
        {
            if (!(arg = castCheck(arg, List::initializeClass, 1)))
                return NULL;
            return t_List::wrap_Object(List(((t_List *) arg)->object.this$));
        }
        static PyObject *t_List_instance_(PyTypeObject *type, PyObject *arg)
        {
            if (!castCheck(arg, List::initializeClass, 0))
                Py_RETURN_FALSE;
            Py_RETURN_TRUE;
        }

        static PyObject *t_List_of_(t_List *self, PyObject *args)
        {
            if (!parseArg(args, "T", 1, &(self->parameters)))
                Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static PyObject *t_List_add(t_List *self, PyObject *args)
        {
            switch (PyTuple_GET_SIZE(args)) {
              case 1:
                {
                    ::java::lang::Object a0((jobject) NULL);
                    jboolean result;

                    if (!parseArgs(args, "O", self->parameters[0], &a0))
                    {
                        OBJ_CALL(result = self->object.add(a0));
                        Py_RETURN_BOOL(result);
                    }
                }
                break;
              case 2:
                {
                    jint a0;
                    ::java::lang::Object a1((jobject) NULL);

                    if (!parseArgs(args, "IO", self->parameters[0], &a0, &a1))
                    {
                        OBJ_CALL(self->object.add(a0, a1));
                        Py_RETURN_NONE;
                    }
                }
            }

            return callSuper(&PY_TYPE(List), (PyObject *) self, "add", args, 2);
        }

        static PyObject *t_List_addAll(t_List *self, PyObject *args)
        {
            switch (PyTuple_GET_SIZE(args)) {
              case 1:
                {
                    ::java::util::Collection a0((jobject) NULL);
                    PyTypeObject **p0;
                    jboolean result;

                    if (!parseArgs(args, "K", ::java::util::Collection::initializeClass, &a0, &p0, ::java::util::t_Collection::parameters_))
                    {
                        OBJ_CALL(result = self->object.addAll(a0));
                        Py_RETURN_BOOL(result);
                    }
                }
                break;
              case 2:
                {
                    jint a0;
                    ::java::util::Collection a1((jobject) NULL);
                    PyTypeObject **p1;
                    jboolean result;

                    if (!parseArgs(args, "IK", ::java::util::Collection::initializeClass, &a0, &a1, &p1, ::java::util::t_Collection::parameters_))
                    {
                        OBJ_CALL(result = self->object.addAll(a0, a1));
                        Py_RETURN_BOOL(result);
                    }
                }
            }

            return callSuper(&PY_TYPE(List), (PyObject *) self, "addAll", args, 2);
        }

        static PyObject *t_List_clear(t_List *self, PyObject *args)
        {

            if (!parseArgs(args, ""))
            {
                OBJ_CALL(self->object.clear());
                Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(List), (PyObject *) self, "clear", args, 2);
        }

        static PyObject *t_List_contains(t_List *self, PyObject *args)
        {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
                OBJ_CALL(result = self->object.contains(a0));
                Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(List), (PyObject *) self, "contains", args, 2);
        }

        static PyObject *t_List_containsAll(t_List *self, PyObject *args)
        {
            ::java::util::Collection a0((jobject) NULL);
            PyTypeObject **p0;
            jboolean result;

            if (!parseArgs(args, "K", ::java::util::Collection::initializeClass, &a0, &p0, ::java::util::t_Collection::parameters_))
            {
                OBJ_CALL(result = self->object.containsAll(a0));
                Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(List), (PyObject *) self, "containsAll", args, 2);
        }

        static PyObject *t_List_equals(t_List *self, PyObject *args)
        {
            ::java::lang::Object a0((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "o", &a0))
            {
                OBJ_CALL(result = self->object.equals(a0));
                Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(List), (PyObject *) self, "equals", args, 2);
        }

        static PyObject *t_List_get(t_List *self, PyObject *arg)
        {
            jint a0;
            ::java::lang::Object result((jobject) NULL);

            if (!parseArg(arg, "I", &a0))
            {
                OBJ_CALL(result = self->object.get(a0));
                return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "get", arg);
            return NULL;
        }

        static PyObject *t_List_hashCode(t_List *self, PyObject *args)
        {
            jint result;

            if (!parseArgs(args, ""))
            {
                OBJ_CALL(result = self->object.hashCode());
                return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(List), (PyObject *) self, "hashCode", args, 2);
        }

        static PyObject *t_List_indexOf(t_List *self, PyObject *arg)
        {
            ::java::lang::Object a0((jobject) NULL);
            jint result;

            if (!parseArg(arg, "o", &a0))
            {
                OBJ_CALL(result = self->object.indexOf(a0));
                return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "indexOf", arg);
            return NULL;
        }

        static PyObject *t_List_isEmpty(t_List *self, PyObject *args)
        {
            jboolean result;

            if (!parseArgs(args, ""))
            {
                OBJ_CALL(result = self->object.isEmpty());
                Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(List), (PyObject *) self, "isEmpty", args, 2);
        }

        static PyObject *t_List_iterator(t_List *self, PyObject *args)
        {
            ::java::util::Iterator result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
                OBJ_CALL(result = self->object.iterator());
                return ::java::util::t_Iterator::wrap_Object(result, self->parameters[0]);
            }

            return callSuper(&PY_TYPE(List), (PyObject *) self, "iterator", args, 2);
        }

        static PyObject *t_List_lastIndexOf(t_List *self, PyObject *arg)
        {
            ::java::lang::Object a0((jobject) NULL);
            jint result;

            if (!parseArg(arg, "o", &a0))
            {
                OBJ_CALL(result = self->object.lastIndexOf(a0));
                return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "lastIndexOf", arg);
            return NULL;
        }

        static PyObject *t_List_listIterator(t_List *self, PyObject *args)
        {
            switch (PyTuple_GET_SIZE(args)) {
              case 0:
                {
                    ::java::util::ListIterator result((jobject) NULL);
                    OBJ_CALL(result = self->object.listIterator());
                    return ::java::util::t_ListIterator::wrap_Object(result, self->parameters[0]);
                }
                break;
              case 1:
                {
                    jint a0;
                    ::java::util::ListIterator result((jobject) NULL);

                    if (!parseArgs(args, "I", &a0))
                    {
                        OBJ_CALL(result = self->object.listIterator(a0));
                        return ::java::util::t_ListIterator::wrap_Object(result, self->parameters[0]);
                    }
                }
            }

            PyErr_SetArgsError((PyObject *) self, "listIterator", args);
            return NULL;
        }

        static PyObject *t_List_remove(t_List *self, PyObject *args)
        {
            switch (PyTuple_GET_SIZE(args)) {
              case 1:
                {
                    jint a0;
                    ::java::lang::Object result((jobject) NULL);

                    if (!parseArgs(args, "I", &a0))
                    {
                        OBJ_CALL(result = self->object.remove(a0));
                        return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
                    }
                }
                {
                    ::java::lang::Object a0((jobject) NULL);
                    jboolean result;

                    if (!parseArgs(args, "o", &a0))
                    {
                        OBJ_CALL(result = self->object.remove(a0));
                        Py_RETURN_BOOL(result);
                    }
                }
            }

            return callSuper(&PY_TYPE(List), (PyObject *) self, "remove", args, 2);
        }

        static PyObject *t_List_removeAll(t_List *self, PyObject *args)
        {
            ::java::util::Collection a0((jobject) NULL);
            PyTypeObject **p0;
            jboolean result;

            if (!parseArgs(args, "K", ::java::util::Collection::initializeClass, &a0, &p0, ::java::util::t_Collection::parameters_))
            {
                OBJ_CALL(result = self->object.removeAll(a0));
                Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(List), (PyObject *) self, "removeAll", args, 2);
        }

        static PyObject *t_List_retainAll(t_List *self, PyObject *args)
        {
            ::java::util::Collection a0((jobject) NULL);
            PyTypeObject **p0;
            jboolean result;

            if (!parseArgs(args, "K", ::java::util::Collection::initializeClass, &a0, &p0, ::java::util::t_Collection::parameters_))
            {
                OBJ_CALL(result = self->object.retainAll(a0));
                Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(List), (PyObject *) self, "retainAll", args, 2);
        }

        static PyObject *t_List_set(t_List *self, PyObject *args)
        {
            jint a0;
            ::java::lang::Object a1((jobject) NULL);
            ::java::lang::Object result((jobject) NULL);

            if (!parseArgs(args, "IO", self->parameters[0], &a0, &a1))
            {
                OBJ_CALL(result = self->object.set(a0, a1));
                return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "set", args);
            return NULL;
        }

        static PyObject *t_List_size(t_List *self, PyObject *args)
        {
            jint result;

            if (!parseArgs(args, ""))
            {
                OBJ_CALL(result = self->object.size());
                return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(List), (PyObject *) self, "size", args, 2);
        }

        static PyObject *t_List_subList(t_List *self, PyObject *args)
        {
            jint a0;
            jint a1;
            List result((jobject) NULL);

            if (!parseArgs(args, "II", &a0, &a1))
            {
                OBJ_CALL(result = self->object.subList(a0, a1));
                return t_List::wrap_Object(result, self->parameters[0]);
            }

            PyErr_SetArgsError((PyObject *) self, "subList", args);
            return NULL;
        }

        static PyObject *t_List_toArray(t_List *self, PyObject *args)
        {
            switch (PyTuple_GET_SIZE(args)) {
              case 0:
                {
                    JArray< ::java::lang::Object > result((jobject) NULL);
                    OBJ_CALL(result = self->object.toArray());
                    return JArray<jobject>(result.this$).wrap(::java::lang::t_Object::wrap_jobject);
                }
                break;
              case 1:
                {
                    JArray< ::java::lang::Object > a0((jobject) NULL);
                    JArray< ::java::lang::Object > result((jobject) NULL);

                    if (!parseArgs(args, "[o", &a0))
                    {
                        OBJ_CALL(result = self->object.toArray(a0));
                        return JArray<jobject>(result.this$).wrap(::java::lang::t_Object::wrap_jobject);
                    }
                }
            }

            return callSuper(&PY_TYPE(List), (PyObject *) self, "toArray", args, 2);
        }
        static PyObject *t_List_get__parameters_(t_List *self, void *data)
        {
            return typeParameters(self->parameters, sizeof(self->parameters));
        }

        static PyObject *t_List_get__empty(t_List *self, void *data)
        {
            jboolean value;
            OBJ_CALL(value = self->object.isEmpty());
            Py_RETURN_BOOL(value);
        }
    }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/io/IOException.h"
#include "java/lang/Throwable.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace java {
    namespace io {

        ::java::lang::Class *IOException::class$ = NULL;
        jmethodID *IOException::mids$ = NULL;

        jclass IOException::initializeClass()
        {
            if (!class$)
            {

                jclass cls = (jclass) env->findClass("java/io/IOException");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
                mids$[mid_init$_c5ec8ca4] = env->getMethodID(cls, "<init>", "(Ljava/lang/Throwable;)V");
                mids$[mid_init$_01646a2e] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Ljava/lang/Throwable;)V");

                class$ = (::java::lang::Class *) new JObject(cls);
            }
            return (jclass) class$->this$;
        }

        IOException::IOException() : ::java::lang::Exception(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        IOException::IOException(const ::java::lang::String & a0) : ::java::lang::Exception(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}

        IOException::IOException(const ::java::lang::Throwable & a0) : ::java::lang::Exception(env->newObject(initializeClass, &mids$, mid_init$_c5ec8ca4, a0.this$)) {}

        IOException::IOException(const ::java::lang::String & a0, const ::java::lang::Throwable & a1) : ::java::lang::Exception(env->newObject(initializeClass, &mids$, mid_init$_01646a2e, a0.this$, a1.this$)) {}
    }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
    namespace io {
        static PyObject *t_IOException_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_IOException_instance_(PyTypeObject *type, PyObject *arg);
        static int t_IOException_init_(t_IOException *self, PyObject *args, PyObject *kwds);

        static PyMethodDef t_IOException__methods_[] = {
            DECLARE_METHOD(t_IOException, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_IOException, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(IOException, t_IOException, ::java::lang::Exception, IOException, t_IOException_init_, 0, 0, 0, 0, 0);

        void t_IOException::install(PyObject *module)
        {
            installType(&PY_TYPE(IOException), module, "IOException", 0);
        }

        void t_IOException::initialize(PyObject *module)
        {
            PyDict_SetItemString(PY_TYPE(IOException).tp_dict, "class_", make_descriptor(IOException::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(IOException).tp_dict, "wrapfn_", make_descriptor(t_IOException::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(IOException).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_IOException_cast_(PyTypeObject *type, PyObject *arg)
        {
            if (!(arg = castCheck(arg, IOException::initializeClass, 1)))
                return NULL;
            return t_IOException::wrap_Object(IOException(((t_IOException *) arg)->object.this$));
        }
        static PyObject *t_IOException_instance_(PyTypeObject *type, PyObject *arg)
        {
            if (!castCheck(arg, IOException::initializeClass, 0))
                Py_RETURN_FALSE;
            Py_RETURN_TRUE;
        }

        static int t_IOException_init_(t_IOException *self, PyObject *args, PyObject *kwds)
        {
            switch (PyTuple_GET_SIZE(args)) {
              case 0:
                {
                    IOException object((jobject) NULL);

                    INT_CALL(object = IOException());
                    self->object = object;
                    break;
                }
                goto err;
              case 1:
                {
                    ::java::lang::String a0((jobject) NULL);
                    IOException object((jobject) NULL);

                    if (!parseArgs(args, "s", &a0))
                    {
                        INT_CALL(object = IOException(a0));
                        self->object = object;
                        break;
                    }
                }
                {
                    ::java::lang::Throwable a0((jobject) NULL);
                    IOException object((jobject) NULL);

                    if (!parseArgs(args, "k", ::java::lang::Throwable::initializeClass, &a0))
                    {
                        INT_CALL(object = IOException(a0));
                        self->object = object;
                        break;
                    }
                }
                goto err;
              case 2:
                {
                    ::java::lang::String a0((jobject) NULL);
                    ::java::lang::Throwable a1((jobject) NULL);
                    IOException object((jobject) NULL);

                    if (!parseArgs(args, "sk", ::java::lang::Throwable::initializeClass, &a0, &a1))
                    {
                        INT_CALL(object = IOException(a0, a1));
                        self->object = object;
                        break;
                    }
                }
              default:
              err:
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
            }

            return 0;
        }
    }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/lang/InstantiationException.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace java {
    namespace lang {

        ::java::lang::Class *InstantiationException::class$ = NULL;
        jmethodID *InstantiationException::mids$ = NULL;

        jclass InstantiationException::initializeClass()
        {
            if (!class$)
            {

                jclass cls = (jclass) env->findClass("java/lang/InstantiationException");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");

                class$ = (::java::lang::Class *) new JObject(cls);
            }
            return (jclass) class$->this$;
        }

        InstantiationException::InstantiationException() : ::java::lang::Exception(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        InstantiationException::InstantiationException(const ::java::lang::String & a0) : ::java::lang::Exception(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}
    }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
    namespace lang {
        static PyObject *t_InstantiationException_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_InstantiationException_instance_(PyTypeObject *type, PyObject *arg);
        static int t_InstantiationException_init_(t_InstantiationException *self, PyObject *args, PyObject *kwds);

        static PyMethodDef t_InstantiationException__methods_[] = {
            DECLARE_METHOD(t_InstantiationException, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_InstantiationException, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(InstantiationException, t_InstantiationException, ::java::lang::Exception, InstantiationException, t_InstantiationException_init_, 0, 0, 0, 0, 0);

        void t_InstantiationException::install(PyObject *module)
        {
            installType(&PY_TYPE(InstantiationException), module, "InstantiationException", 0);
        }

        void t_InstantiationException::initialize(PyObject *module)
        {
            PyDict_SetItemString(PY_TYPE(InstantiationException).tp_dict, "class_", make_descriptor(InstantiationException::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(InstantiationException).tp_dict, "wrapfn_", make_descriptor(t_InstantiationException::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(InstantiationException).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_InstantiationException_cast_(PyTypeObject *type, PyObject *arg)
        {
            if (!(arg = castCheck(arg, InstantiationException::initializeClass, 1)))
                return NULL;
            return t_InstantiationException::wrap_Object(InstantiationException(((t_InstantiationException *) arg)->object.this$));
        }
        static PyObject *t_InstantiationException_instance_(PyTypeObject *type, PyObject *arg)
        {
            if (!castCheck(arg, InstantiationException::initializeClass, 0))
                Py_RETURN_FALSE;
            Py_RETURN_TRUE;
        }

        static int t_InstantiationException_init_(t_InstantiationException *self, PyObject *args, PyObject *kwds)
        {
            switch (PyTuple_GET_SIZE(args)) {
              case 0:
                {
                    InstantiationException object((jobject) NULL);

                    INT_CALL(object = InstantiationException());
                    self->object = object;
                    break;
                }
                goto err;
              case 1:
                {
                    ::java::lang::String a0((jobject) NULL);
                    InstantiationException object((jobject) NULL);

                    if (!parseArgs(args, "s", &a0))
                    {
                        INT_CALL(object = InstantiationException(a0));
                        self->object = object;
                        break;
                    }
                }
              default:
              err:
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
            }

            return 0;
        }
    }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/util/InvalidPropertiesFormatException.h"
#include "java/lang/Throwable.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace java {
    namespace util {

        ::java::lang::Class *InvalidPropertiesFormatException::class$ = NULL;
        jmethodID *InvalidPropertiesFormatException::mids$ = NULL;

        jclass InvalidPropertiesFormatException::initializeClass()
        {
            if (!class$)
            {

                jclass cls = (jclass) env->findClass("java/util/InvalidPropertiesFormatException");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_c5ec8ca4] = env->getMethodID(cls, "<init>", "(Ljava/lang/Throwable;)V");
                mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");

                class$ = (::java::lang::Class *) new JObject(cls);
            }
            return (jclass) class$->this$;
        }

        InvalidPropertiesFormatException::InvalidPropertiesFormatException(const ::java::lang::Throwable & a0) : ::java::io::IOException(env->newObject(initializeClass, &mids$, mid_init$_c5ec8ca4, a0.this$)) {}

        InvalidPropertiesFormatException::InvalidPropertiesFormatException(const ::java::lang::String & a0) : ::java::io::IOException(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}
    }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
    namespace util {
        static PyObject *t_InvalidPropertiesFormatException_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_InvalidPropertiesFormatException_instance_(PyTypeObject *type, PyObject *arg);
        static int t_InvalidPropertiesFormatException_init_(t_InvalidPropertiesFormatException *self, PyObject *args, PyObject *kwds);

        static PyMethodDef t_InvalidPropertiesFormatException__methods_[] = {
            DECLARE_METHOD(t_InvalidPropertiesFormatException, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_InvalidPropertiesFormatException, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(InvalidPropertiesFormatException, t_InvalidPropertiesFormatException, ::java::io::IOException, InvalidPropertiesFormatException, t_InvalidPropertiesFormatException_init_, 0, 0, 0, 0, 0);

        void t_InvalidPropertiesFormatException::install(PyObject *module)
        {
            installType(&PY_TYPE(InvalidPropertiesFormatException), module, "InvalidPropertiesFormatException", 0);
        }

        void t_InvalidPropertiesFormatException::initialize(PyObject *module)
        {
            PyDict_SetItemString(PY_TYPE(InvalidPropertiesFormatException).tp_dict, "class_", make_descriptor(InvalidPropertiesFormatException::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(InvalidPropertiesFormatException).tp_dict, "wrapfn_", make_descriptor(t_InvalidPropertiesFormatException::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(InvalidPropertiesFormatException).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_InvalidPropertiesFormatException_cast_(PyTypeObject *type, PyObject *arg)
        {
            if (!(arg = castCheck(arg, InvalidPropertiesFormatException::initializeClass, 1)))
                return NULL;
            return t_InvalidPropertiesFormatException::wrap_Object(InvalidPropertiesFormatException(((t_InvalidPropertiesFormatException *) arg)->object.this$));
        }
        static PyObject *t_InvalidPropertiesFormatException_instance_(PyTypeObject *type, PyObject *arg)
        {
            if (!castCheck(arg, InvalidPropertiesFormatException::initializeClass, 0))
                Py_RETURN_FALSE;
            Py_RETURN_TRUE;
        }

        static int t_InvalidPropertiesFormatException_init_(t_InvalidPropertiesFormatException *self, PyObject *args, PyObject *kwds)
        {
            switch (PyTuple_GET_SIZE(args)) {
              case 1:
                {
                    ::java::lang::Throwable a0((jobject) NULL);
                    InvalidPropertiesFormatException object((jobject) NULL);

                    if (!parseArgs(args, "k", ::java::lang::Throwable::initializeClass, &a0))
                    {
                        INT_CALL(object = InvalidPropertiesFormatException(a0));
                        self->object = object;
                        break;
                    }
                }
                {
                    ::java::lang::String a0((jobject) NULL);
                    InvalidPropertiesFormatException object((jobject) NULL);

                    if (!parseArgs(args, "s", &a0))
                    {
                        INT_CALL(object = InvalidPropertiesFormatException(a0));
                        self->object = object;
                        break;
                    }
                }
              default:
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
            }

            return 0;
        }
    }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/lang/AbstractStringBuilder.h"
#include "java/lang/CharSequence.h"
#include "java/lang/Class.h"
#include "java/lang/StringBuffer.h"
#include "java/lang/String.h"
#include "java/lang/Appendable.h"
#include "JArray.h"

namespace java {
    namespace lang {

        ::java::lang::Class *AbstractStringBuilder::class$ = NULL;
        jmethodID *AbstractStringBuilder::mids$ = NULL;

        jclass AbstractStringBuilder::initializeClass()
        {
            if (!class$)
            {

                jclass cls = (jclass) env->findClass("java/lang/AbstractStringBuilder");

                mids$ = new jmethodID[max_mid];
                mids$[mid_append_7c173d47] = env->getMethodID(cls, "append", "([C)Ljava/lang/AbstractStringBuilder;");
                mids$[mid_append_a2ed0092] = env->getMethodID(cls, "append", "(F)Ljava/lang/AbstractStringBuilder;");
                mids$[mid_append_5e58b04c] = env->getMethodID(cls, "append", "(D)Ljava/lang/AbstractStringBuilder;");
                mids$[mid_append_db02ec8f] = env->getMethodID(cls, "append", "(Ljava/lang/Object;)Ljava/lang/AbstractStringBuilder;");
                mids$[mid_append_4d0b6cce] = env->getMethodID(cls, "append", "(J)Ljava/lang/AbstractStringBuilder;");
                mids$[mid_append_9dc99a1e] = env->getMethodID(cls, "append", "(Z)Ljava/lang/AbstractStringBuilder;");
                mids$[mid_append_a6b3f18b] = env->getMethodID(cls, "append", "(C)Ljava/lang/AbstractStringBuilder;");
                mids$[mid_append_97dd5503] = env->getMethodID(cls, "append", "(Ljava/lang/CharSequence;)Ljava/lang/AbstractStringBuilder;");
                mids$[mid_append_0f3b1ca9] = env->getMethodID(cls, "append", "(Ljava/lang/String;)Ljava/lang/AbstractStringBuilder;");
                mids$[mid_append_2814c015] = env->getMethodID(cls, "append", "(I)Ljava/lang/AbstractStringBuilder;");
                mids$[mid_append_5337ed99] = env->getMethodID(cls, "append", "(Ljava/lang/StringBuffer;)Ljava/lang/AbstractStringBuilder;");
                mids$[mid_append_c2cdc21f] = env->getMethodID(cls, "append", "([CII)Ljava/lang/AbstractStringBuilder;");
                mids$[mid_append_7e485efb] = env->getMethodID(cls, "append", "(Ljava/lang/CharSequence;II)Ljava/lang/AbstractStringBuilder;");
                mids$[mid_appendCodePoint_2814c015] = env->getMethodID(cls, "appendCodePoint", "(I)Ljava/lang/AbstractStringBuilder;");
                mids$[mid_capacity_54c6a179] = env->getMethodID(cls, "capacity", "()I");
                mids$[mid_charAt_39c7bd29] = env->getMethodID(cls, "charAt", "(I)C");
                mids$[mid_codePointAt_39c7bd23] = env->getMethodID(cls, "codePointAt", "(I)I");
                mids$[mid_codePointBefore_39c7bd23] = env->getMethodID(cls, "codePointBefore", "(I)I");
                mids$[mid_codePointCount_d8d154b9] = env->getMethodID(cls, "codePointCount", "(II)I");
                mids$[mid_delete_2b8ead17] = env->getMethodID(cls, "delete", "(II)Ljava/lang/AbstractStringBuilder;");
                mids$[mid_deleteCharAt_2814c015] = env->getMethodID(cls, "deleteCharAt", "(I)Ljava/lang/AbstractStringBuilder;");
                mids$[mid_ensureCapacity_39c7bd3c] = env->getMethodID(cls, "ensureCapacity", "(I)V");
                mids$[mid_getChars_06518f84] = env->getMethodID(cls, "getChars", "(II[CI)V");
                mids$[mid_indexOf_5fdc3f57] = env->getMethodID(cls, "indexOf", "(Ljava/lang/String;)I");
                mids$[mid_indexOf_6e53ccd9] = env->getMethodID(cls, "indexOf", "(Ljava/lang/String;I)I");
                mids$[mid_insert_6089bc60] = env->getMethodID(cls, "insert", "(IF)Ljava/lang/AbstractStringBuilder;");
                mids$[mid_insert_af3c3de9] = env->getMethodID(cls, "insert", "(I[C)Ljava/lang/AbstractStringBuilder;");
                mids$[mid_insert_62ac5207] = env->getMethodID(cls, "insert", "(ILjava/lang/String;)Ljava/lang/AbstractStringBuilder;");
                mids$[mid_insert_2b8ead17] = env->getMethodID(cls, "insert", "(II)Ljava/lang/AbstractStringBuilder;");
                mids$[mid_insert_d1cc213e] = env->getMethodID(cls, "insert", "(ID)Ljava/lang/AbstractStringBuilder;");
                mids$[mid_insert_5236bc0d] = env->getMethodID(cls, "insert", "(ILjava/lang/Object;)Ljava/lang/AbstractStringBuilder;");
                mids$[mid_insert_8567b539] = env->getMethodID(cls, "insert", "(ILjava/lang/CharSequence;)Ljava/lang/AbstractStringBuilder;");
                mids$[mid_insert_06d282ac] = env->getMethodID(cls, "insert", "(IZ)Ljava/lang/AbstractStringBuilder;");
                mids$[mid_insert_063a9eb9] = env->getMethodID(cls, "insert", "(IC)Ljava/lang/AbstractStringBuilder;");
                mids$[mid_insert_9beca11c] = env->getMethodID(cls, "insert", "(IJ)Ljava/lang/AbstractStringBuilder;");
                mids$[mid_insert_78ebdb01] = env->getMethodID(cls, "insert", "(ILjava/lang/CharSequence;II)Ljava/lang/AbstractStringBuilder;");
                mids$[mid_insert_24aafa89] = env->getMethodID(cls, "insert", "(I[CII)Ljava/lang/AbstractStringBuilder;");
                mids$[mid_lastIndexOf_5fdc3f57] = env->getMethodID(cls, "lastIndexOf", "(Ljava/lang/String;)I");
                mids$[mid_lastIndexOf_6e53ccd9] = env->getMethodID(cls, "lastIndexOf", "(Ljava/lang/String;I)I");
                mids$[mid_length_54c6a179] = env->getMethodID(cls, "length", "()I");
                mids$[mid_offsetByCodePoints_d8d154b9] = env->getMethodID(cls, "offsetByCodePoints", "(II)I");
                mids$[mid_replace_349953a9] = env->getMethodID(cls, "replace", "(IILjava/lang/String;)Ljava/lang/AbstractStringBuilder;");
                mids$[mid_reverse_570c12f7] = env->getMethodID(cls, "reverse", "()Ljava/lang/AbstractStringBuilder;");
                mids$[mid_setCharAt_83eec158] = env->getMethodID(cls, "setCharAt", "(IC)V");
                mids$[mid_setLength_39c7bd3c] = env->getMethodID(cls, "setLength", "(I)V");
                mids$[mid_subSequence_f88dfd57] = env->getMethodID(cls, "subSequence", "(II)Ljava/lang/CharSequence;");
                mids$[mid_substring_141401b3] = env->getMethodID(cls, "substring", "(I)Ljava/lang/String;");
                mids$[mid_substring_f9118fe5] = env->getMethodID(cls, "substring", "(II)Ljava/lang/String;");
                mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
                mids$[mid_trimToSize_54c6a166] = env->getMethodID(cls, "trimToSize", "()V");

                class$ = (::java::lang::Class *) new JObject(cls);
            }
            return (jclass) class$->this$;
        }

        AbstractStringBuilder AbstractStringBuilder::append(const JArray< jchar > & a0) const
        {
            return AbstractStringBuilder(env->callObjectMethod(this$, mids$[mid_append_7c173d47], a0.this$));
        }

        AbstractStringBuilder AbstractStringBuilder::append(jfloat a0) const
        {
            return AbstractStringBuilder(env->callObjectMethod(this$, mids$[mid_append_a2ed0092], a0));
        }

        AbstractStringBuilder AbstractStringBuilder::append(jdouble a0) const
        {
            return AbstractStringBuilder(env->callObjectMethod(this$, mids$[mid_append_5e58b04c], a0));
        }

        AbstractStringBuilder AbstractStringBuilder::append(const ::java::lang::Object & a0) const
        {
            return AbstractStringBuilder(env->callObjectMethod(this$, mids$[mid_append_db02ec8f], a0.this$));
        }

        AbstractStringBuilder AbstractStringBuilder::append(jlong a0) const
        {
            return AbstractStringBuilder(env->callObjectMethod(this$, mids$[mid_append_4d0b6cce], a0));
        }

        AbstractStringBuilder AbstractStringBuilder::append(jboolean a0) const
        {
            return AbstractStringBuilder(env->callObjectMethod(this$, mids$[mid_append_9dc99a1e], a0));
        }

        AbstractStringBuilder AbstractStringBuilder::append(jchar a0) const
        {
            return AbstractStringBuilder(env->callObjectMethod(this$, mids$[mid_append_a6b3f18b], a0));
        }

        AbstractStringBuilder AbstractStringBuilder::append(const ::java::lang::CharSequence & a0) const
        {
            return AbstractStringBuilder(env->callObjectMethod(this$, mids$[mid_append_97dd5503], a0.this$));
        }

        AbstractStringBuilder AbstractStringBuilder::append(const ::java::lang::String & a0) const
        {
            return AbstractStringBuilder(env->callObjectMethod(this$, mids$[mid_append_0f3b1ca9], a0.this$));
        }

        AbstractStringBuilder AbstractStringBuilder::append(jint a0) const
        {
            return AbstractStringBuilder(env->callObjectMethod(this$, mids$[mid_append_2814c015], a0));
        }

        AbstractStringBuilder AbstractStringBuilder::append(const ::java::lang::StringBuffer & a0) const
        {
            return AbstractStringBuilder(env->callObjectMethod(this$, mids$[mid_append_5337ed99], a0.this$));
        }

        AbstractStringBuilder AbstractStringBuilder::append(const JArray< jchar > & a0, jint a1, jint a2) const
        {
            return AbstractStringBuilder(env->callObjectMethod(this$, mids$[mid_append_c2cdc21f], a0.this$, a1, a2));
        }

        AbstractStringBuilder AbstractStringBuilder::append(const ::java::lang::CharSequence & a0, jint a1, jint a2) const
        {
            return AbstractStringBuilder(env->callObjectMethod(this$, mids$[mid_append_7e485efb], a0.this$, a1, a2));
        }

        AbstractStringBuilder AbstractStringBuilder::appendCodePoint(jint a0) const
        {
            return AbstractStringBuilder(env->callObjectMethod(this$, mids$[mid_appendCodePoint_2814c015], a0));
        }

        jint AbstractStringBuilder::capacity() const
        {
            return env->callIntMethod(this$, mids$[mid_capacity_54c6a179]);
        }

        jchar AbstractStringBuilder::charAt(jint a0) const
        {
            return env->callCharMethod(this$, mids$[mid_charAt_39c7bd29], a0);
        }

        jint AbstractStringBuilder::codePointAt(jint a0) const
        {
            return env->callIntMethod(this$, mids$[mid_codePointAt_39c7bd23], a0);
        }

        jint AbstractStringBuilder::codePointBefore(jint a0) const
        {
            return env->callIntMethod(this$, mids$[mid_codePointBefore_39c7bd23], a0);
        }

        jint AbstractStringBuilder::codePointCount(jint a0, jint a1) const
        {
            return env->callIntMethod(this$, mids$[mid_codePointCount_d8d154b9], a0, a1);
        }

        AbstractStringBuilder AbstractStringBuilder::delete$(jint a0, jint a1) const
        {
            return AbstractStringBuilder(env->callObjectMethod(this$, mids$[mid_delete_2b8ead17], a0, a1));
        }

        AbstractStringBuilder AbstractStringBuilder::deleteCharAt(jint a0) const
        {
            return AbstractStringBuilder(env->callObjectMethod(this$, mids$[mid_deleteCharAt_2814c015], a0));
        }

        void AbstractStringBuilder::ensureCapacity(jint a0) const
        {
            env->callVoidMethod(this$, mids$[mid_ensureCapacity_39c7bd3c], a0);
        }

        void AbstractStringBuilder::getChars(jint a0, jint a1, const JArray< jchar > & a2, jint a3) const
        {
            env->callVoidMethod(this$, mids$[mid_getChars_06518f84], a0, a1, a2.this$, a3);
        }

        jint AbstractStringBuilder::indexOf(const ::java::lang::String & a0) const
        {
            return env->callIntMethod(this$, mids$[mid_indexOf_5fdc3f57], a0.this$);
        }

        jint AbstractStringBuilder::indexOf(const ::java::lang::String & a0, jint a1) const
        {
            return env->callIntMethod(this$, mids$[mid_indexOf_6e53ccd9], a0.this$, a1);
        }

        AbstractStringBuilder AbstractStringBuilder::insert(jint a0, jfloat a1) const
        {
            return AbstractStringBuilder(env->callObjectMethod(this$, mids$[mid_insert_6089bc60], a0, a1));
        }

        AbstractStringBuilder AbstractStringBuilder::insert(jint a0, const JArray< jchar > & a1) const
        {
            return AbstractStringBuilder(env->callObjectMethod(this$, mids$[mid_insert_af3c3de9], a0, a1.this$));
        }

        AbstractStringBuilder AbstractStringBuilder::insert(jint a0, const ::java::lang::String & a1) const
        {
            return AbstractStringBuilder(env->callObjectMethod(this$, mids$[mid_insert_62ac5207], a0, a1.this$));
        }

        AbstractStringBuilder AbstractStringBuilder::insert(jint a0, jint a1) const
        {
            return AbstractStringBuilder(env->callObjectMethod(this$, mids$[mid_insert_2b8ead17], a0, a1));
        }

        AbstractStringBuilder AbstractStringBuilder::insert(jint a0, jdouble a1) const
        {
            return AbstractStringBuilder(env->callObjectMethod(this$, mids$[mid_insert_d1cc213e], a0, a1));
        }

        AbstractStringBuilder AbstractStringBuilder::insert(jint a0, const ::java::lang::Object & a1) const
        {
            return AbstractStringBuilder(env->callObjectMethod(this$, mids$[mid_insert_5236bc0d], a0, a1.this$));
        }

        AbstractStringBuilder AbstractStringBuilder::insert(jint a0, const ::java::lang::CharSequence & a1) const
        {
            return AbstractStringBuilder(env->callObjectMethod(this$, mids$[mid_insert_8567b539], a0, a1.this$));
        }

        AbstractStringBuilder AbstractStringBuilder::insert(jint a0, jboolean a1) const
        {
            return AbstractStringBuilder(env->callObjectMethod(this$, mids$[mid_insert_06d282ac], a0, a1));
        }

        AbstractStringBuilder AbstractStringBuilder::insert(jint a0, jchar a1) const
        {
            return AbstractStringBuilder(env->callObjectMethod(this$, mids$[mid_insert_063a9eb9], a0, a1));
        }

        AbstractStringBuilder AbstractStringBuilder::insert(jint a0, jlong a1) const
        {
            return AbstractStringBuilder(env->callObjectMethod(this$, mids$[mid_insert_9beca11c], a0, a1));
        }

        AbstractStringBuilder AbstractStringBuilder::insert(jint a0, const ::java::lang::CharSequence & a1, jint a2, jint a3) const
        {
            return AbstractStringBuilder(env->callObjectMethod(this$, mids$[mid_insert_78ebdb01], a0, a1.this$, a2, a3));
        }

        AbstractStringBuilder AbstractStringBuilder::insert(jint a0, const JArray< jchar > & a1, jint a2, jint a3) const
        {
            return AbstractStringBuilder(env->callObjectMethod(this$, mids$[mid_insert_24aafa89], a0, a1.this$, a2, a3));
        }

        jint AbstractStringBuilder::lastIndexOf(const ::java::lang::String & a0) const
        {
            return env->callIntMethod(this$, mids$[mid_lastIndexOf_5fdc3f57], a0.this$);
        }

        jint AbstractStringBuilder::lastIndexOf(const ::java::lang::String & a0, jint a1) const
        {
            return env->callIntMethod(this$, mids$[mid_lastIndexOf_6e53ccd9], a0.this$, a1);
        }

        jint AbstractStringBuilder::length() const
        {
            return env->callIntMethod(this$, mids$[mid_length_54c6a179]);
        }

        jint AbstractStringBuilder::offsetByCodePoints(jint a0, jint a1) const
        {
            return env->callIntMethod(this$, mids$[mid_offsetByCodePoints_d8d154b9], a0, a1);
        }

        AbstractStringBuilder AbstractStringBuilder::replace(jint a0, jint a1, const ::java::lang::String & a2) const
        {
            return AbstractStringBuilder(env->callObjectMethod(this$, mids$[mid_replace_349953a9], a0, a1, a2.this$));
        }

        AbstractStringBuilder AbstractStringBuilder::reverse() const
        {
            return AbstractStringBuilder(env->callObjectMethod(this$, mids$[mid_reverse_570c12f7]));
        }

        void AbstractStringBuilder::setCharAt(jint a0, jchar a1) const
        {
            env->callVoidMethod(this$, mids$[mid_setCharAt_83eec158], a0, a1);
        }

        void AbstractStringBuilder::setLength(jint a0) const
        {
            env->callVoidMethod(this$, mids$[mid_setLength_39c7bd3c], a0);
        }

        ::java::lang::CharSequence AbstractStringBuilder::subSequence(jint a0, jint a1) const
        {
            return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_subSequence_f88dfd57], a0, a1));
        }

        ::java::lang::String AbstractStringBuilder::substring(jint a0) const
        {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_substring_141401b3], a0));
        }

        ::java::lang::String AbstractStringBuilder::substring(jint a0, jint a1) const
        {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_substring_f9118fe5], a0, a1));
        }

        ::java::lang::String AbstractStringBuilder::toString() const
        {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }

        void AbstractStringBuilder::trimToSize() const
        {
            env->callVoidMethod(this$, mids$[mid_trimToSize_54c6a166]);
        }
    }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
    namespace lang {
        static PyObject *t_AbstractStringBuilder_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_AbstractStringBuilder_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_AbstractStringBuilder_append(t_AbstractStringBuilder *self, PyObject *args);
        static PyObject *t_AbstractStringBuilder_appendCodePoint(t_AbstractStringBuilder *self, PyObject *arg);
        static PyObject *t_AbstractStringBuilder_capacity(t_AbstractStringBuilder *self);
        static PyObject *t_AbstractStringBuilder_charAt(t_AbstractStringBuilder *self, PyObject *arg);
        static PyObject *t_AbstractStringBuilder_codePointAt(t_AbstractStringBuilder *self, PyObject *arg);
        static PyObject *t_AbstractStringBuilder_codePointBefore(t_AbstractStringBuilder *self, PyObject *arg);
        static PyObject *t_AbstractStringBuilder_codePointCount(t_AbstractStringBuilder *self, PyObject *args);
        static PyObject *t_AbstractStringBuilder_delete(t_AbstractStringBuilder *self, PyObject *args);
        static PyObject *t_AbstractStringBuilder_deleteCharAt(t_AbstractStringBuilder *self, PyObject *arg);
        static PyObject *t_AbstractStringBuilder_ensureCapacity(t_AbstractStringBuilder *self, PyObject *arg);
        static PyObject *t_AbstractStringBuilder_getChars(t_AbstractStringBuilder *self, PyObject *args);
        static PyObject *t_AbstractStringBuilder_indexOf(t_AbstractStringBuilder *self, PyObject *args);
        static PyObject *t_AbstractStringBuilder_insert(t_AbstractStringBuilder *self, PyObject *args);
        static PyObject *t_AbstractStringBuilder_lastIndexOf(t_AbstractStringBuilder *self, PyObject *args);
        static PyObject *t_AbstractStringBuilder_length(t_AbstractStringBuilder *self);
        static PyObject *t_AbstractStringBuilder_offsetByCodePoints(t_AbstractStringBuilder *self, PyObject *args);
        static PyObject *t_AbstractStringBuilder_replace(t_AbstractStringBuilder *self, PyObject *args);
        static PyObject *t_AbstractStringBuilder_reverse(t_AbstractStringBuilder *self);
        static PyObject *t_AbstractStringBuilder_setCharAt(t_AbstractStringBuilder *self, PyObject *args);
        static PyObject *t_AbstractStringBuilder_setLength(t_AbstractStringBuilder *self, PyObject *arg);
        static PyObject *t_AbstractStringBuilder_subSequence(t_AbstractStringBuilder *self, PyObject *args);
        static PyObject *t_AbstractStringBuilder_substring(t_AbstractStringBuilder *self, PyObject *args);
        static PyObject *t_AbstractStringBuilder_toString(t_AbstractStringBuilder *self, PyObject *args);
        static PyObject *t_AbstractStringBuilder_trimToSize(t_AbstractStringBuilder *self);

        static PyMethodDef t_AbstractStringBuilder__methods_[] = {
            DECLARE_METHOD(t_AbstractStringBuilder, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_AbstractStringBuilder, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_AbstractStringBuilder, append, METH_VARARGS),
            DECLARE_METHOD(t_AbstractStringBuilder, appendCodePoint, METH_O),
            DECLARE_METHOD(t_AbstractStringBuilder, capacity, METH_NOARGS),
            DECLARE_METHOD(t_AbstractStringBuilder, charAt, METH_O),
            DECLARE_METHOD(t_AbstractStringBuilder, codePointAt, METH_O),
            DECLARE_METHOD(t_AbstractStringBuilder, codePointBefore, METH_O),
            DECLARE_METHOD(t_AbstractStringBuilder, codePointCount, METH_VARARGS),
            DECLARE_METHOD(t_AbstractStringBuilder, delete, METH_VARARGS),
            DECLARE_METHOD(t_AbstractStringBuilder, deleteCharAt, METH_O),
            DECLARE_METHOD(t_AbstractStringBuilder, ensureCapacity, METH_O),
            DECLARE_METHOD(t_AbstractStringBuilder, getChars, METH_VARARGS),
            DECLARE_METHOD(t_AbstractStringBuilder, indexOf, METH_VARARGS),
            DECLARE_METHOD(t_AbstractStringBuilder, insert, METH_VARARGS),
            DECLARE_METHOD(t_AbstractStringBuilder, lastIndexOf, METH_VARARGS),
            DECLARE_METHOD(t_AbstractStringBuilder, length, METH_NOARGS),
            DECLARE_METHOD(t_AbstractStringBuilder, offsetByCodePoints, METH_VARARGS),
            DECLARE_METHOD(t_AbstractStringBuilder, replace, METH_VARARGS),
            DECLARE_METHOD(t_AbstractStringBuilder, reverse, METH_NOARGS),
            DECLARE_METHOD(t_AbstractStringBuilder, setCharAt, METH_VARARGS),
            DECLARE_METHOD(t_AbstractStringBuilder, setLength, METH_O),
            DECLARE_METHOD(t_AbstractStringBuilder, subSequence, METH_VARARGS),
            DECLARE_METHOD(t_AbstractStringBuilder, substring, METH_VARARGS),
            DECLARE_METHOD(t_AbstractStringBuilder, toString, METH_VARARGS),
            DECLARE_METHOD(t_AbstractStringBuilder, trimToSize, METH_NOARGS),
            { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(AbstractStringBuilder, t_AbstractStringBuilder, ::java::lang::Object, AbstractStringBuilder, abstract_init, 0, 0, 0, 0, 0);

        void t_AbstractStringBuilder::install(PyObject *module)
        {
            installType(&PY_TYPE(AbstractStringBuilder), module, "AbstractStringBuilder", 0);
        }

        void t_AbstractStringBuilder::initialize(PyObject *module)
        {
            PyDict_SetItemString(PY_TYPE(AbstractStringBuilder).tp_dict, "class_", make_descriptor(AbstractStringBuilder::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(AbstractStringBuilder).tp_dict, "wrapfn_", make_descriptor(t_AbstractStringBuilder::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(AbstractStringBuilder).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_AbstractStringBuilder_cast_(PyTypeObject *type, PyObject *arg)
        {
            if (!(arg = castCheck(arg, AbstractStringBuilder::initializeClass, 1)))
                return NULL;
            return t_AbstractStringBuilder::wrap_Object(AbstractStringBuilder(((t_AbstractStringBuilder *) arg)->object.this$));
        }
        static PyObject *t_AbstractStringBuilder_instance_(PyTypeObject *type, PyObject *arg)
        {
            if (!castCheck(arg, AbstractStringBuilder::initializeClass, 0))
                Py_RETURN_FALSE;
            Py_RETURN_TRUE;
        }

        static PyObject *t_AbstractStringBuilder_append(t_AbstractStringBuilder *self, PyObject *args)
        {
            switch (PyTuple_GET_SIZE(args)) {
              case 1:
                {
                    JArray< jchar > a0((jobject) NULL);
                    AbstractStringBuilder result((jobject) NULL);

                    if (!parseArgs(args, "[C", &a0))
                    {
                        OBJ_CALL(result = self->object.append(a0));
                        return t_AbstractStringBuilder::wrap_Object(result);
                    }
                }
                {
                    jfloat a0;
                    AbstractStringBuilder result((jobject) NULL);

                    if (!parseArgs(args, "F", &a0))
                    {
                        OBJ_CALL(result = self->object.append(a0));
                        return t_AbstractStringBuilder::wrap_Object(result);
                    }
                }
                {
                    jdouble a0;
                    AbstractStringBuilder result((jobject) NULL);

                    if (!parseArgs(args, "D", &a0))
                    {
                        OBJ_CALL(result = self->object.append(a0));
                        return t_AbstractStringBuilder::wrap_Object(result);
                    }
                }
                {
                    ::java::lang::Object a0((jobject) NULL);
                    AbstractStringBuilder result((jobject) NULL);

                    if (!parseArgs(args, "o", &a0))
                    {
                        OBJ_CALL(result = self->object.append(a0));
                        return t_AbstractStringBuilder::wrap_Object(result);
                    }
                }
                {
                    jlong a0;
                    AbstractStringBuilder result((jobject) NULL);

                    if (!parseArgs(args, "J", &a0))
                    {
                        OBJ_CALL(result = self->object.append(a0));
                        return t_AbstractStringBuilder::wrap_Object(result);
                    }
                }
                {
                    jboolean a0;
                    AbstractStringBuilder result((jobject) NULL);

                    if (!parseArgs(args, "Z", &a0))
                    {
                        OBJ_CALL(result = self->object.append(a0));
                        return t_AbstractStringBuilder::wrap_Object(result);
                    }
                }
                {
                    jchar a0;
                    AbstractStringBuilder result((jobject) NULL);

                    if (!parseArgs(args, "C", &a0))
                    {
                        OBJ_CALL(result = self->object.append(a0));
                        return t_AbstractStringBuilder::wrap_Object(result);
                    }
                }
                {
                    ::java::lang::CharSequence a0((jobject) NULL);
                    AbstractStringBuilder result((jobject) NULL);

                    if (!parseArgs(args, "O", &::java::lang::PY_TYPE(CharSequence), &a0))
                    {
                        OBJ_CALL(result = self->object.append(a0));
                        return t_AbstractStringBuilder::wrap_Object(result);
                    }
                }
                {
                    ::java::lang::String a0((jobject) NULL);
                    AbstractStringBuilder result((jobject) NULL);

                    if (!parseArgs(args, "s", &a0))
                    {
                        OBJ_CALL(result = self->object.append(a0));
                        return t_AbstractStringBuilder::wrap_Object(result);
                    }
                }
                {
                    jint a0;
                    AbstractStringBuilder result((jobject) NULL);

                    if (!parseArgs(args, "I", &a0))
                    {
                        OBJ_CALL(result = self->object.append(a0));
                        return t_AbstractStringBuilder::wrap_Object(result);
                    }
                }
                {
                    ::java::lang::StringBuffer a0((jobject) NULL);
                    AbstractStringBuilder result((jobject) NULL);

                    if (!parseArgs(args, "k", ::java::lang::StringBuffer::initializeClass, &a0))
                    {
                        OBJ_CALL(result = self->object.append(a0));
                        return t_AbstractStringBuilder::wrap_Object(result);
                    }
                }
                break;
              case 3:
                {
                    JArray< jchar > a0((jobject) NULL);
                    jint a1;
                    jint a2;
                    AbstractStringBuilder result((jobject) NULL);

                    if (!parseArgs(args, "[CII", &a0, &a1, &a2))
                    {
                        OBJ_CALL(result = self->object.append(a0, a1, a2));
                        return t_AbstractStringBuilder::wrap_Object(result);
                    }
                }
                {
                    ::java::lang::CharSequence a0((jobject) NULL);
                    jint a1;
                    jint a2;
                    AbstractStringBuilder result((jobject) NULL);

                    if (!parseArgs(args, "OII", &::java::lang::PY_TYPE(CharSequence), &a0, &a1, &a2))
                    {
                        OBJ_CALL(result = self->object.append(a0, a1, a2));
                        return t_AbstractStringBuilder::wrap_Object(result);
                    }
                }
            }

            PyErr_SetArgsError((PyObject *) self, "append", args);
            return NULL;
        }

        static PyObject *t_AbstractStringBuilder_appendCodePoint(t_AbstractStringBuilder *self, PyObject *arg)
        {
            jint a0;
            AbstractStringBuilder result((jobject) NULL);

            if (!parseArg(arg, "I", &a0))
            {
                OBJ_CALL(result = self->object.appendCodePoint(a0));
                return t_AbstractStringBuilder::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "appendCodePoint", arg);
            return NULL;
        }

        static PyObject *t_AbstractStringBuilder_capacity(t_AbstractStringBuilder *self)
        {
            jint result;
            OBJ_CALL(result = self->object.capacity());
            return PyInt_FromLong((long) result);
        }

        static PyObject *t_AbstractStringBuilder_charAt(t_AbstractStringBuilder *self, PyObject *arg)
        {
            jint a0;
            jchar result;

            if (!parseArg(arg, "I", &a0))
            {
                OBJ_CALL(result = self->object.charAt(a0));
                return PyUnicode_FromUnicode((Py_UNICODE *) &result, 1);
            }

            PyErr_SetArgsError((PyObject *) self, "charAt", arg);
            return NULL;
        }

        static PyObject *t_AbstractStringBuilder_codePointAt(t_AbstractStringBuilder *self, PyObject *arg)
        {
            jint a0;
            jint result;

            if (!parseArg(arg, "I", &a0))
            {
                OBJ_CALL(result = self->object.codePointAt(a0));
                return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "codePointAt", arg);
            return NULL;
        }

        static PyObject *t_AbstractStringBuilder_codePointBefore(t_AbstractStringBuilder *self, PyObject *arg)
        {
            jint a0;
            jint result;

            if (!parseArg(arg, "I", &a0))
            {
                OBJ_CALL(result = self->object.codePointBefore(a0));
                return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "codePointBefore", arg);
            return NULL;
        }

        static PyObject *t_AbstractStringBuilder_codePointCount(t_AbstractStringBuilder *self, PyObject *args)
        {
            jint a0;
            jint a1;
            jint result;

            if (!parseArgs(args, "II", &a0, &a1))
            {
                OBJ_CALL(result = self->object.codePointCount(a0, a1));
                return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "codePointCount", args);
            return NULL;
        }

        static PyObject *t_AbstractStringBuilder_delete(t_AbstractStringBuilder *self, PyObject *args)
        {
            jint a0;
            jint a1;
            AbstractStringBuilder result((jobject) NULL);

            if (!parseArgs(args, "II", &a0, &a1))
            {
                OBJ_CALL(result = self->object.delete$(a0, a1));
                return t_AbstractStringBuilder::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "delete", args);
            return NULL;
        }

        static PyObject *t_AbstractStringBuilder_deleteCharAt(t_AbstractStringBuilder *self, PyObject *arg)
        {
            jint a0;
            AbstractStringBuilder result((jobject) NULL);

            if (!parseArg(arg, "I", &a0))
            {
                OBJ_CALL(result = self->object.deleteCharAt(a0));
                return t_AbstractStringBuilder::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "deleteCharAt", arg);
            return NULL;
        }

        static PyObject *t_AbstractStringBuilder_ensureCapacity(t_AbstractStringBuilder *self, PyObject *arg)
        {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
                OBJ_CALL(self->object.ensureCapacity(a0));
                Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "ensureCapacity", arg);
            return NULL;
        }

        static PyObject *t_AbstractStringBuilder_getChars(t_AbstractStringBuilder *self, PyObject *args)
        {
            jint a0;
            jint a1;
            JArray< jchar > a2((jobject) NULL);
            jint a3;

            if (!parseArgs(args, "II[CI", &a0, &a1, &a2, &a3))
            {
                OBJ_CALL(self->object.getChars(a0, a1, a2, a3));
                Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "getChars", args);
            return NULL;
        }

        static PyObject *t_AbstractStringBuilder_indexOf(t_AbstractStringBuilder *self, PyObject *args)
        {
            switch (PyTuple_GET_SIZE(args)) {
              case 1:
                {
                    ::java::lang::String a0((jobject) NULL);
                    jint result;

                    if (!parseArgs(args, "s", &a0))
                    {
                        OBJ_CALL(result = self->object.indexOf(a0));
                        return PyInt_FromLong((long) result);
                    }
                }
                break;
              case 2:
                {
                    ::java::lang::String a0((jobject) NULL);
                    jint a1;
                    jint result;

                    if (!parseArgs(args, "sI", &a0, &a1))
                    {
                        OBJ_CALL(result = self->object.indexOf(a0, a1));
                        return PyInt_FromLong((long) result);
                    }
                }
            }

            PyErr_SetArgsError((PyObject *) self, "indexOf", args);
            return NULL;
        }

        static PyObject *t_AbstractStringBuilder_insert(t_AbstractStringBuilder *self, PyObject *args)
        {
            switch (PyTuple_GET_SIZE(args)) {
              case 2:
                {
                    jint a0;
                    jfloat a1;
                    AbstractStringBuilder result((jobject) NULL);

                    if (!parseArgs(args, "IF", &a0, &a1))
                    {
                        OBJ_CALL(result = self->object.insert(a0, a1));
                        return t_AbstractStringBuilder::wrap_Object(result);
                    }
                }
                {
                    jint a0;
                    JArray< jchar > a1((jobject) NULL);
                    AbstractStringBuilder result((jobject) NULL);

                    if (!parseArgs(args, "I[C", &a0, &a1))
                    {
                        OBJ_CALL(result = self->object.insert(a0, a1));
                        return t_AbstractStringBuilder::wrap_Object(result);
                    }
                }
                {
                    jint a0;
                    ::java::lang::String a1((jobject) NULL);
                    AbstractStringBuilder result((jobject) NULL);

                    if (!parseArgs(args, "Is", &a0, &a1))
                    {
                        OBJ_CALL(result = self->object.insert(a0, a1));
                        return t_AbstractStringBuilder::wrap_Object(result);
                    }
                }
                {
                    jint a0;
                    jint a1;
                    AbstractStringBuilder result((jobject) NULL);

                    if (!parseArgs(args, "II", &a0, &a1))
                    {
                        OBJ_CALL(result = self->object.insert(a0, a1));
                        return t_AbstractStringBuilder::wrap_Object(result);
                    }
                }
                {
                    jint a0;
                    jdouble a1;
                    AbstractStringBuilder result((jobject) NULL);

                    if (!parseArgs(args, "ID", &a0, &a1))
                    {
                        OBJ_CALL(result = self->object.insert(a0, a1));
                        return t_AbstractStringBuilder::wrap_Object(result);
                    }
                }
                {
                    jint a0;
                    ::java::lang::Object a1((jobject) NULL);
                    AbstractStringBuilder result((jobject) NULL);

                    if (!parseArgs(args, "Io", &a0, &a1))
                    {
                        OBJ_CALL(result = self->object.insert(a0, a1));
                        return t_AbstractStringBuilder::wrap_Object(result);
                    }
                }
                {
                    jint a0;
                    ::java::lang::CharSequence a1((jobject) NULL);
                    AbstractStringBuilder result((jobject) NULL);

                    if (!parseArgs(args, "IO", &::java::lang::PY_TYPE(CharSequence), &a0, &a1))
                    {
                        OBJ_CALL(result = self->object.insert(a0, a1));
                        return t_AbstractStringBuilder::wrap_Object(result);
                    }
                }
                {
                    jint a0;
                    jboolean a1;
                    AbstractStringBuilder result((jobject) NULL);

                    if (!parseArgs(args, "IZ", &a0, &a1))
                    {
                        OBJ_CALL(result = self->object.insert(a0, a1));
                        return t_AbstractStringBuilder::wrap_Object(result);
                    }
                }
                {
                    jint a0;
                    jchar a1;
                    AbstractStringBuilder result((jobject) NULL);

                    if (!parseArgs(args, "IC", &a0, &a1))
                    {
                        OBJ_CALL(result = self->object.insert(a0, a1));
                        return t_AbstractStringBuilder::wrap_Object(result);
                    }
                }
                {
                    jint a0;
                    jlong a1;
                    AbstractStringBuilder result((jobject) NULL);

                    if (!parseArgs(args, "IJ", &a0, &a1))
                    {
                        OBJ_CALL(result = self->object.insert(a0, a1));
                        return t_AbstractStringBuilder::wrap_Object(result);
                    }
                }
                break;
              case 4:
                {
                    jint a0;
                    ::java::lang::CharSequence a1((jobject) NULL);
                    jint a2;
                    jint a3;
                    AbstractStringBuilder result((jobject) NULL);

                    if (!parseArgs(args, "IOII", &::java::lang::PY_TYPE(CharSequence), &a0, &a1, &a2, &a3))
                    {
                        OBJ_CALL(result = self->object.insert(a0, a1, a2, a3));
                        return t_AbstractStringBuilder::wrap_Object(result);
                    }
                }
                {
                    jint a0;
                    JArray< jchar > a1((jobject) NULL);
                    jint a2;
                    jint a3;
                    AbstractStringBuilder result((jobject) NULL);

                    if (!parseArgs(args, "I[CII", &a0, &a1, &a2, &a3))
                    {
                        OBJ_CALL(result = self->object.insert(a0, a1, a2, a3));
                        return t_AbstractStringBuilder::wrap_Object(result);
                    }
                }
            }

            PyErr_SetArgsError((PyObject *) self, "insert", args);
            return NULL;
        }

        static PyObject *t_AbstractStringBuilder_lastIndexOf(t_AbstractStringBuilder *self, PyObject *args)
        {
            switch (PyTuple_GET_SIZE(args)) {
              case 1:
                {
                    ::java::lang::String a0((jobject) NULL);
                    jint result;

                    if (!parseArgs(args, "s", &a0))
                    {
                        OBJ_CALL(result = self->object.lastIndexOf(a0));
                        return PyInt_FromLong((long) result);
                    }
                }
                break;
              case 2:
                {
                    ::java::lang::String a0((jobject) NULL);
                    jint a1;
                    jint result;

                    if (!parseArgs(args, "sI", &a0, &a1))
                    {
                        OBJ_CALL(result = self->object.lastIndexOf(a0, a1));
                        return PyInt_FromLong((long) result);
                    }
                }
            }

            PyErr_SetArgsError((PyObject *) self, "lastIndexOf", args);
            return NULL;
        }

        static PyObject *t_AbstractStringBuilder_length(t_AbstractStringBuilder *self)
        {
            jint result;
            OBJ_CALL(result = self->object.length());
            return PyInt_FromLong((long) result);
        }

        static PyObject *t_AbstractStringBuilder_offsetByCodePoints(t_AbstractStringBuilder *self, PyObject *args)
        {
            jint a0;
            jint a1;
            jint result;

            if (!parseArgs(args, "II", &a0, &a1))
            {
                OBJ_CALL(result = self->object.offsetByCodePoints(a0, a1));
                return PyInt_FromLong((long) result);
            }

            PyErr_SetArgsError((PyObject *) self, "offsetByCodePoints", args);
            return NULL;
        }

        static PyObject *t_AbstractStringBuilder_replace(t_AbstractStringBuilder *self, PyObject *args)
        {
            jint a0;
            jint a1;
            ::java::lang::String a2((jobject) NULL);
            AbstractStringBuilder result((jobject) NULL);

            if (!parseArgs(args, "IIs", &a0, &a1, &a2))
            {
                OBJ_CALL(result = self->object.replace(a0, a1, a2));
                return t_AbstractStringBuilder::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "replace", args);
            return NULL;
        }

        static PyObject *t_AbstractStringBuilder_reverse(t_AbstractStringBuilder *self)
        {
            AbstractStringBuilder result((jobject) NULL);
            OBJ_CALL(result = self->object.reverse());
            return t_AbstractStringBuilder::wrap_Object(result);
        }

        static PyObject *t_AbstractStringBuilder_setCharAt(t_AbstractStringBuilder *self, PyObject *args)
        {
            jint a0;
            jchar a1;

            if (!parseArgs(args, "IC", &a0, &a1))
            {
                OBJ_CALL(self->object.setCharAt(a0, a1));
                Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setCharAt", args);
            return NULL;
        }

        static PyObject *t_AbstractStringBuilder_setLength(t_AbstractStringBuilder *self, PyObject *arg)
        {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
                OBJ_CALL(self->object.setLength(a0));
                Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "setLength", arg);
            return NULL;
        }

        static PyObject *t_AbstractStringBuilder_subSequence(t_AbstractStringBuilder *self, PyObject *args)
        {
            jint a0;
            jint a1;
            ::java::lang::CharSequence result((jobject) NULL);

            if (!parseArgs(args, "II", &a0, &a1))
            {
                OBJ_CALL(result = self->object.subSequence(a0, a1));
                return ::java::lang::t_CharSequence::wrap_Object(result);
            }

            PyErr_SetArgsError((PyObject *) self, "subSequence", args);
            return NULL;
        }

        static PyObject *t_AbstractStringBuilder_substring(t_AbstractStringBuilder *self, PyObject *args)
        {
            switch (PyTuple_GET_SIZE(args)) {
              case 1:
                {
                    jint a0;
                    ::java::lang::String result((jobject) NULL);

                    if (!parseArgs(args, "I", &a0))
                    {
                        OBJ_CALL(result = self->object.substring(a0));
                        return j2p(result);
                    }
                }
                break;
              case 2:
                {
                    jint a0;
                    jint a1;
                    ::java::lang::String result((jobject) NULL);

                    if (!parseArgs(args, "II", &a0, &a1))
                    {
                        OBJ_CALL(result = self->object.substring(a0, a1));
                        return j2p(result);
                    }
                }
            }

            PyErr_SetArgsError((PyObject *) self, "substring", args);
            return NULL;
        }

        static PyObject *t_AbstractStringBuilder_toString(t_AbstractStringBuilder *self, PyObject *args)
        {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
                OBJ_CALL(result = self->object.toString());
                return j2p(result);
            }

            return callSuper(&PY_TYPE(AbstractStringBuilder), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_AbstractStringBuilder_trimToSize(t_AbstractStringBuilder *self)
        {
            OBJ_CALL(self->object.trimToSize());
            Py_RETURN_NONE;
        }
    }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/io/InputStream.h"
#include "java/io/IOException.h"
#include "java/io/Closeable.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace java {
    namespace io {

        ::java::lang::Class *InputStream::class$ = NULL;
        jmethodID *InputStream::mids$ = NULL;

        jclass InputStream::initializeClass()
        {
            if (!class$)
            {

                jclass cls = (jclass) env->findClass("java/io/InputStream");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                mids$[mid_available_54c6a179] = env->getMethodID(cls, "available", "()I");
                mids$[mid_close_54c6a166] = env->getMethodID(cls, "close", "()V");
                mids$[mid_mark_39c7bd3c] = env->getMethodID(cls, "mark", "(I)V");
                mids$[mid_markSupported_54c6a16a] = env->getMethodID(cls, "markSupported", "()Z");
                mids$[mid_read_54c6a179] = env->getMethodID(cls, "read", "()I");
                mids$[mid_read_49b4f134] = env->getMethodID(cls, "read", "([B)I");
                mids$[mid_read_86f44340] = env->getMethodID(cls, "read", "([BII)I");
                mids$[mid_reset_54c6a166] = env->getMethodID(cls, "reset", "()V");
                mids$[mid_skip_0ee6df33] = env->getMethodID(cls, "skip", "(J)J");

                class$ = (::java::lang::Class *) new JObject(cls);
            }
            return (jclass) class$->this$;
        }

        InputStream::InputStream() : ::java::lang::Object(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        jint InputStream::available() const
        {
            return env->callIntMethod(this$, mids$[mid_available_54c6a179]);
        }

        void InputStream::close() const
        {
            env->callVoidMethod(this$, mids$[mid_close_54c6a166]);
        }

        void InputStream::mark(jint a0) const
        {
            env->callVoidMethod(this$, mids$[mid_mark_39c7bd3c], a0);
        }

        jboolean InputStream::markSupported() const
        {
            return env->callBooleanMethod(this$, mids$[mid_markSupported_54c6a16a]);
        }

        jint InputStream::read() const
        {
            return env->callIntMethod(this$, mids$[mid_read_54c6a179]);
        }

        jint InputStream::read(const JArray< jbyte > & a0) const
        {
            return env->callIntMethod(this$, mids$[mid_read_49b4f134], a0.this$);
        }

        jint InputStream::read(const JArray< jbyte > & a0, jint a1, jint a2) const
        {
            return env->callIntMethod(this$, mids$[mid_read_86f44340], a0.this$, a1, a2);
        }

        void InputStream::reset() const
        {
            env->callVoidMethod(this$, mids$[mid_reset_54c6a166]);
        }

        jlong InputStream::skip(jlong a0) const
        {
            return env->callLongMethod(this$, mids$[mid_skip_0ee6df33], a0);
        }
    }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
    namespace io {
        static PyObject *t_InputStream_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_InputStream_instance_(PyTypeObject *type, PyObject *arg);
        static int t_InputStream_init_(t_InputStream *self, PyObject *args, PyObject *kwds);
        static PyObject *t_InputStream_available(t_InputStream *self);
        static PyObject *t_InputStream_close(t_InputStream *self);
        static PyObject *t_InputStream_mark(t_InputStream *self, PyObject *arg);
        static PyObject *t_InputStream_markSupported(t_InputStream *self);
        static PyObject *t_InputStream_read(t_InputStream *self, PyObject *args);
        static PyObject *t_InputStream_reset(t_InputStream *self);
        static PyObject *t_InputStream_skip(t_InputStream *self, PyObject *arg);

        static PyMethodDef t_InputStream__methods_[] = {
            DECLARE_METHOD(t_InputStream, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_InputStream, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_InputStream, available, METH_NOARGS),
            DECLARE_METHOD(t_InputStream, close, METH_NOARGS),
            DECLARE_METHOD(t_InputStream, mark, METH_O),
            DECLARE_METHOD(t_InputStream, markSupported, METH_NOARGS),
            DECLARE_METHOD(t_InputStream, read, METH_VARARGS),
            DECLARE_METHOD(t_InputStream, reset, METH_NOARGS),
            DECLARE_METHOD(t_InputStream, skip, METH_O),
            { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(InputStream, t_InputStream, ::java::lang::Object, InputStream, t_InputStream_init_, 0, 0, 0, 0, 0);

        void t_InputStream::install(PyObject *module)
        {
            installType(&PY_TYPE(InputStream), module, "InputStream", 0);
        }

        void t_InputStream::initialize(PyObject *module)
        {
            PyDict_SetItemString(PY_TYPE(InputStream).tp_dict, "class_", make_descriptor(InputStream::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(InputStream).tp_dict, "wrapfn_", make_descriptor(t_InputStream::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(InputStream).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_InputStream_cast_(PyTypeObject *type, PyObject *arg)
        {
            if (!(arg = castCheck(arg, InputStream::initializeClass, 1)))
                return NULL;
            return t_InputStream::wrap_Object(InputStream(((t_InputStream *) arg)->object.this$));
        }
        static PyObject *t_InputStream_instance_(PyTypeObject *type, PyObject *arg)
        {
            if (!castCheck(arg, InputStream::initializeClass, 0))
                Py_RETURN_FALSE;
            Py_RETURN_TRUE;
        }

        static int t_InputStream_init_(t_InputStream *self, PyObject *args, PyObject *kwds)
        {
            InputStream object((jobject) NULL);

            INT_CALL(object = InputStream());
            self->object = object;

            return 0;
        }

        static PyObject *t_InputStream_available(t_InputStream *self)
        {
            jint result;
            OBJ_CALL(result = self->object.available());
            return PyInt_FromLong((long) result);
        }

        static PyObject *t_InputStream_close(t_InputStream *self)
        {
            OBJ_CALL(self->object.close());
            Py_RETURN_NONE;
        }

        static PyObject *t_InputStream_mark(t_InputStream *self, PyObject *arg)
        {
            jint a0;

            if (!parseArg(arg, "I", &a0))
            {
                OBJ_CALL(self->object.mark(a0));
                Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "mark", arg);
            return NULL;
        }

        static PyObject *t_InputStream_markSupported(t_InputStream *self)
        {
            jboolean result;
            OBJ_CALL(result = self->object.markSupported());
            Py_RETURN_BOOL(result);
        }

        static PyObject *t_InputStream_read(t_InputStream *self, PyObject *args)
        {
            switch (PyTuple_GET_SIZE(args)) {
              case 0:
                {
                    jint result;
                    OBJ_CALL(result = self->object.read());
                    return PyInt_FromLong((long) result);
                }
                break;
              case 1:
                {
                    JArray< jbyte > a0((jobject) NULL);
                    jint result;

                    if (!parseArgs(args, "[B", &a0))
                    {
                        OBJ_CALL(result = self->object.read(a0));
                        return PyInt_FromLong((long) result);
                    }
                }
                break;
              case 3:
                {
                    JArray< jbyte > a0((jobject) NULL);
                    jint a1;
                    jint a2;
                    jint result;

                    if (!parseArgs(args, "[BII", &a0, &a1, &a2))
                    {
                        OBJ_CALL(result = self->object.read(a0, a1, a2));
                        return PyInt_FromLong((long) result);
                    }
                }
            }

            PyErr_SetArgsError((PyObject *) self, "read", args);
            return NULL;
        }

        static PyObject *t_InputStream_reset(t_InputStream *self)
        {
            OBJ_CALL(self->object.reset());
            Py_RETURN_NONE;
        }

        static PyObject *t_InputStream_skip(t_InputStream *self, PyObject *arg)
        {
            jlong a0;
            jlong result;

            if (!parseArg(arg, "J", &a0))
            {
                OBJ_CALL(result = self->object.skip(a0));
                return PyLong_FromLongLong((PY_LONG_LONG) result);
            }

            PyErr_SetArgsError((PyObject *) self, "skip", arg);
            return NULL;
        }
    }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/lang/InterruptedException.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace java {
    namespace lang {

        ::java::lang::Class *InterruptedException::class$ = NULL;
        jmethodID *InterruptedException::mids$ = NULL;

        jclass InterruptedException::initializeClass()
        {
            if (!class$)
            {

                jclass cls = (jclass) env->findClass("java/lang/InterruptedException");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");

                class$ = (::java::lang::Class *) new JObject(cls);
            }
            return (jclass) class$->this$;
        }

        InterruptedException::InterruptedException() : ::java::lang::Exception(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        InterruptedException::InterruptedException(const ::java::lang::String & a0) : ::java::lang::Exception(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}
    }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
    namespace lang {
        static PyObject *t_InterruptedException_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_InterruptedException_instance_(PyTypeObject *type, PyObject *arg);
        static int t_InterruptedException_init_(t_InterruptedException *self, PyObject *args, PyObject *kwds);

        static PyMethodDef t_InterruptedException__methods_[] = {
            DECLARE_METHOD(t_InterruptedException, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_InterruptedException, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(InterruptedException, t_InterruptedException, ::java::lang::Exception, InterruptedException, t_InterruptedException_init_, 0, 0, 0, 0, 0);

        void t_InterruptedException::install(PyObject *module)
        {
            installType(&PY_TYPE(InterruptedException), module, "InterruptedException", 0);
        }

        void t_InterruptedException::initialize(PyObject *module)
        {
            PyDict_SetItemString(PY_TYPE(InterruptedException).tp_dict, "class_", make_descriptor(InterruptedException::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(InterruptedException).tp_dict, "wrapfn_", make_descriptor(t_InterruptedException::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(InterruptedException).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_InterruptedException_cast_(PyTypeObject *type, PyObject *arg)
        {
            if (!(arg = castCheck(arg, InterruptedException::initializeClass, 1)))
                return NULL;
            return t_InterruptedException::wrap_Object(InterruptedException(((t_InterruptedException *) arg)->object.this$));
        }
        static PyObject *t_InterruptedException_instance_(PyTypeObject *type, PyObject *arg)
        {
            if (!castCheck(arg, InterruptedException::initializeClass, 0))
                Py_RETURN_FALSE;
            Py_RETURN_TRUE;
        }

        static int t_InterruptedException_init_(t_InterruptedException *self, PyObject *args, PyObject *kwds)
        {
            switch (PyTuple_GET_SIZE(args)) {
              case 0:
                {
                    InterruptedException object((jobject) NULL);

                    INT_CALL(object = InterruptedException());
                    self->object = object;
                    break;
                }
                goto err;
              case 1:
                {
                    ::java::lang::String a0((jobject) NULL);
                    InterruptedException object((jobject) NULL);

                    if (!parseArgs(args, "s", &a0))
                    {
                        INT_CALL(object = InterruptedException(a0));
                        self->object = object;
                        break;
                    }
                }
              default:
              err:
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
            }

            return 0;
        }
    }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/lang/StringBuffer.h"
#include "java/lang/CharSequence.h"
#include "java/io/Serializable.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "java/lang/Appendable.h"
#include "java/lang/Object.h"
#include "JArray.h"

namespace java {
    namespace lang {

        ::java::lang::Class *StringBuffer::class$ = NULL;
        jmethodID *StringBuffer::mids$ = NULL;

        jclass StringBuffer::initializeClass()
        {
            if (!class$)
            {

                jclass cls = (jclass) env->findClass("java/lang/StringBuffer");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_54c6a166] = env->getMethodID(cls, "<init>", "()V");
                mids$[mid_init$_39c7bd3c] = env->getMethodID(cls, "<init>", "(I)V");
                mids$[mid_init$_5fdc3f48] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;)V");
                mids$[mid_init$_a8afc64a] = env->getMethodID(cls, "<init>", "(Ljava/lang/CharSequence;)V");
                mids$[mid_append_35d2e845] = env->getMethodID(cls, "append", "([C)Ljava/lang/StringBuffer;");
                mids$[mid_append_251e110e] = env->getMethodID(cls, "append", "(F)Ljava/lang/StringBuffer;");
                mids$[mid_append_24b69bf0] = env->getMethodID(cls, "append", "(D)Ljava/lang/StringBuffer;");
                mids$[mid_append_67ad01ed] = env->getMethodID(cls, "append", "(Ljava/lang/Object;)Ljava/lang/StringBuffer;");
                mids$[mid_append_662d52ca] = env->getMethodID(cls, "append", "(J)Ljava/lang/StringBuffer;");
                mids$[mid_append_bb3a365a] = env->getMethodID(cls, "append", "(Z)Ljava/lang/StringBuffer;");
                mids$[mid_append_4ca72be1] = env->getMethodID(cls, "append", "(C)Ljava/lang/StringBuffer;");
                mids$[mid_append_6b1920e9] = env->getMethodID(cls, "append", "(Ljava/lang/CharSequence;)Ljava/lang/StringBuffer;");
                mids$[mid_append_2979b2bb] = env->getMethodID(cls, "append", "(Ljava/lang/String;)Ljava/lang/StringBuffer;");
                mids$[mid_append_fdff3523] = env->getMethodID(cls, "append", "(I)Ljava/lang/StringBuffer;");
                mids$[mid_append_a876a4ab] = env->getMethodID(cls, "append", "(Ljava/lang/StringBuffer;)Ljava/lang/StringBuffer;");
                mids$[mid_append_aa3a4fc5] = env->getMethodID(cls, "append", "([CII)Ljava/lang/StringBuffer;");
                mids$[mid_append_f3c776b1] = env->getMethodID(cls, "append", "(Ljava/lang/CharSequence;II)Ljava/lang/StringBuffer;");
                mids$[mid_appendCodePoint_fdff3523] = env->getMethodID(cls, "appendCodePoint", "(I)Ljava/lang/StringBuffer;");
                mids$[mid_capacity_54c6a179] = env->getMethodID(cls, "capacity", "()I");
                mids$[mid_charAt_39c7bd29] = env->getMethodID(cls, "charAt", "(I)C");
                mids$[mid_codePointAt_39c7bd23] = env->getMethodID(cls, "codePointAt", "(I)I");
                mids$[mid_codePointBefore_39c7bd23] = env->getMethodID(cls, "codePointBefore", "(I)I");
                mids$[mid_codePointCount_d8d154b9] = env->getMethodID(cls, "codePointCount", "(II)I");
                mids$[mid_delete_644727d5] = env->getMethodID(cls, "delete", "(II)Ljava/lang/StringBuffer;");
                mids$[mid_deleteCharAt_fdff3523] = env->getMethodID(cls, "deleteCharAt", "(I)Ljava/lang/StringBuffer;");
                mids$[mid_ensureCapacity_39c7bd3c] = env->getMethodID(cls, "ensureCapacity", "(I)V");
                mids$[mid_getChars_06518f84] = env->getMethodID(cls, "getChars", "(II[CI)V");
                mids$[mid_indexOf_5fdc3f57] = env->getMethodID(cls, "indexOf", "(Ljava/lang/String;)I");
                mids$[mid_indexOf_6e53ccd9] = env->getMethodID(cls, "indexOf", "(Ljava/lang/String;I)I");
                mids$[mid_insert_d95ec358] = env->getMethodID(cls, "insert", "(IF)Ljava/lang/StringBuffer;");
                mids$[mid_insert_bc0ebac7] = env->getMethodID(cls, "insert", "(I[C)Ljava/lang/StringBuffer;");
                mids$[mid_insert_88877b15] = env->getMethodID(cls, "insert", "(ILjava/lang/String;)Ljava/lang/StringBuffer;");
                mids$[mid_insert_644727d5] = env->getMethodID(cls, "insert", "(II)Ljava/lang/StringBuffer;");
                mids$[mid_insert_b71b2a52] = env->getMethodID(cls, "insert", "(ID)Ljava/lang/StringBuffer;");
                mids$[mid_insert_2e164a03] = env->getMethodID(cls, "insert", "(ILjava/lang/Object;)Ljava/lang/StringBuffer;");
                mids$[mid_insert_ed5f9c37] = env->getMethodID(cls, "insert", "(ILjava/lang/CharSequence;)Ljava/lang/StringBuffer;");
                mids$[mid_insert_3c3656bc] = env->getMethodID(cls, "insert", "(IZ)Ljava/lang/StringBuffer;");
                mids$[mid_insert_3d91488b] = env->getMethodID(cls, "insert", "(IC)Ljava/lang/StringBuffer;");
                mids$[mid_insert_5e363fec] = env->getMethodID(cls, "insert", "(IJ)Ljava/lang/StringBuffer;");
                mids$[mid_insert_732cbadf] = env->getMethodID(cls, "insert", "(ILjava/lang/CharSequence;II)Ljava/lang/StringBuffer;");
                mids$[mid_insert_6edd3397] = env->getMethodID(cls, "insert", "(I[CII)Ljava/lang/StringBuffer;");
                mids$[mid_lastIndexOf_5fdc3f57] = env->getMethodID(cls, "lastIndexOf", "(Ljava/lang/String;)I");
                mids$[mid_lastIndexOf_6e53ccd9] = env->getMethodID(cls, "lastIndexOf", "(Ljava/lang/String;I)I");
                mids$[mid_length_54c6a179] = env->getMethodID(cls, "length", "()I");
                mids$[mid_offsetByCodePoints_d8d154b9] = env->getMethodID(cls, "offsetByCodePoints", "(II)I");
                mids$[mid_replace_95b69603] = env->getMethodID(cls, "replace", "(IILjava/lang/String;)Ljava/lang/StringBuffer;");
                mids$[mid_reverse_d54172a5] = env->getMethodID(cls, "reverse", "()Ljava/lang/StringBuffer;");
                mids$[mid_setCharAt_83eec158] = env->getMethodID(cls, "setCharAt", "(IC)V");
                mids$[mid_setLength_39c7bd3c] = env->getMethodID(cls, "setLength", "(I)V");
                mids$[mid_subSequence_f88dfd57] = env->getMethodID(cls, "subSequence", "(II)Ljava/lang/CharSequence;");
                mids$[mid_substring_141401b3] = env->getMethodID(cls, "substring", "(I)Ljava/lang/String;");
                mids$[mid_substring_f9118fe5] = env->getMethodID(cls, "substring", "(II)Ljava/lang/String;");
                mids$[mid_toString_14c7b5c5] = env->getMethodID(cls, "toString", "()Ljava/lang/String;");
                mids$[mid_trimToSize_54c6a166] = env->getMethodID(cls, "trimToSize", "()V");

                class$ = (::java::lang::Class *) new JObject(cls);
            }
            return (jclass) class$->this$;
        }

        StringBuffer::StringBuffer() : ::java::lang::AbstractStringBuilder(env->newObject(initializeClass, &mids$, mid_init$_54c6a166)) {}

        StringBuffer::StringBuffer(jint a0) : ::java::lang::AbstractStringBuilder(env->newObject(initializeClass, &mids$, mid_init$_39c7bd3c, a0)) {}

        StringBuffer::StringBuffer(const ::java::lang::String & a0) : ::java::lang::AbstractStringBuilder(env->newObject(initializeClass, &mids$, mid_init$_5fdc3f48, a0.this$)) {}

        StringBuffer::StringBuffer(const ::java::lang::CharSequence & a0) : ::java::lang::AbstractStringBuilder(env->newObject(initializeClass, &mids$, mid_init$_a8afc64a, a0.this$)) {}

        StringBuffer StringBuffer::append(const JArray< jchar > & a0) const
        {
            return StringBuffer(env->callObjectMethod(this$, mids$[mid_append_35d2e845], a0.this$));
        }

        StringBuffer StringBuffer::append(jfloat a0) const
        {
            return StringBuffer(env->callObjectMethod(this$, mids$[mid_append_251e110e], a0));
        }

        StringBuffer StringBuffer::append(jdouble a0) const
        {
            return StringBuffer(env->callObjectMethod(this$, mids$[mid_append_24b69bf0], a0));
        }

        StringBuffer StringBuffer::append(const ::java::lang::Object & a0) const
        {
            return StringBuffer(env->callObjectMethod(this$, mids$[mid_append_67ad01ed], a0.this$));
        }

        StringBuffer StringBuffer::append(jlong a0) const
        {
            return StringBuffer(env->callObjectMethod(this$, mids$[mid_append_662d52ca], a0));
        }

        StringBuffer StringBuffer::append(jboolean a0) const
        {
            return StringBuffer(env->callObjectMethod(this$, mids$[mid_append_bb3a365a], a0));
        }

        StringBuffer StringBuffer::append(jchar a0) const
        {
            return StringBuffer(env->callObjectMethod(this$, mids$[mid_append_4ca72be1], a0));
        }

        StringBuffer StringBuffer::append(const ::java::lang::CharSequence & a0) const
        {
            return StringBuffer(env->callObjectMethod(this$, mids$[mid_append_6b1920e9], a0.this$));
        }

        StringBuffer StringBuffer::append(const ::java::lang::String & a0) const
        {
            return StringBuffer(env->callObjectMethod(this$, mids$[mid_append_2979b2bb], a0.this$));
        }

        StringBuffer StringBuffer::append(jint a0) const
        {
            return StringBuffer(env->callObjectMethod(this$, mids$[mid_append_fdff3523], a0));
        }

        StringBuffer StringBuffer::append(const StringBuffer & a0) const
        {
            return StringBuffer(env->callObjectMethod(this$, mids$[mid_append_a876a4ab], a0.this$));
        }

        StringBuffer StringBuffer::append(const JArray< jchar > & a0, jint a1, jint a2) const
        {
            return StringBuffer(env->callObjectMethod(this$, mids$[mid_append_aa3a4fc5], a0.this$, a1, a2));
        }

        StringBuffer StringBuffer::append(const ::java::lang::CharSequence & a0, jint a1, jint a2) const
        {
            return StringBuffer(env->callObjectMethod(this$, mids$[mid_append_f3c776b1], a0.this$, a1, a2));
        }

        StringBuffer StringBuffer::appendCodePoint(jint a0) const
        {
            return StringBuffer(env->callObjectMethod(this$, mids$[mid_appendCodePoint_fdff3523], a0));
        }

        jint StringBuffer::capacity() const
        {
            return env->callIntMethod(this$, mids$[mid_capacity_54c6a179]);
        }

        jchar StringBuffer::charAt(jint a0) const
        {
            return env->callCharMethod(this$, mids$[mid_charAt_39c7bd29], a0);
        }

        jint StringBuffer::codePointAt(jint a0) const
        {
            return env->callIntMethod(this$, mids$[mid_codePointAt_39c7bd23], a0);
        }

        jint StringBuffer::codePointBefore(jint a0) const
        {
            return env->callIntMethod(this$, mids$[mid_codePointBefore_39c7bd23], a0);
        }

        jint StringBuffer::codePointCount(jint a0, jint a1) const
        {
            return env->callIntMethod(this$, mids$[mid_codePointCount_d8d154b9], a0, a1);
        }

        StringBuffer StringBuffer::delete$(jint a0, jint a1) const
        {
            return StringBuffer(env->callObjectMethod(this$, mids$[mid_delete_644727d5], a0, a1));
        }

        StringBuffer StringBuffer::deleteCharAt(jint a0) const
        {
            return StringBuffer(env->callObjectMethod(this$, mids$[mid_deleteCharAt_fdff3523], a0));
        }

        void StringBuffer::ensureCapacity(jint a0) const
        {
            env->callVoidMethod(this$, mids$[mid_ensureCapacity_39c7bd3c], a0);
        }

        void StringBuffer::getChars(jint a0, jint a1, const JArray< jchar > & a2, jint a3) const
        {
            env->callVoidMethod(this$, mids$[mid_getChars_06518f84], a0, a1, a2.this$, a3);
        }

        jint StringBuffer::indexOf(const ::java::lang::String & a0) const
        {
            return env->callIntMethod(this$, mids$[mid_indexOf_5fdc3f57], a0.this$);
        }

        jint StringBuffer::indexOf(const ::java::lang::String & a0, jint a1) const
        {
            return env->callIntMethod(this$, mids$[mid_indexOf_6e53ccd9], a0.this$, a1);
        }

        StringBuffer StringBuffer::insert(jint a0, jfloat a1) const
        {
            return StringBuffer(env->callObjectMethod(this$, mids$[mid_insert_d95ec358], a0, a1));
        }

        StringBuffer StringBuffer::insert(jint a0, const JArray< jchar > & a1) const
        {
            return StringBuffer(env->callObjectMethod(this$, mids$[mid_insert_bc0ebac7], a0, a1.this$));
        }

        StringBuffer StringBuffer::insert(jint a0, const ::java::lang::String & a1) const
        {
            return StringBuffer(env->callObjectMethod(this$, mids$[mid_insert_88877b15], a0, a1.this$));
        }

        StringBuffer StringBuffer::insert(jint a0, jint a1) const
        {
            return StringBuffer(env->callObjectMethod(this$, mids$[mid_insert_644727d5], a0, a1));
        }

        StringBuffer StringBuffer::insert(jint a0, jdouble a1) const
        {
            return StringBuffer(env->callObjectMethod(this$, mids$[mid_insert_b71b2a52], a0, a1));
        }

        StringBuffer StringBuffer::insert(jint a0, const ::java::lang::Object & a1) const
        {
            return StringBuffer(env->callObjectMethod(this$, mids$[mid_insert_2e164a03], a0, a1.this$));
        }

        StringBuffer StringBuffer::insert(jint a0, const ::java::lang::CharSequence & a1) const
        {
            return StringBuffer(env->callObjectMethod(this$, mids$[mid_insert_ed5f9c37], a0, a1.this$));
        }

        StringBuffer StringBuffer::insert(jint a0, jboolean a1) const
        {
            return StringBuffer(env->callObjectMethod(this$, mids$[mid_insert_3c3656bc], a0, a1));
        }

        StringBuffer StringBuffer::insert(jint a0, jchar a1) const
        {
            return StringBuffer(env->callObjectMethod(this$, mids$[mid_insert_3d91488b], a0, a1));
        }

        StringBuffer StringBuffer::insert(jint a0, jlong a1) const
        {
            return StringBuffer(env->callObjectMethod(this$, mids$[mid_insert_5e363fec], a0, a1));
        }

        StringBuffer StringBuffer::insert(jint a0, const ::java::lang::CharSequence & a1, jint a2, jint a3) const
        {
            return StringBuffer(env->callObjectMethod(this$, mids$[mid_insert_732cbadf], a0, a1.this$, a2, a3));
        }

        StringBuffer StringBuffer::insert(jint a0, const JArray< jchar > & a1, jint a2, jint a3) const
        {
            return StringBuffer(env->callObjectMethod(this$, mids$[mid_insert_6edd3397], a0, a1.this$, a2, a3));
        }

        jint StringBuffer::lastIndexOf(const ::java::lang::String & a0) const
        {
            return env->callIntMethod(this$, mids$[mid_lastIndexOf_5fdc3f57], a0.this$);
        }

        jint StringBuffer::lastIndexOf(const ::java::lang::String & a0, jint a1) const
        {
            return env->callIntMethod(this$, mids$[mid_lastIndexOf_6e53ccd9], a0.this$, a1);
        }

        jint StringBuffer::length() const
        {
            return env->callIntMethod(this$, mids$[mid_length_54c6a179]);
        }

        jint StringBuffer::offsetByCodePoints(jint a0, jint a1) const
        {
            return env->callIntMethod(this$, mids$[mid_offsetByCodePoints_d8d154b9], a0, a1);
        }

        StringBuffer StringBuffer::replace(jint a0, jint a1, const ::java::lang::String & a2) const
        {
            return StringBuffer(env->callObjectMethod(this$, mids$[mid_replace_95b69603], a0, a1, a2.this$));
        }

        StringBuffer StringBuffer::reverse() const
        {
            return StringBuffer(env->callObjectMethod(this$, mids$[mid_reverse_d54172a5]));
        }

        void StringBuffer::setCharAt(jint a0, jchar a1) const
        {
            env->callVoidMethod(this$, mids$[mid_setCharAt_83eec158], a0, a1);
        }

        void StringBuffer::setLength(jint a0) const
        {
            env->callVoidMethod(this$, mids$[mid_setLength_39c7bd3c], a0);
        }

        ::java::lang::CharSequence StringBuffer::subSequence(jint a0, jint a1) const
        {
            return ::java::lang::CharSequence(env->callObjectMethod(this$, mids$[mid_subSequence_f88dfd57], a0, a1));
        }

        ::java::lang::String StringBuffer::substring(jint a0) const
        {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_substring_141401b3], a0));
        }

        ::java::lang::String StringBuffer::substring(jint a0, jint a1) const
        {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_substring_f9118fe5], a0, a1));
        }

        ::java::lang::String StringBuffer::toString() const
        {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_toString_14c7b5c5]));
        }

        void StringBuffer::trimToSize() const
        {
            env->callVoidMethod(this$, mids$[mid_trimToSize_54c6a166]);
        }
    }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
    namespace lang {
        static PyObject *t_StringBuffer_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_StringBuffer_instance_(PyTypeObject *type, PyObject *arg);
        static int t_StringBuffer_init_(t_StringBuffer *self, PyObject *args, PyObject *kwds);
        static PyObject *t_StringBuffer_append(t_StringBuffer *self, PyObject *args);
        static PyObject *t_StringBuffer_appendCodePoint(t_StringBuffer *self, PyObject *args);
        static PyObject *t_StringBuffer_capacity(t_StringBuffer *self, PyObject *args);
        static PyObject *t_StringBuffer_charAt(t_StringBuffer *self, PyObject *args);
        static PyObject *t_StringBuffer_codePointAt(t_StringBuffer *self, PyObject *args);
        static PyObject *t_StringBuffer_codePointBefore(t_StringBuffer *self, PyObject *args);
        static PyObject *t_StringBuffer_codePointCount(t_StringBuffer *self, PyObject *args);
        static PyObject *t_StringBuffer_delete(t_StringBuffer *self, PyObject *args);
        static PyObject *t_StringBuffer_deleteCharAt(t_StringBuffer *self, PyObject *args);
        static PyObject *t_StringBuffer_ensureCapacity(t_StringBuffer *self, PyObject *args);
        static PyObject *t_StringBuffer_getChars(t_StringBuffer *self, PyObject *args);
        static PyObject *t_StringBuffer_indexOf(t_StringBuffer *self, PyObject *args);
        static PyObject *t_StringBuffer_insert(t_StringBuffer *self, PyObject *args);
        static PyObject *t_StringBuffer_lastIndexOf(t_StringBuffer *self, PyObject *args);
        static PyObject *t_StringBuffer_length(t_StringBuffer *self, PyObject *args);
        static PyObject *t_StringBuffer_offsetByCodePoints(t_StringBuffer *self, PyObject *args);
        static PyObject *t_StringBuffer_replace(t_StringBuffer *self, PyObject *args);
        static PyObject *t_StringBuffer_reverse(t_StringBuffer *self, PyObject *args);
        static PyObject *t_StringBuffer_setCharAt(t_StringBuffer *self, PyObject *args);
        static PyObject *t_StringBuffer_setLength(t_StringBuffer *self, PyObject *args);
        static PyObject *t_StringBuffer_subSequence(t_StringBuffer *self, PyObject *args);
        static PyObject *t_StringBuffer_substring(t_StringBuffer *self, PyObject *args);
        static PyObject *t_StringBuffer_toString(t_StringBuffer *self, PyObject *args);
        static PyObject *t_StringBuffer_trimToSize(t_StringBuffer *self, PyObject *args);

        static PyMethodDef t_StringBuffer__methods_[] = {
            DECLARE_METHOD(t_StringBuffer, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_StringBuffer, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_StringBuffer, append, METH_VARARGS),
            DECLARE_METHOD(t_StringBuffer, appendCodePoint, METH_VARARGS),
            DECLARE_METHOD(t_StringBuffer, capacity, METH_VARARGS),
            DECLARE_METHOD(t_StringBuffer, charAt, METH_VARARGS),
            DECLARE_METHOD(t_StringBuffer, codePointAt, METH_VARARGS),
            DECLARE_METHOD(t_StringBuffer, codePointBefore, METH_VARARGS),
            DECLARE_METHOD(t_StringBuffer, codePointCount, METH_VARARGS),
            DECLARE_METHOD(t_StringBuffer, delete, METH_VARARGS),
            DECLARE_METHOD(t_StringBuffer, deleteCharAt, METH_VARARGS),
            DECLARE_METHOD(t_StringBuffer, ensureCapacity, METH_VARARGS),
            DECLARE_METHOD(t_StringBuffer, getChars, METH_VARARGS),
            DECLARE_METHOD(t_StringBuffer, indexOf, METH_VARARGS),
            DECLARE_METHOD(t_StringBuffer, insert, METH_VARARGS),
            DECLARE_METHOD(t_StringBuffer, lastIndexOf, METH_VARARGS),
            DECLARE_METHOD(t_StringBuffer, length, METH_VARARGS),
            DECLARE_METHOD(t_StringBuffer, offsetByCodePoints, METH_VARARGS),
            DECLARE_METHOD(t_StringBuffer, replace, METH_VARARGS),
            DECLARE_METHOD(t_StringBuffer, reverse, METH_VARARGS),
            DECLARE_METHOD(t_StringBuffer, setCharAt, METH_VARARGS),
            DECLARE_METHOD(t_StringBuffer, setLength, METH_VARARGS),
            DECLARE_METHOD(t_StringBuffer, subSequence, METH_VARARGS),
            DECLARE_METHOD(t_StringBuffer, substring, METH_VARARGS),
            DECLARE_METHOD(t_StringBuffer, toString, METH_VARARGS),
            DECLARE_METHOD(t_StringBuffer, trimToSize, METH_VARARGS),
            { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(StringBuffer, t_StringBuffer, ::java::lang::AbstractStringBuilder, StringBuffer, t_StringBuffer_init_, 0, 0, 0, 0, 0);

        void t_StringBuffer::install(PyObject *module)
        {
            installType(&PY_TYPE(StringBuffer), module, "StringBuffer", 0);
        }

        void t_StringBuffer::initialize(PyObject *module)
        {
            PyDict_SetItemString(PY_TYPE(StringBuffer).tp_dict, "class_", make_descriptor(StringBuffer::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(StringBuffer).tp_dict, "wrapfn_", make_descriptor(t_StringBuffer::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(StringBuffer).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_StringBuffer_cast_(PyTypeObject *type, PyObject *arg)
        {
            if (!(arg = castCheck(arg, StringBuffer::initializeClass, 1)))
                return NULL;
            return t_StringBuffer::wrap_Object(StringBuffer(((t_StringBuffer *) arg)->object.this$));
        }
        static PyObject *t_StringBuffer_instance_(PyTypeObject *type, PyObject *arg)
        {
            if (!castCheck(arg, StringBuffer::initializeClass, 0))
                Py_RETURN_FALSE;
            Py_RETURN_TRUE;
        }

        static int t_StringBuffer_init_(t_StringBuffer *self, PyObject *args, PyObject *kwds)
        {
            switch (PyTuple_GET_SIZE(args)) {
              case 0:
                {
                    StringBuffer object((jobject) NULL);

                    INT_CALL(object = StringBuffer());
                    self->object = object;
                    break;
                }
                goto err;
              case 1:
                {
                    jint a0;
                    StringBuffer object((jobject) NULL);

                    if (!parseArgs(args, "I", &a0))
                    {
                        INT_CALL(object = StringBuffer(a0));
                        self->object = object;
                        break;
                    }
                }
                {
                    ::java::lang::String a0((jobject) NULL);
                    StringBuffer object((jobject) NULL);

                    if (!parseArgs(args, "s", &a0))
                    {
                        INT_CALL(object = StringBuffer(a0));
                        self->object = object;
                        break;
                    }
                }
                {
                    ::java::lang::CharSequence a0((jobject) NULL);
                    StringBuffer object((jobject) NULL);

                    if (!parseArgs(args, "O", &::java::lang::PY_TYPE(CharSequence), &a0))
                    {
                        INT_CALL(object = StringBuffer(a0));
                        self->object = object;
                        break;
                    }
                }
              default:
              err:
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
            }

            return 0;
        }

        static PyObject *t_StringBuffer_append(t_StringBuffer *self, PyObject *args)
        {
            switch (PyTuple_GET_SIZE(args)) {
              case 1:
                {
                    JArray< jchar > a0((jobject) NULL);
                    StringBuffer result((jobject) NULL);

                    if (!parseArgs(args, "[C", &a0))
                    {
                        OBJ_CALL(result = self->object.append(a0));
                        return t_StringBuffer::wrap_Object(result);
                    }
                }
                {
                    jfloat a0;
                    StringBuffer result((jobject) NULL);

                    if (!parseArgs(args, "F", &a0))
                    {
                        OBJ_CALL(result = self->object.append(a0));
                        return t_StringBuffer::wrap_Object(result);
                    }
                }
                {
                    jdouble a0;
                    StringBuffer result((jobject) NULL);

                    if (!parseArgs(args, "D", &a0))
                    {
                        OBJ_CALL(result = self->object.append(a0));
                        return t_StringBuffer::wrap_Object(result);
                    }
                }
                {
                    ::java::lang::Object a0((jobject) NULL);
                    StringBuffer result((jobject) NULL);

                    if (!parseArgs(args, "o", &a0))
                    {
                        OBJ_CALL(result = self->object.append(a0));
                        return t_StringBuffer::wrap_Object(result);
                    }
                }
                {
                    jlong a0;
                    StringBuffer result((jobject) NULL);

                    if (!parseArgs(args, "J", &a0))
                    {
                        OBJ_CALL(result = self->object.append(a0));
                        return t_StringBuffer::wrap_Object(result);
                    }
                }
                {
                    jboolean a0;
                    StringBuffer result((jobject) NULL);

                    if (!parseArgs(args, "Z", &a0))
                    {
                        OBJ_CALL(result = self->object.append(a0));
                        return t_StringBuffer::wrap_Object(result);
                    }
                }
                {
                    jchar a0;
                    StringBuffer result((jobject) NULL);

                    if (!parseArgs(args, "C", &a0))
                    {
                        OBJ_CALL(result = self->object.append(a0));
                        return t_StringBuffer::wrap_Object(result);
                    }
                }
                {
                    ::java::lang::CharSequence a0((jobject) NULL);
                    StringBuffer result((jobject) NULL);

                    if (!parseArgs(args, "O", &::java::lang::PY_TYPE(CharSequence), &a0))
                    {
                        OBJ_CALL(result = self->object.append(a0));
                        return t_StringBuffer::wrap_Object(result);
                    }
                }
                {
                    ::java::lang::String a0((jobject) NULL);
                    StringBuffer result((jobject) NULL);

                    if (!parseArgs(args, "s", &a0))
                    {
                        OBJ_CALL(result = self->object.append(a0));
                        return t_StringBuffer::wrap_Object(result);
                    }
                }
                {
                    jint a0;
                    StringBuffer result((jobject) NULL);

                    if (!parseArgs(args, "I", &a0))
                    {
                        OBJ_CALL(result = self->object.append(a0));
                        return t_StringBuffer::wrap_Object(result);
                    }
                }
                {
                    StringBuffer a0((jobject) NULL);
                    StringBuffer result((jobject) NULL);

                    if (!parseArgs(args, "k", StringBuffer::initializeClass, &a0))
                    {
                        OBJ_CALL(result = self->object.append(a0));
                        return t_StringBuffer::wrap_Object(result);
                    }
                }
                break;
              case 3:
                {
                    JArray< jchar > a0((jobject) NULL);
                    jint a1;
                    jint a2;
                    StringBuffer result((jobject) NULL);

                    if (!parseArgs(args, "[CII", &a0, &a1, &a2))
                    {
                        OBJ_CALL(result = self->object.append(a0, a1, a2));
                        return t_StringBuffer::wrap_Object(result);
                    }
                }
                {
                    ::java::lang::CharSequence a0((jobject) NULL);
                    jint a1;
                    jint a2;
                    StringBuffer result((jobject) NULL);

                    if (!parseArgs(args, "OII", &::java::lang::PY_TYPE(CharSequence), &a0, &a1, &a2))
                    {
                        OBJ_CALL(result = self->object.append(a0, a1, a2));
                        return t_StringBuffer::wrap_Object(result);
                    }
                }
            }

            return callSuper(&PY_TYPE(StringBuffer), (PyObject *) self, "append", args, 2);
        }

        static PyObject *t_StringBuffer_appendCodePoint(t_StringBuffer *self, PyObject *args)
        {
            jint a0;
            StringBuffer result((jobject) NULL);

            if (!parseArgs(args, "I", &a0))
            {
                OBJ_CALL(result = self->object.appendCodePoint(a0));
                return t_StringBuffer::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(StringBuffer), (PyObject *) self, "appendCodePoint", args, 2);
        }

        static PyObject *t_StringBuffer_capacity(t_StringBuffer *self, PyObject *args)
        {
            jint result;

            if (!parseArgs(args, ""))
            {
                OBJ_CALL(result = self->object.capacity());
                return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(StringBuffer), (PyObject *) self, "capacity", args, 2);
        }

        static PyObject *t_StringBuffer_charAt(t_StringBuffer *self, PyObject *args)
        {
            jint a0;
            jchar result;

            if (!parseArgs(args, "I", &a0))
            {
                OBJ_CALL(result = self->object.charAt(a0));
                return PyUnicode_FromUnicode((Py_UNICODE *) &result, 1);
            }

            return callSuper(&PY_TYPE(StringBuffer), (PyObject *) self, "charAt", args, 2);
        }

        static PyObject *t_StringBuffer_codePointAt(t_StringBuffer *self, PyObject *args)
        {
            jint a0;
            jint result;

            if (!parseArgs(args, "I", &a0))
            {
                OBJ_CALL(result = self->object.codePointAt(a0));
                return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(StringBuffer), (PyObject *) self, "codePointAt", args, 2);
        }

        static PyObject *t_StringBuffer_codePointBefore(t_StringBuffer *self, PyObject *args)
        {
            jint a0;
            jint result;

            if (!parseArgs(args, "I", &a0))
            {
                OBJ_CALL(result = self->object.codePointBefore(a0));
                return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(StringBuffer), (PyObject *) self, "codePointBefore", args, 2);
        }

        static PyObject *t_StringBuffer_codePointCount(t_StringBuffer *self, PyObject *args)
        {
            jint a0;
            jint a1;
            jint result;

            if (!parseArgs(args, "II", &a0, &a1))
            {
                OBJ_CALL(result = self->object.codePointCount(a0, a1));
                return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(StringBuffer), (PyObject *) self, "codePointCount", args, 2);
        }

        static PyObject *t_StringBuffer_delete(t_StringBuffer *self, PyObject *args)
        {
            jint a0;
            jint a1;
            StringBuffer result((jobject) NULL);

            if (!parseArgs(args, "II", &a0, &a1))
            {
                OBJ_CALL(result = self->object.delete$(a0, a1));
                return t_StringBuffer::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(StringBuffer), (PyObject *) self, "delete", args, 2);
        }

        static PyObject *t_StringBuffer_deleteCharAt(t_StringBuffer *self, PyObject *args)
        {
            jint a0;
            StringBuffer result((jobject) NULL);

            if (!parseArgs(args, "I", &a0))
            {
                OBJ_CALL(result = self->object.deleteCharAt(a0));
                return t_StringBuffer::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(StringBuffer), (PyObject *) self, "deleteCharAt", args, 2);
        }

        static PyObject *t_StringBuffer_ensureCapacity(t_StringBuffer *self, PyObject *args)
        {
            jint a0;

            if (!parseArgs(args, "I", &a0))
            {
                OBJ_CALL(self->object.ensureCapacity(a0));
                Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(StringBuffer), (PyObject *) self, "ensureCapacity", args, 2);
        }

        static PyObject *t_StringBuffer_getChars(t_StringBuffer *self, PyObject *args)
        {
            jint a0;
            jint a1;
            JArray< jchar > a2((jobject) NULL);
            jint a3;

            if (!parseArgs(args, "II[CI", &a0, &a1, &a2, &a3))
            {
                OBJ_CALL(self->object.getChars(a0, a1, a2, a3));
                Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(StringBuffer), (PyObject *) self, "getChars", args, 2);
        }

        static PyObject *t_StringBuffer_indexOf(t_StringBuffer *self, PyObject *args)
        {
            switch (PyTuple_GET_SIZE(args)) {
              case 1:
                {
                    ::java::lang::String a0((jobject) NULL);
                    jint result;

                    if (!parseArgs(args, "s", &a0))
                    {
                        OBJ_CALL(result = self->object.indexOf(a0));
                        return PyInt_FromLong((long) result);
                    }
                }
                break;
              case 2:
                {
                    ::java::lang::String a0((jobject) NULL);
                    jint a1;
                    jint result;

                    if (!parseArgs(args, "sI", &a0, &a1))
                    {
                        OBJ_CALL(result = self->object.indexOf(a0, a1));
                        return PyInt_FromLong((long) result);
                    }
                }
            }

            return callSuper(&PY_TYPE(StringBuffer), (PyObject *) self, "indexOf", args, 2);
        }

        static PyObject *t_StringBuffer_insert(t_StringBuffer *self, PyObject *args)
        {
            switch (PyTuple_GET_SIZE(args)) {
              case 2:
                {
                    jint a0;
                    jfloat a1;
                    StringBuffer result((jobject) NULL);

                    if (!parseArgs(args, "IF", &a0, &a1))
                    {
                        OBJ_CALL(result = self->object.insert(a0, a1));
                        return t_StringBuffer::wrap_Object(result);
                    }
                }
                {
                    jint a0;
                    JArray< jchar > a1((jobject) NULL);
                    StringBuffer result((jobject) NULL);

                    if (!parseArgs(args, "I[C", &a0, &a1))
                    {
                        OBJ_CALL(result = self->object.insert(a0, a1));
                        return t_StringBuffer::wrap_Object(result);
                    }
                }
                {
                    jint a0;
                    ::java::lang::String a1((jobject) NULL);
                    StringBuffer result((jobject) NULL);

                    if (!parseArgs(args, "Is", &a0, &a1))
                    {
                        OBJ_CALL(result = self->object.insert(a0, a1));
                        return t_StringBuffer::wrap_Object(result);
                    }
                }
                {
                    jint a0;
                    jint a1;
                    StringBuffer result((jobject) NULL);

                    if (!parseArgs(args, "II", &a0, &a1))
                    {
                        OBJ_CALL(result = self->object.insert(a0, a1));
                        return t_StringBuffer::wrap_Object(result);
                    }
                }
                {
                    jint a0;
                    jdouble a1;
                    StringBuffer result((jobject) NULL);

                    if (!parseArgs(args, "ID", &a0, &a1))
                    {
                        OBJ_CALL(result = self->object.insert(a0, a1));
                        return t_StringBuffer::wrap_Object(result);
                    }
                }
                {
                    jint a0;
                    ::java::lang::Object a1((jobject) NULL);
                    StringBuffer result((jobject) NULL);

                    if (!parseArgs(args, "Io", &a0, &a1))
                    {
                        OBJ_CALL(result = self->object.insert(a0, a1));
                        return t_StringBuffer::wrap_Object(result);
                    }
                }
                {
                    jint a0;
                    ::java::lang::CharSequence a1((jobject) NULL);
                    StringBuffer result((jobject) NULL);

                    if (!parseArgs(args, "IO", &::java::lang::PY_TYPE(CharSequence), &a0, &a1))
                    {
                        OBJ_CALL(result = self->object.insert(a0, a1));
                        return t_StringBuffer::wrap_Object(result);
                    }
                }
                {
                    jint a0;
                    jboolean a1;
                    StringBuffer result((jobject) NULL);

                    if (!parseArgs(args, "IZ", &a0, &a1))
                    {
                        OBJ_CALL(result = self->object.insert(a0, a1));
                        return t_StringBuffer::wrap_Object(result);
                    }
                }
                {
                    jint a0;
                    jchar a1;
                    StringBuffer result((jobject) NULL);

                    if (!parseArgs(args, "IC", &a0, &a1))
                    {
                        OBJ_CALL(result = self->object.insert(a0, a1));
                        return t_StringBuffer::wrap_Object(result);
                    }
                }
                {
                    jint a0;
                    jlong a1;
                    StringBuffer result((jobject) NULL);

                    if (!parseArgs(args, "IJ", &a0, &a1))
                    {
                        OBJ_CALL(result = self->object.insert(a0, a1));
                        return t_StringBuffer::wrap_Object(result);
                    }
                }
                break;
              case 4:
                {
                    jint a0;
                    ::java::lang::CharSequence a1((jobject) NULL);
                    jint a2;
                    jint a3;
                    StringBuffer result((jobject) NULL);

                    if (!parseArgs(args, "IOII", &::java::lang::PY_TYPE(CharSequence), &a0, &a1, &a2, &a3))
                    {
                        OBJ_CALL(result = self->object.insert(a0, a1, a2, a3));
                        return t_StringBuffer::wrap_Object(result);
                    }
                }
                {
                    jint a0;
                    JArray< jchar > a1((jobject) NULL);
                    jint a2;
                    jint a3;
                    StringBuffer result((jobject) NULL);

                    if (!parseArgs(args, "I[CII", &a0, &a1, &a2, &a3))
                    {
                        OBJ_CALL(result = self->object.insert(a0, a1, a2, a3));
                        return t_StringBuffer::wrap_Object(result);
                    }
                }
            }

            return callSuper(&PY_TYPE(StringBuffer), (PyObject *) self, "insert", args, 2);
        }

        static PyObject *t_StringBuffer_lastIndexOf(t_StringBuffer *self, PyObject *args)
        {
            switch (PyTuple_GET_SIZE(args)) {
              case 1:
                {
                    ::java::lang::String a0((jobject) NULL);
                    jint result;

                    if (!parseArgs(args, "s", &a0))
                    {
                        OBJ_CALL(result = self->object.lastIndexOf(a0));
                        return PyInt_FromLong((long) result);
                    }
                }
                break;
              case 2:
                {
                    ::java::lang::String a0((jobject) NULL);
                    jint a1;
                    jint result;

                    if (!parseArgs(args, "sI", &a0, &a1))
                    {
                        OBJ_CALL(result = self->object.lastIndexOf(a0, a1));
                        return PyInt_FromLong((long) result);
                    }
                }
            }

            return callSuper(&PY_TYPE(StringBuffer), (PyObject *) self, "lastIndexOf", args, 2);
        }

        static PyObject *t_StringBuffer_length(t_StringBuffer *self, PyObject *args)
        {
            jint result;

            if (!parseArgs(args, ""))
            {
                OBJ_CALL(result = self->object.length());
                return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(StringBuffer), (PyObject *) self, "length", args, 2);
        }

        static PyObject *t_StringBuffer_offsetByCodePoints(t_StringBuffer *self, PyObject *args)
        {
            jint a0;
            jint a1;
            jint result;

            if (!parseArgs(args, "II", &a0, &a1))
            {
                OBJ_CALL(result = self->object.offsetByCodePoints(a0, a1));
                return PyInt_FromLong((long) result);
            }

            return callSuper(&PY_TYPE(StringBuffer), (PyObject *) self, "offsetByCodePoints", args, 2);
        }

        static PyObject *t_StringBuffer_replace(t_StringBuffer *self, PyObject *args)
        {
            jint a0;
            jint a1;
            ::java::lang::String a2((jobject) NULL);
            StringBuffer result((jobject) NULL);

            if (!parseArgs(args, "IIs", &a0, &a1, &a2))
            {
                OBJ_CALL(result = self->object.replace(a0, a1, a2));
                return t_StringBuffer::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(StringBuffer), (PyObject *) self, "replace", args, 2);
        }

        static PyObject *t_StringBuffer_reverse(t_StringBuffer *self, PyObject *args)
        {
            StringBuffer result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
                OBJ_CALL(result = self->object.reverse());
                return t_StringBuffer::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(StringBuffer), (PyObject *) self, "reverse", args, 2);
        }

        static PyObject *t_StringBuffer_setCharAt(t_StringBuffer *self, PyObject *args)
        {
            jint a0;
            jchar a1;

            if (!parseArgs(args, "IC", &a0, &a1))
            {
                OBJ_CALL(self->object.setCharAt(a0, a1));
                Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(StringBuffer), (PyObject *) self, "setCharAt", args, 2);
        }

        static PyObject *t_StringBuffer_setLength(t_StringBuffer *self, PyObject *args)
        {
            jint a0;

            if (!parseArgs(args, "I", &a0))
            {
                OBJ_CALL(self->object.setLength(a0));
                Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(StringBuffer), (PyObject *) self, "setLength", args, 2);
        }

        static PyObject *t_StringBuffer_subSequence(t_StringBuffer *self, PyObject *args)
        {
            jint a0;
            jint a1;
            ::java::lang::CharSequence result((jobject) NULL);

            if (!parseArgs(args, "II", &a0, &a1))
            {
                OBJ_CALL(result = self->object.subSequence(a0, a1));
                return ::java::lang::t_CharSequence::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(StringBuffer), (PyObject *) self, "subSequence", args, 2);
        }

        static PyObject *t_StringBuffer_substring(t_StringBuffer *self, PyObject *args)
        {
            switch (PyTuple_GET_SIZE(args)) {
              case 1:
                {
                    jint a0;
                    ::java::lang::String result((jobject) NULL);

                    if (!parseArgs(args, "I", &a0))
                    {
                        OBJ_CALL(result = self->object.substring(a0));
                        return j2p(result);
                    }
                }
                break;
              case 2:
                {
                    jint a0;
                    jint a1;
                    ::java::lang::String result((jobject) NULL);

                    if (!parseArgs(args, "II", &a0, &a1))
                    {
                        OBJ_CALL(result = self->object.substring(a0, a1));
                        return j2p(result);
                    }
                }
            }

            return callSuper(&PY_TYPE(StringBuffer), (PyObject *) self, "substring", args, 2);
        }

        static PyObject *t_StringBuffer_toString(t_StringBuffer *self, PyObject *args)
        {
            ::java::lang::String result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
                OBJ_CALL(result = self->object.toString());
                return j2p(result);
            }

            return callSuper(&PY_TYPE(StringBuffer), (PyObject *) self, "toString", args, 2);
        }

        static PyObject *t_StringBuffer_trimToSize(t_StringBuffer *self, PyObject *args)
        {

            if (!parseArgs(args, ""))
            {
                OBJ_CALL(self->object.trimToSize());
                Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(StringBuffer), (PyObject *) self, "trimToSize", args, 2);
        }
    }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/util/MissingResourceException.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace java {
    namespace util {

        ::java::lang::Class *MissingResourceException::class$ = NULL;
        jmethodID *MissingResourceException::mids$ = NULL;

        jclass MissingResourceException::initializeClass()
        {
            if (!class$)
            {

                jclass cls = (jclass) env->findClass("java/util/MissingResourceException");

                mids$ = new jmethodID[max_mid];
                mids$[mid_init$_9c119564] = env->getMethodID(cls, "<init>", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V");
                mids$[mid_getClassName_14c7b5c5] = env->getMethodID(cls, "getClassName", "()Ljava/lang/String;");
                mids$[mid_getKey_14c7b5c5] = env->getMethodID(cls, "getKey", "()Ljava/lang/String;");

                class$ = (::java::lang::Class *) new JObject(cls);
            }
            return (jclass) class$->this$;
        }

        MissingResourceException::MissingResourceException(const ::java::lang::String & a0, const ::java::lang::String & a1, const ::java::lang::String & a2) : ::java::lang::RuntimeException(env->newObject(initializeClass, &mids$, mid_init$_9c119564, a0.this$, a1.this$, a2.this$)) {}

        ::java::lang::String MissingResourceException::getClassName() const
        {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getClassName_14c7b5c5]));
        }

        ::java::lang::String MissingResourceException::getKey() const
        {
            return ::java::lang::String(env->callObjectMethod(this$, mids$[mid_getKey_14c7b5c5]));
        }
    }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
    namespace util {
        static PyObject *t_MissingResourceException_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_MissingResourceException_instance_(PyTypeObject *type, PyObject *arg);
        static int t_MissingResourceException_init_(t_MissingResourceException *self, PyObject *args, PyObject *kwds);
        static PyObject *t_MissingResourceException_getClassName(t_MissingResourceException *self);
        static PyObject *t_MissingResourceException_getKey(t_MissingResourceException *self);
        static PyObject *t_MissingResourceException_get__className(t_MissingResourceException *self, void *data);
        static PyObject *t_MissingResourceException_get__key(t_MissingResourceException *self, void *data);
        static PyGetSetDef t_MissingResourceException__fields_[] = {
            DECLARE_GET_FIELD(t_MissingResourceException, className),
            DECLARE_GET_FIELD(t_MissingResourceException, key),
            { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_MissingResourceException__methods_[] = {
            DECLARE_METHOD(t_MissingResourceException, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_MissingResourceException, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_MissingResourceException, getClassName, METH_NOARGS),
            DECLARE_METHOD(t_MissingResourceException, getKey, METH_NOARGS),
            { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(MissingResourceException, t_MissingResourceException, ::java::lang::RuntimeException, MissingResourceException, t_MissingResourceException_init_, 0, 0, t_MissingResourceException__fields_, 0, 0);

        void t_MissingResourceException::install(PyObject *module)
        {
            installType(&PY_TYPE(MissingResourceException), module, "MissingResourceException", 0);
        }

        void t_MissingResourceException::initialize(PyObject *module)
        {
            PyDict_SetItemString(PY_TYPE(MissingResourceException).tp_dict, "class_", make_descriptor(MissingResourceException::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(MissingResourceException).tp_dict, "wrapfn_", make_descriptor(t_MissingResourceException::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(MissingResourceException).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_MissingResourceException_cast_(PyTypeObject *type, PyObject *arg)
        {
            if (!(arg = castCheck(arg, MissingResourceException::initializeClass, 1)))
                return NULL;
            return t_MissingResourceException::wrap_Object(MissingResourceException(((t_MissingResourceException *) arg)->object.this$));
        }
        static PyObject *t_MissingResourceException_instance_(PyTypeObject *type, PyObject *arg)
        {
            if (!castCheck(arg, MissingResourceException::initializeClass, 0))
                Py_RETURN_FALSE;
            Py_RETURN_TRUE;
        }

        static int t_MissingResourceException_init_(t_MissingResourceException *self, PyObject *args, PyObject *kwds)
        {
            ::java::lang::String a0((jobject) NULL);
            ::java::lang::String a1((jobject) NULL);
            ::java::lang::String a2((jobject) NULL);
            MissingResourceException object((jobject) NULL);

            if (!parseArgs(args, "sss", &a0, &a1, &a2))
            {
                INT_CALL(object = MissingResourceException(a0, a1, a2));
                self->object = object;
            }
            else
            {
                PyErr_SetArgsError((PyObject *) self, "__init__", args);
                return -1;
            }

            return 0;
        }

        static PyObject *t_MissingResourceException_getClassName(t_MissingResourceException *self)
        {
            ::java::lang::String result((jobject) NULL);
            OBJ_CALL(result = self->object.getClassName());
            return j2p(result);
        }

        static PyObject *t_MissingResourceException_getKey(t_MissingResourceException *self)
        {
            ::java::lang::String result((jobject) NULL);
            OBJ_CALL(result = self->object.getKey());
            return j2p(result);
        }

        static PyObject *t_MissingResourceException_get__className(t_MissingResourceException *self, void *data)
        {
            ::java::lang::String value((jobject) NULL);
            OBJ_CALL(value = self->object.getClassName());
            return j2p(value);
        }

        static PyObject *t_MissingResourceException_get__key(t_MissingResourceException *self, void *data)
        {
            ::java::lang::String value((jobject) NULL);
            OBJ_CALL(value = self->object.getKey());
            return j2p(value);
        }
    }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/lang/Iterable.h"
#include "java/util/Iterator.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace java {
    namespace lang {

        ::java::lang::Class *Iterable::class$ = NULL;
        jmethodID *Iterable::mids$ = NULL;

        jclass Iterable::initializeClass()
        {
            if (!class$)
            {

                jclass cls = (jclass) env->findClass("java/lang/Iterable");

                mids$ = new jmethodID[max_mid];
                mids$[mid_iterator_40858c90] = env->getMethodID(cls, "iterator", "()Ljava/util/Iterator;");

                class$ = (::java::lang::Class *) new JObject(cls);
            }
            return (jclass) class$->this$;
        }

        ::java::util::Iterator Iterable::iterator() const
        {
            return ::java::util::Iterator(env->callObjectMethod(this$, mids$[mid_iterator_40858c90]));
        }
    }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
    namespace lang {
        static PyObject *t_Iterable_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Iterable_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Iterable_of_(t_Iterable *self, PyObject *args);
        static PyObject *t_Iterable_iterator(t_Iterable *self);
        static PyObject *t_Iterable_get__parameters_(t_Iterable *self, void *data);
        static PyGetSetDef t_Iterable__fields_[] = {
            DECLARE_GET_FIELD(t_Iterable, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_Iterable__methods_[] = {
            DECLARE_METHOD(t_Iterable, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Iterable, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Iterable, of_, METH_VARARGS),
            DECLARE_METHOD(t_Iterable, iterator, METH_NOARGS),
            { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(Iterable, t_Iterable, ::java::lang::Object, Iterable, abstract_init, ((PyObject *(*)(t_Iterable *)) get_generic_iterator< t_Iterable >), 0, t_Iterable__fields_, 0, 0);
        PyObject *t_Iterable::wrap_Object(const Iterable& object, PyTypeObject *T)
        {
            PyObject *obj = t_Iterable::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
                t_Iterable *self = (t_Iterable *) obj;
                self->parameters[0] = T;
            }
            return obj;
        }

        PyObject *t_Iterable::wrap_jobject(const jobject& object, PyTypeObject *T)
        {
            PyObject *obj = t_Iterable::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
                t_Iterable *self = (t_Iterable *) obj;
                self->parameters[0] = T;
            }
            return obj;
        }

        void t_Iterable::install(PyObject *module)
        {
            installType(&PY_TYPE(Iterable), module, "Iterable", 0);
        }

        void t_Iterable::initialize(PyObject *module)
        {
            PyDict_SetItemString(PY_TYPE(Iterable).tp_dict, "class_", make_descriptor(Iterable::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Iterable).tp_dict, "wrapfn_", make_descriptor(t_Iterable::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Iterable).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_Iterable_cast_(PyTypeObject *type, PyObject *arg)
        {
            if (!(arg = castCheck(arg, Iterable::initializeClass, 1)))
                return NULL;
            return t_Iterable::wrap_Object(Iterable(((t_Iterable *) arg)->object.this$));
        }
        static PyObject *t_Iterable_instance_(PyTypeObject *type, PyObject *arg)
        {
            if (!castCheck(arg, Iterable::initializeClass, 0))
                Py_RETURN_FALSE;
            Py_RETURN_TRUE;
        }

        static PyObject *t_Iterable_of_(t_Iterable *self, PyObject *args)
        {
            if (!parseArg(args, "T", 1, &(self->parameters)))
                Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static PyObject *t_Iterable_iterator(t_Iterable *self)
        {
            ::java::util::Iterator result((jobject) NULL);
            OBJ_CALL(result = self->object.iterator());
            return ::java::util::t_Iterator::wrap_Object(result, self->parameters[0]);
        }
        static PyObject *t_Iterable_get__parameters_(t_Iterable *self, void *data)
        {
            return typeParameters(self->parameters, sizeof(self->parameters));
        }
    }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/util/RandomAccess.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace java {
    namespace util {

        ::java::lang::Class *RandomAccess::class$ = NULL;
        jmethodID *RandomAccess::mids$ = NULL;

        jclass RandomAccess::initializeClass()
        {
            if (!class$)
            {

                jclass cls = (jclass) env->findClass("java/util/RandomAccess");

                class$ = (::java::lang::Class *) new JObject(cls);
            }
            return (jclass) class$->this$;
        }
    }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
    namespace util {
        static PyObject *t_RandomAccess_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_RandomAccess_instance_(PyTypeObject *type, PyObject *arg);

        static PyMethodDef t_RandomAccess__methods_[] = {
            DECLARE_METHOD(t_RandomAccess, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_RandomAccess, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(RandomAccess, t_RandomAccess, ::java::lang::Object, RandomAccess, abstract_init, 0, 0, 0, 0, 0);

        void t_RandomAccess::install(PyObject *module)
        {
            installType(&PY_TYPE(RandomAccess), module, "RandomAccess", 0);
        }

        void t_RandomAccess::initialize(PyObject *module)
        {
            PyDict_SetItemString(PY_TYPE(RandomAccess).tp_dict, "class_", make_descriptor(RandomAccess::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(RandomAccess).tp_dict, "wrapfn_", make_descriptor(t_RandomAccess::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(RandomAccess).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_RandomAccess_cast_(PyTypeObject *type, PyObject *arg)
        {
            if (!(arg = castCheck(arg, RandomAccess::initializeClass, 1)))
                return NULL;
            return t_RandomAccess::wrap_Object(RandomAccess(((t_RandomAccess *) arg)->object.this$));
        }
        static PyObject *t_RandomAccess_instance_(PyTypeObject *type, PyObject *arg)
        {
            if (!castCheck(arg, RandomAccess::initializeClass, 0))
                Py_RETURN_FALSE;
            Py_RETURN_TRUE;
        }
    }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/util/ListIterator.h"
#include "java/lang/Class.h"
#include "java/lang/Object.h"
#include "JArray.h"

namespace java {
    namespace util {

        ::java::lang::Class *ListIterator::class$ = NULL;
        jmethodID *ListIterator::mids$ = NULL;

        jclass ListIterator::initializeClass()
        {
            if (!class$)
            {

                jclass cls = (jclass) env->findClass("java/util/ListIterator");

                mids$ = new jmethodID[max_mid];
                mids$[mid_add_290588ee] = env->getMethodID(cls, "add", "(Ljava/lang/Object;)V");
                mids$[mid_hasNext_54c6a16a] = env->getMethodID(cls, "hasNext", "()Z");
                mids$[mid_hasPrevious_54c6a16a] = env->getMethodID(cls, "hasPrevious", "()Z");
                mids$[mid_next_846352c3] = env->getMethodID(cls, "next", "()Ljava/lang/Object;");
                mids$[mid_nextIndex_54c6a179] = env->getMethodID(cls, "nextIndex", "()I");
                mids$[mid_previous_846352c3] = env->getMethodID(cls, "previous", "()Ljava/lang/Object;");
                mids$[mid_previousIndex_54c6a179] = env->getMethodID(cls, "previousIndex", "()I");
                mids$[mid_remove_54c6a166] = env->getMethodID(cls, "remove", "()V");
                mids$[mid_set_290588ee] = env->getMethodID(cls, "set", "(Ljava/lang/Object;)V");

                class$ = (::java::lang::Class *) new JObject(cls);
            }
            return (jclass) class$->this$;
        }

        void ListIterator::add(const ::java::lang::Object & a0) const
        {
            env->callVoidMethod(this$, mids$[mid_add_290588ee], a0.this$);
        }

        jboolean ListIterator::hasNext() const
        {
            return env->callBooleanMethod(this$, mids$[mid_hasNext_54c6a16a]);
        }

        jboolean ListIterator::hasPrevious() const
        {
            return env->callBooleanMethod(this$, mids$[mid_hasPrevious_54c6a16a]);
        }

        ::java::lang::Object ListIterator::next() const
        {
            return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_next_846352c3]));
        }

        jint ListIterator::nextIndex() const
        {
            return env->callIntMethod(this$, mids$[mid_nextIndex_54c6a179]);
        }

        ::java::lang::Object ListIterator::previous() const
        {
            return ::java::lang::Object(env->callObjectMethod(this$, mids$[mid_previous_846352c3]));
        }

        jint ListIterator::previousIndex() const
        {
            return env->callIntMethod(this$, mids$[mid_previousIndex_54c6a179]);
        }

        void ListIterator::remove() const
        {
            env->callVoidMethod(this$, mids$[mid_remove_54c6a166]);
        }

        void ListIterator::set(const ::java::lang::Object & a0) const
        {
            env->callVoidMethod(this$, mids$[mid_set_290588ee], a0.this$);
        }
    }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
    namespace util {
        static PyObject *t_ListIterator_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_ListIterator_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_ListIterator_of_(t_ListIterator *self, PyObject *args);
        static PyObject *t_ListIterator_add(t_ListIterator *self, PyObject *arg);
        static PyObject *t_ListIterator_hasNext(t_ListIterator *self, PyObject *args);
        static PyObject *t_ListIterator_hasPrevious(t_ListIterator *self);
        static PyObject *t_ListIterator_next(t_ListIterator *self, PyObject *args);
        static PyObject *t_ListIterator_nextIndex(t_ListIterator *self);
        static PyObject *t_ListIterator_previous(t_ListIterator *self);
        static PyObject *t_ListIterator_previousIndex(t_ListIterator *self);
        static PyObject *t_ListIterator_remove(t_ListIterator *self, PyObject *args);
        static PyObject *t_ListIterator_set(t_ListIterator *self, PyObject *arg);
        static PyObject *t_ListIterator_get__parameters_(t_ListIterator *self, void *data);
        static PyGetSetDef t_ListIterator__fields_[] = {
            DECLARE_GET_FIELD(t_ListIterator, parameters_),
            { NULL, NULL, NULL, NULL, NULL }
        };

        static PyMethodDef t_ListIterator__methods_[] = {
            DECLARE_METHOD(t_ListIterator, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ListIterator, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_ListIterator, of_, METH_VARARGS),
            DECLARE_METHOD(t_ListIterator, add, METH_O),
            DECLARE_METHOD(t_ListIterator, hasNext, METH_VARARGS),
            DECLARE_METHOD(t_ListIterator, hasPrevious, METH_NOARGS),
            DECLARE_METHOD(t_ListIterator, next, METH_VARARGS),
            DECLARE_METHOD(t_ListIterator, nextIndex, METH_NOARGS),
            DECLARE_METHOD(t_ListIterator, previous, METH_NOARGS),
            DECLARE_METHOD(t_ListIterator, previousIndex, METH_NOARGS),
            DECLARE_METHOD(t_ListIterator, remove, METH_VARARGS),
            DECLARE_METHOD(t_ListIterator, set, METH_O),
            { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(ListIterator, t_ListIterator, ::java::util::Iterator, ListIterator, abstract_init, PyObject_SelfIter, ((PyObject *(*)(::java::util::t_Iterator *)) get_generic_iterator_next< ::java::util::t_Iterator,::java::lang::t_Object >), t_ListIterator__fields_, 0, 0);
        PyObject *t_ListIterator::wrap_Object(const ListIterator& object, PyTypeObject *E)
        {
            PyObject *obj = t_ListIterator::wrap_Object(object);
            if (obj != NULL && obj != Py_None)
            {
                t_ListIterator *self = (t_ListIterator *) obj;
                self->parameters[0] = E;
            }
            return obj;
        }

        PyObject *t_ListIterator::wrap_jobject(const jobject& object, PyTypeObject *E)
        {
            PyObject *obj = t_ListIterator::wrap_jobject(object);
            if (obj != NULL && obj != Py_None)
            {
                t_ListIterator *self = (t_ListIterator *) obj;
                self->parameters[0] = E;
            }
            return obj;
        }

        void t_ListIterator::install(PyObject *module)
        {
            installType(&PY_TYPE(ListIterator), module, "ListIterator", 0);
        }

        void t_ListIterator::initialize(PyObject *module)
        {
            PyDict_SetItemString(PY_TYPE(ListIterator).tp_dict, "class_", make_descriptor(ListIterator::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(ListIterator).tp_dict, "wrapfn_", make_descriptor(t_ListIterator::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(ListIterator).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_ListIterator_cast_(PyTypeObject *type, PyObject *arg)
        {
            if (!(arg = castCheck(arg, ListIterator::initializeClass, 1)))
                return NULL;
            return t_ListIterator::wrap_Object(ListIterator(((t_ListIterator *) arg)->object.this$));
        }
        static PyObject *t_ListIterator_instance_(PyTypeObject *type, PyObject *arg)
        {
            if (!castCheck(arg, ListIterator::initializeClass, 0))
                Py_RETURN_FALSE;
            Py_RETURN_TRUE;
        }

        static PyObject *t_ListIterator_of_(t_ListIterator *self, PyObject *args)
        {
            if (!parseArg(args, "T", 1, &(self->parameters)))
                Py_RETURN_SELF;
            return PyErr_SetArgsError((PyObject *) self, "of_", args);
        }

        static PyObject *t_ListIterator_add(t_ListIterator *self, PyObject *arg)
        {
            ::java::lang::Object a0((jobject) NULL);

            if (!parseArg(arg, "O", self->parameters[0], &a0))
            {
                OBJ_CALL(self->object.add(a0));
                Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "add", arg);
            return NULL;
        }

        static PyObject *t_ListIterator_hasNext(t_ListIterator *self, PyObject *args)
        {
            jboolean result;

            if (!parseArgs(args, ""))
            {
                OBJ_CALL(result = self->object.hasNext());
                Py_RETURN_BOOL(result);
            }

            return callSuper(&PY_TYPE(ListIterator), (PyObject *) self, "hasNext", args, 2);
        }

        static PyObject *t_ListIterator_hasPrevious(t_ListIterator *self)
        {
            jboolean result;
            OBJ_CALL(result = self->object.hasPrevious());
            Py_RETURN_BOOL(result);
        }

        static PyObject *t_ListIterator_next(t_ListIterator *self, PyObject *args)
        {
            ::java::lang::Object result((jobject) NULL);

            if (!parseArgs(args, ""))
            {
                OBJ_CALL(result = self->object.next());
                return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
            }

            return callSuper(&PY_TYPE(ListIterator), (PyObject *) self, "next", args, 2);
        }

        static PyObject *t_ListIterator_nextIndex(t_ListIterator *self)
        {
            jint result;
            OBJ_CALL(result = self->object.nextIndex());
            return PyInt_FromLong((long) result);
        }

        static PyObject *t_ListIterator_previous(t_ListIterator *self)
        {
            ::java::lang::Object result((jobject) NULL);
            OBJ_CALL(result = self->object.previous());
            return self->parameters[0] != NULL ? wrapType(self->parameters[0], result.this$) : ::java::lang::t_Object::wrap_Object(result);
        }

        static PyObject *t_ListIterator_previousIndex(t_ListIterator *self)
        {
            jint result;
            OBJ_CALL(result = self->object.previousIndex());
            return PyInt_FromLong((long) result);
        }

        static PyObject *t_ListIterator_remove(t_ListIterator *self, PyObject *args)
        {

            if (!parseArgs(args, ""))
            {
                OBJ_CALL(self->object.remove());
                Py_RETURN_NONE;
            }

            return callSuper(&PY_TYPE(ListIterator), (PyObject *) self, "remove", args, 2);
        }

        static PyObject *t_ListIterator_set(t_ListIterator *self, PyObject *arg)
        {
            ::java::lang::Object a0((jobject) NULL);

            if (!parseArg(arg, "O", self->parameters[0], &a0))
            {
                OBJ_CALL(self->object.set(a0));
                Py_RETURN_NONE;
            }

            PyErr_SetArgsError((PyObject *) self, "set", arg);
            return NULL;
        }
        static PyObject *t_ListIterator_get__parameters_(t_ListIterator *self, void *data)
        {
            return typeParameters(self->parameters, sizeof(self->parameters));
        }
    }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/io/FilenameFilter.h"
#include "java/io/File.h"
#include "java/lang/Class.h"
#include "java/lang/String.h"
#include "JArray.h"

namespace java {
    namespace io {

        ::java::lang::Class *FilenameFilter::class$ = NULL;
        jmethodID *FilenameFilter::mids$ = NULL;

        jclass FilenameFilter::initializeClass()
        {
            if (!class$)
            {

                jclass cls = (jclass) env->findClass("java/io/FilenameFilter");

                mids$ = new jmethodID[max_mid];
                mids$[mid_accept_b8789385] = env->getMethodID(cls, "accept", "(Ljava/io/File;Ljava/lang/String;)Z");

                class$ = (::java::lang::Class *) new JObject(cls);
            }
            return (jclass) class$->this$;
        }

        jboolean FilenameFilter::accept(const ::java::io::File & a0, const ::java::lang::String & a1) const
        {
            return env->callBooleanMethod(this$, mids$[mid_accept_b8789385], a0.this$, a1.this$);
        }
    }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
    namespace io {
        static PyObject *t_FilenameFilter_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FilenameFilter_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FilenameFilter_accept(t_FilenameFilter *self, PyObject *args);

        static PyMethodDef t_FilenameFilter__methods_[] = {
            DECLARE_METHOD(t_FilenameFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FilenameFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FilenameFilter, accept, METH_VARARGS),
            { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FilenameFilter, t_FilenameFilter, ::java::lang::Object, FilenameFilter, abstract_init, 0, 0, 0, 0, 0);

        void t_FilenameFilter::install(PyObject *module)
        {
            installType(&PY_TYPE(FilenameFilter), module, "FilenameFilter", 0);
        }

        void t_FilenameFilter::initialize(PyObject *module)
        {
            PyDict_SetItemString(PY_TYPE(FilenameFilter).tp_dict, "class_", make_descriptor(FilenameFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(FilenameFilter).tp_dict, "wrapfn_", make_descriptor(t_FilenameFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(FilenameFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FilenameFilter_cast_(PyTypeObject *type, PyObject *arg)
        {
            if (!(arg = castCheck(arg, FilenameFilter::initializeClass, 1)))
                return NULL;
            return t_FilenameFilter::wrap_Object(FilenameFilter(((t_FilenameFilter *) arg)->object.this$));
        }
        static PyObject *t_FilenameFilter_instance_(PyTypeObject *type, PyObject *arg)
        {
            if (!castCheck(arg, FilenameFilter::initializeClass, 0))
                Py_RETURN_FALSE;
            Py_RETURN_TRUE;
        }

        static PyObject *t_FilenameFilter_accept(t_FilenameFilter *self, PyObject *args)
        {
            ::java::io::File a0((jobject) NULL);
            ::java::lang::String a1((jobject) NULL);
            jboolean result;

            if (!parseArgs(args, "ks", ::java::io::File::initializeClass, &a0, &a1))
            {
                OBJ_CALL(result = self->object.accept(a0, a1));
                Py_RETURN_BOOL(result);
            }

            PyErr_SetArgsError((PyObject *) self, "accept", args);
            return NULL;
        }
    }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/lang/Readable.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace java {
    namespace lang {

        ::java::lang::Class *Readable::class$ = NULL;
        jmethodID *Readable::mids$ = NULL;

        jclass Readable::initializeClass()
        {
            if (!class$)
            {

                jclass cls = (jclass) env->findClass("java/lang/Readable");

                class$ = (::java::lang::Class *) new JObject(cls);
            }
            return (jclass) class$->this$;
        }
    }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
    namespace lang {
        static PyObject *t_Readable_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_Readable_instance_(PyTypeObject *type, PyObject *arg);

        static PyMethodDef t_Readable__methods_[] = {
            DECLARE_METHOD(t_Readable, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_Readable, instance_, METH_O | METH_CLASS),
            { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(Readable, t_Readable, ::java::lang::Object, Readable, abstract_init, 0, 0, 0, 0, 0);

        void t_Readable::install(PyObject *module)
        {
            installType(&PY_TYPE(Readable), module, "Readable", 0);
        }

        void t_Readable::initialize(PyObject *module)
        {
            PyDict_SetItemString(PY_TYPE(Readable).tp_dict, "class_", make_descriptor(Readable::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(Readable).tp_dict, "wrapfn_", make_descriptor(t_Readable::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(Readable).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_Readable_cast_(PyTypeObject *type, PyObject *arg)
        {
            if (!(arg = castCheck(arg, Readable::initializeClass, 1)))
                return NULL;
            return t_Readable::wrap_Object(Readable(((t_Readable *) arg)->object.this$));
        }
        static PyObject *t_Readable_instance_(PyTypeObject *type, PyObject *arg)
        {
            if (!castCheck(arg, Readable::initializeClass, 0))
                Py_RETURN_FALSE;
            Py_RETURN_TRUE;
        }
    }
}
#include <jni.h>
#include "JCCEnv.h"
#include "java/io/FileFilter.h"
#include "java/io/File.h"
#include "java/lang/Class.h"
#include "JArray.h"

namespace java {
    namespace io {

        ::java::lang::Class *FileFilter::class$ = NULL;
        jmethodID *FileFilter::mids$ = NULL;

        jclass FileFilter::initializeClass()
        {
            if (!class$)
            {

                jclass cls = (jclass) env->findClass("java/io/FileFilter");

                mids$ = new jmethodID[max_mid];
                mids$[mid_accept_c3dacf5b] = env->getMethodID(cls, "accept", "(Ljava/io/File;)Z");

                class$ = (::java::lang::Class *) new JObject(cls);
            }
            return (jclass) class$->this$;
        }

        jboolean FileFilter::accept(const ::java::io::File & a0) const
        {
            return env->callBooleanMethod(this$, mids$[mid_accept_c3dacf5b], a0.this$);
        }
    }
}

#include "structmember.h"
#include "functions.h"
#include "macros.h"

namespace java {
    namespace io {
        static PyObject *t_FileFilter_cast_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FileFilter_instance_(PyTypeObject *type, PyObject *arg);
        static PyObject *t_FileFilter_accept(t_FileFilter *self, PyObject *arg);

        static PyMethodDef t_FileFilter__methods_[] = {
            DECLARE_METHOD(t_FileFilter, cast_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FileFilter, instance_, METH_O | METH_CLASS),
            DECLARE_METHOD(t_FileFilter, accept, METH_O),
            { NULL, NULL, 0, NULL }
        };

        DECLARE_TYPE(FileFilter, t_FileFilter, ::java::lang::Object, FileFilter, abstract_init, 0, 0, 0, 0, 0);

        void t_FileFilter::install(PyObject *module)
        {
            installType(&PY_TYPE(FileFilter), module, "FileFilter", 0);
        }

        void t_FileFilter::initialize(PyObject *module)
        {
            PyDict_SetItemString(PY_TYPE(FileFilter).tp_dict, "class_", make_descriptor(FileFilter::initializeClass, 1));
            PyDict_SetItemString(PY_TYPE(FileFilter).tp_dict, "wrapfn_", make_descriptor(t_FileFilter::wrap_jobject));
            PyDict_SetItemString(PY_TYPE(FileFilter).tp_dict, "boxfn_", make_descriptor(boxObject));
        }

        static PyObject *t_FileFilter_cast_(PyTypeObject *type, PyObject *arg)
        {
            if (!(arg = castCheck(arg, FileFilter::initializeClass, 1)))
                return NULL;
            return t_FileFilter::wrap_Object(FileFilter(((t_FileFilter *) arg)->object.this$));
        }
        static PyObject *t_FileFilter_instance_(PyTypeObject *type, PyObject *arg)
        {
            if (!castCheck(arg, FileFilter::initializeClass, 0))
                Py_RETURN_FALSE;
            Py_RETURN_TRUE;
        }

        static PyObject *t_FileFilter_accept(t_FileFilter *self, PyObject *arg)
        {
            ::java::io::File a0((jobject) NULL);
            jboolean result;

            if (!parseArg(arg, "k", ::java::io::File::initializeClass, &a0))
            {
                OBJ_CALL(result = self->object.accept(a0));
                Py_RETURN_BOOL(result);
            }

            PyErr_SetArgsError((PyObject *) self, "accept", arg);
            return NULL;
        }
    }
}
